
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a458  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003afc  0801a658  0801a658  0001b658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e154  0801e154  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801e154  0801e154  0001f154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e15c  0801e15c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e15c  0801e15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e160  0801e160  0001f160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0801e164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e18c  200001e4  0801e348  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e370  0801e348  00020370  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036850  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000890b  00000000  00000000  00056a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002808  00000000  00000000  0005f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fae  00000000  00000000  00061b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aaec  00000000  00000000  00063b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004198b  00000000  00000000  0009e612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125be9  00000000  00000000  000dff9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00205b86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b51c  00000000  00000000  00205bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  002110e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a640 	.word	0x0801a640

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0801a640 	.word	0x0801a640

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <humiditySensorAdcInit>:
#include "adc_sensors.h"


void humiditySensorAdcInit(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

	//activare ceas pentru GPIOA SI ADC1

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44

	//CONFIGURARE PA3 CA INTRARE ANALOGICA
	GPIOA->MODER |= GPIO_MODER_MODER3;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <humiditySensorAdcInit+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <humiditySensorAdcInit+0x84>)
 8000602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000612:	60d3      	str	r3, [r2, #12]

	//CONFIGURARE ADC1
	ADC1->CR2 = 0;//RESETARE REGISTRU CONTROL
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON; //ACTIVARE ADC
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 = 3; //CANALUL 3 IN PRIMA POZITIE DE SECVENTA DE CONVERSIE
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000628:	2203      	movs	r2, #3
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC1->SMPR2 |= ADC_SMPR2_SMP3;//SETARE TIMP ESNATIONARE CANALUL 3
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000632:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000636:	6113      	str	r3, [r2, #16]
	ADC1->CR1 = 0;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= ADC_CR2_EXTSEL;//SETARE DECLANSATOR SOFTWARE
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000644:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000648:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0; //ACTIVARE DECLANSATOR SOFTWARE
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	6093      	str	r3, [r2, #8]

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40012000 	.word	0x40012000

0800066c <humiditySensorReadValue>:

uint16_t humiditySensorReadValue(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_CR2_SWSTART; //start conversie
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <humiditySensorReadValue+0x30>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a09      	ldr	r2, [pc, #36]	@ (800069c <humiditySensorReadValue+0x30>)
 8000676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800067a:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & ADC_SR_EOC));//ASTEPTARE FINALIZARE CONVERSIE
 800067c:	bf00      	nop
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <humiditySensorReadValue+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <humiditySensorReadValue+0x12>

	return ADC1 -> DR;
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <humiditySensorReadValue+0x30>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	b29b      	uxth	r3, r3


}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000

080006a0 <humidity_read_task>:
void humidity_read_task(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while (1)
	    {
	        // Citește valoarea ADC de la senzorul de umiditate
	        int adc_value = humiditySensorReadValue();  // Funcția care citește ADC-ul senzorului de umiditate
 80006a8:	f7ff ffe0 	bl	800066c <humiditySensorReadValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	617b      	str	r3, [r7, #20]

	        // Asigură-te că valoarea ADC este între 1200 și 4000
	        if (adc_value < 1200) adc_value = 1200;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80006b6:	da02      	bge.n	80006be <humidity_read_task+0x1e>
 80006b8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80006bc:	617b      	str	r3, [r7, #20]
	        if (adc_value > 4000) adc_value = 4000;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006c4:	dd02      	ble.n	80006cc <humidity_read_task+0x2c>
 80006c6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80006ca:	617b      	str	r3, [r7, #20]

	        // Calculează valoarea umidității (în procente)
	        float humidity = (float)(4000 - adc_value) / (4000 - 1200) * 100;  // Transforma valoarea ADC într-un procent
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006da:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800071c <humidity_read_task+0x7c>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000720 <humidity_read_task+0x80>
 80006e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ea:	edc7 7a04 	vstr	s15, [r7, #16]

	        // Creează structura cu valorile citite
	        HumiditySensorData sensorData;
	        sensorData.humidity = humidity;       // Setează umiditatea
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	60bb      	str	r3, [r7, #8]
	        sensorData.adc_value = adc_value;    // Setează valoarea ADC
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	60fb      	str	r3, [r7, #12]

	        // Pune structura pe coadă (suprascrie orice valoare anterioară)
	        if (xQueueOverwrite(sensorQueue, &sensorData) != pdTRUE)
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <humidity_read_task+0x84>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f107 0108 	add.w	r1, r7, #8
 80006fe:	2302      	movs	r3, #2
 8000700:	2200      	movs	r2, #0
 8000702:	f006 fecf 	bl	80074a4 <xQueueGenericSend>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <humidity_read_task+0x72>
	        {
	            printf("Failed to send humidity data to queue\n");
 800070c:	4806      	ldr	r0, [pc, #24]	@ (8000728 <humidity_read_task+0x88>)
 800070e:	f017 fe71 	bl	80183f4 <puts>
	        }

	        // Așteaptă 5 secunde înainte de a citi din nou
	        vTaskDelay(pdMS_TO_TICKS(1000));
 8000712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000716:	f008 f843 	bl	80087a0 <vTaskDelay>
	    {
 800071a:	e7c5      	b.n	80006a8 <humidity_read_task+0x8>
 800071c:	452f0000 	.word	0x452f0000
 8000720:	42c80000 	.word	0x42c80000
 8000724:	2000068c 	.word	0x2000068c
 8000728:	0801a658 	.word	0x0801a658

0800072c <init_humidity_task>:
	    }
}
void init_humidity_task(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0
    osThreadAttr_t humidityTask_attributes = {
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2224      	movs	r2, #36	@ 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f017 ff99 	bl	8018670 <memset>
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <init_humidity_task+0x34>)
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	2318      	movs	r3, #24
 800074a:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };

    // Crează task-ul care citește umiditatea la fiecare 5 secunde
    osThreadNew(humidity_read_task, NULL, &humidityTask_attributes);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <init_humidity_task+0x38>)
 8000754:	f005 fdb2 	bl	80062bc <osThreadNew>
}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	@ 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0801a680 	.word	0x0801a680
 8000764:	080006a1 	.word	0x080006a1

08000768 <QueueInit>:
static void MX_USB_OTG_FS_PCD_Init(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */
QueueHandle_t sensorQueue;
void QueueInit(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	sensorQueue = xQueueCreate(1,sizeof(HumiditySensorData));
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	2001      	movs	r0, #1
 8000772:	f006 fcfe 	bl	8007172 <xQueueGenericCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <QueueInit+0x2c>)
 800077a:	6013      	str	r3, [r2, #0]

	if(sensorQueue == NULL){
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <QueueInit+0x2c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d104      	bne.n	800078e <QueueInit+0x26>
		printf("stiva pentru senzor umiditate nu a putut fi intializata");
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <QueueInit+0x30>)
 8000786:	f017 fdcd 	bl	8018324 <iprintf>
		while(1){};
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <QueueInit+0x22>
	//{
		//printf("siva leduri nu a putut fi initializata");
		//while(1){};
	//}

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000068c 	.word	0x2000068c
 8000798:	0801a69c 	.word	0x0801a69c

0800079c <_write>:
int _write(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 100);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <_write+0x24>)
 80007b2:	f003 ffd5 	bl	8004760 <HAL_UART_Transmit>
	return len;
 80007b6:	687b      	ldr	r3, [r7, #4]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000200 	.word	0x20000200

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fd47 	bl	800125a <HAL_Init>
  QueueInit();
 80007cc:	f7ff ffcc 	bl	8000768 <QueueInit>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f81e 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 f8ea 	bl	80009ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007d8:	f000 f88a 	bl	80008f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007dc:	f000 f8b8 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  humiditySensorAdcInit();
 80007e0:	f7ff fefe 	bl	80005e0 <humiditySensorAdcInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007e4:	f005 fcd8 	bl	8006198 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007e8:	4a06      	ldr	r2, [pc, #24]	@ (8000804 <main+0x40>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <main+0x44>)
 80007ee:	f005 fd65 	bl	80062bc <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a05      	ldr	r2, [pc, #20]	@ (800080c <main+0x48>)
 80007f6:	6013      	str	r3, [r2, #0]
  init_humidity_task();
 80007f8:	f7ff ff98 	bl	800072c <init_humidity_task>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007fc:	f005 fd00 	bl	8006200 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <main+0x3c>
 8000804:	0801dc28 	.word	0x0801dc28
 8000808:	08000af1 	.word	0x08000af1
 800080c:	20000688 	.word	0x20000688

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	@ 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2234      	movs	r2, #52	@ 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f017 ff26 	bl	8018670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000834:	f002 fad8 	bl	8002de8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <SystemClock_Config+0xd8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083c:	4a2a      	ldr	r2, [pc, #168]	@ (80008e8 <SystemClock_Config+0xd8>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	@ 0x40
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <SystemClock_Config+0xd8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <SystemClock_Config+0xdc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <SystemClock_Config+0xdc>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <SystemClock_Config+0xdc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800086c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000880:	23d8      	movs	r3, #216	@ 0xd8
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000888:	2309      	movs	r3, #9
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fb07 	bl	8002ea8 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f94c 	bl	8000b3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f002 fab0 	bl	8002e08 <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ae:	f000 f945 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2107      	movs	r1, #7
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fd97 	bl	8003404 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008dc:	f000 f92e 	bl	8000b3c <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	@ (800094c <MX_USART3_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART3_UART_Init+0x58>)
 8000934:	f003 fec6 	bl	80046c4 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 f8fd 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000200 	.word	0x20000200
 800094c:	40004800 	.word	0x40004800

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2206      	movs	r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2202      	movs	r2, #2
 8000972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2201      	movs	r2, #1
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	f002 f8df 	bl	8002b56 <HAL_PCD_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f8cd 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000284 	.word	0x20000284

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	@ 0x30
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b47      	ldr	r3, [pc, #284]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a46      	ldr	r2, [pc, #280]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a40      	ldr	r2, [pc, #256]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_GPIO_Init+0x134>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a58:	4822      	ldr	r0, [pc, #136]	@ (8000ae4 <MX_GPIO_Init+0x138>)
 8000a5a:	f002 f849 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	@ 0x40
 8000a62:	4821      	ldr	r0, [pc, #132]	@ (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a64:	f002 f844 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481b      	ldr	r0, [pc, #108]	@ (8000aec <MX_GPIO_Init+0x140>)
 8000a80:	f001 fe8a 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a84:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4811      	ldr	r0, [pc, #68]	@ (8000ae4 <MX_GPIO_Init+0x138>)
 8000a9e:	f001 fe7b 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa2:	2340      	movs	r3, #64	@ 0x40
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <MX_GPIO_Init+0x13c>)
 8000aba:	f001 fe6d 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_GPIO_Init+0x13c>)
 8000ad2:	f001 fe61 	bl	8002798 <HAL_GPIO_Init>

}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	@ 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40021800 	.word	0x40021800
 8000aec:	40020800 	.word	0x40020800

08000af0 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000af8:	f004 fdc8 	bl	800568c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000afc:	f000 fb70 	bl	80011e0 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b00:	2101      	movs	r1, #1
 8000b02:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <StartDefaultTask+0x24>)
 8000b04:	f002 f80d 	bl	8002b22 <HAL_GPIO_TogglePin>
	  osDelay(200);
 8000b08:	20c8      	movs	r0, #200	@ 0xc8
 8000b0a:	f005 fc7d 	bl	8006408 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b0e:	bf00      	nop
 8000b10:	e7f6      	b.n	8000b00 <StartDefaultTask+0x10>
 8000b12:	bf00      	nop
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f000 fba3 	bl	8001274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010000 	.word	0x40010000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fc71 	bl	800146c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2290      	movs	r2, #144	@ 0x90
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f017 fd59 	bl	8018670 <memset>
  if(huart->Instance==USART3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <HAL_UART_MspInit+0xb4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d13c      	bne.n	8000c42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fe6c 	bl	80038b4 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000be2:	f7ff ffab 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_UART_MspInit+0xbc>)
 8000c3e:	f001 fdab 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	37b8      	adds	r7, #184	@ 0xb8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40004800 	.word	0x40004800
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2290      	movs	r2, #144	@ 0x90
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f017 fcf9 	bl	8018670 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c86:	d159      	bne.n	8000d3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fe0b 	bl	80038b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ca4:	f7ff ff4a 	bl	8000b3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb4:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000ce8:	f001 fd56 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000d08:	f001 fd46 	bl	8002798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d10:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d16:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37b8      	adds	r7, #184	@ 0xb8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	@ 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2019      	movs	r0, #25
 8000d62:	f000 fb83 	bl	800146c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d66:	2019      	movs	r0, #25
 8000d68:	f000 fb9c 	bl	80014a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <HAL_InitTick+0xa0>)
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d70:	4a1e      	ldr	r2, [pc, #120]	@ (8000dec <HAL_InitTick+0xa0>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_InitTick+0xa0>)
 8000d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fd5e 	bl	8003850 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d94:	f002 fd48 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	@ (8000df0 <HAL_InitTick+0xa4>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <HAL_InitTick+0xac>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000db4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dce:	f003 f999 	bl	8004104 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dd8:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <HAL_InitTick+0xa8>)
 8000dda:	f003 f9f5 	bl	80041c8 <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	@ 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000690 	.word	0x20000690
 8000df8:	40010000 	.word	0x40010000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e3a:	f003 fa3d 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000690 	.word	0x20000690

08000e48 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <ETH_IRQHandler+0x10>)
 8000e4e:	f000 ff15 	bl	8001c7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20003e10 	.word	0x20003e10

08000e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_kill>:

int _kill(int pid, int sig)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <_kill+0x20>)
 8000e78:	2216      	movs	r2, #22
 8000e7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	2000e220 	.word	0x2000e220

08000e90 <_exit>:

void _exit (int status)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffe5 	bl	8000e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ea2:	bf00      	nop
 8000ea4:	e7fd      	b.n	8000ea2 <_exit+0x12>

08000ea6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e00a      	b.n	8000ece <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dbf0      	blt.n	8000eb8 <_read+0x12>
	}

return len;
 8000ed6:	687b      	ldr	r3, [r7, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f08:	605a      	str	r2, [r3, #4]
	return 0;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_isatty>:

int _isatty(int file)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
	return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d205      	bcs.n	8000f84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <_sbrk+0x6c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20080000 	.word	0x20080000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200006dc 	.word	0x200006dc
 8000fb0:	2000e370 	.word	0x2000e370
 8000fb4:	2000e220 	.word	0x2000e220

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <get_humidity_value>:
static struct netbuf *buf;
char msg[512];
char smsg[1024];

static float get_humidity_value(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
    HumiditySensorData sensor_data;
    // Verificăm dacă valoarea există în coadă
    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <get_humidity_value+0x30>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4639      	mov	r1, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fea0 	bl	8007d30 <xQueuePeek>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <get_humidity_value+0x1e>
    {
        return sensor_data.humidity; // Returnăm valoarea umidității
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	e000      	b.n	8000ffc <get_humidity_value+0x20>
    }
    return -1.0f; // Dacă nu sunt date, returnăm o valoare invalidă
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <get_humidity_value+0x34>)
}
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000068c 	.word	0x2000068c
 8001010:	bf800000 	.word	0xbf800000

08001014 <process_http_request>:
// Funcție pentru a analiza cererea HTTP
static void process_http_request(const char *request, char *response)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a2      	sub	sp, #136	@ 0x88
 8001018:	af02      	add	r7, sp, #8
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 800101e:	4923      	ldr	r1, [pc, #140]	@ (80010ac <process_http_request+0x98>)
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f017 fb4f 	bl	80186c4 <strstr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d026      	beq.n	800107a <process_http_request+0x66>
    {
    	 /// Obținem valoarea umidității din coadă
        float humidity = get_humidity_value();
 800102c:	f7ff ffd6 	bl	8000fdc <get_humidity_value>
 8001030:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c

        // Dacă nu avem o valoare validă (de exemplu, dacă nu sunt date în coadă), trimitem un mesaj de eroare
        if (humidity < 0)
 8001034:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d501      	bpl.n	8001046 <process_http_request+0x32>
        {
            humidity = -1.0f; // Setăm valoare invalidă
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <process_http_request+0x9c>)
 8001044:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }

        // Pregătește răspunsul cu valoarea umidității
        char humidity_str[100];
       // snprintf(humidity_str, sizeof(humidity_str), "<html><body><h1>Humidity: %.2f%%</h1></body></html>", humidity);
        snprintf(humidity_str, sizeof(humidity_str), "%.2f", humidity);
 8001046:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800104a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	ed8d 7b00 	vstr	d7, [sp]
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <process_http_request+0xa0>)
 8001058:	2164      	movs	r1, #100	@ 0x64
 800105a:	4618      	mov	r0, r3
 800105c:	f017 f9d2 	bl	8018404 <sniprintf>
        const char *http_response =
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <process_http_request+0xa4>)
 8001062:	673b      	str	r3, [r7, #112]	@ 0x70
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n";
        strcpy(response, http_response);
 8001064:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f017 fbb3 	bl	80187d2 <strcpy>
        strcat(response, humidity_str);  // Concatenate valoarea umidității la răspuns
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f017 fb04 	bl	8018680 <strcat>
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
    }
}
 8001078:	e013      	b.n	80010a2 <process_http_request+0x8e>
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 800107a:	4910      	ldr	r1, [pc, #64]	@ (80010bc <process_http_request+0xa8>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f017 fb21 	bl	80186c4 <strstr>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <process_http_request+0x82>
        const char *http_response =
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <process_http_request+0xac>)
 800108a:	677b      	str	r3, [r7, #116]	@ 0x74
        strcpy(response, http_response);
 800108c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f017 fb9f 	bl	80187d2 <strcpy>
}
 8001094:	e005      	b.n	80010a2 <process_http_request+0x8e>
        const char *http_response =
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <process_http_request+0xb0>)
 8001098:	67bb      	str	r3, [r7, #120]	@ 0x78
        strcpy(response, http_response);
 800109a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f017 fb98 	bl	80187d2 <strcpy>
}
 80010a2:	bf00      	nop
 80010a4:	3780      	adds	r7, #128	@ 0x80
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0801a6d4 	.word	0x0801a6d4
 80010b0:	bf800000 	.word	0xbf800000
 80010b4:	0801a6e4 	.word	0x0801a6e4
 80010b8:	0801a6ec 	.word	0x0801a6ec
 80010bc:	0801a72c 	.word	0x0801a72c
 80010c0:	0801a73c 	.word	0x0801a73c
 80010c4:	0801a7b8 	.word	0x0801a7b8

080010c8 <tcp_thread>:

// Funcția principală a serverului TCP
static void tcp_thread(void *arg)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;

    // Creează o conexiune TCP
    conn = netconn_new(NETCONN_TCP);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2010      	movs	r0, #16
 80010d6:	f009 f9b7 	bl	800a448 <netconn_new_with_proto_and_callback>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a37      	ldr	r2, [pc, #220]	@ (80011bc <tcp_thread+0xf4>)
 80010de:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <tcp_thread+0xf4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d065      	beq.n	80011b4 <tcp_thread+0xec>
    {
        // Leagă conexiunea de portul 80 (HTTP default)
        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80010e8:	4b34      	ldr	r3, [pc, #208]	@ (80011bc <tcp_thread+0xf4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2250      	movs	r2, #80	@ 0x50
 80010ee:	4934      	ldr	r1, [pc, #208]	@ (80011c0 <tcp_thread+0xf8>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 fa63 	bl	800a5bc <netconn_bind>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d150      	bne.n	80011a4 <tcp_thread+0xdc>
        {
            // Intră în modul de ascultare
            netconn_listen(conn);
 8001102:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <tcp_thread+0xf4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	21ff      	movs	r1, #255	@ 0xff
 8001108:	4618      	mov	r0, r3
 800110a:	f009 fa8f 	bl	800a62c <netconn_listen_with_backlog>

            while (1)
            {
                // Acceptă o nouă conexiune
                accept_err = netconn_accept(conn, &newconn);
 800110e:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <tcp_thread+0xf4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	492c      	ldr	r1, [pc, #176]	@ (80011c4 <tcp_thread+0xfc>)
 8001114:	4618      	mov	r0, r3
 8001116:	f009 fab5 	bl	800a684 <netconn_accept>
 800111a:	4603      	mov	r3, r0
 800111c:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 800111e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d13a      	bne.n	800119c <tcp_thread+0xd4>
                {
                    // Primește date de la client
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8001126:	e02f      	b.n	8001188 <tcp_thread+0xc0>
                    {
                        // Procesează cererea HTTP
                        strncpy(msg, buf->p->payload, buf->p->len);  // Extrage cererea
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <tcp_thread+0x100>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <tcp_thread+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	895b      	ldrh	r3, [r3, #10]
 8001138:	461a      	mov	r2, r3
 800113a:	4824      	ldr	r0, [pc, #144]	@ (80011cc <tcp_thread+0x104>)
 800113c:	f017 faaf 	bl	801869e <strncpy>

                        // Print pentru debug
                        printf("Received request: %s\n", msg);
 8001140:	4922      	ldr	r1, [pc, #136]	@ (80011cc <tcp_thread+0x104>)
 8001142:	4823      	ldr	r0, [pc, #140]	@ (80011d0 <tcp_thread+0x108>)
 8001144:	f017 f8ee 	bl	8018324 <iprintf>

                        // Pregătește răspunsul HTTP
                        process_http_request(msg, smsg);
 8001148:	4922      	ldr	r1, [pc, #136]	@ (80011d4 <tcp_thread+0x10c>)
 800114a:	4820      	ldr	r0, [pc, #128]	@ (80011cc <tcp_thread+0x104>)
 800114c:	f7ff ff62 	bl	8001014 <process_http_request>

                        // Trimite răspunsul la client
                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <tcp_thread+0xfc>)
 8001152:	681c      	ldr	r4, [r3, #0]
 8001154:	481f      	ldr	r0, [pc, #124]	@ (80011d4 <tcp_thread+0x10c>)
 8001156:	f7ff f8c3 	bl	80002e0 <strlen>
 800115a:	4602      	mov	r2, r0
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	491c      	ldr	r1, [pc, #112]	@ (80011d4 <tcp_thread+0x10c>)
 8001164:	4620      	mov	r0, r4
 8001166:	f009 fd0f 	bl	800ab88 <netconn_write_partly>

                        // Curăță bufferul
                        netbuf_delete(buf);
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <tcp_thread+0x100>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f00b fa0a 	bl	800c588 <netbuf_delete>

                        // Închide și șterge conexiunea după fiecare răspuns
                        netconn_close(newconn);
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <tcp_thread+0xfc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f009 fe07 	bl	800ad8c <netconn_close>
                        netconn_delete(newconn);
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <tcp_thread+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f009 f9fe 	bl	800a584 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <tcp_thread+0xfc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <tcp_thread+0x100>)
 800118e:	4618      	mov	r0, r3
 8001190:	f009 fc80 	bl	800aa94 <netconn_recv>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0c6      	beq.n	8001128 <tcp_thread+0x60>
 800119a:	e7b8      	b.n	800110e <tcp_thread+0x46>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 800119c:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <tcp_thread+0x110>)
 800119e:	f017 f929 	bl	80183f4 <puts>
                accept_err = netconn_accept(conn, &newconn);
 80011a2:	e7b4      	b.n	800110e <tcp_thread+0x46>
                }
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <tcp_thread+0x114>)
 80011a6:	f017 f925 	bl	80183f4 <puts>
            netconn_delete(conn);
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <tcp_thread+0xf4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 f9e8 	bl	800a584 <netconn_delete>
        }
    }
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	200006e0 	.word	0x200006e0
 80011c0:	0801dd78 	.word	0x0801dd78
 80011c4:	200006e4 	.word	0x200006e4
 80011c8:	200006e8 	.word	0x200006e8
 80011cc:	200006ec 	.word	0x200006ec
 80011d0:	0801a818 	.word	0x0801a818
 80011d4:	200008ec 	.word	0x200008ec
 80011d8:	0801a830 	.word	0x0801a830
 80011dc:	0801a84c 	.word	0x0801a84c

080011e0 <tcpserver_init>:

// Funcția de inițializare
void tcpserver_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 80011e6:	2318      	movs	r3, #24
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011ee:	2200      	movs	r2, #0
 80011f0:	4903      	ldr	r1, [pc, #12]	@ (8001200 <tcpserver_init+0x20>)
 80011f2:	4804      	ldr	r0, [pc, #16]	@ (8001204 <tcpserver_init+0x24>)
 80011f4:	f016 fb20 	bl	8017838 <sys_thread_new>
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	080010c9 	.word	0x080010c9
 8001204:	0801a868 	.word	0x0801a868

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120e:	490e      	ldr	r1, [pc, #56]	@ (8001248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001210:	4a0e      	ldr	r2, [pc, #56]	@ (800124c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001224:	4c0b      	ldr	r4, [pc, #44]	@ (8001254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001232:	f7ff fec1 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f017 faa5 	bl	8018784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fac3 	bl	80007c4 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800124c:	0801e164 	.word	0x0801e164
  ldr r2, =_sbss
 8001250:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001254:	2000e370 	.word	0x2000e370

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>

0800125a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125e:	2003      	movs	r0, #3
 8001260:	f000 f8f9 	bl	8001456 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001264:	200f      	movs	r0, #15
 8001266:	f7ff fd71 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126a:	f7ff fc6d 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000cec 	.word	0x20000cec

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000cec 	.word	0x20000cec

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	05fa0000 	.word	0x05fa0000

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	@ (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff4c 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147e:	f7ff ff61 	bl	8001344 <__NVIC_GetPriorityGrouping>
 8001482:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	6978      	ldr	r0, [r7, #20]
 800148a:	f7ff ffb1 	bl	80013f0 <NVIC_EncodePriority>
 800148e:	4602      	mov	r2, r0
 8001490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff80 	bl	800139c <__NVIC_SetPriority>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff54 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80014d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001754 <HAL_ETH_Init+0x294>)
 80014d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e180      	b.n	80017e8 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f004 fa28 	bl	8005950 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	4b95      	ldr	r3, [pc, #596]	@ (8001758 <HAL_ETH_Init+0x298>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	4a94      	ldr	r2, [pc, #592]	@ (8001758 <HAL_ETH_Init+0x298>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150a:	6453      	str	r3, [r2, #68]	@ 0x44
 800150c:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <HAL_ETH_Init+0x298>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001518:	4b90      	ldr	r3, [pc, #576]	@ (800175c <HAL_ETH_Init+0x29c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a8f      	ldr	r2, [pc, #572]	@ (800175c <HAL_ETH_Init+0x29c>)
 800151e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001522:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001524:	4b8d      	ldr	r3, [pc, #564]	@ (800175c <HAL_ETH_Init+0x29c>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	498b      	ldr	r1, [pc, #556]	@ (800175c <HAL_ETH_Init+0x29c>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001548:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800154a:	f7ff fea7 	bl	800129c <HAL_GetTick>
 800154e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001550:	e011      	b.n	8001576 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001552:	f7ff fea3 	bl	800129c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001560:	d909      	bls.n	8001576 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e138      	b.n	80017e8 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f023 031c 	bic.w	r3, r3, #28
 8001596:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001598:	f002 f926 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 800159c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001760 <HAL_ETH_Init+0x2a0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d908      	bls.n	80015b8 <HAL_ETH_Init+0xf8>
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001764 <HAL_ETH_Init+0x2a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d804      	bhi.n	80015b8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e027      	b.n	8001608 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001764 <HAL_ETH_Init+0x2a4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d908      	bls.n	80015d2 <HAL_ETH_Init+0x112>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	4a64      	ldr	r2, [pc, #400]	@ (8001754 <HAL_ETH_Init+0x294>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d204      	bcs.n	80015d2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f043 030c 	orr.w	r3, r3, #12
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e01a      	b.n	8001608 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4a5f      	ldr	r2, [pc, #380]	@ (8001754 <HAL_ETH_Init+0x294>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d303      	bcc.n	80015e2 <HAL_ETH_Init+0x122>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4a62      	ldr	r2, [pc, #392]	@ (8001768 <HAL_ETH_Init+0x2a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d911      	bls.n	8001606 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4a60      	ldr	r2, [pc, #384]	@ (8001768 <HAL_ETH_Init+0x2a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d908      	bls.n	80015fc <HAL_ETH_Init+0x13c>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4a5f      	ldr	r2, [pc, #380]	@ (800176c <HAL_ETH_Init+0x2ac>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d804      	bhi.n	80015fc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e005      	b.n	8001608 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e000      	b.n	8001608 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001606:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001610:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001614:	2100      	movs	r1, #0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fc10 	bl	8001e3c <HAL_ETH_WritePHYRegister>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001626:	6939      	ldr	r1, [r7, #16]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fdc5 	bl	80021b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0d6      	b.n	80017e8 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800163a:	20ff      	movs	r0, #255	@ 0xff
 800163c:	f7ff fe3a 	bl	80012b4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a4 	beq.w	8001792 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800164a:	f7ff fe27 	bl	800129c <HAL_GetTick>
 800164e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	461a      	mov	r2, r3
 8001656:	2101      	movs	r1, #1
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fb87 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800165e:	f7ff fe1d 	bl	800129c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d90f      	bls.n	8001690 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fd9e 	bl	80021b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0ab      	b.n	80017e8 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0da      	beq.n	8001650 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800169a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fbcb 	bl	8001e3c <HAL_ETH_WritePHYRegister>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016b0:	6939      	ldr	r1, [r7, #16]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fd80 	bl	80021b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016c0:	2301      	movs	r3, #1
 80016c2:	e091      	b.n	80017e8 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff fdea 	bl	800129c <HAL_GetTick>
 80016c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	461a      	mov	r2, r3
 80016d0:	2101      	movs	r1, #1
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fb4a 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016d8:	f7ff fde0 	bl	800129c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d90f      	bls.n	800170a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fd61 	bl	80021b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e06e      	b.n	80017e8 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0da      	beq.n	80016ca <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	461a      	mov	r2, r3
 800171a:	2110      	movs	r1, #16
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fb25 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00b      	beq.n	8001740 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fd42 	bl	80021b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800173c:	2301      	movs	r3, #1
 800173e:	e053      	b.n	80017e8 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e010      	b.n	8001776 <HAL_ETH_Init+0x2b6>
 8001754:	03938700 	.word	0x03938700
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	01312cff 	.word	0x01312cff
 8001764:	02160ebf 	.word	0x02160ebf
 8001768:	05f5e0ff 	.word	0x05f5e0ff
 800176c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	e026      	b.n	80017d6 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e021      	b.n	80017d6 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fb46 	bl	8001e3c <HAL_ETH_WritePHYRegister>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017ba:	6939      	ldr	r1, [r7, #16]
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fcfb 	bl	80021b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00c      	b.n	80017e8 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017ce:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80017d2:	f7ff fd6f 	bl	80012b4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fced 	bl	80021b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ETH_DMATxDescListInit+0x20>
 800180c:	2302      	movs	r3, #2
 800180e:	e051      	b.n	80018b4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e030      	b.n	800188e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	d208      	bcs.n	8001882 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	461a      	mov	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	e002      	b.n	8001888 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3ca      	bcc.n	800182c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ETH_DMARxDescListInit+0x20>
 80018dc:	2302      	movs	r3, #2
 80018de:	e055      	b.n	800198c <HAL_ETH_DMARxDescListInit+0xcc>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e034      	b.n	8001966 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	4413      	add	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800190c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001914:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	461a      	mov	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	d208      	bcs.n	800195a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4413      	add	r3, r2
 8001952:	461a      	mov	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e002      	b.n	8001960 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3c6      	bcc.n	80018fc <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001978:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ETH_TransmitFrame+0x24>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e0cc      	b.n	8001b56 <HAL_ETH_TransmitFrame+0x1be>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0b7      	b.n	8001b56 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da09      	bge.n	8001a04 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2212      	movs	r2, #18
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a8      	b.n	8001b56 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d915      	bls.n	8001a3a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4a54      	ldr	r2, [pc, #336]	@ (8001b64 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a22:	0a9b      	lsrs	r3, r3, #10
 8001a24:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e001      	b.n	8001a3e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d11c      	bne.n	8001a7e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001a52:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a5e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001a6e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a7c:	e04b      	b.n	8001b16 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e044      	b.n	8001b0e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a92:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001aa8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001ab2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d116      	bne.n	8001aec <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001acc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_ETH_TransmitFrame+0x1d0>)
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8001ade:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aea:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001afa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3b6      	bcc.n	8001a84 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	461a      	mov	r2, r3
 8001b32:	2304      	movs	r3, #4
 8001b34:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	ac02b00b 	.word	0xac02b00b
 8001b68:	fffffa0c 	.word	0xfffffa0c

08001b6c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e074      	b.n	8001c70 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b96:	e05a      	b.n	8001c4e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bac:	d10d      	bne.n	8001bca <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bc8:	e041      	b.n	8001c4e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bee:	e02e      	b.n	8001c4e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d103      	bne.n	8001c12 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c1e:	1f1a      	subs	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e010      	b.n	8001c70 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db02      	blt.n	8001c5e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d99c      	bls.n	8001b98 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c92:	2b40      	cmp	r3, #64	@ 0x40
 8001c94:	d112      	bne.n	8001cbc <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f003 ff1a 	bl	8005ad0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2340      	movs	r3, #64	@ 0x40
 8001ca8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cba:	e01a      	b.n	8001cf2 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d111      	bne.n	8001cf2 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f838 	bl	8001d44 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d00:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d14:	d112      	bne.n	8001d3c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f81e 	bl	8001d58 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d24:	461a      	mov	r2, r3
 8001d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d2a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	460b      	mov	r3, r1
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b82      	cmp	r3, #130	@ 0x82
 8001d8c:	d101      	bne.n	8001d92 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e050      	b.n	8001e34 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2282      	movs	r2, #130	@ 0x82
 8001d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 031c 	and.w	r3, r3, #28
 8001da8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8a1b      	ldrh	r3, [r3, #16]
 8001dae:	02db      	lsls	r3, r3, #11
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f023 0302 	bic.w	r3, r3, #2
 8001dcc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dde:	f7ff fa5d 	bl	800129c <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de4:	e015      	b.n	8001e12 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001de6:	f7ff fa59 	bl	800129c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df4:	d309      	bcc.n	8001e0a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e014      	b.n	8001e34 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e4      	bne.n	8001de6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	460b      	mov	r3, r1
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b42      	cmp	r3, #66	@ 0x42
 8001e5c:	d101      	bne.n	8001e62 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e04e      	b.n	8001f00 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2242      	movs	r2, #66	@ 0x42
 8001e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 031c 	and.w	r3, r3, #28
 8001e78:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8a1b      	ldrh	r3, [r3, #16]
 8001e7e:	02db      	lsls	r3, r3, #11
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb8:	f7ff f9f0 	bl	800129c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ebe:	e015      	b.n	8001eec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001ec0:	f7ff f9ec 	bl	800129c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ece:	d309      	bcc.n	8001ee4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e00d      	b.n	8001f00 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e4      	bne.n	8001ec0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ETH_Start+0x16>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e01f      	b.n	8001f5e <HAL_ETH_Start+0x56>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fb40 	bl	80025b4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb77 	bl	8002628 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fc06 	bl	800274c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fbab 	bl	800269c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fbd4 	bl	80026f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_ETH_Stop+0x16>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e01f      	b.n	8001fbc <HAL_ETH_Stop+0x56>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fb9b 	bl	80026c8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fbc4 	bl	8002720 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb62 	bl	8002662 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fbd4 	bl	800274c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb22 	bl	80025ee <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ETH_ConfigMAC+0x1c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e0e4      	b.n	80021aa <HAL_ETH_ConfigMAC+0x1e6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80b1 	beq.w	800215a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4b6c      	ldr	r3, [pc, #432]	@ (80021b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002010:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002016:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800201c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002022:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002028:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800202e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002034:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800203a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002040:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002046:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 800204c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 8002052:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff f922 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002080:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8002086:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 800208c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 8002092:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8002098:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800209e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80020aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff f8fc 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 80020fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8002100:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002106:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 800210c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff f8c5 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800214a:	2001      	movs	r0, #1
 800214c:	f7ff f8b2 	bl	80012b4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	61da      	str	r2, [r3, #28]
 8002158:	e01e      	b.n	8002198 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002168:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff f892 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	ff20810f 	.word	0xff20810f

080021b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0b0      	sub	sp, #192	@ 0xc0
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021e6:	2300      	movs	r3, #0
 80021e8:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002202:	663b      	str	r3, [r7, #96]	@ 0x60
 8002204:	e001      	b.n	800220a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800220a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800220e:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002214:	2300      	movs	r3, #0
 8002216:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002224:	2340      	movs	r3, #64	@ 0x40
 8002226:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800228c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002290:	4ba9      	ldr	r3, [pc, #676]	@ (8002538 <ETH_MACDMAConfig+0x380>)
 8002292:	4013      	ands	r3, r2
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 800229a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800229c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800229e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 80022a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 80022a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 80022ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 80022b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 80022bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 80022c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 80022c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 80022cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80022e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7fe ffe1 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80022fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80022fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002300:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002302:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8002304:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002306:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 800230a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800230c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8002310:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002312:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002316:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 800231c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002320:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002328:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800232a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe ffbc 	bl	80012b4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002344:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800234e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002358:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002364:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002368:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800236c:	4013      	ands	r3, r2
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002372:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002376:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800237c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800237e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002382:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002388:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800238a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 800238e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002394:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002396:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80023a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7fe ff7d 	bl	80012b4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80023c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 80023c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe ff68 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80023ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002400:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002412:	2304      	movs	r3, #4
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800241c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002432:	2300      	movs	r3, #0
 8002434:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002436:	2300      	movs	r3, #0
 8002438:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002448:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <ETH_MACDMAConfig+0x384>)
 800244e:	4013      	ands	r3, r2
 8002450:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002454:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002456:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002458:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800245a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800245c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800245e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002460:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002462:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002464:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002466:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002468:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800246a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800246c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002470:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002474:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002476:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	461a      	mov	r2, r3
 800248a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800248e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe ff08 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ac:	461a      	mov	r2, r3
 80024ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024b2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 80024bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 80024c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80024c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80024ce:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024dc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7fe fee1 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	461a      	mov	r2, r3
 80024fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002500:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10b      	bne.n	8002522 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <ETH_MACDMAConfig+0x388>)
 800251a:	430b      	orrs	r3, r1
 800251c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002520:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	461a      	mov	r2, r3
 8002528:	2100      	movs	r1, #0
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f80a 	bl	8002544 <ETH_MACAddressConfig>
}
 8002530:	bf00      	nop
 8002532:	37c0      	adds	r7, #192	@ 0xc0
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	ff20810f 	.word	0xff20810f
 800253c:	f8de3f23 	.word	0xf8de3f23
 8002540:	00010040 	.word	0x00010040

08002544 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3305      	adds	r3, #5
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	3204      	adds	r2, #4
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <ETH_MACAddressConfig+0x68>)
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3303      	adds	r3, #3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	061a      	lsls	r2, r3, #24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3302      	adds	r3, #2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3301      	adds	r3, #1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4313      	orrs	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <ETH_MACAddressConfig+0x6c>)
 8002596:	4413      	add	r3, r2
 8002598:	461a      	mov	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6013      	str	r3, [r2, #0]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40028040 	.word	0x40028040
 80025b0:	40028044 	.word	0x40028044

080025b4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d8:	2001      	movs	r0, #1
 80025da:	f7fe fe6b 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0208 	bic.w	r2, r2, #8
 8002608:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002612:	2001      	movs	r0, #1
 8002614:	f7fe fe4e 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0204 	orr.w	r2, r2, #4
 8002642:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800264c:	2001      	movs	r0, #1
 800264e:	f7fe fe31 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0204 	bic.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002686:	2001      	movs	r0, #1
 8002688:	f7fe fe14 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ba:	6193      	str	r3, [r2, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026e6:	6193      	str	r3, [r2, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002712:	6193      	str	r3, [r2, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f023 0302 	bic.w	r3, r3, #2
 800273a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800273e:	6193      	str	r3, [r2, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800276a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800276e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277c:	2001      	movs	r0, #1
 800277e:	f7fe fd99 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800278c:	6193      	str	r3, [r2, #24]
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e175      	b.n	8002aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	f040 8164 	bne.w	8002a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d005      	beq.n	80027ee <HAL_GPIO_Init+0x56>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d130      	bne.n	8002850 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d017      	beq.n	800288c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d123      	bne.n	80028e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80be 	beq.w	8002a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a65      	ldr	r2, [pc, #404]	@ (8002abc <HAL_GPIO_Init+0x324>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_GPIO_Init+0x324>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800293a:	4a61      	ldr	r2, [pc, #388]	@ (8002ac0 <HAL_GPIO_Init+0x328>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	@ (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d037      	beq.n	80029d6 <HAL_GPIO_Init+0x23e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a57      	ldr	r2, [pc, #348]	@ (8002ac8 <HAL_GPIO_Init+0x330>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_GPIO_Init+0x23a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a56      	ldr	r2, [pc, #344]	@ (8002acc <HAL_GPIO_Init+0x334>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d02b      	beq.n	80029ce <HAL_GPIO_Init+0x236>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a55      	ldr	r2, [pc, #340]	@ (8002ad0 <HAL_GPIO_Init+0x338>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d025      	beq.n	80029ca <HAL_GPIO_Init+0x232>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a54      	ldr	r2, [pc, #336]	@ (8002ad4 <HAL_GPIO_Init+0x33c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <HAL_GPIO_Init+0x22e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a53      	ldr	r2, [pc, #332]	@ (8002ad8 <HAL_GPIO_Init+0x340>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x22a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_GPIO_Init+0x344>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	@ (8002ae0 <HAL_GPIO_Init+0x348>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	@ (8002ae4 <HAL_GPIO_Init+0x34c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae8 <HAL_GPIO_Init+0x350>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x21a>
 80029ae:	2309      	movs	r3, #9
 80029b0:	e012      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b2:	230a      	movs	r3, #10
 80029b4:	e010      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b6:	2308      	movs	r3, #8
 80029b8:	e00e      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	@ (8002ac0 <HAL_GPIO_Init+0x328>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <HAL_GPIO_Init+0x354>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1a:	4a34      	ldr	r2, [pc, #208]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a20:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a44:	4a29      	ldr	r2, [pc, #164]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <HAL_GPIO_Init+0x354>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae86 	bls.w	80027b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40022400 	.word	0x40022400
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b34:	887a      	ldrh	r2, [r7, #2]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	041a      	lsls	r2, r3, #16
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	400b      	ands	r3, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b58:	b08f      	sub	sp, #60	@ 0x3c
 8002b5a:	af0a      	add	r7, sp, #40	@ 0x28
 8002b5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e116      	b.n	8002d96 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f868 	bl	8000c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fada 	bl	8005160 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	687e      	ldr	r6, [r7, #4]
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	f106 0410 	add.w	r4, r6, #16
 8002bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bca:	1d33      	adds	r3, r6, #4
 8002bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bce:	6838      	ldr	r0, [r7, #0]
 8002bd0:	f002 fa6e 	bl	80050b0 <USB_CoreInit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0d7      	b.n	8002d96 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fac8 	bl	8005182 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e04a      	b.n	8002c8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	333d      	adds	r3, #61	@ 0x3d
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	333c      	adds	r3, #60	@ 0x3c
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	b298      	uxth	r0, r3
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3342      	adds	r3, #66	@ 0x42
 8002c34:	4602      	mov	r2, r0
 8002c36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333f      	adds	r3, #63	@ 0x3f
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3344      	adds	r3, #68	@ 0x44
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3348      	adds	r3, #72	@ 0x48
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3350      	adds	r3, #80	@ 0x50
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3af      	bcc.n	8002bf8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e044      	b.n	8002d28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	3301      	adds	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3b5      	bcc.n	8002c9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	687e      	ldr	r6, [r7, #4]
 8002d3a:	466d      	mov	r5, sp
 8002d3c:	f106 0410 	add.w	r4, r6, #16
 8002d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d50:	1d33      	adds	r3, r6, #4
 8002d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f002 fa61 	bl	800521c <USB_DevInit>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e014      	b.n	8002d96 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f80b 	bl	8002da0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fc1b 	bl	80055ca <USB_DevDisconnect>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002da0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	10000003 	.word	0x10000003

08002de8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40007000 	.word	0x40007000

08002e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e36:	f7fe fa31 	bl	800129c <HAL_GetTick>
 8002e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e3c:	e009      	b.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e3e:	f7fe fa2d 	bl	800129c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4c:	d901      	bls.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e022      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e52:	4b14      	ldr	r3, [pc, #80]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7fe fa16 	bl	800129c <HAL_GetTick>
 8002e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e72:	e009      	b.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e74:	f7fe fa12 	bl	800129c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e82:	d901      	bls.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e007      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e94:	d1ee      	bne.n	8002e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e29b      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8087 	beq.w	8002fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ecc:	4b96      	ldr	r3, [pc, #600]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed8:	4b93      	ldr	r3, [pc, #588]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
 8002ee4:	4b90      	ldr	r3, [pc, #576]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d06c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x130>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d168      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e275      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x7a>
 8002f14:	4b84      	ldr	r3, [pc, #528]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a83      	ldr	r2, [pc, #524]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x9c>
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b7c      	ldr	r3, [pc, #496]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	4b76      	ldr	r3, [pc, #472]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b73      	ldr	r3, [pc, #460]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a72      	ldr	r2, [pc, #456]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f68:	4b6f      	ldr	r3, [pc, #444]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b6c      	ldr	r3, [pc, #432]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe f988 	bl	800129c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe f984 	bl	800129c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e229      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f974 	bl	800129c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe f970 	bl	800129c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e215      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x110>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d069      	beq.n	80030ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe6:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x190>
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x17a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1e9      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	493d      	ldr	r1, [pc, #244]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e040      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d023      	beq.n	8003088 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a38      	ldr	r2, [pc, #224]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe f926 	bl	800129c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe f922 	bl	800129c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1c7      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4929      	ldr	r1, [pc, #164]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003088:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a26      	ldr	r2, [pc, #152]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f902 	bl	800129c <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe f8fe 	bl	800129c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1a3      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d038      	beq.n	8003138 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	4a15      	ldr	r2, [pc, #84]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe f8df 	bl	800129c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe f8db 	bl	800129c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e180      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x23a>
 8003100:	e01a      	b.n	8003138 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe f8c5 	bl	800129c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe f8c1 	bl	800129c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d903      	bls.n	800312c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e166      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
 8003128:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b92      	ldr	r3, [pc, #584]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a4 	beq.w	800328e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b8c      	ldr	r3, [pc, #560]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b89      	ldr	r3, [pc, #548]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a88      	ldr	r2, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b86      	ldr	r3, [pc, #536]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b83      	ldr	r3, [pc, #524]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800317a:	4b80      	ldr	r3, [pc, #512]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7f      	ldr	r2, [pc, #508]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe f889 	bl	800129c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe f885 	bl	800129c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	@ 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e12a      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x31a>
 80031b4:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	e02d      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x33c>
 80031ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	e01c      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x35e>
 80031ec:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a61      	ldr	r2, [pc, #388]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	@ 0x70
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 8003206:	4b5c      	ldr	r3, [pc, #368]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a5b      	ldr	r2, [pc, #364]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
 8003212:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fe f839 	bl	800129c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe f835 	bl	800129c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0d8      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b4c      	ldr	r3, [pc, #304]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x386>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe f823 	bl	800129c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe f81f 	bl	800129c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0c2      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	4a3c      	ldr	r2, [pc, #240]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80ae 	beq.w	80033f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003298:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d06d      	beq.n	8003380 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d14b      	bne.n	8003344 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd fff0 	bl	800129c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ffec 	bl	800129c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e091      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	491b      	ldr	r1, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd ffbe 	bl	800129c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fd ffba 	bl	800129c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e05f      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x47c>
 8003342:	e057      	b.n	80033f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800334a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fd ffa4 	bl	800129c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fd ffa0 	bl	800129c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x4b0>
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x54c>
 8003378:	40023800 	.word	0x40023800
 800337c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003380:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <HAL_RCC_OscConfig+0x558>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d030      	beq.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d129      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d122      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d119      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10f      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	4965      	ldr	r1, [pc, #404]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800346e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a52      	ldr	r2, [pc, #328]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fd fed0 	bl	800129c <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd fecc 	bl	800129c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	4922      	ldr	r1, [pc, #136]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	@ (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	@ (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_RCC_ClockConfig+0x1d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fbc8 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023c00 	.word	0x40023c00
 80035cc:	40023800 	.word	0x40023800
 80035d0:	0801dc4c 	.word	0x0801dc4c
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e0:	b094      	sub	sp, #80	@ 0x50
 80035e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e8:	2300      	movs	r3, #0
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ec:	2300      	movs	r3, #0
 80035ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f4:	4b79      	ldr	r3, [pc, #484]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d00d      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x40>
 8003600:	2b08      	cmp	r3, #8
 8003602:	f200 80e1 	bhi.w	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x34>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x3a>
 800360e:	e0db      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b73      	ldr	r3, [pc, #460]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003614:	e0db      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003616:	4b73      	ldr	r3, [pc, #460]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800361a:	e0d8      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003624:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003626:	4b6d      	ldr	r3, [pc, #436]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2200      	movs	r2, #0
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800363c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	2300      	movs	r3, #0
 8003648:	637b      	str	r3, [r7, #52]	@ 0x34
 800364a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800364e:	4622      	mov	r2, r4
 8003650:	462b      	mov	r3, r5
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	0159      	lsls	r1, r3, #5
 800365c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003660:	0150      	lsls	r0, r2, #5
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4621      	mov	r1, r4
 8003668:	1a51      	subs	r1, r2, r1
 800366a:	6139      	str	r1, [r7, #16]
 800366c:	4629      	mov	r1, r5
 800366e:	eb63 0301 	sbc.w	r3, r3, r1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003680:	4659      	mov	r1, fp
 8003682:	018b      	lsls	r3, r1, #6
 8003684:	4651      	mov	r1, sl
 8003686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368a:	4651      	mov	r1, sl
 800368c:	018a      	lsls	r2, r1, #6
 800368e:	4651      	mov	r1, sl
 8003690:	ebb2 0801 	subs.w	r8, r2, r1
 8003694:	4659      	mov	r1, fp
 8003696:	eb63 0901 	sbc.w	r9, r3, r1
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ae:	4690      	mov	r8, r2
 80036b0:	4699      	mov	r9, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	eb18 0303 	adds.w	r3, r8, r3
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	462b      	mov	r3, r5
 80036bc:	eb49 0303 	adc.w	r3, r9, r3
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ce:	4629      	mov	r1, r5
 80036d0:	024b      	lsls	r3, r1, #9
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036d8:	4621      	mov	r1, r4
 80036da:	024a      	lsls	r2, r1, #9
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036ec:	f7fc fe00 	bl	80002f0 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	e058      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b38      	ldr	r3, [pc, #224]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	2200      	movs	r2, #0
 8003702:	4618      	mov	r0, r3
 8003704:	4611      	mov	r1, r2
 8003706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	0159      	lsls	r1, r3, #5
 8003722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003726:	0150      	lsls	r0, r2, #5
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4641      	mov	r1, r8
 800372e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb63 0b01 	sbc.w	fp, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800374c:	ebb2 040a 	subs.w	r4, r2, sl
 8003750:	eb63 050b 	sbc.w	r5, r3, fp
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	00eb      	lsls	r3, r5, #3
 800375e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003762:	00e2      	lsls	r2, r4, #3
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4643      	mov	r3, r8
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	464b      	mov	r3, r9
 8003770:	eb45 0303 	adc.w	r3, r5, r3
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003782:	4629      	mov	r1, r5
 8003784:	028b      	lsls	r3, r1, #10
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800378c:	4621      	mov	r1, r4
 800378e:	028a      	lsls	r2, r1, #10
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	61fa      	str	r2, [r7, #28]
 800379c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a0:	f7fc fda6 	bl	80002f0 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3750      	adds	r7, #80	@ 0x50
 80037d4:	46bd      	mov	sp, r7
 80037d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003804:	f7ff fff0 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	@ (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	0801dc5c 	.word	0x0801dc5c

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800382c:	f7ff ffdc 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0b5b      	lsrs	r3, r3, #13
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	0801dc5c 	.word	0x0801dc5c

08003850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	220f      	movs	r2, #15
 800385e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003860:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003892:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <HAL_RCC_GetClockConfig+0x60>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40023c00 	.word	0x40023c00

080038b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038dc:	4b69      	ldr	r3, [pc, #420]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a68      	ldr	r2, [pc, #416]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	4b66      	ldr	r3, [pc, #408]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	4964      	ldr	r1, [pc, #400]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800390e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003914:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	4959      	ldr	r1, [pc, #356]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800394a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003950:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	494a      	ldr	r1, [pc, #296]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003968:	d101      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003976:	2301      	movs	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 808b 	beq.w	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	4b3a      	ldr	r3, [pc, #232]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	4a39      	ldr	r2, [pc, #228]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a4:	4b37      	ldr	r3, [pc, #220]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039b0:	4b35      	ldr	r3, [pc, #212]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a34      	ldr	r2, [pc, #208]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fc6e 	bl	800129c <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fd fc6a 	bl	800129c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	@ 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e38f      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e2:	4b28      	ldr	r3, [pc, #160]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d035      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d02e      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a00:	4b20      	ldr	r3, [pc, #128]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a16:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a22:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a28:	4b16      	ldr	r3, [pc, #88]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d114      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd fc32 	bl	800129c <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fc2e 	bl	800129c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e351      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ee      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a6a:	d111      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	4901      	ldr	r1, [pc, #4]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	0ffffcff 	.word	0x0ffffcff
 8003a90:	4bac      	ldr	r3, [pc, #688]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4aab      	ldr	r2, [pc, #684]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a9a:	6093      	str	r3, [r2, #8]
 8003a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	49a6      	ldr	r1, [pc, #664]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aba:	4ba2      	ldr	r3, [pc, #648]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac0:	4aa0      	ldr	r2, [pc, #640]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003aca:	4b9e      	ldr	r3, [pc, #632]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	499b      	ldr	r1, [pc, #620]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae8:	4b96      	ldr	r3, [pc, #600]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af6:	4993      	ldr	r1, [pc, #588]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b0a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b18:	498a      	ldr	r1, [pc, #552]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b2c:	4b85      	ldr	r3, [pc, #532]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3a:	4982      	ldr	r1, [pc, #520]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4979      	ldr	r1, [pc, #484]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b70:	4b74      	ldr	r3, [pc, #464]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	4971      	ldr	r1, [pc, #452]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b92:	4b6c      	ldr	r3, [pc, #432]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f023 020c 	bic.w	r2, r3, #12
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	4968      	ldr	r1, [pc, #416]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb4:	4b63      	ldr	r3, [pc, #396]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	4960      	ldr	r1, [pc, #384]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	4957      	ldr	r1, [pc, #348]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf8:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	494f      	ldr	r1, [pc, #316]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	4946      	ldr	r1, [pc, #280]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c3c:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	493e      	ldr	r1, [pc, #248]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	4935      	ldr	r1, [pc, #212]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8e:	492d      	ldr	r1, [pc, #180]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ca2:	4b28      	ldr	r3, [pc, #160]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb0:	4924      	ldr	r1, [pc, #144]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce2:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf0:	4914      	ldr	r1, [pc, #80]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d04:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d14:	490b      	ldr	r1, [pc, #44]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d38:	4902      	ldr	r1, [pc, #8]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d54:	4b8a      	ldr	r3, [pc, #552]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	4986      	ldr	r1, [pc, #536]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d78:	4b81      	ldr	r3, [pc, #516]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d88:	497d      	ldr	r1, [pc, #500]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d006      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80d6 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da4:	4b76      	ldr	r3, [pc, #472]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a75      	ldr	r2, [pc, #468]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fd fa74 	bl	800129c <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003db8:	f7fd fa70 	bl	800129c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e195      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dca:	4b6d      	ldr	r3, [pc, #436]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d021      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11d      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dea:	4b65      	ldr	r3, [pc, #404]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003df8:	4b61      	ldr	r3, [pc, #388]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfe:	0e1b      	lsrs	r3, r3, #24
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	019a      	lsls	r2, r3, #6
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	4958      	ldr	r1, [pc, #352]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e50:	d129      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e52:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e60:	4b47      	ldr	r3, [pc, #284]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e66:	0f1b      	lsrs	r3, r3, #28
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	019a      	lsls	r2, r3, #6
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	493e      	ldr	r1, [pc, #248]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e94:	f023 021f 	bic.w	r2, r3, #31
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4938      	ldr	r1, [pc, #224]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01d      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eb2:	4b33      	ldr	r3, [pc, #204]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec6:	0f1b      	lsrs	r3, r3, #28
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	019a      	lsls	r2, r3, #6
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	4926      	ldr	r1, [pc, #152]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	019a      	lsls	r2, r3, #6
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	491a      	ldr	r1, [pc, #104]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f1e:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fd f9b7 	bl	800129c <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f32:	f7fd f9b3 	bl	800129c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	@ 0x64
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0d8      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f44:	4b0e      	ldr	r3, [pc, #56]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f040 80ce 	bne.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a08      	ldr	r2, [pc, #32]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fd f99a 	bl	800129c <HAL_GetTick>
 8003f68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f6c:	f7fd f996 	bl	800129c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d904      	bls.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0bb      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f84:	4b5e      	ldr	r3, [pc, #376]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f90:	d0ec      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02e      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d12a      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fba:	4b51      	ldr	r3, [pc, #324]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	0f1b      	lsrs	r3, r3, #28
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	4944      	ldr	r1, [pc, #272]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ff6:	4b42      	ldr	r3, [pc, #264]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ffc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	3b01      	subs	r3, #1
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	493d      	ldr	r1, [pc, #244]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d022      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004024:	d11d      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004026:	4b36      	ldr	r3, [pc, #216]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	0f1b      	lsrs	r3, r3, #28
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	019a      	lsls	r2, r3, #6
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	431a      	orrs	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	4929      	ldr	r1, [pc, #164]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d028      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800406e:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800407c:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	4917      	ldr	r1, [pc, #92]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040aa:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	4911      	ldr	r1, [pc, #68]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fd f8e6 	bl	800129c <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040d4:	f7fd f8e2 	bl	800129c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	@ 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e007      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f2:	d1ef      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e049      	b.n	80041aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f841 	bl	80041b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fa00 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e054      	b.n	800428a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a26      	ldr	r2, [pc, #152]	@ (8004298 <HAL_TIM_Base_Start_IT+0xd0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d01d      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_TIM_Base_Start_IT+0xd4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1e      	ldr	r2, [pc, #120]	@ (80042a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_TIM_Base_Start_IT+0xe4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d115      	bne.n	8004274 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <HAL_TIM_Base_Start_IT+0xec>)
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d015      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0xbe>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004260:	d011      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	e008      	b.n	8004286 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e000      	b.n	8004288 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40001800 	.word	0x40001800
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f905 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8f7 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f908 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8db 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8cd 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8de 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8b1 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8a3 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8b4 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f887 	bl	800450a <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f879 	bl	80044f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f88a 	bl	800451e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0201 	mvn.w	r2, #1
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc fb6e 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	2b80      	cmp	r3, #128	@ 0x80
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004454:	2b80      	cmp	r3, #128	@ 0x80
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f91a 	bl	800469c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b80      	cmp	r3, #128	@ 0x80
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f90d 	bl	80046b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b40      	cmp	r3, #64	@ 0x40
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f838 	bl	8004532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0220 	mvn.w	r2, #32
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8cd 	bl	8004688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a40      	ldr	r2, [pc, #256]	@ (800465c <TIM_Base_SetConfig+0x114>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004566:	d00f      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3d      	ldr	r2, [pc, #244]	@ (8004660 <TIM_Base_SetConfig+0x118>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3c      	ldr	r2, [pc, #240]	@ (8004664 <TIM_Base_SetConfig+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3b      	ldr	r2, [pc, #236]	@ (8004668 <TIM_Base_SetConfig+0x120>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3a      	ldr	r2, [pc, #232]	@ (800466c <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2f      	ldr	r2, [pc, #188]	@ (800465c <TIM_Base_SetConfig+0x114>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d027      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004660 <TIM_Base_SetConfig+0x118>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d023      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004664 <TIM_Base_SetConfig+0x11c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004668 <TIM_Base_SetConfig+0x120>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a29      	ldr	r2, [pc, #164]	@ (800466c <TIM_Base_SetConfig+0x124>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a28      	ldr	r2, [pc, #160]	@ (8004670 <TIM_Base_SetConfig+0x128>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <TIM_Base_SetConfig+0x12c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <TIM_Base_SetConfig+0x130>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	@ (800467c <TIM_Base_SetConfig+0x134>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <TIM_Base_SetConfig+0x138>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <TIM_Base_SetConfig+0x13c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <TIM_Base_SetConfig+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0xf8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40010400 	.word	0x40010400
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	40001800 	.word	0x40001800
 8004680:	40001c00 	.word	0x40001c00
 8004684:	40002000 	.word	0x40002000

08004688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e040      	b.n	8004758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fa56 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	@ 0x24
 80046f0:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8c0 	bl	8004888 <UART_SetConfig>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e022      	b.n	8004758 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fb18 	bl	8004d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800472e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800473e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb9f 	bl	8004e94 <UART_CheckIdleState>
 8004756:	4603      	mov	r3, r0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004774:	2b20      	cmp	r3, #32
 8004776:	f040 8081 	bne.w	800487c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_Transmit+0x26>
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e079      	b.n	800487e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UART_Transmit+0x38>
 8004794:	2302      	movs	r3, #2
 8004796:	e072      	b.n	800487e <HAL_UART_Transmit+0x11e>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2221      	movs	r2, #33	@ 0x21
 80047ac:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ae:	f7fc fd75 	bl	800129c <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047cc:	d108      	bne.n	80047e0 <HAL_UART_Transmit+0x80>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e003      	b.n	80047e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 80047f0:	e02c      	b.n	800484c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb92 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e038      	b.n	800487e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	3302      	adds	r3, #2
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e007      	b.n	800483a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3301      	adds	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1cc      	bne.n	80047f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	2140      	movs	r1, #64	@ 0x40
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fb5f 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e005      	b.n	800487e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba6      	ldr	r3, [pc, #664]	@ (8004b4c <UART_SetConfig+0x2c4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a94      	ldr	r2, [pc, #592]	@ (8004b50 <UART_SetConfig+0x2c8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d120      	bne.n	8004946 <UART_SetConfig+0xbe>
 8004904:	4b93      	ldr	r3, [pc, #588]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b03      	cmp	r3, #3
 8004910:	d816      	bhi.n	8004940 <UART_SetConfig+0xb8>
 8004912:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <UART_SetConfig+0x90>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004929 	.word	0x08004929
 800491c:	08004935 	.word	0x08004935
 8004920:	0800492f 	.word	0x0800492f
 8004924:	0800493b 	.word	0x0800493b
 8004928:	2301      	movs	r3, #1
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e150      	b.n	8004bd0 <UART_SetConfig+0x348>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e14d      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e14a      	b.n	8004bd0 <UART_SetConfig+0x348>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e147      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e144      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a83      	ldr	r2, [pc, #524]	@ (8004b58 <UART_SetConfig+0x2d0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d132      	bne.n	80049b6 <UART_SetConfig+0x12e>
 8004950:	4b80      	ldr	r3, [pc, #512]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d828      	bhi.n	80049b0 <UART_SetConfig+0x128>
 800495e:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <UART_SetConfig+0xdc>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004999 	.word	0x08004999
 8004968:	080049b1 	.word	0x080049b1
 800496c:	080049b1 	.word	0x080049b1
 8004970:	080049b1 	.word	0x080049b1
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049b1 	.word	0x080049b1
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049b1 	.word	0x080049b1
 8004984:	0800499f 	.word	0x0800499f
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b1 	.word	0x080049b1
 8004994:	080049ab 	.word	0x080049ab
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e118      	b.n	8004bd0 <UART_SetConfig+0x348>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e115      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e112      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e10f      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e10c      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a68      	ldr	r2, [pc, #416]	@ (8004b5c <UART_SetConfig+0x2d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d120      	bne.n	8004a02 <UART_SetConfig+0x17a>
 80049c0:	4b64      	ldr	r3, [pc, #400]	@ (8004b54 <UART_SetConfig+0x2cc>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049ca:	2b30      	cmp	r3, #48	@ 0x30
 80049cc:	d013      	beq.n	80049f6 <UART_SetConfig+0x16e>
 80049ce:	2b30      	cmp	r3, #48	@ 0x30
 80049d0:	d814      	bhi.n	80049fc <UART_SetConfig+0x174>
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d009      	beq.n	80049ea <UART_SetConfig+0x162>
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d810      	bhi.n	80049fc <UART_SetConfig+0x174>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <UART_SetConfig+0x15c>
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d006      	beq.n	80049f0 <UART_SetConfig+0x168>
 80049e2:	e00b      	b.n	80049fc <UART_SetConfig+0x174>
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e0f2      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049ea:	2302      	movs	r3, #2
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e0ef      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049f0:	2304      	movs	r3, #4
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0ec      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049f6:	2308      	movs	r3, #8
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e0e9      	b.n	8004bd0 <UART_SetConfig+0x348>
 80049fc:	2310      	movs	r3, #16
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e0e6      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a56      	ldr	r2, [pc, #344]	@ (8004b60 <UART_SetConfig+0x2d8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d120      	bne.n	8004a4e <UART_SetConfig+0x1c6>
 8004a0c:	4b51      	ldr	r3, [pc, #324]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a18:	d013      	beq.n	8004a42 <UART_SetConfig+0x1ba>
 8004a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a1c:	d814      	bhi.n	8004a48 <UART_SetConfig+0x1c0>
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d009      	beq.n	8004a36 <UART_SetConfig+0x1ae>
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d810      	bhi.n	8004a48 <UART_SetConfig+0x1c0>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <UART_SetConfig+0x1a8>
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d006      	beq.n	8004a3c <UART_SetConfig+0x1b4>
 8004a2e:	e00b      	b.n	8004a48 <UART_SetConfig+0x1c0>
 8004a30:	2300      	movs	r3, #0
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e0cc      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e0c9      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e0c6      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e0c3      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e0c0      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a44      	ldr	r2, [pc, #272]	@ (8004b64 <UART_SetConfig+0x2dc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d125      	bne.n	8004aa4 <UART_SetConfig+0x21c>
 8004a58:	4b3e      	ldr	r3, [pc, #248]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a66:	d017      	beq.n	8004a98 <UART_SetConfig+0x210>
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a6c:	d817      	bhi.n	8004a9e <UART_SetConfig+0x216>
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a72:	d00b      	beq.n	8004a8c <UART_SetConfig+0x204>
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a78:	d811      	bhi.n	8004a9e <UART_SetConfig+0x216>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <UART_SetConfig+0x1fe>
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a82:	d006      	beq.n	8004a92 <UART_SetConfig+0x20a>
 8004a84:	e00b      	b.n	8004a9e <UART_SetConfig+0x216>
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0a1      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e09e      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a92:	2304      	movs	r3, #4
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e09b      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e098      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e095      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b68 <UART_SetConfig+0x2e0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d125      	bne.n	8004afa <UART_SetConfig+0x272>
 8004aae:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004abc:	d017      	beq.n	8004aee <UART_SetConfig+0x266>
 8004abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ac2:	d817      	bhi.n	8004af4 <UART_SetConfig+0x26c>
 8004ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac8:	d00b      	beq.n	8004ae2 <UART_SetConfig+0x25a>
 8004aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ace:	d811      	bhi.n	8004af4 <UART_SetConfig+0x26c>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <UART_SetConfig+0x254>
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad8:	d006      	beq.n	8004ae8 <UART_SetConfig+0x260>
 8004ada:	e00b      	b.n	8004af4 <UART_SetConfig+0x26c>
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e076      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e073      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e070      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004aee:	2308      	movs	r3, #8
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e06d      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e06a      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d138      	bne.n	8004b76 <UART_SetConfig+0x2ee>
 8004b04:	4b13      	ldr	r3, [pc, #76]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b12:	d017      	beq.n	8004b44 <UART_SetConfig+0x2bc>
 8004b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b18:	d82a      	bhi.n	8004b70 <UART_SetConfig+0x2e8>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b1e:	d00b      	beq.n	8004b38 <UART_SetConfig+0x2b0>
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b24:	d824      	bhi.n	8004b70 <UART_SetConfig+0x2e8>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <UART_SetConfig+0x2aa>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2e:	d006      	beq.n	8004b3e <UART_SetConfig+0x2b6>
 8004b30:	e01e      	b.n	8004b70 <UART_SetConfig+0x2e8>
 8004b32:	2300      	movs	r3, #0
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e04b      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e048      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004b3e:	2304      	movs	r3, #4
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e045      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004b44:	2308      	movs	r3, #8
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e042      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004b4a:	bf00      	nop
 8004b4c:	efff69f3 	.word	0xefff69f3
 8004b50:	40011000 	.word	0x40011000
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40004400 	.word	0x40004400
 8004b5c:	40004800 	.word	0x40004800
 8004b60:	40004c00 	.word	0x40004c00
 8004b64:	40005000 	.word	0x40005000
 8004b68:	40011400 	.word	0x40011400
 8004b6c:	40007800 	.word	0x40007800
 8004b70:	2310      	movs	r3, #16
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e02c      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a72      	ldr	r2, [pc, #456]	@ (8004d44 <UART_SetConfig+0x4bc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d125      	bne.n	8004bcc <UART_SetConfig+0x344>
 8004b80:	4b71      	ldr	r3, [pc, #452]	@ (8004d48 <UART_SetConfig+0x4c0>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b8a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b8e:	d017      	beq.n	8004bc0 <UART_SetConfig+0x338>
 8004b90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b94:	d817      	bhi.n	8004bc6 <UART_SetConfig+0x33e>
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b9a:	d00b      	beq.n	8004bb4 <UART_SetConfig+0x32c>
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba0:	d811      	bhi.n	8004bc6 <UART_SetConfig+0x33e>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <UART_SetConfig+0x326>
 8004ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004baa:	d006      	beq.n	8004bba <UART_SetConfig+0x332>
 8004bac:	e00b      	b.n	8004bc6 <UART_SetConfig+0x33e>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e00d      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e00a      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e007      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e004      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e001      	b.n	8004bd0 <UART_SetConfig+0x348>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd8:	d15b      	bne.n	8004c92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004bda:	7ffb      	ldrb	r3, [r7, #31]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d828      	bhi.n	8004c32 <UART_SetConfig+0x3aa>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x360>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fdf8 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004c10:	61b8      	str	r0, [r7, #24]
        break;
 8004c12:	e013      	b.n	8004c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe fe08 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004c18:	61b8      	str	r0, [r7, #24]
        break;
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <UART_SetConfig+0x4c4>)
 8004c1e:	61bb      	str	r3, [r7, #24]
        break;
 8004c20:	e00c      	b.n	8004c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe fcdb 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 8004c26:	61b8      	str	r0, [r7, #24]
        break;
 8004c28:	e008      	b.n	8004c3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2e:	61bb      	str	r3, [r7, #24]
        break;
 8004c30:	e004      	b.n	8004c3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	77bb      	strb	r3, [r7, #30]
        break;
 8004c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d074      	beq.n	8004d2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	005a      	lsls	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d916      	bls.n	8004c8c <UART_SetConfig+0x404>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c64:	d212      	bcs.n	8004c8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f023 030f 	bic.w	r3, r3, #15
 8004c6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	89fa      	ldrh	r2, [r7, #14]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	e04f      	b.n	8004d2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77bb      	strb	r3, [r7, #30]
 8004c90:	e04c      	b.n	8004d2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d828      	bhi.n	8004cea <UART_SetConfig+0x462>
 8004c98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x418>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004ceb 	.word	0x08004ceb
 8004cb0:	08004cdb 	.word	0x08004cdb
 8004cb4:	08004ceb 	.word	0x08004ceb
 8004cb8:	08004ceb 	.word	0x08004ceb
 8004cbc:	08004ceb 	.word	0x08004ceb
 8004cc0:	08004ce3 	.word	0x08004ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fd9c 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	61b8      	str	r0, [r7, #24]
        break;
 8004cca:	e013      	b.n	8004cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7fe fdac 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e00f      	b.n	8004cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <UART_SetConfig+0x4c4>)
 8004cd6:	61bb      	str	r3, [r7, #24]
        break;
 8004cd8:	e00c      	b.n	8004cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe fc7f 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 8004cde:	61b8      	str	r0, [r7, #24]
        break;
 8004ce0:	e008      	b.n	8004cf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e004      	b.n	8004cf4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cf2:	bf00      	nop
    }

    if (pclk != 0U)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	085a      	lsrs	r2, r3, #1
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	441a      	add	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d909      	bls.n	8004d28 <UART_SetConfig+0x4a0>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1a:	d205      	bcs.n	8004d28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60da      	str	r2, [r3, #12]
 8004d26:	e001      	b.n	8004d2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8004d38:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40007c00 	.word	0x40007c00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	00f42400 	.word	0x00f42400

08004d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01a      	beq.n	8004e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e4e:	d10a      	bne.n	8004e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ea4:	f7fc f9fa 	bl	800129c <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d10e      	bne.n	8004ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f82d 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e023      	b.n	8004f1e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d10e      	bne.n	8004f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f817 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e00d      	b.n	8004f1e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b09c      	sub	sp, #112	@ 0x70
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	e0a5      	b.n	8005084 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	f000 80a1 	beq.w	8005084 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fc f9ab 	bl	800129c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d13e      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f78:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004faa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e067      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d04f      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ff2:	d147      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
 800501e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005022:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800502a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	613b      	str	r3, [r7, #16]
   return(result);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3308      	adds	r3, #8
 800504e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005050:	623a      	str	r2, [r7, #32]
 8005052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	69f9      	ldr	r1, [r7, #28]
 8005056:	6a3a      	ldr	r2, [r7, #32]
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	61bb      	str	r3, [r7, #24]
   return(result);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e5      	bne.n	8005030 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e010      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	429a      	cmp	r2, r3
 80050a0:	f43f af4a 	beq.w	8004f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3770      	adds	r7, #112	@ 0x70
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b0:	b084      	sub	sp, #16
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	f107 001c 	add.w	r0, r7, #28
 80050be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d120      	bne.n	800510a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b20      	ldr	r3, [pc, #128]	@ (800515c <USB_CoreInit+0xac>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa92 	bl	8005628 <USB_CoreReset>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e010      	b.n	800512c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa86 	bl	8005628 <USB_CoreReset>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2b01      	cmp	r3, #1
 8005130:	d10b      	bne.n	800514a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f043 0206 	orr.w	r2, r3, #6
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005156:	b004      	add	sp, #16
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	ffbdffbf 	.word	0xffbdffbf

08005160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 0201 	bic.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f7fc f87f 	bl	80012b4 <HAL_Delay>
      ms++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fa25 	bl	800560c <USB_GetMode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d01e      	beq.n	8005206 <USB_SetCurrentMode+0x84>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b31      	cmp	r3, #49	@ 0x31
 80051cc:	d9f0      	bls.n	80051b0 <USB_SetCurrentMode+0x2e>
 80051ce:	e01a      	b.n	8005206 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d115      	bne.n	8005202 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7fc f866 	bl	80012b4 <HAL_Delay>
      ms++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa0c 	bl	800560c <USB_GetMode>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <USB_SetCurrentMode+0x84>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b31      	cmp	r3, #49	@ 0x31
 80051fe:	d9f0      	bls.n	80051e2 <USB_SetCurrentMode+0x60>
 8005200:	e001      	b.n	8005206 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e005      	b.n	8005212 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b32      	cmp	r3, #50	@ 0x32
 800520a:	d101      	bne.n	8005210 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e009      	b.n	8005250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3340      	adds	r3, #64	@ 0x40
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0e      	cmp	r3, #14
 8005254:	d9f2      	bls.n	800523c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11c      	bne.n	8005296 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800526a:	f043 0302 	orr.w	r3, r3, #2
 800526e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e005      	b.n	80052a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b4:	4619      	mov	r1, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052bc:	461a      	mov	r2, r3
 80052be:	680b      	ldr	r3, [r1, #0]
 80052c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10c      	bne.n	80052e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052ce:	2100      	movs	r1, #0
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f961 	bl	8005598 <USB_SetDevSpeed>
 80052d6:	e008      	b.n	80052ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052d8:	2101      	movs	r1, #1
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f95c 	bl	8005598 <USB_SetDevSpeed>
 80052e0:	e003      	b.n	80052ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052e2:	2103      	movs	r1, #3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f957 	bl	8005598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052ea:	2110      	movs	r1, #16
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8f3 	bl	80054d8 <USB_FlushTxFifo>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f91d 	bl	800553c <USB_FlushRxFifo>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e043      	b.n	80053be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534c:	d118      	bne.n	8005380 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e013      	b.n	8005392 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e008      	b.n	8005392 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538c:	461a      	mov	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b0:	461a      	mov	r2, r3
 80053b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3301      	adds	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d3b7      	bcc.n	8005336 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e043      	b.n	8005454 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e2:	d118      	bne.n	8005416 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e013      	b.n	8005428 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e008      	b.n	8005428 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005434:	461a      	mov	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005446:	461a      	mov	r2, r3
 8005448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800544c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3301      	adds	r3, #1
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	429a      	cmp	r2, r3
 800545a:	d3b7      	bcc.n	80053cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800546a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800546e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800547c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f043 0210 	orr.w	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <USB_DevInit+0x2b4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800549c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f043 0208 	orr.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <USB_DevInit+0x2b8>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054cc:	b004      	add	sp, #16
 80054ce:	4770      	bx	lr
 80054d0:	803c3800 	.word	0x803c3800
 80054d4:	40000004 	.word	0x40000004

080054d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	4a12      	ldr	r2, [pc, #72]	@ (8005538 <USB_FlushTxFifo+0x60>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e01a      	b.n	800552c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	daf3      	bge.n	80054e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	019b      	lsls	r3, r3, #6
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <USB_FlushTxFifo+0x60>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e006      	b.n	800552c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d0f1      	beq.n	800550e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	00030d40 	.word	0x00030d40

0800553c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <USB_FlushRxFifo+0x58>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e017      	b.n	8005588 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	daf3      	bge.n	8005548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2210      	movs	r2, #16
 8005568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4a08      	ldr	r2, [pc, #32]	@ (8005594 <USB_FlushRxFifo+0x58>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e006      	b.n	8005588 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d0f1      	beq.n	800556a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	00030d40 	.word	0x00030d40

08005598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055e4:	f023 0303 	bic.w	r3, r3, #3
 80055e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0301 	and.w	r3, r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <USB_CoreReset+0x60>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e01a      	b.n	800567a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	daf3      	bge.n	8005634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	4a09      	ldr	r2, [pc, #36]	@ (8005688 <USB_CoreReset+0x60>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d0f1      	beq.n	800565c <USB_CoreReset+0x34>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00030d40 	.word	0x00030d40

0800568c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005692:	4ba0      	ldr	r3, [pc, #640]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005694:	22c0      	movs	r2, #192	@ 0xc0
 8005696:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005698:	4b9e      	ldr	r3, [pc, #632]	@ (8005914 <MX_LWIP_Init+0x288>)
 800569a:	22a8      	movs	r2, #168	@ 0xa8
 800569c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800569e:	4b9d      	ldr	r3, [pc, #628]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 80056a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056a6:	221c      	movs	r2, #28
 80056a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80056aa:	4b9b      	ldr	r3, [pc, #620]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80056ac:	22ff      	movs	r2, #255	@ 0xff
 80056ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80056b0:	4b99      	ldr	r3, [pc, #612]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80056b2:	22ff      	movs	r2, #255	@ 0xff
 80056b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80056b6:	4b98      	ldr	r3, [pc, #608]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80056b8:	22ff      	movs	r2, #255	@ 0xff
 80056ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80056bc:	4b96      	ldr	r3, [pc, #600]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80056c2:	4b96      	ldr	r3, [pc, #600]	@ (800591c <MX_LWIP_Init+0x290>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80056c8:	4b94      	ldr	r3, [pc, #592]	@ (800591c <MX_LWIP_Init+0x290>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80056ce:	4b93      	ldr	r3, [pc, #588]	@ (800591c <MX_LWIP_Init+0x290>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80056d4:	4b91      	ldr	r3, [pc, #580]	@ (800591c <MX_LWIP_Init+0x290>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80056da:	2100      	movs	r1, #0
 80056dc:	2000      	movs	r0, #0
 80056de:	f007 f8e1 	bl	800c8a4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80056e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	061a      	lsls	r2, r3, #24
 80056e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	431a      	orrs	r2, r3
 80056f0:	4b88      	ldr	r3, [pc, #544]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056f2:	789b      	ldrb	r3, [r3, #2]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	4313      	orrs	r3, r2
 80056f8:	4a86      	ldr	r2, [pc, #536]	@ (8005914 <MX_LWIP_Init+0x288>)
 80056fa:	78d2      	ldrb	r2, [r2, #3]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	061a      	lsls	r2, r3, #24
 8005700:	4b84      	ldr	r3, [pc, #528]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	0619      	lsls	r1, r3, #24
 8005706:	4b83      	ldr	r3, [pc, #524]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	4319      	orrs	r1, r3
 800570e:	4b81      	ldr	r3, [pc, #516]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005710:	789b      	ldrb	r3, [r3, #2]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	430b      	orrs	r3, r1
 8005716:	497f      	ldr	r1, [pc, #508]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005718:	78c9      	ldrb	r1, [r1, #3]
 800571a:	430b      	orrs	r3, r1
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005722:	431a      	orrs	r2, r3
 8005724:	4b7b      	ldr	r3, [pc, #492]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	0619      	lsls	r1, r3, #24
 800572a:	4b7a      	ldr	r3, [pc, #488]	@ (8005914 <MX_LWIP_Init+0x288>)
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	4319      	orrs	r1, r3
 8005732:	4b78      	ldr	r3, [pc, #480]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005734:	789b      	ldrb	r3, [r3, #2]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	430b      	orrs	r3, r1
 800573a:	4976      	ldr	r1, [pc, #472]	@ (8005914 <MX_LWIP_Init+0x288>)
 800573c:	78c9      	ldrb	r1, [r1, #3]
 800573e:	430b      	orrs	r3, r1
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005746:	431a      	orrs	r2, r3
 8005748:	4b72      	ldr	r3, [pc, #456]	@ (8005914 <MX_LWIP_Init+0x288>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	0619      	lsls	r1, r3, #24
 800574e:	4b71      	ldr	r3, [pc, #452]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	4319      	orrs	r1, r3
 8005756:	4b6f      	ldr	r3, [pc, #444]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005758:	789b      	ldrb	r3, [r3, #2]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	430b      	orrs	r3, r1
 800575e:	496d      	ldr	r1, [pc, #436]	@ (8005914 <MX_LWIP_Init+0x288>)
 8005760:	78c9      	ldrb	r1, [r1, #3]
 8005762:	430b      	orrs	r3, r1
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	4313      	orrs	r3, r2
 8005768:	4a6d      	ldr	r2, [pc, #436]	@ (8005920 <MX_LWIP_Init+0x294>)
 800576a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800576c:	4b6a      	ldr	r3, [pc, #424]	@ (8005918 <MX_LWIP_Init+0x28c>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	061a      	lsls	r2, r3, #24
 8005772:	4b69      	ldr	r3, [pc, #420]	@ (8005918 <MX_LWIP_Init+0x28c>)
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	431a      	orrs	r2, r3
 800577a:	4b67      	ldr	r3, [pc, #412]	@ (8005918 <MX_LWIP_Init+0x28c>)
 800577c:	789b      	ldrb	r3, [r3, #2]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	4313      	orrs	r3, r2
 8005782:	4a65      	ldr	r2, [pc, #404]	@ (8005918 <MX_LWIP_Init+0x28c>)
 8005784:	78d2      	ldrb	r2, [r2, #3]
 8005786:	4313      	orrs	r3, r2
 8005788:	061a      	lsls	r2, r3, #24
 800578a:	4b63      	ldr	r3, [pc, #396]	@ (8005918 <MX_LWIP_Init+0x28c>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	0619      	lsls	r1, r3, #24
 8005790:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <MX_LWIP_Init+0x28c>)
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	4319      	orrs	r1, r3
 8005798:	4b5f      	ldr	r3, [pc, #380]	@ (8005918 <MX_LWIP_Init+0x28c>)
 800579a:	789b      	ldrb	r3, [r3, #2]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	430b      	orrs	r3, r1
 80057a0:	495d      	ldr	r1, [pc, #372]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057a2:	78c9      	ldrb	r1, [r1, #3]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057ac:	431a      	orrs	r2, r3
 80057ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	0619      	lsls	r1, r3, #24
 80057b4:	4b58      	ldr	r3, [pc, #352]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	041b      	lsls	r3, r3, #16
 80057ba:	4319      	orrs	r1, r3
 80057bc:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057be:	789b      	ldrb	r3, [r3, #2]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	430b      	orrs	r3, r1
 80057c4:	4954      	ldr	r1, [pc, #336]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057c6:	78c9      	ldrb	r1, [r1, #3]
 80057c8:	430b      	orrs	r3, r1
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80057d0:	431a      	orrs	r2, r3
 80057d2:	4b51      	ldr	r3, [pc, #324]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	0619      	lsls	r1, r3, #24
 80057d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	4319      	orrs	r1, r3
 80057e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057e2:	789b      	ldrb	r3, [r3, #2]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	430b      	orrs	r3, r1
 80057e8:	494b      	ldr	r1, [pc, #300]	@ (8005918 <MX_LWIP_Init+0x28c>)
 80057ea:	78c9      	ldrb	r1, [r1, #3]
 80057ec:	430b      	orrs	r3, r1
 80057ee:	0e1b      	lsrs	r3, r3, #24
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005924 <MX_LWIP_Init+0x298>)
 80057f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80057f6:	4b49      	ldr	r3, [pc, #292]	@ (800591c <MX_LWIP_Init+0x290>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	061a      	lsls	r2, r3, #24
 80057fc:	4b47      	ldr	r3, [pc, #284]	@ (800591c <MX_LWIP_Init+0x290>)
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	4b45      	ldr	r3, [pc, #276]	@ (800591c <MX_LWIP_Init+0x290>)
 8005806:	789b      	ldrb	r3, [r3, #2]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	4313      	orrs	r3, r2
 800580c:	4a43      	ldr	r2, [pc, #268]	@ (800591c <MX_LWIP_Init+0x290>)
 800580e:	78d2      	ldrb	r2, [r2, #3]
 8005810:	4313      	orrs	r3, r2
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	4b41      	ldr	r3, [pc, #260]	@ (800591c <MX_LWIP_Init+0x290>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	0619      	lsls	r1, r3, #24
 800581a:	4b40      	ldr	r3, [pc, #256]	@ (800591c <MX_LWIP_Init+0x290>)
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	041b      	lsls	r3, r3, #16
 8005820:	4319      	orrs	r1, r3
 8005822:	4b3e      	ldr	r3, [pc, #248]	@ (800591c <MX_LWIP_Init+0x290>)
 8005824:	789b      	ldrb	r3, [r3, #2]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	430b      	orrs	r3, r1
 800582a:	493c      	ldr	r1, [pc, #240]	@ (800591c <MX_LWIP_Init+0x290>)
 800582c:	78c9      	ldrb	r1, [r1, #3]
 800582e:	430b      	orrs	r3, r1
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005836:	431a      	orrs	r2, r3
 8005838:	4b38      	ldr	r3, [pc, #224]	@ (800591c <MX_LWIP_Init+0x290>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	0619      	lsls	r1, r3, #24
 800583e:	4b37      	ldr	r3, [pc, #220]	@ (800591c <MX_LWIP_Init+0x290>)
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	4319      	orrs	r1, r3
 8005846:	4b35      	ldr	r3, [pc, #212]	@ (800591c <MX_LWIP_Init+0x290>)
 8005848:	789b      	ldrb	r3, [r3, #2]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	430b      	orrs	r3, r1
 800584e:	4933      	ldr	r1, [pc, #204]	@ (800591c <MX_LWIP_Init+0x290>)
 8005850:	78c9      	ldrb	r1, [r1, #3]
 8005852:	430b      	orrs	r3, r1
 8005854:	0a1b      	lsrs	r3, r3, #8
 8005856:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800585a:	431a      	orrs	r2, r3
 800585c:	4b2f      	ldr	r3, [pc, #188]	@ (800591c <MX_LWIP_Init+0x290>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	0619      	lsls	r1, r3, #24
 8005862:	4b2e      	ldr	r3, [pc, #184]	@ (800591c <MX_LWIP_Init+0x290>)
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	4319      	orrs	r1, r3
 800586a:	4b2c      	ldr	r3, [pc, #176]	@ (800591c <MX_LWIP_Init+0x290>)
 800586c:	789b      	ldrb	r3, [r3, #2]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	430b      	orrs	r3, r1
 8005872:	492a      	ldr	r1, [pc, #168]	@ (800591c <MX_LWIP_Init+0x290>)
 8005874:	78c9      	ldrb	r1, [r1, #3]
 8005876:	430b      	orrs	r3, r1
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	4313      	orrs	r3, r2
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <MX_LWIP_Init+0x29c>)
 800587e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005880:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <MX_LWIP_Init+0x2a0>)
 8005882:	9302      	str	r3, [sp, #8]
 8005884:	4b2a      	ldr	r3, [pc, #168]	@ (8005930 <MX_LWIP_Init+0x2a4>)
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4b26      	ldr	r3, [pc, #152]	@ (8005928 <MX_LWIP_Init+0x29c>)
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <MX_LWIP_Init+0x298>)
 8005890:	4923      	ldr	r1, [pc, #140]	@ (8005920 <MX_LWIP_Init+0x294>)
 8005892:	4828      	ldr	r0, [pc, #160]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 8005894:	f007 fd8a 	bl	800d3ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005898:	4826      	ldr	r0, [pc, #152]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 800589a:	f007 ff39 	bl	800d710 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800589e:	4b25      	ldr	r3, [pc, #148]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 80058a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80058b0:	4820      	ldr	r0, [pc, #128]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 80058b2:	f007 ff3d 	bl	800d730 <netif_set_up>
 80058b6:	e002      	b.n	80058be <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80058b8:	481e      	ldr	r0, [pc, #120]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 80058ba:	f007 ffa5 	bl	800d808 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80058be:	491e      	ldr	r1, [pc, #120]	@ (8005938 <MX_LWIP_Init+0x2ac>)
 80058c0:	481c      	ldr	r0, [pc, #112]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 80058c2:	f008 f837 	bl	800d934 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80058c6:	2200      	movs	r2, #0
 80058c8:	2101      	movs	r1, #1
 80058ca:	2001      	movs	r0, #1
 80058cc:	f000 ff12 	bl	80066f4 <osSemaphoreNew>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4a1a      	ldr	r2, [pc, #104]	@ (800593c <MX_LWIP_Init+0x2b0>)
 80058d4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80058d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005940 <MX_LWIP_Init+0x2b4>)
 80058d8:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <MX_LWIP_Init+0x2a8>)
 80058da:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80058dc:	4b17      	ldr	r3, [pc, #92]	@ (800593c <MX_LWIP_Init+0x2b0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <MX_LWIP_Init+0x2b4>)
 80058e2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80058e4:	2224      	movs	r2, #36	@ 0x24
 80058e6:	2100      	movs	r1, #0
 80058e8:	4816      	ldr	r0, [pc, #88]	@ (8005944 <MX_LWIP_Init+0x2b8>)
 80058ea:	f012 fec1 	bl	8018670 <memset>
  attributes.name = "LinkThr";
 80058ee:	4b15      	ldr	r3, [pc, #84]	@ (8005944 <MX_LWIP_Init+0x2b8>)
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <MX_LWIP_Init+0x2bc>)
 80058f2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80058f4:	4b13      	ldr	r3, [pc, #76]	@ (8005944 <MX_LWIP_Init+0x2b8>)
 80058f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058fa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80058fc:	4b11      	ldr	r3, [pc, #68]	@ (8005944 <MX_LWIP_Init+0x2b8>)
 80058fe:	2210      	movs	r2, #16
 8005900:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005902:	4a10      	ldr	r2, [pc, #64]	@ (8005944 <MX_LWIP_Init+0x2b8>)
 8005904:	490e      	ldr	r1, [pc, #56]	@ (8005940 <MX_LWIP_Init+0x2b4>)
 8005906:	4811      	ldr	r0, [pc, #68]	@ (800594c <MX_LWIP_Init+0x2c0>)
 8005908:	f000 fcd8 	bl	80062bc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000d3c 	.word	0x20000d3c
 8005918:	20000d40 	.word	0x20000d40
 800591c:	20000d44 	.word	0x20000d44
 8005920:	20000d30 	.word	0x20000d30
 8005924:	20000d34 	.word	0x20000d34
 8005928:	20000d38 	.word	0x20000d38
 800592c:	0800c7b5 	.word	0x0800c7b5
 8005930:	08005f99 	.word	0x08005f99
 8005934:	20000cfc 	.word	0x20000cfc
 8005938:	0800607d 	.word	0x0800607d
 800593c:	20000cf0 	.word	0x20000cf0
 8005940:	20000cf4 	.word	0x20000cf4
 8005944:	20000d48 	.word	0x20000d48
 8005948:	0801a874 	.word	0x0801a874
 800594c:	08006005 	.word	0x08006005

08005950 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08e      	sub	sp, #56	@ 0x38
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a52      	ldr	r2, [pc, #328]	@ (8005ab8 <HAL_ETH_MspInit+0x168>)
 800596e:	4293      	cmp	r3, r2
 8005970:	f040 809e 	bne.w	8005ab0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005974:	4b51      	ldr	r3, [pc, #324]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	4a50      	ldr	r2, [pc, #320]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 800597a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800597e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005980:	4b4e      	ldr	r3, [pc, #312]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005988:	623b      	str	r3, [r7, #32]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	4b4b      	ldr	r3, [pc, #300]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	4a4a      	ldr	r2, [pc, #296]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005996:	6313      	str	r3, [r2, #48]	@ 0x30
 8005998:	4b48      	ldr	r3, [pc, #288]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4b45      	ldr	r3, [pc, #276]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	4a44      	ldr	r2, [pc, #272]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80059b0:	4b42      	ldr	r3, [pc, #264]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059bc:	4b3f      	ldr	r3, [pc, #252]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	4a3e      	ldr	r2, [pc, #248]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80059c8:	4b3c      	ldr	r3, [pc, #240]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d4:	4b39      	ldr	r3, [pc, #228]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	4a38      	ldr	r2, [pc, #224]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	6313      	str	r3, [r2, #48]	@ 0x30
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ec:	4b33      	ldr	r3, [pc, #204]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	4a32      	ldr	r2, [pc, #200]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80059f8:	4b30      	ldr	r3, [pc, #192]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a04:	4b2d      	ldr	r3, [pc, #180]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	4a2c      	ldr	r2, [pc, #176]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a10:	4b2a      	ldr	r3, [pc, #168]	@ (8005abc <HAL_ETH_MspInit+0x16c>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005a1c:	2332      	movs	r3, #50	@ 0x32
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a20:	2302      	movs	r3, #2
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a2c:	230b      	movs	r3, #11
 8005a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a34:	4619      	mov	r1, r3
 8005a36:	4822      	ldr	r0, [pc, #136]	@ (8005ac0 <HAL_ETH_MspInit+0x170>)
 8005a38:	f7fc feae 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005a3c:	2386      	movs	r3, #134	@ 0x86
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a40:	2302      	movs	r3, #2
 8005a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a4c:	230b      	movs	r3, #11
 8005a4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a54:	4619      	mov	r1, r3
 8005a56:	481b      	ldr	r0, [pc, #108]	@ (8005ac4 <HAL_ETH_MspInit+0x174>)
 8005a58:	f7fc fe9e 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2302      	movs	r3, #2
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a6e:	230b      	movs	r3, #11
 8005a70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a76:	4619      	mov	r1, r3
 8005a78:	4813      	ldr	r0, [pc, #76]	@ (8005ac8 <HAL_ETH_MspInit+0x178>)
 8005a7a:	f7fc fe8d 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005a7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a84:	2302      	movs	r3, #2
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a90:	230b      	movs	r3, #11
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a98:	4619      	mov	r1, r3
 8005a9a:	480c      	ldr	r0, [pc, #48]	@ (8005acc <HAL_ETH_MspInit+0x17c>)
 8005a9c:	f7fc fe7c 	bl	8002798 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2105      	movs	r1, #5
 8005aa4:	203d      	movs	r0, #61	@ 0x3d
 8005aa6:	f7fb fce1 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005aaa:	203d      	movs	r0, #61	@ 0x3d
 8005aac:	f7fb fcfa 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3738      	adds	r7, #56	@ 0x38
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40028000 	.word	0x40028000
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40020800 	.word	0x40020800
 8005ac4:	40020000 	.word	0x40020000
 8005ac8:	40020400 	.word	0x40020400
 8005acc:	40021800 	.word	0x40021800

08005ad0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005ad8:	4b04      	ldr	r3, [pc, #16]	@ (8005aec <HAL_ETH_RxCpltCallback+0x1c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 ff0b 	bl	80068f8 <osSemaphoreRelease>
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20003e0c 	.word	0x20003e0c

08005af0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b090      	sub	sp, #64	@ 0x40
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005afc:	4b5d      	ldr	r3, [pc, #372]	@ (8005c74 <low_level_init+0x184>)
 8005afe:	4a5e      	ldr	r2, [pc, #376]	@ (8005c78 <low_level_init+0x188>)
 8005b00:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005b02:	4b5c      	ldr	r3, [pc, #368]	@ (8005c74 <low_level_init+0x184>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005b08:	4b5a      	ldr	r3, [pc, #360]	@ (8005c74 <low_level_init+0x184>)
 8005b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b0e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005b10:	4b58      	ldr	r3, [pc, #352]	@ (8005c74 <low_level_init+0x184>)
 8005b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b16:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005b18:	4b56      	ldr	r3, [pc, #344]	@ (8005c74 <low_level_init+0x184>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 8005b22:	2322      	movs	r3, #34	@ 0x22
 8005b24:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 8005b26:	23c0      	movs	r3, #192	@ 0xc0
 8005b28:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 8005b2a:	23a8      	movs	r3, #168	@ 0xa8
 8005b2c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 8005b32:	231c      	movs	r3, #28
 8005b34:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005b36:	4a4f      	ldr	r2, [pc, #316]	@ (8005c74 <low_level_init+0x184>)
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c74 <low_level_init+0x184>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005b44:	4b4b      	ldr	r3, [pc, #300]	@ (8005c74 <low_level_init+0x184>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c74 <low_level_init+0x184>)
 8005b4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b50:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b52:	4848      	ldr	r0, [pc, #288]	@ (8005c74 <low_level_init+0x184>)
 8005b54:	f7fb fcb4 	bl	80014c0 <HAL_ETH_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005b78:	2304      	movs	r3, #4
 8005b7a:	4a40      	ldr	r2, [pc, #256]	@ (8005c7c <low_level_init+0x18c>)
 8005b7c:	4940      	ldr	r1, [pc, #256]	@ (8005c80 <low_level_init+0x190>)
 8005b7e:	483d      	ldr	r0, [pc, #244]	@ (8005c74 <low_level_init+0x184>)
 8005b80:	f7fb fe36 	bl	80017f0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005b84:	2304      	movs	r3, #4
 8005b86:	4a3f      	ldr	r2, [pc, #252]	@ (8005c84 <low_level_init+0x194>)
 8005b88:	493f      	ldr	r1, [pc, #252]	@ (8005c88 <low_level_init+0x198>)
 8005b8a:	483a      	ldr	r0, [pc, #232]	@ (8005c74 <low_level_init+0x184>)
 8005b8c:	f7fb fe98 	bl	80018c0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2206      	movs	r2, #6
 8005b94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <low_level_init+0x184>)
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ba4:	4b33      	ldr	r3, [pc, #204]	@ (8005c74 <low_level_init+0x184>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	785a      	ldrb	r2, [r3, #1]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005bb0:	4b30      	ldr	r3, [pc, #192]	@ (8005c74 <low_level_init+0x184>)
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	789a      	ldrb	r2, [r3, #2]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <low_level_init+0x184>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	78da      	ldrb	r2, [r3, #3]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <low_level_init+0x184>)
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	791a      	ldrb	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005bd4:	4b27      	ldr	r3, [pc, #156]	@ (8005c74 <low_level_init+0x184>)
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	795a      	ldrb	r2, [r3, #5]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005be6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bee:	f043 030a 	orr.w	r3, r3, #10
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f000 fd78 	bl	80066f4 <osSemaphoreNew>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4a21      	ldr	r2, [pc, #132]	@ (8005c8c <low_level_init+0x19c>)
 8005c08:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	2224      	movs	r2, #36	@ 0x24
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f012 fd2c 	bl	8018670 <memset>
  attributes.name = "EthIf";
 8005c18:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <low_level_init+0x1a0>)
 8005c1a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005c1c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 8005c22:	2330      	movs	r3, #48	@ 0x30
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4819      	ldr	r0, [pc, #100]	@ (8005c94 <low_level_init+0x1a4>)
 8005c30:	f000 fb44 	bl	80062bc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005c34:	480f      	ldr	r0, [pc, #60]	@ (8005c74 <low_level_init+0x184>)
 8005c36:	f7fc f967 	bl	8001f08 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005c3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c3e:	461a      	mov	r2, r3
 8005c40:	211d      	movs	r1, #29
 8005c42:	480c      	ldr	r0, [pc, #48]	@ (8005c74 <low_level_init+0x184>)
 8005c44:	f7fc f892 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	f043 030b 	orr.w	r3, r3, #11
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	461a      	mov	r2, r3
 8005c54:	211d      	movs	r1, #29
 8005c56:	4807      	ldr	r0, [pc, #28]	@ (8005c74 <low_level_init+0x184>)
 8005c58:	f7fc f8f0 	bl	8001e3c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005c5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c60:	461a      	mov	r2, r3
 8005c62:	211d      	movs	r1, #29
 8005c64:	4803      	ldr	r0, [pc, #12]	@ (8005c74 <low_level_init+0x184>)
 8005c66:	f7fc f881 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005c6a:	bf00      	nop
 8005c6c:	3740      	adds	r7, #64	@ 0x40
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20003e10 	.word	0x20003e10
 8005c78:	40028000 	.word	0x40028000
 8005c7c:	2000263c 	.word	0x2000263c
 8005c80:	20000dec 	.word	0x20000dec
 8005c84:	20000e6c 	.word	0x20000e6c
 8005c88:	20000d6c 	.word	0x20000d6c
 8005c8c:	20003e0c 	.word	0x20003e0c
 8005c90:	0801a87c 	.word	0x0801a87c
 8005c94:	08005f39 	.word	0x08005f39

08005c98 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8005dd0 <low_level_output+0x138>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005cba:	4b45      	ldr	r3, [pc, #276]	@ (8005dd0 <low_level_output+0x138>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	e05a      	b.n	8005d80 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da03      	bge.n	8005cda <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005cd2:	23f8      	movs	r3, #248	@ 0xf8
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8005cd8:	e05c      	b.n	8005d94 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	895b      	ldrh	r3, [r3, #10]
 8005cde:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ce4:	e02f      	b.n	8005d46 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	18d0      	adds	r0, r2, r3
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	18d1      	adds	r1, r2, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f012 fd70 	bl	80187e2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da03      	bge.n	8005d18 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005d10:	23f8      	movs	r3, #248	@ 0xf8
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8005d16:	e03d      	b.n	8005d94 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8005d28:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8005d34:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8005d40:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d8c8      	bhi.n	8005ce6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	18d0      	adds	r0, r2, r3
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f012 fd3c 	bl	80187e2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1a1      	bne.n	8005cca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	4811      	ldr	r0, [pc, #68]	@ (8005dd0 <low_level_output+0x138>)
 8005d8a:	f7fb fe05 	bl	8001998 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <low_level_output+0x138>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005da6:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <low_level_output+0x138>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dae:	461a      	mov	r2, r3
 8005db0:	2320      	movs	r3, #32
 8005db2:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <low_level_output+0x138>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005dc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3728      	adds	r7, #40	@ 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20003e10 	.word	0x20003e10

08005dd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	@ 0x30
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005df8:	484e      	ldr	r0, [pc, #312]	@ (8005f34 <low_level_input+0x160>)
 8005dfa:	f7fb feb7 	bl	8001b6c <HAL_ETH_GetReceivedFrame_IT>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <low_level_input+0x34>

    return NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e091      	b.n	8005f2c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005e08:	4b4a      	ldr	r3, [pc, #296]	@ (8005f34 <low_level_input+0x160>)
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005e0e:	4b49      	ldr	r3, [pc, #292]	@ (8005f34 <low_level_input+0x160>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8005e14:	89fb      	ldrh	r3, [r7, #14]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005e1a:	89fb      	ldrh	r3, [r7, #14]
 8005e1c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005e20:	4619      	mov	r1, r3
 8005e22:	2000      	movs	r0, #0
 8005e24:	f007 fe50 	bl	800dac8 <pbuf_alloc>
 8005e28:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d04b      	beq.n	8005ec8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005e30:	4b40      	ldr	r3, [pc, #256]	@ (8005f34 <low_level_input+0x160>)
 8005e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e34:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e3e:	e040      	b.n	8005ec2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	895b      	ldrh	r3, [r3, #10]
 8005e44:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005e4a:	e021      	b.n	8005e90 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	18d0      	adds	r0, r2, r3
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	18d1      	adds	r1, r2, r3
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	461a      	mov	r2, r3
 8005e64:	f012 fcbd 	bl	80187e2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8005e7e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8005e8a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d8d6      	bhi.n	8005e4c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	18d0      	adds	r0, r2, r3
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	f012 fc97 	bl	80187e2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1bb      	bne.n	8005e40 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <low_level_input+0x160>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ecc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	e00b      	b.n	8005eec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <low_level_input+0x160>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d3ee      	bcc.n	8005ed4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <low_level_input+0x160>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005efc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <low_level_input+0x160>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005f0e:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <low_level_input+0x160>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f16:	461a      	mov	r2, r3
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <low_level_input+0x160>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f24:	461a      	mov	r2, r3
 8005f26:	2300      	movs	r3, #0
 8005f28:	6093      	str	r3, [r2, #8]
  }
  return p;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3730      	adds	r7, #48	@ 0x30
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20003e10 	.word	0x20003e10

08005f38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f44:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <ethernetif_input+0x58>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f04f 31ff 	mov.w	r1, #4294967295
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fc6d 	bl	800682c <osSemaphoreAcquire>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f5      	bne.n	8005f44 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005f58:	480e      	ldr	r0, [pc, #56]	@ (8005f94 <ethernetif_input+0x5c>)
 8005f5a:	f011 fc51 	bl	8017800 <sys_mutex_lock>
        p = low_level_input( netif );
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff ff38 	bl	8005dd4 <low_level_input>
 8005f64:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	68b8      	ldr	r0, [r7, #8]
 8005f74:	4798      	blx	r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f008 f887 	bl	800e090 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005f82:	4804      	ldr	r0, [pc, #16]	@ (8005f94 <ethernetif_input+0x5c>)
 8005f84:	f011 fc4b 	bl	801781e <sys_mutex_unlock>
      } while(p!=NULL);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e4      	bne.n	8005f58 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f8e:	e7d9      	b.n	8005f44 <ethernetif_input+0xc>
 8005f90:	20003e0c 	.word	0x20003e0c
 8005f94:	200087ac 	.word	0x200087ac

08005f98 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <ethernetif_init+0x1c>
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <ethernetif_init+0x48>)
 8005fa8:	f240 223b 	movw	r2, #571	@ 0x23b
 8005fac:	490d      	ldr	r1, [pc, #52]	@ (8005fe4 <ethernetif_init+0x4c>)
 8005fae:	480e      	ldr	r0, [pc, #56]	@ (8005fe8 <ethernetif_init+0x50>)
 8005fb0:	f012 f9b8 	bl	8018324 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2273      	movs	r2, #115	@ 0x73
 8005fb8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2274      	movs	r2, #116	@ 0x74
 8005fc0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a09      	ldr	r2, [pc, #36]	@ (8005fec <ethernetif_init+0x54>)
 8005fc8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a08      	ldr	r2, [pc, #32]	@ (8005ff0 <ethernetif_init+0x58>)
 8005fce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fd8d 	bl	8005af0 <low_level_init>

  return ERR_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	0801a884 	.word	0x0801a884
 8005fe4:	0801a8a0 	.word	0x0801a8a0
 8005fe8:	0801a8b0 	.word	0x0801a8b0
 8005fec:	08015855 	.word	0x08015855
 8005ff0:	08005c99 	.word	0x08005c99

08005ff4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ff8:	f7fb f950 	bl	800129c <HAL_GetTick>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	461a      	mov	r2, r3
 800601a:	2101      	movs	r1, #1
 800601c:	4816      	ldr	r0, [pc, #88]	@ (8006078 <ethernetif_set_link+0x74>)
 800601e:	f7fb fea5 	bl	8001d6c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <ethernetif_set_link+0x48>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f007 fc11 	bl	800d86c <netif_set_link_up>
 800604a:	e011      	b.n	8006070 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <ethernetif_set_link+0x6c>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f007 fc32 	bl	800d8d4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006070:	20c8      	movs	r0, #200	@ 0xc8
 8006072:	f000 f9c9 	bl	8006408 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006076:	e7cd      	b.n	8006014 <ethernetif_set_link+0x10>
 8006078:	20003e10 	.word	0x20003e10

0800607c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d05d      	beq.n	800615a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800609e:	4b34      	ldr	r3, [pc, #208]	@ (8006170 <ethernetif_update_config+0xf4>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d03f      	beq.n	8006126 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80060a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80060aa:	2100      	movs	r1, #0
 80060ac:	4830      	ldr	r0, [pc, #192]	@ (8006170 <ethernetif_update_config+0xf4>)
 80060ae:	f7fb fec5 	bl	8001e3c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80060b2:	f7fb f8f3 	bl	800129c <HAL_GetTick>
 80060b6:	4603      	mov	r3, r0
 80060b8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	461a      	mov	r2, r3
 80060c0:	2101      	movs	r1, #1
 80060c2:	482b      	ldr	r0, [pc, #172]	@ (8006170 <ethernetif_update_config+0xf4>)
 80060c4:	f7fb fe52 	bl	8001d6c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80060c8:	f7fb f8e8 	bl	800129c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060d6:	d828      	bhi.n	800612a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0eb      	beq.n	80060ba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	461a      	mov	r2, r3
 80060e8:	2110      	movs	r1, #16
 80060ea:	4821      	ldr	r0, [pc, #132]	@ (8006170 <ethernetif_update_config+0xf4>)
 80060ec:	f7fb fe3e 	bl	8001d6c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80060fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <ethernetif_update_config+0xf4>)
 80060fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e002      	b.n	800610a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <ethernetif_update_config+0xf4>)
 8006106:	2200      	movs	r2, #0
 8006108:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006114:	4b16      	ldr	r3, [pc, #88]	@ (8006170 <ethernetif_update_config+0xf4>)
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
 800611a:	e016      	b.n	800614a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800611c:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <ethernetif_update_config+0xf4>)
 800611e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	e011      	b.n	800614a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <ethernetif_update_config+0xb0>
          goto error;
 800612a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800612c:	4b10      	ldr	r3, [pc, #64]	@ (8006170 <ethernetif_update_config+0xf4>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	08db      	lsrs	r3, r3, #3
 8006132:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006134:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <ethernetif_update_config+0xf4>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800613c:	4313      	orrs	r3, r2
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	2100      	movs	r1, #0
 8006144:	480a      	ldr	r0, [pc, #40]	@ (8006170 <ethernetif_update_config+0xf4>)
 8006146:	f7fb fe79 	bl	8001e3c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800614a:	2100      	movs	r1, #0
 800614c:	4808      	ldr	r0, [pc, #32]	@ (8006170 <ethernetif_update_config+0xf4>)
 800614e:	f7fb ff39 	bl	8001fc4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006152:	4807      	ldr	r0, [pc, #28]	@ (8006170 <ethernetif_update_config+0xf4>)
 8006154:	f7fb fed8 	bl	8001f08 <HAL_ETH_Start>
 8006158:	e002      	b.n	8006160 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800615a:	4805      	ldr	r0, [pc, #20]	@ (8006170 <ethernetif_update_config+0xf4>)
 800615c:	f7fb ff03 	bl	8001f66 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f807 	bl	8006174 <ethernetif_notify_conn_changed>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20003e10 	.word	0x20003e10

08006174 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619e:	f3ef 8305 	mrs	r3, IPSR
 80061a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80061a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061aa:	f3ef 8310 	mrs	r3, PRIMASK
 80061ae:	607b      	str	r3, [r7, #4]
  return(result);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061b6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ba:	603b      	str	r3, [r7, #0]
  return(result);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <osKernelInitialize+0x3a>
 80061c2:	4b0e      	ldr	r3, [pc, #56]	@ (80061fc <osKernelInitialize+0x64>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d103      	bne.n	80061d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80061ca:	f06f 0305 	mvn.w	r3, #5
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e00c      	b.n	80061ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061d2:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <osKernelInitialize+0x64>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80061da:	4b08      	ldr	r3, [pc, #32]	@ (80061fc <osKernelInitialize+0x64>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e002      	b.n	80061ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20003e58 	.word	0x20003e58

08006200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006206:	f3ef 8305 	mrs	r3, IPSR
 800620a:	60bb      	str	r3, [r7, #8]
  return(result);
 800620c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006212:	f3ef 8310 	mrs	r3, PRIMASK
 8006216:	607b      	str	r3, [r7, #4]
  return(result);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	603b      	str	r3, [r7, #0]
  return(result);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <osKernelStart+0x3a>
 800622a:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <osKernelStart+0x68>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d103      	bne.n	800623a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006232:	f06f 0305 	mvn.w	r3, #5
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e010      	b.n	800625c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800623a:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <osKernelStart+0x68>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d109      	bne.n	8006256 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006242:	f7ff ffa1 	bl	8006188 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006246:	4b08      	ldr	r3, [pc, #32]	@ (8006268 <osKernelStart+0x68>)
 8006248:	2202      	movs	r2, #2
 800624a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800624c:	f002 fae0 	bl	8008810 <vTaskStartScheduler>
      stat = osOK;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e002      	b.n	800625c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
 800625a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800625c:	68fb      	ldr	r3, [r7, #12]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20003e58 	.word	0x20003e58

0800626c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006272:	f3ef 8305 	mrs	r3, IPSR
 8006276:	60bb      	str	r3, [r7, #8]
  return(result);
 8006278:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10f      	bne.n	800629e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627e:	f3ef 8310 	mrs	r3, PRIMASK
 8006282:	607b      	str	r3, [r7, #4]
  return(result);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800628a:	f3ef 8311 	mrs	r3, BASEPRI
 800628e:	603b      	str	r3, [r7, #0]
  return(result);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <osKernelGetTickCount+0x3a>
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <osKernelGetTickCount+0x4c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d103      	bne.n	80062a6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800629e:	f002 fbe1 	bl	8008a64 <xTaskGetTickCountFromISR>
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	e002      	b.n	80062ac <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80062a6:	f002 fbcd 	bl	8008a44 <xTaskGetTickCount>
 80062aa:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20003e58 	.word	0x20003e58

080062bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b090      	sub	sp, #64	@ 0x40
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062cc:	f3ef 8305 	mrs	r3, IPSR
 80062d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80062d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f040 808f 	bne.w	80063f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062da:	f3ef 8310 	mrs	r3, PRIMASK
 80062de:	61bb      	str	r3, [r7, #24]
  return(result);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062e6:	f3ef 8311 	mrs	r3, BASEPRI
 80062ea:	617b      	str	r3, [r7, #20]
  return(result);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osThreadNew+0x3e>
 80062f2:	4b44      	ldr	r3, [pc, #272]	@ (8006404 <osThreadNew+0x148>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d07e      	beq.n	80063f8 <osThreadNew+0x13c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d07b      	beq.n	80063f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006304:	2318      	movs	r3, #24
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d045      	beq.n	80063a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <osThreadNew+0x6a>
        name = attr->name;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <osThreadNew+0x90>
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	2b38      	cmp	r3, #56	@ 0x38
 800633e:	d805      	bhi.n	800634c <osThreadNew+0x90>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <osThreadNew+0x94>
        return (NULL);
 800634c:	2300      	movs	r3, #0
 800634e:	e054      	b.n	80063fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <osThreadNew+0xca>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b5b      	cmp	r3, #91	@ 0x5b
 800636e:	d90a      	bls.n	8006386 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <osThreadNew+0xca>
        mem = 1;
 8006380:	2301      	movs	r3, #1
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	e010      	b.n	80063a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10c      	bne.n	80063a8 <osThreadNew+0xec>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <osThreadNew+0xec>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <osThreadNew+0xec>
          mem = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	e001      	b.n	80063a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d110      	bne.n	80063d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063b6:	9202      	str	r2, [sp, #8]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f002 f83d 	bl	8008444 <xTaskCreateStatic>
 80063ca:	4603      	mov	r3, r0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e013      	b.n	80063f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d110      	bne.n	80063f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f107 0310 	add.w	r3, r7, #16
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f002 f891 	bl	8008510 <xTaskCreate>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <osThreadNew+0x13c>
          hTask = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063f8:	693b      	ldr	r3, [r7, #16]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3730      	adds	r7, #48	@ 0x30
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20003e58 	.word	0x20003e58

08006408 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006410:	f3ef 8305 	mrs	r3, IPSR
 8006414:	613b      	str	r3, [r7, #16]
  return(result);
 8006416:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10f      	bne.n	800643c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641c:	f3ef 8310 	mrs	r3, PRIMASK
 8006420:	60fb      	str	r3, [r7, #12]
  return(result);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006428:	f3ef 8311 	mrs	r3, BASEPRI
 800642c:	60bb      	str	r3, [r7, #8]
  return(result);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <osDelay+0x3c>
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <osDelay+0x58>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d103      	bne.n	8006444 <osDelay+0x3c>
    stat = osErrorISR;
 800643c:	f06f 0305 	mvn.w	r3, #5
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e007      	b.n	8006454 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <osDelay+0x4c>
      vTaskDelay(ticks);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f002 f9a6 	bl	80087a0 <vTaskDelay>
    }
  }

  return (stat);
 8006454:	697b      	ldr	r3, [r7, #20]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20003e58 	.word	0x20003e58

08006464 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	@ 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006470:	f3ef 8305 	mrs	r3, IPSR
 8006474:	613b      	str	r3, [r7, #16]
  return(result);
 8006476:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8085 	bne.w	8006588 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	60fb      	str	r3, [r7, #12]
  return(result);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800648a:	f3ef 8311 	mrs	r3, BASEPRI
 800648e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <osMutexNew+0x3a>
 8006496:	4b3f      	ldr	r3, [pc, #252]	@ (8006594 <osMutexNew+0x130>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d074      	beq.n	8006588 <osMutexNew+0x124>
    if (attr != NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <osMutexNew+0x48>
      type = attr->attr_bits;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e001      	b.n	80064b0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <osMutexNew+0x5c>
      rmtx = 1U;
 80064ba:	2301      	movs	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e001      	b.n	80064c4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d15c      	bne.n	8006588 <osMutexNew+0x124>
      mem = -1;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d015      	beq.n	8006506 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <osMutexNew+0x8c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80064e8:	d902      	bls.n	80064f0 <osMutexNew+0x8c>
          mem = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e00c      	b.n	800650a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <osMutexNew+0xa6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <osMutexNew+0xa6>
            mem = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e001      	b.n	800650a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d112      	bne.n	8006536 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d007      	beq.n	8006526 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	4619      	mov	r1, r3
 800651c:	2004      	movs	r0, #4
 800651e:	f000 fec0 	bl	80072a2 <xQueueCreateMutexStatic>
 8006522:	6278      	str	r0, [r7, #36]	@ 0x24
 8006524:	e016      	b.n	8006554 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	4619      	mov	r1, r3
 800652c:	2001      	movs	r0, #1
 800652e:	f000 feb8 	bl	80072a2 <xQueueCreateMutexStatic>
 8006532:	6278      	str	r0, [r7, #36]	@ 0x24
 8006534:	e00e      	b.n	8006554 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006542:	2004      	movs	r0, #4
 8006544:	f000 fe95 	bl	8007272 <xQueueCreateMutex>
 8006548:	6278      	str	r0, [r7, #36]	@ 0x24
 800654a:	e003      	b.n	8006554 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800654c:	2001      	movs	r0, #1
 800654e:	f000 fe90 	bl	8007272 <xQueueCreateMutex>
 8006552:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <osMutexNew+0x110>
        if (attr != NULL) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <osMutexNew+0x104>
          name = attr->name;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e001      	b.n	800656c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006570:	f001 fee0 	bl	8008334 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <osMutexNew+0x124>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800658a:	4618      	mov	r0, r3
 800658c:	3728      	adds	r7, #40	@ 0x28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20003e58 	.word	0x20003e58

08006598 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b6:	f3ef 8305 	mrs	r3, IPSR
 80065ba:	613b      	str	r3, [r7, #16]
  return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c2:	f3ef 8310 	mrs	r3, PRIMASK
 80065c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ce:	f3ef 8311 	mrs	r3, BASEPRI
 80065d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <osMutexAcquire+0x52>
 80065da:	4b1d      	ldr	r3, [pc, #116]	@ (8006650 <osMutexAcquire+0xb8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <osMutexAcquire+0x52>
    stat = osErrorISR;
 80065e2:	f06f 0305 	mvn.w	r3, #5
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e02c      	b.n	8006644 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80065f0:	f06f 0303 	mvn.w	r3, #3
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	e025      	b.n	8006644 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f000 fea0 	bl	8007346 <xQueueTakeMutexRecursive>
 8006606:	4603      	mov	r3, r0
 8006608:	2b01      	cmp	r3, #1
 800660a:	d01b      	beq.n	8006644 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006612:	f06f 0301 	mvn.w	r3, #1
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	e014      	b.n	8006644 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800661a:	f06f 0302 	mvn.w	r3, #2
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	e010      	b.n	8006644 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	69b8      	ldr	r0, [r7, #24]
 8006626:	f001 fa6b 	bl	8007b00 <xQueueSemaphoreTake>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d009      	beq.n	8006644 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006636:	f06f 0301 	mvn.w	r3, #1
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	e002      	b.n	8006644 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800663e:	f06f 0302 	mvn.w	r3, #2
 8006642:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006644:	69fb      	ldr	r3, [r7, #28]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20003e58 	.word	0x20003e58

08006654 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006670:	f3ef 8305 	mrs	r3, IPSR
 8006674:	613b      	str	r3, [r7, #16]
  return(result);
 8006676:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	60fb      	str	r3, [r7, #12]
  return(result);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006688:	f3ef 8311 	mrs	r3, BASEPRI
 800668c:	60bb      	str	r3, [r7, #8]
  return(result);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <osMutexRelease+0x50>
 8006694:	4b16      	ldr	r3, [pc, #88]	@ (80066f0 <osMutexRelease+0x9c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d103      	bne.n	80066a4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800669c:	f06f 0305 	mvn.w	r3, #5
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	e01f      	b.n	80066e4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80066aa:	f06f 0303 	mvn.w	r3, #3
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	e018      	b.n	80066e4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80066b8:	69b8      	ldr	r0, [r7, #24]
 80066ba:	f000 fe0d 	bl	80072d8 <xQueueGiveMutexRecursive>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d00f      	beq.n	80066e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80066c4:	f06f 0302 	mvn.w	r3, #2
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e00b      	b.n	80066e4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80066cc:	2300      	movs	r3, #0
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	69b8      	ldr	r0, [r7, #24]
 80066d4:	f000 fee6 	bl	80074a4 <xQueueGenericSend>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d002      	beq.n	80066e4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80066de:	f06f 0302 	mvn.w	r3, #2
 80066e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80066e4:	69fb      	ldr	r3, [r7, #28]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20003e58 	.word	0x20003e58

080066f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08c      	sub	sp, #48	@ 0x30
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006704:	f3ef 8305 	mrs	r3, IPSR
 8006708:	61bb      	str	r3, [r7, #24]
  return(result);
 800670a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8086 	bne.w	800681e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	617b      	str	r3, [r7, #20]
  return(result);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800671e:	f3ef 8311 	mrs	r3, BASEPRI
 8006722:	613b      	str	r3, [r7, #16]
  return(result);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osSemaphoreNew+0x3e>
 800672a:	4b3f      	ldr	r3, [pc, #252]	@ (8006828 <osSemaphoreNew+0x134>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d075      	beq.n	800681e <osSemaphoreNew+0x12a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d072      	beq.n	800681e <osSemaphoreNew+0x12a>
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d86e      	bhi.n	800681e <osSemaphoreNew+0x12a>
    mem = -1;
 8006740:	f04f 33ff 	mov.w	r3, #4294967295
 8006744:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d006      	beq.n	8006762 <osSemaphoreNew+0x6e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b4f      	cmp	r3, #79	@ 0x4f
 800675a:	d902      	bls.n	8006762 <osSemaphoreNew+0x6e>
        mem = 1;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	e00c      	b.n	800677c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d108      	bne.n	800677c <osSemaphoreNew+0x88>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <osSemaphoreNew+0x88>
          mem = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e001      	b.n	800677c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d04c      	beq.n	800681e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d128      	bne.n	80067dc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10a      	bne.n	80067a6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2203      	movs	r2, #3
 8006796:	9200      	str	r2, [sp, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	2001      	movs	r0, #1
 800679e:	f000 fc61 	bl	8007064 <xQueueGenericCreateStatic>
 80067a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80067a4:	e005      	b.n	80067b2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80067a6:	2203      	movs	r2, #3
 80067a8:	2100      	movs	r1, #0
 80067aa:	2001      	movs	r0, #1
 80067ac:	f000 fce1 	bl	8007172 <xQueueGenericCreate>
 80067b0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d022      	beq.n	80067fe <osSemaphoreNew+0x10a>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80067be:	2300      	movs	r3, #0
 80067c0:	2200      	movs	r2, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067c6:	f000 fe6d 	bl	80074a4 <xQueueGenericSend>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d016      	beq.n	80067fe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80067d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067d2:	f001 fc61 	bl	8008098 <vQueueDelete>
            hSemaphore = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067da:	e010      	b.n	80067fe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d108      	bne.n	80067f4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fde4 	bl	80073b8 <xQueueCreateCountingSemaphoreStatic>
 80067f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067f2:	e004      	b.n	80067fe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fe1b 	bl	8007432 <xQueueCreateCountingSemaphore>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osSemaphoreNew+0x11e>
          name = attr->name;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e001      	b.n	8006816 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006816:	69f9      	ldr	r1, [r7, #28]
 8006818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800681a:	f001 fd8b 	bl	8008334 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006820:	4618      	mov	r0, r3
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20003e58 	.word	0x20003e58

0800682c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d103      	bne.n	800684c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006844:	f06f 0303 	mvn.w	r3, #3
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e04b      	b.n	80068e4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	617b      	str	r3, [r7, #20]
  return(result);
 8006852:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10f      	bne.n	8006878 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006858:	f3ef 8310 	mrs	r3, PRIMASK
 800685c:	613b      	str	r3, [r7, #16]
  return(result);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006864:	f3ef 8311 	mrs	r3, BASEPRI
 8006868:	60fb      	str	r3, [r7, #12]
  return(result);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d026      	beq.n	80068be <osSemaphoreAcquire+0x92>
 8006870:	4b1f      	ldr	r3, [pc, #124]	@ (80068f0 <osSemaphoreAcquire+0xc4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d122      	bne.n	80068be <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800687e:	f06f 0303 	mvn.w	r3, #3
 8006882:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006884:	e02d      	b.n	80068e2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	461a      	mov	r2, r3
 8006890:	2100      	movs	r1, #0
 8006892:	69b8      	ldr	r0, [r7, #24]
 8006894:	f001 fb36 	bl	8007f04 <xQueueReceiveFromISR>
 8006898:	4603      	mov	r3, r0
 800689a:	2b01      	cmp	r3, #1
 800689c:	d003      	beq.n	80068a6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800689e:	f06f 0302 	mvn.w	r3, #2
 80068a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80068a4:	e01d      	b.n	80068e2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01a      	beq.n	80068e2 <osSemaphoreAcquire+0xb6>
 80068ac:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <osSemaphoreAcquire+0xc8>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80068bc:	e011      	b.n	80068e2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	69b8      	ldr	r0, [r7, #24]
 80068c2:	f001 f91d 	bl	8007b00 <xQueueSemaphoreTake>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d00b      	beq.n	80068e4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80068d2:	f06f 0301 	mvn.w	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e004      	b.n	80068e4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80068da:	f06f 0302 	mvn.w	r3, #2
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e000      	b.n	80068e4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80068e2:	bf00      	nop
      }
    }
  }

  return (stat);
 80068e4:	69fb      	ldr	r3, [r7, #28]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20003e58 	.word	0x20003e58
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d103      	bne.n	8006916 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800690e:	f06f 0303 	mvn.w	r3, #3
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e03e      	b.n	8006994 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	617b      	str	r3, [r7, #20]
  return(result);
 800691c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006922:	f3ef 8310 	mrs	r3, PRIMASK
 8006926:	613b      	str	r3, [r7, #16]
  return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800692e:	f3ef 8311 	mrs	r3, BASEPRI
 8006932:	60fb      	str	r3, [r7, #12]
  return(result);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01e      	beq.n	8006978 <osSemaphoreRelease+0x80>
 800693a:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <osSemaphoreRelease+0xa8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d11a      	bne.n	8006978 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4619      	mov	r1, r3
 800694c:	69b8      	ldr	r0, [r7, #24]
 800694e:	f000 ff56 	bl	80077fe <xQueueGiveFromISR>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d003      	beq.n	8006960 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006958:	f06f 0302 	mvn.w	r3, #2
 800695c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800695e:	e018      	b.n	8006992 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d015      	beq.n	8006992 <osSemaphoreRelease+0x9a>
 8006966:	4b0f      	ldr	r3, [pc, #60]	@ (80069a4 <osSemaphoreRelease+0xac>)
 8006968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006976:	e00c      	b.n	8006992 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006978:	2300      	movs	r3, #0
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	69b8      	ldr	r0, [r7, #24]
 8006980:	f000 fd90 	bl	80074a4 <xQueueGenericSend>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	d004      	beq.n	8006994 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800698a:	f06f 0302 	mvn.w	r3, #2
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e000      	b.n	8006994 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006992:	bf00      	nop
    }
  }

  return (stat);
 8006994:	69fb      	ldr	r3, [r7, #28]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20003e58 	.word	0x20003e58
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b4:	f3ef 8305 	mrs	r3, IPSR
 80069b8:	617b      	str	r3, [r7, #20]
  return(result);
 80069ba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10f      	bne.n	80069e0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c0:	f3ef 8310 	mrs	r3, PRIMASK
 80069c4:	613b      	str	r3, [r7, #16]
  return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069cc:	f3ef 8311 	mrs	r3, BASEPRI
 80069d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <osSemaphoreDelete+0x40>
 80069d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <osSemaphoreDelete+0x68>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d103      	bne.n	80069e8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80069e0:	f06f 0305 	mvn.w	r3, #5
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	e00e      	b.n	8006a06 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80069ee:	f06f 0303 	mvn.w	r3, #3
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e007      	b.n	8006a06 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80069f6:	69b8      	ldr	r0, [r7, #24]
 80069f8:	f001 fcc6 	bl	8008388 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006a00:	69b8      	ldr	r0, [r7, #24]
 8006a02:	f001 fb49 	bl	8008098 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006a06:	69fb      	ldr	r3, [r7, #28]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20003e58 	.word	0x20003e58

08006a14 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08c      	sub	sp, #48	@ 0x30
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a24:	f3ef 8305 	mrs	r3, IPSR
 8006a28:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d16f      	bne.n	8006b10 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a30:	f3ef 8310 	mrs	r3, PRIMASK
 8006a34:	617b      	str	r3, [r7, #20]
  return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a40:	613b      	str	r3, [r7, #16]
  return(result);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <osMessageQueueNew+0x3c>
 8006a48:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <osMessageQueueNew+0x108>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d05f      	beq.n	8006b10 <osMessageQueueNew+0xfc>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d05c      	beq.n	8006b10 <osMessageQueueNew+0xfc>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d059      	beq.n	8006b10 <osMessageQueueNew+0xfc>
    mem = -1;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d029      	beq.n	8006abc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d012      	beq.n	8006a96 <osMessageQueueNew+0x82>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a76:	d90e      	bls.n	8006a96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695a      	ldr	r2, [r3, #20]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <osMessageQueueNew+0x82>
        mem = 1;
 8006a90:	2301      	movs	r3, #1
 8006a92:	623b      	str	r3, [r7, #32]
 8006a94:	e014      	b.n	8006ac0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d110      	bne.n	8006ac0 <osMessageQueueNew+0xac>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10c      	bne.n	8006ac0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <osMessageQueueNew+0xac>
          mem = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	623b      	str	r3, [r7, #32]
 8006aba:	e001      	b.n	8006ac0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d10b      	bne.n	8006ade <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	9100      	str	r1, [sp, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fac5 	bl	8007064 <xQueueGenericCreateStatic>
 8006ada:	6278      	str	r0, [r7, #36]	@ 0x24
 8006adc:	e008      	b.n	8006af0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fb42 	bl	8007172 <xQueueGenericCreate>
 8006aee:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e001      	b.n	8006b08 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b0c:	f001 fc12 	bl	8008334 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	@ 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20003e58 	.word	0x20003e58

08006b20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	@ 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b38:	f3ef 8305 	mrs	r3, IPSR
 8006b3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b3e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b44:	f3ef 8310 	mrs	r3, PRIMASK
 8006b48:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b50:	f3ef 8311 	mrs	r3, BASEPRI
 8006b54:	617b      	str	r3, [r7, #20]
  return(result);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02c      	beq.n	8006bb6 <osMessageQueuePut+0x96>
 8006b5c:	4b28      	ldr	r3, [pc, #160]	@ (8006c00 <osMessageQueuePut+0xe0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d128      	bne.n	8006bb6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <osMessageQueuePut+0x56>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <osMessageQueuePut+0x56>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006b76:	f06f 0303 	mvn.w	r3, #3
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b7c:	e039      	b.n	8006bf2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b82:	f107 0210 	add.w	r2, r7, #16
 8006b86:	2300      	movs	r3, #0
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	6a38      	ldr	r0, [r7, #32]
 8006b8c:	f000 fd94 	bl	80076b8 <xQueueGenericSendFromISR>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d003      	beq.n	8006b9e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006b96:	f06f 0302 	mvn.w	r3, #2
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b9c:	e029      	b.n	8006bf2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d026      	beq.n	8006bf2 <osMessageQueuePut+0xd2>
 8006ba4:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <osMessageQueuePut+0xe4>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bb4:	e01d      	b.n	8006bf2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <osMessageQueuePut+0xa2>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006bc2:	f06f 0303 	mvn.w	r3, #3
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc8:	e014      	b.n	8006bf4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	6a38      	ldr	r0, [r7, #32]
 8006bd2:	f000 fc67 	bl	80074a4 <xQueueGenericSend>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d00b      	beq.n	8006bf4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006be2:	f06f 0301 	mvn.w	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be8:	e004      	b.n	8006bf4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006bea:	f06f 0302 	mvn.w	r3, #2
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf0:	e000      	b.n	8006bf4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bf2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3728      	adds	r7, #40	@ 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20003e58 	.word	0x20003e58
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	@ 0x28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1e:	f3ef 8305 	mrs	r3, IPSR
 8006c22:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10f      	bne.n	8006c4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c36:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02c      	beq.n	8006c9c <osMessageQueueGet+0x94>
 8006c42:	4b28      	ldr	r3, [pc, #160]	@ (8006ce4 <osMessageQueueGet+0xdc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d128      	bne.n	8006c9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <osMessageQueueGet+0x54>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <osMessageQueueGet+0x54>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006c5c:	f06f 0303 	mvn.w	r3, #3
 8006c60:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c62:	e038      	b.n	8006cd6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	6a38      	ldr	r0, [r7, #32]
 8006c72:	f001 f947 	bl	8007f04 <xQueueReceiveFromISR>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006c7c:	f06f 0302 	mvn.w	r3, #2
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c82:	e028      	b.n	8006cd6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d025      	beq.n	8006cd6 <osMessageQueueGet+0xce>
 8006c8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ce8 <osMessageQueueGet+0xe0>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c9a:	e01c      	b.n	8006cd6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <osMessageQueueGet+0xa0>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006ca8:	f06f 0303 	mvn.w	r3, #3
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cae:	e013      	b.n	8006cd8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	6a38      	ldr	r0, [r7, #32]
 8006cb6:	f000 fe3b 	bl	8007930 <xQueueReceive>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d00b      	beq.n	8006cd8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006cc6:	f06f 0301 	mvn.w	r3, #1
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ccc:	e004      	b.n	8006cd8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006cce:	f06f 0302 	mvn.w	r3, #2
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd4:	e000      	b.n	8006cd8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cd6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3728      	adds	r7, #40	@ 0x28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20003e58 	.word	0x20003e58
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	e01e      	b.n	8006d42 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d04:	f3ef 8305 	mrs	r3, IPSR
 8006d08:	617b      	str	r3, [r7, #20]
  return(result);
 8006d0a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10f      	bne.n	8006d30 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d10:	f3ef 8310 	mrs	r3, PRIMASK
 8006d14:	613b      	str	r3, [r7, #16]
  return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <osMessageQueueGetCount+0x4e>
 8006d28:	4b08      	ldr	r3, [pc, #32]	@ (8006d4c <osMessageQueueGetCount+0x60>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d104      	bne.n	8006d3a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006d30:	69b8      	ldr	r0, [r7, #24]
 8006d32:	f001 f990 	bl	8008056 <uxQueueMessagesWaitingFromISR>
 8006d36:	61f8      	str	r0, [r7, #28]
 8006d38:	e003      	b.n	8006d42 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006d3a:	69b8      	ldr	r0, [r7, #24]
 8006d3c:	f001 f96a 	bl	8008014 <uxQueueMessagesWaiting>
 8006d40:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006d42:	69fb      	ldr	r3, [r7, #28]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20003e58 	.word	0x20003e58

08006d50 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5c:	f3ef 8305 	mrs	r3, IPSR
 8006d60:	617b      	str	r3, [r7, #20]
  return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10f      	bne.n	8006d88 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d68:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d74:	f3ef 8311 	mrs	r3, BASEPRI
 8006d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <osMessageQueueDelete+0x40>
 8006d80:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <osMessageQueueDelete+0x68>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d103      	bne.n	8006d90 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006d88:	f06f 0305 	mvn.w	r3, #5
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e00e      	b.n	8006dae <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006d96:	f06f 0303 	mvn.w	r3, #3
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e007      	b.n	8006dae <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006d9e:	69b8      	ldr	r0, [r7, #24]
 8006da0:	f001 faf2 	bl	8008388 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006da8:	69b8      	ldr	r0, [r7, #24]
 8006daa:	f001 f975 	bl	8008098 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006dae:	69fb      	ldr	r3, [r7, #28]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20003e58 	.word	0x20003e58

08006dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a07      	ldr	r2, [pc, #28]	@ (8006de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4a06      	ldr	r2, [pc, #24]	@ (8006dec <vApplicationGetIdleTaskMemory+0x30>)
 8006dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2280      	movs	r2, #128	@ 0x80
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20003e5c 	.word	0x20003e5c
 8006dec:	20003eb8 	.word	0x20003eb8

08006df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8006e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4a06      	ldr	r2, [pc, #24]	@ (8006e20 <vApplicationGetTimerTaskMemory+0x30>)
 8006e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	200040b8 	.word	0x200040b8
 8006e20:	20004114 	.word	0x20004114

08006e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f103 0208 	add.w	r2, r3, #8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 0208 	add.w	r2, r3, #8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f103 0208 	add.w	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d103      	bne.n	8006ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e00c      	b.n	8006f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e002      	b.n	8006ef4 <vListInsert+0x2e>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d2f6      	bcs.n	8006eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6892      	ldr	r2, [r2, #8]
 8006f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6852      	ldr	r2, [r2, #4]
 8006f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d103      	bne.n	8006f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10d      	bne.n	8006fbc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	b672      	cpsid	i
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	b662      	cpsie	i
 8006fb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006fbc:	f002 ff0e 	bl	8009ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	68f9      	ldr	r1, [r7, #12]
 8006fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fec:	3b01      	subs	r3, #1
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	22ff      	movs	r2, #255	@ 0xff
 8007000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	22ff      	movs	r2, #255	@ 0xff
 8007008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d114      	bne.n	800703c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01a      	beq.n	8007050 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3310      	adds	r3, #16
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fea4 	bl	8008d6c <xTaskRemoveFromEventList>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d012      	beq.n	8007050 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <xQueueGenericReset+0xd4>)
 800702c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	e009      	b.n	8007050 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3310      	adds	r3, #16
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff feef 	bl	8006e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3324      	adds	r3, #36	@ 0x24
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff feea 	bl	8006e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007050:	f002 fefa 	bl	8009e48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007054:	2301      	movs	r3, #1
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	@ 0x38
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10d      	bne.n	8007094 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10d      	bne.n	80070b6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	b672      	cpsid	i
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	b662      	cpsie	i
 80070ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <xQueueGenericCreateStatic+0x5e>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <xQueueGenericCreateStatic+0x62>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericCreateStatic+0x64>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10d      	bne.n	80070e8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d0:	b672      	cpsid	i
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	b662      	cpsie	i
 80070e0:	623b      	str	r3, [r7, #32]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <xQueueGenericCreateStatic+0x90>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <xQueueGenericCreateStatic+0x94>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <xQueueGenericCreateStatic+0x96>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10d      	bne.n	800711a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	b672      	cpsid	i
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	b662      	cpsie	i
 8007112:	61fb      	str	r3, [r7, #28]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800711a:	2350      	movs	r3, #80	@ 0x50
 800711c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b50      	cmp	r3, #80	@ 0x50
 8007122:	d00d      	beq.n	8007140 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	b672      	cpsid	i
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	b662      	cpsie	i
 8007138:	61bb      	str	r3, [r7, #24]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007140:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00d      	beq.n	8007168 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007154:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f848 	bl	80071f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800716a:	4618      	mov	r0, r3
 800716c:	3730      	adds	r7, #48	@ 0x30
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08a      	sub	sp, #40	@ 0x28
 8007176:	af02      	add	r7, sp, #8
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	4613      	mov	r3, r2
 800717e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <xQueueGenericCreate+0x30>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	b672      	cpsid	i
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	b662      	cpsie	i
 800719a:	613b      	str	r3, [r7, #16]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e004      	b.n	80071b8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3350      	adds	r3, #80	@ 0x50
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 ff3b 	bl	800a038 <pvPortMalloc>
 80071c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	3350      	adds	r3, #80	@ 0x50
 80071d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4613      	mov	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f805 	bl	80071f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071ee:	69bb      	ldr	r3, [r7, #24]
	}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e002      	b.n	800721a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007226:	2101      	movs	r1, #1
 8007228:	69b8      	ldr	r0, [r7, #24]
 800722a:	f7ff feaf 	bl	8006f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00e      	beq.n	800726a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800725e:	2300      	movs	r3, #0
 8007260:	2200      	movs	r2, #0
 8007262:	2100      	movs	r1, #0
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f91d 	bl	80074a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	4603      	mov	r3, r0
 800727a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	461a      	mov	r2, r3
 8007288:	6939      	ldr	r1, [r7, #16]
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff71 	bl	8007172 <xQueueGenericCreate>
 8007290:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ffd3 	bl	800723e <prvInitialiseMutex>

		return xNewQueue;
 8007298:	68fb      	ldr	r3, [r7, #12]
	}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b088      	sub	sp, #32
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	4603      	mov	r3, r0
 80072aa:	6039      	str	r1, [r7, #0]
 80072ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072ae:	2301      	movs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	6939      	ldr	r1, [r7, #16]
 80072c0:	6978      	ldr	r0, [r7, #20]
 80072c2:	f7ff fecf 	bl	8007064 <xQueueGenericCreateStatic>
 80072c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff ffb8 	bl	800723e <prvInitialiseMutex>

		return xNewQueue;
 80072ce:	68fb      	ldr	r3, [r7, #12]
	}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	b672      	cpsid	i
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	b662      	cpsie	i
 80072fe:	60fb      	str	r3, [r7, #12]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	689c      	ldr	r4, [r3, #8]
 800730a:	f001 fef7 	bl	80090fc <xTaskGetCurrentTaskHandle>
 800730e:	4603      	mov	r3, r0
 8007310:	429c      	cmp	r4, r3
 8007312:	d111      	bne.n	8007338 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	1e5a      	subs	r2, r3, #1
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	6938      	ldr	r0, [r7, #16]
 800732e:	f000 f8b9 	bl	80074a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007332:	2301      	movs	r3, #1
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e001      	b.n	800733c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800733c:	697b      	ldr	r3, [r7, #20]
	}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd90      	pop	{r4, r7, pc}

08007346 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007346:	b590      	push	{r4, r7, lr}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	b672      	cpsid	i
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	b662      	cpsie	i
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	689c      	ldr	r4, [r3, #8]
 800737a:	f001 febf 	bl	80090fc <xTaskGetCurrentTaskHandle>
 800737e:	4603      	mov	r3, r0
 8007380:	429c      	cmp	r4, r3
 8007382:	d107      	bne.n	8007394 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800738e:	2301      	movs	r3, #1
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e00c      	b.n	80073ae <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6938      	ldr	r0, [r7, #16]
 8007398:	f000 fbb2 	bl	8007b00 <xQueueSemaphoreTake>
 800739c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80073ae:	697b      	ldr	r3, [r7, #20]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd90      	pop	{r4, r7, pc}

080073b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10d      	bne.n	80073e6 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	b672      	cpsid	i
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	b662      	cpsie	i
 80073de:	61bb      	str	r3, [r7, #24]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d90d      	bls.n	800740a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	b672      	cpsid	i
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	b662      	cpsie	i
 8007402:	617b      	str	r3, [r7, #20]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800740a:	2302      	movs	r3, #2
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff fe25 	bl	8007064 <xQueueGenericCreateStatic>
 800741a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007428:	69fb      	ldr	r3, [r7, #28]
	}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	613b      	str	r3, [r7, #16]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d90d      	bls.n	8007482 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	b672      	cpsid	i
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	b662      	cpsie	i
 800747a:	60fb      	str	r3, [r7, #12]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007482:	2202      	movs	r2, #2
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff fe73 	bl	8007172 <xQueueGenericCreate>
 800748c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800749a:	697b      	ldr	r3, [r7, #20]
	}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	@ 0x38
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074b2:	2300      	movs	r3, #0
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10d      	bne.n	80074dc <xQueueGenericSend+0x38>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <xQueueGenericSend+0x46>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <xQueueGenericSend+0x4a>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <xQueueGenericSend+0x4c>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10d      	bne.n	8007510 <xQueueGenericSend+0x6c>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	b672      	cpsid	i
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	b662      	cpsie	i
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d103      	bne.n	800751e <xQueueGenericSend+0x7a>
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <xQueueGenericSend+0x7e>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSend+0x80>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <xQueueGenericSend+0xa0>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	b672      	cpsid	i
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	b662      	cpsie	i
 800753c:	623b      	str	r3, [r7, #32]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007544:	f001 fdea 	bl	800911c <xTaskGetSchedulerState>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <xQueueGenericSend+0xb0>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <xQueueGenericSend+0xb4>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <xQueueGenericSend+0xb6>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <xQueueGenericSend+0xd6>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	b672      	cpsid	i
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	b662      	cpsie	i
 8007572:	61fb      	str	r3, [r7, #28]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800757a:	f002 fc2f 	bl	8009ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <xQueueGenericSend+0xec>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d129      	bne.n	80075e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007596:	f000 fdbd 	bl	8008114 <prvCopyDataToQueue>
 800759a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d010      	beq.n	80075c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	3324      	adds	r3, #36	@ 0x24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fbdf 	bl	8008d6c <xTaskRemoveFromEventList>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d013      	beq.n	80075dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075b4:	4b3f      	ldr	r3, [pc, #252]	@ (80076b4 <xQueueGenericSend+0x210>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	e00a      	b.n	80075dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075cc:	4b39      	ldr	r3, [pc, #228]	@ (80076b4 <xQueueGenericSend+0x210>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075dc:	f002 fc34 	bl	8009e48 <vPortExitCritical>
				return pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e063      	b.n	80076ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ea:	f002 fc2d 	bl	8009e48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e05c      	b.n	80076ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 fc1b 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007606:	f002 fc1f 	bl	8009e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800760a:	f001 f96d 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800760e:	f002 fbe5 	bl	8009ddc <vPortEnterCritical>
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d103      	bne.n	8007628 <xQueueGenericSend+0x184>
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800762e:	b25b      	sxtb	r3, r3
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d103      	bne.n	800763e <xQueueGenericSend+0x19a>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800763e:	f002 fc03 	bl	8009e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007642:	1d3a      	adds	r2, r7, #4
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fc0a 	bl	8008e64 <xTaskCheckForTimeOut>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d124      	bne.n	80076a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007658:	f000 fe54 	bl	8008304 <prvIsQueueFull>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d018      	beq.n	8007694 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	3310      	adds	r3, #16
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f001 fb28 	bl	8008cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007672:	f000 fddf 	bl	8008234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007676:	f001 f945 	bl	8008904 <xTaskResumeAll>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f af7c 	bne.w	800757a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <xQueueGenericSend+0x210>)
 8007684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	e772      	b.n	800757a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007696:	f000 fdcd 	bl	8008234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769a:	f001 f933 	bl	8008904 <xTaskResumeAll>
 800769e:	e76c      	b.n	800757a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076a2:	f000 fdc7 	bl	8008234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076a6:	f001 f92d 	bl	8008904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3738      	adds	r7, #56	@ 0x38
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08e      	sub	sp, #56	@ 0x38
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <xQueueGenericSendFromISR+0x42>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <xQueueGenericSendFromISR+0x46>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <xQueueGenericSendFromISR+0x48>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10d      	bne.n	8007720 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	b672      	cpsid	i
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	b662      	cpsie	i
 8007718:	623b      	str	r3, [r7, #32]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d103      	bne.n	800772e <xQueueGenericSendFromISR+0x76>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <xQueueGenericSendFromISR+0x7a>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueGenericSendFromISR+0x7c>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10d      	bne.n	8007754 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	b672      	cpsid	i
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	b662      	cpsie	i
 800774c:	61fb      	str	r3, [r7, #28]
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	e7fd      	b.n	8007750 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007754:	f002 fc2a 	bl	8009fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007758:	f3ef 8211 	mrs	r2, BASEPRI
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	b672      	cpsid	i
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	b662      	cpsie	i
 8007770:	61ba      	str	r2, [r7, #24]
 8007772:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007774:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007776:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <xQueueGenericSendFromISR+0xd2>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d12c      	bne.n	80077e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800779a:	f000 fcbb 	bl	8008114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800779e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d112      	bne.n	80077ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	3324      	adds	r3, #36	@ 0x24
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fad9 	bl	8008d6c <xTaskRemoveFromEventList>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00e      	beq.n	80077de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e007      	b.n	80077de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	b25a      	sxtb	r2, r3
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077de:	2301      	movs	r3, #1
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80077e2:	e001      	b.n	80077e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3738      	adds	r7, #56	@ 0x38
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b08e      	sub	sp, #56	@ 0x38
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <xQueueGiveFromISR+0x30>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	623b      	str	r3, [r7, #32]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00d      	beq.n	8007852 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	b672      	cpsid	i
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	b662      	cpsie	i
 800784a:	61fb      	str	r3, [r7, #28]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d103      	bne.n	8007862 <xQueueGiveFromISR+0x64>
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <xQueueGiveFromISR+0x68>
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <xQueueGiveFromISR+0x6a>
 8007866:	2300      	movs	r3, #0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	61bb      	str	r3, [r7, #24]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007888:	f002 fb90 	bl	8009fac <vPortValidateInterruptPriority>
	__asm volatile
 800788c:	f3ef 8211 	mrs	r2, BASEPRI
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	b672      	cpsid	i
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	b662      	cpsie	i
 80078a4:	617a      	str	r2, [r7, #20]
 80078a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80078a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d22b      	bcs.n	8007914 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d112      	bne.n	80078fe <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d016      	beq.n	800790e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	3324      	adds	r3, #36	@ 0x24
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 fa41 	bl	8008d6c <xTaskRemoveFromEventList>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00e      	beq.n	800790e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e007      	b.n	800790e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007902:	3301      	adds	r3, #1
 8007904:	b2db      	uxtb	r3, r3
 8007906:	b25a      	sxtb	r2, r3
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800790e:	2301      	movs	r3, #1
 8007910:	637b      	str	r3, [r7, #52]	@ 0x34
 8007912:	e001      	b.n	8007918 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007914:	2300      	movs	r3, #0
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f383 8811 	msr	BASEPRI, r3
}
 8007922:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007926:	4618      	mov	r0, r3
 8007928:	3738      	adds	r7, #56	@ 0x38
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	@ 0x30
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10d      	bne.n	8007966 <xQueueReceive+0x36>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	623b      	str	r3, [r7, #32]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <xQueueReceive+0x44>
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <xQueueReceive+0x48>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <xQueueReceive+0x4a>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <xQueueReceive+0x6a>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	b672      	cpsid	i
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	b662      	cpsie	i
 8007992:	61fb      	str	r3, [r7, #28]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800799a:	f001 fbbf 	bl	800911c <xTaskGetSchedulerState>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <xQueueReceive+0x7a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <xQueueReceive+0x7e>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueReceive+0x80>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10d      	bne.n	80079d0 <xQueueReceive+0xa0>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	b672      	cpsid	i
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	b662      	cpsie	i
 80079c8:	61bb      	str	r3, [r7, #24]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079d0:	f002 fa04 	bl	8009ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01f      	beq.n	8007a20 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079e4:	f000 fc00 	bl	80081e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	1e5a      	subs	r2, r3, #1
 80079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00f      	beq.n	8007a18 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	3310      	adds	r3, #16
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 f9b5 	bl	8008d6c <xTaskRemoveFromEventList>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a08:	4b3c      	ldr	r3, [pc, #240]	@ (8007afc <xQueueReceive+0x1cc>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a18:	f002 fa16 	bl	8009e48 <vPortExitCritical>
				return pdPASS;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e069      	b.n	8007af4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a26:	f002 fa0f 	bl	8009e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e062      	b.n	8007af4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a34:	f107 0310 	add.w	r3, r7, #16
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 f9fd 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a42:	f002 fa01 	bl	8009e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a46:	f000 ff4f 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a4a:	f002 f9c7 	bl	8009ddc <vPortEnterCritical>
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d103      	bne.n	8007a64 <xQueueReceive+0x134>
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d103      	bne.n	8007a7a <xQueueReceive+0x14a>
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a7a:	f002 f9e5 	bl	8009e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a7e:	1d3a      	adds	r2, r7, #4
 8007a80:	f107 0310 	add.w	r3, r7, #16
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f9ec 	bl	8008e64 <xTaskCheckForTimeOut>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d123      	bne.n	8007ada <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a94:	f000 fc20 	bl	80082d8 <prvIsQueueEmpty>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d017      	beq.n	8007ace <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	3324      	adds	r3, #36	@ 0x24
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 f90a 	bl	8008cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aae:	f000 fbc1 	bl	8008234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ab2:	f000 ff27 	bl	8008904 <xTaskResumeAll>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d189      	bne.n	80079d0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007abc:	4b0f      	ldr	r3, [pc, #60]	@ (8007afc <xQueueReceive+0x1cc>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	e780      	b.n	80079d0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad0:	f000 fbb0 	bl	8008234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ad4:	f000 ff16 	bl	8008904 <xTaskResumeAll>
 8007ad8:	e77a      	b.n	80079d0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007adc:	f000 fbaa 	bl	8008234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ae0:	f000 ff10 	bl	8008904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae6:	f000 fbf7 	bl	80082d8 <prvIsQueueEmpty>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f43f af6f 	beq.w	80079d0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007af2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3730      	adds	r7, #48	@ 0x30
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	@ 0x38
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b20:	b672      	cpsid	i
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	b662      	cpsie	i
 8007b30:	623b      	str	r3, [r7, #32]
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	b672      	cpsid	i
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	b662      	cpsie	i
 8007b54:	61fb      	str	r3, [r7, #28]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b5c:	f001 fade 	bl	800911c <xTaskGetSchedulerState>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <xQueueSemaphoreTake+0x6c>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xQueueSemaphoreTake+0x70>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xQueueSemaphoreTake+0x72>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10d      	bne.n	8007b92 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	b672      	cpsid	i
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	b662      	cpsie	i
 8007b8a:	61bb      	str	r3, [r7, #24]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f002 f923 	bl	8009ddc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d024      	beq.n	8007bec <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	1e5a      	subs	r2, r3, #1
 8007ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bb2:	f001 fc35 	bl	8009420 <pvTaskIncrementMutexHeldCount>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00f      	beq.n	8007be4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc6:	3310      	adds	r3, #16
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f8cf 	bl	8008d6c <xTaskRemoveFromEventList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b55      	ldr	r3, [pc, #340]	@ (8007d2c <xQueueSemaphoreTake+0x22c>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007be4:	f002 f930 	bl	8009e48 <vPortExitCritical>
				return pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e09a      	b.n	8007d22 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d114      	bne.n	8007c1c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	b672      	cpsid	i
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	b662      	cpsie	i
 8007c0c:	617b      	str	r3, [r7, #20]
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c14:	f002 f918 	bl	8009e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e082      	b.n	8007d22 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 f906 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c30:	f002 f90a 	bl	8009e48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c34:	f000 fe58 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c38:	f002 f8d0 	bl	8009ddc <vPortEnterCritical>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d103      	bne.n	8007c52 <xQueueSemaphoreTake+0x152>
 8007c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d103      	bne.n	8007c68 <xQueueSemaphoreTake+0x168>
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c68:	f002 f8ee 	bl	8009e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	f107 030c 	add.w	r3, r7, #12
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 f8f5 	bl	8008e64 <xTaskCheckForTimeOut>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d132      	bne.n	8007ce6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c82:	f000 fb29 	bl	80082d8 <prvIsQueueEmpty>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d026      	beq.n	8007cda <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007c94:	f002 f8a2 	bl	8009ddc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fa5b 	bl	8009158 <xTaskPriorityInherit>
 8007ca2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007ca4:	f002 f8d0 	bl	8009e48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	3324      	adds	r3, #36	@ 0x24
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f805 	bl	8008cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cb8:	f000 fabc 	bl	8008234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cbc:	f000 fe22 	bl	8008904 <xTaskResumeAll>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f47f af65 	bne.w	8007b92 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007cc8:	4b18      	ldr	r3, [pc, #96]	@ (8007d2c <xQueueSemaphoreTake+0x22c>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	e75b      	b.n	8007b92 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cdc:	f000 faaa 	bl	8008234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ce0:	f000 fe10 	bl	8008904 <xTaskResumeAll>
 8007ce4:	e755      	b.n	8007b92 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ce6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ce8:	f000 faa4 	bl	8008234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cec:	f000 fe0a 	bl	8008904 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cf2:	f000 faf1 	bl	80082d8 <prvIsQueueEmpty>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f43f af4a 	beq.w	8007b92 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00d      	beq.n	8007d20 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007d04:	f002 f86a 	bl	8009ddc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d0a:	f000 f9eb 	bl	80080e4 <prvGetDisinheritPriorityAfterTimeout>
 8007d0e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 fafa 	bl	8009310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d1c:	f002 f894 	bl	8009e48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3738      	adds	r7, #56	@ 0x38
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	@ 0x38
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10d      	bne.n	8007d66 <xQueuePeek+0x36>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	b672      	cpsid	i
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	b662      	cpsie	i
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <xQueuePeek+0x44>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <xQueuePeek+0x48>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <xQueuePeek+0x4a>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10d      	bne.n	8007d9a <xQueuePeek+0x6a>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	b672      	cpsid	i
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	b662      	cpsie	i
 8007d92:	623b      	str	r3, [r7, #32]
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d9a:	f001 f9bf 	bl	800911c <xTaskGetSchedulerState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xQueuePeek+0x7a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <xQueuePeek+0x7e>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueuePeek+0x80>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10d      	bne.n	8007dd0 <xQueuePeek+0xa0>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	b672      	cpsid	i
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	b662      	cpsie	i
 8007dc8:	61fb      	str	r3, [r7, #28]
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dd0:	f002 f804 	bl	8009ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d021      	beq.n	8007e24 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dea:	f000 f9fd 	bl	80081e8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007df2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00f      	beq.n	8007e1c <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	3324      	adds	r3, #36	@ 0x24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 ffb3 	bl	8008d6c <xTaskRemoveFromEventList>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f00 <xQueuePeek+0x1d0>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e1c:	f002 f814 	bl	8009e48 <vPortExitCritical>
				return pdPASS;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e069      	b.n	8007ef8 <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e2a:	f002 f80d 	bl	8009e48 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e062      	b.n	8007ef8 <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fffb 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e46:	f001 ffff 	bl	8009e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e4a:	f000 fd4d 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e4e:	f001 ffc5 	bl	8009ddc <vPortEnterCritical>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d103      	bne.n	8007e68 <xQueuePeek+0x138>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e74:	d103      	bne.n	8007e7e <xQueuePeek+0x14e>
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e7e:	f001 ffe3 	bl	8009e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e82:	1d3a      	adds	r2, r7, #4
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 ffea 	bl	8008e64 <xTaskCheckForTimeOut>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d123      	bne.n	8007ede <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e98:	f000 fa1e 	bl	80082d8 <prvIsQueueEmpty>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d017      	beq.n	8007ed2 <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	3324      	adds	r3, #36	@ 0x24
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ff08 	bl	8008cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eb2:	f000 f9bf 	bl	8008234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eb6:	f000 fd25 	bl	8008904 <xTaskResumeAll>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d187      	bne.n	8007dd0 <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <xQueuePeek+0x1d0>)
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	e77e      	b.n	8007dd0 <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8007ed2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ed4:	f000 f9ae 	bl	8008234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed8:	f000 fd14 	bl	8008904 <xTaskResumeAll>
 8007edc:	e778      	b.n	8007dd0 <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8007ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ee0:	f000 f9a8 	bl	8008234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ee4:	f000 fd0e 	bl	8008904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eea:	f000 f9f5 	bl	80082d8 <prvIsQueueEmpty>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f43f af6d 	beq.w	8007dd0 <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ef6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3738      	adds	r7, #56	@ 0x38
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08e      	sub	sp, #56	@ 0x38
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1e:	b672      	cpsid	i
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	b662      	cpsie	i
 8007f2e:	623b      	str	r3, [r7, #32]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <xQueueReceiveFromISR+0x40>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <xQueueReceiveFromISR+0x44>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <xQueueReceiveFromISR+0x46>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10d      	bne.n	8007f6a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	61fb      	str	r3, [r7, #28]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f6a:	f002 f81f 	bl	8009fac <vPortValidateInterruptPriority>
	__asm volatile
 8007f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	61ba      	str	r2, [r7, #24]
 8007f88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d02f      	beq.n	8007ffa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fa8:	f000 f91e 	bl	80081e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	1e5a      	subs	r2, r3, #1
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d112      	bne.n	8007fe4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	3310      	adds	r3, #16
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fece 	bl	8008d6c <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e007      	b.n	8007ff4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	b25a      	sxtb	r2, r3
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff8:	e001      	b.n	8007ffe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008000:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f383 8811 	msr	BASEPRI, r3
}
 8008008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800800c:	4618      	mov	r0, r3
 800800e:	3738      	adds	r7, #56	@ 0x38
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800803e:	f001 fecd 	bl	8009ddc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008048:	f001 fefe 	bl	8009e48 <vPortExitCritical>

	return uxReturn;
 800804c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008056:	b480      	push	{r7}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	60fb      	str	r3, [r7, #12]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800808a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800808c:	4618      	mov	r0, r3
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10d      	bne.n	80080c6 <vQueueDelete+0x2e>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	b672      	cpsid	i
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	b662      	cpsie	i
 80080be:	60bb      	str	r3, [r7, #8]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f95e 	bl	8008388 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f002 f87c 	bl	800a1d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d006      	beq.n	8008102 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e001      	b.n	8008106 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008106:	68fb      	ldr	r3, [r7, #12]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d14d      	bne.n	80081d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f001 f872 	bl	8009228 <xTaskPriorityDisinherit>
 8008144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	e043      	b.n	80081d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d119      	bne.n	8008188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6858      	ldr	r0, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815c:	461a      	mov	r2, r3
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	f010 fb3f 	bl	80187e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d32b      	bcc.n	80081d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	e026      	b.n	80081d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68d8      	ldr	r0, [r3, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008190:	461a      	mov	r2, r3
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	f010 fb25 	bl	80187e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a0:	425b      	negs	r3, r3
 80081a2:	441a      	add	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d207      	bcs.n	80081c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081bc:	425b      	negs	r3, r3
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d105      	bne.n	80081d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80081de:	697b      	ldr	r3, [r7, #20]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	429a      	cmp	r2, r3
 8008212:	d303      	bcc.n	800821c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68d9      	ldr	r1, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	461a      	mov	r2, r3
 8008226:	6838      	ldr	r0, [r7, #0]
 8008228:	f010 fadb 	bl	80187e2 <memcpy>
	}
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800823c:	f001 fdce 	bl	8009ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008248:	e011      	b.n	800826e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d012      	beq.n	8008278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3324      	adds	r3, #36	@ 0x24
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fd88 	bl	8008d6c <xTaskRemoveFromEventList>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008262:	f000 fe67 	bl	8008f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	3b01      	subs	r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800826e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	dce9      	bgt.n	800824a <prvUnlockQueue+0x16>
 8008276:	e000      	b.n	800827a <prvUnlockQueue+0x46>
					break;
 8008278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	22ff      	movs	r2, #255	@ 0xff
 800827e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008282:	f001 fde1 	bl	8009e48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008286:	f001 fda9 	bl	8009ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008292:	e011      	b.n	80082b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d012      	beq.n	80082c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3310      	adds	r3, #16
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd63 	bl	8008d6c <xTaskRemoveFromEventList>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082ac:	f000 fe42 	bl	8008f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dce9      	bgt.n	8008294 <prvUnlockQueue+0x60>
 80082c0:	e000      	b.n	80082c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	22ff      	movs	r2, #255	@ 0xff
 80082c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082cc:	f001 fdbc 	bl	8009e48 <vPortExitCritical>
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082e0:	f001 fd7c 	bl	8009ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e001      	b.n	80082f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082f6:	f001 fda7 	bl	8009e48 <vPortExitCritical>

	return xReturn;
 80082fa:	68fb      	ldr	r3, [r7, #12]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800830c:	f001 fd66 	bl	8009ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	429a      	cmp	r2, r3
 800831a:	d102      	bne.n	8008322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e001      	b.n	8008326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008326:	f001 fd8f 	bl	8009e48 <vPortExitCritical>

	return xReturn;
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e014      	b.n	800836e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008344:	4a0f      	ldr	r2, [pc, #60]	@ (8008384 <vQueueAddToRegistry+0x50>)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008350:	490c      	ldr	r1, [pc, #48]	@ (8008384 <vQueueAddToRegistry+0x50>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800835a:	4a0a      	ldr	r2, [pc, #40]	@ (8008384 <vQueueAddToRegistry+0x50>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008366:	e006      	b.n	8008376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b07      	cmp	r3, #7
 8008372:	d9e7      	bls.n	8008344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20004514 	.word	0x20004514

08008388 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e016      	b.n	80083c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008396:	4a10      	ldr	r2, [pc, #64]	@ (80083d8 <vQueueUnregisterQueue+0x50>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d10b      	bne.n	80083be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083a6:	4a0c      	ldr	r2, [pc, #48]	@ (80083d8 <vQueueUnregisterQueue+0x50>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2100      	movs	r1, #0
 80083ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083b0:	4a09      	ldr	r2, [pc, #36]	@ (80083d8 <vQueueUnregisterQueue+0x50>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	4413      	add	r3, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]
				break;
 80083bc:	e006      	b.n	80083cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b07      	cmp	r3, #7
 80083c8:	d9e5      	bls.n	8008396 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	20004514 	.word	0x20004514

080083dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083ec:	f001 fcf6 	bl	8009ddc <vPortEnterCritical>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <vQueueWaitForMessageRestricted+0x2a>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800840c:	b25b      	sxtb	r3, r3
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008412:	d103      	bne.n	800841c <vQueueWaitForMessageRestricted+0x40>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800841c:	f001 fd14 	bl	8009e48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3324      	adds	r3, #36	@ 0x24
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fc6d 	bl	8008d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff fefc 	bl	8008234 <prvUnlockQueue>
	}
 800843c:	bf00      	nop
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	@ 0x38
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <xTaskCreateStatic+0x30>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <xTaskCreateStatic+0x52>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	b672      	cpsid	i
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	b662      	cpsie	i
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008496:	235c      	movs	r3, #92	@ 0x5c
 8008498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b5c      	cmp	r3, #92	@ 0x5c
 800849e:	d00d      	beq.n	80084bc <xTaskCreateStatic+0x78>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	b672      	cpsid	i
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	b662      	cpsie	i
 80084b4:	61bb      	str	r3, [r7, #24]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01e      	beq.n	8008502 <xTaskCreateStatic+0xbe>
 80084c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01b      	beq.n	8008502 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084dc:	2300      	movs	r3, #0
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f850 	bl	800859a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084fc:	f000 f8e0 	bl	80086c0 <prvAddNewTaskToReadyList>
 8008500:	e001      	b.n	8008506 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008506:	697b      	ldr	r3, [r7, #20]
	}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	@ 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	@ 0x30
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fd87 	bl	800a038 <pvPortMalloc>
 800852a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008532:	205c      	movs	r0, #92	@ 0x5c
 8008534:	f001 fd80 	bl	800a038 <pvPortMalloc>
 8008538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30
 8008546:	e005      	b.n	8008554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008548:	6978      	ldr	r0, [r7, #20]
 800854a:	f001 fe43 	bl	800a1d4 <vPortFree>
 800854e:	e001      	b.n	8008554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	2300      	movs	r3, #0
 8008566:	9303      	str	r3, [sp, #12]
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f80e 	bl	800859a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800857e:	69f8      	ldr	r0, [r7, #28]
 8008580:	f000 f89e 	bl	80086c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008584:	2301      	movs	r3, #1
 8008586:	61bb      	str	r3, [r7, #24]
 8008588:	e002      	b.n	8008590 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295
 800858e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008590:	69bb      	ldr	r3, [r7, #24]
	}
 8008592:	4618      	mov	r0, r3
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b088      	sub	sp, #32
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	461a      	mov	r2, r3
 80085b2:	21a5      	movs	r1, #165	@ 0xa5
 80085b4:	f010 f85c 	bl	8018670 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80085c2:	440b      	add	r3, r1
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00d      	beq.n	80085f8 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e0:	b672      	cpsid	i
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	b662      	cpsie	i
 80085f0:	617b      	str	r3, [r7, #20]
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	e7fd      	b.n	80085f4 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085fe:	2300      	movs	r3, #0
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	e012      	b.n	800862a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	4413      	add	r3, r2
 800860a:	7819      	ldrb	r1, [r3, #0]
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4413      	add	r3, r2
 8008612:	3334      	adds	r3, #52	@ 0x34
 8008614:	460a      	mov	r2, r1
 8008616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	3301      	adds	r3, #1
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b0f      	cmp	r3, #15
 800862e:	d9e9      	bls.n	8008604 <prvInitialiseNewTask+0x6a>
 8008630:	e000      	b.n	8008634 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800863c:	e003      	b.n	8008646 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	2b37      	cmp	r3, #55	@ 0x37
 800864a:	d901      	bls.n	8008650 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800864c:	2337      	movs	r3, #55	@ 0x37
 800864e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008654:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fbfc 	bl	8006e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	3318      	adds	r3, #24
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fbf7 	bl	8006e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	2200      	movs	r2, #0
 8008690:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	68f9      	ldr	r1, [r7, #12]
 800869e:	69b8      	ldr	r0, [r7, #24]
 80086a0:	f001 fa8e 	bl	8009bc0 <pxPortInitialiseStack>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b6:	bf00      	nop
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086c8:	f001 fb88 	bl	8009ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008784 <prvAddNewTaskToReadyList+0xc4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008784 <prvAddNewTaskToReadyList+0xc4>)
 80086d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086d6:	4b2c      	ldr	r3, [pc, #176]	@ (8008788 <prvAddNewTaskToReadyList+0xc8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086de:	4a2a      	ldr	r2, [pc, #168]	@ (8008788 <prvAddNewTaskToReadyList+0xc8>)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086e4:	4b27      	ldr	r3, [pc, #156]	@ (8008784 <prvAddNewTaskToReadyList+0xc4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d110      	bne.n	800870e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086ec:	f000 fc46 	bl	8008f7c <prvInitialiseTaskLists>
 80086f0:	e00d      	b.n	800870e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086f2:	4b26      	ldr	r3, [pc, #152]	@ (800878c <prvAddNewTaskToReadyList+0xcc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086fa:	4b23      	ldr	r3, [pc, #140]	@ (8008788 <prvAddNewTaskToReadyList+0xc8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d802      	bhi.n	800870e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008708:	4a1f      	ldr	r2, [pc, #124]	@ (8008788 <prvAddNewTaskToReadyList+0xc8>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800870e:	4b20      	ldr	r3, [pc, #128]	@ (8008790 <prvAddNewTaskToReadyList+0xd0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a1e      	ldr	r2, [pc, #120]	@ (8008790 <prvAddNewTaskToReadyList+0xd0>)
 8008716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008718:	4b1d      	ldr	r3, [pc, #116]	@ (8008790 <prvAddNewTaskToReadyList+0xd0>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008724:	4b1b      	ldr	r3, [pc, #108]	@ (8008794 <prvAddNewTaskToReadyList+0xd4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d903      	bls.n	8008734 <prvAddNewTaskToReadyList+0x74>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	4a18      	ldr	r2, [pc, #96]	@ (8008794 <prvAddNewTaskToReadyList+0xd4>)
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <prvAddNewTaskToReadyList+0xd8>)
 8008742:	441a      	add	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f7fe fb97 	bl	8006e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008750:	f001 fb7a 	bl	8009e48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008754:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <prvAddNewTaskToReadyList+0xcc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800875c:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <prvAddNewTaskToReadyList+0xc8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	429a      	cmp	r2, r3
 8008768:	d207      	bcs.n	800877a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800876a:	4b0c      	ldr	r3, [pc, #48]	@ (800879c <prvAddNewTaskToReadyList+0xdc>)
 800876c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20004a28 	.word	0x20004a28
 8008788:	20004554 	.word	0x20004554
 800878c:	20004a34 	.word	0x20004a34
 8008790:	20004a44 	.word	0x20004a44
 8008794:	20004a30 	.word	0x20004a30
 8008798:	20004558 	.word	0x20004558
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01a      	beq.n	80087e8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087b2:	4b15      	ldr	r3, [pc, #84]	@ (8008808 <vTaskDelay+0x68>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <vTaskDelay+0x36>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	b672      	cpsid	i
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	b662      	cpsie	i
 80087ce:	60bb      	str	r3, [r7, #8]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80087d6:	f000 f887 	bl	80088e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fe33 	bl	8009448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087e2:	f000 f88f 	bl	8008904 <xTaskResumeAll>
 80087e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <vTaskDelay+0x6c>)
 80087f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20004a50 	.word	0x20004a50
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	@ 0x28
 8008814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800881e:	463a      	mov	r2, r7
 8008820:	1d39      	adds	r1, r7, #4
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fac8 	bl	8006dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	9202      	str	r2, [sp, #8]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	2300      	movs	r3, #0
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	460a      	mov	r2, r1
 800883e:	4924      	ldr	r1, [pc, #144]	@ (80088d0 <vTaskStartScheduler+0xc0>)
 8008840:	4824      	ldr	r0, [pc, #144]	@ (80088d4 <vTaskStartScheduler+0xc4>)
 8008842:	f7ff fdff 	bl	8008444 <xTaskCreateStatic>
 8008846:	4603      	mov	r3, r0
 8008848:	4a23      	ldr	r2, [pc, #140]	@ (80088d8 <vTaskStartScheduler+0xc8>)
 800884a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800884c:	4b22      	ldr	r3, [pc, #136]	@ (80088d8 <vTaskStartScheduler+0xc8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e001      	b.n	800885e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d102      	bne.n	800886a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008864:	f000 fe44 	bl	80094f0 <xTimerCreateTimerTask>
 8008868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d118      	bne.n	80088a2 <vTaskStartScheduler+0x92>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	613b      	str	r3, [r7, #16]
}
 8008886:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008888:	4b14      	ldr	r3, [pc, #80]	@ (80088dc <vTaskStartScheduler+0xcc>)
 800888a:	f04f 32ff 	mov.w	r2, #4294967295
 800888e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008890:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <vTaskStartScheduler+0xd0>)
 8008892:	2201      	movs	r2, #1
 8008894:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008896:	4b13      	ldr	r3, [pc, #76]	@ (80088e4 <vTaskStartScheduler+0xd4>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800889c:	f001 fa20 	bl	8009ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a0:	e011      	b.n	80088c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d10d      	bne.n	80088c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ae:	b672      	cpsid	i
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	b662      	cpsie	i
 80088be:	60fb      	str	r3, [r7, #12]
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	e7fd      	b.n	80088c2 <vTaskStartScheduler+0xb2>
}
 80088c6:	bf00      	nop
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	0801a8d8 	.word	0x0801a8d8
 80088d4:	08008f4d 	.word	0x08008f4d
 80088d8:	20004a4c 	.word	0x20004a4c
 80088dc:	20004a48 	.word	0x20004a48
 80088e0:	20004a34 	.word	0x20004a34
 80088e4:	20004a2c 	.word	0x20004a2c

080088e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088ec:	4b04      	ldr	r3, [pc, #16]	@ (8008900 <vTaskSuspendAll+0x18>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	4a03      	ldr	r2, [pc, #12]	@ (8008900 <vTaskSuspendAll+0x18>)
 80088f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	20004a50 	.word	0x20004a50

08008904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008912:	4b43      	ldr	r3, [pc, #268]	@ (8008a20 <xTaskResumeAll+0x11c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10d      	bne.n	8008936 <xTaskResumeAll+0x32>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	b672      	cpsid	i
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	b662      	cpsie	i
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008936:	f001 fa51 	bl	8009ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800893a:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <xTaskResumeAll+0x11c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	4a37      	ldr	r2, [pc, #220]	@ (8008a20 <xTaskResumeAll+0x11c>)
 8008942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008944:	4b36      	ldr	r3, [pc, #216]	@ (8008a20 <xTaskResumeAll+0x11c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d162      	bne.n	8008a12 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800894c:	4b35      	ldr	r3, [pc, #212]	@ (8008a24 <xTaskResumeAll+0x120>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d05e      	beq.n	8008a12 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008954:	e02f      	b.n	80089b6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b34      	ldr	r3, [pc, #208]	@ (8008a28 <xTaskResumeAll+0x124>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3318      	adds	r3, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fae8 	bl	8006f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3304      	adds	r3, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fae3 	bl	8006f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008976:	4b2d      	ldr	r3, [pc, #180]	@ (8008a2c <xTaskResumeAll+0x128>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d903      	bls.n	8008986 <xTaskResumeAll+0x82>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008982:	4a2a      	ldr	r2, [pc, #168]	@ (8008a2c <xTaskResumeAll+0x128>)
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a27      	ldr	r2, [pc, #156]	@ (8008a30 <xTaskResumeAll+0x12c>)
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe fa6e 	bl	8006e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a6:	4b23      	ldr	r3, [pc, #140]	@ (8008a34 <xTaskResumeAll+0x130>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d302      	bcc.n	80089b6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80089b0:	4b21      	ldr	r3, [pc, #132]	@ (8008a38 <xTaskResumeAll+0x134>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a28 <xTaskResumeAll+0x124>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1cb      	bne.n	8008956 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089c4:	f000 fb7a 	bl	80090bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089c8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <xTaskResumeAll+0x138>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d010      	beq.n	80089f6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089d4:	f000 f858 	bl	8008a88 <xTaskIncrementTick>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80089de:	4b16      	ldr	r3, [pc, #88]	@ (8008a38 <xTaskResumeAll+0x134>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f1      	bne.n	80089d4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80089f0:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <xTaskResumeAll+0x138>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089f6:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <xTaskResumeAll+0x134>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089fe:	2301      	movs	r3, #1
 8008a00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a02:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <xTaskResumeAll+0x13c>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a12:	f001 fa19 	bl	8009e48 <vPortExitCritical>

	return xAlreadyYielded;
 8008a16:	68bb      	ldr	r3, [r7, #8]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20004a50 	.word	0x20004a50
 8008a24:	20004a28 	.word	0x20004a28
 8008a28:	200049e8 	.word	0x200049e8
 8008a2c:	20004a30 	.word	0x20004a30
 8008a30:	20004558 	.word	0x20004558
 8008a34:	20004554 	.word	0x20004554
 8008a38:	20004a3c 	.word	0x20004a3c
 8008a3c:	20004a38 	.word	0x20004a38
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a4a:	4b05      	ldr	r3, [pc, #20]	@ (8008a60 <xTaskGetTickCount+0x1c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a50:	687b      	ldr	r3, [r7, #4]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20004a2c 	.word	0x20004a2c

08008a64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a6a:	f001 fa9f 	bl	8009fac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008a72:	4b04      	ldr	r3, [pc, #16]	@ (8008a84 <xTaskGetTickCountFromISR+0x20>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a78:	683b      	ldr	r3, [r7, #0]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20004a2c 	.word	0x20004a2c

08008a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a92:	4b50      	ldr	r3, [pc, #320]	@ (8008bd4 <xTaskIncrementTick+0x14c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f040 808c 	bne.w	8008bb4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008bd8 <xTaskIncrementTick+0x150>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8008bd8 <xTaskIncrementTick+0x150>)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d123      	bne.n	8008af8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00d      	beq.n	8008ad6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	b672      	cpsid	i
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	b662      	cpsie	i
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <xTaskIncrementTick+0x4a>
 8008ad6:	4b41      	ldr	r3, [pc, #260]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	4b40      	ldr	r3, [pc, #256]	@ (8008be0 <xTaskIncrementTick+0x158>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8008be0 <xTaskIncrementTick+0x158>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b3e      	ldr	r3, [pc, #248]	@ (8008be4 <xTaskIncrementTick+0x15c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3301      	adds	r3, #1
 8008af0:	4a3c      	ldr	r2, [pc, #240]	@ (8008be4 <xTaskIncrementTick+0x15c>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	f000 fae2 	bl	80090bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af8:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d349      	bcc.n	8008b96 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b02:	4b36      	ldr	r3, [pc, #216]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0c:	4b36      	ldr	r3, [pc, #216]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b12:	601a      	str	r2, [r3, #0]
					break;
 8008b14:	e03f      	b.n	8008b96 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b16:	4b31      	ldr	r3, [pc, #196]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d203      	bcs.n	8008b36 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b34:	e02f      	b.n	8008b96 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe f9fc 	bl	8006f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3318      	adds	r3, #24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe f9f3 	bl	8006f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b56:	4b25      	ldr	r3, [pc, #148]	@ (8008bec <xTaskIncrementTick+0x164>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d903      	bls.n	8008b66 <xTaskIncrementTick+0xde>
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b62:	4a22      	ldr	r2, [pc, #136]	@ (8008bec <xTaskIncrementTick+0x164>)
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf0 <xTaskIncrementTick+0x168>)
 8008b74:	441a      	add	r2, r3
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7fe f97e 	bl	8006e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b86:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf4 <xTaskIncrementTick+0x16c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3b8      	bcc.n	8008b02 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b94:	e7b5      	b.n	8008b02 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b96:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <xTaskIncrementTick+0x16c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9c:	4914      	ldr	r1, [pc, #80]	@ (8008bf0 <xTaskIncrementTick+0x168>)
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d907      	bls.n	8008bbe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e004      	b.n	8008bbe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bb4:	4b10      	ldr	r3, [pc, #64]	@ (8008bf8 <xTaskIncrementTick+0x170>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf8 <xTaskIncrementTick+0x170>)
 8008bbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <xTaskIncrementTick+0x174>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bca:	697b      	ldr	r3, [r7, #20]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20004a50 	.word	0x20004a50
 8008bd8:	20004a2c 	.word	0x20004a2c
 8008bdc:	200049e0 	.word	0x200049e0
 8008be0:	200049e4 	.word	0x200049e4
 8008be4:	20004a40 	.word	0x20004a40
 8008be8:	20004a48 	.word	0x20004a48
 8008bec:	20004a30 	.word	0x20004a30
 8008bf0:	20004558 	.word	0x20004558
 8008bf4:	20004554 	.word	0x20004554
 8008bf8:	20004a38 	.word	0x20004a38
 8008bfc:	20004a3c 	.word	0x20004a3c

08008c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c06:	4b29      	ldr	r3, [pc, #164]	@ (8008cac <vTaskSwitchContext+0xac>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c0e:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <vTaskSwitchContext+0xb0>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c14:	e044      	b.n	8008ca0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008c16:	4b26      	ldr	r3, [pc, #152]	@ (8008cb0 <vTaskSwitchContext+0xb0>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1c:	4b25      	ldr	r3, [pc, #148]	@ (8008cb4 <vTaskSwitchContext+0xb4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e013      	b.n	8008c4c <vTaskSwitchContext+0x4c>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10d      	bne.n	8008c46 <vTaskSwitchContext+0x46>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2e:	b672      	cpsid	i
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	b662      	cpsie	i
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <vTaskSwitchContext+0x42>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	491a      	ldr	r1, [pc, #104]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0e1      	beq.n	8008c24 <vTaskSwitchContext+0x24>
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4a13      	ldr	r2, [pc, #76]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c6c:	4413      	add	r3, r2
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3308      	adds	r3, #8
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d104      	bne.n	8008c90 <vTaskSwitchContext+0x90>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	605a      	str	r2, [r3, #4]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4a09      	ldr	r2, [pc, #36]	@ (8008cbc <vTaskSwitchContext+0xbc>)
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	4a06      	ldr	r2, [pc, #24]	@ (8008cb4 <vTaskSwitchContext+0xb4>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6013      	str	r3, [r2, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20004a50 	.word	0x20004a50
 8008cb0:	20004a3c 	.word	0x20004a3c
 8008cb4:	20004a30 	.word	0x20004a30
 8008cb8:	20004558 	.word	0x20004558
 8008cbc:	20004554 	.word	0x20004554

08008cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10d      	bne.n	8008cec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	b672      	cpsid	i
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	b662      	cpsie	i
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cec:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <vTaskPlaceOnEventList+0x4c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe f8e6 	bl	8006ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	6838      	ldr	r0, [r7, #0]
 8008cfe:	f000 fba3 	bl	8009448 <prvAddCurrentTaskToDelayedList>
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20004554 	.word	0x20004554

08008d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10d      	bne.n	8008d3e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	b672      	cpsid	i
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	b662      	cpsie	i
 8008d36:	617b      	str	r3, [r7, #20]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <vTaskPlaceOnEventListRestricted+0x58>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3318      	adds	r3, #24
 8008d44:	4619      	mov	r1, r3
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7fe f899 	bl	8006e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	68b8      	ldr	r0, [r7, #8]
 8008d5c:	f000 fb74 	bl	8009448 <prvAddCurrentTaskToDelayedList>
	}
 8008d60:	bf00      	nop
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20004554 	.word	0x20004554

08008d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10d      	bne.n	8008d9e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	b672      	cpsid	i
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	b662      	cpsie	i
 8008d96:	60fb      	str	r3, [r7, #12]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3318      	adds	r3, #24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe f8c8 	bl	8006f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e20 <xTaskRemoveFromEventList+0xb4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11d      	bne.n	8008dec <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe f8bf 	bl	8006f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dbe:	4b19      	ldr	r3, [pc, #100]	@ (8008e24 <xTaskRemoveFromEventList+0xb8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d903      	bls.n	8008dce <xTaskRemoveFromEventList+0x62>
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	4a16      	ldr	r2, [pc, #88]	@ (8008e24 <xTaskRemoveFromEventList+0xb8>)
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4a13      	ldr	r2, [pc, #76]	@ (8008e28 <xTaskRemoveFromEventList+0xbc>)
 8008ddc:	441a      	add	r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7fe f84a 	bl	8006e7e <vListInsertEnd>
 8008dea:	e005      	b.n	8008df8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4619      	mov	r1, r3
 8008df2:	480e      	ldr	r0, [pc, #56]	@ (8008e2c <xTaskRemoveFromEventList+0xc0>)
 8008df4:	f7fe f843 	bl	8006e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e30 <xTaskRemoveFromEventList+0xc4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d905      	bls.n	8008e12 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <xTaskRemoveFromEventList+0xc8>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e001      	b.n	8008e16 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e16:	697b      	ldr	r3, [r7, #20]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20004a50 	.word	0x20004a50
 8008e24:	20004a30 	.word	0x20004a30
 8008e28:	20004558 	.word	0x20004558
 8008e2c:	200049e8 	.word	0x200049e8
 8008e30:	20004554 	.word	0x20004554
 8008e34:	20004a3c 	.word	0x20004a3c

08008e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e40:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <vTaskInternalSetTimeOutState+0x24>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <vTaskInternalSetTimeOutState+0x28>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20004a40 	.word	0x20004a40
 8008e60:	20004a2c 	.word	0x20004a2c

08008e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	b672      	cpsid	i
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	b662      	cpsie	i
 8008e88:	613b      	str	r3, [r7, #16]
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10d      	bne.n	8008eb2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	b672      	cpsid	i
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	b662      	cpsie	i
 8008eaa:	60fb      	str	r3, [r7, #12]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008eb2:	f000 ff93 	bl	8009ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f2c <xTaskCheckForTimeOut+0xc8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	d102      	bne.n	8008ed6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
 8008ed4:	e023      	b.n	8008f1e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b15      	ldr	r3, [pc, #84]	@ (8008f30 <xTaskCheckForTimeOut+0xcc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d007      	beq.n	8008ef2 <xTaskCheckForTimeOut+0x8e>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e015      	b.n	8008f1e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d20b      	bcs.n	8008f14 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ff95 	bl	8008e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	e004      	b.n	8008f1e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f1e:	f000 ff93 	bl	8009e48 <vPortExitCritical>

	return xReturn;
 8008f22:	69fb      	ldr	r3, [r7, #28]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20004a2c 	.word	0x20004a2c
 8008f30:	20004a40 	.word	0x20004a40

08008f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f38:	4b03      	ldr	r3, [pc, #12]	@ (8008f48 <vTaskMissedYield+0x14>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20004a3c 	.word	0x20004a3c

08008f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f54:	f000 f852 	bl	8008ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f58:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <prvIdleTask+0x28>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d9f9      	bls.n	8008f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f60:	4b05      	ldr	r3, [pc, #20]	@ (8008f78 <prvIdleTask+0x2c>)
 8008f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f70:	e7f0      	b.n	8008f54 <prvIdleTask+0x8>
 8008f72:	bf00      	nop
 8008f74:	20004558 	.word	0x20004558
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f82:	2300      	movs	r3, #0
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	e00c      	b.n	8008fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4a12      	ldr	r2, [pc, #72]	@ (8008fdc <prvInitialiseTaskLists+0x60>)
 8008f94:	4413      	add	r3, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd ff44 	bl	8006e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b37      	cmp	r3, #55	@ 0x37
 8008fa6:	d9ef      	bls.n	8008f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fa8:	480d      	ldr	r0, [pc, #52]	@ (8008fe0 <prvInitialiseTaskLists+0x64>)
 8008faa:	f7fd ff3b 	bl	8006e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fae:	480d      	ldr	r0, [pc, #52]	@ (8008fe4 <prvInitialiseTaskLists+0x68>)
 8008fb0:	f7fd ff38 	bl	8006e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fb4:	480c      	ldr	r0, [pc, #48]	@ (8008fe8 <prvInitialiseTaskLists+0x6c>)
 8008fb6:	f7fd ff35 	bl	8006e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fba:	480c      	ldr	r0, [pc, #48]	@ (8008fec <prvInitialiseTaskLists+0x70>)
 8008fbc:	f7fd ff32 	bl	8006e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fc0:	480b      	ldr	r0, [pc, #44]	@ (8008ff0 <prvInitialiseTaskLists+0x74>)
 8008fc2:	f7fd ff2f 	bl	8006e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff4 <prvInitialiseTaskLists+0x78>)
 8008fc8:	4a05      	ldr	r2, [pc, #20]	@ (8008fe0 <prvInitialiseTaskLists+0x64>)
 8008fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff8 <prvInitialiseTaskLists+0x7c>)
 8008fce:	4a05      	ldr	r2, [pc, #20]	@ (8008fe4 <prvInitialiseTaskLists+0x68>)
 8008fd0:	601a      	str	r2, [r3, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20004558 	.word	0x20004558
 8008fe0:	200049b8 	.word	0x200049b8
 8008fe4:	200049cc 	.word	0x200049cc
 8008fe8:	200049e8 	.word	0x200049e8
 8008fec:	200049fc 	.word	0x200049fc
 8008ff0:	20004a14 	.word	0x20004a14
 8008ff4:	200049e0 	.word	0x200049e0
 8008ff8:	200049e4 	.word	0x200049e4

08008ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009002:	e019      	b.n	8009038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009004:	f000 feea 	bl	8009ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009008:	4b10      	ldr	r3, [pc, #64]	@ (800904c <prvCheckTasksWaitingTermination+0x50>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3304      	adds	r3, #4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fd ff8f 	bl	8006f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800901a:	4b0d      	ldr	r3, [pc, #52]	@ (8009050 <prvCheckTasksWaitingTermination+0x54>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3b01      	subs	r3, #1
 8009020:	4a0b      	ldr	r2, [pc, #44]	@ (8009050 <prvCheckTasksWaitingTermination+0x54>)
 8009022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009024:	4b0b      	ldr	r3, [pc, #44]	@ (8009054 <prvCheckTasksWaitingTermination+0x58>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3b01      	subs	r3, #1
 800902a:	4a0a      	ldr	r2, [pc, #40]	@ (8009054 <prvCheckTasksWaitingTermination+0x58>)
 800902c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800902e:	f000 ff0b 	bl	8009e48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f810 	bl	8009058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009038:	4b06      	ldr	r3, [pc, #24]	@ (8009054 <prvCheckTasksWaitingTermination+0x58>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e1      	bne.n	8009004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	200049fc 	.word	0x200049fc
 8009050:	20004a28 	.word	0x20004a28
 8009054:	20004a10 	.word	0x20004a10

08009058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009066:	2b00      	cmp	r3, #0
 8009068:	d108      	bne.n	800907c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906e:	4618      	mov	r0, r3
 8009070:	f001 f8b0 	bl	800a1d4 <vPortFree>
				vPortFree( pxTCB );
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f8ad 	bl	800a1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800907a:	e01b      	b.n	80090b4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009082:	2b01      	cmp	r3, #1
 8009084:	d103      	bne.n	800908e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 f8a4 	bl	800a1d4 <vPortFree>
	}
 800908c:	e012      	b.n	80090b4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009094:	2b02      	cmp	r3, #2
 8009096:	d00d      	beq.n	80090b4 <prvDeleteTCB+0x5c>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	e7fd      	b.n	80090b0 <prvDeleteTCB+0x58>
	}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvResetNextTaskUnblockTime+0x38>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <prvResetNextTaskUnblockTime+0x3c>)
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090d4:	e008      	b.n	80090e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <prvResetNextTaskUnblockTime+0x38>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a04      	ldr	r2, [pc, #16]	@ (80090f8 <prvResetNextTaskUnblockTime+0x3c>)
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	200049e0 	.word	0x200049e0
 80090f8:	20004a48 	.word	0x20004a48

080090fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009102:	4b05      	ldr	r3, [pc, #20]	@ (8009118 <xTaskGetCurrentTaskHandle+0x1c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009108:	687b      	ldr	r3, [r7, #4]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20004554 	.word	0x20004554

0800911c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009122:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <xTaskGetSchedulerState+0x34>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800912a:	2301      	movs	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	e008      	b.n	8009142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009130:	4b08      	ldr	r3, [pc, #32]	@ (8009154 <xTaskGetSchedulerState+0x38>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009138:	2302      	movs	r3, #2
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e001      	b.n	8009142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009142:	687b      	ldr	r3, [r7, #4]
	}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20004a34 	.word	0x20004a34
 8009154:	20004a50 	.word	0x20004a50

08009158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d051      	beq.n	8009212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009172:	4b2a      	ldr	r3, [pc, #168]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d241      	bcs.n	8009200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db06      	blt.n	8009192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009184:	4b25      	ldr	r3, [pc, #148]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6959      	ldr	r1, [r3, #20]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <xTaskPriorityInherit+0xc8>)
 80091a4:	4413      	add	r3, r2
 80091a6:	4299      	cmp	r1, r3
 80091a8:	d122      	bne.n	80091f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fd fec2 	bl	8006f38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b4:	4b19      	ldr	r3, [pc, #100]	@ (800921c <xTaskPriorityInherit+0xc4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c2:	4b18      	ldr	r3, [pc, #96]	@ (8009224 <xTaskPriorityInherit+0xcc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d903      	bls.n	80091d2 <xTaskPriorityInherit+0x7a>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ce:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <xTaskPriorityInherit+0xcc>)
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4a10      	ldr	r2, [pc, #64]	@ (8009220 <xTaskPriorityInherit+0xc8>)
 80091e0:	441a      	add	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd fe48 	bl	8006e7e <vListInsertEnd>
 80091ee:	e004      	b.n	80091fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f0:	4b0a      	ldr	r3, [pc, #40]	@ (800921c <xTaskPriorityInherit+0xc4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e008      	b.n	8009212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009204:	4b05      	ldr	r3, [pc, #20]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	429a      	cmp	r2, r3
 800920c:	d201      	bcs.n	8009212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009212:	68fb      	ldr	r3, [r7, #12]
	}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20004554 	.word	0x20004554
 8009220:	20004558 	.word	0x20004558
 8009224:	20004a30 	.word	0x20004a30

08009228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05c      	beq.n	80092f8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800923e:	4b31      	ldr	r3, [pc, #196]	@ (8009304 <xTaskPriorityDisinherit+0xdc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	429a      	cmp	r2, r3
 8009246:	d00d      	beq.n	8009264 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	b672      	cpsid	i
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	b662      	cpsie	i
 800925c:	60fb      	str	r3, [r7, #12]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10d      	bne.n	8009288 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009270:	b672      	cpsid	i
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	b662      	cpsie	i
 8009280:	60bb      	str	r3, [r7, #8]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929a:	429a      	cmp	r2, r3
 800929c:	d02c      	beq.n	80092f8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d128      	bne.n	80092f8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fd fe44 	bl	8006f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009308 <xTaskPriorityDisinherit+0xe0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <xTaskPriorityDisinherit+0xb0>
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009308 <xTaskPriorityDisinherit+0xe0>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a09      	ldr	r2, [pc, #36]	@ (800930c <xTaskPriorityDisinherit+0xe4>)
 80092e6:	441a      	add	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fd fdc5 	bl	8006e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f8:	697b      	ldr	r3, [r7, #20]
	}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20004554 	.word	0x20004554
 8009308:	20004a30 	.word	0x20004a30
 800930c:	20004558 	.word	0x20004558

08009310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d070      	beq.n	800940a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10d      	bne.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009334:	b672      	cpsid	i
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	b662      	cpsie	i
 8009344:	60fb      	str	r3, [r7, #12]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d902      	bls.n	800935c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e002      	b.n	8009362 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009360:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	429a      	cmp	r2, r3
 800936a:	d04e      	beq.n	800940a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	429a      	cmp	r2, r3
 8009374:	d149      	bne.n	800940a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009376:	4b27      	ldr	r3, [pc, #156]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	429a      	cmp	r2, r3
 800937e:	d10d      	bne.n	800939c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	60bb      	str	r3, [r7, #8]
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	e7fd      	b.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db04      	blt.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6959      	ldr	r1, [r3, #20]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4a13      	ldr	r2, [pc, #76]	@ (8009418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80093ca:	4413      	add	r3, r2
 80093cc:	4299      	cmp	r1, r3
 80093ce:	d11c      	bne.n	800940a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd fdaf 	bl	8006f38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093de:	4b0f      	ldr	r3, [pc, #60]	@ (800941c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d903      	bls.n	80093ee <vTaskPriorityDisinheritAfterTimeout+0xde>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	4a0c      	ldr	r2, [pc, #48]	@ (800941c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4a07      	ldr	r2, [pc, #28]	@ (8009418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80093fc:	441a      	add	r2, r3
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7fd fd3a 	bl	8006e7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800940a:	bf00      	nop
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20004554 	.word	0x20004554
 8009418:	20004558 	.word	0x20004558
 800941c:	20004a30 	.word	0x20004a30

08009420 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009424:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <pvTaskIncrementMutexHeldCount+0x24>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800942c:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <pvTaskIncrementMutexHeldCount+0x24>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009432:	3201      	adds	r2, #1
 8009434:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009436:	4b03      	ldr	r3, [pc, #12]	@ (8009444 <pvTaskIncrementMutexHeldCount+0x24>)
 8009438:	681b      	ldr	r3, [r3, #0]
	}
 800943a:	4618      	mov	r0, r3
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20004554 	.word	0x20004554

08009448 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009452:	4b21      	ldr	r3, [pc, #132]	@ (80094d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009458:	4b20      	ldr	r3, [pc, #128]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x94>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7fd fd6a 	bl	8006f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d10a      	bne.n	8009482 <prvAddCurrentTaskToDelayedList+0x3a>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009472:	4b1a      	ldr	r3, [pc, #104]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x94>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4819      	ldr	r0, [pc, #100]	@ (80094e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800947c:	f7fd fcff 	bl	8006e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009480:	e026      	b.n	80094d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800948a:	4b14      	ldr	r3, [pc, #80]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x94>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	429a      	cmp	r2, r3
 8009498:	d209      	bcs.n	80094ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949a:	4b12      	ldr	r3, [pc, #72]	@ (80094e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x94>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fd fd0d 	bl	8006ec6 <vListInsert>
}
 80094ac:	e010      	b.n	80094d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ae:	4b0e      	ldr	r3, [pc, #56]	@ (80094e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x94>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f7fd fd03 	bl	8006ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d202      	bcs.n	80094d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094ca:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	6013      	str	r3, [r2, #0]
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20004a2c 	.word	0x20004a2c
 80094dc:	20004554 	.word	0x20004554
 80094e0:	20004a14 	.word	0x20004a14
 80094e4:	200049e4 	.word	0x200049e4
 80094e8:	200049e0 	.word	0x200049e0
 80094ec:	20004a48 	.word	0x20004a48

080094f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	@ 0x28
 80094f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094fa:	f000 fb21 	bl	8009b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009578 <xTimerCreateTimerTask+0x88>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d021      	beq.n	800954a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800950e:	1d3a      	adds	r2, r7, #4
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	4618      	mov	r0, r3
 800951a:	f7fd fc69 	bl	8006df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	9202      	str	r2, [sp, #8]
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	2302      	movs	r3, #2
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	460a      	mov	r2, r1
 8009530:	4912      	ldr	r1, [pc, #72]	@ (800957c <xTimerCreateTimerTask+0x8c>)
 8009532:	4813      	ldr	r0, [pc, #76]	@ (8009580 <xTimerCreateTimerTask+0x90>)
 8009534:	f7fe ff86 	bl	8008444 <xTaskCreateStatic>
 8009538:	4603      	mov	r3, r0
 800953a:	4a12      	ldr	r2, [pc, #72]	@ (8009584 <xTimerCreateTimerTask+0x94>)
 800953c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800953e:	4b11      	ldr	r3, [pc, #68]	@ (8009584 <xTimerCreateTimerTask+0x94>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009546:	2301      	movs	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10d      	bne.n	800956c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	b672      	cpsid	i
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	b662      	cpsie	i
 8009564:	613b      	str	r3, [r7, #16]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800956c:	697b      	ldr	r3, [r7, #20]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20004a84 	.word	0x20004a84
 800957c:	0801a8e0 	.word	0x0801a8e0
 8009580:	080096c9 	.word	0x080096c9
 8009584:	20004a88 	.word	0x20004a88

08009588 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	@ 0x28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009596:	2300      	movs	r3, #0
 8009598:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <xTimerGenericCommand+0x34>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	b672      	cpsid	i
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	b662      	cpsie	i
 80095b4:	623b      	str	r3, [r7, #32]
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	e7fd      	b.n	80095b8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095bc:	4b19      	ldr	r3, [pc, #100]	@ (8009624 <xTimerGenericCommand+0x9c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d02a      	beq.n	800961a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b05      	cmp	r3, #5
 80095d4:	dc18      	bgt.n	8009608 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095d6:	f7ff fda1 	bl	800911c <xTaskGetSchedulerState>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d109      	bne.n	80095f4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e0:	4b10      	ldr	r3, [pc, #64]	@ (8009624 <xTimerGenericCommand+0x9c>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	f107 0110 	add.w	r1, r7, #16
 80095e8:	2300      	movs	r3, #0
 80095ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ec:	f7fd ff5a 	bl	80074a4 <xQueueGenericSend>
 80095f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80095f2:	e012      	b.n	800961a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <xTimerGenericCommand+0x9c>)
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	f107 0110 	add.w	r1, r7, #16
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	f7fd ff50 	bl	80074a4 <xQueueGenericSend>
 8009604:	6278      	str	r0, [r7, #36]	@ 0x24
 8009606:	e008      	b.n	800961a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009608:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <xTimerGenericCommand+0x9c>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	f107 0110 	add.w	r1, r7, #16
 8009610:	2300      	movs	r3, #0
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	f7fe f850 	bl	80076b8 <xQueueGenericSendFromISR>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800961c:	4618      	mov	r0, r3
 800961e:	3728      	adds	r7, #40	@ 0x28
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20004a84 	.word	0x20004a84

08009628 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af02      	add	r7, sp, #8
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009632:	4b24      	ldr	r3, [pc, #144]	@ (80096c4 <prvProcessExpiredTimer+0x9c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	3304      	adds	r3, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f7fd fc79 	bl	8006f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d025      	beq.n	80096a0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	18d1      	adds	r1, r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	6978      	ldr	r0, [r7, #20]
 8009662:	f000 f8d7 	bl	8009814 <prvInsertTimerInActiveList>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d022      	beq.n	80096b2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800966c:	2300      	movs	r3, #0
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	2300      	movs	r3, #0
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	2100      	movs	r1, #0
 8009676:	6978      	ldr	r0, [r7, #20]
 8009678:	f7ff ff86 	bl	8009588 <xTimerGenericCommand>
 800967c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d116      	bne.n	80096b2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	b672      	cpsid	i
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	b662      	cpsie	i
 8009698:	60fb      	str	r3, [r7, #12]
}
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	e7fd      	b.n	800969c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	6978      	ldr	r0, [r7, #20]
 80096b8:	4798      	blx	r3
}
 80096ba:	bf00      	nop
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20004a7c 	.word	0x20004a7c

080096c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 f859 	bl	800978c <prvGetNextExpireTime>
 80096da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4619      	mov	r1, r3
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 f805 	bl	80096f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096e6:	f000 f8d7 	bl	8009898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ea:	bf00      	nop
 80096ec:	e7f0      	b.n	80096d0 <prvTimerTask+0x8>
	...

080096f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096fa:	f7ff f8f5 	bl	80088e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096fe:	f107 0308 	add.w	r3, r7, #8
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f866 	bl	80097d4 <prvSampleTimeNow>
 8009708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d130      	bne.n	8009772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <prvProcessTimerOrBlockTask+0x3c>
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	429a      	cmp	r2, r3
 800971c:	d806      	bhi.n	800972c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800971e:	f7ff f8f1 	bl	8008904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009722:	68f9      	ldr	r1, [r7, #12]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ff7f 	bl	8009628 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800972a:	e024      	b.n	8009776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d008      	beq.n	8009744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009732:	4b13      	ldr	r3, [pc, #76]	@ (8009780 <prvProcessTimerOrBlockTask+0x90>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <prvProcessTimerOrBlockTask+0x50>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <prvProcessTimerOrBlockTask+0x52>
 8009740:	2300      	movs	r3, #0
 8009742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009744:	4b0f      	ldr	r3, [pc, #60]	@ (8009784 <prvProcessTimerOrBlockTask+0x94>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	4619      	mov	r1, r3
 8009752:	f7fe fe43 	bl	80083dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009756:	f7ff f8d5 	bl	8008904 <xTaskResumeAll>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009760:	4b09      	ldr	r3, [pc, #36]	@ (8009788 <prvProcessTimerOrBlockTask+0x98>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
}
 8009770:	e001      	b.n	8009776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009772:	f7ff f8c7 	bl	8008904 <xTaskResumeAll>
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20004a80 	.word	0x20004a80
 8009784:	20004a84 	.word	0x20004a84
 8009788:	e000ed04 	.word	0xe000ed04

0800978c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009794:	4b0e      	ldr	r3, [pc, #56]	@ (80097d0 <prvGetNextExpireTime+0x44>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <prvGetNextExpireTime+0x16>
 800979e:	2201      	movs	r2, #1
 80097a0:	e000      	b.n	80097a4 <prvGetNextExpireTime+0x18>
 80097a2:	2200      	movs	r2, #0
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b0:	4b07      	ldr	r3, [pc, #28]	@ (80097d0 <prvGetNextExpireTime+0x44>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	e001      	b.n	80097c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097c0:	68fb      	ldr	r3, [r7, #12]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20004a7c 	.word	0x20004a7c

080097d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097dc:	f7ff f932 	bl	8008a44 <xTaskGetTickCount>
 80097e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009810 <prvSampleTimeNow+0x3c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d205      	bcs.n	80097f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097ec:	f000 f940 	bl	8009a70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e002      	b.n	80097fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097fe:	4a04      	ldr	r2, [pc, #16]	@ (8009810 <prvSampleTimeNow+0x3c>)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009804:	68fb      	ldr	r3, [r7, #12]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20004a8c 	.word	0x20004a8c

08009814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d812      	bhi.n	8009860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e01b      	b.n	8009886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800984e:	4b10      	ldr	r3, [pc, #64]	@ (8009890 <prvInsertTimerInActiveList+0x7c>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3304      	adds	r3, #4
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f7fd fb34 	bl	8006ec6 <vListInsert>
 800985e:	e012      	b.n	8009886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d206      	bcs.n	8009876 <prvInsertTimerInActiveList+0x62>
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d302      	bcc.n	8009876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e007      	b.n	8009886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009876:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <prvInsertTimerInActiveList+0x80>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fd fb20 	bl	8006ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009886:	697b      	ldr	r3, [r7, #20]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20004a80 	.word	0x20004a80
 8009894:	20004a7c 	.word	0x20004a7c

08009898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08e      	sub	sp, #56	@ 0x38
 800989c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800989e:	e0d4      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	da1b      	bge.n	80098de <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098a6:	1d3b      	adds	r3, r7, #4
 80098a8:	3304      	adds	r3, #4
 80098aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <prvProcessReceivedCommands+0x36>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b6:	b672      	cpsid	i
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	b662      	cpsie	i
 80098c6:	61fb      	str	r3, [r7, #28]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d4:	6850      	ldr	r0, [r2, #4]
 80098d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d8:	6892      	ldr	r2, [r2, #8]
 80098da:	4611      	mov	r1, r2
 80098dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f2c0 80b2 	blt.w	8009a4a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f4:	3304      	adds	r3, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fb1e 	bl	8006f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098fc:	463b      	mov	r3, r7
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff ff68 	bl	80097d4 <prvSampleTimeNow>
 8009904:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b09      	cmp	r3, #9
 800990a:	f200 809b 	bhi.w	8009a44 <prvProcessReceivedCommands+0x1ac>
 800990e:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <prvProcessReceivedCommands+0x7c>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	0800993d 	.word	0x0800993d
 8009918:	0800993d 	.word	0x0800993d
 800991c:	0800993d 	.word	0x0800993d
 8009920:	080099b7 	.word	0x080099b7
 8009924:	080099cb 	.word	0x080099cb
 8009928:	08009a1b 	.word	0x08009a1b
 800992c:	0800993d 	.word	0x0800993d
 8009930:	0800993d 	.word	0x0800993d
 8009934:	080099b7 	.word	0x080099b7
 8009938:	080099cb 	.word	0x080099cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009942:	f043 0301 	orr.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	18d1      	adds	r1, r2, r3
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800995a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800995c:	f7ff ff5a 	bl	8009814 <prvInsertTimerInActiveList>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d070      	beq.n	8009a48 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d065      	beq.n	8009a48 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	441a      	add	r2, r3
 8009984:	2300      	movs	r3, #0
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	2100      	movs	r1, #0
 800998c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800998e:	f7ff fdfb 	bl	8009588 <xTimerGenericCommand>
 8009992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d156      	bne.n	8009a48 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	b672      	cpsid	i
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	b662      	cpsie	i
 80099ae:	61bb      	str	r3, [r7, #24]
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	e7fd      	b.n	80099b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099c8:	e03f      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d0:	f043 0301 	orr.w	r3, r3, #1
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10d      	bne.n	8009a06 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ee:	b672      	cpsid	i
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	b662      	cpsie	i
 80099fe:	617b      	str	r3, [r7, #20]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	18d1      	adds	r1, r2, r3
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a14:	f7ff fefe 	bl	8009814 <prvInsertTimerInActiveList>
					break;
 8009a18:	e017      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009a28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a2a:	f000 fbd3 	bl	800a1d4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a2e:	e00c      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a42:	e002      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <prvProcessReceivedCommands+0x1b2>
					break;
 8009a48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4a:	4b08      	ldr	r3, [pc, #32]	@ (8009a6c <prvProcessReceivedCommands+0x1d4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	1d39      	adds	r1, r7, #4
 8009a50:	2200      	movs	r2, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fd ff6c 	bl	8007930 <xQueueReceive>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f47f af20 	bne.w	80098a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	3730      	adds	r7, #48	@ 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20004a84 	.word	0x20004a84

08009a70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a76:	e04b      	b.n	8009b10 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a78:	4b2f      	ldr	r3, [pc, #188]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a82:	4b2d      	ldr	r3, [pc, #180]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fd fa51 	bl	8006f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d031      	beq.n	8009b10 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d90e      	bls.n	8009adc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aca:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	f7fd f9f6 	bl	8006ec6 <vListInsert>
 8009ada:	e019      	b.n	8009b10 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009adc:	2300      	movs	r3, #0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff fd4e 	bl	8009588 <xTimerGenericCommand>
 8009aec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10d      	bne.n	8009b10 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	b672      	cpsid	i
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	b662      	cpsie	i
 8009b08:	603b      	str	r3, [r7, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b10:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1ae      	bne.n	8009a78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b1a:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b20:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <prvSwitchTimerLists+0xcc>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009b26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b28:	4a04      	ldr	r2, [pc, #16]	@ (8009b3c <prvSwitchTimerLists+0xcc>)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6013      	str	r3, [r2, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20004a7c 	.word	0x20004a7c
 8009b3c:	20004a80 	.word	0x20004a80

08009b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b46:	f000 f949 	bl	8009ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b4a:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d120      	bne.n	8009b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b52:	4814      	ldr	r0, [pc, #80]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b54:	f7fd f966 	bl	8006e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b58:	4813      	ldr	r0, [pc, #76]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b5a:	f7fd f963 	bl	8006e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <prvCheckForValidListAndQueue+0x6c>)
 8009b60:	4a10      	ldr	r2, [pc, #64]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <prvCheckForValidListAndQueue+0x70>)
 8009b66:	4a10      	ldr	r2, [pc, #64]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <prvCheckForValidListAndQueue+0x74>)
 8009b70:	4a11      	ldr	r2, [pc, #68]	@ (8009bb8 <prvCheckForValidListAndQueue+0x78>)
 8009b72:	2110      	movs	r1, #16
 8009b74:	200a      	movs	r0, #10
 8009b76:	f7fd fa75 	bl	8007064 <xQueueGenericCreateStatic>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4a08      	ldr	r2, [pc, #32]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b80:	4b07      	ldr	r3, [pc, #28]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	490b      	ldr	r1, [pc, #44]	@ (8009bbc <prvCheckForValidListAndQueue+0x7c>)
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fbd0 	bl	8008334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b94:	f000 f958 	bl	8009e48 <vPortExitCritical>
}
 8009b98:	bf00      	nop
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20004a84 	.word	0x20004a84
 8009ba4:	20004a54 	.word	0x20004a54
 8009ba8:	20004a68 	.word	0x20004a68
 8009bac:	20004a7c 	.word	0x20004a7c
 8009bb0:	20004a80 	.word	0x20004a80
 8009bb4:	20004b30 	.word	0x20004b30
 8009bb8:	20004a90 	.word	0x20004a90
 8009bbc:	0801a8e8 	.word	0x0801a8e8

08009bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3b04      	subs	r3, #4
 8009bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3b04      	subs	r3, #4
 8009bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0201 	bic.w	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8009c24 <pxPortInitialiseStack+0x64>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b14      	subs	r3, #20
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f06f 0202 	mvn.w	r2, #2
 8009c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3b20      	subs	r3, #32
 8009c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c16:	68fb      	ldr	r3, [r7, #12]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	08009c29 	.word	0x08009c29

08009c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c32:	4b15      	ldr	r3, [pc, #84]	@ (8009c88 <prvTaskExitError+0x60>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d00d      	beq.n	8009c58 <prvTaskExitError+0x30>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c40:	b672      	cpsid	i
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	b662      	cpsie	i
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <prvTaskExitError+0x2c>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5c:	b672      	cpsid	i
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	b662      	cpsie	i
 8009c6c:	60bb      	str	r3, [r7, #8]
}
 8009c6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c70:	bf00      	nop
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0fc      	beq.n	8009c72 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	2000000c 	.word	0x2000000c
 8009c8c:	00000000 	.word	0x00000000

08009c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <pxCurrentTCBConst2>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	6808      	ldr	r0, [r1, #0]
 8009c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f380 8809 	msr	PSP, r0
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	4770      	bx	lr
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst2>:
 8009cb0:	20004554 	.word	0x20004554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cb8:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <prvPortStartFirstTask+0x24>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f380 8808 	msr	MSP, r0
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8814 	msr	CONTROL, r0
 8009cca:	b662      	cpsie	i
 8009ccc:	b661      	cpsie	f
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	df00      	svc	0
 8009cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cda:	bf00      	nop
 8009cdc:	e000ed08 	.word	0xe000ed08

08009ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ce6:	4b37      	ldr	r3, [pc, #220]	@ (8009dc4 <xPortStartScheduler+0xe4>)
 8009ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	22ff      	movs	r2, #255	@ 0xff
 8009cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc8 <xPortStartScheduler+0xe8>)
 8009d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d10:	2207      	movs	r2, #7
 8009d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d14:	e009      	b.n	8009d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d16:	4b2d      	ldr	r3, [pc, #180]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d32:	2b80      	cmp	r3, #128	@ 0x80
 8009d34:	d0ef      	beq.n	8009d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d36:	4b25      	ldr	r3, [pc, #148]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1c3 0307 	rsb	r3, r3, #7
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d00d      	beq.n	8009d5e <xPortStartScheduler+0x7e>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	b672      	cpsid	i
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	b662      	cpsie	i
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	4a19      	ldr	r2, [pc, #100]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d68:	4b18      	ldr	r3, [pc, #96]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d70:	4a16      	ldr	r2, [pc, #88]	@ (8009dcc <xPortStartScheduler+0xec>)
 8009d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d7c:	4b14      	ldr	r3, [pc, #80]	@ (8009dd0 <xPortStartScheduler+0xf0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a13      	ldr	r2, [pc, #76]	@ (8009dd0 <xPortStartScheduler+0xf0>)
 8009d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d88:	4b11      	ldr	r3, [pc, #68]	@ (8009dd0 <xPortStartScheduler+0xf0>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a10      	ldr	r2, [pc, #64]	@ (8009dd0 <xPortStartScheduler+0xf0>)
 8009d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d94:	f000 f8dc 	bl	8009f50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d98:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <xPortStartScheduler+0xf4>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d9e:	f000 f8fb 	bl	8009f98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <xPortStartScheduler+0xf8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd8 <xPortStartScheduler+0xf8>)
 8009da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dae:	f7ff ff83 	bl	8009cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009db2:	f7fe ff25 	bl	8008c00 <vTaskSwitchContext>
	prvTaskExitError();
 8009db6:	f7ff ff37 	bl	8009c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000e400 	.word	0xe000e400
 8009dc8:	20004b80 	.word	0x20004b80
 8009dcc:	20004b84 	.word	0x20004b84
 8009dd0:	e000ed20 	.word	0xe000ed20
 8009dd4:	2000000c 	.word	0x2000000c
 8009dd8:	e000ef34 	.word	0xe000ef34

08009ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	b672      	cpsid	i
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	b662      	cpsie	i
 8009df6:	607b      	str	r3, [r7, #4]
}
 8009df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dfa:	4b11      	ldr	r3, [pc, #68]	@ (8009e40 <vPortEnterCritical+0x64>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	4a0f      	ldr	r2, [pc, #60]	@ (8009e40 <vPortEnterCritical+0x64>)
 8009e02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e04:	4b0e      	ldr	r3, [pc, #56]	@ (8009e40 <vPortEnterCritical+0x64>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d112      	bne.n	8009e32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <vPortEnterCritical+0x68>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00d      	beq.n	8009e32 <vPortEnterCritical+0x56>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	b672      	cpsid	i
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	b662      	cpsie	i
 8009e2a:	603b      	str	r3, [r7, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	e7fd      	b.n	8009e2e <vPortEnterCritical+0x52>
	}
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	2000000c 	.word	0x2000000c
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e4e:	4b13      	ldr	r3, [pc, #76]	@ (8009e9c <vPortExitCritical+0x54>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10d      	bne.n	8009e72 <vPortExitCritical+0x2a>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	b672      	cpsid	i
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	b662      	cpsie	i
 8009e6a:	607b      	str	r3, [r7, #4]
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	e7fd      	b.n	8009e6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009e72:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <vPortExitCritical+0x54>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4a08      	ldr	r2, [pc, #32]	@ (8009e9c <vPortExitCritical+0x54>)
 8009e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <vPortExitCritical+0x54>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <vPortExitCritical+0x48>
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	2000000c 	.word	0x2000000c

08009ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ea0:	f3ef 8009 	mrs	r0, PSP
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <pxCurrentTCBConst>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f01e 0f10 	tst.w	lr, #16
 8009eb0:	bf08      	it	eq
 8009eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	6010      	str	r0, [r2, #0]
 8009ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ec4:	b672      	cpsid	i
 8009ec6:	f380 8811 	msr	BASEPRI, r0
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	b662      	cpsie	i
 8009ed4:	f7fe fe94 	bl	8008c00 <vTaskSwitchContext>
 8009ed8:	f04f 0000 	mov.w	r0, #0
 8009edc:	f380 8811 	msr	BASEPRI, r0
 8009ee0:	bc09      	pop	{r0, r3}
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f01e 0f10 	tst.w	lr, #16
 8009eee:	bf08      	it	eq
 8009ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ef4:	f380 8809 	msr	PSP, r0
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop

08009f00 <pxCurrentTCBConst>:
 8009f00:	20004554 	.word	0x20004554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	b672      	cpsid	i
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	b662      	cpsie	i
 8009f22:	607b      	str	r3, [r7, #4]
}
 8009f24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f26:	f7fe fdaf 	bl	8008a88 <xTaskIncrementTick>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f30:	4b06      	ldr	r3, [pc, #24]	@ (8009f4c <SysTick_Handler+0x44>)
 8009f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f36:	601a      	str	r2, [r3, #0]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	f383 8811 	msr	BASEPRI, r3
}
 8009f42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	e000ed04 	.word	0xe000ed04

08009f50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f54:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <vPortSetupTimerInterrupt+0x34>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f88 <vPortSetupTimerInterrupt+0x38>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f60:	4b0a      	ldr	r3, [pc, #40]	@ (8009f8c <vPortSetupTimerInterrupt+0x3c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a0a      	ldr	r2, [pc, #40]	@ (8009f90 <vPortSetupTimerInterrupt+0x40>)
 8009f66:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6a:	099b      	lsrs	r3, r3, #6
 8009f6c:	4a09      	ldr	r2, [pc, #36]	@ (8009f94 <vPortSetupTimerInterrupt+0x44>)
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f72:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <vPortSetupTimerInterrupt+0x34>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	601a      	str	r2, [r3, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	e000e010 	.word	0xe000e010
 8009f88:	e000e018 	.word	0xe000e018
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	10624dd3 	.word	0x10624dd3
 8009f94:	e000e014 	.word	0xe000e014

08009f98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fa8 <vPortEnableVFP+0x10>
 8009f9c:	6801      	ldr	r1, [r0, #0]
 8009f9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fa2:	6001      	str	r1, [r0, #0]
 8009fa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fa6:	bf00      	nop
 8009fa8:	e000ed88 	.word	0xe000ed88

08009fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fb2:	f3ef 8305 	mrs	r3, IPSR
 8009fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b0f      	cmp	r3, #15
 8009fbc:	d917      	bls.n	8009fee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fbe:	4a1a      	ldr	r2, [pc, #104]	@ (800a028 <vPortValidateInterruptPriority+0x7c>)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fc8:	4b18      	ldr	r3, [pc, #96]	@ (800a02c <vPortValidateInterruptPriority+0x80>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	7afa      	ldrb	r2, [r7, #11]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d20d      	bcs.n	8009fee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	b672      	cpsid	i
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	b662      	cpsie	i
 8009fe6:	607b      	str	r3, [r7, #4]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fee:	4b10      	ldr	r3, [pc, #64]	@ (800a030 <vPortValidateInterruptPriority+0x84>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	@ (800a034 <vPortValidateInterruptPriority+0x88>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90d      	bls.n	800a01a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	b672      	cpsid	i
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	b662      	cpsie	i
 800a012:	603b      	str	r3, [r7, #0]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <vPortValidateInterruptPriority+0x6a>
	}
 800a01a:	bf00      	nop
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	e000e3f0 	.word	0xe000e3f0
 800a02c:	20004b80 	.word	0x20004b80
 800a030:	e000ed0c 	.word	0xe000ed0c
 800a034:	20004b84 	.word	0x20004b84

0800a038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	@ 0x28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a040:	2300      	movs	r3, #0
 800a042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a044:	f7fe fc50 	bl	80088e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a048:	4b5d      	ldr	r3, [pc, #372]	@ (800a1c0 <pvPortMalloc+0x188>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a050:	f000 f920 	bl	800a294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a054:	4b5b      	ldr	r3, [pc, #364]	@ (800a1c4 <pvPortMalloc+0x18c>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4013      	ands	r3, r2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f040 8094 	bne.w	800a18a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d020      	beq.n	800a0aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a068:	2208      	movs	r2, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4413      	add	r3, r2
 800a06e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b00      	cmp	r3, #0
 800a078:	d017      	beq.n	800a0aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f023 0307 	bic.w	r3, r3, #7
 800a080:	3308      	adds	r3, #8
 800a082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00d      	beq.n	800a0aa <pvPortMalloc+0x72>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	b672      	cpsid	i
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	b662      	cpsie	i
 800a0a2:	617b      	str	r3, [r7, #20]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d06c      	beq.n	800a18a <pvPortMalloc+0x152>
 800a0b0:	4b45      	ldr	r3, [pc, #276]	@ (800a1c8 <pvPortMalloc+0x190>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d867      	bhi.n	800a18a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ba:	4b44      	ldr	r3, [pc, #272]	@ (800a1cc <pvPortMalloc+0x194>)
 800a0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0be:	4b43      	ldr	r3, [pc, #268]	@ (800a1cc <pvPortMalloc+0x194>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c4:	e004      	b.n	800a0d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d903      	bls.n	800a0e2 <pvPortMalloc+0xaa>
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f1      	bne.n	800a0c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0e2:	4b37      	ldr	r3, [pc, #220]	@ (800a1c0 <pvPortMalloc+0x188>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d04e      	beq.n	800a18a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	4413      	add	r3, r2
 800a0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	1ad2      	subs	r2, r2, r3
 800a106:	2308      	movs	r3, #8
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d922      	bls.n	800a154 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4413      	add	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00d      	beq.n	800a13c <pvPortMalloc+0x104>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	b672      	cpsid	i
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	b662      	cpsie	i
 800a134:	613b      	str	r3, [r7, #16]
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	1ad2      	subs	r2, r2, r3
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a14e:	69b8      	ldr	r0, [r7, #24]
 800a150:	f000 f902 	bl	800a358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a154:	4b1c      	ldr	r3, [pc, #112]	@ (800a1c8 <pvPortMalloc+0x190>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	4a1a      	ldr	r2, [pc, #104]	@ (800a1c8 <pvPortMalloc+0x190>)
 800a160:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a162:	4b19      	ldr	r3, [pc, #100]	@ (800a1c8 <pvPortMalloc+0x190>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <pvPortMalloc+0x198>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d203      	bcs.n	800a176 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a16e:	4b16      	ldr	r3, [pc, #88]	@ (800a1c8 <pvPortMalloc+0x190>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a17      	ldr	r2, [pc, #92]	@ (800a1d0 <pvPortMalloc+0x198>)
 800a174:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	4b12      	ldr	r3, [pc, #72]	@ (800a1c4 <pvPortMalloc+0x18c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	431a      	orrs	r2, r3
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a18a:	f7fe fbbb 	bl	8008904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00d      	beq.n	800a1b4 <pvPortMalloc+0x17c>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19c:	b672      	cpsid	i
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	b662      	cpsie	i
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <pvPortMalloc+0x178>
	return pvReturn;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3728      	adds	r7, #40	@ 0x28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20008790 	.word	0x20008790
 800a1c4:	2000879c 	.word	0x2000879c
 800a1c8:	20008794 	.word	0x20008794
 800a1cc:	20008788 	.word	0x20008788
 800a1d0:	20008798 	.word	0x20008798

0800a1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d04e      	beq.n	800a284 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	425b      	negs	r3, r3
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	4b24      	ldr	r3, [pc, #144]	@ (800a28c <vPortFree+0xb8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10d      	bne.n	800a21e <vPortFree+0x4a>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	b672      	cpsid	i
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	b662      	cpsie	i
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	e7fd      	b.n	800a21a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <vPortFree+0x6e>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	b672      	cpsid	i
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	b662      	cpsie	i
 800a23a:	60bb      	str	r3, [r7, #8]
}
 800a23c:	bf00      	nop
 800a23e:	bf00      	nop
 800a240:	e7fd      	b.n	800a23e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	4b11      	ldr	r3, [pc, #68]	@ (800a28c <vPortFree+0xb8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d019      	beq.n	800a284 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d115      	bne.n	800a284 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	4b0b      	ldr	r3, [pc, #44]	@ (800a28c <vPortFree+0xb8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	43db      	mvns	r3, r3
 800a262:	401a      	ands	r2, r3
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a268:	f7fe fb3e 	bl	80088e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <vPortFree+0xbc>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4413      	add	r3, r2
 800a276:	4a06      	ldr	r2, [pc, #24]	@ (800a290 <vPortFree+0xbc>)
 800a278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a27a:	6938      	ldr	r0, [r7, #16]
 800a27c:	f000 f86c 	bl	800a358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a280:	f7fe fb40 	bl	8008904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a284:	bf00      	nop
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	2000879c 	.word	0x2000879c
 800a290:	20008794 	.word	0x20008794

0800a294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a29a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a29e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2a0:	4b27      	ldr	r3, [pc, #156]	@ (800a340 <prvHeapInit+0xac>)
 800a2a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3307      	adds	r3, #7
 800a2b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0307 	bic.w	r3, r3, #7
 800a2ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a340 <prvHeapInit+0xac>)
 800a2c4:	4413      	add	r3, r2
 800a2c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800a344 <prvHeapInit+0xb0>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a344 <prvHeapInit+0xb0>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4413      	add	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2e0:	2208      	movs	r2, #8
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4a15      	ldr	r2, [pc, #84]	@ (800a348 <prvHeapInit+0xb4>)
 800a2f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2f6:	4b14      	ldr	r3, [pc, #80]	@ (800a348 <prvHeapInit+0xb4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2fe:	4b12      	ldr	r3, [pc, #72]	@ (800a348 <prvHeapInit+0xb4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a314:	4b0c      	ldr	r3, [pc, #48]	@ (800a348 <prvHeapInit+0xb4>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	4a0a      	ldr	r2, [pc, #40]	@ (800a34c <prvHeapInit+0xb8>)
 800a322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4a09      	ldr	r2, [pc, #36]	@ (800a350 <prvHeapInit+0xbc>)
 800a32a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a32c:	4b09      	ldr	r3, [pc, #36]	@ (800a354 <prvHeapInit+0xc0>)
 800a32e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	20004b88 	.word	0x20004b88
 800a344:	20008788 	.word	0x20008788
 800a348:	20008790 	.word	0x20008790
 800a34c:	20008798 	.word	0x20008798
 800a350:	20008794 	.word	0x20008794
 800a354:	2000879c 	.word	0x2000879c

0800a358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a360:	4b28      	ldr	r3, [pc, #160]	@ (800a404 <prvInsertBlockIntoFreeList+0xac>)
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e002      	b.n	800a36c <prvInsertBlockIntoFreeList+0x14>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d8f7      	bhi.n	800a366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	4413      	add	r3, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d108      	bne.n	800a39a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	441a      	add	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d118      	bne.n	800a3e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b15      	ldr	r3, [pc, #84]	@ (800a408 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d00d      	beq.n	800a3d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	e008      	b.n	800a3e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a408 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	e003      	b.n	800a3e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d002      	beq.n	800a3f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20008788 	.word	0x20008788
 800a408:	20008790 	.word	0x20008790

0800a40c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	330c      	adds	r3, #12
 800a41c:	461a      	mov	r2, r3
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f002 fa29 	bl	800c878 <tcpip_send_msg_wait_sem>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a438:	e001      	b.n	800a43e <netconn_apimsg+0x32>
  }
  return err;
 800a43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	@ 0x30
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	603a      	str	r2, [r7, #0]
 800a452:	71fb      	strb	r3, [r7, #7]
 800a454:	460b      	mov	r3, r1
 800a456:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f001 f923 	bl	800b6a8 <netconn_alloc>
 800a462:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d054      	beq.n	800a514 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a46a:	79bb      	ldrb	r3, [r7, #6]
 800a46c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a470:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4619      	mov	r1, r3
 800a478:	4829      	ldr	r0, [pc, #164]	@ (800a520 <netconn_new_with_proto_and_callback+0xd8>)
 800a47a:	f7ff ffc7 	bl	800a40c <netconn_apimsg>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800a484:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d043      	beq.n	800a514 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <netconn_new_with_proto_and_callback+0x58>
 800a494:	4b23      	ldr	r3, [pc, #140]	@ (800a524 <netconn_new_with_proto_and_callback+0xdc>)
 800a496:	22a3      	movs	r2, #163	@ 0xa3
 800a498:	4923      	ldr	r1, [pc, #140]	@ (800a528 <netconn_new_with_proto_and_callback+0xe0>)
 800a49a:	4824      	ldr	r0, [pc, #144]	@ (800a52c <netconn_new_with_proto_and_callback+0xe4>)
 800a49c:	f00d ff42 	bl	8018324 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	3310      	adds	r3, #16
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f00d f8dd 	bl	8017664 <sys_mbox_valid>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <netconn_new_with_proto_and_callback+0x74>
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a524 <netconn_new_with_proto_and_callback+0xdc>)
 800a4b2:	22a4      	movs	r2, #164	@ 0xa4
 800a4b4:	491e      	ldr	r1, [pc, #120]	@ (800a530 <netconn_new_with_proto_and_callback+0xe8>)
 800a4b6:	481d      	ldr	r0, [pc, #116]	@ (800a52c <netconn_new_with_proto_and_callback+0xe4>)
 800a4b8:	f00d ff34 	bl	8018324 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4be:	3314      	adds	r3, #20
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f00d f8cf 	bl	8017664 <sys_mbox_valid>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <netconn_new_with_proto_and_callback+0x90>
 800a4cc:	4b15      	ldr	r3, [pc, #84]	@ (800a524 <netconn_new_with_proto_and_callback+0xdc>)
 800a4ce:	22a6      	movs	r2, #166	@ 0xa6
 800a4d0:	4918      	ldr	r1, [pc, #96]	@ (800a534 <netconn_new_with_proto_and_callback+0xec>)
 800a4d2:	4816      	ldr	r0, [pc, #88]	@ (800a52c <netconn_new_with_proto_and_callback+0xe4>)
 800a4d4:	f00d ff26 	bl	8018324 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4da:	330c      	adds	r3, #12
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f00d f94f 	bl	8017780 <sys_sem_valid>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d105      	bne.n	800a4f4 <netconn_new_with_proto_and_callback+0xac>
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a524 <netconn_new_with_proto_and_callback+0xdc>)
 800a4ea:	22a9      	movs	r2, #169	@ 0xa9
 800a4ec:	4912      	ldr	r1, [pc, #72]	@ (800a538 <netconn_new_with_proto_and_callback+0xf0>)
 800a4ee:	480f      	ldr	r0, [pc, #60]	@ (800a52c <netconn_new_with_proto_and_callback+0xe4>)
 800a4f0:	f00d ff18 	bl	8018324 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f00d f934 	bl	8017766 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a500:	3310      	adds	r3, #16
 800a502:	4618      	mov	r0, r3
 800a504:	f00d f83a 	bl	801757c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a50a:	2007      	movs	r0, #7
 800a50c:	f002 ff1c 	bl	800d348 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	e000      	b.n	800a516 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a516:	4618      	mov	r0, r3
 800a518:	3730      	adds	r7, #48	@ 0x30
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800b67d 	.word	0x0800b67d
 800a524:	0801a8f0 	.word	0x0801a8f0
 800a528:	0801a924 	.word	0x0801a924
 800a52c:	0801a948 	.word	0x0801a948
 800a530:	0801a970 	.word	0x0801a970
 800a534:	0801a988 	.word	0x0801a988
 800a538:	0801a9ac 	.word	0x0801a9ac

0800a53c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08c      	sub	sp, #48	@ 0x30
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e014      	b.n	800a578 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a552:	2329      	movs	r3, #41	@ 0x29
 800a554:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a556:	f107 030c 	add.w	r3, r7, #12
 800a55a:	4619      	mov	r1, r3
 800a55c:	4808      	ldr	r0, [pc, #32]	@ (800a580 <netconn_prepare_delete+0x44>)
 800a55e:	f7ff ff55 	bl	800a40c <netconn_apimsg>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a568:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <netconn_prepare_delete+0x3a>
    return err;
 800a570:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a574:	e000      	b.n	800a578 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3730      	adds	r7, #48	@ 0x30
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	0800bbe9 	.word	0x0800bbe9

0800a584 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <netconn_delete+0x12>
    return ERR_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e00d      	b.n	800a5b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff ffd0 	bl	800a53c <netconn_prepare_delete>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <netconn_delete+0x2a>
    netconn_free(conn);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 f8eb 	bl	800b784 <netconn_free>
  }
  return err;
 800a5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08e      	sub	sp, #56	@ 0x38
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <netconn_bind+0x28>
 800a5d0:	4b11      	ldr	r3, [pc, #68]	@ (800a618 <netconn_bind+0x5c>)
 800a5d2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a5d6:	4911      	ldr	r1, [pc, #68]	@ (800a61c <netconn_bind+0x60>)
 800a5d8:	4811      	ldr	r0, [pc, #68]	@ (800a620 <netconn_bind+0x64>)
 800a5da:	f00d fea3 	bl	8018324 <iprintf>
 800a5de:	f06f 030f 	mvn.w	r3, #15
 800a5e2:	e015      	b.n	800a610 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <netconn_bind+0x68>)
 800a5ec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	4619      	mov	r1, r3
 800a600:	4809      	ldr	r0, [pc, #36]	@ (800a628 <netconn_bind+0x6c>)
 800a602:	f7ff ff03 	bl	800a40c <netconn_apimsg>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a60c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a610:	4618      	mov	r0, r3
 800a612:	3738      	adds	r7, #56	@ 0x38
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	0801a8f0 	.word	0x0801a8f0
 800a61c:	0801aa28 	.word	0x0801aa28
 800a620:	0801a948 	.word	0x0801a948
 800a624:	0801dd78 	.word	0x0801dd78
 800a628:	0800bdb1 	.word	0x0800bdb1

0800a62c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	@ 0x30
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <netconn_listen_with_backlog+0x26>
 800a63e:	4b0d      	ldr	r3, [pc, #52]	@ (800a674 <netconn_listen_with_backlog+0x48>)
 800a640:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800a644:	490c      	ldr	r1, [pc, #48]	@ (800a678 <netconn_listen_with_backlog+0x4c>)
 800a646:	480d      	ldr	r0, [pc, #52]	@ (800a67c <netconn_listen_with_backlog+0x50>)
 800a648:	f00d fe6c 	bl	8018324 <iprintf>
 800a64c:	f06f 030f 	mvn.w	r3, #15
 800a650:	e00c      	b.n	800a66c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	4619      	mov	r1, r3
 800a65c:	4808      	ldr	r0, [pc, #32]	@ (800a680 <netconn_listen_with_backlog+0x54>)
 800a65e:	f7ff fed5 	bl	800a40c <netconn_apimsg>
 800a662:	4603      	mov	r3, r0
 800a664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a668:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3730      	adds	r7, #48	@ 0x30
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0801a8f0 	.word	0x0801a8f0
 800a678:	0801aaa8 	.word	0x0801aaa8
 800a67c:	0801a948 	.word	0x0801a948
 800a680:	0800be25 	.word	0x0800be25

0800a684 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <netconn_accept+0x24>
 800a694:	4b3d      	ldr	r3, [pc, #244]	@ (800a78c <netconn_accept+0x108>)
 800a696:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a69a:	493d      	ldr	r1, [pc, #244]	@ (800a790 <netconn_accept+0x10c>)
 800a69c:	483d      	ldr	r0, [pc, #244]	@ (800a794 <netconn_accept+0x110>)
 800a69e:	f00d fe41 	bl	8018324 <iprintf>
 800a6a2:	f06f 030f 	mvn.w	r3, #15
 800a6a6:	e06c      	b.n	800a782 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <netconn_accept+0x44>
 800a6b4:	4b35      	ldr	r3, [pc, #212]	@ (800a78c <netconn_accept+0x108>)
 800a6b6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800a6ba:	4937      	ldr	r1, [pc, #220]	@ (800a798 <netconn_accept+0x114>)
 800a6bc:	4835      	ldr	r0, [pc, #212]	@ (800a794 <netconn_accept+0x110>)
 800a6be:	f00d fe31 	bl	8018324 <iprintf>
 800a6c2:	f06f 030f 	mvn.w	r3, #15
 800a6c6:	e05c      	b.n	800a782 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fb6c 	bl	800ada6 <netconn_err>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a6d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a6da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6de:	e050      	b.n	800a782 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3314      	adds	r3, #20
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f00c ffbd 	bl	8017664 <sys_mbox_valid>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <netconn_accept+0x78>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7f1b      	ldrb	r3, [r3, #28]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a6fc:	f06f 030e 	mvn.w	r3, #14
 800a700:	e03f      	b.n	800a782 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7f1b      	ldrb	r3, [r3, #28]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00e      	beq.n	800a72c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3314      	adds	r3, #20
 800a712:	f107 020c 	add.w	r2, r7, #12
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f00c ff8c 	bl	8017636 <sys_arch_mbox_tryfetch>
 800a71e:	4603      	mov	r3, r0
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d10a      	bne.n	800a73c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a726:	f06f 0306 	mvn.w	r3, #6
 800a72a:	e02a      	b.n	800a782 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3314      	adds	r3, #20
 800a730:	f107 010c 	add.w	r1, r7, #12
 800a734:	2200      	movs	r2, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f00c ff4c 	bl	80175d4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <netconn_accept+0xcc>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a748:	2200      	movs	r2, #0
 800a74a:	2101      	movs	r1, #1
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f107 0213 	add.w	r2, r7, #19
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fb75 	bl	800ae48 <lwip_netconn_is_err_msg>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a768:	e00b      	b.n	800a782 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a770:	f06f 030e 	mvn.w	r3, #14
 800a774:	e005      	b.n	800a782 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a780:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	0801a8f0 	.word	0x0801a8f0
 800a790:	0801aac8 	.word	0x0801aac8
 800a794:	0801a948 	.word	0x0801a948
 800a798:	0801aae8 	.word	0x0801aae8

0800a79c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d109      	bne.n	800a7c8 <netconn_recv_data+0x2c>
 800a7b4:	4b58      	ldr	r3, [pc, #352]	@ (800a918 <netconn_recv_data+0x17c>)
 800a7b6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800a7ba:	4958      	ldr	r1, [pc, #352]	@ (800a91c <netconn_recv_data+0x180>)
 800a7bc:	4858      	ldr	r0, [pc, #352]	@ (800a920 <netconn_recv_data+0x184>)
 800a7be:	f00d fdb1 	bl	8018324 <iprintf>
 800a7c2:	f06f 030f 	mvn.w	r3, #15
 800a7c6:	e0a2      	b.n	800a90e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d109      	bne.n	800a7e8 <netconn_recv_data+0x4c>
 800a7d4:	4b50      	ldr	r3, [pc, #320]	@ (800a918 <netconn_recv_data+0x17c>)
 800a7d6:	f240 224a 	movw	r2, #586	@ 0x24a
 800a7da:	4952      	ldr	r1, [pc, #328]	@ (800a924 <netconn_recv_data+0x188>)
 800a7dc:	4850      	ldr	r0, [pc, #320]	@ (800a920 <netconn_recv_data+0x184>)
 800a7de:	f00d fda1 	bl	8018324 <iprintf>
 800a7e2:	f06f 030f 	mvn.w	r3, #15
 800a7e6:	e092      	b.n	800a90e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3310      	adds	r3, #16
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f00c ff39 	bl	8017664 <sys_mbox_valid>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10e      	bne.n	800a816 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fad4 	bl	800ada6 <netconn_err>
 800a7fe:	4603      	mov	r3, r0
 800a800:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a802:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a80a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a80e:	e07e      	b.n	800a90e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a810:	f06f 030a 	mvn.w	r3, #10
 800a814:	e07b      	b.n	800a90e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	7f1b      	ldrb	r3, [r3, #28]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10f      	bne.n	800a842 <netconn_recv_data+0xa6>
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	7f1b      	ldrb	r3, [r3, #28]
 800a830:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a834:	2b00      	cmp	r3, #0
 800a836:	d104      	bne.n	800a842 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d023      	beq.n	800a88a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3310      	adds	r3, #16
 800a846:	f107 0218 	add.w	r2, r7, #24
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f00c fef2 	bl	8017636 <sys_arch_mbox_tryfetch>
 800a852:	4603      	mov	r3, r0
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d11f      	bne.n	800a89a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 faa3 	bl	800ada6 <netconn_err>
 800a860:	4603      	mov	r3, r0
 800a862:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a864:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a86c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a870:	e04d      	b.n	800a90e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	7f1b      	ldrb	r3, [r3, #28]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a87e:	f06f 030a 	mvn.w	r3, #10
 800a882:	e044      	b.n	800a90e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a884:	f06f 0306 	mvn.w	r3, #6
 800a888:	e041      	b.n	800a90e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3310      	adds	r3, #16
 800a88e:	f107 0118 	add.w	r1, r7, #24
 800a892:	2200      	movs	r2, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f00c fe9d 	bl	80175d4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d117      	bne.n	800a8d6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	f107 0217 	add.w	r2, r7, #23
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 faca 	bl	800ae48 <lwip_netconn_is_err_msg>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8be:	f113 0f0f 	cmn.w	r3, #15
 800a8c2:	d101      	bne.n	800a8c8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e022      	b.n	800a90e <netconn_recv_data+0x172>
      }
      return err;
 800a8c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8cc:	e01f      	b.n	800a90e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	891b      	ldrh	r3, [r3, #8]
 800a8d2:	83fb      	strh	r3, [r7, #30]
 800a8d4:	e00d      	b.n	800a8f2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <netconn_recv_data+0x14e>
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <netconn_recv_data+0x17c>)
 800a8de:	f240 2291 	movw	r2, #657	@ 0x291
 800a8e2:	4911      	ldr	r1, [pc, #68]	@ (800a928 <netconn_recv_data+0x18c>)
 800a8e4:	480e      	ldr	r0, [pc, #56]	@ (800a920 <netconn_recv_data+0x184>)
 800a8e6:	f00d fd1d 	bl	8018324 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	891b      	ldrh	r3, [r3, #8]
 800a8f0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <netconn_recv_data+0x16a>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fe:	8bfa      	ldrh	r2, [r7, #30]
 800a900:	2101      	movs	r1, #1
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	0801a8f0 	.word	0x0801a8f0
 800a91c:	0801ab08 	.word	0x0801ab08
 800a920:	0801a948 	.word	0x0801a948
 800a924:	0801ab28 	.word	0x0801ab28
 800a928:	0801ab44 	.word	0x0801ab44

0800a92c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d005      	beq.n	800a94a <netconn_tcp_recvd_msg+0x1e>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a946:	2b10      	cmp	r3, #16
 800a948:	d009      	beq.n	800a95e <netconn_tcp_recvd_msg+0x32>
 800a94a:	4b0c      	ldr	r3, [pc, #48]	@ (800a97c <netconn_tcp_recvd_msg+0x50>)
 800a94c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800a950:	490b      	ldr	r1, [pc, #44]	@ (800a980 <netconn_tcp_recvd_msg+0x54>)
 800a952:	480c      	ldr	r0, [pc, #48]	@ (800a984 <netconn_tcp_recvd_msg+0x58>)
 800a954:	f00d fce6 	bl	8018324 <iprintf>
 800a958:	f06f 030f 	mvn.w	r3, #15
 800a95c:	e00a      	b.n	800a974 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	4806      	ldr	r0, [pc, #24]	@ (800a988 <netconn_tcp_recvd_msg+0x5c>)
 800a96e:	f7ff fd4d 	bl	800a40c <netconn_apimsg>
 800a972:	4603      	mov	r3, r0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	0801a8f0 	.word	0x0801a8f0
 800a980:	0801ab50 	.word	0x0801ab50
 800a984:	0801a948 	.word	0x0801a948
 800a988:	0800bf55 	.word	0x0800bf55

0800a98c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b090      	sub	sp, #64	@ 0x40
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3310      	adds	r3, #16
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f00c fe60 	bl	8017664 <sys_mbox_valid>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a9aa:	f06f 030a 	mvn.w	r3, #10
 800a9ae:	e06d      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	7f1b      	ldrb	r3, [r3, #28]
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da07      	bge.n	800a9ca <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	7f1b      	ldrb	r3, [r3, #28]
 800a9be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a9c8:	e039      	b.n	800aa3e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7ff fee3 	bl	800a79c <netconn_recv_data>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800a9dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a9e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a9e8:	e050      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10e      	bne.n	800aa18 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <netconn_recv_data_tcp+0x7a>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	891b      	ldrh	r3, [r3, #8]
 800aa04:	e000      	b.n	800aa08 <netconn_recv_data_tcp+0x7c>
 800aa06:	2301      	movs	r3, #1
 800aa08:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800aa0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa0c:	f107 0214 	add.w	r2, r7, #20
 800aa10:	4619      	mov	r1, r3
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff ff8a 	bl	800a92c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d134      	bne.n	800aa88 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d009      	beq.n	800aa3c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	7f1b      	ldrb	r3, [r3, #28]
 800aa2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800aa36:	f06f 0306 	mvn.w	r3, #6
 800aa3a:	e027      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800aa3c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <netconn_recv_data_tcp+0xc6>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10f      	bne.n	800aa7a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 f9a3 	bl	800ada6 <netconn_err>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800aa66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <netconn_recv_data_tcp+0xe8>
          return err;
 800aa6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aa72:	e00b      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800aa74:	f06f 030d 	mvn.w	r3, #13
 800aa78:	e008      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f955 	bl	800ad2c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800aa82:	f06f 030e 	mvn.w	r3, #14
 800aa86:	e001      	b.n	800aa8c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800aa88:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3740      	adds	r7, #64	@ 0x40
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d109      	bne.n	800aabc <netconn_recv+0x28>
 800aaa8:	4b32      	ldr	r3, [pc, #200]	@ (800ab74 <netconn_recv+0xe0>)
 800aaaa:	f240 3263 	movw	r2, #867	@ 0x363
 800aaae:	4932      	ldr	r1, [pc, #200]	@ (800ab78 <netconn_recv+0xe4>)
 800aab0:	4832      	ldr	r0, [pc, #200]	@ (800ab7c <netconn_recv+0xe8>)
 800aab2:	f00d fc37 	bl	8018324 <iprintf>
 800aab6:	f06f 030f 	mvn.w	r3, #15
 800aaba:	e056      	b.n	800ab6a <netconn_recv+0xd6>
  *new_buf = NULL;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d109      	bne.n	800aadc <netconn_recv+0x48>
 800aac8:	4b2a      	ldr	r3, [pc, #168]	@ (800ab74 <netconn_recv+0xe0>)
 800aaca:	f240 3265 	movw	r2, #869	@ 0x365
 800aace:	492c      	ldr	r1, [pc, #176]	@ (800ab80 <netconn_recv+0xec>)
 800aad0:	482a      	ldr	r0, [pc, #168]	@ (800ab7c <netconn_recv+0xe8>)
 800aad2:	f00d fc27 	bl	8018324 <iprintf>
 800aad6:	f06f 030f 	mvn.w	r3, #15
 800aada:	e046      	b.n	800ab6a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aae4:	2b10      	cmp	r3, #16
 800aae6:	d13a      	bne.n	800ab5e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aaec:	2006      	movs	r0, #6
 800aaee:	f002 fbd9 	bl	800d2a4 <memp_malloc>
 800aaf2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d102      	bne.n	800ab00 <netconn_recv+0x6c>
      return ERR_MEM;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	e034      	b.n	800ab6a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	2200      	movs	r2, #0
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff ff3f 	bl	800a98c <netconn_recv_data_tcp>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ab12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d006      	beq.n	800ab28 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ab1a:	6979      	ldr	r1, [r7, #20]
 800ab1c:	2006      	movs	r0, #6
 800ab1e:	f002 fc13 	bl	800d348 <memp_free>
      return err;
 800ab22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab26:	e020      	b.n	800ab6a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <netconn_recv+0xa8>
 800ab2e:	4b11      	ldr	r3, [pc, #68]	@ (800ab74 <netconn_recv+0xe0>)
 800ab30:	f240 3279 	movw	r2, #889	@ 0x379
 800ab34:	4913      	ldr	r1, [pc, #76]	@ (800ab84 <netconn_recv+0xf0>)
 800ab36:	4811      	ldr	r0, [pc, #68]	@ (800ab7c <netconn_recv+0xe8>)
 800ab38:	f00d fbf4 	bl	8018324 <iprintf>

    buf->p = p;
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2200      	movs	r2, #0
 800ab52:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e005      	b.n	800ab6a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff fe1a 	bl	800a79c <netconn_recv_data>
 800ab68:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	0801a8f0 	.word	0x0801a8f0
 800ab78:	0801ab08 	.word	0x0801ab08
 800ab7c:	0801a948 	.word	0x0801a948
 800ab80:	0801ab28 	.word	0x0801ab28
 800ab84:	0801aba0 	.word	0x0801aba0

0800ab88 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af02      	add	r7, sp, #8
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	f107 0110 	add.w	r1, r7, #16
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4613      	mov	r3, r2
 800abaa:	2201      	movs	r2, #1
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f805 	bl	800abbc <netconn_write_vectors_partly>
 800abb2:	4603      	mov	r3, r0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b092      	sub	sp, #72	@ 0x48
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4611      	mov	r1, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	80fb      	strh	r3, [r7, #6]
 800abce:	4613      	mov	r3, r2
 800abd0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d109      	bne.n	800abec <netconn_write_vectors_partly+0x30>
 800abd8:	4b4e      	ldr	r3, [pc, #312]	@ (800ad14 <netconn_write_vectors_partly+0x158>)
 800abda:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800abde:	494e      	ldr	r1, [pc, #312]	@ (800ad18 <netconn_write_vectors_partly+0x15c>)
 800abe0:	484e      	ldr	r0, [pc, #312]	@ (800ad1c <netconn_write_vectors_partly+0x160>)
 800abe2:	f00d fb9f 	bl	8018324 <iprintf>
 800abe6:	f06f 030f 	mvn.w	r3, #15
 800abea:	e08e      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	d009      	beq.n	800ac0c <netconn_write_vectors_partly+0x50>
 800abf8:	4b46      	ldr	r3, [pc, #280]	@ (800ad14 <netconn_write_vectors_partly+0x158>)
 800abfa:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800abfe:	4948      	ldr	r1, [pc, #288]	@ (800ad20 <netconn_write_vectors_partly+0x164>)
 800ac00:	4846      	ldr	r0, [pc, #280]	@ (800ad1c <netconn_write_vectors_partly+0x160>)
 800ac02:	f00d fb8f 	bl	8018324 <iprintf>
 800ac06:	f06f 0305 	mvn.w	r3, #5
 800ac0a:	e07e      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	7f1b      	ldrb	r3, [r3, #28]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <netconn_write_vectors_partly+0x66>
 800ac18:	797b      	ldrb	r3, [r7, #5]
 800ac1a:	f003 0304 	and.w	r3, r3, #4
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <netconn_write_vectors_partly+0x6a>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <netconn_write_vectors_partly+0x6c>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ac2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <netconn_write_vectors_partly+0x84>
 800ac34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ac3a:	f06f 0305 	mvn.w	r3, #5
 800ac3e:	e064      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ac44:	2300      	movs	r3, #0
 800ac46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac48:	e015      	b.n	800ac76 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	4413      	add	r3, r2
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac56:	4413      	add	r3, r2
 800ac58:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800ac5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4413      	add	r3, r2
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d202      	bcs.n	800ac70 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ac6a:	f06f 0305 	mvn.w	r3, #5
 800ac6e:	e04c      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ac70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac72:	3301      	adds	r3, #1
 800ac74:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac76:	88fb      	ldrh	r3, [r7, #6]
 800ac78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	dbe5      	blt.n	800ac4a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ac7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e040      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ac88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	da0a      	bge.n	800aca4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ac8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ac94:	f06f 0305 	mvn.w	r3, #5
 800ac98:	e037      	b.n	800ad0a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ac9a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ac9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800acb4:	797b      	ldrb	r3, [r7, #5]
 800acb6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800acba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	4619      	mov	r1, r3
 800acc8:	4816      	ldr	r0, [pc, #88]	@ (800ad24 <netconn_write_vectors_partly+0x168>)
 800acca:	f7ff fb9f 	bl	800a40c <netconn_apimsg>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800acd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d114      	bne.n	800ad06 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800acdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ace2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ace6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ace8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d006      	beq.n	800ad06 <netconn_write_vectors_partly+0x14a>
 800acf8:	4b06      	ldr	r3, [pc, #24]	@ (800ad14 <netconn_write_vectors_partly+0x158>)
 800acfa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800acfe:	490a      	ldr	r1, [pc, #40]	@ (800ad28 <netconn_write_vectors_partly+0x16c>)
 800ad00:	4806      	ldr	r0, [pc, #24]	@ (800ad1c <netconn_write_vectors_partly+0x160>)
 800ad02:	f00d fb0f 	bl	8018324 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ad06:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3748      	adds	r7, #72	@ 0x48
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	0801a8f0 	.word	0x0801a8f0
 800ad18:	0801abc8 	.word	0x0801abc8
 800ad1c:	0801a948 	.word	0x0801a948
 800ad20:	0801abe4 	.word	0x0801abe4
 800ad24:	0800c359 	.word	0x0800c359
 800ad28:	0801ac08 	.word	0x0801ac08

0800ad2c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08c      	sub	sp, #48	@ 0x30
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <netconn_close_shutdown+0x26>
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ad7c <netconn_close_shutdown+0x50>)
 800ad40:	f240 4247 	movw	r2, #1095	@ 0x447
 800ad44:	490e      	ldr	r1, [pc, #56]	@ (800ad80 <netconn_close_shutdown+0x54>)
 800ad46:	480f      	ldr	r0, [pc, #60]	@ (800ad84 <netconn_close_shutdown+0x58>)
 800ad48:	f00d faec 	bl	8018324 <iprintf>
 800ad4c:	f06f 030f 	mvn.w	r3, #15
 800ad50:	e010      	b.n	800ad74 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ad5a:	2329      	movs	r3, #41	@ 0x29
 800ad5c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ad5e:	f107 030c 	add.w	r3, r7, #12
 800ad62:	4619      	mov	r1, r3
 800ad64:	4808      	ldr	r0, [pc, #32]	@ (800ad88 <netconn_close_shutdown+0x5c>)
 800ad66:	f7ff fb51 	bl	800a40c <netconn_apimsg>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ad70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3730      	adds	r7, #48	@ 0x30
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	0801a8f0 	.word	0x0801a8f0
 800ad80:	0801ac2c 	.word	0x0801ac2c
 800ad84:	0801a948 	.word	0x0801a948
 800ad88:	0800c471 	.word	0x0800c471

0800ad8c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ad94:	2103      	movs	r1, #3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ffc8 	bl	800ad2c <netconn_close_shutdown>
 800ad9c:	4603      	mov	r3, r0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <netconn_err+0x12>
    return ERR_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	e00d      	b.n	800add4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800adb8:	f00c fd5e 	bl	8017878 <sys_arch_protect>
 800adbc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7a1b      	ldrb	r3, [r3, #8]
 800adc2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f00c fd62 	bl	8017894 <sys_arch_unprotect>
  return err;
 800add0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ade6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adea:	f113 0f0d 	cmn.w	r3, #13
 800adee:	d009      	beq.n	800ae04 <lwip_netconn_err_to_msg+0x28>
 800adf0:	f113 0f0d 	cmn.w	r3, #13
 800adf4:	dc0c      	bgt.n	800ae10 <lwip_netconn_err_to_msg+0x34>
 800adf6:	f113 0f0f 	cmn.w	r3, #15
 800adfa:	d007      	beq.n	800ae0c <lwip_netconn_err_to_msg+0x30>
 800adfc:	f113 0f0e 	cmn.w	r3, #14
 800ae00:	d002      	beq.n	800ae08 <lwip_netconn_err_to_msg+0x2c>
 800ae02:	e005      	b.n	800ae10 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ae04:	4b0a      	ldr	r3, [pc, #40]	@ (800ae30 <lwip_netconn_err_to_msg+0x54>)
 800ae06:	e00e      	b.n	800ae26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ae08:	4b0a      	ldr	r3, [pc, #40]	@ (800ae34 <lwip_netconn_err_to_msg+0x58>)
 800ae0a:	e00c      	b.n	800ae26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <lwip_netconn_err_to_msg+0x5c>)
 800ae0e:	e00a      	b.n	800ae26 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ae10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <lwip_netconn_err_to_msg+0x48>
 800ae18:	4b08      	ldr	r3, [pc, #32]	@ (800ae3c <lwip_netconn_err_to_msg+0x60>)
 800ae1a:	227d      	movs	r2, #125	@ 0x7d
 800ae1c:	4908      	ldr	r1, [pc, #32]	@ (800ae40 <lwip_netconn_err_to_msg+0x64>)
 800ae1e:	4809      	ldr	r0, [pc, #36]	@ (800ae44 <lwip_netconn_err_to_msg+0x68>)
 800ae20:	f00d fa80 	bl	8018324 <iprintf>
      return NULL;
 800ae24:	2300      	movs	r3, #0
  }
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	0801dc64 	.word	0x0801dc64
 800ae34:	0801dc65 	.word	0x0801dc65
 800ae38:	0801dc66 	.word	0x0801dc66
 800ae3c:	0801ac48 	.word	0x0801ac48
 800ae40:	0801ac7c 	.word	0x0801ac7c
 800ae44:	0801ac8c 	.word	0x0801ac8c

0800ae48 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d105      	bne.n	800ae64 <lwip_netconn_is_err_msg+0x1c>
 800ae58:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <lwip_netconn_is_err_msg+0x5c>)
 800ae5a:	2285      	movs	r2, #133	@ 0x85
 800ae5c:	4912      	ldr	r1, [pc, #72]	@ (800aea8 <lwip_netconn_is_err_msg+0x60>)
 800ae5e:	4813      	ldr	r0, [pc, #76]	@ (800aeac <lwip_netconn_is_err_msg+0x64>)
 800ae60:	f00d fa60 	bl	8018324 <iprintf>

  if (msg == &netconn_aborted) {
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a12      	ldr	r2, [pc, #72]	@ (800aeb0 <lwip_netconn_is_err_msg+0x68>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d104      	bne.n	800ae76 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	22f3      	movs	r2, #243	@ 0xf3
 800ae70:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e012      	b.n	800ae9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a0e      	ldr	r2, [pc, #56]	@ (800aeb4 <lwip_netconn_is_err_msg+0x6c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d104      	bne.n	800ae88 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	22f2      	movs	r2, #242	@ 0xf2
 800ae82:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e009      	b.n	800ae9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a0b      	ldr	r2, [pc, #44]	@ (800aeb8 <lwip_netconn_is_err_msg+0x70>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d104      	bne.n	800ae9a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	22f1      	movs	r2, #241	@ 0xf1
 800ae94:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	0801ac48 	.word	0x0801ac48
 800aea8:	0801acb4 	.word	0x0801acb4
 800aeac:	0801ac8c 	.word	0x0801ac8c
 800aeb0:	0801dc64 	.word	0x0801dc64
 800aeb4:	0801dc65 	.word	0x0801dc65
 800aeb8:	0801dc66 	.word	0x0801dc66

0800aebc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d105      	bne.n	800aedc <recv_udp+0x20>
 800aed0:	4b34      	ldr	r3, [pc, #208]	@ (800afa4 <recv_udp+0xe8>)
 800aed2:	22e5      	movs	r2, #229	@ 0xe5
 800aed4:	4934      	ldr	r1, [pc, #208]	@ (800afa8 <recv_udp+0xec>)
 800aed6:	4835      	ldr	r0, [pc, #212]	@ (800afac <recv_udp+0xf0>)
 800aed8:	f00d fa24 	bl	8018324 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <recv_udp+0x32>
 800aee2:	4b30      	ldr	r3, [pc, #192]	@ (800afa4 <recv_udp+0xe8>)
 800aee4:	22e6      	movs	r2, #230	@ 0xe6
 800aee6:	4932      	ldr	r1, [pc, #200]	@ (800afb0 <recv_udp+0xf4>)
 800aee8:	4830      	ldr	r0, [pc, #192]	@ (800afac <recv_udp+0xf0>)
 800aeea:	f00d fa1b 	bl	8018324 <iprintf>
  conn = (struct netconn *)arg;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <recv_udp+0x44>
    pbuf_free(p);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f003 f8c9 	bl	800e090 <pbuf_free>
    return;
 800aefe:	e04d      	b.n	800af9c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	429a      	cmp	r2, r3
 800af08:	d005      	beq.n	800af16 <recv_udp+0x5a>
 800af0a:	4b26      	ldr	r3, [pc, #152]	@ (800afa4 <recv_udp+0xe8>)
 800af0c:	22ee      	movs	r2, #238	@ 0xee
 800af0e:	4929      	ldr	r1, [pc, #164]	@ (800afb4 <recv_udp+0xf8>)
 800af10:	4826      	ldr	r0, [pc, #152]	@ (800afac <recv_udp+0xf0>)
 800af12:	f00d fa07 	bl	8018324 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3310      	adds	r3, #16
 800af1a:	4618      	mov	r0, r3
 800af1c:	f00c fba2 	bl	8017664 <sys_mbox_valid>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d103      	bne.n	800af2e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f003 f8b2 	bl	800e090 <pbuf_free>
    return;
 800af2c:	e036      	b.n	800af9c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800af2e:	2006      	movs	r0, #6
 800af30:	f002 f9b8 	bl	800d2a4 <memp_malloc>
 800af34:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <recv_udp+0x88>
    pbuf_free(p);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f003 f8a7 	bl	800e090 <pbuf_free>
    return;
 800af42:	e02b      	b.n	800af9c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <recv_udp+0xa0>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	e000      	b.n	800af5e <recv_udp+0xa2>
 800af5c:	2300      	movs	r3, #0
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800af66:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	891b      	ldrh	r3, [r3, #8]
 800af6c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	3310      	adds	r3, #16
 800af72:	69b9      	ldr	r1, [r7, #24]
 800af74:	4618      	mov	r0, r3
 800af76:	f00c fb13 	bl	80175a0 <sys_mbox_trypost>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <recv_udp+0xcc>
    netbuf_delete(buf);
 800af80:	69b8      	ldr	r0, [r7, #24]
 800af82:	f001 fb01 	bl	800c588 <netbuf_delete>
    return;
 800af86:	e009      	b.n	800af9c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <recv_udp+0xe0>
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af94:	8afa      	ldrh	r2, [r7, #22]
 800af96:	2100      	movs	r1, #0
 800af98:	69f8      	ldr	r0, [r7, #28]
 800af9a:	4798      	blx	r3
  }
}
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	0801ac48 	.word	0x0801ac48
 800afa8:	0801acc0 	.word	0x0801acc0
 800afac:	0801ac8c 	.word	0x0801ac8c
 800afb0:	0801ace4 	.word	0x0801ace4
 800afb4:	0801ad04 	.word	0x0801ad04

0800afb8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d106      	bne.n	800afda <recv_tcp+0x22>
 800afcc:	4b36      	ldr	r3, [pc, #216]	@ (800b0a8 <recv_tcp+0xf0>)
 800afce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800afd2:	4936      	ldr	r1, [pc, #216]	@ (800b0ac <recv_tcp+0xf4>)
 800afd4:	4836      	ldr	r0, [pc, #216]	@ (800b0b0 <recv_tcp+0xf8>)
 800afd6:	f00d f9a5 	bl	8018324 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <recv_tcp+0x36>
 800afe0:	4b31      	ldr	r3, [pc, #196]	@ (800b0a8 <recv_tcp+0xf0>)
 800afe2:	f240 122d 	movw	r2, #301	@ 0x12d
 800afe6:	4933      	ldr	r1, [pc, #204]	@ (800b0b4 <recv_tcp+0xfc>)
 800afe8:	4831      	ldr	r0, [pc, #196]	@ (800b0b0 <recv_tcp+0xf8>)
 800afea:	f00d f99b 	bl	8018324 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800afee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d006      	beq.n	800b004 <recv_tcp+0x4c>
 800aff6:	4b2c      	ldr	r3, [pc, #176]	@ (800b0a8 <recv_tcp+0xf0>)
 800aff8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800affc:	492e      	ldr	r1, [pc, #184]	@ (800b0b8 <recv_tcp+0x100>)
 800affe:	482c      	ldr	r0, [pc, #176]	@ (800b0b0 <recv_tcp+0xf8>)
 800b000:	f00d f990 	bl	8018324 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <recv_tcp+0x5c>
    return ERR_VAL;
 800b00e:	f06f 0305 	mvn.w	r3, #5
 800b012:	e045      	b.n	800b0a0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d006      	beq.n	800b02c <recv_tcp+0x74>
 800b01e:	4b22      	ldr	r3, [pc, #136]	@ (800b0a8 <recv_tcp+0xf0>)
 800b020:	f240 1235 	movw	r2, #309	@ 0x135
 800b024:	4925      	ldr	r1, [pc, #148]	@ (800b0bc <recv_tcp+0x104>)
 800b026:	4822      	ldr	r0, [pc, #136]	@ (800b0b0 <recv_tcp+0xf8>)
 800b028:	f00d f97c 	bl	8018324 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	3310      	adds	r3, #16
 800b030:	4618      	mov	r0, r3
 800b032:	f00c fb17 	bl	8017664 <sys_mbox_valid>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10d      	bne.n	800b058 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d008      	beq.n	800b054 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	891b      	ldrh	r3, [r3, #8]
 800b046:	4619      	mov	r1, r3
 800b048:	68b8      	ldr	r0, [r7, #8]
 800b04a:	f003 ffd9 	bl	800f000 <tcp_recved>
      pbuf_free(p);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f003 f81e 	bl	800e090 <pbuf_free>
    }
    return ERR_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	e023      	b.n	800b0a0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d005      	beq.n	800b06a <recv_tcp+0xb2>
    msg = p;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	891b      	ldrh	r3, [r3, #8]
 800b066:	83fb      	strh	r3, [r7, #30]
 800b068:	e003      	b.n	800b072 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b06a:	4b15      	ldr	r3, [pc, #84]	@ (800b0c0 <recv_tcp+0x108>)
 800b06c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	3310      	adds	r3, #16
 800b076:	69b9      	ldr	r1, [r7, #24]
 800b078:	4618      	mov	r0, r3
 800b07a:	f00c fa91 	bl	80175a0 <sys_mbox_trypost>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	e00a      	b.n	800b0a0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <recv_tcp+0xe6>
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b096:	8bfa      	ldrh	r2, [r7, #30]
 800b098:	2100      	movs	r1, #0
 800b09a:	6978      	ldr	r0, [r7, #20]
 800b09c:	4798      	blx	r3
  }

  return ERR_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3720      	adds	r7, #32
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	0801ac48 	.word	0x0801ac48
 800b0ac:	0801ad24 	.word	0x0801ad24
 800b0b0:	0801ac8c 	.word	0x0801ac8c
 800b0b4:	0801ad48 	.word	0x0801ad48
 800b0b8:	0801ad68 	.word	0x0801ad68
 800b0bc:	0801ad80 	.word	0x0801ad80
 800b0c0:	0801dc66 	.word	0x0801dc66

0800b0c4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <poll_tcp+0x22>
 800b0d8:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <poll_tcp+0xbc>)
 800b0da:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800b0de:	4929      	ldr	r1, [pc, #164]	@ (800b184 <poll_tcp+0xc0>)
 800b0e0:	4829      	ldr	r0, [pc, #164]	@ (800b188 <poll_tcp+0xc4>)
 800b0e2:	f00d f91f 	bl	8018324 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d104      	bne.n	800b0f8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 ff65 	bl	800bfc0 <lwip_netconn_do_writemore>
 800b0f6:	e016      	b.n	800b126 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d112      	bne.n	800b126 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00a      	beq.n	800b11e <poll_tcp+0x5a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	7a5b      	ldrb	r3, [r3, #9]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	7a5a      	ldrb	r2, [r3, #9]
 800b118:	3a01      	subs	r2, #1
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b11e:	2101      	movs	r1, #1
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fbf7 	bl	800b914 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	7f1b      	ldrb	r3, [r3, #28]
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d021      	beq.n	800b176 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01d      	beq.n	800b176 <poll_tcp+0xb2>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b142:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b146:	d316      	bcc.n	800b176 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b150:	2b04      	cmp	r3, #4
 800b152:	d810      	bhi.n	800b176 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	7f1b      	ldrb	r3, [r3, #28]
 800b158:	f023 0310 	bic.w	r3, r3, #16
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <poll_tcp+0xb2>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16e:	2200      	movs	r2, #0
 800b170:	2102      	movs	r1, #2
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0801ac48 	.word	0x0801ac48
 800b184:	0801ada0 	.word	0x0801ada0
 800b188:	0801ac8c 	.word	0x0801ac8c

0800b18c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <sent_tcp+0x26>
 800b1a4:	4b20      	ldr	r3, [pc, #128]	@ (800b228 <sent_tcp+0x9c>)
 800b1a6:	f240 1293 	movw	r2, #403	@ 0x193
 800b1aa:	4920      	ldr	r1, [pc, #128]	@ (800b22c <sent_tcp+0xa0>)
 800b1ac:	4820      	ldr	r0, [pc, #128]	@ (800b230 <sent_tcp+0xa4>)
 800b1ae:	f00d f8b9 	bl	8018324 <iprintf>

  if (conn) {
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d032      	beq.n	800b21e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d104      	bne.n	800b1ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	6978      	ldr	r0, [r7, #20]
 800b1c4:	f000 fefc 	bl	800bfc0 <lwip_netconn_do_writemore>
 800b1c8:	e007      	b.n	800b1da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d103      	bne.n	800b1da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	6978      	ldr	r0, [r7, #20]
 800b1d6:	f000 fb9d 	bl	800b914 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01d      	beq.n	800b21e <sent_tcp+0x92>
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b1ea:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b1ee:	d316      	bcc.n	800b21e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d810      	bhi.n	800b21e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	7f1b      	ldrb	r3, [r3, #28]
 800b200:	f023 0310 	bic.w	r3, r3, #16
 800b204:	b2da      	uxtb	r2, r3
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d005      	beq.n	800b21e <sent_tcp+0x92>
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b216:	88fa      	ldrh	r2, [r7, #6]
 800b218:	2102      	movs	r1, #2
 800b21a:	6978      	ldr	r0, [r7, #20]
 800b21c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	0801ac48 	.word	0x0801ac48
 800b22c:	0801ada0 	.word	0x0801ada0
 800b230:	0801ac8c 	.word	0x0801ac8c

0800b234 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <err_tcp+0x24>
 800b24a:	4b5f      	ldr	r3, [pc, #380]	@ (800b3c8 <err_tcp+0x194>)
 800b24c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800b250:	495e      	ldr	r1, [pc, #376]	@ (800b3cc <err_tcp+0x198>)
 800b252:	485f      	ldr	r0, [pc, #380]	@ (800b3d0 <err_tcp+0x19c>)
 800b254:	f00d f866 	bl	8018324 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b258:	f00c fb0e 	bl	8017878 <sys_arch_protect>
 800b25c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2200      	movs	r2, #0
 800b262:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	7f1b      	ldrb	r3, [r3, #28]
 800b26e:	f043 0301 	orr.w	r3, r3, #1
 800b272:	b2da      	uxtb	r2, r3
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	785b      	ldrb	r3, [r3, #1]
 800b27c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2200      	movs	r2, #0
 800b282:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b284:	69b8      	ldr	r0, [r7, #24]
 800b286:	f00c fb05 	bl	8017894 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <err_tcp+0x6a>
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b296:	2200      	movs	r2, #0
 800b298:	2104      	movs	r1, #4
 800b29a:	69f8      	ldr	r0, [r7, #28]
 800b29c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <err_tcp+0x7e>
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	69f8      	ldr	r0, [r7, #28]
 800b2b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <err_tcp+0x92>
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2102      	movs	r1, #2
 800b2c2:	69f8      	ldr	r0, [r7, #28]
 800b2c4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b2c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff fd86 	bl	800addc <lwip_netconn_err_to_msg>
 800b2d0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	3310      	adds	r3, #16
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f00c f9c4 	bl	8017664 <sys_mbox_valid>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	3310      	adds	r3, #16
 800b2e6:	6939      	ldr	r1, [r7, #16]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f00c f959 	bl	80175a0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f00c f9b6 	bl	8017664 <sys_mbox_valid>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d005      	beq.n	800b30a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	3314      	adds	r3, #20
 800b302:	6939      	ldr	r1, [r7, #16]
 800b304:	4618      	mov	r0, r3
 800b306:	f00c f94b 	bl	80175a0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d005      	beq.n	800b31c <err_tcp+0xe8>
 800b310:	7dfb      	ldrb	r3, [r7, #23]
 800b312:	2b04      	cmp	r3, #4
 800b314:	d002      	beq.n	800b31c <err_tcp+0xe8>
 800b316:	7dfb      	ldrb	r3, [r7, #23]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d143      	bne.n	800b3a4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	7f1b      	ldrb	r3, [r3, #28]
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	bf14      	ite	ne
 800b328:	2301      	movne	r3, #1
 800b32a:	2300      	moveq	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	7f1b      	ldrb	r3, [r3, #28]
 800b334:	f023 0304 	bic.w	r3, r3, #4
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d13b      	bne.n	800b3bc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d106      	bne.n	800b35a <err_tcp+0x126>
 800b34c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c8 <err_tcp+0x194>)
 800b34e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b352:	4920      	ldr	r1, [pc, #128]	@ (800b3d4 <err_tcp+0x1a0>)
 800b354:	481e      	ldr	r0, [pc, #120]	@ (800b3d0 <err_tcp+0x19c>)
 800b356:	f00c ffe5 	bl	8018324 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d104      	bne.n	800b36a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	6a1b      	ldr	r3, [r3, #32]
 800b364:	2200      	movs	r2, #0
 800b366:	711a      	strb	r2, [r3, #4]
 800b368:	e003      	b.n	800b372 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	330c      	adds	r3, #12
 800b37a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b37c:	68b8      	ldr	r0, [r7, #8]
 800b37e:	f00c f9ff 	bl	8017780 <sys_sem_valid>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d106      	bne.n	800b396 <err_tcp+0x162>
 800b388:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c8 <err_tcp+0x194>)
 800b38a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800b38e:	4912      	ldr	r1, [pc, #72]	@ (800b3d8 <err_tcp+0x1a4>)
 800b390:	480f      	ldr	r0, [pc, #60]	@ (800b3d0 <err_tcp+0x19c>)
 800b392:	f00c ffc7 	bl	8018324 <iprintf>
      conn->current_msg = NULL;
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2200      	movs	r2, #0
 800b39a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f00c f9d5 	bl	801774c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b3a2:	e00b      	b.n	800b3bc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d008      	beq.n	800b3be <err_tcp+0x18a>
 800b3ac:	4b06      	ldr	r3, [pc, #24]	@ (800b3c8 <err_tcp+0x194>)
 800b3ae:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800b3b2:	490a      	ldr	r1, [pc, #40]	@ (800b3dc <err_tcp+0x1a8>)
 800b3b4:	4806      	ldr	r0, [pc, #24]	@ (800b3d0 <err_tcp+0x19c>)
 800b3b6:	f00c ffb5 	bl	8018324 <iprintf>
  }
}
 800b3ba:	e000      	b.n	800b3be <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b3bc:	bf00      	nop
}
 800b3be:	bf00      	nop
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0801ac48 	.word	0x0801ac48
 800b3cc:	0801ada0 	.word	0x0801ada0
 800b3d0:	0801ac8c 	.word	0x0801ac8c
 800b3d4:	0801adb0 	.word	0x0801adb0
 800b3d8:	0801adcc 	.word	0x0801adcc
 800b3dc:	0801ade8 	.word	0x0801ade8

0800b3e0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f004 fccd 	bl	800fd90 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b3f6:	490a      	ldr	r1, [pc, #40]	@ (800b420 <setup_tcp+0x40>)
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f004 fcdb 	bl	800fdb4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b3fe:	4909      	ldr	r1, [pc, #36]	@ (800b424 <setup_tcp+0x44>)
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f004 fcf9 	bl	800fdf8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b406:	2202      	movs	r2, #2
 800b408:	4907      	ldr	r1, [pc, #28]	@ (800b428 <setup_tcp+0x48>)
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f004 fd50 	bl	800feb0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b410:	4906      	ldr	r1, [pc, #24]	@ (800b42c <setup_tcp+0x4c>)
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f004 fd12 	bl	800fe3c <tcp_err>
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	0800afb9 	.word	0x0800afb9
 800b424:	0800b18d 	.word	0x0800b18d
 800b428:	0800b0c5 	.word	0x0800b0c5
 800b42c:	0800b235 	.word	0x0800b235

0800b430 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b089      	sub	sp, #36	@ 0x24
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4613      	mov	r3, r2
 800b43c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d102      	bne.n	800b44e <accept_function+0x1e>
    return ERR_VAL;
 800b448:	f06f 0305 	mvn.w	r3, #5
 800b44c:	e0a1      	b.n	800b592 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	3314      	adds	r3, #20
 800b452:	4618      	mov	r0, r3
 800b454:	f00c f906 	bl	8017664 <sys_mbox_valid>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b45e:	f06f 0305 	mvn.w	r3, #5
 800b462:	e096      	b.n	800b592 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d11b      	bne.n	800b4a2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f103 0414 	add.w	r4, r3, #20
 800b470:	f06f 000c 	mvn.w	r0, #12
 800b474:	f7ff fcb2 	bl	800addc <lwip_netconn_err_to_msg>
 800b478:	4603      	mov	r3, r0
 800b47a:	4619      	mov	r1, r3
 800b47c:	4620      	mov	r0, r4
 800b47e:	f00c f88f 	bl	80175a0 <sys_mbox_trypost>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d109      	bne.n	800b49c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <accept_function+0x6c>
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	69f8      	ldr	r0, [r7, #28]
 800b49a:	4798      	blx	r3
    }
    return ERR_VAL;
 800b49c:	f06f 0305 	mvn.w	r3, #5
 800b4a0:	e077      	b.n	800b592 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d006      	beq.n	800b4b8 <accept_function+0x88>
 800b4aa:	4b3c      	ldr	r3, [pc, #240]	@ (800b59c <accept_function+0x16c>)
 800b4ac:	f240 222a 	movw	r2, #554	@ 0x22a
 800b4b0:	493b      	ldr	r1, [pc, #236]	@ (800b5a0 <accept_function+0x170>)
 800b4b2:	483c      	ldr	r0, [pc, #240]	@ (800b5a4 <accept_function+0x174>)
 800b4b4:	f00c ff36 	bl	8018324 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f000 f8f0 	bl	800b6a8 <netconn_alloc>
 800b4c8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d11b      	bne.n	800b508 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	f103 0414 	add.w	r4, r3, #20
 800b4d6:	f06f 000c 	mvn.w	r0, #12
 800b4da:	f7ff fc7f 	bl	800addc <lwip_netconn_err_to_msg>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f00c f85c 	bl	80175a0 <sys_mbox_trypost>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d109      	bne.n	800b502 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d005      	beq.n	800b502 <accept_function+0xd2>
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	69f8      	ldr	r0, [r7, #28]
 800b500:	4798      	blx	r3
    }
    return ERR_MEM;
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	e044      	b.n	800b592 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b50e:	69b8      	ldr	r0, [r7, #24]
 800b510:	f7ff ff66 	bl	800b3e0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	3314      	adds	r3, #20
 800b518:	69b9      	ldr	r1, [r7, #24]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f00c f840 	bl	80175a0 <sys_mbox_trypost>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02a      	beq.n	800b57c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b52c:	2100      	movs	r1, #0
 800b52e:	6978      	ldr	r0, [r7, #20]
 800b530:	f004 fc2e 	bl	800fd90 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b534:	2100      	movs	r1, #0
 800b536:	6978      	ldr	r0, [r7, #20]
 800b538:	f004 fc3c 	bl	800fdb4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b53c:	2100      	movs	r1, #0
 800b53e:	6978      	ldr	r0, [r7, #20]
 800b540:	f004 fc5a 	bl	800fdf8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	6978      	ldr	r0, [r7, #20]
 800b54a:	f004 fcb1 	bl	800feb0 <tcp_poll>
    tcp_err(pcb, NULL);
 800b54e:	2100      	movs	r1, #0
 800b550:	6978      	ldr	r0, [r7, #20]
 800b552:	f004 fc73 	bl	800fe3c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2200      	movs	r2, #0
 800b55a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	3310      	adds	r3, #16
 800b560:	4618      	mov	r0, r3
 800b562:	f00c f80b 	bl	801757c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	3310      	adds	r3, #16
 800b56a:	4618      	mov	r0, r3
 800b56c:	f00c f88b 	bl	8017686 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f000 f907 	bl	800b784 <netconn_free>
    return ERR_MEM;
 800b576:	f04f 33ff 	mov.w	r3, #4294967295
 800b57a:	e00a      	b.n	800b592 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <accept_function+0x160>
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	2200      	movs	r2, #0
 800b58a:	2100      	movs	r1, #0
 800b58c:	69f8      	ldr	r0, [r7, #28]
 800b58e:	4798      	blx	r3
  }

  return ERR_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3724      	adds	r7, #36	@ 0x24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd90      	pop	{r4, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	0801ac48 	.word	0x0801ac48
 800b5a0:	0801ae04 	.word	0x0801ae04
 800b5a4:	0801ac8c 	.word	0x0801ac8c

0800b5a8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b5a8:	b590      	push	{r4, r7, lr}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d006      	beq.n	800b5cc <pcb_new+0x24>
 800b5be:	4b2b      	ldr	r3, [pc, #172]	@ (800b66c <pcb_new+0xc4>)
 800b5c0:	f240 2265 	movw	r2, #613	@ 0x265
 800b5c4:	492a      	ldr	r1, [pc, #168]	@ (800b670 <pcb_new+0xc8>)
 800b5c6:	482b      	ldr	r0, [pc, #172]	@ (800b674 <pcb_new+0xcc>)
 800b5c8:	f00c feac 	bl	8018324 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5d6:	2b10      	cmp	r3, #16
 800b5d8:	d022      	beq.n	800b620 <pcb_new+0x78>
 800b5da:	2b20      	cmp	r3, #32
 800b5dc:	d133      	bne.n	800b646 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681c      	ldr	r4, [r3, #0]
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f009 fcac 	bl	8014f42 <udp_new_ip_type>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d02a      	beq.n	800b64e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b22      	cmp	r3, #34	@ 0x22
 800b600:	d104      	bne.n	800b60c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6858      	ldr	r0, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	4917      	ldr	r1, [pc, #92]	@ (800b678 <pcb_new+0xd0>)
 800b61a:	f009 fc19 	bl	8014e50 <udp_recv>
      }
      break;
 800b61e:	e016      	b.n	800b64e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681c      	ldr	r4, [r3, #0]
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	4618      	mov	r0, r3
 800b628:	f004 fba4 	bl	800fd74 <tcp_new_ip_type>
 800b62c:	4603      	mov	r3, r0
 800b62e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fece 	bl	800b3e0 <setup_tcp>
      }
      break;
 800b644:	e005      	b.n	800b652 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	22fa      	movs	r2, #250	@ 0xfa
 800b64a:	711a      	strb	r2, [r3, #4]
      return;
 800b64c:	e00a      	b.n	800b664 <pcb_new+0xbc>
      break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <pcb_new+0xac>
      break;
 800b652:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	22ff      	movs	r2, #255	@ 0xff
 800b662:	711a      	strb	r2, [r3, #4]
  }
}
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}
 800b66a:	bf00      	nop
 800b66c:	0801ac48 	.word	0x0801ac48
 800b670:	0801ae2c 	.word	0x0801ae2c
 800b674:	0801ac8c 	.word	0x0801ac8c
 800b678:	0800aebd 	.word	0x0800aebd

0800b67c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff ff85 	bl	800b5a8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b6b8:	2007      	movs	r0, #7
 800b6ba:	f001 fdf3 	bl	800d2a4 <memp_malloc>
 800b6be:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <netconn_alloc+0x22>
    return NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e052      	b.n	800b770 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	79fa      	ldrb	r2, [r7, #7]
 800b6d4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6e2:	2b10      	cmp	r3, #16
 800b6e4:	d004      	beq.n	800b6f0 <netconn_alloc+0x48>
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d105      	bne.n	800b6f6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b6ea:	2306      	movs	r3, #6
 800b6ec:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b6ee:	e00a      	b.n	800b706 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b6f0:	2306      	movs	r3, #6
 800b6f2:	617b      	str	r3, [r7, #20]
      break;
 800b6f4:	e007      	b.n	800b706 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b6f6:	4b20      	ldr	r3, [pc, #128]	@ (800b778 <netconn_alloc+0xd0>)
 800b6f8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800b6fc:	491f      	ldr	r1, [pc, #124]	@ (800b77c <netconn_alloc+0xd4>)
 800b6fe:	4820      	ldr	r0, [pc, #128]	@ (800b780 <netconn_alloc+0xd8>)
 800b700:	f00c fe10 	bl	8018324 <iprintf>
      goto free_and_return;
 800b704:	e02f      	b.n	800b766 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	3310      	adds	r3, #16
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f00b ff1b 	bl	8017548 <sys_mbox_new>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d125      	bne.n	800b764 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	330c      	adds	r3, #12
 800b71c:	2100      	movs	r1, #0
 800b71e:	4618      	mov	r0, r3
 800b720:	f00b ffbe 	bl	80176a0 <sys_sem_new>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3310      	adds	r3, #16
 800b72e:	4618      	mov	r0, r3
 800b730:	f00b ff24 	bl	801757c <sys_mbox_free>
    goto free_and_return;
 800b734:	e017      	b.n	800b766 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3314      	adds	r3, #20
 800b73a:	4618      	mov	r0, r3
 800b73c:	f00b ffa3 	bl	8017686 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f04f 32ff 	mov.w	r2, #4294967295
 800b74c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	7cfa      	ldrb	r2, [r7, #19]
 800b75e:	771a      	strb	r2, [r3, #28]
  return conn;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	e005      	b.n	800b770 <netconn_alloc+0xc8>
    goto free_and_return;
 800b764:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b766:	68f9      	ldr	r1, [r7, #12]
 800b768:	2007      	movs	r0, #7
 800b76a:	f001 fded 	bl	800d348 <memp_free>
  return NULL;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	0801ac48 	.word	0x0801ac48
 800b77c:	0801ae4c 	.word	0x0801ae4c
 800b780:	0801ac8c 	.word	0x0801ac8c

0800b784 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d006      	beq.n	800b7a2 <netconn_free+0x1e>
 800b794:	4b1b      	ldr	r3, [pc, #108]	@ (800b804 <netconn_free+0x80>)
 800b796:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b79a:	491b      	ldr	r1, [pc, #108]	@ (800b808 <netconn_free+0x84>)
 800b79c:	481b      	ldr	r0, [pc, #108]	@ (800b80c <netconn_free+0x88>)
 800b79e:	f00c fdc1 	bl	8018324 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3310      	adds	r3, #16
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f00b ff5c 	bl	8017664 <sys_mbox_valid>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d006      	beq.n	800b7c0 <netconn_free+0x3c>
 800b7b2:	4b14      	ldr	r3, [pc, #80]	@ (800b804 <netconn_free+0x80>)
 800b7b4:	f240 3223 	movw	r2, #803	@ 0x323
 800b7b8:	4915      	ldr	r1, [pc, #84]	@ (800b810 <netconn_free+0x8c>)
 800b7ba:	4814      	ldr	r0, [pc, #80]	@ (800b80c <netconn_free+0x88>)
 800b7bc:	f00c fdb2 	bl	8018324 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f00b ff4d 	bl	8017664 <sys_mbox_valid>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <netconn_free+0x5a>
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b804 <netconn_free+0x80>)
 800b7d2:	f240 3226 	movw	r2, #806	@ 0x326
 800b7d6:	490f      	ldr	r1, [pc, #60]	@ (800b814 <netconn_free+0x90>)
 800b7d8:	480c      	ldr	r0, [pc, #48]	@ (800b80c <netconn_free+0x88>)
 800b7da:	f00c fda3 	bl	8018324 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f00b ffbf 	bl	8017766 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f00b ffd8 	bl	80177a2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	2007      	movs	r0, #7
 800b7f6:	f001 fda7 	bl	800d348 <memp_free>
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	0801ac48 	.word	0x0801ac48
 800b808:	0801ae74 	.word	0x0801ae74
 800b80c:	0801ac8c 	.word	0x0801ac8c
 800b810:	0801aea4 	.word	0x0801aea4
 800b814:	0801aee0 	.word	0x0801aee0

0800b818 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3310      	adds	r3, #16
 800b824:	4618      	mov	r0, r3
 800b826:	f00b ff1d 	bl	8017664 <sys_mbox_valid>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02f      	beq.n	800b890 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b830:	e018      	b.n	800b864 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b83a:	2b10      	cmp	r3, #16
 800b83c:	d10e      	bne.n	800b85c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f107 020f 	add.w	r2, r7, #15
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fafe 	bl	800ae48 <lwip_netconn_is_err_msg>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d108      	bne.n	800b864 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	4618      	mov	r0, r3
 800b856:	f002 fc1b 	bl	800e090 <pbuf_free>
 800b85a:	e003      	b.n	800b864 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fe92 	bl	800c588 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3310      	adds	r3, #16
 800b868:	f107 0210 	add.w	r2, r7, #16
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f00b fee1 	bl	8017636 <sys_arch_mbox_tryfetch>
 800b874:	4603      	mov	r3, r0
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87a:	d1da      	bne.n	800b832 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3310      	adds	r3, #16
 800b880:	4618      	mov	r0, r3
 800b882:	f00b fe7b 	bl	801757c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3310      	adds	r3, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f00b fefb 	bl	8017686 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3314      	adds	r3, #20
 800b894:	4618      	mov	r0, r3
 800b896:	f00b fee5 	bl	8017664 <sys_mbox_valid>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d034      	beq.n	800b90a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8a0:	e01d      	b.n	800b8de <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f107 020e 	add.w	r2, r7, #14
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff facc 	bl	800ae48 <lwip_netconn_is_err_msg>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d113      	bne.n	800b8de <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f7ff ffac 	bl	800b818 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f003 f9cf 	bl	800ec70 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b8d8:	6978      	ldr	r0, [r7, #20]
 800b8da:	f7ff ff53 	bl	800b784 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	f107 0210 	add.w	r2, r7, #16
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f00b fea4 	bl	8017636 <sys_arch_mbox_tryfetch>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d1d5      	bne.n	800b8a2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3314      	adds	r3, #20
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f00b fe3e 	bl	801757c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3314      	adds	r3, #20
 800b904:	4618      	mov	r0, r3
 800b906:	f00b febe 	bl	8017686 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b90a:	bf00      	nop
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <lwip_netconn_do_close_internal+0x24>
 800b92a:	4b87      	ldr	r3, [pc, #540]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b92c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800b930:	4986      	ldr	r1, [pc, #536]	@ (800bb4c <lwip_netconn_do_close_internal+0x238>)
 800b932:	4887      	ldr	r0, [pc, #540]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b934:	f00c fcf6 	bl	8018324 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b940:	2b10      	cmp	r3, #16
 800b942:	d006      	beq.n	800b952 <lwip_netconn_do_close_internal+0x3e>
 800b944:	4b80      	ldr	r3, [pc, #512]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b946:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800b94a:	4982      	ldr	r1, [pc, #520]	@ (800bb54 <lwip_netconn_do_close_internal+0x240>)
 800b94c:	4880      	ldr	r0, [pc, #512]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b94e:	f00c fce9 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d006      	beq.n	800b968 <lwip_netconn_do_close_internal+0x54>
 800b95a:	4b7b      	ldr	r3, [pc, #492]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b95c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800b960:	497d      	ldr	r1, [pc, #500]	@ (800bb58 <lwip_netconn_do_close_internal+0x244>)
 800b962:	487b      	ldr	r0, [pc, #492]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b964:	f00c fcde 	bl	8018324 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <lwip_netconn_do_close_internal+0x6a>
 800b970:	4b75      	ldr	r3, [pc, #468]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b972:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800b976:	4979      	ldr	r1, [pc, #484]	@ (800bb5c <lwip_netconn_do_close_internal+0x248>)
 800b978:	4875      	ldr	r0, [pc, #468]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b97a:	f00c fcd3 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <lwip_netconn_do_close_internal+0x80>
 800b986:	4b70      	ldr	r3, [pc, #448]	@ (800bb48 <lwip_netconn_do_close_internal+0x234>)
 800b988:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b98c:	4974      	ldr	r1, [pc, #464]	@ (800bb60 <lwip_netconn_do_close_internal+0x24c>)
 800b98e:	4870      	ldr	r0, [pc, #448]	@ (800bb50 <lwip_netconn_do_close_internal+0x23c>)
 800b990:	f00c fcc8 	bl	8018324 <iprintf>

  tpcb = conn->pcb.tcp;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	7a1b      	ldrb	r3, [r3, #8]
 800b9a0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d102      	bne.n	800b9be <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75bb      	strb	r3, [r7, #22]
 800b9bc:	e01f      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00e      	beq.n	800b9e2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d007      	beq.n	800b9dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b9d0:	2b06      	cmp	r3, #6
 800b9d2:	d003      	beq.n	800b9dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d102      	bne.n	800b9e2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	75bb      	strb	r3, [r7, #22]
 800b9e0:	e00d      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b9e2:	7b7b      	ldrb	r3, [r7, #13]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d008      	beq.n	800b9fa <lwip_netconn_do_close_internal+0xe6>
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	8b5b      	ldrh	r3, [r3, #26]
 800b9ec:	f003 0310 	and.w	r3, r3, #16
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75bb      	strb	r3, [r7, #22]
 800b9f8:	e001      	b.n	800b9fe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ba04:	2100      	movs	r1, #0
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f004 f9c2 	bl	800fd90 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	7d1b      	ldrb	r3, [r3, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d104      	bne.n	800ba1e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ba14:	2100      	movs	r1, #0
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f004 fa32 	bl	800fe80 <tcp_accept>
 800ba1c:	e01d      	b.n	800ba5a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ba24:	2100      	movs	r1, #0
 800ba26:	6938      	ldr	r0, [r7, #16]
 800ba28:	f004 f9c4 	bl	800fdb4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	6938      	ldr	r0, [r7, #16]
 800ba30:	f004 fa26 	bl	800fe80 <tcp_accept>
    }
    if (shut_tx) {
 800ba34:	7b7b      	ldrb	r3, [r7, #13]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6938      	ldr	r0, [r7, #16]
 800ba3e:	f004 f9db 	bl	800fdf8 <tcp_sent>
    }
    if (shut_close) {
 800ba42:	7dbb      	ldrb	r3, [r7, #22]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d008      	beq.n	800ba5a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6938      	ldr	r0, [r7, #16]
 800ba4e:	f004 fa2f 	bl	800feb0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ba52:	2100      	movs	r1, #0
 800ba54:	6938      	ldr	r0, [r7, #16]
 800ba56:	f004 f9f1 	bl	800fe3c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ba5a:	7dbb      	ldrb	r3, [r7, #22]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ba60:	6938      	ldr	r0, [r7, #16]
 800ba62:	f002 ffbf 	bl	800e9e4 <tcp_close>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]
 800ba6a:	e007      	b.n	800ba7c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	7b7a      	ldrb	r2, [r7, #13]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6938      	ldr	r0, [r7, #16]
 800ba74:	f002 ffe2 	bl	800ea3c <tcp_shutdown>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ba7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ba84:	2301      	movs	r3, #1
 800ba86:	757b      	strb	r3, [r7, #21]
 800ba88:	e016      	b.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ba8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba92:	d10f      	bne.n	800bab4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10c      	bne.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800baa8:	6938      	ldr	r0, [r7, #16]
 800baaa:	f003 f8e1 	bl	800ec70 <tcp_abort>
          err = ERR_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	75fb      	strb	r3, [r7, #23]
 800bab2:	e001      	b.n	800bab8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bab4:	2301      	movs	r3, #1
 800bab6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bab8:	7d7b      	ldrb	r3, [r7, #21]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d052      	beq.n	800bb64 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	330c      	adds	r3, #12
 800bac6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	7dfa      	ldrb	r2, [r7, #23]
 800bace:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800badc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d129      	bne.n	800bb38 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bae4:	7dbb      	ldrb	r3, [r7, #22]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00c      	beq.n	800bb04 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <lwip_netconn_do_close_internal+0x1f0>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafc:	2200      	movs	r2, #0
 800bafe:	2104      	movs	r1, #4
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
      }
      if (shut_rx) {
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <lwip_netconn_do_close_internal+0x20a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	4798      	blx	r3
      }
      if (shut_tx) {
 800bb1e:	7b7b      	ldrb	r3, [r7, #13]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <lwip_netconn_do_close_internal+0x224>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb30:	2200      	movs	r2, #0
 800bb32:	2102      	movs	r1, #2
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bb3e:	68b8      	ldr	r0, [r7, #8]
 800bb40:	f00b fe04 	bl	801774c <sys_sem_signal>
    }
    return ERR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e03c      	b.n	800bbc2 <lwip_netconn_do_close_internal+0x2ae>
 800bb48:	0801ac48 	.word	0x0801ac48
 800bb4c:	0801af1c 	.word	0x0801af1c
 800bb50:	0801ac8c 	.word	0x0801ac8c
 800bb54:	0801af2c 	.word	0x0801af2c
 800bb58:	0801af4c 	.word	0x0801af4c
 800bb5c:	0801af70 	.word	0x0801af70
 800bb60:	0801adb0 	.word	0x0801adb0
  }
  if (!close_finished) {
 800bb64:	7d7b      	ldrb	r3, [r7, #21]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d11e      	bne.n	800bba8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	7d1b      	ldrb	r3, [r3, #20]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d106      	bne.n	800bb80 <lwip_netconn_do_close_internal+0x26c>
 800bb72:	4b16      	ldr	r3, [pc, #88]	@ (800bbcc <lwip_netconn_do_close_internal+0x2b8>)
 800bb74:	f240 4241 	movw	r2, #1089	@ 0x441
 800bb78:	4915      	ldr	r1, [pc, #84]	@ (800bbd0 <lwip_netconn_do_close_internal+0x2bc>)
 800bb7a:	4816      	ldr	r0, [pc, #88]	@ (800bbd4 <lwip_netconn_do_close_internal+0x2c0>)
 800bb7c:	f00c fbd2 	bl	8018324 <iprintf>
    if (shut_tx) {
 800bb80:	7b7b      	ldrb	r3, [r7, #13]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800bb86:	4914      	ldr	r1, [pc, #80]	@ (800bbd8 <lwip_netconn_do_close_internal+0x2c4>)
 800bb88:	6938      	ldr	r0, [r7, #16]
 800bb8a:	f004 f935 	bl	800fdf8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4912      	ldr	r1, [pc, #72]	@ (800bbdc <lwip_netconn_do_close_internal+0x2c8>)
 800bb92:	6938      	ldr	r0, [r7, #16]
 800bb94:	f004 f98c 	bl	800feb0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bb98:	4911      	ldr	r1, [pc, #68]	@ (800bbe0 <lwip_netconn_do_close_internal+0x2cc>)
 800bb9a:	6938      	ldr	r0, [r7, #16]
 800bb9c:	f004 f94e 	bl	800fe3c <tcp_err>
    tcp_arg(tpcb, conn);
 800bba0:	6879      	ldr	r1, [r7, #4]
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	f004 f8f4 	bl	800fd90 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d106      	bne.n	800bbbe <lwip_netconn_do_close_internal+0x2aa>
 800bbb0:	4b06      	ldr	r3, [pc, #24]	@ (800bbcc <lwip_netconn_do_close_internal+0x2b8>)
 800bbb2:	f240 424d 	movw	r2, #1101	@ 0x44d
 800bbb6:	490b      	ldr	r1, [pc, #44]	@ (800bbe4 <lwip_netconn_do_close_internal+0x2d0>)
 800bbb8:	4806      	ldr	r0, [pc, #24]	@ (800bbd4 <lwip_netconn_do_close_internal+0x2c0>)
 800bbba:	f00c fbb3 	bl	8018324 <iprintf>
  return err;
 800bbbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	0801ac48 	.word	0x0801ac48
 800bbd0:	0801af84 	.word	0x0801af84
 800bbd4:	0801ac8c 	.word	0x0801ac8c
 800bbd8:	0800b18d 	.word	0x0800b18d
 800bbdc:	0800b0c5 	.word	0x0800b0c5
 800bbe0:	0800b235 	.word	0x0800b235
 800bbe4:	0801afa8 	.word	0x0801afa8

0800bbe8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00d      	beq.n	800bc1e <lwip_netconn_do_delconn+0x36>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc0c:	2b10      	cmp	r3, #16
 800bc0e:	d006      	beq.n	800bc1e <lwip_netconn_do_delconn+0x36>
 800bc10:	4b60      	ldr	r3, [pc, #384]	@ (800bd94 <lwip_netconn_do_delconn+0x1ac>)
 800bc12:	f240 425e 	movw	r2, #1118	@ 0x45e
 800bc16:	4960      	ldr	r1, [pc, #384]	@ (800bd98 <lwip_netconn_do_delconn+0x1b0>)
 800bc18:	4860      	ldr	r0, [pc, #384]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bc1a:	f00c fb83 	bl	8018324 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <lwip_netconn_do_delconn+0x48>
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d002      	beq.n	800bc30 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bc2a:	7afb      	ldrb	r3, [r7, #11]
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d109      	bne.n	800bc44 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bc30:	7afb      	ldrb	r3, [r7, #11]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d10a      	bne.n	800bc4c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	7f1b      	ldrb	r3, [r3, #28]
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	22fb      	movs	r2, #251	@ 0xfb
 800bc48:	711a      	strb	r2, [r3, #4]
 800bc4a:	e097      	b.n	800bd7c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d10d      	bne.n	800bc6e <lwip_netconn_do_delconn+0x86>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	7f1b      	ldrb	r3, [r3, #28]
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d106      	bne.n	800bc6e <lwip_netconn_do_delconn+0x86>
 800bc60:	4b4c      	ldr	r3, [pc, #304]	@ (800bd94 <lwip_netconn_do_delconn+0x1ac>)
 800bc62:	f240 427a 	movw	r2, #1146	@ 0x47a
 800bc66:	494e      	ldr	r1, [pc, #312]	@ (800bda0 <lwip_netconn_do_delconn+0x1b8>)
 800bc68:	484c      	ldr	r0, [pc, #304]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bc6a:	f00c fb5b 	bl	8018324 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff fdcd 	bl	800b818 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d05f      	beq.n	800bd48 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc92:	2b10      	cmp	r3, #16
 800bc94:	d00d      	beq.n	800bcb2 <lwip_netconn_do_delconn+0xca>
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d151      	bne.n	800bd3e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f009 f8f0 	bl	8014e90 <udp_remove>
          break;
 800bcb0:	e046      	b.n	800bd40 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6a1b      	ldr	r3, [r3, #32]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d006      	beq.n	800bcca <lwip_netconn_do_delconn+0xe2>
 800bcbc:	4b35      	ldr	r3, [pc, #212]	@ (800bd94 <lwip_netconn_do_delconn+0x1ac>)
 800bcbe:	f240 4294 	movw	r2, #1172	@ 0x494
 800bcc2:	4938      	ldr	r1, [pc, #224]	@ (800bda4 <lwip_netconn_do_delconn+0x1bc>)
 800bcc4:	4835      	ldr	r0, [pc, #212]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bcc6:	f00c fb2d 	bl	8018324 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2204      	movs	r2, #4
 800bcd0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fe14 	bl	800b914 <lwip_netconn_do_close_internal>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d04b      	beq.n	800bd8a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d006      	beq.n	800bd0a <lwip_netconn_do_delconn+0x122>
 800bcfc:	4b25      	ldr	r3, [pc, #148]	@ (800bd94 <lwip_netconn_do_delconn+0x1ac>)
 800bcfe:	f240 429a 	movw	r2, #1178	@ 0x49a
 800bd02:	4929      	ldr	r1, [pc, #164]	@ (800bda8 <lwip_netconn_do_delconn+0x1c0>)
 800bd04:	4825      	ldr	r0, [pc, #148]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bd06:	f00c fb0d 	bl	8018324 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bd0a:	4828      	ldr	r0, [pc, #160]	@ (800bdac <lwip_netconn_do_delconn+0x1c4>)
 800bd0c:	f00b fd87 	bl	801781e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	330c      	adds	r3, #12
 800bd16:	2100      	movs	r1, #0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f00b fce6 	bl	80176ea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bd1e:	4823      	ldr	r0, [pc, #140]	@ (800bdac <lwip_netconn_do_delconn+0x1c4>)
 800bd20:	f00b fd6e 	bl	8017800 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d02d      	beq.n	800bd8a <lwip_netconn_do_delconn+0x1a2>
 800bd2e:	4b19      	ldr	r3, [pc, #100]	@ (800bd94 <lwip_netconn_do_delconn+0x1ac>)
 800bd30:	f240 429e 	movw	r2, #1182	@ 0x49e
 800bd34:	491c      	ldr	r1, [pc, #112]	@ (800bda8 <lwip_netconn_do_delconn+0x1c0>)
 800bd36:	4819      	ldr	r0, [pc, #100]	@ (800bd9c <lwip_netconn_do_delconn+0x1b4>)
 800bd38:	f00c faf4 	bl	8018324 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bd3c:	e025      	b.n	800bd8a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800bd3e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d007      	beq.n	800bd62 <lwip_netconn_do_delconn+0x17a>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	6810      	ldr	r0, [r2, #0]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <lwip_netconn_do_delconn+0x194>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	6810      	ldr	r0, [r2, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	2102      	movs	r1, #2
 800bd7a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	330c      	adds	r3, #12
 800bd82:	4618      	mov	r0, r3
 800bd84:	f00b fcfc 	bl	8017780 <sys_sem_valid>
 800bd88:	e000      	b.n	800bd8c <lwip_netconn_do_delconn+0x1a4>
          return;
 800bd8a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801ac48 	.word	0x0801ac48
 800bd98:	0801afb8 	.word	0x0801afb8
 800bd9c:	0801ac8c 	.word	0x0801ac8c
 800bda0:	0801afcc 	.word	0x0801afcc
 800bda4:	0801afec 	.word	0x0801afec
 800bda8:	0801b008 	.word	0x0801b008
 800bdac:	200087ac 	.word	0x200087ac

0800bdb0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d025      	beq.n	800be12 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdd0:	2b10      	cmp	r3, #16
 800bdd2:	d00e      	beq.n	800bdf2 <lwip_netconn_do_bind+0x42>
 800bdd4:	2b20      	cmp	r3, #32
 800bdd6:	d119      	bne.n	800be0c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	6858      	ldr	r0, [r3, #4]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	6899      	ldr	r1, [r3, #8]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f008 ffaa 	bl	8014d40 <udp_bind>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
        break;
 800bdf0:	e011      	b.n	800be16 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6858      	ldr	r0, [r3, #4]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	6899      	ldr	r1, [r3, #8]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	899b      	ldrh	r3, [r3, #12]
 800be00:	461a      	mov	r2, r3
 800be02:	f002 ff41 	bl	800ec88 <tcp_bind>
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
        break;
 800be0a:	e004      	b.n	800be16 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800be0c:	23fa      	movs	r3, #250	@ 0xfa
 800be0e:	73fb      	strb	r3, [r7, #15]
        break;
 800be10:	e001      	b.n	800be16 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800be12:	23fa      	movs	r3, #250	@ 0xfa
 800be14:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	7bfa      	ldrb	r2, [r7, #15]
 800be1a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d07f      	beq.n	800bf3a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be44:	2b10      	cmp	r3, #16
 800be46:	d175      	bne.n	800bf34 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d165      	bne.n	800bf1e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	7d1b      	ldrb	r3, [r3, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800be5e:	23fa      	movs	r3, #250	@ 0xfa
 800be60:	72fb      	strb	r3, [r7, #11]
 800be62:	e06c      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800be64:	23ff      	movs	r3, #255	@ 0xff
 800be66:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	f107 020b 	add.w	r2, r7, #11
 800be72:	7cf9      	ldrb	r1, [r7, #19]
 800be74:	4618      	mov	r0, r3
 800be76:	f002 ffbf 	bl	800edf8 <tcp_listen_with_backlog_and_err>
 800be7a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d05d      	beq.n	800bf3e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3310      	adds	r3, #16
 800be88:	4618      	mov	r0, r3
 800be8a:	f00b fbeb 	bl	8017664 <sys_mbox_valid>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f00b fb6e 	bl	801757c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3310      	adds	r3, #16
 800bea6:	4618      	mov	r0, r3
 800bea8:	f00b fbed 	bl	8017686 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3314      	adds	r3, #20
 800beb6:	4618      	mov	r0, r3
 800beb8:	f00b fbd4 	bl	8017664 <sys_mbox_valid>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d108      	bne.n	800bed4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3314      	adds	r3, #20
 800bec8:	2106      	movs	r1, #6
 800beca:	4618      	mov	r0, r3
 800becc:	f00b fb3c 	bl	8017548 <sys_mbox_new>
 800bed0:	4603      	mov	r3, r0
 800bed2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bed4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d118      	bne.n	800bf0e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2202      	movs	r2, #2
 800bee2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f003 ff49 	bl	800fd90 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	4912      	ldr	r1, [pc, #72]	@ (800bf50 <lwip_netconn_do_listen+0x12c>)
 800bf06:	4618      	mov	r0, r3
 800bf08:	f003 ffba 	bl	800fe80 <tcp_accept>
 800bf0c:	e017      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f002 fd68 	bl	800e9e4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]
 800bf1c:	e00f      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d102      	bne.n	800bf2e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	72fb      	strb	r3, [r7, #11]
 800bf2c:	e007      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bf2e:	23f5      	movs	r3, #245	@ 0xf5
 800bf30:	72fb      	strb	r3, [r7, #11]
 800bf32:	e004      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bf34:	23f0      	movs	r3, #240	@ 0xf0
 800bf36:	72fb      	strb	r3, [r7, #11]
 800bf38:	e001      	b.n	800bf3e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bf3a:	23f5      	movs	r3, #245	@ 0xf5
 800bf3c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bf3e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bf46:	bf00      	nop
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800b431 	.word	0x0800b431

0800bf54 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	2200      	movs	r2, #0
 800bf64:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d022      	beq.n	800bfb6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf7a:	2b10      	cmp	r3, #16
 800bf7c:	d11b      	bne.n	800bfb6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf8a:	d202      	bcs.n	800bf92 <lwip_netconn_do_recv+0x3e>
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	e001      	b.n	800bf96 <lwip_netconn_do_recv+0x42>
 800bf92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf96:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	89fa      	ldrh	r2, [r7, #14]
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f003 f82c 	bl	800f000 <tcp_recved>
        remaining -= recved;
 800bfa8:	89fb      	ldrh	r3, [r7, #14]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e6      	bne.n	800bf84 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bfb6:	bf00      	nop
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <lwip_netconn_do_writemore+0x24>
 800bfd6:	4b96      	ldr	r3, [pc, #600]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800bfd8:	f240 6273 	movw	r2, #1651	@ 0x673
 800bfdc:	4995      	ldr	r1, [pc, #596]	@ (800c234 <lwip_netconn_do_writemore+0x274>)
 800bfde:	4896      	ldr	r0, [pc, #600]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800bfe0:	f00c f9a0 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d006      	beq.n	800bffa <lwip_netconn_do_writemore+0x3a>
 800bfec:	4b90      	ldr	r3, [pc, #576]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800bfee:	f240 6274 	movw	r2, #1652	@ 0x674
 800bff2:	4992      	ldr	r1, [pc, #584]	@ (800c23c <lwip_netconn_do_writemore+0x27c>)
 800bff4:	4890      	ldr	r0, [pc, #576]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800bff6:	f00c f995 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <lwip_netconn_do_writemore+0x50>
 800c002:	4b8b      	ldr	r3, [pc, #556]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800c004:	f240 6275 	movw	r2, #1653	@ 0x675
 800c008:	498d      	ldr	r1, [pc, #564]	@ (800c240 <lwip_netconn_do_writemore+0x280>)
 800c00a:	488b      	ldr	r0, [pc, #556]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800c00c:	f00c f98a 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <lwip_netconn_do_writemore+0x66>
 800c018:	4b85      	ldr	r3, [pc, #532]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800c01a:	f240 6276 	movw	r2, #1654	@ 0x676
 800c01e:	4989      	ldr	r1, [pc, #548]	@ (800c244 <lwip_netconn_do_writemore+0x284>)
 800c020:	4885      	ldr	r0, [pc, #532]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800c022:	f00c f97f 	bl	8018324 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	699a      	ldr	r2, [r3, #24]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	429a      	cmp	r2, r3
 800c034:	d306      	bcc.n	800c044 <lwip_netconn_do_writemore+0x84>
 800c036:	4b7e      	ldr	r3, [pc, #504]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800c038:	f240 6277 	movw	r2, #1655	@ 0x677
 800c03c:	4982      	ldr	r1, [pc, #520]	@ (800c248 <lwip_netconn_do_writemore+0x288>)
 800c03e:	487e      	ldr	r0, [pc, #504]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800c040:	f00c f970 	bl	8018324 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	899b      	ldrh	r3, [r3, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <lwip_netconn_do_writemore+0x9c>
 800c04e:	4b78      	ldr	r3, [pc, #480]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800c050:	f240 6279 	movw	r2, #1657	@ 0x679
 800c054:	497d      	ldr	r1, [pc, #500]	@ (800c24c <lwip_netconn_do_writemore+0x28c>)
 800c056:	4878      	ldr	r0, [pc, #480]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800c058:	f00c f964 	bl	8018324 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	7f1b      	ldrb	r3, [r3, #28]
 800c062:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7f1b      	ldrb	r3, [r3, #28]
 800c068:	f003 0302 	and.w	r3, r3, #2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d104      	bne.n	800c07a <lwip_netconn_do_writemore+0xba>
 800c070:	7ebb      	ldrb	r3, [r7, #26]
 800c072:	f003 0304 	and.w	r3, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <lwip_netconn_do_writemore+0xbe>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e000      	b.n	800c080 <lwip_netconn_do_writemore+0xc0>
 800c07e:	2300      	movs	r3, #0
 800c080:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	4413      	add	r3, r2
 800c092:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0ac:	d307      	bcc.n	800c0be <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c0ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0b2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c0b4:	7ebb      	ldrb	r3, [r7, #26]
 800c0b6:	f043 0302 	orr.w	r3, r3, #2
 800c0ba:	76bb      	strb	r3, [r7, #26]
 800c0bc:	e001      	b.n	800c0c2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c0ca:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c0cc:	89fa      	ldrh	r2, [r7, #14]
 800c0ce:	8bbb      	ldrh	r3, [r7, #28]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d216      	bcs.n	800c102 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c0d4:	89fb      	ldrh	r3, [r7, #14]
 800c0d6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c0d8:	7e3b      	ldrb	r3, [r7, #24]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00d      	beq.n	800c0fa <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c0de:	8bbb      	ldrh	r3, [r7, #28]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10e      	bne.n	800c102 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <lwip_netconn_do_writemore+0x134>
 800c0ee:	f06f 0306 	mvn.w	r3, #6
 800c0f2:	e000      	b.n	800c0f6 <lwip_netconn_do_writemore+0x136>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c0f8:	e07d      	b.n	800c1f6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c0fa:	7ebb      	ldrb	r3, [r7, #26]
 800c0fc:	f043 0302 	orr.w	r3, r3, #2
 800c100:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	691a      	ldr	r2, [r3, #16]
 800c108:	8bbb      	ldrh	r3, [r7, #28]
 800c10a:	441a      	add	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a1b      	ldr	r3, [r3, #32]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d906      	bls.n	800c126 <lwip_netconn_do_writemore+0x166>
 800c118:	4b45      	ldr	r3, [pc, #276]	@ (800c230 <lwip_netconn_do_writemore+0x270>)
 800c11a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800c11e:	494c      	ldr	r1, [pc, #304]	@ (800c250 <lwip_netconn_do_writemore+0x290>)
 800c120:	4845      	ldr	r0, [pc, #276]	@ (800c238 <lwip_netconn_do_writemore+0x278>)
 800c122:	f00c f8ff 	bl	8018324 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c126:	8bbb      	ldrh	r3, [r7, #28]
 800c128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d103      	bne.n	800c138 <lwip_netconn_do_writemore+0x178>
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c136:	d209      	bcs.n	800c14c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c13c:	8bba      	ldrh	r2, [r7, #28]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d10b      	bne.n	800c15a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	899b      	ldrh	r3, [r3, #12]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d906      	bls.n	800c15a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c14c:	2301      	movs	r3, #1
 800c14e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c150:	7ebb      	ldrb	r3, [r7, #26]
 800c152:	f043 0302 	orr.w	r3, r3, #2
 800c156:	76bb      	strb	r3, [r7, #26]
 800c158:	e001      	b.n	800c15e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6858      	ldr	r0, [r3, #4]
 800c162:	7ebb      	ldrb	r3, [r7, #26]
 800c164:	8bba      	ldrh	r2, [r7, #28]
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	f006 fd4e 	bl	8012c08 <tcp_write>
 800c16c:	4603      	mov	r3, r0
 800c16e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c170:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d12c      	bne.n	800c1d2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	6999      	ldr	r1, [r3, #24]
 800c17e:	8bba      	ldrh	r2, [r7, #28]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a1b      	ldr	r3, [r3, #32]
 800c184:	440a      	add	r2, r1
 800c186:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	6919      	ldr	r1, [r3, #16]
 800c18e:	8bba      	ldrh	r2, [r7, #28]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	440a      	add	r2, r1
 800c196:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	691a      	ldr	r2, [r3, #16]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d113      	bne.n	800c1d2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	899a      	ldrh	r2, [r3, #12]
 800c1b0:	3a01      	subs	r2, #1
 800c1b2:	b292      	uxth	r2, r2
 800c1b4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	899b      	ldrh	r3, [r3, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d008      	beq.n	800c1d2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	3208      	adds	r2, #8
 800c1c8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c1d2:	7e7b      	ldrb	r3, [r7, #25]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <lwip_netconn_do_writemore+0x222>
 800c1d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f43f af50 	beq.w	800c082 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c1e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <lwip_netconn_do_writemore+0x234>
 800c1ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d146      	bne.n	800c282 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c1f4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c1f6:	7e3b      	ldrb	r3, [r7, #24]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d02b      	beq.n	800c254 <lwip_netconn_do_writemore+0x294>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d223      	bcs.n	800c254 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <lwip_netconn_do_writemore+0x260>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	2200      	movs	r2, #0
 800c21a:	2103      	movs	r1, #3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	7f1b      	ldrb	r3, [r3, #28]
 800c224:	f043 0310 	orr.w	r3, r3, #16
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	771a      	strb	r2, [r3, #28]
 800c22e:	e028      	b.n	800c282 <lwip_netconn_do_writemore+0x2c2>
 800c230:	0801ac48 	.word	0x0801ac48
 800c234:	0801ada0 	.word	0x0801ada0
 800c238:	0801ac8c 	.word	0x0801ac8c
 800c23c:	0801b0a8 	.word	0x0801b0a8
 800c240:	0801adb0 	.word	0x0801adb0
 800c244:	0801b0c8 	.word	0x0801b0c8
 800c248:	0801b0e0 	.word	0x0801b0e0
 800c24c:	0801b120 	.word	0x0801b120
 800c250:	0801b148 	.word	0x0801b148
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c25c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c260:	d305      	bcc.n	800c26e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d909      	bls.n	800c282 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c272:	2b00      	cmp	r3, #0
 800c274:	d005      	beq.n	800c282 <lwip_netconn_do_writemore+0x2c2>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27a:	2200      	movs	r2, #0
 800c27c:	2103      	movs	r1, #3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c282:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11d      	bne.n	800c2c6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	699a      	ldr	r2, [r3, #24]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	429a      	cmp	r2, r3
 800c298:	d002      	beq.n	800c2a0 <lwip_netconn_do_writemore+0x2e0>
 800c29a:	7e3b      	ldrb	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f007 fa97 	bl	80137dc <tcp_output>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c2b2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c2b6:	f113 0f04 	cmn.w	r3, #4
 800c2ba:	d12c      	bne.n	800c316 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2bc:	7b3b      	ldrb	r3, [r7, #12]
 800c2be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	76fb      	strb	r3, [r7, #27]
 800c2c4:	e027      	b.n	800c316 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c2c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ce:	d120      	bne.n	800c312 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f007 fa81 	bl	80137dc <tcp_output>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c2de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c2e2:	f113 0f04 	cmn.w	r3, #4
 800c2e6:	d104      	bne.n	800c2f2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2e8:	7b7b      	ldrb	r3, [r7, #13]
 800c2ea:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	76fb      	strb	r3, [r7, #27]
 800c2f0:	e011      	b.n	800c316 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c2f2:	7e3b      	ldrb	r3, [r7, #24]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00e      	beq.n	800c316 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <lwip_netconn_do_writemore+0x348>
 800c302:	f06f 0306 	mvn.w	r3, #6
 800c306:	e000      	b.n	800c30a <lwip_netconn_do_writemore+0x34a>
 800c308:	2300      	movs	r3, #0
 800c30a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c30c:	2301      	movs	r3, #1
 800c30e:	76fb      	strb	r3, [r7, #27]
 800c310:	e001      	b.n	800c316 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c312:	2301      	movs	r3, #1
 800c314:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c316:	7efb      	ldrb	r3, [r7, #27]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d015      	beq.n	800c348 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	330c      	adds	r3, #12
 800c324:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	7ffa      	ldrb	r2, [r7, #31]
 800c32c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c33a:	78fb      	ldrb	r3, [r7, #3]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d006      	beq.n	800c34e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c340:	68b8      	ldr	r0, [r7, #8]
 800c342:	f00b fa03 	bl	801774c <sys_sem_signal>
 800c346:	e002      	b.n	800c34e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e000      	b.n	800c350 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe fd1c 	bl	800ada6 <netconn_err>
 800c36e:	4603      	mov	r3, r0
 800c370:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d166      	bne.n	800c448 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c384:	2b10      	cmp	r3, #16
 800c386:	d15d      	bne.n	800c444 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c392:	23fb      	movs	r3, #251	@ 0xfb
 800c394:	73fb      	strb	r3, [r7, #15]
 800c396:	e057      	b.n	800c448 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d04d      	beq.n	800c43e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <lwip_netconn_do_write+0x6a>
 800c3b4:	4b28      	ldr	r3, [pc, #160]	@ (800c458 <lwip_netconn_do_write+0x100>)
 800c3b6:	f240 7223 	movw	r2, #1827	@ 0x723
 800c3ba:	4928      	ldr	r1, [pc, #160]	@ (800c45c <lwip_netconn_do_write+0x104>)
 800c3bc:	4828      	ldr	r0, [pc, #160]	@ (800c460 <lwip_netconn_do_write+0x108>)
 800c3be:	f00b ffb1 	bl	8018324 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <lwip_netconn_do_write+0x80>
 800c3ca:	4b23      	ldr	r3, [pc, #140]	@ (800c458 <lwip_netconn_do_write+0x100>)
 800c3cc:	f240 7224 	movw	r2, #1828	@ 0x724
 800c3d0:	4924      	ldr	r1, [pc, #144]	@ (800c464 <lwip_netconn_do_write+0x10c>)
 800c3d2:	4823      	ldr	r0, [pc, #140]	@ (800c460 <lwip_netconn_do_write+0x108>)
 800c3d4:	f00b ffa6 	bl	8018324 <iprintf>
        msg->conn->current_msg = msg;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fdea 	bl	800bfc0 <lwip_netconn_do_writemore>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d02e      	beq.n	800c450 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	785b      	ldrb	r3, [r3, #1]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d006      	beq.n	800c40a <lwip_netconn_do_write+0xb2>
 800c3fc:	4b16      	ldr	r3, [pc, #88]	@ (800c458 <lwip_netconn_do_write+0x100>)
 800c3fe:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800c402:	4919      	ldr	r1, [pc, #100]	@ (800c468 <lwip_netconn_do_write+0x110>)
 800c404:	4816      	ldr	r0, [pc, #88]	@ (800c460 <lwip_netconn_do_write+0x108>)
 800c406:	f00b ff8d 	bl	8018324 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c40a:	4818      	ldr	r0, [pc, #96]	@ (800c46c <lwip_netconn_do_write+0x114>)
 800c40c:	f00b fa07 	bl	801781e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	330c      	adds	r3, #12
 800c416:	2100      	movs	r1, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	f00b f966 	bl	80176ea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c41e:	4813      	ldr	r0, [pc, #76]	@ (800c46c <lwip_netconn_do_write+0x114>)
 800c420:	f00b f9ee 	bl	8017800 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d110      	bne.n	800c450 <lwip_netconn_do_write+0xf8>
 800c42e:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <lwip_netconn_do_write+0x100>)
 800c430:	f240 722c 	movw	r2, #1836	@ 0x72c
 800c434:	490c      	ldr	r1, [pc, #48]	@ (800c468 <lwip_netconn_do_write+0x110>)
 800c436:	480a      	ldr	r0, [pc, #40]	@ (800c460 <lwip_netconn_do_write+0x108>)
 800c438:	f00b ff74 	bl	8018324 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c43c:	e008      	b.n	800c450 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c43e:	23f5      	movs	r3, #245	@ 0xf5
 800c440:	73fb      	strb	r3, [r7, #15]
 800c442:	e001      	b.n	800c448 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c444:	23fa      	movs	r3, #250	@ 0xfa
 800c446:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	7bfa      	ldrb	r2, [r7, #15]
 800c44c:	711a      	strb	r2, [r3, #4]
 800c44e:	e000      	b.n	800c452 <lwip_netconn_do_write+0xfa>
        return;
 800c450:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	0801ac48 	.word	0x0801ac48
 800c45c:	0801afec 	.word	0x0801afec
 800c460:	0801ac8c 	.word	0x0801ac8c
 800c464:	0801b174 	.word	0x0801b174
 800c468:	0801b008 	.word	0x0801b008
 800c46c:	200087ac 	.word	0x200087ac

0800c470 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	785b      	ldrb	r3, [r3, #1]
 800c482:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d069      	beq.n	800c562 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c498:	2b10      	cmp	r3, #16
 800c49a:	d162      	bne.n	800c562 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d002      	beq.n	800c4aa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d05b      	beq.n	800c562 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c4aa:	7afb      	ldrb	r3, [r7, #11]
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d103      	bne.n	800c4b8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	22f5      	movs	r2, #245	@ 0xf5
 800c4b4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4b6:	e059      	b.n	800c56c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c4b8:	7afb      	ldrb	r3, [r7, #11]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d103      	bne.n	800c4c6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	22fb      	movs	r2, #251	@ 0xfb
 800c4c2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4c4:	e052      	b.n	800c56c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7a1b      	ldrb	r3, [r3, #8]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d004      	beq.n	800c4dc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff f99e 	bl	800b818 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <lwip_netconn_do_close+0x84>
 800c4e6:	4b23      	ldr	r3, [pc, #140]	@ (800c574 <lwip_netconn_do_close+0x104>)
 800c4e8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800c4ec:	4922      	ldr	r1, [pc, #136]	@ (800c578 <lwip_netconn_do_close+0x108>)
 800c4ee:	4823      	ldr	r0, [pc, #140]	@ (800c57c <lwip_netconn_do_close+0x10c>)
 800c4f0:	f00b ff18 	bl	8018324 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2204      	movs	r2, #4
 800c4fa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2100      	movs	r1, #0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fa02 	bl	800b914 <lwip_netconn_do_close_internal>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d029      	beq.n	800c56a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	785b      	ldrb	r3, [r3, #1]
 800c51c:	2b04      	cmp	r3, #4
 800c51e:	d006      	beq.n	800c52e <lwip_netconn_do_close+0xbe>
 800c520:	4b14      	ldr	r3, [pc, #80]	@ (800c574 <lwip_netconn_do_close+0x104>)
 800c522:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800c526:	4916      	ldr	r1, [pc, #88]	@ (800c580 <lwip_netconn_do_close+0x110>)
 800c528:	4814      	ldr	r0, [pc, #80]	@ (800c57c <lwip_netconn_do_close+0x10c>)
 800c52a:	f00b fefb 	bl	8018324 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c52e:	4815      	ldr	r0, [pc, #84]	@ (800c584 <lwip_netconn_do_close+0x114>)
 800c530:	f00b f975 	bl	801781e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	330c      	adds	r3, #12
 800c53a:	2100      	movs	r1, #0
 800c53c:	4618      	mov	r0, r3
 800c53e:	f00b f8d4 	bl	80176ea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c542:	4810      	ldr	r0, [pc, #64]	@ (800c584 <lwip_netconn_do_close+0x114>)
 800c544:	f00b f95c 	bl	8017800 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <lwip_netconn_do_close+0xfa>
 800c552:	4b08      	ldr	r3, [pc, #32]	@ (800c574 <lwip_netconn_do_close+0x104>)
 800c554:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800c558:	4909      	ldr	r1, [pc, #36]	@ (800c580 <lwip_netconn_do_close+0x110>)
 800c55a:	4808      	ldr	r0, [pc, #32]	@ (800c57c <lwip_netconn_do_close+0x10c>)
 800c55c:	f00b fee2 	bl	8018324 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c560:	e003      	b.n	800c56a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	22f5      	movs	r2, #245	@ 0xf5
 800c566:	711a      	strb	r2, [r3, #4]
 800c568:	e000      	b.n	800c56c <lwip_netconn_do_close+0xfc>
      return;
 800c56a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	0801ac48 	.word	0x0801ac48
 800c578:	0801afec 	.word	0x0801afec
 800c57c:	0801ac8c 	.word	0x0801ac8c
 800c580:	0801b008 	.word	0x0801b008
 800c584:	200087ac 	.word	0x200087ac

0800c588 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d013      	beq.n	800c5be <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f001 fd74 	bl	800e090 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	605a      	str	r2, [r3, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	2006      	movs	r0, #6
 800c5ba:	f000 fec5 	bl	800d348 <memp_free>
  }
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c5d2:	f008 f9bb 	bl	801494c <sys_timeouts_sleeptime>
 800c5d6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	d10b      	bne.n	800c5f8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c5e0:	4813      	ldr	r0, [pc, #76]	@ (800c630 <tcpip_timeouts_mbox_fetch+0x68>)
 800c5e2:	f00b f91c 	bl	801781e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f00a fff2 	bl	80175d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c5f0:	480f      	ldr	r0, [pc, #60]	@ (800c630 <tcpip_timeouts_mbox_fetch+0x68>)
 800c5f2:	f00b f905 	bl	8017800 <sys_mutex_lock>
    return;
 800c5f6:	e018      	b.n	800c62a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c5fe:	f008 f96b 	bl	80148d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c602:	e7e6      	b.n	800c5d2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c604:	480a      	ldr	r0, [pc, #40]	@ (800c630 <tcpip_timeouts_mbox_fetch+0x68>)
 800c606:	f00b f90a 	bl	801781e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f00a ffe0 	bl	80175d4 <sys_arch_mbox_fetch>
 800c614:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c616:	4806      	ldr	r0, [pc, #24]	@ (800c630 <tcpip_timeouts_mbox_fetch+0x68>)
 800c618:	f00b f8f2 	bl	8017800 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c622:	d102      	bne.n	800c62a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c624:	f008 f958 	bl	80148d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c628:	e7d3      	b.n	800c5d2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	200087ac 	.word	0x200087ac

0800c634 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c63c:	4810      	ldr	r0, [pc, #64]	@ (800c680 <tcpip_thread+0x4c>)
 800c63e:	f00b f8df 	bl	8017800 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c642:	4b10      	ldr	r3, [pc, #64]	@ (800c684 <tcpip_thread+0x50>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d005      	beq.n	800c656 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c64a:	4b0e      	ldr	r3, [pc, #56]	@ (800c684 <tcpip_thread+0x50>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a0e      	ldr	r2, [pc, #56]	@ (800c688 <tcpip_thread+0x54>)
 800c650:	6812      	ldr	r2, [r2, #0]
 800c652:	4610      	mov	r0, r2
 800c654:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c656:	f107 030c 	add.w	r3, r7, #12
 800c65a:	4619      	mov	r1, r3
 800c65c:	480b      	ldr	r0, [pc, #44]	@ (800c68c <tcpip_thread+0x58>)
 800c65e:	f7ff ffb3 	bl	800c5c8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <tcpip_thread+0x5c>)
 800c66a:	2291      	movs	r2, #145	@ 0x91
 800c66c:	4909      	ldr	r1, [pc, #36]	@ (800c694 <tcpip_thread+0x60>)
 800c66e:	480a      	ldr	r0, [pc, #40]	@ (800c698 <tcpip_thread+0x64>)
 800c670:	f00b fe58 	bl	8018324 <iprintf>
      continue;
 800c674:	e003      	b.n	800c67e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 f80f 	bl	800c69c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c67e:	e7ea      	b.n	800c656 <tcpip_thread+0x22>
 800c680:	200087ac 	.word	0x200087ac
 800c684:	200087a0 	.word	0x200087a0
 800c688:	200087a4 	.word	0x200087a4
 800c68c:	200087a8 	.word	0x200087a8
 800c690:	0801b1a0 	.word	0x0801b1a0
 800c694:	0801b1d0 	.word	0x0801b1d0
 800c698:	0801b1f0 	.word	0x0801b1f0

0800c69c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d026      	beq.n	800c6fa <tcpip_thread_handle_msg+0x5e>
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	dc2b      	bgt.n	800c708 <tcpip_thread_handle_msg+0x6c>
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <tcpip_thread_handle_msg+0x1e>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d015      	beq.n	800c6e4 <tcpip_thread_handle_msg+0x48>
 800c6b8:	e026      	b.n	800c708 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6850      	ldr	r0, [r2, #4]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	6892      	ldr	r2, [r2, #8]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	4798      	blx	r3
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d004      	beq.n	800c6da <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f001 fcdb 	bl	800e090 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	2009      	movs	r0, #9
 800c6de:	f000 fe33 	bl	800d348 <memp_free>
      break;
 800c6e2:	e018      	b.n	800c716 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	6892      	ldr	r2, [r2, #8]
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c6f0:	6879      	ldr	r1, [r7, #4]
 800c6f2:	2008      	movs	r0, #8
 800c6f4:	f000 fe28 	bl	800d348 <memp_free>
      break;
 800c6f8:	e00d      	b.n	800c716 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6892      	ldr	r2, [r2, #8]
 800c702:	4610      	mov	r0, r2
 800c704:	4798      	blx	r3
      break;
 800c706:	e006      	b.n	800c716 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c708:	4b05      	ldr	r3, [pc, #20]	@ (800c720 <tcpip_thread_handle_msg+0x84>)
 800c70a:	22cf      	movs	r2, #207	@ 0xcf
 800c70c:	4905      	ldr	r1, [pc, #20]	@ (800c724 <tcpip_thread_handle_msg+0x88>)
 800c70e:	4806      	ldr	r0, [pc, #24]	@ (800c728 <tcpip_thread_handle_msg+0x8c>)
 800c710:	f00b fe08 	bl	8018324 <iprintf>
      break;
 800c714:	bf00      	nop
  }
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	0801b1a0 	.word	0x0801b1a0
 800c724:	0801b1d0 	.word	0x0801b1d0
 800c728:	0801b1f0 	.word	0x0801b1f0

0800c72c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c738:	481a      	ldr	r0, [pc, #104]	@ (800c7a4 <tcpip_inpkt+0x78>)
 800c73a:	f00a ff93 	bl	8017664 <sys_mbox_valid>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <tcpip_inpkt+0x24>
 800c744:	4b18      	ldr	r3, [pc, #96]	@ (800c7a8 <tcpip_inpkt+0x7c>)
 800c746:	22fc      	movs	r2, #252	@ 0xfc
 800c748:	4918      	ldr	r1, [pc, #96]	@ (800c7ac <tcpip_inpkt+0x80>)
 800c74a:	4819      	ldr	r0, [pc, #100]	@ (800c7b0 <tcpip_inpkt+0x84>)
 800c74c:	f00b fdea 	bl	8018324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c750:	2009      	movs	r0, #9
 800c752:	f000 fda7 	bl	800d2a4 <memp_malloc>
 800c756:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d102      	bne.n	800c764 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295
 800c762:	e01a      	b.n	800c79a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c77c:	6979      	ldr	r1, [r7, #20]
 800c77e:	4809      	ldr	r0, [pc, #36]	@ (800c7a4 <tcpip_inpkt+0x78>)
 800c780:	f00a ff0e 	bl	80175a0 <sys_mbox_trypost>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c78a:	6979      	ldr	r1, [r7, #20]
 800c78c:	2009      	movs	r0, #9
 800c78e:	f000 fddb 	bl	800d348 <memp_free>
    return ERR_MEM;
 800c792:	f04f 33ff 	mov.w	r3, #4294967295
 800c796:	e000      	b.n	800c79a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c798:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	200087a8 	.word	0x200087a8
 800c7a8:	0801b1a0 	.word	0x0801b1a0
 800c7ac:	0801b218 	.word	0x0801b218
 800c7b0:	0801b1f0 	.word	0x0801b1f0

0800c7b4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7c4:	f003 0318 	and.w	r3, r3, #24
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d006      	beq.n	800c7da <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c7cc:	4a08      	ldr	r2, [pc, #32]	@ (800c7f0 <tcpip_input+0x3c>)
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff ffab 	bl	800c72c <tcpip_inpkt>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	e005      	b.n	800c7e6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c7da:	4a06      	ldr	r2, [pc, #24]	@ (800c7f4 <tcpip_input+0x40>)
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7ff ffa4 	bl	800c72c <tcpip_inpkt>
 800c7e4:	4603      	mov	r3, r0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	0801739d 	.word	0x0801739d
 800c7f4:	080162a5 	.word	0x080162a5

0800c7f8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c802:	4819      	ldr	r0, [pc, #100]	@ (800c868 <tcpip_try_callback+0x70>)
 800c804:	f00a ff2e 	bl	8017664 <sys_mbox_valid>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <tcpip_try_callback+0x24>
 800c80e:	4b17      	ldr	r3, [pc, #92]	@ (800c86c <tcpip_try_callback+0x74>)
 800c810:	f240 125d 	movw	r2, #349	@ 0x15d
 800c814:	4916      	ldr	r1, [pc, #88]	@ (800c870 <tcpip_try_callback+0x78>)
 800c816:	4817      	ldr	r0, [pc, #92]	@ (800c874 <tcpip_try_callback+0x7c>)
 800c818:	f00b fd84 	bl	8018324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c81c:	2008      	movs	r0, #8
 800c81e:	f000 fd41 	bl	800d2a4 <memp_malloc>
 800c822:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d102      	bne.n	800c830 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c82a:	f04f 33ff 	mov.w	r3, #4294967295
 800c82e:	e017      	b.n	800c860 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2201      	movs	r2, #1
 800c834:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	4808      	ldr	r0, [pc, #32]	@ (800c868 <tcpip_try_callback+0x70>)
 800c846:	f00a feab 	bl	80175a0 <sys_mbox_trypost>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d006      	beq.n	800c85e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c850:	68f9      	ldr	r1, [r7, #12]
 800c852:	2008      	movs	r0, #8
 800c854:	f000 fd78 	bl	800d348 <memp_free>
    return ERR_MEM;
 800c858:	f04f 33ff 	mov.w	r3, #4294967295
 800c85c:	e000      	b.n	800c860 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	200087a8 	.word	0x200087a8
 800c86c:	0801b1a0 	.word	0x0801b1a0
 800c870:	0801b218 	.word	0x0801b218
 800c874:	0801b1f0 	.word	0x0801b1f0

0800c878 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c884:	4806      	ldr	r0, [pc, #24]	@ (800c8a0 <tcpip_send_msg_wait_sem+0x28>)
 800c886:	f00a ffbb 	bl	8017800 <sys_mutex_lock>
  fn(apimsg);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	68b8      	ldr	r0, [r7, #8]
 800c88e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c890:	4803      	ldr	r0, [pc, #12]	@ (800c8a0 <tcpip_send_msg_wait_sem+0x28>)
 800c892:	f00a ffc4 	bl	801781e <sys_mutex_unlock>
  return ERR_OK;
 800c896:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200087ac 	.word	0x200087ac

0800c8a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c8ae:	f000 f871 	bl	800c994 <lwip_init>

  tcpip_init_done = initfunc;
 800c8b2:	4a17      	ldr	r2, [pc, #92]	@ (800c910 <tcpip_init+0x6c>)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c8b8:	4a16      	ldr	r2, [pc, #88]	@ (800c914 <tcpip_init+0x70>)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c8be:	2106      	movs	r1, #6
 800c8c0:	4815      	ldr	r0, [pc, #84]	@ (800c918 <tcpip_init+0x74>)
 800c8c2:	f00a fe41 	bl	8017548 <sys_mbox_new>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d006      	beq.n	800c8da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c8cc:	4b13      	ldr	r3, [pc, #76]	@ (800c91c <tcpip_init+0x78>)
 800c8ce:	f240 2261 	movw	r2, #609	@ 0x261
 800c8d2:	4913      	ldr	r1, [pc, #76]	@ (800c920 <tcpip_init+0x7c>)
 800c8d4:	4813      	ldr	r0, [pc, #76]	@ (800c924 <tcpip_init+0x80>)
 800c8d6:	f00b fd25 	bl	8018324 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c8da:	4813      	ldr	r0, [pc, #76]	@ (800c928 <tcpip_init+0x84>)
 800c8dc:	f00a ff7a 	bl	80177d4 <sys_mutex_new>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d006      	beq.n	800c8f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c91c <tcpip_init+0x78>)
 800c8e8:	f240 2265 	movw	r2, #613	@ 0x265
 800c8ec:	490f      	ldr	r1, [pc, #60]	@ (800c92c <tcpip_init+0x88>)
 800c8ee:	480d      	ldr	r0, [pc, #52]	@ (800c924 <tcpip_init+0x80>)
 800c8f0:	f00b fd18 	bl	8018324 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c8f4:	2318      	movs	r3, #24
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	490c      	ldr	r1, [pc, #48]	@ (800c930 <tcpip_init+0x8c>)
 800c900:	480c      	ldr	r0, [pc, #48]	@ (800c934 <tcpip_init+0x90>)
 800c902:	f00a ff99 	bl	8017838 <sys_thread_new>
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	200087a0 	.word	0x200087a0
 800c914:	200087a4 	.word	0x200087a4
 800c918:	200087a8 	.word	0x200087a8
 800c91c:	0801b1a0 	.word	0x0801b1a0
 800c920:	0801b228 	.word	0x0801b228
 800c924:	0801b1f0 	.word	0x0801b1f0
 800c928:	200087ac 	.word	0x200087ac
 800c92c:	0801b24c 	.word	0x0801b24c
 800c930:	0800c635 	.word	0x0800c635
 800c934:	0801b270 	.word	0x0801b270

0800c938 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c942:	88fb      	ldrh	r3, [r7, #6]
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	b21a      	sxth	r2, r3
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	0a1b      	lsrs	r3, r3, #8
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	b21b      	sxth	r3, r3
 800c950:	4313      	orrs	r3, r2
 800c952:	b21b      	sxth	r3, r3
 800c954:	b29b      	uxth	r3, r3
}
 800c956:	4618      	mov	r0, r3
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	061a      	lsls	r2, r3, #24
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c976:	431a      	orrs	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c980:	431a      	orrs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	0e1b      	lsrs	r3, r3, #24
 800c986:	4313      	orrs	r3, r2
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c99e:	f00a ff0d 	bl	80177bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c9a2:	f000 f8d5 	bl	800cb50 <mem_init>
  memp_init();
 800c9a6:	f000 fc31 	bl	800d20c <memp_init>
  pbuf_init();
  netif_init();
 800c9aa:	f000 fcf7 	bl	800d39c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c9ae:	f008 f805 	bl	80149bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c9b2:	f001 fe07 	bl	800e5c4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c9b6:	f007 ff47 	bl	8014848 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
	...

0800c9c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c9ce:	4b05      	ldr	r3, [pc, #20]	@ (800c9e4 <ptr_to_mem+0x20>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	4413      	add	r3, r2
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	2000afdc 	.word	0x2000afdc

0800c9e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ca08 <mem_to_ptr+0x20>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	b29b      	uxth	r3, r3
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	2000afdc 	.word	0x2000afdc

0800ca0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca0c:	b590      	push	{r4, r7, lr}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca14:	4b45      	ldr	r3, [pc, #276]	@ (800cb2c <plug_holes+0x120>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d206      	bcs.n	800ca2c <plug_holes+0x20>
 800ca1e:	4b44      	ldr	r3, [pc, #272]	@ (800cb30 <plug_holes+0x124>)
 800ca20:	f240 12df 	movw	r2, #479	@ 0x1df
 800ca24:	4943      	ldr	r1, [pc, #268]	@ (800cb34 <plug_holes+0x128>)
 800ca26:	4844      	ldr	r0, [pc, #272]	@ (800cb38 <plug_holes+0x12c>)
 800ca28:	f00b fc7c 	bl	8018324 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca2c:	4b43      	ldr	r3, [pc, #268]	@ (800cb3c <plug_holes+0x130>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d306      	bcc.n	800ca44 <plug_holes+0x38>
 800ca36:	4b3e      	ldr	r3, [pc, #248]	@ (800cb30 <plug_holes+0x124>)
 800ca38:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ca3c:	4940      	ldr	r1, [pc, #256]	@ (800cb40 <plug_holes+0x134>)
 800ca3e:	483e      	ldr	r0, [pc, #248]	@ (800cb38 <plug_holes+0x12c>)
 800ca40:	f00b fc70 	bl	8018324 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	791b      	ldrb	r3, [r3, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d006      	beq.n	800ca5a <plug_holes+0x4e>
 800ca4c:	4b38      	ldr	r3, [pc, #224]	@ (800cb30 <plug_holes+0x124>)
 800ca4e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ca52:	493c      	ldr	r1, [pc, #240]	@ (800cb44 <plug_holes+0x138>)
 800ca54:	4838      	ldr	r0, [pc, #224]	@ (800cb38 <plug_holes+0x12c>)
 800ca56:	f00b fc65 	bl	8018324 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ca62:	d906      	bls.n	800ca72 <plug_holes+0x66>
 800ca64:	4b32      	ldr	r3, [pc, #200]	@ (800cb30 <plug_holes+0x124>)
 800ca66:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ca6a:	4937      	ldr	r1, [pc, #220]	@ (800cb48 <plug_holes+0x13c>)
 800ca6c:	4832      	ldr	r0, [pc, #200]	@ (800cb38 <plug_holes+0x12c>)
 800ca6e:	f00b fc59 	bl	8018324 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff ffa4 	bl	800c9c4 <ptr_to_mem>
 800ca7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d024      	beq.n	800cad0 <plug_holes+0xc4>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	791b      	ldrb	r3, [r3, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d120      	bne.n	800cad0 <plug_holes+0xc4>
 800ca8e:	4b2b      	ldr	r3, [pc, #172]	@ (800cb3c <plug_holes+0x130>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d01b      	beq.n	800cad0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ca98:	4b2c      	ldr	r3, [pc, #176]	@ (800cb4c <plug_holes+0x140>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d102      	bne.n	800caa8 <plug_holes+0x9c>
      lfree = mem;
 800caa2:	4a2a      	ldr	r2, [pc, #168]	@ (800cb4c <plug_holes+0x140>)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	881a      	ldrh	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cab8:	d00a      	beq.n	800cad0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff ff80 	bl	800c9c4 <ptr_to_mem>
 800cac4:	4604      	mov	r4, r0
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff ff8e 	bl	800c9e8 <mem_to_ptr>
 800cacc:	4603      	mov	r3, r0
 800cace:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	885b      	ldrh	r3, [r3, #2]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7ff ff75 	bl	800c9c4 <ptr_to_mem>
 800cada:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d01f      	beq.n	800cb24 <plug_holes+0x118>
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	791b      	ldrb	r3, [r3, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d11b      	bne.n	800cb24 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800caec:	4b17      	ldr	r3, [pc, #92]	@ (800cb4c <plug_holes+0x140>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d102      	bne.n	800cafc <plug_holes+0xf0>
      lfree = pmem;
 800caf6:	4a15      	ldr	r2, [pc, #84]	@ (800cb4c <plug_holes+0x140>)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	881a      	ldrh	r2, [r3, #0]
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb0c:	d00a      	beq.n	800cb24 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff ff56 	bl	800c9c4 <ptr_to_mem>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	68b8      	ldr	r0, [r7, #8]
 800cb1c:	f7ff ff64 	bl	800c9e8 <mem_to_ptr>
 800cb20:	4603      	mov	r3, r0
 800cb22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb24:	bf00      	nop
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd90      	pop	{r4, r7, pc}
 800cb2c:	2000afdc 	.word	0x2000afdc
 800cb30:	0801b280 	.word	0x0801b280
 800cb34:	0801b2b0 	.word	0x0801b2b0
 800cb38:	0801b2c8 	.word	0x0801b2c8
 800cb3c:	2000afe0 	.word	0x2000afe0
 800cb40:	0801b2f0 	.word	0x0801b2f0
 800cb44:	0801b30c 	.word	0x0801b30c
 800cb48:	0801b328 	.word	0x0801b328
 800cb4c:	2000afe8 	.word	0x2000afe8

0800cb50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cb56:	4b1f      	ldr	r3, [pc, #124]	@ (800cbd4 <mem_init+0x84>)
 800cb58:	3303      	adds	r3, #3
 800cb5a:	f023 0303 	bic.w	r3, r3, #3
 800cb5e:	461a      	mov	r2, r3
 800cb60:	4b1d      	ldr	r3, [pc, #116]	@ (800cbd8 <mem_init+0x88>)
 800cb62:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cb64:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd8 <mem_init+0x88>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cb70:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cb7e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800cb82:	f7ff ff1f 	bl	800c9c4 <ptr_to_mem>
 800cb86:	4603      	mov	r3, r0
 800cb88:	4a14      	ldr	r2, [pc, #80]	@ (800cbdc <mem_init+0x8c>)
 800cb8a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cb8c:	4b13      	ldr	r3, [pc, #76]	@ (800cbdc <mem_init+0x8c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2201      	movs	r2, #1
 800cb92:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cb94:	4b11      	ldr	r3, [pc, #68]	@ (800cbdc <mem_init+0x8c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cb9c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cbdc <mem_init+0x8c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cba6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cba8:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd8 <mem_init+0x88>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a0c      	ldr	r2, [pc, #48]	@ (800cbe0 <mem_init+0x90>)
 800cbae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cbb0:	480c      	ldr	r0, [pc, #48]	@ (800cbe4 <mem_init+0x94>)
 800cbb2:	f00a fe0f 	bl	80177d4 <sys_mutex_new>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d006      	beq.n	800cbca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <mem_init+0x98>)
 800cbbe:	f240 221f 	movw	r2, #543	@ 0x21f
 800cbc2:	490a      	ldr	r1, [pc, #40]	@ (800cbec <mem_init+0x9c>)
 800cbc4:	480a      	ldr	r0, [pc, #40]	@ (800cbf0 <mem_init+0xa0>)
 800cbc6:	f00b fbad 	bl	8018324 <iprintf>
  }
}
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	200087c8 	.word	0x200087c8
 800cbd8:	2000afdc 	.word	0x2000afdc
 800cbdc:	2000afe0 	.word	0x2000afe0
 800cbe0:	2000afe8 	.word	0x2000afe8
 800cbe4:	2000afe4 	.word	0x2000afe4
 800cbe8:	0801b280 	.word	0x0801b280
 800cbec:	0801b354 	.word	0x0801b354
 800cbf0:	0801b2c8 	.word	0x0801b2c8

0800cbf4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fef3 	bl	800c9e8 <mem_to_ptr>
 800cc02:	4603      	mov	r3, r0
 800cc04:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff feda 	bl	800c9c4 <ptr_to_mem>
 800cc10:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	885b      	ldrh	r3, [r3, #2]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fed4 	bl	800c9c4 <ptr_to_mem>
 800cc1c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc26:	d818      	bhi.n	800cc5a <mem_link_valid+0x66>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	885b      	ldrh	r3, [r3, #2]
 800cc2c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc30:	d813      	bhi.n	800cc5a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc36:	8afa      	ldrh	r2, [r7, #22]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d004      	beq.n	800cc46 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	8afa      	ldrh	r2, [r7, #22]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d109      	bne.n	800cc5a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc46:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <mem_link_valid+0x74>)
 800cc48:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d006      	beq.n	800cc5e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	885b      	ldrh	r3, [r3, #2]
 800cc54:	8afa      	ldrh	r2, [r7, #22]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d001      	beq.n	800cc5e <mem_link_valid+0x6a>
    return 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e000      	b.n	800cc60 <mem_link_valid+0x6c>
  }
  return 1;
 800cc5e:	2301      	movs	r3, #1
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	2000afe0 	.word	0x2000afe0

0800cc6c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d070      	beq.n	800cd5c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00d      	beq.n	800cca0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cc84:	4b37      	ldr	r3, [pc, #220]	@ (800cd64 <mem_free+0xf8>)
 800cc86:	f240 2273 	movw	r2, #627	@ 0x273
 800cc8a:	4937      	ldr	r1, [pc, #220]	@ (800cd68 <mem_free+0xfc>)
 800cc8c:	4837      	ldr	r0, [pc, #220]	@ (800cd6c <mem_free+0x100>)
 800cc8e:	f00b fb49 	bl	8018324 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc92:	f00a fdf1 	bl	8017878 <sys_arch_protect>
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f00a fdfb 	bl	8017894 <sys_arch_unprotect>
    return;
 800cc9e:	e05e      	b.n	800cd5e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3b08      	subs	r3, #8
 800cca4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cca6:	4b32      	ldr	r3, [pc, #200]	@ (800cd70 <mem_free+0x104>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d306      	bcc.n	800ccbe <mem_free+0x52>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f103 020c 	add.w	r2, r3, #12
 800ccb6:	4b2f      	ldr	r3, [pc, #188]	@ (800cd74 <mem_free+0x108>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d90d      	bls.n	800ccda <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ccbe:	4b29      	ldr	r3, [pc, #164]	@ (800cd64 <mem_free+0xf8>)
 800ccc0:	f240 227f 	movw	r2, #639	@ 0x27f
 800ccc4:	492c      	ldr	r1, [pc, #176]	@ (800cd78 <mem_free+0x10c>)
 800ccc6:	4829      	ldr	r0, [pc, #164]	@ (800cd6c <mem_free+0x100>)
 800ccc8:	f00b fb2c 	bl	8018324 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cccc:	f00a fdd4 	bl	8017878 <sys_arch_protect>
 800ccd0:	6138      	str	r0, [r7, #16]
 800ccd2:	6938      	ldr	r0, [r7, #16]
 800ccd4:	f00a fdde 	bl	8017894 <sys_arch_unprotect>
    return;
 800ccd8:	e041      	b.n	800cd5e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ccda:	4828      	ldr	r0, [pc, #160]	@ (800cd7c <mem_free+0x110>)
 800ccdc:	f00a fd90 	bl	8017800 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	791b      	ldrb	r3, [r3, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d110      	bne.n	800cd0a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cce8:	4b1e      	ldr	r3, [pc, #120]	@ (800cd64 <mem_free+0xf8>)
 800ccea:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ccee:	4924      	ldr	r1, [pc, #144]	@ (800cd80 <mem_free+0x114>)
 800ccf0:	481e      	ldr	r0, [pc, #120]	@ (800cd6c <mem_free+0x100>)
 800ccf2:	f00b fb17 	bl	8018324 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ccf6:	4821      	ldr	r0, [pc, #132]	@ (800cd7c <mem_free+0x110>)
 800ccf8:	f00a fd91 	bl	801781e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ccfc:	f00a fdbc 	bl	8017878 <sys_arch_protect>
 800cd00:	6178      	str	r0, [r7, #20]
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f00a fdc6 	bl	8017894 <sys_arch_unprotect>
    return;
 800cd08:	e029      	b.n	800cd5e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cd0a:	69f8      	ldr	r0, [r7, #28]
 800cd0c:	f7ff ff72 	bl	800cbf4 <mem_link_valid>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d110      	bne.n	800cd38 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd16:	4b13      	ldr	r3, [pc, #76]	@ (800cd64 <mem_free+0xf8>)
 800cd18:	f240 2295 	movw	r2, #661	@ 0x295
 800cd1c:	4919      	ldr	r1, [pc, #100]	@ (800cd84 <mem_free+0x118>)
 800cd1e:	4813      	ldr	r0, [pc, #76]	@ (800cd6c <mem_free+0x100>)
 800cd20:	f00b fb00 	bl	8018324 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd24:	4815      	ldr	r0, [pc, #84]	@ (800cd7c <mem_free+0x110>)
 800cd26:	f00a fd7a 	bl	801781e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd2a:	f00a fda5 	bl	8017878 <sys_arch_protect>
 800cd2e:	61b8      	str	r0, [r7, #24]
 800cd30:	69b8      	ldr	r0, [r7, #24]
 800cd32:	f00a fdaf 	bl	8017894 <sys_arch_unprotect>
    return;
 800cd36:	e012      	b.n	800cd5e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd3e:	4b12      	ldr	r3, [pc, #72]	@ (800cd88 <mem_free+0x11c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	69fa      	ldr	r2, [r7, #28]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d202      	bcs.n	800cd4e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd48:	4a0f      	ldr	r2, [pc, #60]	@ (800cd88 <mem_free+0x11c>)
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd4e:	69f8      	ldr	r0, [r7, #28]
 800cd50:	f7ff fe5c 	bl	800ca0c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd54:	4809      	ldr	r0, [pc, #36]	@ (800cd7c <mem_free+0x110>)
 800cd56:	f00a fd62 	bl	801781e <sys_mutex_unlock>
 800cd5a:	e000      	b.n	800cd5e <mem_free+0xf2>
    return;
 800cd5c:	bf00      	nop
}
 800cd5e:	3720      	adds	r7, #32
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	0801b280 	.word	0x0801b280
 800cd68:	0801b370 	.word	0x0801b370
 800cd6c:	0801b2c8 	.word	0x0801b2c8
 800cd70:	2000afdc 	.word	0x2000afdc
 800cd74:	2000afe0 	.word	0x2000afe0
 800cd78:	0801b394 	.word	0x0801b394
 800cd7c:	2000afe4 	.word	0x2000afe4
 800cd80:	0801b3b0 	.word	0x0801b3b0
 800cd84:	0801b3d8 	.word	0x0801b3d8
 800cd88:	2000afe8 	.word	0x2000afe8

0800cd8c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b088      	sub	sp, #32
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cd98:	887b      	ldrh	r3, [r7, #2]
 800cd9a:	3303      	adds	r3, #3
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cda4:	8bfb      	ldrh	r3, [r7, #30]
 800cda6:	2b0b      	cmp	r3, #11
 800cda8:	d801      	bhi.n	800cdae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cdaa:	230c      	movs	r3, #12
 800cdac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cdae:	8bfb      	ldrh	r3, [r7, #30]
 800cdb0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cdb4:	d803      	bhi.n	800cdbe <mem_trim+0x32>
 800cdb6:	8bfa      	ldrh	r2, [r7, #30]
 800cdb8:	887b      	ldrh	r3, [r7, #2]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d201      	bcs.n	800cdc2 <mem_trim+0x36>
    return NULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e0d8      	b.n	800cf74 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cdc2:	4b6e      	ldr	r3, [pc, #440]	@ (800cf7c <mem_trim+0x1f0>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d304      	bcc.n	800cdd6 <mem_trim+0x4a>
 800cdcc:	4b6c      	ldr	r3, [pc, #432]	@ (800cf80 <mem_trim+0x1f4>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d306      	bcc.n	800cde4 <mem_trim+0x58>
 800cdd6:	4b6b      	ldr	r3, [pc, #428]	@ (800cf84 <mem_trim+0x1f8>)
 800cdd8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cddc:	496a      	ldr	r1, [pc, #424]	@ (800cf88 <mem_trim+0x1fc>)
 800cdde:	486b      	ldr	r0, [pc, #428]	@ (800cf8c <mem_trim+0x200>)
 800cde0:	f00b faa0 	bl	8018324 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cde4:	4b65      	ldr	r3, [pc, #404]	@ (800cf7c <mem_trim+0x1f0>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d304      	bcc.n	800cdf8 <mem_trim+0x6c>
 800cdee:	4b64      	ldr	r3, [pc, #400]	@ (800cf80 <mem_trim+0x1f4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d307      	bcc.n	800ce08 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cdf8:	f00a fd3e 	bl	8017878 <sys_arch_protect>
 800cdfc:	60b8      	str	r0, [r7, #8]
 800cdfe:	68b8      	ldr	r0, [r7, #8]
 800ce00:	f00a fd48 	bl	8017894 <sys_arch_unprotect>
    return rmem;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	e0b5      	b.n	800cf74 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3b08      	subs	r3, #8
 800ce0c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce0e:	69b8      	ldr	r0, [r7, #24]
 800ce10:	f7ff fdea 	bl	800c9e8 <mem_to_ptr>
 800ce14:	4603      	mov	r3, r0
 800ce16:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	881a      	ldrh	r2, [r3, #0]
 800ce1c:	8afb      	ldrh	r3, [r7, #22]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b08      	subs	r3, #8
 800ce24:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce26:	8bfa      	ldrh	r2, [r7, #30]
 800ce28:	8abb      	ldrh	r3, [r7, #20]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d906      	bls.n	800ce3c <mem_trim+0xb0>
 800ce2e:	4b55      	ldr	r3, [pc, #340]	@ (800cf84 <mem_trim+0x1f8>)
 800ce30:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ce34:	4956      	ldr	r1, [pc, #344]	@ (800cf90 <mem_trim+0x204>)
 800ce36:	4855      	ldr	r0, [pc, #340]	@ (800cf8c <mem_trim+0x200>)
 800ce38:	f00b fa74 	bl	8018324 <iprintf>
  if (newsize > size) {
 800ce3c:	8bfa      	ldrh	r2, [r7, #30]
 800ce3e:	8abb      	ldrh	r3, [r7, #20]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d901      	bls.n	800ce48 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	e095      	b.n	800cf74 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ce48:	8bfa      	ldrh	r2, [r7, #30]
 800ce4a:	8abb      	ldrh	r3, [r7, #20]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d101      	bne.n	800ce54 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	e08f      	b.n	800cf74 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ce54:	484f      	ldr	r0, [pc, #316]	@ (800cf94 <mem_trim+0x208>)
 800ce56:	f00a fcd3 	bl	8017800 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fdb0 	bl	800c9c4 <ptr_to_mem>
 800ce64:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	791b      	ldrb	r3, [r3, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d13f      	bne.n	800ceee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce76:	d106      	bne.n	800ce86 <mem_trim+0xfa>
 800ce78:	4b42      	ldr	r3, [pc, #264]	@ (800cf84 <mem_trim+0x1f8>)
 800ce7a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ce7e:	4946      	ldr	r1, [pc, #280]	@ (800cf98 <mem_trim+0x20c>)
 800ce80:	4842      	ldr	r0, [pc, #264]	@ (800cf8c <mem_trim+0x200>)
 800ce82:	f00b fa4f 	bl	8018324 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce8c:	8afa      	ldrh	r2, [r7, #22]
 800ce8e:	8bfb      	ldrh	r3, [r7, #30]
 800ce90:	4413      	add	r3, r2
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	3308      	adds	r3, #8
 800ce96:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ce98:	4b40      	ldr	r3, [pc, #256]	@ (800cf9c <mem_trim+0x210>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d106      	bne.n	800ceb0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cea2:	89fb      	ldrh	r3, [r7, #14]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff fd8d 	bl	800c9c4 <ptr_to_mem>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	4a3b      	ldr	r2, [pc, #236]	@ (800cf9c <mem_trim+0x210>)
 800ceae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ceb0:	89fb      	ldrh	r3, [r7, #14]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fd86 	bl	800c9c4 <ptr_to_mem>
 800ceb8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2200      	movs	r2, #0
 800cebe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	89ba      	ldrh	r2, [r7, #12]
 800cec4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	8afa      	ldrh	r2, [r7, #22]
 800ceca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	89fa      	ldrh	r2, [r7, #14]
 800ced0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ceda:	d047      	beq.n	800cf6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff fd6f 	bl	800c9c4 <ptr_to_mem>
 800cee6:	4602      	mov	r2, r0
 800cee8:	89fb      	ldrh	r3, [r7, #14]
 800ceea:	8053      	strh	r3, [r2, #2]
 800ceec:	e03e      	b.n	800cf6c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ceee:	8bfb      	ldrh	r3, [r7, #30]
 800cef0:	f103 0214 	add.w	r2, r3, #20
 800cef4:	8abb      	ldrh	r3, [r7, #20]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d838      	bhi.n	800cf6c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cefa:	8afa      	ldrh	r2, [r7, #22]
 800cefc:	8bfb      	ldrh	r3, [r7, #30]
 800cefe:	4413      	add	r3, r2
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	3308      	adds	r3, #8
 800cf04:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf0e:	d106      	bne.n	800cf1e <mem_trim+0x192>
 800cf10:	4b1c      	ldr	r3, [pc, #112]	@ (800cf84 <mem_trim+0x1f8>)
 800cf12:	f240 3216 	movw	r2, #790	@ 0x316
 800cf16:	4920      	ldr	r1, [pc, #128]	@ (800cf98 <mem_trim+0x20c>)
 800cf18:	481c      	ldr	r0, [pc, #112]	@ (800cf8c <mem_trim+0x200>)
 800cf1a:	f00b fa03 	bl	8018324 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf1e:	89fb      	ldrh	r3, [r7, #14]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff fd4f 	bl	800c9c4 <ptr_to_mem>
 800cf26:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cf28:	4b1c      	ldr	r3, [pc, #112]	@ (800cf9c <mem_trim+0x210>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d202      	bcs.n	800cf38 <mem_trim+0x1ac>
      lfree = mem2;
 800cf32:	4a1a      	ldr	r2, [pc, #104]	@ (800cf9c <mem_trim+0x210>)
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	881a      	ldrh	r2, [r3, #0]
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	8afa      	ldrh	r2, [r7, #22]
 800cf4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	89fa      	ldrh	r2, [r7, #14]
 800cf50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf5a:	d007      	beq.n	800cf6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff fd2f 	bl	800c9c4 <ptr_to_mem>
 800cf66:	4602      	mov	r2, r0
 800cf68:	89fb      	ldrh	r3, [r7, #14]
 800cf6a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cf6c:	4809      	ldr	r0, [pc, #36]	@ (800cf94 <mem_trim+0x208>)
 800cf6e:	f00a fc56 	bl	801781e <sys_mutex_unlock>
  return rmem;
 800cf72:	687b      	ldr	r3, [r7, #4]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	2000afdc 	.word	0x2000afdc
 800cf80:	2000afe0 	.word	0x2000afe0
 800cf84:	0801b280 	.word	0x0801b280
 800cf88:	0801b40c 	.word	0x0801b40c
 800cf8c:	0801b2c8 	.word	0x0801b2c8
 800cf90:	0801b424 	.word	0x0801b424
 800cf94:	2000afe4 	.word	0x2000afe4
 800cf98:	0801b444 	.word	0x0801b444
 800cf9c:	2000afe8 	.word	0x2000afe8

0800cfa0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cfaa:	88fb      	ldrh	r3, [r7, #6]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <mem_malloc+0x14>
    return NULL;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e0e2      	b.n	800d17a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cfb4:	88fb      	ldrh	r3, [r7, #6]
 800cfb6:	3303      	adds	r3, #3
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cfc0:	8bbb      	ldrh	r3, [r7, #28]
 800cfc2:	2b0b      	cmp	r3, #11
 800cfc4:	d801      	bhi.n	800cfca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cfca:	8bbb      	ldrh	r3, [r7, #28]
 800cfcc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cfd0:	d803      	bhi.n	800cfda <mem_malloc+0x3a>
 800cfd2:	8bba      	ldrh	r2, [r7, #28]
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d201      	bcs.n	800cfde <mem_malloc+0x3e>
    return NULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e0cd      	b.n	800d17a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cfde:	4869      	ldr	r0, [pc, #420]	@ (800d184 <mem_malloc+0x1e4>)
 800cfe0:	f00a fc0e 	bl	8017800 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cfe4:	4b68      	ldr	r3, [pc, #416]	@ (800d188 <mem_malloc+0x1e8>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fcfd 	bl	800c9e8 <mem_to_ptr>
 800cfee:	4603      	mov	r3, r0
 800cff0:	83fb      	strh	r3, [r7, #30]
 800cff2:	e0b7      	b.n	800d164 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cff4:	8bfb      	ldrh	r3, [r7, #30]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fce4 	bl	800c9c4 <ptr_to_mem>
 800cffc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	791b      	ldrb	r3, [r3, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f040 80a7 	bne.w	800d156 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	8bfb      	ldrh	r3, [r7, #30]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	f1a3 0208 	sub.w	r2, r3, #8
 800d016:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d018:	429a      	cmp	r2, r3
 800d01a:	f0c0 809c 	bcc.w	800d156 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	461a      	mov	r2, r3
 800d024:	8bfb      	ldrh	r3, [r7, #30]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	f1a3 0208 	sub.w	r2, r3, #8
 800d02c:	8bbb      	ldrh	r3, [r7, #28]
 800d02e:	3314      	adds	r3, #20
 800d030:	429a      	cmp	r2, r3
 800d032:	d333      	bcc.n	800d09c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d034:	8bfa      	ldrh	r2, [r7, #30]
 800d036:	8bbb      	ldrh	r3, [r7, #28]
 800d038:	4413      	add	r3, r2
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	3308      	adds	r3, #8
 800d03e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d040:	8a7b      	ldrh	r3, [r7, #18]
 800d042:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d046:	d106      	bne.n	800d056 <mem_malloc+0xb6>
 800d048:	4b50      	ldr	r3, [pc, #320]	@ (800d18c <mem_malloc+0x1ec>)
 800d04a:	f240 3287 	movw	r2, #903	@ 0x387
 800d04e:	4950      	ldr	r1, [pc, #320]	@ (800d190 <mem_malloc+0x1f0>)
 800d050:	4850      	ldr	r0, [pc, #320]	@ (800d194 <mem_malloc+0x1f4>)
 800d052:	f00b f967 	bl	8018324 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d056:	8a7b      	ldrh	r3, [r7, #18]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fcb3 	bl	800c9c4 <ptr_to_mem>
 800d05e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	881a      	ldrh	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	8bfa      	ldrh	r2, [r7, #30]
 800d072:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	8a7a      	ldrh	r2, [r7, #18]
 800d078:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2201      	movs	r2, #1
 800d07e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	881b      	ldrh	r3, [r3, #0]
 800d084:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d088:	d00b      	beq.n	800d0a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fc98 	bl	800c9c4 <ptr_to_mem>
 800d094:	4602      	mov	r2, r0
 800d096:	8a7b      	ldrh	r3, [r7, #18]
 800d098:	8053      	strh	r3, [r2, #2]
 800d09a:	e002      	b.n	800d0a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d0a2:	4b39      	ldr	r3, [pc, #228]	@ (800d188 <mem_malloc+0x1e8>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d127      	bne.n	800d0fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d0ac:	4b36      	ldr	r3, [pc, #216]	@ (800d188 <mem_malloc+0x1e8>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d0b2:	e005      	b.n	800d0c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	881b      	ldrh	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff fc83 	bl	800c9c4 <ptr_to_mem>
 800d0be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	791b      	ldrb	r3, [r3, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d004      	beq.n	800d0d2 <mem_malloc+0x132>
 800d0c8:	4b33      	ldr	r3, [pc, #204]	@ (800d198 <mem_malloc+0x1f8>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d1f0      	bne.n	800d0b4 <mem_malloc+0x114>
          }
          lfree = cur;
 800d0d2:	4a2d      	ldr	r2, [pc, #180]	@ (800d188 <mem_malloc+0x1e8>)
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d0d8:	4b2b      	ldr	r3, [pc, #172]	@ (800d188 <mem_malloc+0x1e8>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	4b2e      	ldr	r3, [pc, #184]	@ (800d198 <mem_malloc+0x1f8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d00b      	beq.n	800d0fc <mem_malloc+0x15c>
 800d0e4:	4b28      	ldr	r3, [pc, #160]	@ (800d188 <mem_malloc+0x1e8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	791b      	ldrb	r3, [r3, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d006      	beq.n	800d0fc <mem_malloc+0x15c>
 800d0ee:	4b27      	ldr	r3, [pc, #156]	@ (800d18c <mem_malloc+0x1ec>)
 800d0f0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d0f4:	4929      	ldr	r1, [pc, #164]	@ (800d19c <mem_malloc+0x1fc>)
 800d0f6:	4827      	ldr	r0, [pc, #156]	@ (800d194 <mem_malloc+0x1f4>)
 800d0f8:	f00b f914 	bl	8018324 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d0fc:	4821      	ldr	r0, [pc, #132]	@ (800d184 <mem_malloc+0x1e4>)
 800d0fe:	f00a fb8e 	bl	801781e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d102:	8bba      	ldrh	r2, [r7, #28]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	4413      	add	r3, r2
 800d108:	3308      	adds	r3, #8
 800d10a:	4a23      	ldr	r2, [pc, #140]	@ (800d198 <mem_malloc+0x1f8>)
 800d10c:	6812      	ldr	r2, [r2, #0]
 800d10e:	4293      	cmp	r3, r2
 800d110:	d906      	bls.n	800d120 <mem_malloc+0x180>
 800d112:	4b1e      	ldr	r3, [pc, #120]	@ (800d18c <mem_malloc+0x1ec>)
 800d114:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d118:	4921      	ldr	r1, [pc, #132]	@ (800d1a0 <mem_malloc+0x200>)
 800d11a:	481e      	ldr	r0, [pc, #120]	@ (800d194 <mem_malloc+0x1f4>)
 800d11c:	f00b f902 	bl	8018324 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d006      	beq.n	800d138 <mem_malloc+0x198>
 800d12a:	4b18      	ldr	r3, [pc, #96]	@ (800d18c <mem_malloc+0x1ec>)
 800d12c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d130:	491c      	ldr	r1, [pc, #112]	@ (800d1a4 <mem_malloc+0x204>)
 800d132:	4818      	ldr	r0, [pc, #96]	@ (800d194 <mem_malloc+0x1f4>)
 800d134:	f00b f8f6 	bl	8018324 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f003 0303 	and.w	r3, r3, #3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d006      	beq.n	800d150 <mem_malloc+0x1b0>
 800d142:	4b12      	ldr	r3, [pc, #72]	@ (800d18c <mem_malloc+0x1ec>)
 800d144:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d148:	4917      	ldr	r1, [pc, #92]	@ (800d1a8 <mem_malloc+0x208>)
 800d14a:	4812      	ldr	r0, [pc, #72]	@ (800d194 <mem_malloc+0x1f4>)
 800d14c:	f00b f8ea 	bl	8018324 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	3308      	adds	r3, #8
 800d154:	e011      	b.n	800d17a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d156:	8bfb      	ldrh	r3, [r7, #30]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fc33 	bl	800c9c4 <ptr_to_mem>
 800d15e:	4603      	mov	r3, r0
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d164:	8bfa      	ldrh	r2, [r7, #30]
 800d166:	8bbb      	ldrh	r3, [r7, #28]
 800d168:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800d16c:	429a      	cmp	r2, r3
 800d16e:	f4ff af41 	bcc.w	800cff4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d172:	4804      	ldr	r0, [pc, #16]	@ (800d184 <mem_malloc+0x1e4>)
 800d174:	f00a fb53 	bl	801781e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3720      	adds	r7, #32
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	2000afe4 	.word	0x2000afe4
 800d188:	2000afe8 	.word	0x2000afe8
 800d18c:	0801b280 	.word	0x0801b280
 800d190:	0801b444 	.word	0x0801b444
 800d194:	0801b2c8 	.word	0x0801b2c8
 800d198:	2000afe0 	.word	0x2000afe0
 800d19c:	0801b458 	.word	0x0801b458
 800d1a0:	0801b474 	.word	0x0801b474
 800d1a4:	0801b4a4 	.word	0x0801b4a4
 800d1a8:	0801b4d4 	.word	0x0801b4d4

0800d1ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	3303      	adds	r3, #3
 800d1c2:	f023 0303 	bic.w	r3, r3, #3
 800d1c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	e011      	b.n	800d1f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	60fb      	str	r3, [r7, #12]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	885b      	ldrh	r3, [r3, #2]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	dbe7      	blt.n	800d1ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	3714      	adds	r7, #20
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d212:	2300      	movs	r3, #0
 800d214:	80fb      	strh	r3, [r7, #6]
 800d216:	e009      	b.n	800d22c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	4a08      	ldr	r2, [pc, #32]	@ (800d23c <memp_init+0x30>)
 800d21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff ffc3 	bl	800d1ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	3301      	adds	r3, #1
 800d22a:	80fb      	strh	r3, [r7, #6]
 800d22c:	88fb      	ldrh	r3, [r7, #6]
 800d22e:	2b0c      	cmp	r3, #12
 800d230:	d9f2      	bls.n	800d218 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d232:	bf00      	nop
 800d234:	bf00      	nop
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	0801dd04 	.word	0x0801dd04

0800d240 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d248:	f00a fb16 	bl	8017878 <sys_arch_protect>
 800d24c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d015      	beq.n	800d288 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	f003 0303 	and.w	r3, r3, #3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d006      	beq.n	800d27e <do_memp_malloc_pool+0x3e>
 800d270:	4b09      	ldr	r3, [pc, #36]	@ (800d298 <do_memp_malloc_pool+0x58>)
 800d272:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d276:	4909      	ldr	r1, [pc, #36]	@ (800d29c <do_memp_malloc_pool+0x5c>)
 800d278:	4809      	ldr	r0, [pc, #36]	@ (800d2a0 <do_memp_malloc_pool+0x60>)
 800d27a:	f00b f853 	bl	8018324 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f00a fb08 	bl	8017894 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	e003      	b.n	800d290 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f00a fb03 	bl	8017894 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	0801b4f8 	.word	0x0801b4f8
 800d29c:	0801b528 	.word	0x0801b528
 800d2a0:	0801b54c 	.word	0x0801b54c

0800d2a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d2ae:	79fb      	ldrb	r3, [r7, #7]
 800d2b0:	2b0c      	cmp	r3, #12
 800d2b2:	d908      	bls.n	800d2c6 <memp_malloc+0x22>
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d2e0 <memp_malloc+0x3c>)
 800d2b6:	f240 1257 	movw	r2, #343	@ 0x157
 800d2ba:	490a      	ldr	r1, [pc, #40]	@ (800d2e4 <memp_malloc+0x40>)
 800d2bc:	480a      	ldr	r0, [pc, #40]	@ (800d2e8 <memp_malloc+0x44>)
 800d2be:	f00b f831 	bl	8018324 <iprintf>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e008      	b.n	800d2d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	4a08      	ldr	r2, [pc, #32]	@ (800d2ec <memp_malloc+0x48>)
 800d2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff ffb6 	bl	800d240 <do_memp_malloc_pool>
 800d2d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	0801b4f8 	.word	0x0801b4f8
 800d2e4:	0801b588 	.word	0x0801b588
 800d2e8:	0801b54c 	.word	0x0801b54c
 800d2ec:	0801dd04 	.word	0x0801dd04

0800d2f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f003 0303 	and.w	r3, r3, #3
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <do_memp_free_pool+0x22>
 800d304:	4b0d      	ldr	r3, [pc, #52]	@ (800d33c <do_memp_free_pool+0x4c>)
 800d306:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d30a:	490d      	ldr	r1, [pc, #52]	@ (800d340 <do_memp_free_pool+0x50>)
 800d30c:	480d      	ldr	r0, [pc, #52]	@ (800d344 <do_memp_free_pool+0x54>)
 800d30e:	f00b f809 	bl	8018324 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d316:	f00a faaf 	bl	8017878 <sys_arch_protect>
 800d31a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d32e:	68b8      	ldr	r0, [r7, #8]
 800d330:	f00a fab0 	bl	8017894 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d334:	bf00      	nop
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0801b4f8 	.word	0x0801b4f8
 800d340:	0801b5a8 	.word	0x0801b5a8
 800d344:	0801b54c 	.word	0x0801b54c

0800d348 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	2b0c      	cmp	r3, #12
 800d358:	d907      	bls.n	800d36a <memp_free+0x22>
 800d35a:	4b0c      	ldr	r3, [pc, #48]	@ (800d38c <memp_free+0x44>)
 800d35c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d360:	490b      	ldr	r1, [pc, #44]	@ (800d390 <memp_free+0x48>)
 800d362:	480c      	ldr	r0, [pc, #48]	@ (800d394 <memp_free+0x4c>)
 800d364:	f00a ffde 	bl	8018324 <iprintf>
 800d368:	e00c      	b.n	800d384 <memp_free+0x3c>

  if (mem == NULL) {
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d008      	beq.n	800d382 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	4a09      	ldr	r2, [pc, #36]	@ (800d398 <memp_free+0x50>)
 800d374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff ffb8 	bl	800d2f0 <do_memp_free_pool>
 800d380:	e000      	b.n	800d384 <memp_free+0x3c>
    return;
 800d382:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	0801b4f8 	.word	0x0801b4f8
 800d390:	0801b5c8 	.word	0x0801b5c8
 800d394:	0801b54c 	.word	0x0801b54c
 800d398:	0801dd04 	.word	0x0801dd04

0800d39c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d3a0:	bf00      	nop
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
	...

0800d3ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d108      	bne.n	800d3d2 <netif_add+0x26>
 800d3c0:	4b57      	ldr	r3, [pc, #348]	@ (800d520 <netif_add+0x174>)
 800d3c2:	f240 1227 	movw	r2, #295	@ 0x127
 800d3c6:	4957      	ldr	r1, [pc, #348]	@ (800d524 <netif_add+0x178>)
 800d3c8:	4857      	ldr	r0, [pc, #348]	@ (800d528 <netif_add+0x17c>)
 800d3ca:	f00a ffab 	bl	8018324 <iprintf>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e0a2      	b.n	800d518 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d108      	bne.n	800d3ea <netif_add+0x3e>
 800d3d8:	4b51      	ldr	r3, [pc, #324]	@ (800d520 <netif_add+0x174>)
 800d3da:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d3de:	4953      	ldr	r1, [pc, #332]	@ (800d52c <netif_add+0x180>)
 800d3e0:	4851      	ldr	r0, [pc, #324]	@ (800d528 <netif_add+0x17c>)
 800d3e2:	f00a ff9f 	bl	8018324 <iprintf>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e096      	b.n	800d518 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d3f0:	4b4f      	ldr	r3, [pc, #316]	@ (800d530 <netif_add+0x184>)
 800d3f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d3fa:	4b4d      	ldr	r3, [pc, #308]	@ (800d530 <netif_add+0x184>)
 800d3fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d101      	bne.n	800d408 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d404:	4b4a      	ldr	r3, [pc, #296]	@ (800d530 <netif_add+0x184>)
 800d406:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	4a45      	ldr	r2, [pc, #276]	@ (800d534 <netif_add+0x188>)
 800d41e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6a3a      	ldr	r2, [r7, #32]
 800d438:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d43a:	4b3f      	ldr	r3, [pc, #252]	@ (800d538 <netif_add+0x18c>)
 800d43c:	781a      	ldrb	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d448:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 f913 	bl	800d67c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	4798      	blx	r3
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <netif_add+0xba>
    return NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	e058      	b.n	800d518 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d46c:	2bff      	cmp	r3, #255	@ 0xff
 800d46e:	d103      	bne.n	800d478 <netif_add+0xcc>
        netif->num = 0;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d47c:	4b2f      	ldr	r3, [pc, #188]	@ (800d53c <netif_add+0x190>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	617b      	str	r3, [r7, #20]
 800d482:	e02b      	b.n	800d4dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d484:	697a      	ldr	r2, [r7, #20]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d106      	bne.n	800d49a <netif_add+0xee>
 800d48c:	4b24      	ldr	r3, [pc, #144]	@ (800d520 <netif_add+0x174>)
 800d48e:	f240 128b 	movw	r2, #395	@ 0x18b
 800d492:	492b      	ldr	r1, [pc, #172]	@ (800d540 <netif_add+0x194>)
 800d494:	4824      	ldr	r0, [pc, #144]	@ (800d528 <netif_add+0x17c>)
 800d496:	f00a ff45 	bl	8018324 <iprintf>
        num_netifs++;
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	3301      	adds	r3, #1
 800d49e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2bff      	cmp	r3, #255	@ 0xff
 800d4a4:	dd06      	ble.n	800d4b4 <netif_add+0x108>
 800d4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d520 <netif_add+0x174>)
 800d4a8:	f240 128d 	movw	r2, #397	@ 0x18d
 800d4ac:	4925      	ldr	r1, [pc, #148]	@ (800d544 <netif_add+0x198>)
 800d4ae:	481e      	ldr	r0, [pc, #120]	@ (800d528 <netif_add+0x17c>)
 800d4b0:	f00a ff38 	bl	8018324 <iprintf>
        if (netif2->num == netif->num) {
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d108      	bne.n	800d4d6 <netif_add+0x12a>
          netif->num++;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d4d4:	e005      	b.n	800d4e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1d0      	bne.n	800d484 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1be      	bne.n	800d466 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4ee:	2bfe      	cmp	r3, #254	@ 0xfe
 800d4f0:	d103      	bne.n	800d4fa <netif_add+0x14e>
    netif_num = 0;
 800d4f2:	4b11      	ldr	r3, [pc, #68]	@ (800d538 <netif_add+0x18c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	e006      	b.n	800d508 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d500:	3301      	adds	r3, #1
 800d502:	b2da      	uxtb	r2, r3
 800d504:	4b0c      	ldr	r3, [pc, #48]	@ (800d538 <netif_add+0x18c>)
 800d506:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d508:	4b0c      	ldr	r3, [pc, #48]	@ (800d53c <netif_add+0x190>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d510:	4a0a      	ldr	r2, [pc, #40]	@ (800d53c <netif_add+0x190>)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d516:	68fb      	ldr	r3, [r7, #12]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	0801b5e4 	.word	0x0801b5e4
 800d524:	0801b678 	.word	0x0801b678
 800d528:	0801b634 	.word	0x0801b634
 800d52c:	0801b694 	.word	0x0801b694
 800d530:	0801dd78 	.word	0x0801dd78
 800d534:	0800d957 	.word	0x0800d957
 800d538:	2000e0c0 	.word	0x2000e0c0
 800d53c:	2000e0b8 	.word	0x2000e0b8
 800d540:	0801b6b8 	.word	0x0801b6b8
 800d544:	0801b6cc 	.word	0x0801b6cc

0800d548 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f002 fe51 	bl	80101fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f007 fcfd 	bl	8014f5c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <netif_do_set_ipaddr+0x20>
 800d57e:	4b1d      	ldr	r3, [pc, #116]	@ (800d5f4 <netif_do_set_ipaddr+0x88>)
 800d580:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d584:	491c      	ldr	r1, [pc, #112]	@ (800d5f8 <netif_do_set_ipaddr+0x8c>)
 800d586:	481d      	ldr	r0, [pc, #116]	@ (800d5fc <netif_do_set_ipaddr+0x90>)
 800d588:	f00a fecc 	bl	8018324 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <netif_do_set_ipaddr+0x34>
 800d592:	4b18      	ldr	r3, [pc, #96]	@ (800d5f4 <netif_do_set_ipaddr+0x88>)
 800d594:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d598:	4917      	ldr	r1, [pc, #92]	@ (800d5f8 <netif_do_set_ipaddr+0x8c>)
 800d59a:	4818      	ldr	r0, [pc, #96]	@ (800d5fc <netif_do_set_ipaddr+0x90>)
 800d59c:	f00a fec2 	bl	8018324 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d01c      	beq.n	800d5e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d5be:	f107 0314 	add.w	r3, r7, #20
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff ffbf 	bl	800d548 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <netif_do_set_ipaddr+0x6a>
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	e000      	b.n	800d5d8 <netif_do_set_ipaddr+0x6c>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d5dc:	2101      	movs	r1, #1
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 f8d2 	bl	800d788 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e000      	b.n	800d5ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	0801b5e4 	.word	0x0801b5e4
 800d5f8:	0801b6fc 	.word	0x0801b6fc
 800d5fc:	0801b634 	.word	0x0801b634

0800d600 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3308      	adds	r3, #8
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d00a      	beq.n	800d630 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <netif_do_set_netmask+0x26>
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	e000      	b.n	800d628 <netif_do_set_netmask+0x28>
 800d626:	2300      	movs	r3, #0
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d62c:	2301      	movs	r3, #1
 800d62e:	e000      	b.n	800d632 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d63e:	b480      	push	{r7}
 800d640:	b085      	sub	sp, #20
 800d642:	af00      	add	r7, sp, #0
 800d644:	60f8      	str	r0, [r7, #12]
 800d646:	60b9      	str	r1, [r7, #8]
 800d648:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	330c      	adds	r3, #12
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d00a      	beq.n	800d66e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <netif_do_set_gw+0x26>
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	e000      	b.n	800d666 <netif_do_set_gw+0x28>
 800d664:	2300      	movs	r3, #0
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d66a:	2301      	movs	r3, #1
 800d66c:	e000      	b.n	800d670 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d698:	4b1c      	ldr	r3, [pc, #112]	@ (800d70c <netif_set_addr+0x90>)
 800d69a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d6a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d70c <netif_set_addr+0x90>)
 800d6a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d6ac:	4b17      	ldr	r3, [pc, #92]	@ (800d70c <netif_set_addr+0x90>)
 800d6ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <netif_set_addr+0x42>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d101      	bne.n	800d6c2 <netif_set_addr+0x46>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e000      	b.n	800d6c4 <netif_set_addr+0x48>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d006      	beq.n	800d6da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6cc:	f107 0310 	add.w	r3, r7, #16
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f7ff ff49 	bl	800d56c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d6da:	69fa      	ldr	r2, [r7, #28]
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff ff8e 	bl	800d600 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff ffa8 	bl	800d63e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6f4:	f107 0310 	add.w	r3, r7, #16
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f7ff ff35 	bl	800d56c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d702:	bf00      	nop
 800d704:	3720      	adds	r7, #32
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	0801dd78 	.word	0x0801dd78

0800d710 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d718:	4a04      	ldr	r2, [pc, #16]	@ (800d72c <netif_set_default+0x1c>)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	2000e0bc 	.word	0x2000e0bc

0800d730 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d107      	bne.n	800d74e <netif_set_up+0x1e>
 800d73e:	4b0f      	ldr	r3, [pc, #60]	@ (800d77c <netif_set_up+0x4c>)
 800d740:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d744:	490e      	ldr	r1, [pc, #56]	@ (800d780 <netif_set_up+0x50>)
 800d746:	480f      	ldr	r0, [pc, #60]	@ (800d784 <netif_set_up+0x54>)
 800d748:	f00a fdec 	bl	8018324 <iprintf>
 800d74c:	e013      	b.n	800d776 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10c      	bne.n	800d776 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d76e:	2103      	movs	r1, #3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f809 	bl	800d788 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	0801b5e4 	.word	0x0801b5e4
 800d780:	0801b76c 	.word	0x0801b76c
 800d784:	0801b634 	.word	0x0801b634

0800d788 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <netif_issue_reports+0x20>
 800d79a:	4b18      	ldr	r3, [pc, #96]	@ (800d7fc <netif_issue_reports+0x74>)
 800d79c:	f240 326d 	movw	r2, #877	@ 0x36d
 800d7a0:	4917      	ldr	r1, [pc, #92]	@ (800d800 <netif_issue_reports+0x78>)
 800d7a2:	4818      	ldr	r0, [pc, #96]	@ (800d804 <netif_issue_reports+0x7c>)
 800d7a4:	f00a fdbe 	bl	8018324 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7ae:	f003 0304 	and.w	r3, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d01e      	beq.n	800d7f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d017      	beq.n	800d7f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7c4:	78fb      	ldrb	r3, [r7, #3]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d013      	beq.n	800d7f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00e      	beq.n	800d7f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7de:	f003 0308 	and.w	r3, r3, #8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d007      	beq.n	800d7f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f008 fb1f 	bl	8015e30 <etharp_request>
 800d7f2:	e000      	b.n	800d7f6 <netif_issue_reports+0x6e>
    return;
 800d7f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	0801b5e4 	.word	0x0801b5e4
 800d800:	0801b788 	.word	0x0801b788
 800d804:	0801b634 	.word	0x0801b634

0800d808 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d107      	bne.n	800d826 <netif_set_down+0x1e>
 800d816:	4b12      	ldr	r3, [pc, #72]	@ (800d860 <netif_set_down+0x58>)
 800d818:	f240 329b 	movw	r2, #923	@ 0x39b
 800d81c:	4911      	ldr	r1, [pc, #68]	@ (800d864 <netif_set_down+0x5c>)
 800d81e:	4812      	ldr	r0, [pc, #72]	@ (800d868 <netif_set_down+0x60>)
 800d820:	f00a fd80 	bl	8018324 <iprintf>
 800d824:	e019      	b.n	800d85a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d012      	beq.n	800d85a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d83a:	f023 0301 	bic.w	r3, r3, #1
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d84c:	f003 0308 	and.w	r3, r3, #8
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f007 fea9 	bl	80155ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	0801b5e4 	.word	0x0801b5e4
 800d864:	0801b7ac 	.word	0x0801b7ac
 800d868:	0801b634 	.word	0x0801b634

0800d86c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d107      	bne.n	800d88a <netif_set_link_up+0x1e>
 800d87a:	4b13      	ldr	r3, [pc, #76]	@ (800d8c8 <netif_set_link_up+0x5c>)
 800d87c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d880:	4912      	ldr	r1, [pc, #72]	@ (800d8cc <netif_set_link_up+0x60>)
 800d882:	4813      	ldr	r0, [pc, #76]	@ (800d8d0 <netif_set_link_up+0x64>)
 800d884:	f00a fd4e 	bl	8018324 <iprintf>
 800d888:	e01b      	b.n	800d8c2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d114      	bne.n	800d8c2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d89e:	f043 0304 	orr.w	r3, r3, #4
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d8aa:	2103      	movs	r1, #3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff6b 	bl	800d788 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	69db      	ldr	r3, [r3, #28]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <netif_set_link_up+0x56>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	0801b5e4 	.word	0x0801b5e4
 800d8cc:	0801b7cc 	.word	0x0801b7cc
 800d8d0:	0801b634 	.word	0x0801b634

0800d8d4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d107      	bne.n	800d8f2 <netif_set_link_down+0x1e>
 800d8e2:	4b11      	ldr	r3, [pc, #68]	@ (800d928 <netif_set_link_down+0x54>)
 800d8e4:	f240 4206 	movw	r2, #1030	@ 0x406
 800d8e8:	4910      	ldr	r1, [pc, #64]	@ (800d92c <netif_set_link_down+0x58>)
 800d8ea:	4811      	ldr	r0, [pc, #68]	@ (800d930 <netif_set_link_down+0x5c>)
 800d8ec:	f00a fd1a 	bl	8018324 <iprintf>
 800d8f0:	e017      	b.n	800d922 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8f8:	f003 0304 	and.w	r3, r3, #4
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d010      	beq.n	800d922 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d906:	f023 0304 	bic.w	r3, r3, #4
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	69db      	ldr	r3, [r3, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <netif_set_link_down+0x4e>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	69db      	ldr	r3, [r3, #28]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	0801b5e4 	.word	0x0801b5e4
 800d92c:	0801b7f0 	.word	0x0801b7f0
 800d930:	0801b634 	.word	0x0801b634

0800d934 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	61da      	str	r2, [r3, #28]
  }
}
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d956:	b480      	push	{r7}
 800d958:	b085      	sub	sp, #20
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d962:	f06f 030b 	mvn.w	r3, #11
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
	...

0800d974 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d013      	beq.n	800d9ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d984:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <netif_get_by_index+0x48>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60fb      	str	r3, [r7, #12]
 800d98a:	e00c      	b.n	800d9a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d992:	3301      	adds	r3, #1
 800d994:	b2db      	uxtb	r3, r3
 800d996:	79fa      	ldrb	r2, [r7, #7]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d101      	bne.n	800d9a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	e006      	b.n	800d9ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1ef      	bne.n	800d98c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	2000e0b8 	.word	0x2000e0b8

0800d9c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d9c6:	f009 ff57 	bl	8017878 <sys_arch_protect>
 800d9ca:	6038      	str	r0, [r7, #0]
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <pbuf_free_ooseq+0x44>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	701a      	strb	r2, [r3, #0]
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f009 ff5e 	bl	8017894 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9d8:	4b0b      	ldr	r3, [pc, #44]	@ (800da08 <pbuf_free_ooseq+0x48>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	607b      	str	r3, [r7, #4]
 800d9de:	e00a      	b.n	800d9f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d003      	beq.n	800d9f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f002 fc45 	bl	8010278 <tcp_free_ooseq>
      return;
 800d9ee:	e005      	b.n	800d9fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	607b      	str	r3, [r7, #4]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f1      	bne.n	800d9e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	2000e0c1 	.word	0x2000e0c1
 800da08:	2000e0d0 	.word	0x2000e0d0

0800da0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800da14:	f7ff ffd4 	bl	800d9c0 <pbuf_free_ooseq>
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800da26:	f009 ff27 	bl	8017878 <sys_arch_protect>
 800da2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800da2c:	4b0f      	ldr	r3, [pc, #60]	@ (800da6c <pbuf_pool_is_empty+0x4c>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800da32:	4b0e      	ldr	r3, [pc, #56]	@ (800da6c <pbuf_pool_is_empty+0x4c>)
 800da34:	2201      	movs	r2, #1
 800da36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f009 ff2b 	bl	8017894 <sys_arch_unprotect>

  if (!queued) {
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10f      	bne.n	800da64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800da44:	2100      	movs	r1, #0
 800da46:	480a      	ldr	r0, [pc, #40]	@ (800da70 <pbuf_pool_is_empty+0x50>)
 800da48:	f7fe fed6 	bl	800c7f8 <tcpip_try_callback>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d008      	beq.n	800da64 <pbuf_pool_is_empty+0x44>
 800da52:	f009 ff11 	bl	8017878 <sys_arch_protect>
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	4b04      	ldr	r3, [pc, #16]	@ (800da6c <pbuf_pool_is_empty+0x4c>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	701a      	strb	r2, [r3, #0]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f009 ff18 	bl	8017894 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	2000e0c1 	.word	0x2000e0c1
 800da70:	0800da0d 	.word	0x0800da0d

0800da74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	4611      	mov	r1, r2
 800da80:	461a      	mov	r2, r3
 800da82:	460b      	mov	r3, r1
 800da84:	80fb      	strh	r3, [r7, #6]
 800da86:	4613      	mov	r3, r2
 800da88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	88fa      	ldrh	r2, [r7, #6]
 800da9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	88ba      	ldrh	r2, [r7, #4]
 800daa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800daa2:	8b3b      	ldrh	r3, [r7, #24]
 800daa4:	b2da      	uxtb	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	7f3a      	ldrb	r2, [r7, #28]
 800daae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	73da      	strb	r2, [r3, #15]
}
 800dabc:	bf00      	nop
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b08c      	sub	sp, #48	@ 0x30
 800dacc:	af02      	add	r7, sp, #8
 800dace:	4603      	mov	r3, r0
 800dad0:	71fb      	strb	r3, [r7, #7]
 800dad2:	460b      	mov	r3, r1
 800dad4:	80bb      	strh	r3, [r7, #4]
 800dad6:	4613      	mov	r3, r2
 800dad8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dade:	887b      	ldrh	r3, [r7, #2]
 800dae0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dae4:	d07f      	beq.n	800dbe6 <pbuf_alloc+0x11e>
 800dae6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800daea:	f300 80c8 	bgt.w	800dc7e <pbuf_alloc+0x1b6>
 800daee:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800daf2:	d010      	beq.n	800db16 <pbuf_alloc+0x4e>
 800daf4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800daf8:	f300 80c1 	bgt.w	800dc7e <pbuf_alloc+0x1b6>
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d002      	beq.n	800db06 <pbuf_alloc+0x3e>
 800db00:	2b41      	cmp	r3, #65	@ 0x41
 800db02:	f040 80bc 	bne.w	800dc7e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800db06:	887a      	ldrh	r2, [r7, #2]
 800db08:	88bb      	ldrh	r3, [r7, #4]
 800db0a:	4619      	mov	r1, r3
 800db0c:	2000      	movs	r0, #0
 800db0e:	f000 f8d1 	bl	800dcb4 <pbuf_alloc_reference>
 800db12:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800db14:	e0bd      	b.n	800dc92 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800db16:	2300      	movs	r3, #0
 800db18:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800db1e:	88bb      	ldrh	r3, [r7, #4]
 800db20:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800db22:	200c      	movs	r0, #12
 800db24:	f7ff fbbe 	bl	800d2a4 <memp_malloc>
 800db28:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d109      	bne.n	800db44 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800db30:	f7ff ff76 	bl	800da20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800db34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <pbuf_alloc+0x78>
            pbuf_free(p);
 800db3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db3c:	f000 faa8 	bl	800e090 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800db40:	2300      	movs	r3, #0
 800db42:	e0a7      	b.n	800dc94 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800db44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db46:	3303      	adds	r3, #3
 800db48:	b29b      	uxth	r3, r3
 800db4a:	f023 0303 	bic.w	r3, r3, #3
 800db4e:	b29b      	uxth	r3, r3
 800db50:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800db54:	b29b      	uxth	r3, r3
 800db56:	8b7a      	ldrh	r2, [r7, #26]
 800db58:	4293      	cmp	r3, r2
 800db5a:	bf28      	it	cs
 800db5c:	4613      	movcs	r3, r2
 800db5e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800db60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db62:	3310      	adds	r3, #16
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	4413      	add	r3, r2
 800db68:	3303      	adds	r3, #3
 800db6a:	f023 0303 	bic.w	r3, r3, #3
 800db6e:	4618      	mov	r0, r3
 800db70:	89f9      	ldrh	r1, [r7, #14]
 800db72:	8b7a      	ldrh	r2, [r7, #26]
 800db74:	2300      	movs	r3, #0
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	887b      	ldrh	r3, [r7, #2]
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	460b      	mov	r3, r1
 800db7e:	4601      	mov	r1, r0
 800db80:	6938      	ldr	r0, [r7, #16]
 800db82:	f7ff ff77 	bl	800da74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	f003 0303 	and.w	r3, r3, #3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d006      	beq.n	800dba0 <pbuf_alloc+0xd8>
 800db92:	4b42      	ldr	r3, [pc, #264]	@ (800dc9c <pbuf_alloc+0x1d4>)
 800db94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800db98:	4941      	ldr	r1, [pc, #260]	@ (800dca0 <pbuf_alloc+0x1d8>)
 800db9a:	4842      	ldr	r0, [pc, #264]	@ (800dca4 <pbuf_alloc+0x1dc>)
 800db9c:	f00a fbc2 	bl	8018324 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dba2:	3303      	adds	r3, #3
 800dba4:	f023 0303 	bic.w	r3, r3, #3
 800dba8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800dbac:	d106      	bne.n	800dbbc <pbuf_alloc+0xf4>
 800dbae:	4b3b      	ldr	r3, [pc, #236]	@ (800dc9c <pbuf_alloc+0x1d4>)
 800dbb0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800dbb4:	493c      	ldr	r1, [pc, #240]	@ (800dca8 <pbuf_alloc+0x1e0>)
 800dbb6:	483b      	ldr	r0, [pc, #236]	@ (800dca4 <pbuf_alloc+0x1dc>)
 800dbb8:	f00a fbb4 	bl	8018324 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbc6:	e002      	b.n	800dbce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dbd2:	8b7a      	ldrh	r2, [r7, #26]
 800dbd4:	89fb      	ldrh	r3, [r7, #14]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800dbde:	8b7b      	ldrh	r3, [r7, #26]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d19e      	bne.n	800db22 <pbuf_alloc+0x5a>
      break;
 800dbe4:	e055      	b.n	800dc92 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dbe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbe8:	3303      	adds	r3, #3
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	f023 0303 	bic.w	r3, r3, #3
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	88bb      	ldrh	r3, [r7, #4]
 800dbf4:	3303      	adds	r3, #3
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f023 0303 	bic.w	r3, r3, #3
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	4413      	add	r3, r2
 800dc00:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dc02:	8b3b      	ldrh	r3, [r7, #24]
 800dc04:	3310      	adds	r3, #16
 800dc06:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc08:	8b3a      	ldrh	r2, [r7, #24]
 800dc0a:	88bb      	ldrh	r3, [r7, #4]
 800dc0c:	3303      	adds	r3, #3
 800dc0e:	f023 0303 	bic.w	r3, r3, #3
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d306      	bcc.n	800dc24 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dc16:	8afa      	ldrh	r2, [r7, #22]
 800dc18:	88bb      	ldrh	r3, [r7, #4]
 800dc1a:	3303      	adds	r3, #3
 800dc1c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d201      	bcs.n	800dc28 <pbuf_alloc+0x160>
        return NULL;
 800dc24:	2300      	movs	r3, #0
 800dc26:	e035      	b.n	800dc94 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dc28:	8afb      	ldrh	r3, [r7, #22]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff f9b8 	bl	800cfa0 <mem_malloc>
 800dc30:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <pbuf_alloc+0x174>
        return NULL;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e02b      	b.n	800dc94 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dc3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc3e:	3310      	adds	r3, #16
 800dc40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc42:	4413      	add	r3, r2
 800dc44:	3303      	adds	r3, #3
 800dc46:	f023 0303 	bic.w	r3, r3, #3
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	88b9      	ldrh	r1, [r7, #4]
 800dc4e:	88ba      	ldrh	r2, [r7, #4]
 800dc50:	2300      	movs	r3, #0
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	887b      	ldrh	r3, [r7, #2]
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc5e:	f7ff ff09 	bl	800da74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	f003 0303 	and.w	r3, r3, #3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d010      	beq.n	800dc90 <pbuf_alloc+0x1c8>
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	@ (800dc9c <pbuf_alloc+0x1d4>)
 800dc70:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dc74:	490d      	ldr	r1, [pc, #52]	@ (800dcac <pbuf_alloc+0x1e4>)
 800dc76:	480b      	ldr	r0, [pc, #44]	@ (800dca4 <pbuf_alloc+0x1dc>)
 800dc78:	f00a fb54 	bl	8018324 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dc7c:	e008      	b.n	800dc90 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dc7e:	4b07      	ldr	r3, [pc, #28]	@ (800dc9c <pbuf_alloc+0x1d4>)
 800dc80:	f240 1227 	movw	r2, #295	@ 0x127
 800dc84:	490a      	ldr	r1, [pc, #40]	@ (800dcb0 <pbuf_alloc+0x1e8>)
 800dc86:	4807      	ldr	r0, [pc, #28]	@ (800dca4 <pbuf_alloc+0x1dc>)
 800dc88:	f00a fb4c 	bl	8018324 <iprintf>
      return NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	e001      	b.n	800dc94 <pbuf_alloc+0x1cc>
      break;
 800dc90:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3728      	adds	r7, #40	@ 0x28
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	0801b814 	.word	0x0801b814
 800dca0:	0801b844 	.word	0x0801b844
 800dca4:	0801b874 	.word	0x0801b874
 800dca8:	0801b89c 	.word	0x0801b89c
 800dcac:	0801b8d0 	.word	0x0801b8d0
 800dcb0:	0801b8fc 	.word	0x0801b8fc

0800dcb4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	807b      	strh	r3, [r7, #2]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dcc4:	883b      	ldrh	r3, [r7, #0]
 800dcc6:	2b41      	cmp	r3, #65	@ 0x41
 800dcc8:	d009      	beq.n	800dcde <pbuf_alloc_reference+0x2a>
 800dcca:	883b      	ldrh	r3, [r7, #0]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d006      	beq.n	800dcde <pbuf_alloc_reference+0x2a>
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd10 <pbuf_alloc_reference+0x5c>)
 800dcd2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800dcd6:	490f      	ldr	r1, [pc, #60]	@ (800dd14 <pbuf_alloc_reference+0x60>)
 800dcd8:	480f      	ldr	r0, [pc, #60]	@ (800dd18 <pbuf_alloc_reference+0x64>)
 800dcda:	f00a fb23 	bl	8018324 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dcde:	200b      	movs	r0, #11
 800dce0:	f7ff fae0 	bl	800d2a4 <memp_malloc>
 800dce4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dcec:	2300      	movs	r3, #0
 800dcee:	e00b      	b.n	800dd08 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dcf0:	8879      	ldrh	r1, [r7, #2]
 800dcf2:	887a      	ldrh	r2, [r7, #2]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	883b      	ldrh	r3, [r7, #0]
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	6879      	ldr	r1, [r7, #4]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff feb7 	bl	800da74 <pbuf_init_alloced_pbuf>
  return p;
 800dd06:	68fb      	ldr	r3, [r7, #12]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	0801b814 	.word	0x0801b814
 800dd14:	0801b918 	.word	0x0801b918
 800dd18:	0801b874 	.word	0x0801b874

0800dd1c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	607b      	str	r3, [r7, #4]
 800dd24:	4603      	mov	r3, r0
 800dd26:	73fb      	strb	r3, [r7, #15]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	81bb      	strh	r3, [r7, #12]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dd34:	8a7b      	ldrh	r3, [r7, #18]
 800dd36:	3303      	adds	r3, #3
 800dd38:	f023 0203 	bic.w	r2, r3, #3
 800dd3c:	89bb      	ldrh	r3, [r7, #12]
 800dd3e:	441a      	add	r2, r3
 800dd40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d901      	bls.n	800dd4a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	e018      	b.n	800dd7c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dd50:	8a7b      	ldrh	r3, [r7, #18]
 800dd52:	3303      	adds	r3, #3
 800dd54:	f023 0303 	bic.w	r3, r3, #3
 800dd58:	6a3a      	ldr	r2, [r7, #32]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	617b      	str	r3, [r7, #20]
 800dd5e:	e001      	b.n	800dd64 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dd60:	2300      	movs	r3, #0
 800dd62:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	89b9      	ldrh	r1, [r7, #12]
 800dd68:	89ba      	ldrh	r2, [r7, #12]
 800dd6a:	2302      	movs	r3, #2
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	897b      	ldrh	r3, [r7, #10]
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	460b      	mov	r3, r1
 800dd74:	6979      	ldr	r1, [r7, #20]
 800dd76:	f7ff fe7d 	bl	800da74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dd7a:	687b      	ldr	r3, [r7, #4]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <pbuf_realloc+0x20>
 800dd96:	4b3a      	ldr	r3, [pc, #232]	@ (800de80 <pbuf_realloc+0xfc>)
 800dd98:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800dd9c:	4939      	ldr	r1, [pc, #228]	@ (800de84 <pbuf_realloc+0x100>)
 800dd9e:	483a      	ldr	r0, [pc, #232]	@ (800de88 <pbuf_realloc+0x104>)
 800dda0:	f00a fac0 	bl	8018324 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	891b      	ldrh	r3, [r3, #8]
 800dda8:	887a      	ldrh	r2, [r7, #2]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d263      	bcs.n	800de76 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	891a      	ldrh	r2, [r3, #8]
 800ddb2:	887b      	ldrh	r3, [r7, #2]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ddb8:	887b      	ldrh	r3, [r7, #2]
 800ddba:	817b      	strh	r3, [r7, #10]
  q = p;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ddc0:	e018      	b.n	800ddf4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	895b      	ldrh	r3, [r3, #10]
 800ddc6:	897a      	ldrh	r2, [r7, #10]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	891a      	ldrh	r2, [r3, #8]
 800ddd0:	893b      	ldrh	r3, [r7, #8]
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <pbuf_realloc+0x70>
 800dde6:	4b26      	ldr	r3, [pc, #152]	@ (800de80 <pbuf_realloc+0xfc>)
 800dde8:	f240 12af 	movw	r2, #431	@ 0x1af
 800ddec:	4927      	ldr	r1, [pc, #156]	@ (800de8c <pbuf_realloc+0x108>)
 800ddee:	4826      	ldr	r0, [pc, #152]	@ (800de88 <pbuf_realloc+0x104>)
 800ddf0:	f00a fa98 	bl	8018324 <iprintf>
  while (rem_len > q->len) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	895b      	ldrh	r3, [r3, #10]
 800ddf8:	897a      	ldrh	r2, [r7, #10]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d8e1      	bhi.n	800ddc2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	7b1b      	ldrb	r3, [r3, #12]
 800de02:	f003 030f 	and.w	r3, r3, #15
 800de06:	2b00      	cmp	r3, #0
 800de08:	d121      	bne.n	800de4e <pbuf_realloc+0xca>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	895b      	ldrh	r3, [r3, #10]
 800de0e:	897a      	ldrh	r2, [r7, #10]
 800de10:	429a      	cmp	r2, r3
 800de12:	d01c      	beq.n	800de4e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	7b5b      	ldrb	r3, [r3, #13]
 800de18:	f003 0302 	and.w	r3, r3, #2
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d116      	bne.n	800de4e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	b29a      	uxth	r2, r3
 800de2a:	897b      	ldrh	r3, [r7, #10]
 800de2c:	4413      	add	r3, r2
 800de2e:	b29b      	uxth	r3, r3
 800de30:	4619      	mov	r1, r3
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f7fe ffaa 	bl	800cd8c <mem_trim>
 800de38:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d106      	bne.n	800de4e <pbuf_realloc+0xca>
 800de40:	4b0f      	ldr	r3, [pc, #60]	@ (800de80 <pbuf_realloc+0xfc>)
 800de42:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800de46:	4912      	ldr	r1, [pc, #72]	@ (800de90 <pbuf_realloc+0x10c>)
 800de48:	480f      	ldr	r0, [pc, #60]	@ (800de88 <pbuf_realloc+0x104>)
 800de4a:	f00a fa6b 	bl	8018324 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	897a      	ldrh	r2, [r7, #10]
 800de52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	895a      	ldrh	r2, [r3, #10]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d004      	beq.n	800de6e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 f911 	bl	800e090 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	e000      	b.n	800de78 <pbuf_realloc+0xf4>
    return;
 800de76:	bf00      	nop

}
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	0801b814 	.word	0x0801b814
 800de84:	0801b92c 	.word	0x0801b92c
 800de88:	0801b874 	.word	0x0801b874
 800de8c:	0801b944 	.word	0x0801b944
 800de90:	0801b95c 	.word	0x0801b95c

0800de94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d106      	bne.n	800deb6 <pbuf_add_header_impl+0x22>
 800dea8:	4b2b      	ldr	r3, [pc, #172]	@ (800df58 <pbuf_add_header_impl+0xc4>)
 800deaa:	f240 12df 	movw	r2, #479	@ 0x1df
 800deae:	492b      	ldr	r1, [pc, #172]	@ (800df5c <pbuf_add_header_impl+0xc8>)
 800deb0:	482b      	ldr	r0, [pc, #172]	@ (800df60 <pbuf_add_header_impl+0xcc>)
 800deb2:	f00a fa37 	bl	8018324 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <pbuf_add_header_impl+0x30>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dec2:	d301      	bcc.n	800dec8 <pbuf_add_header_impl+0x34>
    return 1;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e043      	b.n	800df50 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <pbuf_add_header_impl+0x3e>
    return 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	e03e      	b.n	800df50 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	891a      	ldrh	r2, [r3, #8]
 800deda:	8a7b      	ldrh	r3, [r7, #18]
 800dedc:	4413      	add	r3, r2
 800dede:	b29b      	uxth	r3, r3
 800dee0:	8a7a      	ldrh	r2, [r7, #18]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d901      	bls.n	800deea <pbuf_add_header_impl+0x56>
    return 1;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e032      	b.n	800df50 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	7b1b      	ldrb	r3, [r3, #12]
 800deee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800def0:	8a3b      	ldrh	r3, [r7, #16]
 800def2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00c      	beq.n	800df14 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	685a      	ldr	r2, [r3, #4]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	425b      	negs	r3, r3
 800df02:	4413      	add	r3, r2
 800df04:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3310      	adds	r3, #16
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d20d      	bcs.n	800df2c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800df10:	2301      	movs	r3, #1
 800df12:	e01d      	b.n	800df50 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d006      	beq.n	800df28 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	685a      	ldr	r2, [r3, #4]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	425b      	negs	r3, r3
 800df22:	4413      	add	r3, r2
 800df24:	617b      	str	r3, [r7, #20]
 800df26:	e001      	b.n	800df2c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800df28:	2301      	movs	r3, #1
 800df2a:	e011      	b.n	800df50 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	895a      	ldrh	r2, [r3, #10]
 800df36:	8a7b      	ldrh	r3, [r7, #18]
 800df38:	4413      	add	r3, r2
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	891a      	ldrh	r2, [r3, #8]
 800df44:	8a7b      	ldrh	r3, [r7, #18]
 800df46:	4413      	add	r3, r2
 800df48:	b29a      	uxth	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	811a      	strh	r2, [r3, #8]


  return 0;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3718      	adds	r7, #24
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	0801b814 	.word	0x0801b814
 800df5c:	0801b978 	.word	0x0801b978
 800df60:	0801b874 	.word	0x0801b874

0800df64 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800df6e:	2200      	movs	r2, #0
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff ff8e 	bl	800de94 <pbuf_add_header_impl>
 800df78:	4603      	mov	r3, r0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d106      	bne.n	800dfa2 <pbuf_remove_header+0x1e>
 800df94:	4b20      	ldr	r3, [pc, #128]	@ (800e018 <pbuf_remove_header+0x94>)
 800df96:	f240 224b 	movw	r2, #587	@ 0x24b
 800df9a:	4920      	ldr	r1, [pc, #128]	@ (800e01c <pbuf_remove_header+0x98>)
 800df9c:	4820      	ldr	r0, [pc, #128]	@ (800e020 <pbuf_remove_header+0x9c>)
 800df9e:	f00a f9c1 	bl	8018324 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d003      	beq.n	800dfb0 <pbuf_remove_header+0x2c>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfae:	d301      	bcc.n	800dfb4 <pbuf_remove_header+0x30>
    return 1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e02c      	b.n	800e00e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d101      	bne.n	800dfbe <pbuf_remove_header+0x3a>
    return 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e027      	b.n	800e00e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	89fa      	ldrh	r2, [r7, #14]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d908      	bls.n	800dfde <pbuf_remove_header+0x5a>
 800dfcc:	4b12      	ldr	r3, [pc, #72]	@ (800e018 <pbuf_remove_header+0x94>)
 800dfce:	f240 2255 	movw	r2, #597	@ 0x255
 800dfd2:	4914      	ldr	r1, [pc, #80]	@ (800e024 <pbuf_remove_header+0xa0>)
 800dfd4:	4812      	ldr	r0, [pc, #72]	@ (800e020 <pbuf_remove_header+0x9c>)
 800dfd6:	f00a f9a5 	bl	8018324 <iprintf>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e017      	b.n	800e00e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	441a      	add	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	895a      	ldrh	r2, [r3, #10]
 800dff4:	89fb      	ldrh	r3, [r7, #14]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	891a      	ldrh	r2, [r3, #8]
 800e002:	89fb      	ldrh	r3, [r7, #14]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	b29a      	uxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	0801b814 	.word	0x0801b814
 800e01c:	0801b978 	.word	0x0801b978
 800e020:	0801b874 	.word	0x0801b874
 800e024:	0801b984 	.word	0x0801b984

0800e028 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	807b      	strh	r3, [r7, #2]
 800e034:	4613      	mov	r3, r2
 800e036:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e038:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	da08      	bge.n	800e052 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e044:	425b      	negs	r3, r3
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ff9b 	bl	800df84 <pbuf_remove_header>
 800e04e:	4603      	mov	r3, r0
 800e050:	e007      	b.n	800e062 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e056:	787a      	ldrb	r2, [r7, #1]
 800e058:	4619      	mov	r1, r3
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff ff1a 	bl	800de94 <pbuf_add_header_impl>
 800e060:	4603      	mov	r3, r0
  }
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b082      	sub	sp, #8
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	460b      	mov	r3, r1
 800e074:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e076:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e07a:	2201      	movs	r2, #1
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff ffd2 	bl	800e028 <pbuf_header_impl>
 800e084:	4603      	mov	r3, r0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10b      	bne.n	800e0b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d106      	bne.n	800e0b2 <pbuf_free+0x22>
 800e0a4:	4b3b      	ldr	r3, [pc, #236]	@ (800e194 <pbuf_free+0x104>)
 800e0a6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e0aa:	493b      	ldr	r1, [pc, #236]	@ (800e198 <pbuf_free+0x108>)
 800e0ac:	483b      	ldr	r0, [pc, #236]	@ (800e19c <pbuf_free+0x10c>)
 800e0ae:	f00a f939 	bl	8018324 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e069      	b.n	800e18a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e0ba:	e062      	b.n	800e182 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e0bc:	f009 fbdc 	bl	8017878 <sys_arch_protect>
 800e0c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7b9b      	ldrb	r3, [r3, #14]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <pbuf_free+0x48>
 800e0ca:	4b32      	ldr	r3, [pc, #200]	@ (800e194 <pbuf_free+0x104>)
 800e0cc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e0d0:	4933      	ldr	r1, [pc, #204]	@ (800e1a0 <pbuf_free+0x110>)
 800e0d2:	4832      	ldr	r0, [pc, #200]	@ (800e19c <pbuf_free+0x10c>)
 800e0d4:	f00a f926 	bl	8018324 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7b9b      	ldrb	r3, [r3, #14]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	739a      	strb	r2, [r3, #14]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	7b9b      	ldrb	r3, [r3, #14]
 800e0e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e0ea:	69b8      	ldr	r0, [r7, #24]
 800e0ec:	f009 fbd2 	bl	8017894 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d143      	bne.n	800e17e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	7b1b      	ldrb	r3, [r3, #12]
 800e100:	f003 030f 	and.w	r3, r3, #15
 800e104:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	7b5b      	ldrb	r3, [r3, #13]
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d011      	beq.n	800e136 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <pbuf_free+0x9c>
 800e11e:	4b1d      	ldr	r3, [pc, #116]	@ (800e194 <pbuf_free+0x104>)
 800e120:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e124:	491f      	ldr	r1, [pc, #124]	@ (800e1a4 <pbuf_free+0x114>)
 800e126:	481d      	ldr	r0, [pc, #116]	@ (800e19c <pbuf_free+0x10c>)
 800e128:	f00a f8fc 	bl	8018324 <iprintf>
        pc->custom_free_function(p);
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	4798      	blx	r3
 800e134:	e01d      	b.n	800e172 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d104      	bne.n	800e146 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e13c:	6879      	ldr	r1, [r7, #4]
 800e13e:	200c      	movs	r0, #12
 800e140:	f7ff f902 	bl	800d348 <memp_free>
 800e144:	e015      	b.n	800e172 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d104      	bne.n	800e156 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e14c:	6879      	ldr	r1, [r7, #4]
 800e14e:	200b      	movs	r0, #11
 800e150:	f7ff f8fa 	bl	800d348 <memp_free>
 800e154:	e00d      	b.n	800e172 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e156:	7bfb      	ldrb	r3, [r7, #15]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d103      	bne.n	800e164 <pbuf_free+0xd4>
          mem_free(p);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7fe fd85 	bl	800cc6c <mem_free>
 800e162:	e006      	b.n	800e172 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e164:	4b0b      	ldr	r3, [pc, #44]	@ (800e194 <pbuf_free+0x104>)
 800e166:	f240 320f 	movw	r2, #783	@ 0x30f
 800e16a:	490f      	ldr	r1, [pc, #60]	@ (800e1a8 <pbuf_free+0x118>)
 800e16c:	480b      	ldr	r0, [pc, #44]	@ (800e19c <pbuf_free+0x10c>)
 800e16e:	f00a f8d9 	bl	8018324 <iprintf>
        }
      }
      count++;
 800e172:	7ffb      	ldrb	r3, [r7, #31]
 800e174:	3301      	adds	r3, #1
 800e176:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	607b      	str	r3, [r7, #4]
 800e17c:	e001      	b.n	800e182 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d199      	bne.n	800e0bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e188:	7ffb      	ldrb	r3, [r7, #31]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3720      	adds	r7, #32
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	0801b814 	.word	0x0801b814
 800e198:	0801b978 	.word	0x0801b978
 800e19c:	0801b874 	.word	0x0801b874
 800e1a0:	0801b9a4 	.word	0x0801b9a4
 800e1a4:	0801b9bc 	.word	0x0801b9bc
 800e1a8:	0801b9e0 	.word	0x0801b9e0

0800e1ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e1b8:	e005      	b.n	800e1c6 <pbuf_clen+0x1a>
    ++len;
 800e1ba:	89fb      	ldrh	r3, [r7, #14]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1f6      	bne.n	800e1ba <pbuf_clen+0xe>
  }
  return len;
 800e1cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
	...

0800e1dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d016      	beq.n	800e218 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e1ea:	f009 fb45 	bl	8017878 <sys_arch_protect>
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7b9b      	ldrb	r3, [r3, #14]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	739a      	strb	r2, [r3, #14]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f009 fb49 	bl	8017894 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7b9b      	ldrb	r3, [r3, #14]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <pbuf_ref+0x3c>
 800e20a:	4b05      	ldr	r3, [pc, #20]	@ (800e220 <pbuf_ref+0x44>)
 800e20c:	f240 3242 	movw	r2, #834	@ 0x342
 800e210:	4904      	ldr	r1, [pc, #16]	@ (800e224 <pbuf_ref+0x48>)
 800e212:	4805      	ldr	r0, [pc, #20]	@ (800e228 <pbuf_ref+0x4c>)
 800e214:	f00a f886 	bl	8018324 <iprintf>
  }
}
 800e218:	bf00      	nop
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	0801b814 	.word	0x0801b814
 800e224:	0801b9f4 	.word	0x0801b9f4
 800e228:	0801b874 	.word	0x0801b874

0800e22c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <pbuf_cat+0x16>
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d107      	bne.n	800e252 <pbuf_cat+0x26>
 800e242:	4b20      	ldr	r3, [pc, #128]	@ (800e2c4 <pbuf_cat+0x98>)
 800e244:	f240 3259 	movw	r2, #857	@ 0x359
 800e248:	491f      	ldr	r1, [pc, #124]	@ (800e2c8 <pbuf_cat+0x9c>)
 800e24a:	4820      	ldr	r0, [pc, #128]	@ (800e2cc <pbuf_cat+0xa0>)
 800e24c:	f00a f86a 	bl	8018324 <iprintf>
 800e250:	e034      	b.n	800e2bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	e00a      	b.n	800e26e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	891a      	ldrh	r2, [r3, #8]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	891b      	ldrh	r3, [r3, #8]
 800e260:	4413      	add	r3, r2
 800e262:	b29a      	uxth	r2, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1f0      	bne.n	800e258 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	891a      	ldrh	r2, [r3, #8]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	895b      	ldrh	r3, [r3, #10]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d006      	beq.n	800e290 <pbuf_cat+0x64>
 800e282:	4b10      	ldr	r3, [pc, #64]	@ (800e2c4 <pbuf_cat+0x98>)
 800e284:	f240 3262 	movw	r2, #866	@ 0x362
 800e288:	4911      	ldr	r1, [pc, #68]	@ (800e2d0 <pbuf_cat+0xa4>)
 800e28a:	4810      	ldr	r0, [pc, #64]	@ (800e2cc <pbuf_cat+0xa0>)
 800e28c:	f00a f84a 	bl	8018324 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d006      	beq.n	800e2a6 <pbuf_cat+0x7a>
 800e298:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c4 <pbuf_cat+0x98>)
 800e29a:	f240 3263 	movw	r2, #867	@ 0x363
 800e29e:	490d      	ldr	r1, [pc, #52]	@ (800e2d4 <pbuf_cat+0xa8>)
 800e2a0:	480a      	ldr	r0, [pc, #40]	@ (800e2cc <pbuf_cat+0xa0>)
 800e2a2:	f00a f83f 	bl	8018324 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	891a      	ldrh	r2, [r3, #8]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	891b      	ldrh	r3, [r3, #8]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	683a      	ldr	r2, [r7, #0]
 800e2ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0801b814 	.word	0x0801b814
 800e2c8:	0801ba08 	.word	0x0801ba08
 800e2cc:	0801b874 	.word	0x0801b874
 800e2d0:	0801ba40 	.word	0x0801ba40
 800e2d4:	0801ba70 	.word	0x0801ba70

0800e2d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d008      	beq.n	800e302 <pbuf_copy+0x2a>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <pbuf_copy+0x2a>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	891a      	ldrh	r2, [r3, #8]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	891b      	ldrh	r3, [r3, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d209      	bcs.n	800e316 <pbuf_copy+0x3e>
 800e302:	4b57      	ldr	r3, [pc, #348]	@ (800e460 <pbuf_copy+0x188>)
 800e304:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e308:	4956      	ldr	r1, [pc, #344]	@ (800e464 <pbuf_copy+0x18c>)
 800e30a:	4857      	ldr	r0, [pc, #348]	@ (800e468 <pbuf_copy+0x190>)
 800e30c:	f00a f80a 	bl	8018324 <iprintf>
 800e310:	f06f 030f 	mvn.w	r3, #15
 800e314:	e09f      	b.n	800e456 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	895b      	ldrh	r3, [r3, #10]
 800e31a:	461a      	mov	r2, r3
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	1ad2      	subs	r2, r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	895b      	ldrh	r3, [r3, #10]
 800e324:	4619      	mov	r1, r3
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	1acb      	subs	r3, r1, r3
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d306      	bcc.n	800e33c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	895b      	ldrh	r3, [r3, #10]
 800e332:	461a      	mov	r2, r3
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	60fb      	str	r3, [r7, #12]
 800e33a:	e005      	b.n	800e348 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	895b      	ldrh	r3, [r3, #10]
 800e340:	461a      	mov	r2, r3
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	18d0      	adds	r0, r2, r3
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	4413      	add	r3, r2
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	4619      	mov	r1, r3
 800e35c:	f00a fa41 	bl	80187e2 <memcpy>
    offset_to += len;
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	4413      	add	r3, r2
 800e366:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	895b      	ldrh	r3, [r3, #10]
 800e374:	461a      	mov	r2, r3
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	4293      	cmp	r3, r2
 800e37a:	d906      	bls.n	800e38a <pbuf_copy+0xb2>
 800e37c:	4b38      	ldr	r3, [pc, #224]	@ (800e460 <pbuf_copy+0x188>)
 800e37e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e382:	493a      	ldr	r1, [pc, #232]	@ (800e46c <pbuf_copy+0x194>)
 800e384:	4838      	ldr	r0, [pc, #224]	@ (800e468 <pbuf_copy+0x190>)
 800e386:	f009 ffcd 	bl	8018324 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	895b      	ldrh	r3, [r3, #10]
 800e38e:	461a      	mov	r2, r3
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	4293      	cmp	r3, r2
 800e394:	d906      	bls.n	800e3a4 <pbuf_copy+0xcc>
 800e396:	4b32      	ldr	r3, [pc, #200]	@ (800e460 <pbuf_copy+0x188>)
 800e398:	f240 32da 	movw	r2, #986	@ 0x3da
 800e39c:	4934      	ldr	r1, [pc, #208]	@ (800e470 <pbuf_copy+0x198>)
 800e39e:	4832      	ldr	r0, [pc, #200]	@ (800e468 <pbuf_copy+0x190>)
 800e3a0:	f009 ffc0 	bl	8018324 <iprintf>
    if (offset_from >= p_from->len) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	895b      	ldrh	r3, [r3, #10]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d304      	bcc.n	800e3ba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	895b      	ldrh	r3, [r3, #10]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d114      	bne.n	800e3f0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10c      	bne.n	800e3f0 <pbuf_copy+0x118>
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d009      	beq.n	800e3f0 <pbuf_copy+0x118>
 800e3dc:	4b20      	ldr	r3, [pc, #128]	@ (800e460 <pbuf_copy+0x188>)
 800e3de:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e3e2:	4924      	ldr	r1, [pc, #144]	@ (800e474 <pbuf_copy+0x19c>)
 800e3e4:	4820      	ldr	r0, [pc, #128]	@ (800e468 <pbuf_copy+0x190>)
 800e3e6:	f009 ff9d 	bl	8018324 <iprintf>
 800e3ea:	f06f 030f 	mvn.w	r3, #15
 800e3ee:	e032      	b.n	800e456 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d013      	beq.n	800e41e <pbuf_copy+0x146>
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	895a      	ldrh	r2, [r3, #10]
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	891b      	ldrh	r3, [r3, #8]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d10d      	bne.n	800e41e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d009      	beq.n	800e41e <pbuf_copy+0x146>
 800e40a:	4b15      	ldr	r3, [pc, #84]	@ (800e460 <pbuf_copy+0x188>)
 800e40c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e410:	4919      	ldr	r1, [pc, #100]	@ (800e478 <pbuf_copy+0x1a0>)
 800e412:	4815      	ldr	r0, [pc, #84]	@ (800e468 <pbuf_copy+0x190>)
 800e414:	f009 ff86 	bl	8018324 <iprintf>
 800e418:	f06f 0305 	mvn.w	r3, #5
 800e41c:	e01b      	b.n	800e456 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d013      	beq.n	800e44c <pbuf_copy+0x174>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	895a      	ldrh	r2, [r3, #10]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	891b      	ldrh	r3, [r3, #8]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d10d      	bne.n	800e44c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d009      	beq.n	800e44c <pbuf_copy+0x174>
 800e438:	4b09      	ldr	r3, [pc, #36]	@ (800e460 <pbuf_copy+0x188>)
 800e43a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e43e:	490e      	ldr	r1, [pc, #56]	@ (800e478 <pbuf_copy+0x1a0>)
 800e440:	4809      	ldr	r0, [pc, #36]	@ (800e468 <pbuf_copy+0x190>)
 800e442:	f009 ff6f 	bl	8018324 <iprintf>
 800e446:	f06f 0305 	mvn.w	r3, #5
 800e44a:	e004      	b.n	800e456 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f47f af61 	bne.w	800e316 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	0801b814 	.word	0x0801b814
 800e464:	0801babc 	.word	0x0801babc
 800e468:	0801b874 	.word	0x0801b874
 800e46c:	0801baec 	.word	0x0801baec
 800e470:	0801bb04 	.word	0x0801bb04
 800e474:	0801bb20 	.word	0x0801bb20
 800e478:	0801bb30 	.word	0x0801bb30

0800e47c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	4611      	mov	r1, r2
 800e488:	461a      	mov	r2, r3
 800e48a:	460b      	mov	r3, r1
 800e48c:	80fb      	strh	r3, [r7, #6]
 800e48e:	4613      	mov	r3, r2
 800e490:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d108      	bne.n	800e4b2 <pbuf_copy_partial+0x36>
 800e4a0:	4b2b      	ldr	r3, [pc, #172]	@ (800e550 <pbuf_copy_partial+0xd4>)
 800e4a2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e4a6:	492b      	ldr	r1, [pc, #172]	@ (800e554 <pbuf_copy_partial+0xd8>)
 800e4a8:	482b      	ldr	r0, [pc, #172]	@ (800e558 <pbuf_copy_partial+0xdc>)
 800e4aa:	f009 ff3b 	bl	8018324 <iprintf>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e04a      	b.n	800e548 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d108      	bne.n	800e4ca <pbuf_copy_partial+0x4e>
 800e4b8:	4b25      	ldr	r3, [pc, #148]	@ (800e550 <pbuf_copy_partial+0xd4>)
 800e4ba:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e4be:	4927      	ldr	r1, [pc, #156]	@ (800e55c <pbuf_copy_partial+0xe0>)
 800e4c0:	4825      	ldr	r0, [pc, #148]	@ (800e558 <pbuf_copy_partial+0xdc>)
 800e4c2:	f009 ff2f 	bl	8018324 <iprintf>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e03e      	b.n	800e548 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	61fb      	str	r3, [r7, #28]
 800e4ce:	e034      	b.n	800e53a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e4d0:	88bb      	ldrh	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00a      	beq.n	800e4ec <pbuf_copy_partial+0x70>
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	895b      	ldrh	r3, [r3, #10]
 800e4da:	88ba      	ldrh	r2, [r7, #4]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d305      	bcc.n	800e4ec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	895b      	ldrh	r3, [r3, #10]
 800e4e4:	88ba      	ldrh	r2, [r7, #4]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	80bb      	strh	r3, [r7, #4]
 800e4ea:	e023      	b.n	800e534 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	895a      	ldrh	r2, [r3, #10]
 800e4f0:	88bb      	ldrh	r3, [r7, #4]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e4f6:	8b3a      	ldrh	r2, [r7, #24]
 800e4f8:	88fb      	ldrh	r3, [r7, #6]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d901      	bls.n	800e502 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e4fe:	88fb      	ldrh	r3, [r7, #6]
 800e500:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e502:	8b7b      	ldrh	r3, [r7, #26]
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	18d0      	adds	r0, r2, r3
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	88bb      	ldrh	r3, [r7, #4]
 800e50e:	4413      	add	r3, r2
 800e510:	8b3a      	ldrh	r2, [r7, #24]
 800e512:	4619      	mov	r1, r3
 800e514:	f00a f965 	bl	80187e2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e518:	8afa      	ldrh	r2, [r7, #22]
 800e51a:	8b3b      	ldrh	r3, [r7, #24]
 800e51c:	4413      	add	r3, r2
 800e51e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e520:	8b7a      	ldrh	r2, [r7, #26]
 800e522:	8b3b      	ldrh	r3, [r7, #24]
 800e524:	4413      	add	r3, r2
 800e526:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	8b3b      	ldrh	r3, [r7, #24]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	61fb      	str	r3, [r7, #28]
 800e53a:	88fb      	ldrh	r3, [r7, #6]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <pbuf_copy_partial+0xca>
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1c4      	bne.n	800e4d0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e546:	8afb      	ldrh	r3, [r7, #22]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3720      	adds	r7, #32
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	0801b814 	.word	0x0801b814
 800e554:	0801bb5c 	.word	0x0801bb5c
 800e558:	0801b874 	.word	0x0801b874
 800e55c:	0801bb7c 	.word	0x0801bb7c

0800e560 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	603a      	str	r2, [r7, #0]
 800e56a:	71fb      	strb	r3, [r7, #7]
 800e56c:	460b      	mov	r3, r1
 800e56e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	8919      	ldrh	r1, [r3, #8]
 800e574:	88ba      	ldrh	r2, [r7, #4]
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff faa5 	bl	800dac8 <pbuf_alloc>
 800e57e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <pbuf_clone+0x2a>
    return NULL;
 800e586:	2300      	movs	r3, #0
 800e588:	e011      	b.n	800e5ae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7ff fea3 	bl	800e2d8 <pbuf_copy>
 800e592:	4603      	mov	r3, r0
 800e594:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e596:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <pbuf_clone+0x4c>
 800e59e:	4b06      	ldr	r3, [pc, #24]	@ (800e5b8 <pbuf_clone+0x58>)
 800e5a0:	f240 5224 	movw	r2, #1316	@ 0x524
 800e5a4:	4905      	ldr	r1, [pc, #20]	@ (800e5bc <pbuf_clone+0x5c>)
 800e5a6:	4806      	ldr	r0, [pc, #24]	@ (800e5c0 <pbuf_clone+0x60>)
 800e5a8:	f009 febc 	bl	8018324 <iprintf>
  return q;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0801b814 	.word	0x0801b814
 800e5bc:	0801bc88 	.word	0x0801bc88
 800e5c0:	0801b874 	.word	0x0801b874

0800e5c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e5c8:	f009 f974 	bl	80178b4 <rand>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	4b01      	ldr	r3, [pc, #4]	@ (800e5e4 <tcp_init+0x20>)
 800e5de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5e0:	bf00      	nop
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20000010 	.word	0x20000010

0800e5e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	7d1b      	ldrb	r3, [r3, #20]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d105      	bne.n	800e604 <tcp_free+0x1c>
 800e5f8:	4b06      	ldr	r3, [pc, #24]	@ (800e614 <tcp_free+0x2c>)
 800e5fa:	22d4      	movs	r2, #212	@ 0xd4
 800e5fc:	4906      	ldr	r1, [pc, #24]	@ (800e618 <tcp_free+0x30>)
 800e5fe:	4807      	ldr	r0, [pc, #28]	@ (800e61c <tcp_free+0x34>)
 800e600:	f009 fe90 	bl	8018324 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	2001      	movs	r0, #1
 800e608:	f7fe fe9e 	bl	800d348 <memp_free>
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	0801bd14 	.word	0x0801bd14
 800e618:	0801bd44 	.word	0x0801bd44
 800e61c:	0801bd58 	.word	0x0801bd58

0800e620 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7d1b      	ldrb	r3, [r3, #20]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d105      	bne.n	800e63c <tcp_free_listen+0x1c>
 800e630:	4b06      	ldr	r3, [pc, #24]	@ (800e64c <tcp_free_listen+0x2c>)
 800e632:	22df      	movs	r2, #223	@ 0xdf
 800e634:	4906      	ldr	r1, [pc, #24]	@ (800e650 <tcp_free_listen+0x30>)
 800e636:	4807      	ldr	r0, [pc, #28]	@ (800e654 <tcp_free_listen+0x34>)
 800e638:	f009 fe74 	bl	8018324 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	2002      	movs	r0, #2
 800e640:	f7fe fe82 	bl	800d348 <memp_free>
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	0801bd14 	.word	0x0801bd14
 800e650:	0801bd80 	.word	0x0801bd80
 800e654:	0801bd58 	.word	0x0801bd58

0800e658 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e65c:	f001 f8a8 	bl	800f7b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e660:	4b07      	ldr	r3, [pc, #28]	@ (800e680 <tcp_tmr+0x28>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	3301      	adds	r3, #1
 800e666:	b2da      	uxtb	r2, r3
 800e668:	4b05      	ldr	r3, [pc, #20]	@ (800e680 <tcp_tmr+0x28>)
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	4b04      	ldr	r3, [pc, #16]	@ (800e680 <tcp_tmr+0x28>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	f003 0301 	and.w	r3, r3, #1
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e678:	f000 fd58 	bl	800f12c <tcp_slowtmr>
  }
}
 800e67c:	bf00      	nop
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	2000e0d9 	.word	0x2000e0d9

0800e684 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d105      	bne.n	800e6a0 <tcp_remove_listener+0x1c>
 800e694:	4b0d      	ldr	r3, [pc, #52]	@ (800e6cc <tcp_remove_listener+0x48>)
 800e696:	22ff      	movs	r2, #255	@ 0xff
 800e698:	490d      	ldr	r1, [pc, #52]	@ (800e6d0 <tcp_remove_listener+0x4c>)
 800e69a:	480e      	ldr	r0, [pc, #56]	@ (800e6d4 <tcp_remove_listener+0x50>)
 800e69c:	f009 fe42 	bl	8018324 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	e00a      	b.n	800e6bc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d102      	bne.n	800e6b6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1f1      	bne.n	800e6a6 <tcp_remove_listener+0x22>
    }
  }
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	0801bd14 	.word	0x0801bd14
 800e6d0:	0801bd9c 	.word	0x0801bd9c
 800e6d4:	0801bd58 	.word	0x0801bd58

0800e6d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d106      	bne.n	800e6f4 <tcp_listen_closed+0x1c>
 800e6e6:	4b14      	ldr	r3, [pc, #80]	@ (800e738 <tcp_listen_closed+0x60>)
 800e6e8:	f240 1211 	movw	r2, #273	@ 0x111
 800e6ec:	4913      	ldr	r1, [pc, #76]	@ (800e73c <tcp_listen_closed+0x64>)
 800e6ee:	4814      	ldr	r0, [pc, #80]	@ (800e740 <tcp_listen_closed+0x68>)
 800e6f0:	f009 fe18 	bl	8018324 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	7d1b      	ldrb	r3, [r3, #20]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d006      	beq.n	800e70a <tcp_listen_closed+0x32>
 800e6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800e738 <tcp_listen_closed+0x60>)
 800e6fe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e702:	4910      	ldr	r1, [pc, #64]	@ (800e744 <tcp_listen_closed+0x6c>)
 800e704:	480e      	ldr	r0, [pc, #56]	@ (800e740 <tcp_listen_closed+0x68>)
 800e706:	f009 fe0d 	bl	8018324 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e70a:	2301      	movs	r3, #1
 800e70c:	60fb      	str	r3, [r7, #12]
 800e70e:	e00b      	b.n	800e728 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e710:	4a0d      	ldr	r2, [pc, #52]	@ (800e748 <tcp_listen_closed+0x70>)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6879      	ldr	r1, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff ffb1 	bl	800e684 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	3301      	adds	r3, #1
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	d9f0      	bls.n	800e710 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	0801bd14 	.word	0x0801bd14
 800e73c:	0801bdc4 	.word	0x0801bdc4
 800e740:	0801bd58 	.word	0x0801bd58
 800e744:	0801bdd0 	.word	0x0801bdd0
 800e748:	0801dd50 	.word	0x0801dd50

0800e74c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e74c:	b5b0      	push	{r4, r5, r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af04      	add	r7, sp, #16
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <tcp_close_shutdown+0x20>
 800e75e:	4b63      	ldr	r3, [pc, #396]	@ (800e8ec <tcp_close_shutdown+0x1a0>)
 800e760:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e764:	4962      	ldr	r1, [pc, #392]	@ (800e8f0 <tcp_close_shutdown+0x1a4>)
 800e766:	4863      	ldr	r0, [pc, #396]	@ (800e8f4 <tcp_close_shutdown+0x1a8>)
 800e768:	f009 fddc 	bl	8018324 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d066      	beq.n	800e840 <tcp_close_shutdown+0xf4>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7d1b      	ldrb	r3, [r3, #20]
 800e776:	2b04      	cmp	r3, #4
 800e778:	d003      	beq.n	800e782 <tcp_close_shutdown+0x36>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	2b07      	cmp	r3, #7
 800e780:	d15e      	bne.n	800e840 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e786:	2b00      	cmp	r3, #0
 800e788:	d104      	bne.n	800e794 <tcp_close_shutdown+0x48>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e78e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e792:	d055      	beq.n	800e840 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	8b5b      	ldrh	r3, [r3, #26]
 800e798:	f003 0310 	and.w	r3, r3, #16
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d106      	bne.n	800e7ae <tcp_close_shutdown+0x62>
 800e7a0:	4b52      	ldr	r3, [pc, #328]	@ (800e8ec <tcp_close_shutdown+0x1a0>)
 800e7a2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e7a6:	4954      	ldr	r1, [pc, #336]	@ (800e8f8 <tcp_close_shutdown+0x1ac>)
 800e7a8:	4852      	ldr	r0, [pc, #328]	@ (800e8f4 <tcp_close_shutdown+0x1a8>)
 800e7aa:	f009 fdbb 	bl	8018324 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e7b6:	687d      	ldr	r5, [r7, #4]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	8ad2      	ldrh	r2, [r2, #22]
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	8b09      	ldrh	r1, [r1, #24]
 800e7c4:	9102      	str	r1, [sp, #8]
 800e7c6:	9201      	str	r2, [sp, #4]
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	4601      	mov	r1, r0
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f005 fdb7 	bl	8014344 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f001 fb9a 	bl	800ff10 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e7dc:	4b47      	ldr	r3, [pc, #284]	@ (800e8fc <tcp_close_shutdown+0x1b0>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d105      	bne.n	800e7f2 <tcp_close_shutdown+0xa6>
 800e7e6:	4b45      	ldr	r3, [pc, #276]	@ (800e8fc <tcp_close_shutdown+0x1b0>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	4a43      	ldr	r2, [pc, #268]	@ (800e8fc <tcp_close_shutdown+0x1b0>)
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	e013      	b.n	800e81a <tcp_close_shutdown+0xce>
 800e7f2:	4b42      	ldr	r3, [pc, #264]	@ (800e8fc <tcp_close_shutdown+0x1b0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	e00c      	b.n	800e814 <tcp_close_shutdown+0xc8>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	429a      	cmp	r2, r3
 800e802:	d104      	bne.n	800e80e <tcp_close_shutdown+0xc2>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68da      	ldr	r2, [r3, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	60da      	str	r2, [r3, #12]
 800e80c:	e005      	b.n	800e81a <tcp_close_shutdown+0xce>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1ef      	bne.n	800e7fa <tcp_close_shutdown+0xae>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	60da      	str	r2, [r3, #12]
 800e820:	4b37      	ldr	r3, [pc, #220]	@ (800e900 <tcp_close_shutdown+0x1b4>)
 800e822:	2201      	movs	r2, #1
 800e824:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e826:	4b37      	ldr	r3, [pc, #220]	@ (800e904 <tcp_close_shutdown+0x1b8>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d102      	bne.n	800e836 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e830:	f004 f82e 	bl	8012890 <tcp_trigger_input_pcb_close>
 800e834:	e002      	b.n	800e83c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff fed6 	bl	800e5e8 <tcp_free>
      }
      return ERR_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	e050      	b.n	800e8e2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	7d1b      	ldrb	r3, [r3, #20]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d03b      	beq.n	800e8c0 <tcp_close_shutdown+0x174>
 800e848:	2b02      	cmp	r3, #2
 800e84a:	dc44      	bgt.n	800e8d6 <tcp_close_shutdown+0x18a>
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <tcp_close_shutdown+0x10a>
 800e850:	2b01      	cmp	r3, #1
 800e852:	d02a      	beq.n	800e8aa <tcp_close_shutdown+0x15e>
 800e854:	e03f      	b.n	800e8d6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	8adb      	ldrh	r3, [r3, #22]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d021      	beq.n	800e8a2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e85e:	4b2a      	ldr	r3, [pc, #168]	@ (800e908 <tcp_close_shutdown+0x1bc>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	429a      	cmp	r2, r3
 800e866:	d105      	bne.n	800e874 <tcp_close_shutdown+0x128>
 800e868:	4b27      	ldr	r3, [pc, #156]	@ (800e908 <tcp_close_shutdown+0x1bc>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	4a26      	ldr	r2, [pc, #152]	@ (800e908 <tcp_close_shutdown+0x1bc>)
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	e013      	b.n	800e89c <tcp_close_shutdown+0x150>
 800e874:	4b24      	ldr	r3, [pc, #144]	@ (800e908 <tcp_close_shutdown+0x1bc>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	60bb      	str	r3, [r7, #8]
 800e87a:	e00c      	b.n	800e896 <tcp_close_shutdown+0x14a>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	429a      	cmp	r2, r3
 800e884:	d104      	bne.n	800e890 <tcp_close_shutdown+0x144>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68da      	ldr	r2, [r3, #12]
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	60da      	str	r2, [r3, #12]
 800e88e:	e005      	b.n	800e89c <tcp_close_shutdown+0x150>
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	60bb      	str	r3, [r7, #8]
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1ef      	bne.n	800e87c <tcp_close_shutdown+0x130>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff fea0 	bl	800e5e8 <tcp_free>
      break;
 800e8a8:	e01a      	b.n	800e8e0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff ff14 	bl	800e6d8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	4816      	ldr	r0, [pc, #88]	@ (800e90c <tcp_close_shutdown+0x1c0>)
 800e8b4:	f001 fb7c 	bl	800ffb0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff feb1 	bl	800e620 <tcp_free_listen>
      break;
 800e8be:	e00f      	b.n	800e8e0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	480e      	ldr	r0, [pc, #56]	@ (800e8fc <tcp_close_shutdown+0x1b0>)
 800e8c4:	f001 fb74 	bl	800ffb0 <tcp_pcb_remove>
 800e8c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e900 <tcp_close_shutdown+0x1b4>)
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff fe8a 	bl	800e5e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e8d4:	e004      	b.n	800e8e0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f81a 	bl	800e910 <tcp_close_shutdown_fin>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	e000      	b.n	800e8e2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0801bd14 	.word	0x0801bd14
 800e8f0:	0801bde8 	.word	0x0801bde8
 800e8f4:	0801bd58 	.word	0x0801bd58
 800e8f8:	0801be08 	.word	0x0801be08
 800e8fc:	2000e0d0 	.word	0x2000e0d0
 800e900:	2000e0d8 	.word	0x2000e0d8
 800e904:	2000e110 	.word	0x2000e110
 800e908:	2000e0c8 	.word	0x2000e0c8
 800e90c:	2000e0cc 	.word	0x2000e0cc

0800e910 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d106      	bne.n	800e92c <tcp_close_shutdown_fin+0x1c>
 800e91e:	4b2e      	ldr	r3, [pc, #184]	@ (800e9d8 <tcp_close_shutdown_fin+0xc8>)
 800e920:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e924:	492d      	ldr	r1, [pc, #180]	@ (800e9dc <tcp_close_shutdown_fin+0xcc>)
 800e926:	482e      	ldr	r0, [pc, #184]	@ (800e9e0 <tcp_close_shutdown_fin+0xd0>)
 800e928:	f009 fcfc 	bl	8018324 <iprintf>

  switch (pcb->state) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	7d1b      	ldrb	r3, [r3, #20]
 800e930:	2b07      	cmp	r3, #7
 800e932:	d020      	beq.n	800e976 <tcp_close_shutdown_fin+0x66>
 800e934:	2b07      	cmp	r3, #7
 800e936:	dc2b      	bgt.n	800e990 <tcp_close_shutdown_fin+0x80>
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d002      	beq.n	800e942 <tcp_close_shutdown_fin+0x32>
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d00d      	beq.n	800e95c <tcp_close_shutdown_fin+0x4c>
 800e940:	e026      	b.n	800e990 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f004 fe0c 	bl	8013560 <tcp_send_fin>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d11f      	bne.n	800e994 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2205      	movs	r2, #5
 800e958:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e95a:	e01b      	b.n	800e994 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f004 fdff 	bl	8013560 <tcp_send_fin>
 800e962:	4603      	mov	r3, r0
 800e964:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d114      	bne.n	800e998 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2205      	movs	r2, #5
 800e972:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e974:	e010      	b.n	800e998 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f004 fdf2 	bl	8013560 <tcp_send_fin>
 800e97c:	4603      	mov	r3, r0
 800e97e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d109      	bne.n	800e99c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2209      	movs	r2, #9
 800e98c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e98e:	e005      	b.n	800e99c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	e01c      	b.n	800e9ce <tcp_close_shutdown_fin+0xbe>
      break;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <tcp_close_shutdown_fin+0x8e>
      break;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <tcp_close_shutdown_fin+0x8e>
      break;
 800e99c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d103      	bne.n	800e9ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f004 ff18 	bl	80137dc <tcp_output>
 800e9ac:	e00d      	b.n	800e9ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b6:	d108      	bne.n	800e9ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	8b5b      	ldrh	r3, [r3, #26]
 800e9bc:	f043 0308 	orr.w	r3, r3, #8
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e001      	b.n	800e9ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0801bd14 	.word	0x0801bd14
 800e9dc:	0801bdc4 	.word	0x0801bdc4
 800e9e0:	0801bd58 	.word	0x0801bd58

0800e9e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d109      	bne.n	800ea06 <tcp_close+0x22>
 800e9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ea30 <tcp_close+0x4c>)
 800e9f4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e9f8:	490e      	ldr	r1, [pc, #56]	@ (800ea34 <tcp_close+0x50>)
 800e9fa:	480f      	ldr	r0, [pc, #60]	@ (800ea38 <tcp_close+0x54>)
 800e9fc:	f009 fc92 	bl	8018324 <iprintf>
 800ea00:	f06f 030f 	mvn.w	r3, #15
 800ea04:	e00f      	b.n	800ea26 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	7d1b      	ldrb	r3, [r3, #20]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d006      	beq.n	800ea1c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	8b5b      	ldrh	r3, [r3, #26]
 800ea12:	f043 0310 	orr.w	r3, r3, #16
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff fe94 	bl	800e74c <tcp_close_shutdown>
 800ea24:	4603      	mov	r3, r0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	0801bd14 	.word	0x0801bd14
 800ea34:	0801be24 	.word	0x0801be24
 800ea38:	0801bd58 	.word	0x0801bd58

0800ea3c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d109      	bne.n	800ea62 <tcp_shutdown+0x26>
 800ea4e:	4b26      	ldr	r3, [pc, #152]	@ (800eae8 <tcp_shutdown+0xac>)
 800ea50:	f240 2207 	movw	r2, #519	@ 0x207
 800ea54:	4925      	ldr	r1, [pc, #148]	@ (800eaec <tcp_shutdown+0xb0>)
 800ea56:	4826      	ldr	r0, [pc, #152]	@ (800eaf0 <tcp_shutdown+0xb4>)
 800ea58:	f009 fc64 	bl	8018324 <iprintf>
 800ea5c:	f06f 030f 	mvn.w	r3, #15
 800ea60:	e03d      	b.n	800eade <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d102      	bne.n	800ea70 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ea6a:	f06f 030a 	mvn.w	r3, #10
 800ea6e:	e036      	b.n	800eade <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d01b      	beq.n	800eaae <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	8b5b      	ldrh	r3, [r3, #26]
 800ea7a:	f043 0310 	orr.w	r3, r3, #16
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d005      	beq.n	800ea96 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f7ff fe5d 	bl	800e74c <tcp_close_shutdown>
 800ea92:	4603      	mov	r3, r0
 800ea94:	e023      	b.n	800eade <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d007      	beq.n	800eaae <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7ff faf4 	bl	800e090 <pbuf_free>
      pcb->refused_data = NULL;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d013      	beq.n	800eadc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	7d1b      	ldrb	r3, [r3, #20]
 800eab8:	2b04      	cmp	r3, #4
 800eaba:	dc02      	bgt.n	800eac2 <tcp_shutdown+0x86>
 800eabc:	2b03      	cmp	r3, #3
 800eabe:	da02      	bge.n	800eac6 <tcp_shutdown+0x8a>
 800eac0:	e009      	b.n	800ead6 <tcp_shutdown+0x9a>
 800eac2:	2b07      	cmp	r3, #7
 800eac4:	d107      	bne.n	800ead6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	4619      	mov	r1, r3
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff fe3d 	bl	800e74c <tcp_close_shutdown>
 800ead2:	4603      	mov	r3, r0
 800ead4:	e003      	b.n	800eade <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ead6:	f06f 030a 	mvn.w	r3, #10
 800eada:	e000      	b.n	800eade <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	0801bd14 	.word	0x0801bd14
 800eaec:	0801be3c 	.word	0x0801be3c
 800eaf0:	0801bd58 	.word	0x0801bd58

0800eaf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b08e      	sub	sp, #56	@ 0x38
 800eaf8:	af04      	add	r7, sp, #16
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d107      	bne.n	800eb14 <tcp_abandon+0x20>
 800eb04:	4b52      	ldr	r3, [pc, #328]	@ (800ec50 <tcp_abandon+0x15c>)
 800eb06:	f240 223d 	movw	r2, #573	@ 0x23d
 800eb0a:	4952      	ldr	r1, [pc, #328]	@ (800ec54 <tcp_abandon+0x160>)
 800eb0c:	4852      	ldr	r0, [pc, #328]	@ (800ec58 <tcp_abandon+0x164>)
 800eb0e:	f009 fc09 	bl	8018324 <iprintf>
 800eb12:	e099      	b.n	800ec48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	7d1b      	ldrb	r3, [r3, #20]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d106      	bne.n	800eb2a <tcp_abandon+0x36>
 800eb1c:	4b4c      	ldr	r3, [pc, #304]	@ (800ec50 <tcp_abandon+0x15c>)
 800eb1e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800eb22:	494e      	ldr	r1, [pc, #312]	@ (800ec5c <tcp_abandon+0x168>)
 800eb24:	484c      	ldr	r0, [pc, #304]	@ (800ec58 <tcp_abandon+0x164>)
 800eb26:	f009 fbfd 	bl	8018324 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	7d1b      	ldrb	r3, [r3, #20]
 800eb2e:	2b0a      	cmp	r3, #10
 800eb30:	d107      	bne.n	800eb42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eb32:	6879      	ldr	r1, [r7, #4]
 800eb34:	484a      	ldr	r0, [pc, #296]	@ (800ec60 <tcp_abandon+0x16c>)
 800eb36:	f001 fa3b 	bl	800ffb0 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7ff fd54 	bl	800e5e8 <tcp_free>
 800eb40:	e082      	b.n	800ec48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	7d1b      	ldrb	r3, [r3, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d126      	bne.n	800ebba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	8adb      	ldrh	r3, [r3, #22]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d02e      	beq.n	800ebd2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb74:	4b3b      	ldr	r3, [pc, #236]	@ (800ec64 <tcp_abandon+0x170>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d105      	bne.n	800eb8a <tcp_abandon+0x96>
 800eb7e:	4b39      	ldr	r3, [pc, #228]	@ (800ec64 <tcp_abandon+0x170>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	4a37      	ldr	r2, [pc, #220]	@ (800ec64 <tcp_abandon+0x170>)
 800eb86:	6013      	str	r3, [r2, #0]
 800eb88:	e013      	b.n	800ebb2 <tcp_abandon+0xbe>
 800eb8a:	4b36      	ldr	r3, [pc, #216]	@ (800ec64 <tcp_abandon+0x170>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	61fb      	str	r3, [r7, #28]
 800eb90:	e00c      	b.n	800ebac <tcp_abandon+0xb8>
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d104      	bne.n	800eba6 <tcp_abandon+0xb2>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	60da      	str	r2, [r3, #12]
 800eba4:	e005      	b.n	800ebb2 <tcp_abandon+0xbe>
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	61fb      	str	r3, [r7, #28]
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1ef      	bne.n	800eb92 <tcp_abandon+0x9e>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	60da      	str	r2, [r3, #12]
 800ebb8:	e00b      	b.n	800ebd2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	8adb      	ldrh	r3, [r3, #22]
 800ebc2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	4828      	ldr	r0, [pc, #160]	@ (800ec68 <tcp_abandon+0x174>)
 800ebc8:	f001 f9f2 	bl	800ffb0 <tcp_pcb_remove>
 800ebcc:	4b27      	ldr	r3, [pc, #156]	@ (800ec6c <tcp_abandon+0x178>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d004      	beq.n	800ebe4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f000 fec6 	bl	800f970 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d004      	beq.n	800ebf6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 febd 	bl	800f970 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d004      	beq.n	800ec08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 feb4 	bl	800f970 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ec08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00e      	beq.n	800ec2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ec0e:	6879      	ldr	r1, [r7, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	3304      	adds	r3, #4
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	8b12      	ldrh	r2, [r2, #24]
 800ec18:	9202      	str	r2, [sp, #8]
 800ec1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ec1c:	9201      	str	r2, [sp, #4]
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	460b      	mov	r3, r1
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	69b9      	ldr	r1, [r7, #24]
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f005 fb8c 	bl	8014344 <tcp_rst>
    }
    last_state = pcb->state;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	7d1b      	ldrb	r3, [r3, #20]
 800ec30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff fcd8 	bl	800e5e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d004      	beq.n	800ec48 <tcp_abandon+0x154>
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f06f 010c 	mvn.w	r1, #12
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	4798      	blx	r3
  }
}
 800ec48:	3728      	adds	r7, #40	@ 0x28
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	0801bd14 	.word	0x0801bd14
 800ec54:	0801be58 	.word	0x0801be58
 800ec58:	0801bd58 	.word	0x0801bd58
 800ec5c:	0801be74 	.word	0x0801be74
 800ec60:	2000e0d4 	.word	0x2000e0d4
 800ec64:	2000e0c8 	.word	0x2000e0c8
 800ec68:	2000e0d0 	.word	0x2000e0d0
 800ec6c:	2000e0d8 	.word	0x2000e0d8

0800ec70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ec78:	2101      	movs	r1, #1
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7ff ff3a 	bl	800eaf4 <tcp_abandon>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b088      	sub	sp, #32
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	4613      	mov	r3, r2
 800ec94:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ec96:	2304      	movs	r3, #4
 800ec98:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800eca0:	4b3e      	ldr	r3, [pc, #248]	@ (800ed9c <tcp_bind+0x114>)
 800eca2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d109      	bne.n	800ecbe <tcp_bind+0x36>
 800ecaa:	4b3d      	ldr	r3, [pc, #244]	@ (800eda0 <tcp_bind+0x118>)
 800ecac:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800ecb0:	493c      	ldr	r1, [pc, #240]	@ (800eda4 <tcp_bind+0x11c>)
 800ecb2:	483d      	ldr	r0, [pc, #244]	@ (800eda8 <tcp_bind+0x120>)
 800ecb4:	f009 fb36 	bl	8018324 <iprintf>
 800ecb8:	f06f 030f 	mvn.w	r3, #15
 800ecbc:	e06a      	b.n	800ed94 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	7d1b      	ldrb	r3, [r3, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d009      	beq.n	800ecda <tcp_bind+0x52>
 800ecc6:	4b36      	ldr	r3, [pc, #216]	@ (800eda0 <tcp_bind+0x118>)
 800ecc8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800eccc:	4937      	ldr	r1, [pc, #220]	@ (800edac <tcp_bind+0x124>)
 800ecce:	4836      	ldr	r0, [pc, #216]	@ (800eda8 <tcp_bind+0x120>)
 800ecd0:	f009 fb28 	bl	8018324 <iprintf>
 800ecd4:	f06f 0305 	mvn.w	r3, #5
 800ecd8:	e05c      	b.n	800ed94 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ecda:	88fb      	ldrh	r3, [r7, #6]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d109      	bne.n	800ecf4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ece0:	f000 f9de 	bl	800f0a0 <tcp_new_port>
 800ece4:	4603      	mov	r3, r0
 800ece6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ece8:	88fb      	ldrh	r3, [r7, #6]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d135      	bne.n	800ed5a <tcp_bind+0xd2>
      return ERR_BUF;
 800ecee:	f06f 0301 	mvn.w	r3, #1
 800ecf2:	e04f      	b.n	800ed94 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	61fb      	str	r3, [r7, #28]
 800ecf8:	e02b      	b.n	800ed52 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ecfa:	4a2d      	ldr	r2, [pc, #180]	@ (800edb0 <tcp_bind+0x128>)
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	61bb      	str	r3, [r7, #24]
 800ed06:	e01e      	b.n	800ed46 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	8adb      	ldrh	r3, [r3, #22]
 800ed0c:	88fa      	ldrh	r2, [r7, #6]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d116      	bne.n	800ed40 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ed12:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d010      	beq.n	800ed3a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00c      	beq.n	800ed3a <tcp_bind+0xb2>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d009      	beq.n	800ed3a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d005      	beq.n	800ed3a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d102      	bne.n	800ed40 <tcp_bind+0xb8>
              return ERR_USE;
 800ed3a:	f06f 0307 	mvn.w	r3, #7
 800ed3e:	e029      	b.n	800ed94 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	61bb      	str	r3, [r7, #24]
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1dd      	bne.n	800ed08 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	dbcf      	blt.n	800ecfa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00c      	beq.n	800ed7a <tcp_bind+0xf2>
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d008      	beq.n	800ed7a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <tcp_bind+0xec>
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	e000      	b.n	800ed76 <tcp_bind+0xee>
 800ed74:	2300      	movs	r3, #0
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	88fa      	ldrh	r2, [r7, #6]
 800ed7e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ed80:	4b0c      	ldr	r3, [pc, #48]	@ (800edb4 <tcp_bind+0x12c>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	60da      	str	r2, [r3, #12]
 800ed88:	4a0a      	ldr	r2, [pc, #40]	@ (800edb4 <tcp_bind+0x12c>)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6013      	str	r3, [r2, #0]
 800ed8e:	f005 fc9b 	bl	80146c8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	0801dd78 	.word	0x0801dd78
 800eda0:	0801bd14 	.word	0x0801bd14
 800eda4:	0801bea8 	.word	0x0801bea8
 800eda8:	0801bd58 	.word	0x0801bd58
 800edac:	0801bec0 	.word	0x0801bec0
 800edb0:	0801dd50 	.word	0x0801dd50
 800edb4:	2000e0c8 	.word	0x2000e0c8

0800edb8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	4613      	mov	r3, r2
 800edc4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <tcp_accept_null+0x22>
 800edcc:	4b07      	ldr	r3, [pc, #28]	@ (800edec <tcp_accept_null+0x34>)
 800edce:	f240 320f 	movw	r2, #783	@ 0x30f
 800edd2:	4907      	ldr	r1, [pc, #28]	@ (800edf0 <tcp_accept_null+0x38>)
 800edd4:	4807      	ldr	r0, [pc, #28]	@ (800edf4 <tcp_accept_null+0x3c>)
 800edd6:	f009 faa5 	bl	8018324 <iprintf>

  tcp_abort(pcb);
 800edda:	68b8      	ldr	r0, [r7, #8]
 800eddc:	f7ff ff48 	bl	800ec70 <tcp_abort>

  return ERR_ABRT;
 800ede0:	f06f 030c 	mvn.w	r3, #12
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	0801bd14 	.word	0x0801bd14
 800edf0:	0801bee8 	.word	0x0801bee8
 800edf4:	0801bd58 	.word	0x0801bd58

0800edf8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	460b      	mov	r3, r1
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d109      	bne.n	800ee24 <tcp_listen_with_backlog_and_err+0x2c>
 800ee10:	4b47      	ldr	r3, [pc, #284]	@ (800ef30 <tcp_listen_with_backlog_and_err+0x138>)
 800ee12:	f240 3259 	movw	r2, #857	@ 0x359
 800ee16:	4947      	ldr	r1, [pc, #284]	@ (800ef34 <tcp_listen_with_backlog_and_err+0x13c>)
 800ee18:	4847      	ldr	r0, [pc, #284]	@ (800ef38 <tcp_listen_with_backlog_and_err+0x140>)
 800ee1a:	f009 fa83 	bl	8018324 <iprintf>
 800ee1e:	23f0      	movs	r3, #240	@ 0xf0
 800ee20:	76fb      	strb	r3, [r7, #27]
 800ee22:	e079      	b.n	800ef18 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	7d1b      	ldrb	r3, [r3, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d009      	beq.n	800ee40 <tcp_listen_with_backlog_and_err+0x48>
 800ee2c:	4b40      	ldr	r3, [pc, #256]	@ (800ef30 <tcp_listen_with_backlog_and_err+0x138>)
 800ee2e:	f240 325a 	movw	r2, #858	@ 0x35a
 800ee32:	4942      	ldr	r1, [pc, #264]	@ (800ef3c <tcp_listen_with_backlog_and_err+0x144>)
 800ee34:	4840      	ldr	r0, [pc, #256]	@ (800ef38 <tcp_listen_with_backlog_and_err+0x140>)
 800ee36:	f009 fa75 	bl	8018324 <iprintf>
 800ee3a:	23f1      	movs	r3, #241	@ 0xf1
 800ee3c:	76fb      	strb	r3, [r7, #27]
 800ee3e:	e06b      	b.n	800ef18 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	7d1b      	ldrb	r3, [r3, #20]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d104      	bne.n	800ee52 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ee4c:	23f7      	movs	r3, #247	@ 0xf7
 800ee4e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ee50:	e062      	b.n	800ef18 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ee52:	2002      	movs	r0, #2
 800ee54:	f7fe fa26 	bl	800d2a4 <memp_malloc>
 800ee58:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ee60:	23ff      	movs	r3, #255	@ 0xff
 800ee62:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ee64:	e058      	b.n	800ef18 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	691a      	ldr	r2, [r3, #16]
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	8ada      	ldrh	r2, [r3, #22]
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	7d5a      	ldrb	r2, [r3, #21]
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	7a5a      	ldrb	r2, [r3, #9]
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	7ada      	ldrb	r2, [r3, #11]
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	7a9a      	ldrb	r2, [r3, #10]
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8adb      	ldrh	r3, [r3, #22]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d021      	beq.n	800eef6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800eeb2:	4b23      	ldr	r3, [pc, #140]	@ (800ef40 <tcp_listen_with_backlog_and_err+0x148>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d105      	bne.n	800eec8 <tcp_listen_with_backlog_and_err+0xd0>
 800eebc:	4b20      	ldr	r3, [pc, #128]	@ (800ef40 <tcp_listen_with_backlog_and_err+0x148>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	4a1f      	ldr	r2, [pc, #124]	@ (800ef40 <tcp_listen_with_backlog_and_err+0x148>)
 800eec4:	6013      	str	r3, [r2, #0]
 800eec6:	e013      	b.n	800eef0 <tcp_listen_with_backlog_and_err+0xf8>
 800eec8:	4b1d      	ldr	r3, [pc, #116]	@ (800ef40 <tcp_listen_with_backlog_and_err+0x148>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	617b      	str	r3, [r7, #20]
 800eece:	e00c      	b.n	800eeea <tcp_listen_with_backlog_and_err+0xf2>
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d104      	bne.n	800eee4 <tcp_listen_with_backlog_and_err+0xec>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	e005      	b.n	800eef0 <tcp_listen_with_backlog_and_err+0xf8>
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1ef      	bne.n	800eed0 <tcp_listen_with_backlog_and_err+0xd8>
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f7ff fb76 	bl	800e5e8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	4a11      	ldr	r2, [pc, #68]	@ (800ef44 <tcp_listen_with_backlog_and_err+0x14c>)
 800ef00:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ef02:	4b11      	ldr	r3, [pc, #68]	@ (800ef48 <tcp_listen_with_backlog_and_err+0x150>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	60da      	str	r2, [r3, #12]
 800ef0a:	4a0f      	ldr	r2, [pc, #60]	@ (800ef48 <tcp_listen_with_backlog_and_err+0x150>)
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	f005 fbda 	bl	80146c8 <tcp_timer_needed>
  res = ERR_OK;
 800ef14:	2300      	movs	r3, #0
 800ef16:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d002      	beq.n	800ef24 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7efa      	ldrb	r2, [r7, #27]
 800ef22:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ef24:	69fb      	ldr	r3, [r7, #28]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	0801bd14 	.word	0x0801bd14
 800ef34:	0801bf08 	.word	0x0801bf08
 800ef38:	0801bd58 	.word	0x0801bd58
 800ef3c:	0801bf38 	.word	0x0801bf38
 800ef40:	2000e0c8 	.word	0x2000e0c8
 800ef44:	0800edb9 	.word	0x0800edb9
 800ef48:	2000e0cc 	.word	0x2000e0cc

0800ef4c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <tcp_update_rcv_ann_wnd+0x1c>
 800ef5a:	4b25      	ldr	r3, [pc, #148]	@ (800eff0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ef5c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ef60:	4924      	ldr	r1, [pc, #144]	@ (800eff4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ef62:	4825      	ldr	r0, [pc, #148]	@ (800eff8 <tcp_update_rcv_ann_wnd+0xac>)
 800ef64:	f009 f9de 	bl	8018324 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ef70:	4413      	add	r3, r2
 800ef72:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ef7c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ef80:	bf28      	it	cs
 800ef82:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ef86:	b292      	uxth	r2, r2
 800ef88:	4413      	add	r3, r2
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	db08      	blt.n	800efa4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	e020      	b.n	800efe6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	dd03      	ble.n	800efba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800efb8:	e014      	b.n	800efe4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efcc:	d306      	bcc.n	800efdc <tcp_update_rcv_ann_wnd+0x90>
 800efce:	4b08      	ldr	r3, [pc, #32]	@ (800eff0 <tcp_update_rcv_ann_wnd+0xa4>)
 800efd0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800efd4:	4909      	ldr	r1, [pc, #36]	@ (800effc <tcp_update_rcv_ann_wnd+0xb0>)
 800efd6:	4808      	ldr	r0, [pc, #32]	@ (800eff8 <tcp_update_rcv_ann_wnd+0xac>)
 800efd8:	f009 f9a4 	bl	8018324 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800efe4:	2300      	movs	r3, #0
  }
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	0801bd14 	.word	0x0801bd14
 800eff4:	0801bf70 	.word	0x0801bf70
 800eff8:	0801bd58 	.word	0x0801bd58
 800effc:	0801bf94 	.word	0x0801bf94

0800f000 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	460b      	mov	r3, r1
 800f00a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d107      	bne.n	800f022 <tcp_recved+0x22>
 800f012:	4b1f      	ldr	r3, [pc, #124]	@ (800f090 <tcp_recved+0x90>)
 800f014:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f018:	491e      	ldr	r1, [pc, #120]	@ (800f094 <tcp_recved+0x94>)
 800f01a:	481f      	ldr	r0, [pc, #124]	@ (800f098 <tcp_recved+0x98>)
 800f01c:	f009 f982 	bl	8018324 <iprintf>
 800f020:	e032      	b.n	800f088 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	7d1b      	ldrb	r3, [r3, #20]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d106      	bne.n	800f038 <tcp_recved+0x38>
 800f02a:	4b19      	ldr	r3, [pc, #100]	@ (800f090 <tcp_recved+0x90>)
 800f02c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f030:	491a      	ldr	r1, [pc, #104]	@ (800f09c <tcp_recved+0x9c>)
 800f032:	4819      	ldr	r0, [pc, #100]	@ (800f098 <tcp_recved+0x98>)
 800f034:	f009 f976 	bl	8018324 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f03c:	887b      	ldrh	r3, [r7, #2]
 800f03e:	4413      	add	r3, r2
 800f040:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f042:	89fb      	ldrh	r3, [r7, #14]
 800f044:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f048:	d804      	bhi.n	800f054 <tcp_recved+0x54>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f04e:	89fa      	ldrh	r2, [r7, #14]
 800f050:	429a      	cmp	r2, r3
 800f052:	d204      	bcs.n	800f05e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f05a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f05c:	e002      	b.n	800f064 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	89fa      	ldrh	r2, [r7, #14]
 800f062:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff ff71 	bl	800ef4c <tcp_update_rcv_ann_wnd>
 800f06a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f072:	d309      	bcc.n	800f088 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	8b5b      	ldrh	r3, [r3, #26]
 800f078:	f043 0302 	orr.w	r3, r3, #2
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f004 fbaa 	bl	80137dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	0801bd14 	.word	0x0801bd14
 800f094:	0801bfb0 	.word	0x0801bfb0
 800f098:	0801bd58 	.word	0x0801bd58
 800f09c:	0801bfc8 	.word	0x0801bfc8

0800f0a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800f124 <tcp_new_port+0x84>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	4b1c      	ldr	r3, [pc, #112]	@ (800f124 <tcp_new_port+0x84>)
 800f0b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800f124 <tcp_new_port+0x84>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d103      	bne.n	800f0ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f0c2:	4b18      	ldr	r3, [pc, #96]	@ (800f124 <tcp_new_port+0x84>)
 800f0c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f0c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	71fb      	strb	r3, [r7, #7]
 800f0ce:	e01e      	b.n	800f10e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	4a15      	ldr	r2, [pc, #84]	@ (800f128 <tcp_new_port+0x88>)
 800f0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	603b      	str	r3, [r7, #0]
 800f0dc:	e011      	b.n	800f102 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	8ada      	ldrh	r2, [r3, #22]
 800f0e2:	4b10      	ldr	r3, [pc, #64]	@ (800f124 <tcp_new_port+0x84>)
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d108      	bne.n	800f0fc <tcp_new_port+0x5c>
        n++;
 800f0ea:	88bb      	ldrh	r3, [r7, #4]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f0f0:	88bb      	ldrh	r3, [r7, #4]
 800f0f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0f6:	d3d8      	bcc.n	800f0aa <tcp_new_port+0xa>
          return 0;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	e00d      	b.n	800f118 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1ea      	bne.n	800f0de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	3301      	adds	r3, #1
 800f10c:	71fb      	strb	r3, [r7, #7]
 800f10e:	79fb      	ldrb	r3, [r7, #7]
 800f110:	2b03      	cmp	r3, #3
 800f112:	d9dd      	bls.n	800f0d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f114:	4b03      	ldr	r3, [pc, #12]	@ (800f124 <tcp_new_port+0x84>)
 800f116:	881b      	ldrh	r3, [r3, #0]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	20000010 	.word	0x20000010
 800f128:	0801dd50 	.word	0x0801dd50

0800f12c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f12c:	b5b0      	push	{r4, r5, r7, lr}
 800f12e:	b090      	sub	sp, #64	@ 0x40
 800f130:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f138:	4b95      	ldr	r3, [pc, #596]	@ (800f390 <tcp_slowtmr+0x264>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3301      	adds	r3, #1
 800f13e:	4a94      	ldr	r2, [pc, #592]	@ (800f390 <tcp_slowtmr+0x264>)
 800f140:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f142:	4b94      	ldr	r3, [pc, #592]	@ (800f394 <tcp_slowtmr+0x268>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	3301      	adds	r3, #1
 800f148:	b2da      	uxtb	r2, r3
 800f14a:	4b92      	ldr	r3, [pc, #584]	@ (800f394 <tcp_slowtmr+0x268>)
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	e000      	b.n	800f152 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f150:	bf00      	nop
  prev = NULL;
 800f152:	2300      	movs	r3, #0
 800f154:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f156:	4b90      	ldr	r3, [pc, #576]	@ (800f398 <tcp_slowtmr+0x26c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f15c:	e29d      	b.n	800f69a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d106      	bne.n	800f174 <tcp_slowtmr+0x48>
 800f166:	4b8d      	ldr	r3, [pc, #564]	@ (800f39c <tcp_slowtmr+0x270>)
 800f168:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f16c:	498c      	ldr	r1, [pc, #560]	@ (800f3a0 <tcp_slowtmr+0x274>)
 800f16e:	488d      	ldr	r0, [pc, #564]	@ (800f3a4 <tcp_slowtmr+0x278>)
 800f170:	f009 f8d8 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f176:	7d1b      	ldrb	r3, [r3, #20]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d106      	bne.n	800f18a <tcp_slowtmr+0x5e>
 800f17c:	4b87      	ldr	r3, [pc, #540]	@ (800f39c <tcp_slowtmr+0x270>)
 800f17e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f182:	4989      	ldr	r1, [pc, #548]	@ (800f3a8 <tcp_slowtmr+0x27c>)
 800f184:	4887      	ldr	r0, [pc, #540]	@ (800f3a4 <tcp_slowtmr+0x278>)
 800f186:	f009 f8cd 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18c:	7d1b      	ldrb	r3, [r3, #20]
 800f18e:	2b0a      	cmp	r3, #10
 800f190:	d106      	bne.n	800f1a0 <tcp_slowtmr+0x74>
 800f192:	4b82      	ldr	r3, [pc, #520]	@ (800f39c <tcp_slowtmr+0x270>)
 800f194:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f198:	4984      	ldr	r1, [pc, #528]	@ (800f3ac <tcp_slowtmr+0x280>)
 800f19a:	4882      	ldr	r0, [pc, #520]	@ (800f3a4 <tcp_slowtmr+0x278>)
 800f19c:	f009 f8c2 	bl	8018324 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a2:	7f9a      	ldrb	r2, [r3, #30]
 800f1a4:	4b7b      	ldr	r3, [pc, #492]	@ (800f394 <tcp_slowtmr+0x268>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d105      	bne.n	800f1b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f1b6:	e270      	b.n	800f69a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f1b8:	4b76      	ldr	r3, [pc, #472]	@ (800f394 <tcp_slowtmr+0x268>)
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d10a      	bne.n	800f1ea <tcp_slowtmr+0xbe>
 800f1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1da:	2b05      	cmp	r3, #5
 800f1dc:	d905      	bls.n	800f1ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f1de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1e8:	e11e      	b.n	800f428 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1f0:	2b0b      	cmp	r3, #11
 800f1f2:	d905      	bls.n	800f200 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1fe:	e113      	b.n	800f428 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f202:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f206:	2b00      	cmp	r3, #0
 800f208:	d075      	beq.n	800f2f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d006      	beq.n	800f220 <tcp_slowtmr+0xf4>
 800f212:	4b62      	ldr	r3, [pc, #392]	@ (800f39c <tcp_slowtmr+0x270>)
 800f214:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f218:	4965      	ldr	r1, [pc, #404]	@ (800f3b0 <tcp_slowtmr+0x284>)
 800f21a:	4862      	ldr	r0, [pc, #392]	@ (800f3a4 <tcp_slowtmr+0x278>)
 800f21c:	f009 f882 	bl	8018324 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f224:	2b00      	cmp	r3, #0
 800f226:	d106      	bne.n	800f236 <tcp_slowtmr+0x10a>
 800f228:	4b5c      	ldr	r3, [pc, #368]	@ (800f39c <tcp_slowtmr+0x270>)
 800f22a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f22e:	4961      	ldr	r1, [pc, #388]	@ (800f3b4 <tcp_slowtmr+0x288>)
 800f230:	485c      	ldr	r0, [pc, #368]	@ (800f3a4 <tcp_slowtmr+0x278>)
 800f232:	f009 f877 	bl	8018324 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f238:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f23c:	2b0b      	cmp	r3, #11
 800f23e:	d905      	bls.n	800f24c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f244:	3301      	adds	r3, #1
 800f246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f24a:	e0ed      	b.n	800f428 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f252:	3b01      	subs	r3, #1
 800f254:	4a58      	ldr	r2, [pc, #352]	@ (800f3b8 <tcp_slowtmr+0x28c>)
 800f256:	5cd3      	ldrb	r3, [r2, r3]
 800f258:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f25c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f260:	7c7a      	ldrb	r2, [r7, #17]
 800f262:	429a      	cmp	r2, r3
 800f264:	d907      	bls.n	800f276 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f268:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f26c:	3301      	adds	r3, #1
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f272:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f278:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f27c:	7c7a      	ldrb	r2, [r7, #17]
 800f27e:	429a      	cmp	r2, r3
 800f280:	f200 80d2 	bhi.w	800f428 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f284:	2301      	movs	r3, #1
 800f286:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d108      	bne.n	800f2a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f294:	f005 f94a 	bl	801452c <tcp_zero_window_probe>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d014      	beq.n	800f2c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f29e:	2300      	movs	r3, #0
 800f2a0:	623b      	str	r3, [r7, #32]
 800f2a2:	e011      	b.n	800f2c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2ae:	f004 f80f 	bl	80132d0 <tcp_split_unsent_seg>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d107      	bne.n	800f2c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f2b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2ba:	f004 fa8f 	bl	80137dc <tcp_output>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f000 80ac 	beq.w	800f428 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f2de:	2b06      	cmp	r3, #6
 800f2e0:	f200 80a2 	bhi.w	800f428 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f2f4:	e098      	b.n	800f428 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	db0f      	blt.n	800f320 <tcp_slowtmr+0x1f4>
 800f300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f302:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f306:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d008      	beq.n	800f320 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f310:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f314:	b29b      	uxth	r3, r3
 800f316:	3301      	adds	r3, #1
 800f318:	b29b      	uxth	r3, r3
 800f31a:	b21a      	sxth	r2, r3
 800f31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f322:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f328:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f32c:	429a      	cmp	r2, r3
 800f32e:	db7b      	blt.n	800f428 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f332:	f004 fd47 	bl	8013dc4 <tcp_rexmit_rto_prepare>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <tcp_slowtmr+0x220>
 800f33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f33e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f340:	2b00      	cmp	r3, #0
 800f342:	d171      	bne.n	800f428 <tcp_slowtmr+0x2fc>
 800f344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d06d      	beq.n	800f428 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34e:	7d1b      	ldrb	r3, [r3, #20]
 800f350:	2b02      	cmp	r3, #2
 800f352:	d03a      	beq.n	800f3ca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f35a:	2b0c      	cmp	r3, #12
 800f35c:	bf28      	it	cs
 800f35e:	230c      	movcs	r3, #12
 800f360:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f364:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f368:	10db      	asrs	r3, r3, #3
 800f36a:	b21b      	sxth	r3, r3
 800f36c:	461a      	mov	r2, r3
 800f36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f370:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f374:	4413      	add	r3, r2
 800f376:	7efa      	ldrb	r2, [r7, #27]
 800f378:	4910      	ldr	r1, [pc, #64]	@ (800f3bc <tcp_slowtmr+0x290>)
 800f37a:	5c8a      	ldrb	r2, [r1, r2]
 800f37c:	4093      	lsls	r3, r2
 800f37e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f386:	4293      	cmp	r3, r2
 800f388:	dc1a      	bgt.n	800f3c0 <tcp_slowtmr+0x294>
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	b21a      	sxth	r2, r3
 800f38e:	e019      	b.n	800f3c4 <tcp_slowtmr+0x298>
 800f390:	2000e0c4 	.word	0x2000e0c4
 800f394:	2000e0da 	.word	0x2000e0da
 800f398:	2000e0d0 	.word	0x2000e0d0
 800f39c:	0801bd14 	.word	0x0801bd14
 800f3a0:	0801c058 	.word	0x0801c058
 800f3a4:	0801bd58 	.word	0x0801bd58
 800f3a8:	0801c084 	.word	0x0801c084
 800f3ac:	0801c0b0 	.word	0x0801c0b0
 800f3b0:	0801c0e0 	.word	0x0801c0e0
 800f3b4:	0801c114 	.word	0x0801c114
 800f3b8:	0801dd48 	.word	0x0801dd48
 800f3bc:	0801dd38 	.word	0x0801dd38
 800f3c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	bf28      	it	cs
 800f3e0:	4613      	movcs	r3, r2
 800f3e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f3e4:	8a7b      	ldrh	r3, [r7, #18]
 800f3e6:	085b      	lsrs	r3, r3, #1
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3fa:	005b      	lsls	r3, r3, #1
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d206      	bcs.n	800f410 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f406:	005b      	lsls	r3, r3, #1
 800f408:	b29a      	uxth	r2, r3
 800f40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f412:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f416:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f41c:	2200      	movs	r2, #0
 800f41e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f422:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f424:	f004 fd3e 	bl	8013ea4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	2b06      	cmp	r3, #6
 800f42e:	d111      	bne.n	800f454 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f432:	8b5b      	ldrh	r3, [r3, #26]
 800f434:	f003 0310 	and.w	r3, r3, #16
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00b      	beq.n	800f454 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f43c:	4b9c      	ldr	r3, [pc, #624]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f442:	6a1b      	ldr	r3, [r3, #32]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	2b28      	cmp	r3, #40	@ 0x28
 800f448:	d904      	bls.n	800f454 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f44a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f44e:	3301      	adds	r3, #1
 800f450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f456:	7a5b      	ldrb	r3, [r3, #9]
 800f458:	f003 0308 	and.w	r3, r3, #8
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d04a      	beq.n	800f4f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f462:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f464:	2b04      	cmp	r3, #4
 800f466:	d003      	beq.n	800f470 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	d142      	bne.n	800f4f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f470:	4b8f      	ldr	r3, [pc, #572]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f476:	6a1b      	ldr	r3, [r3, #32]
 800f478:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f47c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f480:	4b8c      	ldr	r3, [pc, #560]	@ (800f6b4 <tcp_slowtmr+0x588>)
 800f482:	440b      	add	r3, r1
 800f484:	498c      	ldr	r1, [pc, #560]	@ (800f6b8 <tcp_slowtmr+0x58c>)
 800f486:	fba1 1303 	umull	r1, r3, r1, r3
 800f48a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d90a      	bls.n	800f4a6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f494:	3301      	adds	r3, #1
 800f496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f49a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f49e:	3301      	adds	r3, #1
 800f4a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f4a4:	e027      	b.n	800f4f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4a6:	4b82      	ldr	r3, [pc, #520]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ac:	6a1b      	ldr	r3, [r3, #32]
 800f4ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f4bc:	4618      	mov	r0, r3
 800f4be:	4b7f      	ldr	r3, [pc, #508]	@ (800f6bc <tcp_slowtmr+0x590>)
 800f4c0:	fb00 f303 	mul.w	r3, r0, r3
 800f4c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f4c6:	497c      	ldr	r1, [pc, #496]	@ (800f6b8 <tcp_slowtmr+0x58c>)
 800f4c8:	fba1 1303 	umull	r1, r3, r1, r3
 800f4cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d911      	bls.n	800f4f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f4d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4d4:	f004 ffea 	bl	80144ac <tcp_keepalive>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f4de:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d107      	bne.n	800f4f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d011      	beq.n	800f522 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f4fe:	4b6c      	ldr	r3, [pc, #432]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	1ad2      	subs	r2, r2, r3
 800f508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f50e:	4619      	mov	r1, r3
 800f510:	460b      	mov	r3, r1
 800f512:	005b      	lsls	r3, r3, #1
 800f514:	440b      	add	r3, r1
 800f516:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f518:	429a      	cmp	r2, r3
 800f51a:	d302      	bcc.n	800f522 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800f51c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f51e:	f000 feab 	bl	8010278 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f524:	7d1b      	ldrb	r3, [r3, #20]
 800f526:	2b03      	cmp	r3, #3
 800f528:	d10b      	bne.n	800f542 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f52a:	4b61      	ldr	r3, [pc, #388]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	2b28      	cmp	r3, #40	@ 0x28
 800f536:	d904      	bls.n	800f542 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f53c:	3301      	adds	r3, #1
 800f53e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f544:	7d1b      	ldrb	r3, [r3, #20]
 800f546:	2b09      	cmp	r3, #9
 800f548:	d10b      	bne.n	800f562 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f54a:	4b59      	ldr	r3, [pc, #356]	@ (800f6b0 <tcp_slowtmr+0x584>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f550:	6a1b      	ldr	r3, [r3, #32]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	2bf0      	cmp	r3, #240	@ 0xf0
 800f556:	d904      	bls.n	800f562 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f55c:	3301      	adds	r3, #1
 800f55e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f566:	2b00      	cmp	r3, #0
 800f568:	d060      	beq.n	800f62c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f570:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f574:	f000 fccc 	bl	800ff10 <tcp_pcb_purge>
      if (prev != NULL) {
 800f578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d010      	beq.n	800f5a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f57e:	4b50      	ldr	r3, [pc, #320]	@ (800f6c0 <tcp_slowtmr+0x594>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f584:	429a      	cmp	r2, r3
 800f586:	d106      	bne.n	800f596 <tcp_slowtmr+0x46a>
 800f588:	4b4e      	ldr	r3, [pc, #312]	@ (800f6c4 <tcp_slowtmr+0x598>)
 800f58a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f58e:	494e      	ldr	r1, [pc, #312]	@ (800f6c8 <tcp_slowtmr+0x59c>)
 800f590:	484e      	ldr	r0, [pc, #312]	@ (800f6cc <tcp_slowtmr+0x5a0>)
 800f592:	f008 fec7 	bl	8018324 <iprintf>
        prev->next = pcb->next;
 800f596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f598:	68da      	ldr	r2, [r3, #12]
 800f59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59c:	60da      	str	r2, [r3, #12]
 800f59e:	e00f      	b.n	800f5c0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f5a0:	4b47      	ldr	r3, [pc, #284]	@ (800f6c0 <tcp_slowtmr+0x594>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d006      	beq.n	800f5b8 <tcp_slowtmr+0x48c>
 800f5aa:	4b46      	ldr	r3, [pc, #280]	@ (800f6c4 <tcp_slowtmr+0x598>)
 800f5ac:	f240 5271 	movw	r2, #1393	@ 0x571
 800f5b0:	4947      	ldr	r1, [pc, #284]	@ (800f6d0 <tcp_slowtmr+0x5a4>)
 800f5b2:	4846      	ldr	r0, [pc, #280]	@ (800f6cc <tcp_slowtmr+0x5a0>)
 800f5b4:	f008 feb6 	bl	8018324 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	4a40      	ldr	r2, [pc, #256]	@ (800f6c0 <tcp_slowtmr+0x594>)
 800f5be:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f5c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d013      	beq.n	800f5f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ca:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f5d0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5d8:	8ad2      	ldrh	r2, [r2, #22]
 800f5da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5dc:	8b09      	ldrh	r1, [r1, #24]
 800f5de:	9102      	str	r1, [sp, #8]
 800f5e0:	9201      	str	r2, [sp, #4]
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	4622      	mov	r2, r4
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5ec:	f004 feaa 	bl	8014344 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f8:	7d1b      	ldrb	r3, [r3, #20]
 800f5fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f606:	6838      	ldr	r0, [r7, #0]
 800f608:	f7fe ffee 	bl	800e5e8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f60c:	4b31      	ldr	r3, [pc, #196]	@ (800f6d4 <tcp_slowtmr+0x5a8>)
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d004      	beq.n	800f622 <tcp_slowtmr+0x4f6>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f06f 010c 	mvn.w	r1, #12
 800f61e:	68b8      	ldr	r0, [r7, #8]
 800f620:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f622:	4b2c      	ldr	r3, [pc, #176]	@ (800f6d4 <tcp_slowtmr+0x5a8>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d037      	beq.n	800f69a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f62a:	e592      	b.n	800f152 <tcp_slowtmr+0x26>
      prev = pcb;
 800f62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f638:	7f1b      	ldrb	r3, [r3, #28]
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f640:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f644:	7f1a      	ldrb	r2, [r3, #28]
 800f646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f648:	7f5b      	ldrb	r3, [r3, #29]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d325      	bcc.n	800f69a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f650:	2200      	movs	r2, #0
 800f652:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f654:	4b1f      	ldr	r3, [pc, #124]	@ (800f6d4 <tcp_slowtmr+0x5a8>)
 800f656:	2200      	movs	r2, #0
 800f658:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00b      	beq.n	800f67c <tcp_slowtmr+0x550>
 800f664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f66a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f66c:	6912      	ldr	r2, [r2, #16]
 800f66e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f670:	4610      	mov	r0, r2
 800f672:	4798      	blx	r3
 800f674:	4603      	mov	r3, r0
 800f676:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f67a:	e002      	b.n	800f682 <tcp_slowtmr+0x556>
 800f67c:	2300      	movs	r3, #0
 800f67e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f682:	4b14      	ldr	r3, [pc, #80]	@ (800f6d4 <tcp_slowtmr+0x5a8>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	f47f ad62 	bne.w	800f150 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f68c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f696:	f004 f8a1 	bl	80137dc <tcp_output>
  while (pcb != NULL) {
 800f69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f47f ad5e 	bne.w	800f15e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f6a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f6d8 <tcp_slowtmr+0x5ac>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f6ac:	e069      	b.n	800f782 <tcp_slowtmr+0x656>
 800f6ae:	bf00      	nop
 800f6b0:	2000e0c4 	.word	0x2000e0c4
 800f6b4:	000a4cb8 	.word	0x000a4cb8
 800f6b8:	10624dd3 	.word	0x10624dd3
 800f6bc:	000124f8 	.word	0x000124f8
 800f6c0:	2000e0d0 	.word	0x2000e0d0
 800f6c4:	0801bd14 	.word	0x0801bd14
 800f6c8:	0801c14c 	.word	0x0801c14c
 800f6cc:	0801bd58 	.word	0x0801bd58
 800f6d0:	0801c178 	.word	0x0801c178
 800f6d4:	2000e0d8 	.word	0x2000e0d8
 800f6d8:	2000e0d4 	.word	0x2000e0d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6de:	7d1b      	ldrb	r3, [r3, #20]
 800f6e0:	2b0a      	cmp	r3, #10
 800f6e2:	d006      	beq.n	800f6f2 <tcp_slowtmr+0x5c6>
 800f6e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f794 <tcp_slowtmr+0x668>)
 800f6e6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f6ea:	492b      	ldr	r1, [pc, #172]	@ (800f798 <tcp_slowtmr+0x66c>)
 800f6ec:	482b      	ldr	r0, [pc, #172]	@ (800f79c <tcp_slowtmr+0x670>)
 800f6ee:	f008 fe19 	bl	8018324 <iprintf>
    pcb_remove = 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f6f8:	4b29      	ldr	r3, [pc, #164]	@ (800f7a0 <tcp_slowtmr+0x674>)
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6fe:	6a1b      	ldr	r3, [r3, #32]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	2bf0      	cmp	r3, #240	@ 0xf0
 800f704:	d904      	bls.n	800f710 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f70a:	3301      	adds	r3, #1
 800f70c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f714:	2b00      	cmp	r3, #0
 800f716:	d02f      	beq.n	800f778 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f718:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f71a:	f000 fbf9 	bl	800ff10 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f720:	2b00      	cmp	r3, #0
 800f722:	d010      	beq.n	800f746 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f724:	4b1f      	ldr	r3, [pc, #124]	@ (800f7a4 <tcp_slowtmr+0x678>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d106      	bne.n	800f73c <tcp_slowtmr+0x610>
 800f72e:	4b19      	ldr	r3, [pc, #100]	@ (800f794 <tcp_slowtmr+0x668>)
 800f730:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f734:	491c      	ldr	r1, [pc, #112]	@ (800f7a8 <tcp_slowtmr+0x67c>)
 800f736:	4819      	ldr	r0, [pc, #100]	@ (800f79c <tcp_slowtmr+0x670>)
 800f738:	f008 fdf4 	bl	8018324 <iprintf>
        prev->next = pcb->next;
 800f73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f73e:	68da      	ldr	r2, [r3, #12]
 800f740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f742:	60da      	str	r2, [r3, #12]
 800f744:	e00f      	b.n	800f766 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f746:	4b17      	ldr	r3, [pc, #92]	@ (800f7a4 <tcp_slowtmr+0x678>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d006      	beq.n	800f75e <tcp_slowtmr+0x632>
 800f750:	4b10      	ldr	r3, [pc, #64]	@ (800f794 <tcp_slowtmr+0x668>)
 800f752:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f756:	4915      	ldr	r1, [pc, #84]	@ (800f7ac <tcp_slowtmr+0x680>)
 800f758:	4810      	ldr	r0, [pc, #64]	@ (800f79c <tcp_slowtmr+0x670>)
 800f75a:	f008 fde3 	bl	8018324 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	4a10      	ldr	r2, [pc, #64]	@ (800f7a4 <tcp_slowtmr+0x678>)
 800f764:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f768:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f770:	69f8      	ldr	r0, [r7, #28]
 800f772:	f7fe ff39 	bl	800e5e8 <tcp_free>
 800f776:	e004      	b.n	800f782 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1a9      	bne.n	800f6dc <tcp_slowtmr+0x5b0>
    }
  }
}
 800f788:	bf00      	nop
 800f78a:	bf00      	nop
 800f78c:	3730      	adds	r7, #48	@ 0x30
 800f78e:	46bd      	mov	sp, r7
 800f790:	bdb0      	pop	{r4, r5, r7, pc}
 800f792:	bf00      	nop
 800f794:	0801bd14 	.word	0x0801bd14
 800f798:	0801c1a4 	.word	0x0801c1a4
 800f79c:	0801bd58 	.word	0x0801bd58
 800f7a0:	2000e0c4 	.word	0x2000e0c4
 800f7a4:	2000e0d4 	.word	0x2000e0d4
 800f7a8:	0801c1d4 	.word	0x0801c1d4
 800f7ac:	0801c1fc 	.word	0x0801c1fc

0800f7b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f7b6:	4b2d      	ldr	r3, [pc, #180]	@ (800f86c <tcp_fasttmr+0xbc>)
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	4b2b      	ldr	r3, [pc, #172]	@ (800f86c <tcp_fasttmr+0xbc>)
 800f7c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f7c2:	4b2b      	ldr	r3, [pc, #172]	@ (800f870 <tcp_fasttmr+0xc0>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f7c8:	e048      	b.n	800f85c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7f9a      	ldrb	r2, [r3, #30]
 800f7ce:	4b27      	ldr	r3, [pc, #156]	@ (800f86c <tcp_fasttmr+0xbc>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d03f      	beq.n	800f856 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f7d6:	4b25      	ldr	r3, [pc, #148]	@ (800f86c <tcp_fasttmr+0xbc>)
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	8b5b      	ldrh	r3, [r3, #26]
 800f7e2:	f003 0301 	and.w	r3, r3, #1
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d010      	beq.n	800f80c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	8b5b      	ldrh	r3, [r3, #26]
 800f7ee:	f043 0302 	orr.w	r3, r3, #2
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f003 ffef 	bl	80137dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8b5b      	ldrh	r3, [r3, #26]
 800f802:	f023 0303 	bic.w	r3, r3, #3
 800f806:	b29a      	uxth	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	8b5b      	ldrh	r3, [r3, #26]
 800f810:	f003 0308 	and.w	r3, r3, #8
 800f814:	2b00      	cmp	r3, #0
 800f816:	d009      	beq.n	800f82c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	8b5b      	ldrh	r3, [r3, #26]
 800f81c:	f023 0308 	bic.w	r3, r3, #8
 800f820:	b29a      	uxth	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff f872 	bl	800e910 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f83a:	4b0e      	ldr	r3, [pc, #56]	@ (800f874 <tcp_fasttmr+0xc4>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 f819 	bl	800f878 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f846:	4b0b      	ldr	r3, [pc, #44]	@ (800f874 <tcp_fasttmr+0xc4>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d000      	beq.n	800f850 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f84e:	e7b8      	b.n	800f7c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	607b      	str	r3, [r7, #4]
 800f854:	e002      	b.n	800f85c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1b3      	bne.n	800f7ca <tcp_fasttmr+0x1a>
    }
  }
}
 800f862:	bf00      	nop
 800f864:	bf00      	nop
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	2000e0da 	.word	0x2000e0da
 800f870:	2000e0d0 	.word	0x2000e0d0
 800f874:	2000e0d8 	.word	0x2000e0d8

0800f878 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f878:	b590      	push	{r4, r7, lr}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d109      	bne.n	800f89a <tcp_process_refused_data+0x22>
 800f886:	4b37      	ldr	r3, [pc, #220]	@ (800f964 <tcp_process_refused_data+0xec>)
 800f888:	f240 6209 	movw	r2, #1545	@ 0x609
 800f88c:	4936      	ldr	r1, [pc, #216]	@ (800f968 <tcp_process_refused_data+0xf0>)
 800f88e:	4837      	ldr	r0, [pc, #220]	@ (800f96c <tcp_process_refused_data+0xf4>)
 800f890:	f008 fd48 	bl	8018324 <iprintf>
 800f894:	f06f 030f 	mvn.w	r3, #15
 800f898:	e060      	b.n	800f95c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f89e:	7b5b      	ldrb	r3, [r3, #13]
 800f8a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00b      	beq.n	800f8d0 <tcp_process_refused_data+0x58>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6918      	ldr	r0, [r3, #16]
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	68ba      	ldr	r2, [r7, #8]
 800f8c6:	6879      	ldr	r1, [r7, #4]
 800f8c8:	47a0      	blx	r4
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	73fb      	strb	r3, [r7, #15]
 800f8ce:	e007      	b.n	800f8e0 <tcp_process_refused_data+0x68>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	6879      	ldr	r1, [r7, #4]
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	f000 f8a4 	bl	800fa24 <tcp_recv_null>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f8e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d12a      	bne.n	800f93e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	f003 0320 	and.w	r3, r3, #32
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d033      	beq.n	800f95a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f8fa:	d005      	beq.n	800f908 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f900:	3301      	adds	r3, #1
 800f902:	b29a      	uxth	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00b      	beq.n	800f92a <tcp_process_refused_data+0xb2>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6918      	ldr	r0, [r3, #16]
 800f91c:	2300      	movs	r3, #0
 800f91e:	2200      	movs	r2, #0
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	47a0      	blx	r4
 800f924:	4603      	mov	r3, r0
 800f926:	73fb      	strb	r3, [r7, #15]
 800f928:	e001      	b.n	800f92e <tcp_process_refused_data+0xb6>
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f932:	f113 0f0d 	cmn.w	r3, #13
 800f936:	d110      	bne.n	800f95a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f938:	f06f 030c 	mvn.w	r3, #12
 800f93c:	e00e      	b.n	800f95c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f942:	f113 0f0d 	cmn.w	r3, #13
 800f946:	d102      	bne.n	800f94e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f948:	f06f 030c 	mvn.w	r3, #12
 800f94c:	e006      	b.n	800f95c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f954:	f06f 0304 	mvn.w	r3, #4
 800f958:	e000      	b.n	800f95c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	bd90      	pop	{r4, r7, pc}
 800f964:	0801bd14 	.word	0x0801bd14
 800f968:	0801c224 	.word	0x0801c224
 800f96c:	0801bd58 	.word	0x0801bd58

0800f970 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f978:	e007      	b.n	800f98a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 f80a 	bl	800f99a <tcp_seg_free>
    seg = next;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1f4      	bne.n	800f97a <tcp_segs_free+0xa>
  }
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b082      	sub	sp, #8
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00c      	beq.n	800f9c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d004      	beq.n	800f9ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe fb6b 	bl	800e090 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	2003      	movs	r0, #3
 800f9be:	f7fd fcc3 	bl	800d348 <memp_free>
  }
}
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
	...

0800f9cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <tcp_seg_copy+0x1c>
 800f9da:	4b0f      	ldr	r3, [pc, #60]	@ (800fa18 <tcp_seg_copy+0x4c>)
 800f9dc:	f240 6282 	movw	r2, #1666	@ 0x682
 800f9e0:	490e      	ldr	r1, [pc, #56]	@ (800fa1c <tcp_seg_copy+0x50>)
 800f9e2:	480f      	ldr	r0, [pc, #60]	@ (800fa20 <tcp_seg_copy+0x54>)
 800f9e4:	f008 fc9e 	bl	8018324 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f9e8:	2003      	movs	r0, #3
 800f9ea:	f7fd fc5b 	bl	800d2a4 <memp_malloc>
 800f9ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <tcp_seg_copy+0x2e>
    return NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e00a      	b.n	800fa10 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f9fa:	2210      	movs	r2, #16
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f008 feef 	bl	80187e2 <memcpy>
  pbuf_ref(cseg->p);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fe fbe7 	bl	800e1dc <pbuf_ref>
  return cseg;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	0801bd14 	.word	0x0801bd14
 800fa1c:	0801c268 	.word	0x0801c268
 800fa20:	0801bd58 	.word	0x0801bd58

0800fa24 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d109      	bne.n	800fa4c <tcp_recv_null+0x28>
 800fa38:	4b12      	ldr	r3, [pc, #72]	@ (800fa84 <tcp_recv_null+0x60>)
 800fa3a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fa3e:	4912      	ldr	r1, [pc, #72]	@ (800fa88 <tcp_recv_null+0x64>)
 800fa40:	4812      	ldr	r0, [pc, #72]	@ (800fa8c <tcp_recv_null+0x68>)
 800fa42:	f008 fc6f 	bl	8018324 <iprintf>
 800fa46:	f06f 030f 	mvn.w	r3, #15
 800fa4a:	e016      	b.n	800fa7a <tcp_recv_null+0x56>

  if (p != NULL) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d009      	beq.n	800fa66 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	891b      	ldrh	r3, [r3, #8]
 800fa56:	4619      	mov	r1, r3
 800fa58:	68b8      	ldr	r0, [r7, #8]
 800fa5a:	f7ff fad1 	bl	800f000 <tcp_recved>
    pbuf_free(p);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7fe fb16 	bl	800e090 <pbuf_free>
 800fa64:	e008      	b.n	800fa78 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fa66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d104      	bne.n	800fa78 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fa6e:	68b8      	ldr	r0, [r7, #8]
 800fa70:	f7fe ffb8 	bl	800e9e4 <tcp_close>
 800fa74:	4603      	mov	r3, r0
 800fa76:	e000      	b.n	800fa7a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	0801bd14 	.word	0x0801bd14
 800fa88:	0801c284 	.word	0x0801c284
 800fa8c:	0801bd58 	.word	0x0801bd58

0800fa90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fa9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	db01      	blt.n	800faa6 <tcp_kill_prio+0x16>
 800faa2:	79fb      	ldrb	r3, [r7, #7]
 800faa4:	e000      	b.n	800faa8 <tcp_kill_prio+0x18>
 800faa6:	237f      	movs	r3, #127	@ 0x7f
 800faa8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800faaa:	7afb      	ldrb	r3, [r7, #11]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d034      	beq.n	800fb1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fab0:	7afb      	ldrb	r3, [r7, #11]
 800fab2:	3b01      	subs	r3, #1
 800fab4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800faba:	2300      	movs	r3, #0
 800fabc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fabe:	4b19      	ldr	r3, [pc, #100]	@ (800fb24 <tcp_kill_prio+0x94>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	617b      	str	r3, [r7, #20]
 800fac4:	e01f      	b.n	800fb06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	7d5b      	ldrb	r3, [r3, #21]
 800faca:	7afa      	ldrb	r2, [r7, #11]
 800facc:	429a      	cmp	r2, r3
 800face:	d80c      	bhi.n	800faea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fad4:	7afa      	ldrb	r2, [r7, #11]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d112      	bne.n	800fb00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fada:	4b13      	ldr	r3, [pc, #76]	@ (800fb28 <tcp_kill_prio+0x98>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d80a      	bhi.n	800fb00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800faea:	4b0f      	ldr	r3, [pc, #60]	@ (800fb28 <tcp_kill_prio+0x98>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	7d5b      	ldrb	r3, [r3, #21]
 800fafe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	617b      	str	r3, [r7, #20]
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1dc      	bne.n	800fac6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d004      	beq.n	800fb1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fb12:	6938      	ldr	r0, [r7, #16]
 800fb14:	f7ff f8ac 	bl	800ec70 <tcp_abort>
 800fb18:	e000      	b.n	800fb1c <tcp_kill_prio+0x8c>
    return;
 800fb1a:	bf00      	nop
  }
}
 800fb1c:	3718      	adds	r7, #24
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	2000e0d0 	.word	0x2000e0d0
 800fb28:	2000e0c4 	.word	0x2000e0c4

0800fb2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	4603      	mov	r3, r0
 800fb34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	2b08      	cmp	r3, #8
 800fb3a:	d009      	beq.n	800fb50 <tcp_kill_state+0x24>
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	2b09      	cmp	r3, #9
 800fb40:	d006      	beq.n	800fb50 <tcp_kill_state+0x24>
 800fb42:	4b1a      	ldr	r3, [pc, #104]	@ (800fbac <tcp_kill_state+0x80>)
 800fb44:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800fb48:	4919      	ldr	r1, [pc, #100]	@ (800fbb0 <tcp_kill_state+0x84>)
 800fb4a:	481a      	ldr	r0, [pc, #104]	@ (800fbb4 <tcp_kill_state+0x88>)
 800fb4c:	f008 fbea 	bl	8018324 <iprintf>

  inactivity = 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb58:	4b17      	ldr	r3, [pc, #92]	@ (800fbb8 <tcp_kill_state+0x8c>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	e017      	b.n	800fb90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	7d1b      	ldrb	r3, [r3, #20]
 800fb64:	79fa      	ldrb	r2, [r7, #7]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d10f      	bne.n	800fb8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fb6a:	4b14      	ldr	r3, [pc, #80]	@ (800fbbc <tcp_kill_state+0x90>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d807      	bhi.n	800fb8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fb7a:	4b10      	ldr	r3, [pc, #64]	@ (800fbbc <tcp_kill_state+0x90>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	617b      	str	r3, [r7, #20]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1e4      	bne.n	800fb60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d003      	beq.n	800fba4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	6938      	ldr	r0, [r7, #16]
 800fba0:	f7fe ffa8 	bl	800eaf4 <tcp_abandon>
  }
}
 800fba4:	bf00      	nop
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	0801bd14 	.word	0x0801bd14
 800fbb0:	0801c2a0 	.word	0x0801c2a0
 800fbb4:	0801bd58 	.word	0x0801bd58
 800fbb8:	2000e0d0 	.word	0x2000e0d0
 800fbbc:	2000e0c4 	.word	0x2000e0c4

0800fbc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbce:	4b12      	ldr	r3, [pc, #72]	@ (800fc18 <tcp_kill_timewait+0x58>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	60fb      	str	r3, [r7, #12]
 800fbd4:	e012      	b.n	800fbfc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fbd6:	4b11      	ldr	r3, [pc, #68]	@ (800fc1c <tcp_kill_timewait+0x5c>)
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d807      	bhi.n	800fbf6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc1c <tcp_kill_timewait+0x5c>)
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6a1b      	ldr	r3, [r3, #32]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1e9      	bne.n	800fbd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc08:	68b8      	ldr	r0, [r7, #8]
 800fc0a:	f7ff f831 	bl	800ec70 <tcp_abort>
  }
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	2000e0d4 	.word	0x2000e0d4
 800fc1c:	2000e0c4 	.word	0x2000e0c4

0800fc20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fc26:	4b10      	ldr	r3, [pc, #64]	@ (800fc68 <tcp_handle_closepend+0x48>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc2c:	e014      	b.n	800fc58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	8b5b      	ldrh	r3, [r3, #26]
 800fc38:	f003 0308 	and.w	r3, r3, #8
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d009      	beq.n	800fc54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	8b5b      	ldrh	r3, [r3, #26]
 800fc44:	f023 0308 	bic.w	r3, r3, #8
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7fe fe5e 	bl	800e910 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1e7      	bne.n	800fc2e <tcp_handle_closepend+0xe>
  }
}
 800fc5e:	bf00      	nop
 800fc60:	bf00      	nop
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	2000e0d0 	.word	0x2000e0d0

0800fc6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	4603      	mov	r3, r0
 800fc74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fc76:	2001      	movs	r0, #1
 800fc78:	f7fd fb14 	bl	800d2a4 <memp_malloc>
 800fc7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d126      	bne.n	800fcd2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fc84:	f7ff ffcc 	bl	800fc20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fc88:	f7ff ff9a 	bl	800fbc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	f7fd fb09 	bl	800d2a4 <memp_malloc>
 800fc92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d11b      	bne.n	800fcd2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fc9a:	2009      	movs	r0, #9
 800fc9c:	f7ff ff46 	bl	800fb2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fca0:	2001      	movs	r0, #1
 800fca2:	f7fd faff 	bl	800d2a4 <memp_malloc>
 800fca6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d111      	bne.n	800fcd2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fcae:	2008      	movs	r0, #8
 800fcb0:	f7ff ff3c 	bl	800fb2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcb4:	2001      	movs	r0, #1
 800fcb6:	f7fd faf5 	bl	800d2a4 <memp_malloc>
 800fcba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d107      	bne.n	800fcd2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fee3 	bl	800fa90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcca:	2001      	movs	r0, #1
 800fccc:	f7fd faea 	bl	800d2a4 <memp_malloc>
 800fcd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d03f      	beq.n	800fd58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fcd8:	229c      	movs	r2, #156	@ 0x9c
 800fcda:	2100      	movs	r1, #0
 800fcdc:	68f8      	ldr	r0, [r7, #12]
 800fcde:	f008 fcc7 	bl	8018670 <memset>
    pcb->prio = prio;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	79fa      	ldrb	r2, [r7, #7]
 800fce6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fcee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fcf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	22ff      	movs	r2, #255	@ 0xff
 800fd06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fd0e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2206      	movs	r2, #6
 800fd14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2206      	movs	r2, #6
 800fd1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd24:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <tcp_alloc+0xf8>)
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fd36:	4b0c      	ldr	r3, [pc, #48]	@ (800fd68 <tcp_alloc+0xfc>)
 800fd38:	781a      	ldrb	r2, [r3, #0]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fd44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	4a08      	ldr	r2, [pc, #32]	@ (800fd6c <tcp_alloc+0x100>)
 800fd4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4a07      	ldr	r2, [pc, #28]	@ (800fd70 <tcp_alloc+0x104>)
 800fd54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fd58:	68fb      	ldr	r3, [r7, #12]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	2000e0c4 	.word	0x2000e0c4
 800fd68:	2000e0da 	.word	0x2000e0da
 800fd6c:	0800fa25 	.word	0x0800fa25
 800fd70:	006ddd00 	.word	0x006ddd00

0800fd74 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fd7e:	2040      	movs	r0, #64	@ 0x40
 800fd80:	f7ff ff74 	bl	800fc6c <tcp_alloc>
 800fd84:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fd86:	68fb      	ldr	r3, [r7, #12]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	611a      	str	r2, [r3, #16]
  }
}
 800fda6:	bf00      	nop
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
	...

0800fdb4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00e      	beq.n	800fde2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	7d1b      	ldrb	r3, [r3, #20]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d106      	bne.n	800fdda <tcp_recv+0x26>
 800fdcc:	4b07      	ldr	r3, [pc, #28]	@ (800fdec <tcp_recv+0x38>)
 800fdce:	f240 72df 	movw	r2, #2015	@ 0x7df
 800fdd2:	4907      	ldr	r1, [pc, #28]	@ (800fdf0 <tcp_recv+0x3c>)
 800fdd4:	4807      	ldr	r0, [pc, #28]	@ (800fdf4 <tcp_recv+0x40>)
 800fdd6:	f008 faa5 	bl	8018324 <iprintf>
    pcb->recv = recv;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	683a      	ldr	r2, [r7, #0]
 800fdde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800fde2:	bf00      	nop
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	0801bd14 	.word	0x0801bd14
 800fdf0:	0801c2b0 	.word	0x0801c2b0
 800fdf4:	0801bd58 	.word	0x0801bd58

0800fdf8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00e      	beq.n	800fe26 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7d1b      	ldrb	r3, [r3, #20]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d106      	bne.n	800fe1e <tcp_sent+0x26>
 800fe10:	4b07      	ldr	r3, [pc, #28]	@ (800fe30 <tcp_sent+0x38>)
 800fe12:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800fe16:	4907      	ldr	r1, [pc, #28]	@ (800fe34 <tcp_sent+0x3c>)
 800fe18:	4807      	ldr	r0, [pc, #28]	@ (800fe38 <tcp_sent+0x40>)
 800fe1a:	f008 fa83 	bl	8018324 <iprintf>
    pcb->sent = sent;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	683a      	ldr	r2, [r7, #0]
 800fe22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800fe26:	bf00      	nop
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	0801bd14 	.word	0x0801bd14
 800fe34:	0801c2d8 	.word	0x0801c2d8
 800fe38:	0801bd58 	.word	0x0801bd58

0800fe3c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00e      	beq.n	800fe6a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	7d1b      	ldrb	r3, [r3, #20]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d106      	bne.n	800fe62 <tcp_err+0x26>
 800fe54:	4b07      	ldr	r3, [pc, #28]	@ (800fe74 <tcp_err+0x38>)
 800fe56:	f640 020d 	movw	r2, #2061	@ 0x80d
 800fe5a:	4907      	ldr	r1, [pc, #28]	@ (800fe78 <tcp_err+0x3c>)
 800fe5c:	4807      	ldr	r0, [pc, #28]	@ (800fe7c <tcp_err+0x40>)
 800fe5e:	f008 fa61 	bl	8018324 <iprintf>
    pcb->errf = err;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	683a      	ldr	r2, [r7, #0]
 800fe66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800fe6a:	bf00      	nop
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	0801bd14 	.word	0x0801bd14
 800fe78:	0801c300 	.word	0x0801c300
 800fe7c:	0801bd58 	.word	0x0801bd58

0800fe80 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d008      	beq.n	800fea2 <tcp_accept+0x22>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	7d1b      	ldrb	r3, [r3, #20]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d104      	bne.n	800fea2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	683a      	ldr	r2, [r7, #0]
 800fea0:	619a      	str	r2, [r3, #24]
  }
}
 800fea2:	bf00      	nop
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
	...

0800feb0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	4613      	mov	r3, r2
 800febc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d107      	bne.n	800fed4 <tcp_poll+0x24>
 800fec4:	4b0e      	ldr	r3, [pc, #56]	@ (800ff00 <tcp_poll+0x50>)
 800fec6:	f640 023d 	movw	r2, #2109	@ 0x83d
 800feca:	490e      	ldr	r1, [pc, #56]	@ (800ff04 <tcp_poll+0x54>)
 800fecc:	480e      	ldr	r0, [pc, #56]	@ (800ff08 <tcp_poll+0x58>)
 800fece:	f008 fa29 	bl	8018324 <iprintf>
 800fed2:	e011      	b.n	800fef8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	7d1b      	ldrb	r3, [r3, #20]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d106      	bne.n	800feea <tcp_poll+0x3a>
 800fedc:	4b08      	ldr	r3, [pc, #32]	@ (800ff00 <tcp_poll+0x50>)
 800fede:	f640 023e 	movw	r2, #2110	@ 0x83e
 800fee2:	490a      	ldr	r1, [pc, #40]	@ (800ff0c <tcp_poll+0x5c>)
 800fee4:	4808      	ldr	r0, [pc, #32]	@ (800ff08 <tcp_poll+0x58>)
 800fee6:	f008 fa1d 	bl	8018324 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	79fa      	ldrb	r2, [r7, #7]
 800fef6:	775a      	strb	r2, [r3, #29]
}
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	0801bd14 	.word	0x0801bd14
 800ff04:	0801c328 	.word	0x0801c328
 800ff08:	0801bd58 	.word	0x0801bd58
 800ff0c:	0801c340 	.word	0x0801c340

0800ff10 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d107      	bne.n	800ff2e <tcp_pcb_purge+0x1e>
 800ff1e:	4b21      	ldr	r3, [pc, #132]	@ (800ffa4 <tcp_pcb_purge+0x94>)
 800ff20:	f640 0251 	movw	r2, #2129	@ 0x851
 800ff24:	4920      	ldr	r1, [pc, #128]	@ (800ffa8 <tcp_pcb_purge+0x98>)
 800ff26:	4821      	ldr	r0, [pc, #132]	@ (800ffac <tcp_pcb_purge+0x9c>)
 800ff28:	f008 f9fc 	bl	8018324 <iprintf>
 800ff2c:	e037      	b.n	800ff9e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	7d1b      	ldrb	r3, [r3, #20]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d033      	beq.n	800ff9e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ff3a:	2b0a      	cmp	r3, #10
 800ff3c:	d02f      	beq.n	800ff9e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d02b      	beq.n	800ff9e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d007      	beq.n	800ff5e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fe f89c 	bl	800e090 <pbuf_free>
      pcb->refused_data = NULL;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f986 	bl	8010278 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff72:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff fcf9 	bl	800f970 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff fcf4 	bl	800f970 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	0801bd14 	.word	0x0801bd14
 800ffa8:	0801c360 	.word	0x0801c360
 800ffac:	0801bd58 	.word	0x0801bd58

0800ffb0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d106      	bne.n	800ffce <tcp_pcb_remove+0x1e>
 800ffc0:	4b3e      	ldr	r3, [pc, #248]	@ (80100bc <tcp_pcb_remove+0x10c>)
 800ffc2:	f640 0283 	movw	r2, #2179	@ 0x883
 800ffc6:	493e      	ldr	r1, [pc, #248]	@ (80100c0 <tcp_pcb_remove+0x110>)
 800ffc8:	483e      	ldr	r0, [pc, #248]	@ (80100c4 <tcp_pcb_remove+0x114>)
 800ffca:	f008 f9ab 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d106      	bne.n	800ffe2 <tcp_pcb_remove+0x32>
 800ffd4:	4b39      	ldr	r3, [pc, #228]	@ (80100bc <tcp_pcb_remove+0x10c>)
 800ffd6:	f640 0284 	movw	r2, #2180	@ 0x884
 800ffda:	493b      	ldr	r1, [pc, #236]	@ (80100c8 <tcp_pcb_remove+0x118>)
 800ffdc:	4839      	ldr	r0, [pc, #228]	@ (80100c4 <tcp_pcb_remove+0x114>)
 800ffde:	f008 f9a1 	bl	8018324 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d105      	bne.n	800fff8 <tcp_pcb_remove+0x48>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68da      	ldr	r2, [r3, #12]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	e013      	b.n	8010020 <tcp_pcb_remove+0x70>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	60fb      	str	r3, [r7, #12]
 800fffe:	e00c      	b.n	801001a <tcp_pcb_remove+0x6a>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d104      	bne.n	8010014 <tcp_pcb_remove+0x64>
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	68da      	ldr	r2, [r3, #12]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	60da      	str	r2, [r3, #12]
 8010012:	e005      	b.n	8010020 <tcp_pcb_remove+0x70>
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	60fb      	str	r3, [r7, #12]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1ef      	bne.n	8010000 <tcp_pcb_remove+0x50>
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	2200      	movs	r2, #0
 8010024:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010026:	6838      	ldr	r0, [r7, #0]
 8010028:	f7ff ff72 	bl	800ff10 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	7d1b      	ldrb	r3, [r3, #20]
 8010030:	2b0a      	cmp	r3, #10
 8010032:	d013      	beq.n	801005c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010038:	2b01      	cmp	r3, #1
 801003a:	d00f      	beq.n	801005c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	8b5b      	ldrh	r3, [r3, #26]
 8010040:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010044:	2b00      	cmp	r3, #0
 8010046:	d009      	beq.n	801005c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	8b5b      	ldrh	r3, [r3, #26]
 801004c:	f043 0302 	orr.w	r3, r3, #2
 8010050:	b29a      	uxth	r2, r3
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010056:	6838      	ldr	r0, [r7, #0]
 8010058:	f003 fbc0 	bl	80137dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	7d1b      	ldrb	r3, [r3, #20]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d020      	beq.n	80100a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010068:	2b00      	cmp	r3, #0
 801006a:	d006      	beq.n	801007a <tcp_pcb_remove+0xca>
 801006c:	4b13      	ldr	r3, [pc, #76]	@ (80100bc <tcp_pcb_remove+0x10c>)
 801006e:	f640 0293 	movw	r2, #2195	@ 0x893
 8010072:	4916      	ldr	r1, [pc, #88]	@ (80100cc <tcp_pcb_remove+0x11c>)
 8010074:	4813      	ldr	r0, [pc, #76]	@ (80100c4 <tcp_pcb_remove+0x114>)
 8010076:	f008 f955 	bl	8018324 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801007e:	2b00      	cmp	r3, #0
 8010080:	d006      	beq.n	8010090 <tcp_pcb_remove+0xe0>
 8010082:	4b0e      	ldr	r3, [pc, #56]	@ (80100bc <tcp_pcb_remove+0x10c>)
 8010084:	f640 0294 	movw	r2, #2196	@ 0x894
 8010088:	4911      	ldr	r1, [pc, #68]	@ (80100d0 <tcp_pcb_remove+0x120>)
 801008a:	480e      	ldr	r0, [pc, #56]	@ (80100c4 <tcp_pcb_remove+0x114>)
 801008c:	f008 f94a 	bl	8018324 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010094:	2b00      	cmp	r3, #0
 8010096:	d006      	beq.n	80100a6 <tcp_pcb_remove+0xf6>
 8010098:	4b08      	ldr	r3, [pc, #32]	@ (80100bc <tcp_pcb_remove+0x10c>)
 801009a:	f640 0296 	movw	r2, #2198	@ 0x896
 801009e:	490d      	ldr	r1, [pc, #52]	@ (80100d4 <tcp_pcb_remove+0x124>)
 80100a0:	4808      	ldr	r0, [pc, #32]	@ (80100c4 <tcp_pcb_remove+0x114>)
 80100a2:	f008 f93f 	bl	8018324 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2200      	movs	r2, #0
 80100aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	2200      	movs	r2, #0
 80100b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80100b2:	bf00      	nop
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	0801bd14 	.word	0x0801bd14
 80100c0:	0801c37c 	.word	0x0801c37c
 80100c4:	0801bd58 	.word	0x0801bd58
 80100c8:	0801c398 	.word	0x0801c398
 80100cc:	0801c3b8 	.word	0x0801c3b8
 80100d0:	0801c3d0 	.word	0x0801c3d0
 80100d4:	0801c3ec 	.word	0x0801c3ec

080100d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <tcp_next_iss+0x1c>
 80100e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010110 <tcp_next_iss+0x38>)
 80100e8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80100ec:	4909      	ldr	r1, [pc, #36]	@ (8010114 <tcp_next_iss+0x3c>)
 80100ee:	480a      	ldr	r0, [pc, #40]	@ (8010118 <tcp_next_iss+0x40>)
 80100f0:	f008 f918 	bl	8018324 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80100f4:	4b09      	ldr	r3, [pc, #36]	@ (801011c <tcp_next_iss+0x44>)
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	4b09      	ldr	r3, [pc, #36]	@ (8010120 <tcp_next_iss+0x48>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4413      	add	r3, r2
 80100fe:	4a07      	ldr	r2, [pc, #28]	@ (801011c <tcp_next_iss+0x44>)
 8010100:	6013      	str	r3, [r2, #0]
  return iss;
 8010102:	4b06      	ldr	r3, [pc, #24]	@ (801011c <tcp_next_iss+0x44>)
 8010104:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	0801bd14 	.word	0x0801bd14
 8010114:	0801c404 	.word	0x0801c404
 8010118:	0801bd58 	.word	0x0801bd58
 801011c:	20000014 	.word	0x20000014
 8010120:	2000e0c4 	.word	0x2000e0c4

08010124 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	4603      	mov	r3, r0
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d106      	bne.n	8010146 <tcp_eff_send_mss_netif+0x22>
 8010138:	4b14      	ldr	r3, [pc, #80]	@ (801018c <tcp_eff_send_mss_netif+0x68>)
 801013a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801013e:	4914      	ldr	r1, [pc, #80]	@ (8010190 <tcp_eff_send_mss_netif+0x6c>)
 8010140:	4814      	ldr	r0, [pc, #80]	@ (8010194 <tcp_eff_send_mss_netif+0x70>)
 8010142:	f008 f8ef 	bl	8018324 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d101      	bne.n	8010150 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801014c:	89fb      	ldrh	r3, [r7, #14]
 801014e:	e019      	b.n	8010184 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010154:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010156:	8afb      	ldrh	r3, [r7, #22]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d012      	beq.n	8010182 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801015c:	2328      	movs	r3, #40	@ 0x28
 801015e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010160:	8afa      	ldrh	r2, [r7, #22]
 8010162:	8abb      	ldrh	r3, [r7, #20]
 8010164:	429a      	cmp	r2, r3
 8010166:	d904      	bls.n	8010172 <tcp_eff_send_mss_netif+0x4e>
 8010168:	8afa      	ldrh	r2, [r7, #22]
 801016a:	8abb      	ldrh	r3, [r7, #20]
 801016c:	1ad3      	subs	r3, r2, r3
 801016e:	b29b      	uxth	r3, r3
 8010170:	e000      	b.n	8010174 <tcp_eff_send_mss_netif+0x50>
 8010172:	2300      	movs	r3, #0
 8010174:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010176:	8a7a      	ldrh	r2, [r7, #18]
 8010178:	89fb      	ldrh	r3, [r7, #14]
 801017a:	4293      	cmp	r3, r2
 801017c:	bf28      	it	cs
 801017e:	4613      	movcs	r3, r2
 8010180:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010182:	89fb      	ldrh	r3, [r7, #14]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3718      	adds	r7, #24
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	0801bd14 	.word	0x0801bd14
 8010190:	0801c420 	.word	0x0801c420
 8010194:	0801bd58 	.word	0x0801bd58

08010198 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d119      	bne.n	80101e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80101ac:	4b10      	ldr	r3, [pc, #64]	@ (80101f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80101ae:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80101b2:	4910      	ldr	r1, [pc, #64]	@ (80101f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80101b4:	4810      	ldr	r0, [pc, #64]	@ (80101f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80101b6:	f008 f8b5 	bl	8018324 <iprintf>

  while (pcb != NULL) {
 80101ba:	e011      	b.n	80101e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d108      	bne.n	80101da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80101ce:	68f8      	ldr	r0, [r7, #12]
 80101d0:	f7fe fd4e 	bl	800ec70 <tcp_abort>
      pcb = next;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	60fb      	str	r3, [r7, #12]
 80101d8:	e002      	b.n	80101e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d1ea      	bne.n	80101bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80101e6:	bf00      	nop
 80101e8:	bf00      	nop
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	0801bd14 	.word	0x0801bd14
 80101f4:	0801c448 	.word	0x0801c448
 80101f8:	0801bd58 	.word	0x0801bd58

080101fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d02a      	beq.n	8010262 <tcp_netif_ip_addr_changed+0x66>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d026      	beq.n	8010262 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010214:	4b15      	ldr	r3, [pc, #84]	@ (801026c <tcp_netif_ip_addr_changed+0x70>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7ff ffbc 	bl	8010198 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010220:	4b13      	ldr	r3, [pc, #76]	@ (8010270 <tcp_netif_ip_addr_changed+0x74>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff ffb6 	bl	8010198 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d017      	beq.n	8010262 <tcp_netif_ip_addr_changed+0x66>
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d013      	beq.n	8010262 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801023a:	4b0e      	ldr	r3, [pc, #56]	@ (8010274 <tcp_netif_ip_addr_changed+0x78>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	e00c      	b.n	801025c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	429a      	cmp	r2, r3
 801024c:	d103      	bne.n	8010256 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1ef      	bne.n	8010242 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010262:	bf00      	nop
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	2000e0d0 	.word	0x2000e0d0
 8010270:	2000e0c8 	.word	0x2000e0c8
 8010274:	2000e0cc 	.word	0x2000e0cc

08010278 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fb6f 	bl	800f970 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010298:	bf00      	nop
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80102a0:	b590      	push	{r4, r7, lr}
 80102a2:	b08d      	sub	sp, #52	@ 0x34
 80102a4:	af04      	add	r7, sp, #16
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d105      	bne.n	80102bc <tcp_input+0x1c>
 80102b0:	4b9b      	ldr	r3, [pc, #620]	@ (8010520 <tcp_input+0x280>)
 80102b2:	2283      	movs	r2, #131	@ 0x83
 80102b4:	499b      	ldr	r1, [pc, #620]	@ (8010524 <tcp_input+0x284>)
 80102b6:	489c      	ldr	r0, [pc, #624]	@ (8010528 <tcp_input+0x288>)
 80102b8:	f008 f834 	bl	8018324 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	4a9a      	ldr	r2, [pc, #616]	@ (801052c <tcp_input+0x28c>)
 80102c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	895b      	ldrh	r3, [r3, #10]
 80102c8:	2b13      	cmp	r3, #19
 80102ca:	f240 83d1 	bls.w	8010a70 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102ce:	4b98      	ldr	r3, [pc, #608]	@ (8010530 <tcp_input+0x290>)
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	4a97      	ldr	r2, [pc, #604]	@ (8010530 <tcp_input+0x290>)
 80102d4:	6812      	ldr	r2, [r2, #0]
 80102d6:	4611      	mov	r1, r2
 80102d8:	4618      	mov	r0, r3
 80102da:	f006 f9df 	bl	801669c <ip4_addr_isbroadcast_u32>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f040 83c7 	bne.w	8010a74 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80102e6:	4b92      	ldr	r3, [pc, #584]	@ (8010530 <tcp_input+0x290>)
 80102e8:	695b      	ldr	r3, [r3, #20]
 80102ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102ee:	2be0      	cmp	r3, #224	@ 0xe0
 80102f0:	f000 83c0 	beq.w	8010a74 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80102f4:	4b8d      	ldr	r3, [pc, #564]	@ (801052c <tcp_input+0x28c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	899b      	ldrh	r3, [r3, #12]
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fc fb1b 	bl	800c938 <lwip_htons>
 8010302:	4603      	mov	r3, r0
 8010304:	0b1b      	lsrs	r3, r3, #12
 8010306:	b29b      	uxth	r3, r3
 8010308:	b2db      	uxtb	r3, r3
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801030e:	7cbb      	ldrb	r3, [r7, #18]
 8010310:	2b13      	cmp	r3, #19
 8010312:	f240 83b1 	bls.w	8010a78 <tcp_input+0x7d8>
 8010316:	7cbb      	ldrb	r3, [r7, #18]
 8010318:	b29a      	uxth	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	891b      	ldrh	r3, [r3, #8]
 801031e:	429a      	cmp	r2, r3
 8010320:	f200 83aa 	bhi.w	8010a78 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010324:	7cbb      	ldrb	r3, [r7, #18]
 8010326:	b29b      	uxth	r3, r3
 8010328:	3b14      	subs	r3, #20
 801032a:	b29a      	uxth	r2, r3
 801032c:	4b81      	ldr	r3, [pc, #516]	@ (8010534 <tcp_input+0x294>)
 801032e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010330:	4b81      	ldr	r3, [pc, #516]	@ (8010538 <tcp_input+0x298>)
 8010332:	2200      	movs	r2, #0
 8010334:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	895a      	ldrh	r2, [r3, #10]
 801033a:	7cbb      	ldrb	r3, [r7, #18]
 801033c:	b29b      	uxth	r3, r3
 801033e:	429a      	cmp	r2, r3
 8010340:	d309      	bcc.n	8010356 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010342:	4b7c      	ldr	r3, [pc, #496]	@ (8010534 <tcp_input+0x294>)
 8010344:	881a      	ldrh	r2, [r3, #0]
 8010346:	4b7d      	ldr	r3, [pc, #500]	@ (801053c <tcp_input+0x29c>)
 8010348:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801034a:	7cbb      	ldrb	r3, [r7, #18]
 801034c:	4619      	mov	r1, r3
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7fd fe18 	bl	800df84 <pbuf_remove_header>
 8010354:	e04e      	b.n	80103f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d105      	bne.n	801036a <tcp_input+0xca>
 801035e:	4b70      	ldr	r3, [pc, #448]	@ (8010520 <tcp_input+0x280>)
 8010360:	22c2      	movs	r2, #194	@ 0xc2
 8010362:	4977      	ldr	r1, [pc, #476]	@ (8010540 <tcp_input+0x2a0>)
 8010364:	4870      	ldr	r0, [pc, #448]	@ (8010528 <tcp_input+0x288>)
 8010366:	f007 ffdd 	bl	8018324 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801036a:	2114      	movs	r1, #20
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f7fd fe09 	bl	800df84 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	895a      	ldrh	r2, [r3, #10]
 8010376:	4b71      	ldr	r3, [pc, #452]	@ (801053c <tcp_input+0x29c>)
 8010378:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801037a:	4b6e      	ldr	r3, [pc, #440]	@ (8010534 <tcp_input+0x294>)
 801037c:	881a      	ldrh	r2, [r3, #0]
 801037e:	4b6f      	ldr	r3, [pc, #444]	@ (801053c <tcp_input+0x29c>)
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010386:	4b6d      	ldr	r3, [pc, #436]	@ (801053c <tcp_input+0x29c>)
 8010388:	881b      	ldrh	r3, [r3, #0]
 801038a:	4619      	mov	r1, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7fd fdf9 	bl	800df84 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	895b      	ldrh	r3, [r3, #10]
 8010398:	8a3a      	ldrh	r2, [r7, #16]
 801039a:	429a      	cmp	r2, r3
 801039c:	f200 836e 	bhi.w	8010a7c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	4a64      	ldr	r2, [pc, #400]	@ (8010538 <tcp_input+0x298>)
 80103a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	8a3a      	ldrh	r2, [r7, #16]
 80103b0:	4611      	mov	r1, r2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fd fde6 	bl	800df84 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	891a      	ldrh	r2, [r3, #8]
 80103bc:	8a3b      	ldrh	r3, [r7, #16]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	895b      	ldrh	r3, [r3, #10]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d005      	beq.n	80103da <tcp_input+0x13a>
 80103ce:	4b54      	ldr	r3, [pc, #336]	@ (8010520 <tcp_input+0x280>)
 80103d0:	22df      	movs	r2, #223	@ 0xdf
 80103d2:	495c      	ldr	r1, [pc, #368]	@ (8010544 <tcp_input+0x2a4>)
 80103d4:	4854      	ldr	r0, [pc, #336]	@ (8010528 <tcp_input+0x288>)
 80103d6:	f007 ffa5 	bl	8018324 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	891a      	ldrh	r2, [r3, #8]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	891b      	ldrh	r3, [r3, #8]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d005      	beq.n	80103f4 <tcp_input+0x154>
 80103e8:	4b4d      	ldr	r3, [pc, #308]	@ (8010520 <tcp_input+0x280>)
 80103ea:	22e0      	movs	r2, #224	@ 0xe0
 80103ec:	4956      	ldr	r1, [pc, #344]	@ (8010548 <tcp_input+0x2a8>)
 80103ee:	484e      	ldr	r0, [pc, #312]	@ (8010528 <tcp_input+0x288>)
 80103f0:	f007 ff98 	bl	8018324 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80103f4:	4b4d      	ldr	r3, [pc, #308]	@ (801052c <tcp_input+0x28c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	881b      	ldrh	r3, [r3, #0]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	4a4b      	ldr	r2, [pc, #300]	@ (801052c <tcp_input+0x28c>)
 80103fe:	6814      	ldr	r4, [r2, #0]
 8010400:	4618      	mov	r0, r3
 8010402:	f7fc fa99 	bl	800c938 <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801040a:	4b48      	ldr	r3, [pc, #288]	@ (801052c <tcp_input+0x28c>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	885b      	ldrh	r3, [r3, #2]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4a46      	ldr	r2, [pc, #280]	@ (801052c <tcp_input+0x28c>)
 8010414:	6814      	ldr	r4, [r2, #0]
 8010416:	4618      	mov	r0, r3
 8010418:	f7fc fa8e 	bl	800c938 <lwip_htons>
 801041c:	4603      	mov	r3, r0
 801041e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010420:	4b42      	ldr	r3, [pc, #264]	@ (801052c <tcp_input+0x28c>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	4a41      	ldr	r2, [pc, #260]	@ (801052c <tcp_input+0x28c>)
 8010428:	6814      	ldr	r4, [r2, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f7fc fa99 	bl	800c962 <lwip_htonl>
 8010430:	4603      	mov	r3, r0
 8010432:	6063      	str	r3, [r4, #4]
 8010434:	6863      	ldr	r3, [r4, #4]
 8010436:	4a45      	ldr	r2, [pc, #276]	@ (801054c <tcp_input+0x2ac>)
 8010438:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801043a:	4b3c      	ldr	r3, [pc, #240]	@ (801052c <tcp_input+0x28c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	4a3a      	ldr	r2, [pc, #232]	@ (801052c <tcp_input+0x28c>)
 8010442:	6814      	ldr	r4, [r2, #0]
 8010444:	4618      	mov	r0, r3
 8010446:	f7fc fa8c 	bl	800c962 <lwip_htonl>
 801044a:	4603      	mov	r3, r0
 801044c:	60a3      	str	r3, [r4, #8]
 801044e:	68a3      	ldr	r3, [r4, #8]
 8010450:	4a3f      	ldr	r2, [pc, #252]	@ (8010550 <tcp_input+0x2b0>)
 8010452:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010454:	4b35      	ldr	r3, [pc, #212]	@ (801052c <tcp_input+0x28c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	89db      	ldrh	r3, [r3, #14]
 801045a:	b29b      	uxth	r3, r3
 801045c:	4a33      	ldr	r2, [pc, #204]	@ (801052c <tcp_input+0x28c>)
 801045e:	6814      	ldr	r4, [r2, #0]
 8010460:	4618      	mov	r0, r3
 8010462:	f7fc fa69 	bl	800c938 <lwip_htons>
 8010466:	4603      	mov	r3, r0
 8010468:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801046a:	4b30      	ldr	r3, [pc, #192]	@ (801052c <tcp_input+0x28c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	899b      	ldrh	r3, [r3, #12]
 8010470:	b29b      	uxth	r3, r3
 8010472:	4618      	mov	r0, r3
 8010474:	f7fc fa60 	bl	800c938 <lwip_htons>
 8010478:	4603      	mov	r3, r0
 801047a:	b2db      	uxtb	r3, r3
 801047c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010480:	b2da      	uxtb	r2, r3
 8010482:	4b34      	ldr	r3, [pc, #208]	@ (8010554 <tcp_input+0x2b4>)
 8010484:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	891a      	ldrh	r2, [r3, #8]
 801048a:	4b33      	ldr	r3, [pc, #204]	@ (8010558 <tcp_input+0x2b8>)
 801048c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801048e:	4b31      	ldr	r3, [pc, #196]	@ (8010554 <tcp_input+0x2b4>)
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f003 0303 	and.w	r3, r3, #3
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00c      	beq.n	80104b4 <tcp_input+0x214>
    tcplen++;
 801049a:	4b2f      	ldr	r3, [pc, #188]	@ (8010558 <tcp_input+0x2b8>)
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	3301      	adds	r3, #1
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	4b2d      	ldr	r3, [pc, #180]	@ (8010558 <tcp_input+0x2b8>)
 80104a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	891a      	ldrh	r2, [r3, #8]
 80104aa:	4b2b      	ldr	r3, [pc, #172]	@ (8010558 <tcp_input+0x2b8>)
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	f200 82e6 	bhi.w	8010a80 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80104b4:	2300      	movs	r3, #0
 80104b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104b8:	4b28      	ldr	r3, [pc, #160]	@ (801055c <tcp_input+0x2bc>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	61fb      	str	r3, [r7, #28]
 80104be:	e09d      	b.n	80105fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d105      	bne.n	80104d4 <tcp_input+0x234>
 80104c8:	4b15      	ldr	r3, [pc, #84]	@ (8010520 <tcp_input+0x280>)
 80104ca:	22fb      	movs	r2, #251	@ 0xfb
 80104cc:	4924      	ldr	r1, [pc, #144]	@ (8010560 <tcp_input+0x2c0>)
 80104ce:	4816      	ldr	r0, [pc, #88]	@ (8010528 <tcp_input+0x288>)
 80104d0:	f007 ff28 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	7d1b      	ldrb	r3, [r3, #20]
 80104d8:	2b0a      	cmp	r3, #10
 80104da:	d105      	bne.n	80104e8 <tcp_input+0x248>
 80104dc:	4b10      	ldr	r3, [pc, #64]	@ (8010520 <tcp_input+0x280>)
 80104de:	22fc      	movs	r2, #252	@ 0xfc
 80104e0:	4920      	ldr	r1, [pc, #128]	@ (8010564 <tcp_input+0x2c4>)
 80104e2:	4811      	ldr	r0, [pc, #68]	@ (8010528 <tcp_input+0x288>)
 80104e4:	f007 ff1e 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	7d1b      	ldrb	r3, [r3, #20]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d105      	bne.n	80104fc <tcp_input+0x25c>
 80104f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010520 <tcp_input+0x280>)
 80104f2:	22fd      	movs	r2, #253	@ 0xfd
 80104f4:	491c      	ldr	r1, [pc, #112]	@ (8010568 <tcp_input+0x2c8>)
 80104f6:	480c      	ldr	r0, [pc, #48]	@ (8010528 <tcp_input+0x288>)
 80104f8:	f007 ff14 	bl	8018324 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	7a1b      	ldrb	r3, [r3, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d033      	beq.n	801056c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	7a1a      	ldrb	r2, [r3, #8]
 8010508:	4b09      	ldr	r3, [pc, #36]	@ (8010530 <tcp_input+0x290>)
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010510:	3301      	adds	r3, #1
 8010512:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010514:	429a      	cmp	r2, r3
 8010516:	d029      	beq.n	801056c <tcp_input+0x2cc>
      prev = pcb;
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	61bb      	str	r3, [r7, #24]
      continue;
 801051c:	e06b      	b.n	80105f6 <tcp_input+0x356>
 801051e:	bf00      	nop
 8010520:	0801c47c 	.word	0x0801c47c
 8010524:	0801c4b0 	.word	0x0801c4b0
 8010528:	0801c4c8 	.word	0x0801c4c8
 801052c:	2000e0ec 	.word	0x2000e0ec
 8010530:	200087b0 	.word	0x200087b0
 8010534:	2000e0f0 	.word	0x2000e0f0
 8010538:	2000e0f4 	.word	0x2000e0f4
 801053c:	2000e0f2 	.word	0x2000e0f2
 8010540:	0801c4f0 	.word	0x0801c4f0
 8010544:	0801c500 	.word	0x0801c500
 8010548:	0801c50c 	.word	0x0801c50c
 801054c:	2000e0fc 	.word	0x2000e0fc
 8010550:	2000e100 	.word	0x2000e100
 8010554:	2000e108 	.word	0x2000e108
 8010558:	2000e106 	.word	0x2000e106
 801055c:	2000e0d0 	.word	0x2000e0d0
 8010560:	0801c52c 	.word	0x0801c52c
 8010564:	0801c554 	.word	0x0801c554
 8010568:	0801c580 	.word	0x0801c580
    }

    if (pcb->remote_port == tcphdr->src &&
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	8b1a      	ldrh	r2, [r3, #24]
 8010570:	4b72      	ldr	r3, [pc, #456]	@ (801073c <tcp_input+0x49c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	881b      	ldrh	r3, [r3, #0]
 8010576:	b29b      	uxth	r3, r3
 8010578:	429a      	cmp	r2, r3
 801057a:	d13a      	bne.n	80105f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	8ada      	ldrh	r2, [r3, #22]
 8010580:	4b6e      	ldr	r3, [pc, #440]	@ (801073c <tcp_input+0x49c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	885b      	ldrh	r3, [r3, #2]
 8010586:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010588:	429a      	cmp	r2, r3
 801058a:	d132      	bne.n	80105f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	685a      	ldr	r2, [r3, #4]
 8010590:	4b6b      	ldr	r3, [pc, #428]	@ (8010740 <tcp_input+0x4a0>)
 8010592:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010594:	429a      	cmp	r2, r3
 8010596:	d12c      	bne.n	80105f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	4b68      	ldr	r3, [pc, #416]	@ (8010740 <tcp_input+0x4a0>)
 801059e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d126      	bne.n	80105f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	69fa      	ldr	r2, [r7, #28]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d106      	bne.n	80105bc <tcp_input+0x31c>
 80105ae:	4b65      	ldr	r3, [pc, #404]	@ (8010744 <tcp_input+0x4a4>)
 80105b0:	f240 120d 	movw	r2, #269	@ 0x10d
 80105b4:	4964      	ldr	r1, [pc, #400]	@ (8010748 <tcp_input+0x4a8>)
 80105b6:	4865      	ldr	r0, [pc, #404]	@ (801074c <tcp_input+0x4ac>)
 80105b8:	f007 feb4 	bl	8018324 <iprintf>
      if (prev != NULL) {
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00a      	beq.n	80105d8 <tcp_input+0x338>
        prev->next = pcb->next;
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	68da      	ldr	r2, [r3, #12]
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80105ca:	4b61      	ldr	r3, [pc, #388]	@ (8010750 <tcp_input+0x4b0>)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80105d2:	4a5f      	ldr	r2, [pc, #380]	@ (8010750 <tcp_input+0x4b0>)
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	69fa      	ldr	r2, [r7, #28]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d111      	bne.n	8010606 <tcp_input+0x366>
 80105e2:	4b58      	ldr	r3, [pc, #352]	@ (8010744 <tcp_input+0x4a4>)
 80105e4:	f240 1215 	movw	r2, #277	@ 0x115
 80105e8:	495a      	ldr	r1, [pc, #360]	@ (8010754 <tcp_input+0x4b4>)
 80105ea:	4858      	ldr	r0, [pc, #352]	@ (801074c <tcp_input+0x4ac>)
 80105ec:	f007 fe9a 	bl	8018324 <iprintf>
      break;
 80105f0:	e009      	b.n	8010606 <tcp_input+0x366>
    }
    prev = pcb;
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	61fb      	str	r3, [r7, #28]
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f47f af5e 	bne.w	80104c0 <tcp_input+0x220>
 8010604:	e000      	b.n	8010608 <tcp_input+0x368>
      break;
 8010606:	bf00      	nop
  }

  if (pcb == NULL) {
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	2b00      	cmp	r3, #0
 801060c:	f040 80aa 	bne.w	8010764 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010610:	4b51      	ldr	r3, [pc, #324]	@ (8010758 <tcp_input+0x4b8>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	61fb      	str	r3, [r7, #28]
 8010616:	e03f      	b.n	8010698 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	7d1b      	ldrb	r3, [r3, #20]
 801061c:	2b0a      	cmp	r3, #10
 801061e:	d006      	beq.n	801062e <tcp_input+0x38e>
 8010620:	4b48      	ldr	r3, [pc, #288]	@ (8010744 <tcp_input+0x4a4>)
 8010622:	f240 121f 	movw	r2, #287	@ 0x11f
 8010626:	494d      	ldr	r1, [pc, #308]	@ (801075c <tcp_input+0x4bc>)
 8010628:	4848      	ldr	r0, [pc, #288]	@ (801074c <tcp_input+0x4ac>)
 801062a:	f007 fe7b 	bl	8018324 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	7a1b      	ldrb	r3, [r3, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d009      	beq.n	801064a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010636:	69fb      	ldr	r3, [r7, #28]
 8010638:	7a1a      	ldrb	r2, [r3, #8]
 801063a:	4b41      	ldr	r3, [pc, #260]	@ (8010740 <tcp_input+0x4a0>)
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010642:	3301      	adds	r3, #1
 8010644:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010646:	429a      	cmp	r2, r3
 8010648:	d122      	bne.n	8010690 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	8b1a      	ldrh	r2, [r3, #24]
 801064e:	4b3b      	ldr	r3, [pc, #236]	@ (801073c <tcp_input+0x49c>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	b29b      	uxth	r3, r3
 8010656:	429a      	cmp	r2, r3
 8010658:	d11b      	bne.n	8010692 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	8ada      	ldrh	r2, [r3, #22]
 801065e:	4b37      	ldr	r3, [pc, #220]	@ (801073c <tcp_input+0x49c>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	885b      	ldrh	r3, [r3, #2]
 8010664:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010666:	429a      	cmp	r2, r3
 8010668:	d113      	bne.n	8010692 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	4b34      	ldr	r3, [pc, #208]	@ (8010740 <tcp_input+0x4a0>)
 8010670:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010672:	429a      	cmp	r2, r3
 8010674:	d10d      	bne.n	8010692 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010676:	69fb      	ldr	r3, [r7, #28]
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	4b31      	ldr	r3, [pc, #196]	@ (8010740 <tcp_input+0x4a0>)
 801067c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801067e:	429a      	cmp	r2, r3
 8010680:	d107      	bne.n	8010692 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010682:	69f8      	ldr	r0, [r7, #28]
 8010684:	f000 fb56 	bl	8010d34 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7fd fd01 	bl	800e090 <pbuf_free>
        return;
 801068e:	e1fd      	b.n	8010a8c <tcp_input+0x7ec>
        continue;
 8010690:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	61fb      	str	r3, [r7, #28]
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1bc      	bne.n	8010618 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801069e:	2300      	movs	r3, #0
 80106a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106a2:	4b2f      	ldr	r3, [pc, #188]	@ (8010760 <tcp_input+0x4c0>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	617b      	str	r3, [r7, #20]
 80106a8:	e02a      	b.n	8010700 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	7a1b      	ldrb	r3, [r3, #8]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00c      	beq.n	80106cc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	7a1a      	ldrb	r2, [r3, #8]
 80106b6:	4b22      	ldr	r3, [pc, #136]	@ (8010740 <tcp_input+0x4a0>)
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80106be:	3301      	adds	r3, #1
 80106c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d002      	beq.n	80106cc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	61bb      	str	r3, [r7, #24]
        continue;
 80106ca:	e016      	b.n	80106fa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	8ada      	ldrh	r2, [r3, #22]
 80106d0:	4b1a      	ldr	r3, [pc, #104]	@ (801073c <tcp_input+0x49c>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	885b      	ldrh	r3, [r3, #2]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	429a      	cmp	r2, r3
 80106da:	d10c      	bne.n	80106f6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	4b17      	ldr	r3, [pc, #92]	@ (8010740 <tcp_input+0x4a0>)
 80106e2:	695b      	ldr	r3, [r3, #20]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d00f      	beq.n	8010708 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00d      	beq.n	801070a <tcp_input+0x46a>
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	617b      	str	r3, [r7, #20]
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1d1      	bne.n	80106aa <tcp_input+0x40a>
 8010706:	e000      	b.n	801070a <tcp_input+0x46a>
            break;
 8010708:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d029      	beq.n	8010764 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00a      	beq.n	801072c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	68da      	ldr	r2, [r3, #12]
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801071e:	4b10      	ldr	r3, [pc, #64]	@ (8010760 <tcp_input+0x4c0>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010726:	4a0e      	ldr	r2, [pc, #56]	@ (8010760 <tcp_input+0x4c0>)
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801072c:	6978      	ldr	r0, [r7, #20]
 801072e:	f000 fa03 	bl	8010b38 <tcp_listen_input>
      }
      pbuf_free(p);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7fd fcac 	bl	800e090 <pbuf_free>
      return;
 8010738:	e1a8      	b.n	8010a8c <tcp_input+0x7ec>
 801073a:	bf00      	nop
 801073c:	2000e0ec 	.word	0x2000e0ec
 8010740:	200087b0 	.word	0x200087b0
 8010744:	0801c47c 	.word	0x0801c47c
 8010748:	0801c5a8 	.word	0x0801c5a8
 801074c:	0801c4c8 	.word	0x0801c4c8
 8010750:	2000e0d0 	.word	0x2000e0d0
 8010754:	0801c5d4 	.word	0x0801c5d4
 8010758:	2000e0d4 	.word	0x2000e0d4
 801075c:	0801c600 	.word	0x0801c600
 8010760:	2000e0cc 	.word	0x2000e0cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	2b00      	cmp	r3, #0
 8010768:	f000 8158 	beq.w	8010a1c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801076c:	4b95      	ldr	r3, [pc, #596]	@ (80109c4 <tcp_input+0x724>)
 801076e:	2200      	movs	r2, #0
 8010770:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	891a      	ldrh	r2, [r3, #8]
 8010776:	4b93      	ldr	r3, [pc, #588]	@ (80109c4 <tcp_input+0x724>)
 8010778:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801077a:	4a92      	ldr	r2, [pc, #584]	@ (80109c4 <tcp_input+0x724>)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010780:	4b91      	ldr	r3, [pc, #580]	@ (80109c8 <tcp_input+0x728>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a8f      	ldr	r2, [pc, #572]	@ (80109c4 <tcp_input+0x724>)
 8010786:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010788:	4b90      	ldr	r3, [pc, #576]	@ (80109cc <tcp_input+0x72c>)
 801078a:	2200      	movs	r2, #0
 801078c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801078e:	4b90      	ldr	r3, [pc, #576]	@ (80109d0 <tcp_input+0x730>)
 8010790:	2200      	movs	r2, #0
 8010792:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010794:	4b8f      	ldr	r3, [pc, #572]	@ (80109d4 <tcp_input+0x734>)
 8010796:	2200      	movs	r2, #0
 8010798:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801079a:	4b8f      	ldr	r3, [pc, #572]	@ (80109d8 <tcp_input+0x738>)
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	f003 0308 	and.w	r3, r3, #8
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d006      	beq.n	80107b4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7b5b      	ldrb	r3, [r3, #13]
 80107aa:	f043 0301 	orr.w	r3, r3, #1
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d017      	beq.n	80107ec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107bc:	69f8      	ldr	r0, [r7, #28]
 80107be:	f7ff f85b 	bl	800f878 <tcp_process_refused_data>
 80107c2:	4603      	mov	r3, r0
 80107c4:	f113 0f0d 	cmn.w	r3, #13
 80107c8:	d007      	beq.n	80107da <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00c      	beq.n	80107ec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107d2:	4b82      	ldr	r3, [pc, #520]	@ (80109dc <tcp_input+0x73c>)
 80107d4:	881b      	ldrh	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d008      	beq.n	80107ec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f040 80e3 	bne.w	80109aa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80107e4:	69f8      	ldr	r0, [r7, #28]
 80107e6:	f003 fdff 	bl	80143e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80107ea:	e0de      	b.n	80109aa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80107ec:	4a7c      	ldr	r2, [pc, #496]	@ (80109e0 <tcp_input+0x740>)
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80107f2:	69f8      	ldr	r0, [r7, #28]
 80107f4:	f000 fb18 	bl	8010e28 <tcp_process>
 80107f8:	4603      	mov	r3, r0
 80107fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80107fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010800:	f113 0f0d 	cmn.w	r3, #13
 8010804:	f000 80d3 	beq.w	80109ae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010808:	4b71      	ldr	r3, [pc, #452]	@ (80109d0 <tcp_input+0x730>)
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	f003 0308 	and.w	r3, r3, #8
 8010810:	2b00      	cmp	r3, #0
 8010812:	d015      	beq.n	8010840 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801081a:	2b00      	cmp	r3, #0
 801081c:	d008      	beq.n	8010830 <tcp_input+0x590>
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010824:	69fa      	ldr	r2, [r7, #28]
 8010826:	6912      	ldr	r2, [r2, #16]
 8010828:	f06f 010d 	mvn.w	r1, #13
 801082c:	4610      	mov	r0, r2
 801082e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010830:	69f9      	ldr	r1, [r7, #28]
 8010832:	486c      	ldr	r0, [pc, #432]	@ (80109e4 <tcp_input+0x744>)
 8010834:	f7ff fbbc 	bl	800ffb0 <tcp_pcb_remove>
        tcp_free(pcb);
 8010838:	69f8      	ldr	r0, [r7, #28]
 801083a:	f7fd fed5 	bl	800e5e8 <tcp_free>
 801083e:	e0da      	b.n	80109f6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010844:	4b63      	ldr	r3, [pc, #396]	@ (80109d4 <tcp_input+0x734>)
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d01d      	beq.n	8010888 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801084c:	4b61      	ldr	r3, [pc, #388]	@ (80109d4 <tcp_input+0x734>)
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <tcp_input+0x5d2>
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010862:	69fa      	ldr	r2, [r7, #28]
 8010864:	6910      	ldr	r0, [r2, #16]
 8010866:	89fa      	ldrh	r2, [r7, #14]
 8010868:	69f9      	ldr	r1, [r7, #28]
 801086a:	4798      	blx	r3
 801086c:	4603      	mov	r3, r0
 801086e:	74fb      	strb	r3, [r7, #19]
 8010870:	e001      	b.n	8010876 <tcp_input+0x5d6>
 8010872:	2300      	movs	r3, #0
 8010874:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801087a:	f113 0f0d 	cmn.w	r3, #13
 801087e:	f000 8098 	beq.w	80109b2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010882:	4b54      	ldr	r3, [pc, #336]	@ (80109d4 <tcp_input+0x734>)
 8010884:	2200      	movs	r2, #0
 8010886:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010888:	69f8      	ldr	r0, [r7, #28]
 801088a:	f000 f915 	bl	8010ab8 <tcp_input_delayed_close>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	f040 8090 	bne.w	80109b6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010896:	4b4d      	ldr	r3, [pc, #308]	@ (80109cc <tcp_input+0x72c>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d041      	beq.n	8010922 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d006      	beq.n	80108b4 <tcp_input+0x614>
 80108a6:	4b50      	ldr	r3, [pc, #320]	@ (80109e8 <tcp_input+0x748>)
 80108a8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80108ac:	494f      	ldr	r1, [pc, #316]	@ (80109ec <tcp_input+0x74c>)
 80108ae:	4850      	ldr	r0, [pc, #320]	@ (80109f0 <tcp_input+0x750>)
 80108b0:	f007 fd38 	bl	8018324 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	8b5b      	ldrh	r3, [r3, #26]
 80108b8:	f003 0310 	and.w	r3, r3, #16
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d008      	beq.n	80108d2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80108c0:	4b42      	ldr	r3, [pc, #264]	@ (80109cc <tcp_input+0x72c>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fd fbe3 	bl	800e090 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80108ca:	69f8      	ldr	r0, [r7, #28]
 80108cc:	f7fe f9d0 	bl	800ec70 <tcp_abort>
            goto aborted;
 80108d0:	e091      	b.n	80109f6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00c      	beq.n	80108f6 <tcp_input+0x656>
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	6918      	ldr	r0, [r3, #16]
 80108e6:	4b39      	ldr	r3, [pc, #228]	@ (80109cc <tcp_input+0x72c>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	2300      	movs	r3, #0
 80108ec:	69f9      	ldr	r1, [r7, #28]
 80108ee:	47a0      	blx	r4
 80108f0:	4603      	mov	r3, r0
 80108f2:	74fb      	strb	r3, [r7, #19]
 80108f4:	e008      	b.n	8010908 <tcp_input+0x668>
 80108f6:	4b35      	ldr	r3, [pc, #212]	@ (80109cc <tcp_input+0x72c>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	2300      	movs	r3, #0
 80108fc:	69f9      	ldr	r1, [r7, #28]
 80108fe:	2000      	movs	r0, #0
 8010900:	f7ff f890 	bl	800fa24 <tcp_recv_null>
 8010904:	4603      	mov	r3, r0
 8010906:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010908:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801090c:	f113 0f0d 	cmn.w	r3, #13
 8010910:	d053      	beq.n	80109ba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010912:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801091a:	4b2c      	ldr	r3, [pc, #176]	@ (80109cc <tcp_input+0x72c>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010922:	4b2b      	ldr	r3, [pc, #172]	@ (80109d0 <tcp_input+0x730>)
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	f003 0320 	and.w	r3, r3, #32
 801092a:	2b00      	cmp	r3, #0
 801092c:	d030      	beq.n	8010990 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010932:	2b00      	cmp	r3, #0
 8010934:	d009      	beq.n	801094a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801093a:	7b5a      	ldrb	r2, [r3, #13]
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010940:	f042 0220 	orr.w	r2, r2, #32
 8010944:	b2d2      	uxtb	r2, r2
 8010946:	735a      	strb	r2, [r3, #13]
 8010948:	e022      	b.n	8010990 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801094e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010952:	d005      	beq.n	8010960 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010958:	3301      	adds	r3, #1
 801095a:	b29a      	uxth	r2, r3
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010966:	2b00      	cmp	r3, #0
 8010968:	d00b      	beq.n	8010982 <tcp_input+0x6e2>
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	6918      	ldr	r0, [r3, #16]
 8010974:	2300      	movs	r3, #0
 8010976:	2200      	movs	r2, #0
 8010978:	69f9      	ldr	r1, [r7, #28]
 801097a:	47a0      	blx	r4
 801097c:	4603      	mov	r3, r0
 801097e:	74fb      	strb	r3, [r7, #19]
 8010980:	e001      	b.n	8010986 <tcp_input+0x6e6>
 8010982:	2300      	movs	r3, #0
 8010984:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010986:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801098a:	f113 0f0d 	cmn.w	r3, #13
 801098e:	d016      	beq.n	80109be <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010990:	4b13      	ldr	r3, [pc, #76]	@ (80109e0 <tcp_input+0x740>)
 8010992:	2200      	movs	r2, #0
 8010994:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010996:	69f8      	ldr	r0, [r7, #28]
 8010998:	f000 f88e 	bl	8010ab8 <tcp_input_delayed_close>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d128      	bne.n	80109f4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80109a2:	69f8      	ldr	r0, [r7, #28]
 80109a4:	f002 ff1a 	bl	80137dc <tcp_output>
 80109a8:	e025      	b.n	80109f6 <tcp_input+0x756>
        goto aborted;
 80109aa:	bf00      	nop
 80109ac:	e023      	b.n	80109f6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80109ae:	bf00      	nop
 80109b0:	e021      	b.n	80109f6 <tcp_input+0x756>
              goto aborted;
 80109b2:	bf00      	nop
 80109b4:	e01f      	b.n	80109f6 <tcp_input+0x756>
          goto aborted;
 80109b6:	bf00      	nop
 80109b8:	e01d      	b.n	80109f6 <tcp_input+0x756>
            goto aborted;
 80109ba:	bf00      	nop
 80109bc:	e01b      	b.n	80109f6 <tcp_input+0x756>
              goto aborted;
 80109be:	bf00      	nop
 80109c0:	e019      	b.n	80109f6 <tcp_input+0x756>
 80109c2:	bf00      	nop
 80109c4:	2000e0dc 	.word	0x2000e0dc
 80109c8:	2000e0ec 	.word	0x2000e0ec
 80109cc:	2000e10c 	.word	0x2000e10c
 80109d0:	2000e109 	.word	0x2000e109
 80109d4:	2000e104 	.word	0x2000e104
 80109d8:	2000e108 	.word	0x2000e108
 80109dc:	2000e106 	.word	0x2000e106
 80109e0:	2000e110 	.word	0x2000e110
 80109e4:	2000e0d0 	.word	0x2000e0d0
 80109e8:	0801c47c 	.word	0x0801c47c
 80109ec:	0801c630 	.word	0x0801c630
 80109f0:	0801c4c8 	.word	0x0801c4c8
          goto aborted;
 80109f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80109f6:	4b27      	ldr	r3, [pc, #156]	@ (8010a94 <tcp_input+0x7f4>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80109fc:	4b26      	ldr	r3, [pc, #152]	@ (8010a98 <tcp_input+0x7f8>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010a02:	4b26      	ldr	r3, [pc, #152]	@ (8010a9c <tcp_input+0x7fc>)
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d03f      	beq.n	8010a8a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010a0a:	4b24      	ldr	r3, [pc, #144]	@ (8010a9c <tcp_input+0x7fc>)
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fd fb3e 	bl	800e090 <pbuf_free>
      inseg.p = NULL;
 8010a14:	4b21      	ldr	r3, [pc, #132]	@ (8010a9c <tcp_input+0x7fc>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010a1a:	e036      	b.n	8010a8a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010a1c:	4b20      	ldr	r3, [pc, #128]	@ (8010aa0 <tcp_input+0x800>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	899b      	ldrh	r3, [r3, #12]
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fb ff87 	bl	800c938 <lwip_htons>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	f003 0304 	and.w	r3, r3, #4
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d118      	bne.n	8010a68 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a36:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa4 <tcp_input+0x804>)
 8010a38:	6819      	ldr	r1, [r3, #0]
 8010a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa8 <tcp_input+0x808>)
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	4b1a      	ldr	r3, [pc, #104]	@ (8010aac <tcp_input+0x80c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a46:	4b16      	ldr	r3, [pc, #88]	@ (8010aa0 <tcp_input+0x800>)
 8010a48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a4a:	885b      	ldrh	r3, [r3, #2]
 8010a4c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a4e:	4a14      	ldr	r2, [pc, #80]	@ (8010aa0 <tcp_input+0x800>)
 8010a50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a52:	8812      	ldrh	r2, [r2, #0]
 8010a54:	b292      	uxth	r2, r2
 8010a56:	9202      	str	r2, [sp, #8]
 8010a58:	9301      	str	r3, [sp, #4]
 8010a5a:	4b15      	ldr	r3, [pc, #84]	@ (8010ab0 <tcp_input+0x810>)
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	4b15      	ldr	r3, [pc, #84]	@ (8010ab4 <tcp_input+0x814>)
 8010a60:	4602      	mov	r2, r0
 8010a62:	2000      	movs	r0, #0
 8010a64:	f003 fc6e 	bl	8014344 <tcp_rst>
    pbuf_free(p);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7fd fb11 	bl	800e090 <pbuf_free>
  return;
 8010a6e:	e00c      	b.n	8010a8a <tcp_input+0x7ea>
    goto dropped;
 8010a70:	bf00      	nop
 8010a72:	e006      	b.n	8010a82 <tcp_input+0x7e2>
    goto dropped;
 8010a74:	bf00      	nop
 8010a76:	e004      	b.n	8010a82 <tcp_input+0x7e2>
    goto dropped;
 8010a78:	bf00      	nop
 8010a7a:	e002      	b.n	8010a82 <tcp_input+0x7e2>
      goto dropped;
 8010a7c:	bf00      	nop
 8010a7e:	e000      	b.n	8010a82 <tcp_input+0x7e2>
      goto dropped;
 8010a80:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7fd fb04 	bl	800e090 <pbuf_free>
 8010a88:	e000      	b.n	8010a8c <tcp_input+0x7ec>
  return;
 8010a8a:	bf00      	nop
}
 8010a8c:	3724      	adds	r7, #36	@ 0x24
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	2000e110 	.word	0x2000e110
 8010a98:	2000e10c 	.word	0x2000e10c
 8010a9c:	2000e0dc 	.word	0x2000e0dc
 8010aa0:	2000e0ec 	.word	0x2000e0ec
 8010aa4:	2000e100 	.word	0x2000e100
 8010aa8:	2000e106 	.word	0x2000e106
 8010aac:	2000e0fc 	.word	0x2000e0fc
 8010ab0:	200087c0 	.word	0x200087c0
 8010ab4:	200087c4 	.word	0x200087c4

08010ab8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d106      	bne.n	8010ad4 <tcp_input_delayed_close+0x1c>
 8010ac6:	4b17      	ldr	r3, [pc, #92]	@ (8010b24 <tcp_input_delayed_close+0x6c>)
 8010ac8:	f240 225a 	movw	r2, #602	@ 0x25a
 8010acc:	4916      	ldr	r1, [pc, #88]	@ (8010b28 <tcp_input_delayed_close+0x70>)
 8010ace:	4817      	ldr	r0, [pc, #92]	@ (8010b2c <tcp_input_delayed_close+0x74>)
 8010ad0:	f007 fc28 	bl	8018324 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010ad4:	4b16      	ldr	r3, [pc, #88]	@ (8010b30 <tcp_input_delayed_close+0x78>)
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	f003 0310 	and.w	r3, r3, #16
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d01c      	beq.n	8010b1a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	8b5b      	ldrh	r3, [r3, #26]
 8010ae4:	f003 0310 	and.w	r3, r3, #16
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d10d      	bne.n	8010b08 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d008      	beq.n	8010b08 <tcp_input_delayed_close+0x50>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	6912      	ldr	r2, [r2, #16]
 8010b00:	f06f 010e 	mvn.w	r1, #14
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	480a      	ldr	r0, [pc, #40]	@ (8010b34 <tcp_input_delayed_close+0x7c>)
 8010b0c:	f7ff fa50 	bl	800ffb0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7fd fd69 	bl	800e5e8 <tcp_free>
    return 1;
 8010b16:	2301      	movs	r3, #1
 8010b18:	e000      	b.n	8010b1c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	0801c47c 	.word	0x0801c47c
 8010b28:	0801c64c 	.word	0x0801c64c
 8010b2c:	0801c4c8 	.word	0x0801c4c8
 8010b30:	2000e109 	.word	0x2000e109
 8010b34:	2000e0d0 	.word	0x2000e0d0

08010b38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010b38:	b590      	push	{r4, r7, lr}
 8010b3a:	b08b      	sub	sp, #44	@ 0x2c
 8010b3c:	af04      	add	r7, sp, #16
 8010b3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010b40:	4b6f      	ldr	r3, [pc, #444]	@ (8010d00 <tcp_listen_input+0x1c8>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	f003 0304 	and.w	r3, r3, #4
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f040 80d2 	bne.w	8010cf2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <tcp_listen_input+0x2a>
 8010b54:	4b6b      	ldr	r3, [pc, #428]	@ (8010d04 <tcp_listen_input+0x1cc>)
 8010b56:	f240 2281 	movw	r2, #641	@ 0x281
 8010b5a:	496b      	ldr	r1, [pc, #428]	@ (8010d08 <tcp_listen_input+0x1d0>)
 8010b5c:	486b      	ldr	r0, [pc, #428]	@ (8010d0c <tcp_listen_input+0x1d4>)
 8010b5e:	f007 fbe1 	bl	8018324 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010b62:	4b67      	ldr	r3, [pc, #412]	@ (8010d00 <tcp_listen_input+0x1c8>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	f003 0310 	and.w	r3, r3, #16
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d019      	beq.n	8010ba2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b6e:	4b68      	ldr	r3, [pc, #416]	@ (8010d10 <tcp_listen_input+0x1d8>)
 8010b70:	6819      	ldr	r1, [r3, #0]
 8010b72:	4b68      	ldr	r3, [pc, #416]	@ (8010d14 <tcp_listen_input+0x1dc>)
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	4b67      	ldr	r3, [pc, #412]	@ (8010d18 <tcp_listen_input+0x1e0>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b7e:	4b67      	ldr	r3, [pc, #412]	@ (8010d1c <tcp_listen_input+0x1e4>)
 8010b80:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b82:	885b      	ldrh	r3, [r3, #2]
 8010b84:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b86:	4a65      	ldr	r2, [pc, #404]	@ (8010d1c <tcp_listen_input+0x1e4>)
 8010b88:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b8a:	8812      	ldrh	r2, [r2, #0]
 8010b8c:	b292      	uxth	r2, r2
 8010b8e:	9202      	str	r2, [sp, #8]
 8010b90:	9301      	str	r3, [sp, #4]
 8010b92:	4b63      	ldr	r3, [pc, #396]	@ (8010d20 <tcp_listen_input+0x1e8>)
 8010b94:	9300      	str	r3, [sp, #0]
 8010b96:	4b63      	ldr	r3, [pc, #396]	@ (8010d24 <tcp_listen_input+0x1ec>)
 8010b98:	4602      	mov	r2, r0
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f003 fbd2 	bl	8014344 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010ba0:	e0a9      	b.n	8010cf6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010ba2:	4b57      	ldr	r3, [pc, #348]	@ (8010d00 <tcp_listen_input+0x1c8>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	f003 0302 	and.w	r3, r3, #2
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 80a3 	beq.w	8010cf6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7d5b      	ldrb	r3, [r3, #21]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff f859 	bl	800fc6c <tcp_alloc>
 8010bba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d111      	bne.n	8010be6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <tcp_listen_input+0xa8>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	699b      	ldr	r3, [r3, #24]
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	6910      	ldr	r0, [r2, #16]
 8010bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	4798      	blx	r3
 8010bda:	4603      	mov	r3, r0
 8010bdc:	73bb      	strb	r3, [r7, #14]
      return;
 8010bde:	e08b      	b.n	8010cf8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010be0:	23f0      	movs	r3, #240	@ 0xf0
 8010be2:	73bb      	strb	r3, [r7, #14]
      return;
 8010be4:	e088      	b.n	8010cf8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010be6:	4b50      	ldr	r3, [pc, #320]	@ (8010d28 <tcp_listen_input+0x1f0>)
 8010be8:	695a      	ldr	r2, [r3, #20]
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010bee:	4b4e      	ldr	r3, [pc, #312]	@ (8010d28 <tcp_listen_input+0x1f0>)
 8010bf0:	691a      	ldr	r2, [r3, #16]
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	8ada      	ldrh	r2, [r3, #22]
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010bfe:	4b47      	ldr	r3, [pc, #284]	@ (8010d1c <tcp_listen_input+0x1e4>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	2203      	movs	r2, #3
 8010c0e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010c10:	4b41      	ldr	r3, [pc, #260]	@ (8010d18 <tcp_listen_input+0x1e0>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8010c22:	6978      	ldr	r0, [r7, #20]
 8010c24:	f7ff fa58 	bl	80100d8 <tcp_next_iss>
 8010c28:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	693a      	ldr	r2, [r7, #16]
 8010c2e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	693a      	ldr	r2, [r7, #16]
 8010c34:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	693a      	ldr	r2, [r7, #16]
 8010c3a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	693a      	ldr	r2, [r7, #16]
 8010c40:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010c42:	4b35      	ldr	r3, [pc, #212]	@ (8010d18 <tcp_listen_input+0x1e0>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	1e5a      	subs	r2, r3, #1
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	691a      	ldr	r2, [r3, #16]
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	7a5b      	ldrb	r3, [r3, #9]
 8010c5e:	f003 030c 	and.w	r3, r3, #12
 8010c62:	b2da      	uxtb	r2, r3
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	7a1a      	ldrb	r2, [r3, #8]
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010c70:	4b2e      	ldr	r3, [pc, #184]	@ (8010d2c <tcp_listen_input+0x1f4>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	60da      	str	r2, [r3, #12]
 8010c78:	4a2c      	ldr	r2, [pc, #176]	@ (8010d2c <tcp_listen_input+0x1f4>)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	6013      	str	r3, [r2, #0]
 8010c7e:	f003 fd23 	bl	80146c8 <tcp_timer_needed>
 8010c82:	4b2b      	ldr	r3, [pc, #172]	@ (8010d30 <tcp_listen_input+0x1f8>)
 8010c84:	2201      	movs	r2, #1
 8010c86:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010c88:	6978      	ldr	r0, [r7, #20]
 8010c8a:	f001 fd8b 	bl	80127a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010c8e:	4b23      	ldr	r3, [pc, #140]	@ (8010d1c <tcp_listen_input+0x1e4>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	89db      	ldrh	r3, [r3, #14]
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	3304      	adds	r3, #4
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f005 fa5d 	bl	8016170 <ip4_route>
 8010cb6:	4601      	mov	r1, r0
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	3304      	adds	r3, #4
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f7ff fa30 	bl	8010124 <tcp_eff_send_mss_netif>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010ccc:	2112      	movs	r1, #18
 8010cce:	6978      	ldr	r0, [r7, #20]
 8010cd0:	f002 fc96 	bl	8013600 <tcp_enqueue_flags>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	6978      	ldr	r0, [r7, #20]
 8010ce4:	f7fd ff06 	bl	800eaf4 <tcp_abandon>
      return;
 8010ce8:	e006      	b.n	8010cf8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010cea:	6978      	ldr	r0, [r7, #20]
 8010cec:	f002 fd76 	bl	80137dc <tcp_output>
  return;
 8010cf0:	e001      	b.n	8010cf6 <tcp_listen_input+0x1be>
    return;
 8010cf2:	bf00      	nop
 8010cf4:	e000      	b.n	8010cf8 <tcp_listen_input+0x1c0>
  return;
 8010cf6:	bf00      	nop
}
 8010cf8:	371c      	adds	r7, #28
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd90      	pop	{r4, r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2000e108 	.word	0x2000e108
 8010d04:	0801c47c 	.word	0x0801c47c
 8010d08:	0801c674 	.word	0x0801c674
 8010d0c:	0801c4c8 	.word	0x0801c4c8
 8010d10:	2000e100 	.word	0x2000e100
 8010d14:	2000e106 	.word	0x2000e106
 8010d18:	2000e0fc 	.word	0x2000e0fc
 8010d1c:	2000e0ec 	.word	0x2000e0ec
 8010d20:	200087c0 	.word	0x200087c0
 8010d24:	200087c4 	.word	0x200087c4
 8010d28:	200087b0 	.word	0x200087b0
 8010d2c:	2000e0d0 	.word	0x2000e0d0
 8010d30:	2000e0d8 	.word	0x2000e0d8

08010d34 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af04      	add	r7, sp, #16
 8010d3a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8010dfc <tcp_timewait_input+0xc8>)
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	f003 0304 	and.w	r3, r3, #4
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d153      	bne.n	8010df0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <tcp_timewait_input+0x28>
 8010d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8010e00 <tcp_timewait_input+0xcc>)
 8010d50:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010d54:	492b      	ldr	r1, [pc, #172]	@ (8010e04 <tcp_timewait_input+0xd0>)
 8010d56:	482c      	ldr	r0, [pc, #176]	@ (8010e08 <tcp_timewait_input+0xd4>)
 8010d58:	f007 fae4 	bl	8018324 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010d5c:	4b27      	ldr	r3, [pc, #156]	@ (8010dfc <tcp_timewait_input+0xc8>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	f003 0302 	and.w	r3, r3, #2
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d02a      	beq.n	8010dbe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010d68:	4b28      	ldr	r3, [pc, #160]	@ (8010e0c <tcp_timewait_input+0xd8>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	db2d      	blt.n	8010dd2 <tcp_timewait_input+0x9e>
 8010d76:	4b25      	ldr	r3, [pc, #148]	@ (8010e0c <tcp_timewait_input+0xd8>)
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7e:	6879      	ldr	r1, [r7, #4]
 8010d80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d82:	440b      	add	r3, r1
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	dc23      	bgt.n	8010dd2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d8a:	4b21      	ldr	r3, [pc, #132]	@ (8010e10 <tcp_timewait_input+0xdc>)
 8010d8c:	6819      	ldr	r1, [r3, #0]
 8010d8e:	4b21      	ldr	r3, [pc, #132]	@ (8010e14 <tcp_timewait_input+0xe0>)
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	461a      	mov	r2, r3
 8010d94:	4b1d      	ldr	r3, [pc, #116]	@ (8010e0c <tcp_timewait_input+0xd8>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8010e18 <tcp_timewait_input+0xe4>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d9e:	885b      	ldrh	r3, [r3, #2]
 8010da0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010da2:	4a1d      	ldr	r2, [pc, #116]	@ (8010e18 <tcp_timewait_input+0xe4>)
 8010da4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da6:	8812      	ldrh	r2, [r2, #0]
 8010da8:	b292      	uxth	r2, r2
 8010daa:	9202      	str	r2, [sp, #8]
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	4b1b      	ldr	r3, [pc, #108]	@ (8010e1c <tcp_timewait_input+0xe8>)
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4b1b      	ldr	r3, [pc, #108]	@ (8010e20 <tcp_timewait_input+0xec>)
 8010db4:	4602      	mov	r2, r0
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f003 fac4 	bl	8014344 <tcp_rst>
      return;
 8010dbc:	e01b      	b.n	8010df6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8010dfc <tcp_timewait_input+0xc8>)
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d003      	beq.n	8010dd2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010dca:	4b16      	ldr	r3, [pc, #88]	@ (8010e24 <tcp_timewait_input+0xf0>)
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010dd2:	4b10      	ldr	r3, [pc, #64]	@ (8010e14 <tcp_timewait_input+0xe0>)
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00c      	beq.n	8010df4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8b5b      	ldrh	r3, [r3, #26]
 8010dde:	f043 0302 	orr.w	r3, r3, #2
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f002 fcf7 	bl	80137dc <tcp_output>
  }
  return;
 8010dee:	e001      	b.n	8010df4 <tcp_timewait_input+0xc0>
    return;
 8010df0:	bf00      	nop
 8010df2:	e000      	b.n	8010df6 <tcp_timewait_input+0xc2>
  return;
 8010df4:	bf00      	nop
}
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	2000e108 	.word	0x2000e108
 8010e00:	0801c47c 	.word	0x0801c47c
 8010e04:	0801c694 	.word	0x0801c694
 8010e08:	0801c4c8 	.word	0x0801c4c8
 8010e0c:	2000e0fc 	.word	0x2000e0fc
 8010e10:	2000e100 	.word	0x2000e100
 8010e14:	2000e106 	.word	0x2000e106
 8010e18:	2000e0ec 	.word	0x2000e0ec
 8010e1c:	200087c0 	.word	0x200087c0
 8010e20:	200087c4 	.word	0x200087c4
 8010e24:	2000e0c4 	.word	0x2000e0c4

08010e28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010e28:	b590      	push	{r4, r7, lr}
 8010e2a:	b08d      	sub	sp, #52	@ 0x34
 8010e2c:	af04      	add	r7, sp, #16
 8010e2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <tcp_process+0x24>
 8010e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80110b4 <tcp_process+0x28c>)
 8010e40:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010e44:	499c      	ldr	r1, [pc, #624]	@ (80110b8 <tcp_process+0x290>)
 8010e46:	489d      	ldr	r0, [pc, #628]	@ (80110bc <tcp_process+0x294>)
 8010e48:	f007 fa6c 	bl	8018324 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80110c0 <tcp_process+0x298>)
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	f003 0304 	and.w	r3, r3, #4
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d04e      	beq.n	8010ef6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	7d1b      	ldrb	r3, [r3, #20]
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d108      	bne.n	8010e72 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e64:	4b97      	ldr	r3, [pc, #604]	@ (80110c4 <tcp_process+0x29c>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d123      	bne.n	8010eb4 <tcp_process+0x8c>
        acceptable = 1;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	76fb      	strb	r3, [r7, #27]
 8010e70:	e020      	b.n	8010eb4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e76:	4b94      	ldr	r3, [pc, #592]	@ (80110c8 <tcp_process+0x2a0>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d102      	bne.n	8010e84 <tcp_process+0x5c>
        acceptable = 1;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	76fb      	strb	r3, [r7, #27]
 8010e82:	e017      	b.n	8010eb4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e84:	4b90      	ldr	r3, [pc, #576]	@ (80110c8 <tcp_process+0x2a0>)
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	db10      	blt.n	8010eb4 <tcp_process+0x8c>
 8010e92:	4b8d      	ldr	r3, [pc, #564]	@ (80110c8 <tcp_process+0x2a0>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9a:	6879      	ldr	r1, [r7, #4]
 8010e9c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010e9e:	440b      	add	r3, r1
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	dc06      	bgt.n	8010eb4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8b5b      	ldrh	r3, [r3, #26]
 8010eaa:	f043 0302 	orr.w	r3, r3, #2
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010eb4:	7efb      	ldrb	r3, [r7, #27]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d01b      	beq.n	8010ef2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	7d1b      	ldrb	r3, [r3, #20]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d106      	bne.n	8010ed0 <tcp_process+0xa8>
 8010ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80110b4 <tcp_process+0x28c>)
 8010ec4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010ec8:	4980      	ldr	r1, [pc, #512]	@ (80110cc <tcp_process+0x2a4>)
 8010eca:	487c      	ldr	r0, [pc, #496]	@ (80110bc <tcp_process+0x294>)
 8010ecc:	f007 fa2a 	bl	8018324 <iprintf>
      recv_flags |= TF_RESET;
 8010ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80110d0 <tcp_process+0x2a8>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	f043 0308 	orr.w	r3, r3, #8
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	4b7d      	ldr	r3, [pc, #500]	@ (80110d0 <tcp_process+0x2a8>)
 8010edc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8b5b      	ldrh	r3, [r3, #26]
 8010ee2:	f023 0301 	bic.w	r3, r3, #1
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010eec:	f06f 030d 	mvn.w	r3, #13
 8010ef0:	e37a      	b.n	80115e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	e378      	b.n	80115e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010ef6:	4b72      	ldr	r3, [pc, #456]	@ (80110c0 <tcp_process+0x298>)
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	f003 0302 	and.w	r3, r3, #2
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d010      	beq.n	8010f24 <tcp_process+0xfc>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	7d1b      	ldrb	r3, [r3, #20]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d00c      	beq.n	8010f24 <tcp_process+0xfc>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	7d1b      	ldrb	r3, [r3, #20]
 8010f0e:	2b03      	cmp	r3, #3
 8010f10:	d008      	beq.n	8010f24 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	8b5b      	ldrh	r3, [r3, #26]
 8010f16:	f043 0302 	orr.w	r3, r3, #2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010f20:	2300      	movs	r3, #0
 8010f22:	e361      	b.n	80115e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f003 0310 	and.w	r3, r3, #16
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d103      	bne.n	8010f38 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010f30:	4b68      	ldr	r3, [pc, #416]	@ (80110d4 <tcp_process+0x2ac>)
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f001 fc2b 	bl	80127a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	7d1b      	ldrb	r3, [r3, #20]
 8010f52:	3b02      	subs	r3, #2
 8010f54:	2b07      	cmp	r3, #7
 8010f56:	f200 8337 	bhi.w	80115c8 <tcp_process+0x7a0>
 8010f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f60 <tcp_process+0x138>)
 8010f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f60:	08010f81 	.word	0x08010f81
 8010f64:	080111b1 	.word	0x080111b1
 8010f68:	08011329 	.word	0x08011329
 8010f6c:	08011353 	.word	0x08011353
 8010f70:	08011477 	.word	0x08011477
 8010f74:	08011329 	.word	0x08011329
 8010f78:	08011503 	.word	0x08011503
 8010f7c:	08011593 	.word	0x08011593
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010f80:	4b4f      	ldr	r3, [pc, #316]	@ (80110c0 <tcp_process+0x298>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	f003 0310 	and.w	r3, r3, #16
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 80e4 	beq.w	8011156 <tcp_process+0x32e>
 8010f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80110c0 <tcp_process+0x298>)
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	f003 0302 	and.w	r3, r3, #2
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 80dd 	beq.w	8011156 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	4b48      	ldr	r3, [pc, #288]	@ (80110c4 <tcp_process+0x29c>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	f040 80d5 	bne.w	8011156 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010fac:	4b46      	ldr	r3, [pc, #280]	@ (80110c8 <tcp_process+0x2a0>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010fbe:	4b41      	ldr	r3, [pc, #260]	@ (80110c4 <tcp_process+0x29c>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010fc6:	4b44      	ldr	r3, [pc, #272]	@ (80110d8 <tcp_process+0x2b0>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	89db      	ldrh	r3, [r3, #14]
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010fe0:	4b39      	ldr	r3, [pc, #228]	@ (80110c8 <tcp_process+0x2a0>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	1e5a      	subs	r2, r3, #1
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2204      	movs	r2, #4
 8010fee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f005 f8b9 	bl	8016170 <ip4_route>
 8010ffe:	4601      	mov	r1, r0
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	3304      	adds	r3, #4
 8011004:	461a      	mov	r2, r3
 8011006:	4620      	mov	r0, r4
 8011008:	f7ff f88c 	bl	8010124 <tcp_eff_send_mss_netif>
 801100c:	4603      	mov	r3, r0
 801100e:	461a      	mov	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011018:	009a      	lsls	r2, r3, #2
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801101e:	005b      	lsls	r3, r3, #1
 8011020:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011024:	428b      	cmp	r3, r1
 8011026:	bf38      	it	cc
 8011028:	460b      	movcc	r3, r1
 801102a:	429a      	cmp	r2, r3
 801102c:	d204      	bcs.n	8011038 <tcp_process+0x210>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	b29b      	uxth	r3, r3
 8011036:	e00d      	b.n	8011054 <tcp_process+0x22c>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011042:	4293      	cmp	r3, r2
 8011044:	d904      	bls.n	8011050 <tcp_process+0x228>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801104a:	005b      	lsls	r3, r3, #1
 801104c:	b29b      	uxth	r3, r3
 801104e:	e001      	b.n	8011054 <tcp_process+0x22c>
 8011050:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011060:	2b00      	cmp	r3, #0
 8011062:	d106      	bne.n	8011072 <tcp_process+0x24a>
 8011064:	4b13      	ldr	r3, [pc, #76]	@ (80110b4 <tcp_process+0x28c>)
 8011066:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801106a:	491c      	ldr	r1, [pc, #112]	@ (80110dc <tcp_process+0x2b4>)
 801106c:	4813      	ldr	r0, [pc, #76]	@ (80110bc <tcp_process+0x294>)
 801106e:	f007 f959 	bl	8018324 <iprintf>
        --pcb->snd_queuelen;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011078:	3b01      	subs	r3, #1
 801107a:	b29a      	uxth	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011086:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d12a      	bne.n	80110e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011092:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d106      	bne.n	80110a8 <tcp_process+0x280>
 801109a:	4b06      	ldr	r3, [pc, #24]	@ (80110b4 <tcp_process+0x28c>)
 801109c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80110a0:	490f      	ldr	r1, [pc, #60]	@ (80110e0 <tcp_process+0x2b8>)
 80110a2:	4806      	ldr	r0, [pc, #24]	@ (80110bc <tcp_process+0x294>)
 80110a4:	f007 f93e 	bl	8018324 <iprintf>
          pcb->unsent = rseg->next;
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 80110b0:	e01c      	b.n	80110ec <tcp_process+0x2c4>
 80110b2:	bf00      	nop
 80110b4:	0801c47c 	.word	0x0801c47c
 80110b8:	0801c6b4 	.word	0x0801c6b4
 80110bc:	0801c4c8 	.word	0x0801c4c8
 80110c0:	2000e108 	.word	0x2000e108
 80110c4:	2000e100 	.word	0x2000e100
 80110c8:	2000e0fc 	.word	0x2000e0fc
 80110cc:	0801c6d0 	.word	0x0801c6d0
 80110d0:	2000e109 	.word	0x2000e109
 80110d4:	2000e0c4 	.word	0x2000e0c4
 80110d8:	2000e0ec 	.word	0x2000e0ec
 80110dc:	0801c6f0 	.word	0x0801c6f0
 80110e0:	0801c708 	.word	0x0801c708
        } else {
          pcb->unacked = rseg->next;
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80110ec:	69f8      	ldr	r0, [r7, #28]
 80110ee:	f7fe fc54 	bl	800f99a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d104      	bne.n	8011104 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011100:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011102:	e006      	b.n	8011112 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00a      	beq.n	8011132 <tcp_process+0x30a>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	6910      	ldr	r0, [r2, #16]
 8011126:	2200      	movs	r2, #0
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	4798      	blx	r3
 801112c:	4603      	mov	r3, r0
 801112e:	76bb      	strb	r3, [r7, #26]
 8011130:	e001      	b.n	8011136 <tcp_process+0x30e>
 8011132:	2300      	movs	r3, #0
 8011134:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011136:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801113a:	f113 0f0d 	cmn.w	r3, #13
 801113e:	d102      	bne.n	8011146 <tcp_process+0x31e>
          return ERR_ABRT;
 8011140:	f06f 030c 	mvn.w	r3, #12
 8011144:	e250      	b.n	80115e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	8b5b      	ldrh	r3, [r3, #26]
 801114a:	f043 0302 	orr.w	r3, r3, #2
 801114e:	b29a      	uxth	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011154:	e23a      	b.n	80115cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011156:	4b98      	ldr	r3, [pc, #608]	@ (80113b8 <tcp_process+0x590>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	f003 0310 	and.w	r3, r3, #16
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 8234 	beq.w	80115cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011164:	4b95      	ldr	r3, [pc, #596]	@ (80113bc <tcp_process+0x594>)
 8011166:	6819      	ldr	r1, [r3, #0]
 8011168:	4b95      	ldr	r3, [pc, #596]	@ (80113c0 <tcp_process+0x598>)
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	461a      	mov	r2, r3
 801116e:	4b95      	ldr	r3, [pc, #596]	@ (80113c4 <tcp_process+0x59c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011174:	4b94      	ldr	r3, [pc, #592]	@ (80113c8 <tcp_process+0x5a0>)
 8011176:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011178:	885b      	ldrh	r3, [r3, #2]
 801117a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801117c:	4a92      	ldr	r2, [pc, #584]	@ (80113c8 <tcp_process+0x5a0>)
 801117e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011180:	8812      	ldrh	r2, [r2, #0]
 8011182:	b292      	uxth	r2, r2
 8011184:	9202      	str	r2, [sp, #8]
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	4b90      	ldr	r3, [pc, #576]	@ (80113cc <tcp_process+0x5a4>)
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	4b90      	ldr	r3, [pc, #576]	@ (80113d0 <tcp_process+0x5a8>)
 801118e:	4602      	mov	r2, r0
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f003 f8d7 	bl	8014344 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801119c:	2b05      	cmp	r3, #5
 801119e:	f200 8215 	bhi.w	80115cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f002 fea3 	bl	8013ef4 <tcp_rexmit_rto>
      break;
 80111ae:	e20d      	b.n	80115cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80111b0:	4b81      	ldr	r3, [pc, #516]	@ (80113b8 <tcp_process+0x590>)
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f003 0310 	and.w	r3, r3, #16
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 80a1 	beq.w	8011300 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111be:	4b7f      	ldr	r3, [pc, #508]	@ (80113bc <tcp_process+0x594>)
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	3b01      	subs	r3, #1
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	db7e      	blt.n	80112cc <tcp_process+0x4a4>
 80111ce:	4b7b      	ldr	r3, [pc, #492]	@ (80113bc <tcp_process+0x594>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111d6:	1ad3      	subs	r3, r2, r3
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dc77      	bgt.n	80112cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2204      	movs	r2, #4
 80111e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d102      	bne.n	80111f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80111ea:	23fa      	movs	r3, #250	@ 0xfa
 80111ec:	76bb      	strb	r3, [r7, #26]
 80111ee:	e01d      	b.n	801122c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111f4:	699b      	ldr	r3, [r3, #24]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <tcp_process+0x3e0>
 80111fa:	4b76      	ldr	r3, [pc, #472]	@ (80113d4 <tcp_process+0x5ac>)
 80111fc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011200:	4975      	ldr	r1, [pc, #468]	@ (80113d8 <tcp_process+0x5b0>)
 8011202:	4876      	ldr	r0, [pc, #472]	@ (80113dc <tcp_process+0x5b4>)
 8011204:	f007 f88e 	bl	8018324 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801120c:	699b      	ldr	r3, [r3, #24]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00a      	beq.n	8011228 <tcp_process+0x400>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	6910      	ldr	r0, [r2, #16]
 801121c:	2200      	movs	r2, #0
 801121e:	6879      	ldr	r1, [r7, #4]
 8011220:	4798      	blx	r3
 8011222:	4603      	mov	r3, r0
 8011224:	76bb      	strb	r3, [r7, #26]
 8011226:	e001      	b.n	801122c <tcp_process+0x404>
 8011228:	23f0      	movs	r3, #240	@ 0xf0
 801122a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801122c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00a      	beq.n	801124a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011234:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011238:	f113 0f0d 	cmn.w	r3, #13
 801123c:	d002      	beq.n	8011244 <tcp_process+0x41c>
              tcp_abort(pcb);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7fd fd16 	bl	800ec70 <tcp_abort>
            }
            return ERR_ABRT;
 8011244:	f06f 030c 	mvn.w	r3, #12
 8011248:	e1ce      	b.n	80115e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 fae0 	bl	8011810 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011250:	4b63      	ldr	r3, [pc, #396]	@ (80113e0 <tcp_process+0x5b8>)
 8011252:	881b      	ldrh	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d005      	beq.n	8011264 <tcp_process+0x43c>
            recv_acked--;
 8011258:	4b61      	ldr	r3, [pc, #388]	@ (80113e0 <tcp_process+0x5b8>)
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	3b01      	subs	r3, #1
 801125e:	b29a      	uxth	r2, r3
 8011260:	4b5f      	ldr	r3, [pc, #380]	@ (80113e0 <tcp_process+0x5b8>)
 8011262:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011268:	009a      	lsls	r2, r3, #2
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801126e:	005b      	lsls	r3, r3, #1
 8011270:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011274:	428b      	cmp	r3, r1
 8011276:	bf38      	it	cc
 8011278:	460b      	movcc	r3, r1
 801127a:	429a      	cmp	r2, r3
 801127c:	d204      	bcs.n	8011288 <tcp_process+0x460>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	b29b      	uxth	r3, r3
 8011286:	e00d      	b.n	80112a4 <tcp_process+0x47c>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801128c:	005b      	lsls	r3, r3, #1
 801128e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011292:	4293      	cmp	r3, r2
 8011294:	d904      	bls.n	80112a0 <tcp_process+0x478>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	b29b      	uxth	r3, r3
 801129e:	e001      	b.n	80112a4 <tcp_process+0x47c>
 80112a0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80112aa:	4b4e      	ldr	r3, [pc, #312]	@ (80113e4 <tcp_process+0x5bc>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	f003 0320 	and.w	r3, r3, #32
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d037      	beq.n	8011326 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	8b5b      	ldrh	r3, [r3, #26]
 80112ba:	f043 0302 	orr.w	r3, r3, #2
 80112be:	b29a      	uxth	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2207      	movs	r2, #7
 80112c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80112ca:	e02c      	b.n	8011326 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112cc:	4b3b      	ldr	r3, [pc, #236]	@ (80113bc <tcp_process+0x594>)
 80112ce:	6819      	ldr	r1, [r3, #0]
 80112d0:	4b3b      	ldr	r3, [pc, #236]	@ (80113c0 <tcp_process+0x598>)
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	461a      	mov	r2, r3
 80112d6:	4b3b      	ldr	r3, [pc, #236]	@ (80113c4 <tcp_process+0x59c>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112dc:	4b3a      	ldr	r3, [pc, #232]	@ (80113c8 <tcp_process+0x5a0>)
 80112de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112e0:	885b      	ldrh	r3, [r3, #2]
 80112e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112e4:	4a38      	ldr	r2, [pc, #224]	@ (80113c8 <tcp_process+0x5a0>)
 80112e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112e8:	8812      	ldrh	r2, [r2, #0]
 80112ea:	b292      	uxth	r2, r2
 80112ec:	9202      	str	r2, [sp, #8]
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	4b36      	ldr	r3, [pc, #216]	@ (80113cc <tcp_process+0x5a4>)
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	4b36      	ldr	r3, [pc, #216]	@ (80113d0 <tcp_process+0x5a8>)
 80112f6:	4602      	mov	r2, r0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f003 f823 	bl	8014344 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80112fe:	e167      	b.n	80115d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011300:	4b2d      	ldr	r3, [pc, #180]	@ (80113b8 <tcp_process+0x590>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 0302 	and.w	r3, r3, #2
 8011308:	2b00      	cmp	r3, #0
 801130a:	f000 8161 	beq.w	80115d0 <tcp_process+0x7a8>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011312:	1e5a      	subs	r2, r3, #1
 8011314:	4b2b      	ldr	r3, [pc, #172]	@ (80113c4 <tcp_process+0x59c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	429a      	cmp	r2, r3
 801131a:	f040 8159 	bne.w	80115d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f002 fe0a 	bl	8013f38 <tcp_rexmit>
      break;
 8011324:	e154      	b.n	80115d0 <tcp_process+0x7a8>
 8011326:	e153      	b.n	80115d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fa71 	bl	8011810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801132e:	4b2d      	ldr	r3, [pc, #180]	@ (80113e4 <tcp_process+0x5bc>)
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	f003 0320 	and.w	r3, r3, #32
 8011336:	2b00      	cmp	r3, #0
 8011338:	f000 814c 	beq.w	80115d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	8b5b      	ldrh	r3, [r3, #26]
 8011340:	f043 0302 	orr.w	r3, r3, #2
 8011344:	b29a      	uxth	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2207      	movs	r2, #7
 801134e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011350:	e140      	b.n	80115d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 fa5c 	bl	8011810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011358:	4b22      	ldr	r3, [pc, #136]	@ (80113e4 <tcp_process+0x5bc>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	f003 0320 	and.w	r3, r3, #32
 8011360:	2b00      	cmp	r3, #0
 8011362:	d071      	beq.n	8011448 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011364:	4b14      	ldr	r3, [pc, #80]	@ (80113b8 <tcp_process+0x590>)
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	f003 0310 	and.w	r3, r3, #16
 801136c:	2b00      	cmp	r3, #0
 801136e:	d060      	beq.n	8011432 <tcp_process+0x60a>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011374:	4b11      	ldr	r3, [pc, #68]	@ (80113bc <tcp_process+0x594>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	429a      	cmp	r2, r3
 801137a:	d15a      	bne.n	8011432 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011380:	2b00      	cmp	r3, #0
 8011382:	d156      	bne.n	8011432 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	8b5b      	ldrh	r3, [r3, #26]
 8011388:	f043 0302 	orr.w	r3, r3, #2
 801138c:	b29a      	uxth	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7fe fdbc 	bl	800ff10 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011398:	4b13      	ldr	r3, [pc, #76]	@ (80113e8 <tcp_process+0x5c0>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d105      	bne.n	80113ae <tcp_process+0x586>
 80113a2:	4b11      	ldr	r3, [pc, #68]	@ (80113e8 <tcp_process+0x5c0>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	4a0f      	ldr	r2, [pc, #60]	@ (80113e8 <tcp_process+0x5c0>)
 80113aa:	6013      	str	r3, [r2, #0]
 80113ac:	e02e      	b.n	801140c <tcp_process+0x5e4>
 80113ae:	4b0e      	ldr	r3, [pc, #56]	@ (80113e8 <tcp_process+0x5c0>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	617b      	str	r3, [r7, #20]
 80113b4:	e027      	b.n	8011406 <tcp_process+0x5de>
 80113b6:	bf00      	nop
 80113b8:	2000e108 	.word	0x2000e108
 80113bc:	2000e100 	.word	0x2000e100
 80113c0:	2000e106 	.word	0x2000e106
 80113c4:	2000e0fc 	.word	0x2000e0fc
 80113c8:	2000e0ec 	.word	0x2000e0ec
 80113cc:	200087c0 	.word	0x200087c0
 80113d0:	200087c4 	.word	0x200087c4
 80113d4:	0801c47c 	.word	0x0801c47c
 80113d8:	0801c71c 	.word	0x0801c71c
 80113dc:	0801c4c8 	.word	0x0801c4c8
 80113e0:	2000e104 	.word	0x2000e104
 80113e4:	2000e109 	.word	0x2000e109
 80113e8:	2000e0d0 	.word	0x2000e0d0
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	687a      	ldr	r2, [r7, #4]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d104      	bne.n	8011400 <tcp_process+0x5d8>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68da      	ldr	r2, [r3, #12]
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	60da      	str	r2, [r3, #12]
 80113fe:	e005      	b.n	801140c <tcp_process+0x5e4>
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	617b      	str	r3, [r7, #20]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1ef      	bne.n	80113ec <tcp_process+0x5c4>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	60da      	str	r2, [r3, #12]
 8011412:	4b77      	ldr	r3, [pc, #476]	@ (80115f0 <tcp_process+0x7c8>)
 8011414:	2201      	movs	r2, #1
 8011416:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	220a      	movs	r2, #10
 801141c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801141e:	4b75      	ldr	r3, [pc, #468]	@ (80115f4 <tcp_process+0x7cc>)
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	60da      	str	r2, [r3, #12]
 8011426:	4a73      	ldr	r2, [pc, #460]	@ (80115f4 <tcp_process+0x7cc>)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	f003 f94c 	bl	80146c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011430:	e0d2      	b.n	80115d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8b5b      	ldrh	r3, [r3, #26]
 8011436:	f043 0302 	orr.w	r3, r3, #2
 801143a:	b29a      	uxth	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2208      	movs	r2, #8
 8011444:	751a      	strb	r2, [r3, #20]
      break;
 8011446:	e0c7      	b.n	80115d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011448:	4b6b      	ldr	r3, [pc, #428]	@ (80115f8 <tcp_process+0x7d0>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	f003 0310 	and.w	r3, r3, #16
 8011450:	2b00      	cmp	r3, #0
 8011452:	f000 80c1 	beq.w	80115d8 <tcp_process+0x7b0>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801145a:	4b68      	ldr	r3, [pc, #416]	@ (80115fc <tcp_process+0x7d4>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	f040 80ba 	bne.w	80115d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011468:	2b00      	cmp	r3, #0
 801146a:	f040 80b5 	bne.w	80115d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2206      	movs	r2, #6
 8011472:	751a      	strb	r2, [r3, #20]
      break;
 8011474:	e0b0      	b.n	80115d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 f9ca 	bl	8011810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801147c:	4b60      	ldr	r3, [pc, #384]	@ (8011600 <tcp_process+0x7d8>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 0320 	and.w	r3, r3, #32
 8011484:	2b00      	cmp	r3, #0
 8011486:	f000 80a9 	beq.w	80115dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8b5b      	ldrh	r3, [r3, #26]
 801148e:	f043 0302 	orr.w	r3, r3, #2
 8011492:	b29a      	uxth	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7fe fd39 	bl	800ff10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801149e:	4b59      	ldr	r3, [pc, #356]	@ (8011604 <tcp_process+0x7dc>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d105      	bne.n	80114b4 <tcp_process+0x68c>
 80114a8:	4b56      	ldr	r3, [pc, #344]	@ (8011604 <tcp_process+0x7dc>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	4a55      	ldr	r2, [pc, #340]	@ (8011604 <tcp_process+0x7dc>)
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	e013      	b.n	80114dc <tcp_process+0x6b4>
 80114b4:	4b53      	ldr	r3, [pc, #332]	@ (8011604 <tcp_process+0x7dc>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	613b      	str	r3, [r7, #16]
 80114ba:	e00c      	b.n	80114d6 <tcp_process+0x6ae>
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d104      	bne.n	80114d0 <tcp_process+0x6a8>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	60da      	str	r2, [r3, #12]
 80114ce:	e005      	b.n	80114dc <tcp_process+0x6b4>
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	613b      	str	r3, [r7, #16]
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d1ef      	bne.n	80114bc <tcp_process+0x694>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	60da      	str	r2, [r3, #12]
 80114e2:	4b43      	ldr	r3, [pc, #268]	@ (80115f0 <tcp_process+0x7c8>)
 80114e4:	2201      	movs	r2, #1
 80114e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	220a      	movs	r2, #10
 80114ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80114ee:	4b41      	ldr	r3, [pc, #260]	@ (80115f4 <tcp_process+0x7cc>)
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	60da      	str	r2, [r3, #12]
 80114f6:	4a3f      	ldr	r2, [pc, #252]	@ (80115f4 <tcp_process+0x7cc>)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	f003 f8e4 	bl	80146c8 <tcp_timer_needed>
      }
      break;
 8011500:	e06c      	b.n	80115dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 f984 	bl	8011810 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011508:	4b3b      	ldr	r3, [pc, #236]	@ (80115f8 <tcp_process+0x7d0>)
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	f003 0310 	and.w	r3, r3, #16
 8011510:	2b00      	cmp	r3, #0
 8011512:	d065      	beq.n	80115e0 <tcp_process+0x7b8>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011518:	4b38      	ldr	r3, [pc, #224]	@ (80115fc <tcp_process+0x7d4>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d15f      	bne.n	80115e0 <tcp_process+0x7b8>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011524:	2b00      	cmp	r3, #0
 8011526:	d15b      	bne.n	80115e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f7fe fcf1 	bl	800ff10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801152e:	4b35      	ldr	r3, [pc, #212]	@ (8011604 <tcp_process+0x7dc>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	429a      	cmp	r2, r3
 8011536:	d105      	bne.n	8011544 <tcp_process+0x71c>
 8011538:	4b32      	ldr	r3, [pc, #200]	@ (8011604 <tcp_process+0x7dc>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	4a31      	ldr	r2, [pc, #196]	@ (8011604 <tcp_process+0x7dc>)
 8011540:	6013      	str	r3, [r2, #0]
 8011542:	e013      	b.n	801156c <tcp_process+0x744>
 8011544:	4b2f      	ldr	r3, [pc, #188]	@ (8011604 <tcp_process+0x7dc>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	e00c      	b.n	8011566 <tcp_process+0x73e>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	429a      	cmp	r2, r3
 8011554:	d104      	bne.n	8011560 <tcp_process+0x738>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	68da      	ldr	r2, [r3, #12]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	60da      	str	r2, [r3, #12]
 801155e:	e005      	b.n	801156c <tcp_process+0x744>
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1ef      	bne.n	801154c <tcp_process+0x724>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	60da      	str	r2, [r3, #12]
 8011572:	4b1f      	ldr	r3, [pc, #124]	@ (80115f0 <tcp_process+0x7c8>)
 8011574:	2201      	movs	r2, #1
 8011576:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	220a      	movs	r2, #10
 801157c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801157e:	4b1d      	ldr	r3, [pc, #116]	@ (80115f4 <tcp_process+0x7cc>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60da      	str	r2, [r3, #12]
 8011586:	4a1b      	ldr	r2, [pc, #108]	@ (80115f4 <tcp_process+0x7cc>)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6013      	str	r3, [r2, #0]
 801158c:	f003 f89c 	bl	80146c8 <tcp_timer_needed>
      }
      break;
 8011590:	e026      	b.n	80115e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f000 f93c 	bl	8011810 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011598:	4b17      	ldr	r3, [pc, #92]	@ (80115f8 <tcp_process+0x7d0>)
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	f003 0310 	and.w	r3, r3, #16
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d01f      	beq.n	80115e4 <tcp_process+0x7bc>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115a8:	4b14      	ldr	r3, [pc, #80]	@ (80115fc <tcp_process+0x7d4>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d119      	bne.n	80115e4 <tcp_process+0x7bc>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d115      	bne.n	80115e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80115b8:	4b11      	ldr	r3, [pc, #68]	@ (8011600 <tcp_process+0x7d8>)
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	f043 0310 	orr.w	r3, r3, #16
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011600 <tcp_process+0x7d8>)
 80115c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80115c6:	e00d      	b.n	80115e4 <tcp_process+0x7bc>
    default:
      break;
 80115c8:	bf00      	nop
 80115ca:	e00c      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115cc:	bf00      	nop
 80115ce:	e00a      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115d0:	bf00      	nop
 80115d2:	e008      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115d4:	bf00      	nop
 80115d6:	e006      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115d8:	bf00      	nop
 80115da:	e004      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115dc:	bf00      	nop
 80115de:	e002      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115e0:	bf00      	nop
 80115e2:	e000      	b.n	80115e6 <tcp_process+0x7be>
      break;
 80115e4:	bf00      	nop
  }
  return ERR_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3724      	adds	r7, #36	@ 0x24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd90      	pop	{r4, r7, pc}
 80115f0:	2000e0d8 	.word	0x2000e0d8
 80115f4:	2000e0d4 	.word	0x2000e0d4
 80115f8:	2000e108 	.word	0x2000e108
 80115fc:	2000e100 	.word	0x2000e100
 8011600:	2000e109 	.word	0x2000e109
 8011604:	2000e0d0 	.word	0x2000e0d0

08011608 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011608:	b590      	push	{r4, r7, lr}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d106      	bne.n	8011626 <tcp_oos_insert_segment+0x1e>
 8011618:	4b3b      	ldr	r3, [pc, #236]	@ (8011708 <tcp_oos_insert_segment+0x100>)
 801161a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801161e:	493b      	ldr	r1, [pc, #236]	@ (801170c <tcp_oos_insert_segment+0x104>)
 8011620:	483b      	ldr	r0, [pc, #236]	@ (8011710 <tcp_oos_insert_segment+0x108>)
 8011622:	f006 fe7f 	bl	8018324 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	b29b      	uxth	r3, r3
 801162e:	4618      	mov	r0, r3
 8011630:	f7fb f982 	bl	800c938 <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	b2db      	uxtb	r3, r3
 8011638:	f003 0301 	and.w	r3, r3, #1
 801163c:	2b00      	cmp	r3, #0
 801163e:	d028      	beq.n	8011692 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011640:	6838      	ldr	r0, [r7, #0]
 8011642:	f7fe f995 	bl	800f970 <tcp_segs_free>
    next = NULL;
 8011646:	2300      	movs	r3, #0
 8011648:	603b      	str	r3, [r7, #0]
 801164a:	e056      	b.n	80116fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	899b      	ldrh	r3, [r3, #12]
 8011652:	b29b      	uxth	r3, r3
 8011654:	4618      	mov	r0, r3
 8011656:	f7fb f96f 	bl	800c938 <lwip_htons>
 801165a:	4603      	mov	r3, r0
 801165c:	b2db      	uxtb	r3, r3
 801165e:	f003 0301 	and.w	r3, r3, #1
 8011662:	2b00      	cmp	r3, #0
 8011664:	d00d      	beq.n	8011682 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	899b      	ldrh	r3, [r3, #12]
 801166c:	b29c      	uxth	r4, r3
 801166e:	2001      	movs	r0, #1
 8011670:	f7fb f962 	bl	800c938 <lwip_htons>
 8011674:	4603      	mov	r3, r0
 8011676:	461a      	mov	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	4322      	orrs	r2, r4
 801167e:	b292      	uxth	r2, r2
 8011680:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801168c:	68f8      	ldr	r0, [r7, #12]
 801168e:	f7fe f984 	bl	800f99a <tcp_seg_free>
    while (next &&
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00e      	beq.n	80116b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	891b      	ldrh	r3, [r3, #8]
 801169c:	461a      	mov	r2, r3
 801169e:	4b1d      	ldr	r3, [pc, #116]	@ (8011714 <tcp_oos_insert_segment+0x10c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	441a      	add	r2, r3
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	6839      	ldr	r1, [r7, #0]
 80116ac:	8909      	ldrh	r1, [r1, #8]
 80116ae:	440b      	add	r3, r1
 80116b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	daca      	bge.n	801164c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d01e      	beq.n	80116fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	891b      	ldrh	r3, [r3, #8]
 80116c0:	461a      	mov	r2, r3
 80116c2:	4b14      	ldr	r3, [pc, #80]	@ (8011714 <tcp_oos_insert_segment+0x10c>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	441a      	add	r2, r3
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dd12      	ble.n	80116fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	b29a      	uxth	r2, r3
 80116dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011714 <tcp_oos_insert_segment+0x10c>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	685a      	ldr	r2, [r3, #4]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	891b      	ldrh	r3, [r3, #8]
 80116f2:	4619      	mov	r1, r3
 80116f4:	4610      	mov	r0, r2
 80116f6:	f7fc fb45 	bl	800dd84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	601a      	str	r2, [r3, #0]
}
 8011700:	bf00      	nop
 8011702:	3714      	adds	r7, #20
 8011704:	46bd      	mov	sp, r7
 8011706:	bd90      	pop	{r4, r7, pc}
 8011708:	0801c47c 	.word	0x0801c47c
 801170c:	0801c73c 	.word	0x0801c73c
 8011710:	0801c4c8 	.word	0x0801c4c8
 8011714:	2000e0fc 	.word	0x2000e0fc

08011718 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011718:	b5b0      	push	{r4, r5, r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	af00      	add	r7, sp, #0
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011726:	e03e      	b.n	80117a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	4618      	mov	r0, r3
 8011738:	f7fc fd38 	bl	800e1ac <pbuf_clen>
 801173c:	4603      	mov	r3, r0
 801173e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011746:	8a7a      	ldrh	r2, [r7, #18]
 8011748:	429a      	cmp	r2, r3
 801174a:	d906      	bls.n	801175a <tcp_free_acked_segments+0x42>
 801174c:	4b2a      	ldr	r3, [pc, #168]	@ (80117f8 <tcp_free_acked_segments+0xe0>)
 801174e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011752:	492a      	ldr	r1, [pc, #168]	@ (80117fc <tcp_free_acked_segments+0xe4>)
 8011754:	482a      	ldr	r0, [pc, #168]	@ (8011800 <tcp_free_acked_segments+0xe8>)
 8011756:	f006 fde5 	bl	8018324 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011760:	8a7b      	ldrh	r3, [r7, #18]
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	b29a      	uxth	r2, r3
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	891a      	ldrh	r2, [r3, #8]
 8011770:	4b24      	ldr	r3, [pc, #144]	@ (8011804 <tcp_free_acked_segments+0xec>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	4413      	add	r3, r2
 8011776:	b29a      	uxth	r2, r3
 8011778:	4b22      	ldr	r3, [pc, #136]	@ (8011804 <tcp_free_acked_segments+0xec>)
 801177a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801177c:	6978      	ldr	r0, [r7, #20]
 801177e:	f7fe f90c 	bl	800f99a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00c      	beq.n	80117a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d109      	bne.n	80117a6 <tcp_free_acked_segments+0x8e>
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d106      	bne.n	80117a6 <tcp_free_acked_segments+0x8e>
 8011798:	4b17      	ldr	r3, [pc, #92]	@ (80117f8 <tcp_free_acked_segments+0xe0>)
 801179a:	f240 4261 	movw	r2, #1121	@ 0x461
 801179e:	491a      	ldr	r1, [pc, #104]	@ (8011808 <tcp_free_acked_segments+0xf0>)
 80117a0:	4817      	ldr	r0, [pc, #92]	@ (8011800 <tcp_free_acked_segments+0xe8>)
 80117a2:	f006 fdbf 	bl	8018324 <iprintf>
  while (seg_list != NULL &&
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d020      	beq.n	80117ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	68db      	ldr	r3, [r3, #12]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fb f8d5 	bl	800c962 <lwip_htonl>
 80117b8:	4604      	mov	r4, r0
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	891b      	ldrh	r3, [r3, #8]
 80117be:	461d      	mov	r5, r3
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	899b      	ldrh	r3, [r3, #12]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fb f8b5 	bl	800c938 <lwip_htons>
 80117ce:	4603      	mov	r3, r0
 80117d0:	b2db      	uxtb	r3, r3
 80117d2:	f003 0303 	and.w	r3, r3, #3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <tcp_free_acked_segments+0xc6>
 80117da:	2301      	movs	r3, #1
 80117dc:	e000      	b.n	80117e0 <tcp_free_acked_segments+0xc8>
 80117de:	2300      	movs	r3, #0
 80117e0:	442b      	add	r3, r5
 80117e2:	18e2      	adds	r2, r4, r3
 80117e4:	4b09      	ldr	r3, [pc, #36]	@ (801180c <tcp_free_acked_segments+0xf4>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	dd9c      	ble.n	8011728 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80117ee:	68bb      	ldr	r3, [r7, #8]
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bdb0      	pop	{r4, r5, r7, pc}
 80117f8:	0801c47c 	.word	0x0801c47c
 80117fc:	0801c764 	.word	0x0801c764
 8011800:	0801c4c8 	.word	0x0801c4c8
 8011804:	2000e104 	.word	0x2000e104
 8011808:	0801c78c 	.word	0x0801c78c
 801180c:	2000e100 	.word	0x2000e100

08011810 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011810:	b5b0      	push	{r4, r5, r7, lr}
 8011812:	b094      	sub	sp, #80	@ 0x50
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d106      	bne.n	8011830 <tcp_receive+0x20>
 8011822:	4b91      	ldr	r3, [pc, #580]	@ (8011a68 <tcp_receive+0x258>)
 8011824:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011828:	4990      	ldr	r1, [pc, #576]	@ (8011a6c <tcp_receive+0x25c>)
 801182a:	4891      	ldr	r0, [pc, #580]	@ (8011a70 <tcp_receive+0x260>)
 801182c:	f006 fd7a 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	7d1b      	ldrb	r3, [r3, #20]
 8011834:	2b03      	cmp	r3, #3
 8011836:	d806      	bhi.n	8011846 <tcp_receive+0x36>
 8011838:	4b8b      	ldr	r3, [pc, #556]	@ (8011a68 <tcp_receive+0x258>)
 801183a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801183e:	498d      	ldr	r1, [pc, #564]	@ (8011a74 <tcp_receive+0x264>)
 8011840:	488b      	ldr	r0, [pc, #556]	@ (8011a70 <tcp_receive+0x260>)
 8011842:	f006 fd6f 	bl	8018324 <iprintf>

  if (flags & TCP_ACK) {
 8011846:	4b8c      	ldr	r3, [pc, #560]	@ (8011a78 <tcp_receive+0x268>)
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	f003 0310 	and.w	r3, r3, #16
 801184e:	2b00      	cmp	r3, #0
 8011850:	f000 8264 	beq.w	8011d1c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801185a:	461a      	mov	r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011860:	4413      	add	r3, r2
 8011862:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011868:	4b84      	ldr	r3, [pc, #528]	@ (8011a7c <tcp_receive+0x26c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	db1b      	blt.n	80118aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011876:	4b81      	ldr	r3, [pc, #516]	@ (8011a7c <tcp_receive+0x26c>)
 8011878:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801187a:	429a      	cmp	r2, r3
 801187c:	d106      	bne.n	801188c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011882:	4b7f      	ldr	r3, [pc, #508]	@ (8011a80 <tcp_receive+0x270>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	1ad3      	subs	r3, r2, r3
 8011888:	2b00      	cmp	r3, #0
 801188a:	db0e      	blt.n	80118aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011890:	4b7b      	ldr	r3, [pc, #492]	@ (8011a80 <tcp_receive+0x270>)
 8011892:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011894:	429a      	cmp	r2, r3
 8011896:	d125      	bne.n	80118e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011898:	4b7a      	ldr	r3, [pc, #488]	@ (8011a84 <tcp_receive+0x274>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	89db      	ldrh	r3, [r3, #14]
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d91c      	bls.n	80118e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80118aa:	4b76      	ldr	r3, [pc, #472]	@ (8011a84 <tcp_receive+0x274>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	89db      	ldrh	r3, [r3, #14]
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d205      	bcs.n	80118d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80118d4:	4b69      	ldr	r3, [pc, #420]	@ (8011a7c <tcp_receive+0x26c>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80118dc:	4b68      	ldr	r3, [pc, #416]	@ (8011a80 <tcp_receive+0x270>)
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80118e4:	4b66      	ldr	r3, [pc, #408]	@ (8011a80 <tcp_receive+0x270>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	dc58      	bgt.n	80119a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80118f2:	4b65      	ldr	r3, [pc, #404]	@ (8011a88 <tcp_receive+0x278>)
 80118f4:	881b      	ldrh	r3, [r3, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d14b      	bne.n	8011992 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011904:	4413      	add	r3, r2
 8011906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011908:	429a      	cmp	r2, r3
 801190a:	d142      	bne.n	8011992 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011912:	2b00      	cmp	r3, #0
 8011914:	db3d      	blt.n	8011992 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801191a:	4b59      	ldr	r3, [pc, #356]	@ (8011a80 <tcp_receive+0x270>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d137      	bne.n	8011992 <tcp_receive+0x182>
              found_dupack = 1;
 8011922:	2301      	movs	r3, #1
 8011924:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801192c:	2bff      	cmp	r3, #255	@ 0xff
 801192e:	d007      	beq.n	8011940 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011936:	3301      	adds	r3, #1
 8011938:	b2da      	uxtb	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011946:	2b03      	cmp	r3, #3
 8011948:	d91b      	bls.n	8011982 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011954:	4413      	add	r3, r2
 8011956:	b29a      	uxth	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801195e:	429a      	cmp	r2, r3
 8011960:	d30a      	bcc.n	8011978 <tcp_receive+0x168>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801196c:	4413      	add	r3, r2
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011976:	e004      	b.n	8011982 <tcp_receive+0x172>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801197e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011988:	2b02      	cmp	r3, #2
 801198a:	d902      	bls.n	8011992 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f002 fb3f 	bl	8014010 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 8161 	bne.w	8011c5c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80119a2:	e15b      	b.n	8011c5c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119a4:	4b36      	ldr	r3, [pc, #216]	@ (8011a80 <tcp_receive+0x270>)
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	3b01      	subs	r3, #1
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f2c0 814e 	blt.w	8011c52 <tcp_receive+0x442>
 80119b6:	4b32      	ldr	r3, [pc, #200]	@ (8011a80 <tcp_receive+0x270>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f300 8146 	bgt.w	8011c52 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	8b5b      	ldrh	r3, [r3, #26]
 80119ca:	f003 0304 	and.w	r3, r3, #4
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d010      	beq.n	80119f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	8b5b      	ldrh	r3, [r3, #26]
 80119d6:	f023 0304 	bic.w	r3, r3, #4
 80119da:	b29a      	uxth	r2, r3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011a02:	10db      	asrs	r3, r3, #3
 8011a04:	b21b      	sxth	r3, r3
 8011a06:	b29a      	uxth	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	4413      	add	r3, r2
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	b21a      	sxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011a1c:	4b18      	ldr	r3, [pc, #96]	@ (8011a80 <tcp_receive+0x270>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	1ad3      	subs	r3, r2, r3
 8011a2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011a34:	4b12      	ldr	r3, [pc, #72]	@ (8011a80 <tcp_receive+0x270>)
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	2b03      	cmp	r3, #3
 8011a42:	f240 8097 	bls.w	8011b74 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d245      	bcs.n	8011ae2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8b5b      	ldrh	r3, [r3, #26]
 8011a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d014      	beq.n	8011a8c <tcp_receive+0x27c>
 8011a62:	2301      	movs	r3, #1
 8011a64:	e013      	b.n	8011a8e <tcp_receive+0x27e>
 8011a66:	bf00      	nop
 8011a68:	0801c47c 	.word	0x0801c47c
 8011a6c:	0801c7ac 	.word	0x0801c7ac
 8011a70:	0801c4c8 	.word	0x0801c4c8
 8011a74:	0801c7c8 	.word	0x0801c7c8
 8011a78:	2000e108 	.word	0x2000e108
 8011a7c:	2000e0fc 	.word	0x2000e0fc
 8011a80:	2000e100 	.word	0x2000e100
 8011a84:	2000e0ec 	.word	0x2000e0ec
 8011a88:	2000e106 	.word	0x2000e106
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011a92:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a9c:	fb12 f303 	smulbb	r3, r2, r3
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	bf28      	it	cs
 8011aa8:	4613      	movcs	r3, r2
 8011aaa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ab2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ab4:	4413      	add	r3, r2
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d309      	bcc.n	8011ad6 <tcp_receive+0x2c6>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ac8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011aca:	4413      	add	r3, r2
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011ad4:	e04e      	b.n	8011b74 <tcp_receive+0x364>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011adc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011ae0:	e048      	b.n	8011b74 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011ae8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011aea:	4413      	add	r3, r2
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d309      	bcc.n	8011b0c <tcp_receive+0x2fc>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011afe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011b00:	4413      	add	r3, r2
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011b0a:	e004      	b.n	8011b16 <tcp_receive+0x306>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d326      	bcc.n	8011b74 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b46:	4413      	add	r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d30a      	bcc.n	8011b6a <tcp_receive+0x35a>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b5e:	4413      	add	r3, r2
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011b68:	e004      	b.n	8011b74 <tcp_receive+0x364>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b7c:	4a98      	ldr	r2, [pc, #608]	@ (8011de0 <tcp_receive+0x5d0>)
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7ff fdca 	bl	8011718 <tcp_free_acked_segments>
 8011b84:	4602      	mov	r2, r0
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b92:	4a94      	ldr	r2, [pc, #592]	@ (8011de4 <tcp_receive+0x5d4>)
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff fdbf 	bl	8011718 <tcp_free_acked_segments>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d104      	bne.n	8011bb2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011bae:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011bb0:	e002      	b.n	8011bb8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d103      	bne.n	8011bce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011bd4:	4b84      	ldr	r3, [pc, #528]	@ (8011de8 <tcp_receive+0x5d8>)
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	4413      	add	r3, r2
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	8b5b      	ldrh	r3, [r3, #26]
 8011be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d035      	beq.n	8011c5a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d118      	bne.n	8011c28 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d00c      	beq.n	8011c18 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fa fea9 	bl	800c962 <lwip_htonl>
 8011c10:	4603      	mov	r3, r0
 8011c12:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	dc20      	bgt.n	8011c5a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	8b5b      	ldrh	r3, [r3, #26]
 8011c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c26:	e018      	b.n	8011c5a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c30:	68db      	ldr	r3, [r3, #12]
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7fa fe94 	bl	800c962 <lwip_htonl>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	1ae3      	subs	r3, r4, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	dc0b      	bgt.n	8011c5a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	8b5b      	ldrh	r3, [r3, #26]
 8011c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c50:	e003      	b.n	8011c5a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f002 fbc8 	bl	80143e8 <tcp_send_empty_ack>
 8011c58:	e000      	b.n	8011c5c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c5a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d05b      	beq.n	8011d1c <tcp_receive+0x50c>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c68:	4b60      	ldr	r3, [pc, #384]	@ (8011dec <tcp_receive+0x5dc>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	da54      	bge.n	8011d1c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011c72:	4b5f      	ldr	r3, [pc, #380]	@ (8011df0 <tcp_receive+0x5e0>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011c86:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011c90:	10db      	asrs	r3, r3, #3
 8011c92:	b21b      	sxth	r3, r3
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011caa:	4413      	add	r3, r2
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	b21a      	sxth	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011cb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	da05      	bge.n	8011cc8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011cc0:	425b      	negs	r3, r3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011cc8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011cd2:	109b      	asrs	r3, r3, #2
 8011cd4:	b21b      	sxth	r3, r3
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011cec:	4413      	add	r3, r2
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	b21a      	sxth	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011cfc:	10db      	asrs	r3, r3, #3
 8011cfe:	b21b      	sxth	r3, r3
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	4413      	add	r3, r2
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	b21a      	sxth	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011d1c:	4b35      	ldr	r3, [pc, #212]	@ (8011df4 <tcp_receive+0x5e4>)
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 84df 	beq.w	80126e4 <tcp_receive+0xed4>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	7d1b      	ldrb	r3, [r3, #20]
 8011d2a:	2b06      	cmp	r3, #6
 8011d2c:	f200 84da 	bhi.w	80126e4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d34:	4b30      	ldr	r3, [pc, #192]	@ (8011df8 <tcp_receive+0x5e8>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f2c0 808f 	blt.w	8011e60 <tcp_receive+0x650>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d46:	4b2b      	ldr	r3, [pc, #172]	@ (8011df4 <tcp_receive+0x5e4>)
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8011df8 <tcp_receive+0x5e8>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	440b      	add	r3, r1
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	3301      	adds	r3, #1
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f300 8082 	bgt.w	8011e60 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011d5c:	4b27      	ldr	r3, [pc, #156]	@ (8011dfc <tcp_receive+0x5ec>)
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d66:	4b24      	ldr	r3, [pc, #144]	@ (8011df8 <tcp_receive+0x5e8>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	1ad3      	subs	r3, r2, r3
 8011d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011d6e:	4b23      	ldr	r3, [pc, #140]	@ (8011dfc <tcp_receive+0x5ec>)
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d106      	bne.n	8011d84 <tcp_receive+0x574>
 8011d76:	4b22      	ldr	r3, [pc, #136]	@ (8011e00 <tcp_receive+0x5f0>)
 8011d78:	f240 5294 	movw	r2, #1428	@ 0x594
 8011d7c:	4921      	ldr	r1, [pc, #132]	@ (8011e04 <tcp_receive+0x5f4>)
 8011d7e:	4822      	ldr	r0, [pc, #136]	@ (8011e08 <tcp_receive+0x5f8>)
 8011d80:	f006 fad0 	bl	8018324 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d86:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d906      	bls.n	8011d9c <tcp_receive+0x58c>
 8011d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8011e00 <tcp_receive+0x5f0>)
 8011d90:	f240 5295 	movw	r2, #1429	@ 0x595
 8011d94:	491d      	ldr	r1, [pc, #116]	@ (8011e0c <tcp_receive+0x5fc>)
 8011d96:	481c      	ldr	r0, [pc, #112]	@ (8011e08 <tcp_receive+0x5f8>)
 8011d98:	f006 fac4 	bl	8018324 <iprintf>
      off = (u16_t)off32;
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011da2:	4b16      	ldr	r3, [pc, #88]	@ (8011dfc <tcp_receive+0x5ec>)
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	891b      	ldrh	r3, [r3, #8]
 8011da8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d906      	bls.n	8011dbe <tcp_receive+0x5ae>
 8011db0:	4b13      	ldr	r3, [pc, #76]	@ (8011e00 <tcp_receive+0x5f0>)
 8011db2:	f240 5297 	movw	r2, #1431	@ 0x597
 8011db6:	4916      	ldr	r1, [pc, #88]	@ (8011e10 <tcp_receive+0x600>)
 8011db8:	4813      	ldr	r0, [pc, #76]	@ (8011e08 <tcp_receive+0x5f8>)
 8011dba:	f006 fab3 	bl	8018324 <iprintf>
      inseg.len -= off;
 8011dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8011dfc <tcp_receive+0x5ec>)
 8011dc0:	891a      	ldrh	r2, [r3, #8]
 8011dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	4b0c      	ldr	r3, [pc, #48]	@ (8011dfc <tcp_receive+0x5ec>)
 8011dcc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011dce:	4b0b      	ldr	r3, [pc, #44]	@ (8011dfc <tcp_receive+0x5ec>)
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	891a      	ldrh	r2, [r3, #8]
 8011dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011ddc:	e02a      	b.n	8011e34 <tcp_receive+0x624>
 8011dde:	bf00      	nop
 8011de0:	0801c7e4 	.word	0x0801c7e4
 8011de4:	0801c7ec 	.word	0x0801c7ec
 8011de8:	2000e104 	.word	0x2000e104
 8011dec:	2000e100 	.word	0x2000e100
 8011df0:	2000e0c4 	.word	0x2000e0c4
 8011df4:	2000e106 	.word	0x2000e106
 8011df8:	2000e0fc 	.word	0x2000e0fc
 8011dfc:	2000e0dc 	.word	0x2000e0dc
 8011e00:	0801c47c 	.word	0x0801c47c
 8011e04:	0801c7f4 	.word	0x0801c7f4
 8011e08:	0801c4c8 	.word	0x0801c4c8
 8011e0c:	0801c804 	.word	0x0801c804
 8011e10:	0801c814 	.word	0x0801c814
        off -= p->len;
 8011e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e16:	895b      	ldrh	r3, [r3, #10]
 8011e18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e24:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011e26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e36:	895b      	ldrh	r3, [r3, #10]
 8011e38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d8e9      	bhi.n	8011e14 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011e40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011e44:	4619      	mov	r1, r3
 8011e46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011e48:	f7fc f89c 	bl	800df84 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e50:	4a90      	ldr	r2, [pc, #576]	@ (8012094 <tcp_receive+0x884>)
 8011e52:	6013      	str	r3, [r2, #0]
 8011e54:	4b90      	ldr	r3, [pc, #576]	@ (8012098 <tcp_receive+0x888>)
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	4a8e      	ldr	r2, [pc, #568]	@ (8012094 <tcp_receive+0x884>)
 8011e5a:	6812      	ldr	r2, [r2, #0]
 8011e5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e5e:	e00d      	b.n	8011e7c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011e60:	4b8c      	ldr	r3, [pc, #560]	@ (8012094 <tcp_receive+0x884>)
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	da06      	bge.n	8011e7c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	8b5b      	ldrh	r3, [r3, #26]
 8011e72:	f043 0302 	orr.w	r3, r3, #2
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e7c:	4b85      	ldr	r3, [pc, #532]	@ (8012094 <tcp_receive+0x884>)
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e84:	1ad3      	subs	r3, r2, r3
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f2c0 8427 	blt.w	80126da <tcp_receive+0xeca>
 8011e8c:	4b81      	ldr	r3, [pc, #516]	@ (8012094 <tcp_receive+0x884>)
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e94:	6879      	ldr	r1, [r7, #4]
 8011e96:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e98:	440b      	add	r3, r1
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f300 841b 	bgt.w	80126da <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ea8:	4b7a      	ldr	r3, [pc, #488]	@ (8012094 <tcp_receive+0x884>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	f040 8298 	bne.w	80123e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011eb2:	4b79      	ldr	r3, [pc, #484]	@ (8012098 <tcp_receive+0x888>)
 8011eb4:	891c      	ldrh	r4, [r3, #8]
 8011eb6:	4b78      	ldr	r3, [pc, #480]	@ (8012098 <tcp_receive+0x888>)
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	899b      	ldrh	r3, [r3, #12]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7fa fd3a 	bl	800c938 <lwip_htons>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	f003 0303 	and.w	r3, r3, #3
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d001      	beq.n	8011ed4 <tcp_receive+0x6c4>
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e000      	b.n	8011ed6 <tcp_receive+0x6c6>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	4423      	add	r3, r4
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	4b70      	ldr	r3, [pc, #448]	@ (801209c <tcp_receive+0x88c>)
 8011edc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ee2:	4b6e      	ldr	r3, [pc, #440]	@ (801209c <tcp_receive+0x88c>)
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d274      	bcs.n	8011fd4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011eea:	4b6b      	ldr	r3, [pc, #428]	@ (8012098 <tcp_receive+0x888>)
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	899b      	ldrh	r3, [r3, #12]
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fa fd20 	bl	800c938 <lwip_htons>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d01e      	beq.n	8011f42 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011f04:	4b64      	ldr	r3, [pc, #400]	@ (8012098 <tcp_receive+0x888>)
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	899b      	ldrh	r3, [r3, #12]
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	b21b      	sxth	r3, r3
 8011f0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011f12:	b21c      	sxth	r4, r3
 8011f14:	4b60      	ldr	r3, [pc, #384]	@ (8012098 <tcp_receive+0x888>)
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	899b      	ldrh	r3, [r3, #12]
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fa fd0b 	bl	800c938 <lwip_htons>
 8011f22:	4603      	mov	r3, r0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fa fd03 	bl	800c938 <lwip_htons>
 8011f32:	4603      	mov	r3, r0
 8011f34:	b21b      	sxth	r3, r3
 8011f36:	4323      	orrs	r3, r4
 8011f38:	b21a      	sxth	r2, r3
 8011f3a:	4b57      	ldr	r3, [pc, #348]	@ (8012098 <tcp_receive+0x888>)
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	b292      	uxth	r2, r2
 8011f40:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011f46:	4b54      	ldr	r3, [pc, #336]	@ (8012098 <tcp_receive+0x888>)
 8011f48:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f4a:	4b53      	ldr	r3, [pc, #332]	@ (8012098 <tcp_receive+0x888>)
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	899b      	ldrh	r3, [r3, #12]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fa fcf0 	bl	800c938 <lwip_htons>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	f003 0302 	and.w	r3, r3, #2
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d005      	beq.n	8011f70 <tcp_receive+0x760>
            inseg.len -= 1;
 8011f64:	4b4c      	ldr	r3, [pc, #304]	@ (8012098 <tcp_receive+0x888>)
 8011f66:	891b      	ldrh	r3, [r3, #8]
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8012098 <tcp_receive+0x888>)
 8011f6e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011f70:	4b49      	ldr	r3, [pc, #292]	@ (8012098 <tcp_receive+0x888>)
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	4a48      	ldr	r2, [pc, #288]	@ (8012098 <tcp_receive+0x888>)
 8011f76:	8912      	ldrh	r2, [r2, #8]
 8011f78:	4611      	mov	r1, r2
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fb ff02 	bl	800dd84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011f80:	4b45      	ldr	r3, [pc, #276]	@ (8012098 <tcp_receive+0x888>)
 8011f82:	891c      	ldrh	r4, [r3, #8]
 8011f84:	4b44      	ldr	r3, [pc, #272]	@ (8012098 <tcp_receive+0x888>)
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	899b      	ldrh	r3, [r3, #12]
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fa fcd3 	bl	800c938 <lwip_htons>
 8011f92:	4603      	mov	r3, r0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	f003 0303 	and.w	r3, r3, #3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d001      	beq.n	8011fa2 <tcp_receive+0x792>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	e000      	b.n	8011fa4 <tcp_receive+0x794>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	4423      	add	r3, r4
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b3c      	ldr	r3, [pc, #240]	@ (801209c <tcp_receive+0x88c>)
 8011faa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011fac:	4b3b      	ldr	r3, [pc, #236]	@ (801209c <tcp_receive+0x88c>)
 8011fae:	881b      	ldrh	r3, [r3, #0]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4b38      	ldr	r3, [pc, #224]	@ (8012094 <tcp_receive+0x884>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	441a      	add	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fbc:	6879      	ldr	r1, [r7, #4]
 8011fbe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011fc0:	440b      	add	r3, r1
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d006      	beq.n	8011fd4 <tcp_receive+0x7c4>
 8011fc6:	4b36      	ldr	r3, [pc, #216]	@ (80120a0 <tcp_receive+0x890>)
 8011fc8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011fcc:	4935      	ldr	r1, [pc, #212]	@ (80120a4 <tcp_receive+0x894>)
 8011fce:	4836      	ldr	r0, [pc, #216]	@ (80120a8 <tcp_receive+0x898>)
 8011fd0:	f006 f9a8 	bl	8018324 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 80e6 	beq.w	80121aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011fde:	4b2e      	ldr	r3, [pc, #184]	@ (8012098 <tcp_receive+0x888>)
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	899b      	ldrh	r3, [r3, #12]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fa fca6 	bl	800c938 <lwip_htons>
 8011fec:	4603      	mov	r3, r0
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d010      	beq.n	801201a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ff8:	e00a      	b.n	8012010 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ffe:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	f7fd fcc5 	bl	800f99a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1f0      	bne.n	8011ffa <tcp_receive+0x7ea>
 8012018:	e0c7      	b.n	80121aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801201e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012020:	e051      	b.n	80120c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	b29b      	uxth	r3, r3
 801202a:	4618      	mov	r0, r3
 801202c:	f7fa fc84 	bl	800c938 <lwip_htons>
 8012030:	4603      	mov	r3, r0
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f003 0301 	and.w	r3, r3, #1
 8012038:	2b00      	cmp	r3, #0
 801203a:	d03c      	beq.n	80120b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801203c:	4b16      	ldr	r3, [pc, #88]	@ (8012098 <tcp_receive+0x888>)
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	899b      	ldrh	r3, [r3, #12]
 8012042:	b29b      	uxth	r3, r3
 8012044:	4618      	mov	r0, r3
 8012046:	f7fa fc77 	bl	800c938 <lwip_htons>
 801204a:	4603      	mov	r3, r0
 801204c:	b2db      	uxtb	r3, r3
 801204e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012052:	2b00      	cmp	r3, #0
 8012054:	d12f      	bne.n	80120b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012056:	4b10      	ldr	r3, [pc, #64]	@ (8012098 <tcp_receive+0x888>)
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	899b      	ldrh	r3, [r3, #12]
 801205c:	b29c      	uxth	r4, r3
 801205e:	2001      	movs	r0, #1
 8012060:	f7fa fc6a 	bl	800c938 <lwip_htons>
 8012064:	4603      	mov	r3, r0
 8012066:	461a      	mov	r2, r3
 8012068:	4b0b      	ldr	r3, [pc, #44]	@ (8012098 <tcp_receive+0x888>)
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	4322      	orrs	r2, r4
 801206e:	b292      	uxth	r2, r2
 8012070:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012072:	4b09      	ldr	r3, [pc, #36]	@ (8012098 <tcp_receive+0x888>)
 8012074:	891c      	ldrh	r4, [r3, #8]
 8012076:	4b08      	ldr	r3, [pc, #32]	@ (8012098 <tcp_receive+0x888>)
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	899b      	ldrh	r3, [r3, #12]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7fa fc5a 	bl	800c938 <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	b2db      	uxtb	r3, r3
 8012088:	f003 0303 	and.w	r3, r3, #3
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00d      	beq.n	80120ac <tcp_receive+0x89c>
 8012090:	2301      	movs	r3, #1
 8012092:	e00c      	b.n	80120ae <tcp_receive+0x89e>
 8012094:	2000e0fc 	.word	0x2000e0fc
 8012098:	2000e0dc 	.word	0x2000e0dc
 801209c:	2000e106 	.word	0x2000e106
 80120a0:	0801c47c 	.word	0x0801c47c
 80120a4:	0801c824 	.word	0x0801c824
 80120a8:	0801c4c8 	.word	0x0801c4c8
 80120ac:	2300      	movs	r3, #0
 80120ae:	4423      	add	r3, r4
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	4b98      	ldr	r3, [pc, #608]	@ (8012314 <tcp_receive+0xb04>)
 80120b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80120b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80120ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80120c0:	6938      	ldr	r0, [r7, #16]
 80120c2:	f7fd fc6a 	bl	800f99a <tcp_seg_free>
            while (next &&
 80120c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d00e      	beq.n	80120ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80120cc:	4b91      	ldr	r3, [pc, #580]	@ (8012314 <tcp_receive+0xb04>)
 80120ce:	881b      	ldrh	r3, [r3, #0]
 80120d0:	461a      	mov	r2, r3
 80120d2:	4b91      	ldr	r3, [pc, #580]	@ (8012318 <tcp_receive+0xb08>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	441a      	add	r2, r3
 80120d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80120e0:	8909      	ldrh	r1, [r1, #8]
 80120e2:	440b      	add	r3, r1
 80120e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	da9b      	bge.n	8012022 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80120ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d059      	beq.n	80121a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80120f0:	4b88      	ldr	r3, [pc, #544]	@ (8012314 <tcp_receive+0xb04>)
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	461a      	mov	r2, r3
 80120f6:	4b88      	ldr	r3, [pc, #544]	@ (8012318 <tcp_receive+0xb08>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	441a      	add	r2, r3
 80120fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012104:	2b00      	cmp	r3, #0
 8012106:	dd4d      	ble.n	80121a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	b29a      	uxth	r2, r3
 8012110:	4b81      	ldr	r3, [pc, #516]	@ (8012318 <tcp_receive+0xb08>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	b29b      	uxth	r3, r3
 8012116:	1ad3      	subs	r3, r2, r3
 8012118:	b29a      	uxth	r2, r3
 801211a:	4b80      	ldr	r3, [pc, #512]	@ (801231c <tcp_receive+0xb0c>)
 801211c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801211e:	4b7f      	ldr	r3, [pc, #508]	@ (801231c <tcp_receive+0xb0c>)
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	899b      	ldrh	r3, [r3, #12]
 8012124:	b29b      	uxth	r3, r3
 8012126:	4618      	mov	r0, r3
 8012128:	f7fa fc06 	bl	800c938 <lwip_htons>
 801212c:	4603      	mov	r3, r0
 801212e:	b2db      	uxtb	r3, r3
 8012130:	f003 0302 	and.w	r3, r3, #2
 8012134:	2b00      	cmp	r3, #0
 8012136:	d005      	beq.n	8012144 <tcp_receive+0x934>
                inseg.len -= 1;
 8012138:	4b78      	ldr	r3, [pc, #480]	@ (801231c <tcp_receive+0xb0c>)
 801213a:	891b      	ldrh	r3, [r3, #8]
 801213c:	3b01      	subs	r3, #1
 801213e:	b29a      	uxth	r2, r3
 8012140:	4b76      	ldr	r3, [pc, #472]	@ (801231c <tcp_receive+0xb0c>)
 8012142:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012144:	4b75      	ldr	r3, [pc, #468]	@ (801231c <tcp_receive+0xb0c>)
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	4a74      	ldr	r2, [pc, #464]	@ (801231c <tcp_receive+0xb0c>)
 801214a:	8912      	ldrh	r2, [r2, #8]
 801214c:	4611      	mov	r1, r2
 801214e:	4618      	mov	r0, r3
 8012150:	f7fb fe18 	bl	800dd84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012154:	4b71      	ldr	r3, [pc, #452]	@ (801231c <tcp_receive+0xb0c>)
 8012156:	891c      	ldrh	r4, [r3, #8]
 8012158:	4b70      	ldr	r3, [pc, #448]	@ (801231c <tcp_receive+0xb0c>)
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	899b      	ldrh	r3, [r3, #12]
 801215e:	b29b      	uxth	r3, r3
 8012160:	4618      	mov	r0, r3
 8012162:	f7fa fbe9 	bl	800c938 <lwip_htons>
 8012166:	4603      	mov	r3, r0
 8012168:	b2db      	uxtb	r3, r3
 801216a:	f003 0303 	and.w	r3, r3, #3
 801216e:	2b00      	cmp	r3, #0
 8012170:	d001      	beq.n	8012176 <tcp_receive+0x966>
 8012172:	2301      	movs	r3, #1
 8012174:	e000      	b.n	8012178 <tcp_receive+0x968>
 8012176:	2300      	movs	r3, #0
 8012178:	4423      	add	r3, r4
 801217a:	b29a      	uxth	r2, r3
 801217c:	4b65      	ldr	r3, [pc, #404]	@ (8012314 <tcp_receive+0xb04>)
 801217e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012180:	4b64      	ldr	r3, [pc, #400]	@ (8012314 <tcp_receive+0xb04>)
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	461a      	mov	r2, r3
 8012186:	4b64      	ldr	r3, [pc, #400]	@ (8012318 <tcp_receive+0xb08>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	441a      	add	r2, r3
 801218c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	429a      	cmp	r2, r3
 8012194:	d006      	beq.n	80121a4 <tcp_receive+0x994>
 8012196:	4b62      	ldr	r3, [pc, #392]	@ (8012320 <tcp_receive+0xb10>)
 8012198:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801219c:	4961      	ldr	r1, [pc, #388]	@ (8012324 <tcp_receive+0xb14>)
 801219e:	4862      	ldr	r0, [pc, #392]	@ (8012328 <tcp_receive+0xb18>)
 80121a0:	f006 f8c0 	bl	8018324 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121a8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80121aa:	4b5a      	ldr	r3, [pc, #360]	@ (8012314 <tcp_receive+0xb04>)
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	461a      	mov	r2, r3
 80121b0:	4b59      	ldr	r3, [pc, #356]	@ (8012318 <tcp_receive+0xb08>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	441a      	add	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80121be:	4b55      	ldr	r3, [pc, #340]	@ (8012314 <tcp_receive+0xb04>)
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d206      	bcs.n	80121d4 <tcp_receive+0x9c4>
 80121c6:	4b56      	ldr	r3, [pc, #344]	@ (8012320 <tcp_receive+0xb10>)
 80121c8:	f240 6207 	movw	r2, #1543	@ 0x607
 80121cc:	4957      	ldr	r1, [pc, #348]	@ (801232c <tcp_receive+0xb1c>)
 80121ce:	4856      	ldr	r0, [pc, #344]	@ (8012328 <tcp_receive+0xb18>)
 80121d0:	f006 f8a8 	bl	8018324 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80121d8:	4b4e      	ldr	r3, [pc, #312]	@ (8012314 <tcp_receive+0xb04>)
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7fc feb1 	bl	800ef4c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80121ea:	4b4c      	ldr	r3, [pc, #304]	@ (801231c <tcp_receive+0xb0c>)
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	891b      	ldrh	r3, [r3, #8]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d006      	beq.n	8012202 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80121f4:	4b49      	ldr	r3, [pc, #292]	@ (801231c <tcp_receive+0xb0c>)
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	4a4d      	ldr	r2, [pc, #308]	@ (8012330 <tcp_receive+0xb20>)
 80121fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80121fc:	4b47      	ldr	r3, [pc, #284]	@ (801231c <tcp_receive+0xb0c>)
 80121fe:	2200      	movs	r2, #0
 8012200:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012202:	4b46      	ldr	r3, [pc, #280]	@ (801231c <tcp_receive+0xb0c>)
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	899b      	ldrh	r3, [r3, #12]
 8012208:	b29b      	uxth	r3, r3
 801220a:	4618      	mov	r0, r3
 801220c:	f7fa fb94 	bl	800c938 <lwip_htons>
 8012210:	4603      	mov	r3, r0
 8012212:	b2db      	uxtb	r3, r3
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 80b8 	beq.w	801238e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801221e:	4b45      	ldr	r3, [pc, #276]	@ (8012334 <tcp_receive+0xb24>)
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	f043 0320 	orr.w	r3, r3, #32
 8012226:	b2da      	uxtb	r2, r3
 8012228:	4b42      	ldr	r3, [pc, #264]	@ (8012334 <tcp_receive+0xb24>)
 801222a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801222c:	e0af      	b.n	801238e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012232:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	4a36      	ldr	r2, [pc, #216]	@ (8012318 <tcp_receive+0xb08>)
 801223e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	891b      	ldrh	r3, [r3, #8]
 8012244:	461c      	mov	r4, r3
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	899b      	ldrh	r3, [r3, #12]
 801224c:	b29b      	uxth	r3, r3
 801224e:	4618      	mov	r0, r3
 8012250:	f7fa fb72 	bl	800c938 <lwip_htons>
 8012254:	4603      	mov	r3, r0
 8012256:	b2db      	uxtb	r3, r3
 8012258:	f003 0303 	and.w	r3, r3, #3
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <tcp_receive+0xa54>
 8012260:	2301      	movs	r3, #1
 8012262:	e000      	b.n	8012266 <tcp_receive+0xa56>
 8012264:	2300      	movs	r3, #0
 8012266:	191a      	adds	r2, r3, r4
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801226c:	441a      	add	r2, r3
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012276:	461c      	mov	r4, r3
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	891b      	ldrh	r3, [r3, #8]
 801227c:	461d      	mov	r5, r3
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	899b      	ldrh	r3, [r3, #12]
 8012284:	b29b      	uxth	r3, r3
 8012286:	4618      	mov	r0, r3
 8012288:	f7fa fb56 	bl	800c938 <lwip_htons>
 801228c:	4603      	mov	r3, r0
 801228e:	b2db      	uxtb	r3, r3
 8012290:	f003 0303 	and.w	r3, r3, #3
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <tcp_receive+0xa8c>
 8012298:	2301      	movs	r3, #1
 801229a:	e000      	b.n	801229e <tcp_receive+0xa8e>
 801229c:	2300      	movs	r3, #0
 801229e:	442b      	add	r3, r5
 80122a0:	429c      	cmp	r4, r3
 80122a2:	d206      	bcs.n	80122b2 <tcp_receive+0xaa2>
 80122a4:	4b1e      	ldr	r3, [pc, #120]	@ (8012320 <tcp_receive+0xb10>)
 80122a6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80122aa:	4923      	ldr	r1, [pc, #140]	@ (8012338 <tcp_receive+0xb28>)
 80122ac:	481e      	ldr	r0, [pc, #120]	@ (8012328 <tcp_receive+0xb18>)
 80122ae:	f006 f839 	bl	8018324 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	891b      	ldrh	r3, [r3, #8]
 80122b6:	461c      	mov	r4, r3
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	899b      	ldrh	r3, [r3, #12]
 80122be:	b29b      	uxth	r3, r3
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fa fb39 	bl	800c938 <lwip_htons>
 80122c6:	4603      	mov	r3, r0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	f003 0303 	and.w	r3, r3, #3
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <tcp_receive+0xac6>
 80122d2:	2301      	movs	r3, #1
 80122d4:	e000      	b.n	80122d8 <tcp_receive+0xac8>
 80122d6:	2300      	movs	r3, #0
 80122d8:	1919      	adds	r1, r3, r4
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80122de:	b28b      	uxth	r3, r1
 80122e0:	1ad3      	subs	r3, r2, r3
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7fc fe2f 	bl	800ef4c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	891b      	ldrh	r3, [r3, #8]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d028      	beq.n	801234a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80122f8:	4b0d      	ldr	r3, [pc, #52]	@ (8012330 <tcp_receive+0xb20>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d01d      	beq.n	801233c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012300:	4b0b      	ldr	r3, [pc, #44]	@ (8012330 <tcp_receive+0xb20>)
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	4619      	mov	r1, r3
 801230a:	4610      	mov	r0, r2
 801230c:	f7fb ff8e 	bl	800e22c <pbuf_cat>
 8012310:	e018      	b.n	8012344 <tcp_receive+0xb34>
 8012312:	bf00      	nop
 8012314:	2000e106 	.word	0x2000e106
 8012318:	2000e0fc 	.word	0x2000e0fc
 801231c:	2000e0dc 	.word	0x2000e0dc
 8012320:	0801c47c 	.word	0x0801c47c
 8012324:	0801c85c 	.word	0x0801c85c
 8012328:	0801c4c8 	.word	0x0801c4c8
 801232c:	0801c898 	.word	0x0801c898
 8012330:	2000e10c 	.word	0x2000e10c
 8012334:	2000e109 	.word	0x2000e109
 8012338:	0801c8b8 	.word	0x0801c8b8
            } else {
              recv_data = cseg->p;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	4a70      	ldr	r2, [pc, #448]	@ (8012504 <tcp_receive+0xcf4>)
 8012342:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2200      	movs	r2, #0
 8012348:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	899b      	ldrh	r3, [r3, #12]
 8012350:	b29b      	uxth	r3, r3
 8012352:	4618      	mov	r0, r3
 8012354:	f7fa faf0 	bl	800c938 <lwip_htons>
 8012358:	4603      	mov	r3, r0
 801235a:	b2db      	uxtb	r3, r3
 801235c:	f003 0301 	and.w	r3, r3, #1
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00d      	beq.n	8012380 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012364:	4b68      	ldr	r3, [pc, #416]	@ (8012508 <tcp_receive+0xcf8>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	f043 0320 	orr.w	r3, r3, #32
 801236c:	b2da      	uxtb	r2, r3
 801236e:	4b66      	ldr	r3, [pc, #408]	@ (8012508 <tcp_receive+0xcf8>)
 8012370:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	7d1b      	ldrb	r3, [r3, #20]
 8012376:	2b04      	cmp	r3, #4
 8012378:	d102      	bne.n	8012380 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2207      	movs	r2, #7
 801237e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012388:	68b8      	ldr	r0, [r7, #8]
 801238a:	f7fd fb06 	bl	800f99a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012392:	2b00      	cmp	r3, #0
 8012394:	d008      	beq.n	80123a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80123a2:	429a      	cmp	r2, r3
 80123a4:	f43f af43 	beq.w	801222e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	8b5b      	ldrh	r3, [r3, #26]
 80123ac:	f003 0301 	and.w	r3, r3, #1
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d00e      	beq.n	80123d2 <tcp_receive+0xbc2>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	8b5b      	ldrh	r3, [r3, #26]
 80123b8:	f023 0301 	bic.w	r3, r3, #1
 80123bc:	b29a      	uxth	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	835a      	strh	r2, [r3, #26]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	8b5b      	ldrh	r3, [r3, #26]
 80123c6:	f043 0302 	orr.w	r3, r3, #2
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123d0:	e187      	b.n	80126e2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	8b5b      	ldrh	r3, [r3, #26]
 80123d6:	f043 0301 	orr.w	r3, r3, #1
 80123da:	b29a      	uxth	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123e0:	e17f      	b.n	80126e2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d106      	bne.n	80123f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80123ea:	4848      	ldr	r0, [pc, #288]	@ (801250c <tcp_receive+0xcfc>)
 80123ec:	f7fd faee 	bl	800f9cc <tcp_seg_copy>
 80123f0:	4602      	mov	r2, r0
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80123f6:	e16c      	b.n	80126d2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80123f8:	2300      	movs	r3, #0
 80123fa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012402:	e156      	b.n	80126b2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8012404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	685a      	ldr	r2, [r3, #4]
 801240a:	4b41      	ldr	r3, [pc, #260]	@ (8012510 <tcp_receive+0xd00>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	429a      	cmp	r2, r3
 8012410:	d11d      	bne.n	801244e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012412:	4b3e      	ldr	r3, [pc, #248]	@ (801250c <tcp_receive+0xcfc>)
 8012414:	891a      	ldrh	r2, [r3, #8]
 8012416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012418:	891b      	ldrh	r3, [r3, #8]
 801241a:	429a      	cmp	r2, r3
 801241c:	f240 814e 	bls.w	80126bc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012420:	483a      	ldr	r0, [pc, #232]	@ (801250c <tcp_receive+0xcfc>)
 8012422:	f7fd fad3 	bl	800f9cc <tcp_seg_copy>
 8012426:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	2b00      	cmp	r3, #0
 801242c:	f000 8148 	beq.w	80126c0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012432:	2b00      	cmp	r3, #0
 8012434:	d003      	beq.n	801243e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012438:	697a      	ldr	r2, [r7, #20]
 801243a:	601a      	str	r2, [r3, #0]
 801243c:	e002      	b.n	8012444 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012444:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012446:	6978      	ldr	r0, [r7, #20]
 8012448:	f7ff f8de 	bl	8011608 <tcp_oos_insert_segment>
                }
                break;
 801244c:	e138      	b.n	80126c0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012450:	2b00      	cmp	r3, #0
 8012452:	d117      	bne.n	8012484 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012454:	4b2e      	ldr	r3, [pc, #184]	@ (8012510 <tcp_receive+0xd00>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	2b00      	cmp	r3, #0
 8012462:	da57      	bge.n	8012514 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012464:	4829      	ldr	r0, [pc, #164]	@ (801250c <tcp_receive+0xcfc>)
 8012466:	f7fd fab1 	bl	800f9cc <tcp_seg_copy>
 801246a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	2b00      	cmp	r3, #0
 8012470:	f000 8128 	beq.w	80126c4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	69ba      	ldr	r2, [r7, #24]
 8012478:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801247a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801247c:	69b8      	ldr	r0, [r7, #24]
 801247e:	f7ff f8c3 	bl	8011608 <tcp_oos_insert_segment>
                  }
                  break;
 8012482:	e11f      	b.n	80126c4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012484:	4b22      	ldr	r3, [pc, #136]	@ (8012510 <tcp_receive+0xd00>)
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	3b01      	subs	r3, #1
 8012492:	2b00      	cmp	r3, #0
 8012494:	db3e      	blt.n	8012514 <tcp_receive+0xd04>
 8012496:	4b1e      	ldr	r3, [pc, #120]	@ (8012510 <tcp_receive+0xd00>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	3301      	adds	r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	dc35      	bgt.n	8012514 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80124a8:	4818      	ldr	r0, [pc, #96]	@ (801250c <tcp_receive+0xcfc>)
 80124aa:	f7fd fa8f 	bl	800f9cc <tcp_seg_copy>
 80124ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 8108 	beq.w	80126c8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80124b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124c0:	8912      	ldrh	r2, [r2, #8]
 80124c2:	441a      	add	r2, r3
 80124c4:	4b12      	ldr	r3, [pc, #72]	@ (8012510 <tcp_receive+0xd00>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	dd12      	ble.n	80124f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80124ce:	4b10      	ldr	r3, [pc, #64]	@ (8012510 <tcp_receive+0xd00>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	b29a      	uxth	r2, r3
 80124e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80124e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124e6:	685a      	ldr	r2, [r3, #4]
 80124e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124ea:	891b      	ldrh	r3, [r3, #8]
 80124ec:	4619      	mov	r1, r3
 80124ee:	4610      	mov	r0, r2
 80124f0:	f7fb fc48 	bl	800dd84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80124f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124f6:	69fa      	ldr	r2, [r7, #28]
 80124f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80124fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80124fc:	69f8      	ldr	r0, [r7, #28]
 80124fe:	f7ff f883 	bl	8011608 <tcp_oos_insert_segment>
                  }
                  break;
 8012502:	e0e1      	b.n	80126c8 <tcp_receive+0xeb8>
 8012504:	2000e10c 	.word	0x2000e10c
 8012508:	2000e109 	.word	0x2000e109
 801250c:	2000e0dc 	.word	0x2000e0dc
 8012510:	2000e0fc 	.word	0x2000e0fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012516:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	f040 80c5 	bne.w	80126ac <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012522:	4b7f      	ldr	r3, [pc, #508]	@ (8012720 <tcp_receive+0xf10>)
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801252e:	2b00      	cmp	r3, #0
 8012530:	f340 80bc 	ble.w	80126ac <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	899b      	ldrh	r3, [r3, #12]
 801253a:	b29b      	uxth	r3, r3
 801253c:	4618      	mov	r0, r3
 801253e:	f7fa f9fb 	bl	800c938 <lwip_htons>
 8012542:	4603      	mov	r3, r0
 8012544:	b2db      	uxtb	r3, r3
 8012546:	f003 0301 	and.w	r3, r3, #1
 801254a:	2b00      	cmp	r3, #0
 801254c:	f040 80be 	bne.w	80126cc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012550:	4874      	ldr	r0, [pc, #464]	@ (8012724 <tcp_receive+0xf14>)
 8012552:	f7fd fa3b 	bl	800f9cc <tcp_seg_copy>
 8012556:	4602      	mov	r2, r0
 8012558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801255c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 80b5 	beq.w	80126d0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801256e:	8912      	ldrh	r2, [r2, #8]
 8012570:	441a      	add	r2, r3
 8012572:	4b6b      	ldr	r3, [pc, #428]	@ (8012720 <tcp_receive+0xf10>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	2b00      	cmp	r3, #0
 801257a:	dd12      	ble.n	80125a2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801257c:	4b68      	ldr	r3, [pc, #416]	@ (8012720 <tcp_receive+0xf10>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	b29a      	uxth	r2, r3
 8012582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	b29b      	uxth	r3, r3
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	b29a      	uxth	r2, r3
 801258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012590:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012598:	891b      	ldrh	r3, [r3, #8]
 801259a:	4619      	mov	r1, r3
 801259c:	4610      	mov	r0, r2
 801259e:	f7fb fbf1 	bl	800dd84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80125a2:	4b61      	ldr	r3, [pc, #388]	@ (8012728 <tcp_receive+0xf18>)
 80125a4:	881b      	ldrh	r3, [r3, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	4b5d      	ldr	r3, [pc, #372]	@ (8012720 <tcp_receive+0xf10>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	441a      	add	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125b2:	6879      	ldr	r1, [r7, #4]
 80125b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80125b6:	440b      	add	r3, r1
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f340 8088 	ble.w	80126d0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80125c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	899b      	ldrh	r3, [r3, #12]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fa f9b4 	bl	800c938 <lwip_htons>
 80125d0:	4603      	mov	r3, r0
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	f003 0301 	and.w	r3, r3, #1
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d021      	beq.n	8012620 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80125dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	899b      	ldrh	r3, [r3, #12]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	b21b      	sxth	r3, r3
 80125e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80125ec:	b21c      	sxth	r4, r3
 80125ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fa f99d 	bl	800c938 <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	b2db      	uxtb	r3, r3
 8012602:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012606:	b29b      	uxth	r3, r3
 8012608:	4618      	mov	r0, r3
 801260a:	f7fa f995 	bl	800c938 <lwip_htons>
 801260e:	4603      	mov	r3, r0
 8012610:	b21b      	sxth	r3, r3
 8012612:	4323      	orrs	r3, r4
 8012614:	b21a      	sxth	r2, r3
 8012616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	b292      	uxth	r2, r2
 801261e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012624:	b29a      	uxth	r2, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801262a:	4413      	add	r3, r2
 801262c:	b299      	uxth	r1, r3
 801262e:	4b3c      	ldr	r3, [pc, #240]	@ (8012720 <tcp_receive+0xf10>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	b29a      	uxth	r2, r3
 8012634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	1a8a      	subs	r2, r1, r2
 801263a:	b292      	uxth	r2, r2
 801263c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	891b      	ldrh	r3, [r3, #8]
 801264a:	4619      	mov	r1, r3
 801264c:	4610      	mov	r0, r2
 801264e:	f7fb fb99 	bl	800dd84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	891c      	ldrh	r4, [r3, #8]
 8012658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	899b      	ldrh	r3, [r3, #12]
 8012660:	b29b      	uxth	r3, r3
 8012662:	4618      	mov	r0, r3
 8012664:	f7fa f968 	bl	800c938 <lwip_htons>
 8012668:	4603      	mov	r3, r0
 801266a:	b2db      	uxtb	r3, r3
 801266c:	f003 0303 	and.w	r3, r3, #3
 8012670:	2b00      	cmp	r3, #0
 8012672:	d001      	beq.n	8012678 <tcp_receive+0xe68>
 8012674:	2301      	movs	r3, #1
 8012676:	e000      	b.n	801267a <tcp_receive+0xe6a>
 8012678:	2300      	movs	r3, #0
 801267a:	4423      	add	r3, r4
 801267c:	b29a      	uxth	r2, r3
 801267e:	4b2a      	ldr	r3, [pc, #168]	@ (8012728 <tcp_receive+0xf18>)
 8012680:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012682:	4b29      	ldr	r3, [pc, #164]	@ (8012728 <tcp_receive+0xf18>)
 8012684:	881b      	ldrh	r3, [r3, #0]
 8012686:	461a      	mov	r2, r3
 8012688:	4b25      	ldr	r3, [pc, #148]	@ (8012720 <tcp_receive+0xf10>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	441a      	add	r2, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012692:	6879      	ldr	r1, [r7, #4]
 8012694:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012696:	440b      	add	r3, r1
 8012698:	429a      	cmp	r2, r3
 801269a:	d019      	beq.n	80126d0 <tcp_receive+0xec0>
 801269c:	4b23      	ldr	r3, [pc, #140]	@ (801272c <tcp_receive+0xf1c>)
 801269e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80126a2:	4923      	ldr	r1, [pc, #140]	@ (8012730 <tcp_receive+0xf20>)
 80126a4:	4823      	ldr	r0, [pc, #140]	@ (8012734 <tcp_receive+0xf24>)
 80126a6:	f005 fe3d 	bl	8018324 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80126aa:	e011      	b.n	80126d0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80126ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f47f aea5 	bne.w	8012404 <tcp_receive+0xbf4>
 80126ba:	e00a      	b.n	80126d2 <tcp_receive+0xec2>
                break;
 80126bc:	bf00      	nop
 80126be:	e008      	b.n	80126d2 <tcp_receive+0xec2>
                break;
 80126c0:	bf00      	nop
 80126c2:	e006      	b.n	80126d2 <tcp_receive+0xec2>
                  break;
 80126c4:	bf00      	nop
 80126c6:	e004      	b.n	80126d2 <tcp_receive+0xec2>
                  break;
 80126c8:	bf00      	nop
 80126ca:	e002      	b.n	80126d2 <tcp_receive+0xec2>
                  break;
 80126cc:	bf00      	nop
 80126ce:	e000      	b.n	80126d2 <tcp_receive+0xec2>
                break;
 80126d0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f001 fe88 	bl	80143e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80126d8:	e003      	b.n	80126e2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f001 fe84 	bl	80143e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126e0:	e01a      	b.n	8012718 <tcp_receive+0xf08>
 80126e2:	e019      	b.n	8012718 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80126e4:	4b0e      	ldr	r3, [pc, #56]	@ (8012720 <tcp_receive+0xf10>)
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126ec:	1ad3      	subs	r3, r2, r3
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	db0a      	blt.n	8012708 <tcp_receive+0xef8>
 80126f2:	4b0b      	ldr	r3, [pc, #44]	@ (8012720 <tcp_receive+0xf10>)
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80126fe:	440b      	add	r3, r1
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	3301      	adds	r3, #1
 8012704:	2b00      	cmp	r3, #0
 8012706:	dd07      	ble.n	8012718 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	8b5b      	ldrh	r3, [r3, #26]
 801270c:	f043 0302 	orr.w	r3, r3, #2
 8012710:	b29a      	uxth	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012716:	e7ff      	b.n	8012718 <tcp_receive+0xf08>
 8012718:	bf00      	nop
 801271a:	3750      	adds	r7, #80	@ 0x50
 801271c:	46bd      	mov	sp, r7
 801271e:	bdb0      	pop	{r4, r5, r7, pc}
 8012720:	2000e0fc 	.word	0x2000e0fc
 8012724:	2000e0dc 	.word	0x2000e0dc
 8012728:	2000e106 	.word	0x2000e106
 801272c:	0801c47c 	.word	0x0801c47c
 8012730:	0801c824 	.word	0x0801c824
 8012734:	0801c4c8 	.word	0x0801c4c8

08012738 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801273e:	4b15      	ldr	r3, [pc, #84]	@ (8012794 <tcp_get_next_optbyte+0x5c>)
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	b291      	uxth	r1, r2
 8012746:	4a13      	ldr	r2, [pc, #76]	@ (8012794 <tcp_get_next_optbyte+0x5c>)
 8012748:	8011      	strh	r1, [r2, #0]
 801274a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801274c:	4b12      	ldr	r3, [pc, #72]	@ (8012798 <tcp_get_next_optbyte+0x60>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d004      	beq.n	801275e <tcp_get_next_optbyte+0x26>
 8012754:	4b11      	ldr	r3, [pc, #68]	@ (801279c <tcp_get_next_optbyte+0x64>)
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	88fa      	ldrh	r2, [r7, #6]
 801275a:	429a      	cmp	r2, r3
 801275c:	d208      	bcs.n	8012770 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801275e:	4b10      	ldr	r3, [pc, #64]	@ (80127a0 <tcp_get_next_optbyte+0x68>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3314      	adds	r3, #20
 8012764:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012766:	88fb      	ldrh	r3, [r7, #6]
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	4413      	add	r3, r2
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	e00b      	b.n	8012788 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012770:	88fb      	ldrh	r3, [r7, #6]
 8012772:	b2da      	uxtb	r2, r3
 8012774:	4b09      	ldr	r3, [pc, #36]	@ (801279c <tcp_get_next_optbyte+0x64>)
 8012776:	881b      	ldrh	r3, [r3, #0]
 8012778:	b2db      	uxtb	r3, r3
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801277e:	4b06      	ldr	r3, [pc, #24]	@ (8012798 <tcp_get_next_optbyte+0x60>)
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	797b      	ldrb	r3, [r7, #5]
 8012784:	4413      	add	r3, r2
 8012786:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012788:	4618      	mov	r0, r3
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	2000e0f8 	.word	0x2000e0f8
 8012798:	2000e0f4 	.word	0x2000e0f4
 801279c:	2000e0f2 	.word	0x2000e0f2
 80127a0:	2000e0ec 	.word	0x2000e0ec

080127a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_parseopt+0x1c>
 80127b2:	4b32      	ldr	r3, [pc, #200]	@ (801287c <tcp_parseopt+0xd8>)
 80127b4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80127b8:	4931      	ldr	r1, [pc, #196]	@ (8012880 <tcp_parseopt+0xdc>)
 80127ba:	4832      	ldr	r0, [pc, #200]	@ (8012884 <tcp_parseopt+0xe0>)
 80127bc:	f005 fdb2 	bl	8018324 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80127c0:	4b31      	ldr	r3, [pc, #196]	@ (8012888 <tcp_parseopt+0xe4>)
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d056      	beq.n	8012876 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80127c8:	4b30      	ldr	r3, [pc, #192]	@ (801288c <tcp_parseopt+0xe8>)
 80127ca:	2200      	movs	r2, #0
 80127cc:	801a      	strh	r2, [r3, #0]
 80127ce:	e046      	b.n	801285e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80127d0:	f7ff ffb2 	bl	8012738 <tcp_get_next_optbyte>
 80127d4:	4603      	mov	r3, r0
 80127d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80127d8:	7bfb      	ldrb	r3, [r7, #15]
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d006      	beq.n	80127ec <tcp_parseopt+0x48>
 80127de:	2b02      	cmp	r3, #2
 80127e0:	dc2a      	bgt.n	8012838 <tcp_parseopt+0x94>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d042      	beq.n	801286c <tcp_parseopt+0xc8>
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d038      	beq.n	801285c <tcp_parseopt+0xb8>
 80127ea:	e025      	b.n	8012838 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80127ec:	f7ff ffa4 	bl	8012738 <tcp_get_next_optbyte>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b04      	cmp	r3, #4
 80127f4:	d13c      	bne.n	8012870 <tcp_parseopt+0xcc>
 80127f6:	4b25      	ldr	r3, [pc, #148]	@ (801288c <tcp_parseopt+0xe8>)
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	3301      	adds	r3, #1
 80127fc:	4a22      	ldr	r2, [pc, #136]	@ (8012888 <tcp_parseopt+0xe4>)
 80127fe:	8812      	ldrh	r2, [r2, #0]
 8012800:	4293      	cmp	r3, r2
 8012802:	da35      	bge.n	8012870 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012804:	f7ff ff98 	bl	8012738 <tcp_get_next_optbyte>
 8012808:	4603      	mov	r3, r0
 801280a:	021b      	lsls	r3, r3, #8
 801280c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801280e:	f7ff ff93 	bl	8012738 <tcp_get_next_optbyte>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	89bb      	ldrh	r3, [r7, #12]
 8012818:	4313      	orrs	r3, r2
 801281a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801281c:	89bb      	ldrh	r3, [r7, #12]
 801281e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012822:	d804      	bhi.n	801282e <tcp_parseopt+0x8a>
 8012824:	89bb      	ldrh	r3, [r7, #12]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <tcp_parseopt+0x8a>
 801282a:	89ba      	ldrh	r2, [r7, #12]
 801282c:	e001      	b.n	8012832 <tcp_parseopt+0x8e>
 801282e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012836:	e012      	b.n	801285e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012838:	f7ff ff7e 	bl	8012738 <tcp_get_next_optbyte>
 801283c:	4603      	mov	r3, r0
 801283e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012840:	7afb      	ldrb	r3, [r7, #11]
 8012842:	2b01      	cmp	r3, #1
 8012844:	d916      	bls.n	8012874 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012846:	7afb      	ldrb	r3, [r7, #11]
 8012848:	b29a      	uxth	r2, r3
 801284a:	4b10      	ldr	r3, [pc, #64]	@ (801288c <tcp_parseopt+0xe8>)
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	4413      	add	r3, r2
 8012850:	b29b      	uxth	r3, r3
 8012852:	3b02      	subs	r3, #2
 8012854:	b29a      	uxth	r2, r3
 8012856:	4b0d      	ldr	r3, [pc, #52]	@ (801288c <tcp_parseopt+0xe8>)
 8012858:	801a      	strh	r2, [r3, #0]
 801285a:	e000      	b.n	801285e <tcp_parseopt+0xba>
          break;
 801285c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801285e:	4b0b      	ldr	r3, [pc, #44]	@ (801288c <tcp_parseopt+0xe8>)
 8012860:	881a      	ldrh	r2, [r3, #0]
 8012862:	4b09      	ldr	r3, [pc, #36]	@ (8012888 <tcp_parseopt+0xe4>)
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	429a      	cmp	r2, r3
 8012868:	d3b2      	bcc.n	80127d0 <tcp_parseopt+0x2c>
 801286a:	e004      	b.n	8012876 <tcp_parseopt+0xd2>
          return;
 801286c:	bf00      	nop
 801286e:	e002      	b.n	8012876 <tcp_parseopt+0xd2>
            return;
 8012870:	bf00      	nop
 8012872:	e000      	b.n	8012876 <tcp_parseopt+0xd2>
            return;
 8012874:	bf00      	nop
      }
    }
  }
}
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	0801c47c 	.word	0x0801c47c
 8012880:	0801c8e0 	.word	0x0801c8e0
 8012884:	0801c4c8 	.word	0x0801c4c8
 8012888:	2000e0f0 	.word	0x2000e0f0
 801288c:	2000e0f8 	.word	0x2000e0f8

08012890 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012890:	b480      	push	{r7}
 8012892:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012894:	4b05      	ldr	r3, [pc, #20]	@ (80128ac <tcp_trigger_input_pcb_close+0x1c>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	f043 0310 	orr.w	r3, r3, #16
 801289c:	b2da      	uxtb	r2, r3
 801289e:	4b03      	ldr	r3, [pc, #12]	@ (80128ac <tcp_trigger_input_pcb_close+0x1c>)
 80128a0:	701a      	strb	r2, [r3, #0]
}
 80128a2:	bf00      	nop
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	2000e109 	.word	0x2000e109

080128b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	60b9      	str	r1, [r7, #8]
 80128ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00a      	beq.n	80128d8 <tcp_route+0x28>
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	7a1b      	ldrb	r3, [r3, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d006      	beq.n	80128d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	7a1b      	ldrb	r3, [r3, #8]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fb f850 	bl	800d974 <netif_get_by_index>
 80128d4:	4603      	mov	r3, r0
 80128d6:	e003      	b.n	80128e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f003 fc49 	bl	8016170 <ip4_route>
 80128de:	4603      	mov	r3, r0
  }
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80128e8:	b590      	push	{r4, r7, lr}
 80128ea:	b087      	sub	sp, #28
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	603b      	str	r3, [r7, #0]
 80128f4:	4613      	mov	r3, r2
 80128f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d105      	bne.n	801290a <tcp_create_segment+0x22>
 80128fe:	4b43      	ldr	r3, [pc, #268]	@ (8012a0c <tcp_create_segment+0x124>)
 8012900:	22a3      	movs	r2, #163	@ 0xa3
 8012902:	4943      	ldr	r1, [pc, #268]	@ (8012a10 <tcp_create_segment+0x128>)
 8012904:	4843      	ldr	r0, [pc, #268]	@ (8012a14 <tcp_create_segment+0x12c>)
 8012906:	f005 fd0d 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d105      	bne.n	801291c <tcp_create_segment+0x34>
 8012910:	4b3e      	ldr	r3, [pc, #248]	@ (8012a0c <tcp_create_segment+0x124>)
 8012912:	22a4      	movs	r2, #164	@ 0xa4
 8012914:	4940      	ldr	r1, [pc, #256]	@ (8012a18 <tcp_create_segment+0x130>)
 8012916:	483f      	ldr	r0, [pc, #252]	@ (8012a14 <tcp_create_segment+0x12c>)
 8012918:	f005 fd04 	bl	8018324 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801291c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012920:	009b      	lsls	r3, r3, #2
 8012922:	b2db      	uxtb	r3, r3
 8012924:	f003 0304 	and.w	r3, r3, #4
 8012928:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801292a:	2003      	movs	r0, #3
 801292c:	f7fa fcba 	bl	800d2a4 <memp_malloc>
 8012930:	6138      	str	r0, [r7, #16]
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d104      	bne.n	8012942 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012938:	68b8      	ldr	r0, [r7, #8]
 801293a:	f7fb fba9 	bl	800e090 <pbuf_free>
    return NULL;
 801293e:	2300      	movs	r3, #0
 8012940:	e060      	b.n	8012a04 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012948:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	2200      	movs	r2, #0
 801294e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	68ba      	ldr	r2, [r7, #8]
 8012954:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	891a      	ldrh	r2, [r3, #8]
 801295a:	7dfb      	ldrb	r3, [r7, #23]
 801295c:	b29b      	uxth	r3, r3
 801295e:	429a      	cmp	r2, r3
 8012960:	d205      	bcs.n	801296e <tcp_create_segment+0x86>
 8012962:	4b2a      	ldr	r3, [pc, #168]	@ (8012a0c <tcp_create_segment+0x124>)
 8012964:	22b0      	movs	r2, #176	@ 0xb0
 8012966:	492d      	ldr	r1, [pc, #180]	@ (8012a1c <tcp_create_segment+0x134>)
 8012968:	482a      	ldr	r0, [pc, #168]	@ (8012a14 <tcp_create_segment+0x12c>)
 801296a:	f005 fcdb 	bl	8018324 <iprintf>
  seg->len = p->tot_len - optlen;
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	891a      	ldrh	r2, [r3, #8]
 8012972:	7dfb      	ldrb	r3, [r7, #23]
 8012974:	b29b      	uxth	r3, r3
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	b29a      	uxth	r2, r3
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801297e:	2114      	movs	r1, #20
 8012980:	68b8      	ldr	r0, [r7, #8]
 8012982:	f7fb faef 	bl	800df64 <pbuf_add_header>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d004      	beq.n	8012996 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801298c:	6938      	ldr	r0, [r7, #16]
 801298e:	f7fd f804 	bl	800f99a <tcp_seg_free>
    return NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	e036      	b.n	8012a04 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	8ada      	ldrh	r2, [r3, #22]
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	68dc      	ldr	r4, [r3, #12]
 80129a8:	4610      	mov	r0, r2
 80129aa:	f7f9 ffc5 	bl	800c938 <lwip_htons>
 80129ae:	4603      	mov	r3, r0
 80129b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	8b1a      	ldrh	r2, [r3, #24]
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	68dc      	ldr	r4, [r3, #12]
 80129ba:	4610      	mov	r0, r2
 80129bc:	f7f9 ffbc 	bl	800c938 <lwip_htons>
 80129c0:	4603      	mov	r3, r0
 80129c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	68dc      	ldr	r4, [r3, #12]
 80129c8:	6838      	ldr	r0, [r7, #0]
 80129ca:	f7f9 ffca 	bl	800c962 <lwip_htonl>
 80129ce:	4603      	mov	r3, r0
 80129d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80129d2:	7dfb      	ldrb	r3, [r7, #23]
 80129d4:	089b      	lsrs	r3, r3, #2
 80129d6:	b2db      	uxtb	r3, r3
 80129d8:	3305      	adds	r3, #5
 80129da:	b29b      	uxth	r3, r3
 80129dc:	031b      	lsls	r3, r3, #12
 80129de:	b29a      	uxth	r2, r3
 80129e0:	79fb      	ldrb	r3, [r7, #7]
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	4313      	orrs	r3, r2
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	68dc      	ldr	r4, [r3, #12]
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7f9 ffa3 	bl	800c938 <lwip_htons>
 80129f2:	4603      	mov	r3, r0
 80129f4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	749a      	strb	r2, [r3, #18]
 80129fe:	2200      	movs	r2, #0
 8012a00:	74da      	strb	r2, [r3, #19]
  return seg;
 8012a02:	693b      	ldr	r3, [r7, #16]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	371c      	adds	r7, #28
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd90      	pop	{r4, r7, pc}
 8012a0c:	0801c8fc 	.word	0x0801c8fc
 8012a10:	0801c930 	.word	0x0801c930
 8012a14:	0801c950 	.word	0x0801c950
 8012a18:	0801c978 	.word	0x0801c978
 8012a1c:	0801c99c 	.word	0x0801c99c

08012a20 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	607b      	str	r3, [r7, #4]
 8012a28:	4603      	mov	r3, r0
 8012a2a:	73fb      	strb	r3, [r7, #15]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	81bb      	strh	r3, [r7, #12]
 8012a30:	4613      	mov	r3, r2
 8012a32:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012a34:	89bb      	ldrh	r3, [r7, #12]
 8012a36:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d105      	bne.n	8012a4a <tcp_pbuf_prealloc+0x2a>
 8012a3e:	4b30      	ldr	r3, [pc, #192]	@ (8012b00 <tcp_pbuf_prealloc+0xe0>)
 8012a40:	22e8      	movs	r2, #232	@ 0xe8
 8012a42:	4930      	ldr	r1, [pc, #192]	@ (8012b04 <tcp_pbuf_prealloc+0xe4>)
 8012a44:	4830      	ldr	r0, [pc, #192]	@ (8012b08 <tcp_pbuf_prealloc+0xe8>)
 8012a46:	f005 fc6d 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d105      	bne.n	8012a5c <tcp_pbuf_prealloc+0x3c>
 8012a50:	4b2b      	ldr	r3, [pc, #172]	@ (8012b00 <tcp_pbuf_prealloc+0xe0>)
 8012a52:	22e9      	movs	r2, #233	@ 0xe9
 8012a54:	492d      	ldr	r1, [pc, #180]	@ (8012b0c <tcp_pbuf_prealloc+0xec>)
 8012a56:	482c      	ldr	r0, [pc, #176]	@ (8012b08 <tcp_pbuf_prealloc+0xe8>)
 8012a58:	f005 fc64 	bl	8018324 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012a5c:	89ba      	ldrh	r2, [r7, #12]
 8012a5e:	897b      	ldrh	r3, [r7, #10]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d221      	bcs.n	8012aa8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012a64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012a68:	f003 0302 	and.w	r3, r3, #2
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d111      	bne.n	8012a94 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012a70:	6a3b      	ldr	r3, [r7, #32]
 8012a72:	8b5b      	ldrh	r3, [r3, #26]
 8012a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d115      	bne.n	8012aa8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d007      	beq.n	8012a94 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012a84:	6a3b      	ldr	r3, [r7, #32]
 8012a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d103      	bne.n	8012a94 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012a8c:	6a3b      	ldr	r3, [r7, #32]
 8012a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d009      	beq.n	8012aa8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012a94:	89bb      	ldrh	r3, [r7, #12]
 8012a96:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8012a9a:	f023 0203 	bic.w	r2, r3, #3
 8012a9e:	897b      	ldrh	r3, [r7, #10]
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	bf28      	it	cs
 8012aa4:	4613      	movcs	r3, r2
 8012aa6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012aa8:	8af9      	ldrh	r1, [r7, #22]
 8012aaa:	7bfb      	ldrb	r3, [r7, #15]
 8012aac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fb f809 	bl	800dac8 <pbuf_alloc>
 8012ab6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e019      	b.n	8012af6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d006      	beq.n	8012ad8 <tcp_pbuf_prealloc+0xb8>
 8012aca:	4b0d      	ldr	r3, [pc, #52]	@ (8012b00 <tcp_pbuf_prealloc+0xe0>)
 8012acc:	f240 120b 	movw	r2, #267	@ 0x10b
 8012ad0:	490f      	ldr	r1, [pc, #60]	@ (8012b10 <tcp_pbuf_prealloc+0xf0>)
 8012ad2:	480d      	ldr	r0, [pc, #52]	@ (8012b08 <tcp_pbuf_prealloc+0xe8>)
 8012ad4:	f005 fc26 	bl	8018324 <iprintf>
  *oversize = p->len - length;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	895a      	ldrh	r2, [r3, #10]
 8012adc:	89bb      	ldrh	r3, [r7, #12]
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012ae6:	693b      	ldr	r3, [r7, #16]
 8012ae8:	89ba      	ldrh	r2, [r7, #12]
 8012aea:	811a      	strh	r2, [r3, #8]
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	891a      	ldrh	r2, [r3, #8]
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	815a      	strh	r2, [r3, #10]
  return p;
 8012af4:	693b      	ldr	r3, [r7, #16]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	0801c8fc 	.word	0x0801c8fc
 8012b04:	0801c9b4 	.word	0x0801c9b4
 8012b08:	0801c950 	.word	0x0801c950
 8012b0c:	0801c9d8 	.word	0x0801c9d8
 8012b10:	0801c9f8 	.word	0x0801c9f8

08012b14 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d106      	bne.n	8012b34 <tcp_write_checks+0x20>
 8012b26:	4b33      	ldr	r3, [pc, #204]	@ (8012bf4 <tcp_write_checks+0xe0>)
 8012b28:	f240 1233 	movw	r2, #307	@ 0x133
 8012b2c:	4932      	ldr	r1, [pc, #200]	@ (8012bf8 <tcp_write_checks+0xe4>)
 8012b2e:	4833      	ldr	r0, [pc, #204]	@ (8012bfc <tcp_write_checks+0xe8>)
 8012b30:	f005 fbf8 	bl	8018324 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	7d1b      	ldrb	r3, [r3, #20]
 8012b38:	2b04      	cmp	r3, #4
 8012b3a:	d00e      	beq.n	8012b5a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012b40:	2b07      	cmp	r3, #7
 8012b42:	d00a      	beq.n	8012b5a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012b48:	2b02      	cmp	r3, #2
 8012b4a:	d006      	beq.n	8012b5a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012b50:	2b03      	cmp	r3, #3
 8012b52:	d002      	beq.n	8012b5a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012b54:	f06f 030a 	mvn.w	r3, #10
 8012b58:	e048      	b.n	8012bec <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012b5a:	887b      	ldrh	r3, [r7, #2]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d101      	bne.n	8012b64 <tcp_write_checks+0x50>
    return ERR_OK;
 8012b60:	2300      	movs	r3, #0
 8012b62:	e043      	b.n	8012bec <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b6a:	887a      	ldrh	r2, [r7, #2]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d909      	bls.n	8012b84 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	8b5b      	ldrh	r3, [r3, #26]
 8012b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b82:	e033      	b.n	8012bec <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012b8a:	2b08      	cmp	r3, #8
 8012b8c:	d909      	bls.n	8012ba2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	8b5b      	ldrh	r3, [r3, #26]
 8012b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba0:	e024      	b.n	8012bec <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d00f      	beq.n	8012bcc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d11a      	bne.n	8012bea <tcp_write_checks+0xd6>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d116      	bne.n	8012bea <tcp_write_checks+0xd6>
 8012bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8012bf4 <tcp_write_checks+0xe0>)
 8012bbe:	f240 1255 	movw	r2, #341	@ 0x155
 8012bc2:	490f      	ldr	r1, [pc, #60]	@ (8012c00 <tcp_write_checks+0xec>)
 8012bc4:	480d      	ldr	r0, [pc, #52]	@ (8012bfc <tcp_write_checks+0xe8>)
 8012bc6:	f005 fbad 	bl	8018324 <iprintf>
 8012bca:	e00e      	b.n	8012bea <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d103      	bne.n	8012bdc <tcp_write_checks+0xc8>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <tcp_write_checks+0xd6>
 8012bdc:	4b05      	ldr	r3, [pc, #20]	@ (8012bf4 <tcp_write_checks+0xe0>)
 8012bde:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8012be2:	4908      	ldr	r1, [pc, #32]	@ (8012c04 <tcp_write_checks+0xf0>)
 8012be4:	4805      	ldr	r0, [pc, #20]	@ (8012bfc <tcp_write_checks+0xe8>)
 8012be6:	f005 fb9d 	bl	8018324 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012bea:	2300      	movs	r3, #0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	0801c8fc 	.word	0x0801c8fc
 8012bf8:	0801ca0c 	.word	0x0801ca0c
 8012bfc:	0801c950 	.word	0x0801c950
 8012c00:	0801ca2c 	.word	0x0801ca2c
 8012c04:	0801ca68 	.word	0x0801ca68

08012c08 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012c08:	b590      	push	{r4, r7, lr}
 8012c0a:	b09b      	sub	sp, #108	@ 0x6c
 8012c0c:	af04      	add	r7, sp, #16
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	4611      	mov	r1, r2
 8012c14:	461a      	mov	r2, r3
 8012c16:	460b      	mov	r3, r1
 8012c18:	80fb      	strh	r3, [r7, #6]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012c22:	2300      	movs	r3, #0
 8012c24:	653b      	str	r3, [r7, #80]	@ 0x50
 8012c26:	2300      	movs	r3, #0
 8012c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012c2e:	2300      	movs	r3, #0
 8012c30:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012c32:	2300      	movs	r3, #0
 8012c34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012c46:	2300      	movs	r3, #0
 8012c48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d109      	bne.n	8012c64 <tcp_write+0x5c>
 8012c50:	4ba4      	ldr	r3, [pc, #656]	@ (8012ee4 <tcp_write+0x2dc>)
 8012c52:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8012c56:	49a4      	ldr	r1, [pc, #656]	@ (8012ee8 <tcp_write+0x2e0>)
 8012c58:	48a4      	ldr	r0, [pc, #656]	@ (8012eec <tcp_write+0x2e4>)
 8012c5a:	f005 fb63 	bl	8018324 <iprintf>
 8012c5e:	f06f 030f 	mvn.w	r3, #15
 8012c62:	e32a      	b.n	80132ba <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012c6a:	085b      	lsrs	r3, r3, #1
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c72:	4293      	cmp	r3, r2
 8012c74:	bf28      	it	cs
 8012c76:	4613      	movcs	r3, r2
 8012c78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012c7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <tcp_write+0x7e>
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c84:	e000      	b.n	8012c88 <tcp_write+0x80>
 8012c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c88:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d109      	bne.n	8012ca4 <tcp_write+0x9c>
 8012c90:	4b94      	ldr	r3, [pc, #592]	@ (8012ee4 <tcp_write+0x2dc>)
 8012c92:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8012c96:	4996      	ldr	r1, [pc, #600]	@ (8012ef0 <tcp_write+0x2e8>)
 8012c98:	4894      	ldr	r0, [pc, #592]	@ (8012eec <tcp_write+0x2e4>)
 8012c9a:	f005 fb43 	bl	8018324 <iprintf>
 8012c9e:	f06f 030f 	mvn.w	r3, #15
 8012ca2:	e30a      	b.n	80132ba <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	68f8      	ldr	r0, [r7, #12]
 8012caa:	f7ff ff33 	bl	8012b14 <tcp_write_checks>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8012cb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d002      	beq.n	8012cc2 <tcp_write+0xba>
    return err;
 8012cbc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012cc0:	e2fb      	b.n	80132ba <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012cc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 80f6 	beq.w	8012ec8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ce2:	e002      	b.n	8012cea <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d1f8      	bne.n	8012ce4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cf4:	7a9b      	ldrb	r3, [r3, #10]
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	f003 0304 	and.w	r3, r3, #4
 8012cfe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012d00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d04:	891b      	ldrh	r3, [r3, #8]
 8012d06:	4619      	mov	r1, r3
 8012d08:	8c3b      	ldrh	r3, [r7, #32]
 8012d0a:	440b      	add	r3, r1
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	da06      	bge.n	8012d1e <tcp_write+0x116>
 8012d10:	4b74      	ldr	r3, [pc, #464]	@ (8012ee4 <tcp_write+0x2dc>)
 8012d12:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012d16:	4977      	ldr	r1, [pc, #476]	@ (8012ef4 <tcp_write+0x2ec>)
 8012d18:	4874      	ldr	r0, [pc, #464]	@ (8012eec <tcp_write+0x2e4>)
 8012d1a:	f005 fb03 	bl	8018324 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d20:	891a      	ldrh	r2, [r3, #8]
 8012d22:	8c3b      	ldrh	r3, [r7, #32]
 8012d24:	4413      	add	r3, r2
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012d34:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012d36:	8a7b      	ldrh	r3, [r7, #18]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d026      	beq.n	8012d8a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012d3c:	8a7b      	ldrh	r3, [r7, #18]
 8012d3e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d206      	bcs.n	8012d52 <tcp_write+0x14a>
 8012d44:	4b67      	ldr	r3, [pc, #412]	@ (8012ee4 <tcp_write+0x2dc>)
 8012d46:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8012d4a:	496b      	ldr	r1, [pc, #428]	@ (8012ef8 <tcp_write+0x2f0>)
 8012d4c:	4867      	ldr	r0, [pc, #412]	@ (8012eec <tcp_write+0x2e4>)
 8012d4e:	f005 fae9 	bl	8018324 <iprintf>
      seg = last_unsent;
 8012d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012d56:	8a7b      	ldrh	r3, [r7, #18]
 8012d58:	88fa      	ldrh	r2, [r7, #6]
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	bf28      	it	cs
 8012d5e:	4613      	movcs	r3, r2
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012d64:	4293      	cmp	r3, r2
 8012d66:	bf28      	it	cs
 8012d68:	4613      	movcs	r3, r2
 8012d6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8012d6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012d70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012d72:	4413      	add	r3, r2
 8012d74:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8012d78:	8a7a      	ldrh	r2, [r7, #18]
 8012d7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012d7c:	1ad3      	subs	r3, r2, r3
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012d82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012d84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012d86:	1ad3      	subs	r3, r2, r3
 8012d88:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012d8a:	8a7b      	ldrh	r3, [r7, #18]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d00b      	beq.n	8012da8 <tcp_write+0x1a0>
 8012d90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012d94:	88fb      	ldrh	r3, [r7, #6]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d006      	beq.n	8012da8 <tcp_write+0x1a0>
 8012d9a:	4b52      	ldr	r3, [pc, #328]	@ (8012ee4 <tcp_write+0x2dc>)
 8012d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012da0:	4956      	ldr	r1, [pc, #344]	@ (8012efc <tcp_write+0x2f4>)
 8012da2:	4852      	ldr	r0, [pc, #328]	@ (8012eec <tcp_write+0x2e4>)
 8012da4:	f005 fabe 	bl	8018324 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012da8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012dac:	88fb      	ldrh	r3, [r7, #6]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	f080 8167 	bcs.w	8013082 <tcp_write+0x47a>
 8012db4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	f000 8163 	beq.w	8013082 <tcp_write+0x47a>
 8012dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dbe:	891b      	ldrh	r3, [r3, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f000 815e 	beq.w	8013082 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012dc6:	88fa      	ldrh	r2, [r7, #6]
 8012dc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012dcc:	1ad2      	subs	r2, r2, r3
 8012dce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	bfa8      	it	ge
 8012dd4:	4613      	movge	r3, r2
 8012dd6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dda:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012ddc:	797b      	ldrb	r3, [r7, #5]
 8012dde:	f003 0301 	and.w	r3, r3, #1
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d027      	beq.n	8012e36 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012de6:	f107 0012 	add.w	r0, r7, #18
 8012dea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012dec:	8bf9      	ldrh	r1, [r7, #30]
 8012dee:	2301      	movs	r3, #1
 8012df0:	9302      	str	r3, [sp, #8]
 8012df2:	797b      	ldrb	r3, [r7, #5]
 8012df4:	9301      	str	r3, [sp, #4]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	f7ff fe0f 	bl	8012a20 <tcp_pbuf_prealloc>
 8012e02:	6578      	str	r0, [r7, #84]	@ 0x54
 8012e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f000 8225 	beq.w	8013256 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e0e:	6858      	ldr	r0, [r3, #4]
 8012e10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	4413      	add	r3, r2
 8012e18:	8bfa      	ldrh	r2, [r7, #30]
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	f005 fce1 	bl	80187e2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012e20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012e22:	f7fb f9c3 	bl	800e1ac <pbuf_clen>
 8012e26:	4603      	mov	r3, r0
 8012e28:	461a      	mov	r2, r3
 8012e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012e2e:	4413      	add	r3, r2
 8012e30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8012e34:	e041      	b.n	8012eba <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e3c:	e002      	b.n	8012e44 <tcp_write+0x23c>
 8012e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1f8      	bne.n	8012e3e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e4e:	7b1b      	ldrb	r3, [r3, #12]
 8012e50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d115      	bne.n	8012e84 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012e5e:	8952      	ldrh	r2, [r2, #10]
 8012e60:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d10d      	bne.n	8012e84 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012e68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d006      	beq.n	8012e7e <tcp_write+0x276>
 8012e70:	4b1c      	ldr	r3, [pc, #112]	@ (8012ee4 <tcp_write+0x2dc>)
 8012e72:	f240 2231 	movw	r2, #561	@ 0x231
 8012e76:	4922      	ldr	r1, [pc, #136]	@ (8012f00 <tcp_write+0x2f8>)
 8012e78:	481c      	ldr	r0, [pc, #112]	@ (8012eec <tcp_write+0x2e4>)
 8012e7a:	f005 fa53 	bl	8018324 <iprintf>
          extendlen = seglen;
 8012e7e:	8bfb      	ldrh	r3, [r7, #30]
 8012e80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8012e82:	e01a      	b.n	8012eba <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012e84:	8bfb      	ldrh	r3, [r7, #30]
 8012e86:	2201      	movs	r2, #1
 8012e88:	4619      	mov	r1, r3
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	f7fa fe1c 	bl	800dac8 <pbuf_alloc>
 8012e90:	6578      	str	r0, [r7, #84]	@ 0x54
 8012e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	f000 81e0 	beq.w	801325a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012e9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012e9e:	68ba      	ldr	r2, [r7, #8]
 8012ea0:	441a      	add	r2, r3
 8012ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ea4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012ea6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012ea8:	f7fb f980 	bl	800e1ac <pbuf_clen>
 8012eac:	4603      	mov	r3, r0
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012eb4:	4413      	add	r3, r2
 8012eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012eba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ebe:	8bfb      	ldrh	r3, [r7, #30]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012ec6:	e0dc      	b.n	8013082 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	f000 80d7 	beq.w	8013082 <tcp_write+0x47a>
 8012ed4:	4b03      	ldr	r3, [pc, #12]	@ (8012ee4 <tcp_write+0x2dc>)
 8012ed6:	f240 224a 	movw	r2, #586	@ 0x24a
 8012eda:	490a      	ldr	r1, [pc, #40]	@ (8012f04 <tcp_write+0x2fc>)
 8012edc:	4803      	ldr	r0, [pc, #12]	@ (8012eec <tcp_write+0x2e4>)
 8012ede:	f005 fa21 	bl	8018324 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012ee2:	e0ce      	b.n	8013082 <tcp_write+0x47a>
 8012ee4:	0801c8fc 	.word	0x0801c8fc
 8012ee8:	0801ca9c 	.word	0x0801ca9c
 8012eec:	0801c950 	.word	0x0801c950
 8012ef0:	0801cab4 	.word	0x0801cab4
 8012ef4:	0801cae8 	.word	0x0801cae8
 8012ef8:	0801cb00 	.word	0x0801cb00
 8012efc:	0801cb20 	.word	0x0801cb20
 8012f00:	0801cb40 	.word	0x0801cb40
 8012f04:	0801cb6c 	.word	0x0801cb6c
    struct pbuf *p;
    u16_t left = len - pos;
 8012f08:	88fa      	ldrh	r2, [r7, #6]
 8012f0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012f0e:	1ad3      	subs	r3, r2, r3
 8012f10:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012f12:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012f1e:	8b7a      	ldrh	r2, [r7, #26]
 8012f20:	8bbb      	ldrh	r3, [r7, #28]
 8012f22:	4293      	cmp	r3, r2
 8012f24:	bf28      	it	cs
 8012f26:	4613      	movcs	r3, r2
 8012f28:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012f2a:	797b      	ldrb	r3, [r7, #5]
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d036      	beq.n	8012fa2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012f34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	8b3b      	ldrh	r3, [r7, #24]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	b299      	uxth	r1, r3
 8012f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	bf0c      	ite	eq
 8012f46:	2301      	moveq	r3, #1
 8012f48:	2300      	movne	r3, #0
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	f107 0012 	add.w	r0, r7, #18
 8012f50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012f52:	9302      	str	r3, [sp, #8]
 8012f54:	797b      	ldrb	r3, [r7, #5]
 8012f56:	9301      	str	r3, [sp, #4]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	9300      	str	r3, [sp, #0]
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2036      	movs	r0, #54	@ 0x36
 8012f60:	f7ff fd5e 	bl	8012a20 <tcp_pbuf_prealloc>
 8012f64:	6338      	str	r0, [r7, #48]	@ 0x30
 8012f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 8178 	beq.w	801325e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f70:	895b      	ldrh	r3, [r3, #10]
 8012f72:	8b3a      	ldrh	r2, [r7, #24]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d906      	bls.n	8012f86 <tcp_write+0x37e>
 8012f78:	4b8c      	ldr	r3, [pc, #560]	@ (80131ac <tcp_write+0x5a4>)
 8012f7a:	f240 2266 	movw	r2, #614	@ 0x266
 8012f7e:	498c      	ldr	r1, [pc, #560]	@ (80131b0 <tcp_write+0x5a8>)
 8012f80:	488c      	ldr	r0, [pc, #560]	@ (80131b4 <tcp_write+0x5ac>)
 8012f82:	f005 f9cf 	bl	8018324 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f88:	685a      	ldr	r2, [r3, #4]
 8012f8a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012f8e:	18d0      	adds	r0, r2, r3
 8012f90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012f94:	68ba      	ldr	r2, [r7, #8]
 8012f96:	4413      	add	r3, r2
 8012f98:	8b3a      	ldrh	r2, [r7, #24]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	f005 fc21 	bl	80187e2 <memcpy>
 8012fa0:	e02f      	b.n	8013002 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012fa2:	8a7b      	ldrh	r3, [r7, #18]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d006      	beq.n	8012fb6 <tcp_write+0x3ae>
 8012fa8:	4b80      	ldr	r3, [pc, #512]	@ (80131ac <tcp_write+0x5a4>)
 8012faa:	f240 2271 	movw	r2, #625	@ 0x271
 8012fae:	4982      	ldr	r1, [pc, #520]	@ (80131b8 <tcp_write+0x5b0>)
 8012fb0:	4880      	ldr	r0, [pc, #512]	@ (80131b4 <tcp_write+0x5ac>)
 8012fb2:	f005 f9b7 	bl	8018324 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012fb6:	8b3b      	ldrh	r3, [r7, #24]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	4619      	mov	r1, r3
 8012fbc:	2036      	movs	r0, #54	@ 0x36
 8012fbe:	f7fa fd83 	bl	800dac8 <pbuf_alloc>
 8012fc2:	6178      	str	r0, [r7, #20]
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f000 814b 	beq.w	8013262 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012fd0:	68ba      	ldr	r2, [r7, #8]
 8012fd2:	441a      	add	r2, r3
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	2036      	movs	r0, #54	@ 0x36
 8012fe6:	f7fa fd6f 	bl	800dac8 <pbuf_alloc>
 8012fea:	6338      	str	r0, [r7, #48]	@ 0x30
 8012fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d103      	bne.n	8012ffa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012ff2:	6978      	ldr	r0, [r7, #20]
 8012ff4:	f7fb f84c 	bl	800e090 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012ff8:	e136      	b.n	8013268 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012ffa:	6979      	ldr	r1, [r7, #20]
 8012ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ffe:	f7fb f915 	bl	800e22c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013004:	f7fb f8d2 	bl	800e1ac <pbuf_clen>
 8013008:	4603      	mov	r3, r0
 801300a:	461a      	mov	r2, r3
 801300c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013010:	4413      	add	r3, r2
 8013012:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801301a:	2b09      	cmp	r3, #9
 801301c:	d903      	bls.n	8013026 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801301e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013020:	f7fb f836 	bl	800e090 <pbuf_free>
      goto memerr;
 8013024:	e120      	b.n	8013268 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801302a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801302e:	441a      	add	r2, r3
 8013030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	4613      	mov	r3, r2
 8013038:	2200      	movs	r2, #0
 801303a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f7ff fc53 	bl	80128e8 <tcp_create_segment>
 8013042:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013046:	2b00      	cmp	r3, #0
 8013048:	f000 810d 	beq.w	8013266 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801304c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801304e:	2b00      	cmp	r3, #0
 8013050:	d102      	bne.n	8013058 <tcp_write+0x450>
      queue = seg;
 8013052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013054:	647b      	str	r3, [r7, #68]	@ 0x44
 8013056:	e00c      	b.n	8013072 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <tcp_write+0x464>
 801305e:	4b53      	ldr	r3, [pc, #332]	@ (80131ac <tcp_write+0x5a4>)
 8013060:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013064:	4955      	ldr	r1, [pc, #340]	@ (80131bc <tcp_write+0x5b4>)
 8013066:	4853      	ldr	r0, [pc, #332]	@ (80131b4 <tcp_write+0x5ac>)
 8013068:	f005 f95c 	bl	8018324 <iprintf>
      prev_seg->next = seg;
 801306c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801306e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013070:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013074:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013076:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801307a:	8b3b      	ldrh	r3, [r7, #24]
 801307c:	4413      	add	r3, r2
 801307e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8013082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013086:	88fb      	ldrh	r3, [r7, #6]
 8013088:	429a      	cmp	r2, r3
 801308a:	f4ff af3d 	bcc.w	8012f08 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801308e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013090:	2b00      	cmp	r3, #0
 8013092:	d02c      	beq.n	80130ee <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801309a:	e01e      	b.n	80130da <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801309e:	891a      	ldrh	r2, [r3, #8]
 80130a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80130a2:	4413      	add	r3, r2
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80130aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d110      	bne.n	80130d4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80130b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130b8:	8952      	ldrh	r2, [r2, #10]
 80130ba:	4413      	add	r3, r2
 80130bc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80130be:	68b9      	ldr	r1, [r7, #8]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f005 fb8e 	bl	80187e2 <memcpy>
        p->len += oversize_used;
 80130c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130c8:	895a      	ldrh	r2, [r3, #10]
 80130ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80130cc:	4413      	add	r3, r2
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80130d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80130da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d1dd      	bne.n	801309c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80130e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130e2:	891a      	ldrh	r2, [r3, #8]
 80130e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80130e6:	4413      	add	r3, r2
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130ec:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80130ee:	8a7a      	ldrh	r2, [r7, #18]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80130f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d018      	beq.n	801312e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80130fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d106      	bne.n	8013110 <tcp_write+0x508>
 8013102:	4b2a      	ldr	r3, [pc, #168]	@ (80131ac <tcp_write+0x5a4>)
 8013104:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8013108:	492d      	ldr	r1, [pc, #180]	@ (80131c0 <tcp_write+0x5b8>)
 801310a:	482a      	ldr	r0, [pc, #168]	@ (80131b4 <tcp_write+0x5ac>)
 801310c:	f005 f90a 	bl	8018324 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013116:	4618      	mov	r0, r3
 8013118:	f7fb f888 	bl	800e22c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801311c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801311e:	891a      	ldrh	r2, [r3, #8]
 8013120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013122:	891b      	ldrh	r3, [r3, #8]
 8013124:	4413      	add	r3, r2
 8013126:	b29a      	uxth	r2, r3
 8013128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801312a:	811a      	strh	r2, [r3, #8]
 801312c:	e037      	b.n	801319e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801312e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013130:	2b00      	cmp	r3, #0
 8013132:	d034      	beq.n	801319e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013136:	2b00      	cmp	r3, #0
 8013138:	d003      	beq.n	8013142 <tcp_write+0x53a>
 801313a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <tcp_write+0x548>
 8013142:	4b1a      	ldr	r3, [pc, #104]	@ (80131ac <tcp_write+0x5a4>)
 8013144:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8013148:	491e      	ldr	r1, [pc, #120]	@ (80131c4 <tcp_write+0x5bc>)
 801314a:	481a      	ldr	r0, [pc, #104]	@ (80131b4 <tcp_write+0x5ac>)
 801314c:	f005 f8ea 	bl	8018324 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013156:	e009      	b.n	801316c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801315a:	891a      	ldrh	r2, [r3, #8]
 801315c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801315e:	4413      	add	r3, r2
 8013160:	b29a      	uxth	r2, r3
 8013162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013164:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1f1      	bne.n	8013158 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013176:	891a      	ldrh	r2, [r3, #8]
 8013178:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801317a:	4413      	add	r3, r2
 801317c:	b29a      	uxth	r2, r3
 801317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013180:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013184:	895a      	ldrh	r2, [r3, #10]
 8013186:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013188:	4413      	add	r3, r2
 801318a:	b29a      	uxth	r2, r3
 801318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013192:	891a      	ldrh	r2, [r3, #8]
 8013194:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013196:	4413      	add	r3, r2
 8013198:	b29a      	uxth	r2, r3
 801319a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801319c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801319e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d111      	bne.n	80131c8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80131aa:	e010      	b.n	80131ce <tcp_write+0x5c6>
 80131ac:	0801c8fc 	.word	0x0801c8fc
 80131b0:	0801cb9c 	.word	0x0801cb9c
 80131b4:	0801c950 	.word	0x0801c950
 80131b8:	0801cbdc 	.word	0x0801cbdc
 80131bc:	0801cbec 	.word	0x0801cbec
 80131c0:	0801cc00 	.word	0x0801cc00
 80131c4:	0801cc38 	.word	0x0801cc38
  } else {
    last_unsent->next = queue;
 80131c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80131d2:	88fb      	ldrh	r3, [r7, #6]
 80131d4:	441a      	add	r2, r3
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80131e0:	88fb      	ldrh	r3, [r7, #6]
 80131e2:	1ad3      	subs	r3, r2, r3
 80131e4:	b29a      	uxth	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80131f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00e      	beq.n	801321e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013204:	2b00      	cmp	r3, #0
 8013206:	d10a      	bne.n	801321e <tcp_write+0x616>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <tcp_write+0x616>
 8013210:	4b2c      	ldr	r3, [pc, #176]	@ (80132c4 <tcp_write+0x6bc>)
 8013212:	f240 3212 	movw	r2, #786	@ 0x312
 8013216:	492c      	ldr	r1, [pc, #176]	@ (80132c8 <tcp_write+0x6c0>)
 8013218:	482c      	ldr	r0, [pc, #176]	@ (80132cc <tcp_write+0x6c4>)
 801321a:	f005 f883 	bl	8018324 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801321e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013220:	2b00      	cmp	r3, #0
 8013222:	d016      	beq.n	8013252 <tcp_write+0x64a>
 8013224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d012      	beq.n	8013252 <tcp_write+0x64a>
 801322c:	797b      	ldrb	r3, [r7, #5]
 801322e:	f003 0302 	and.w	r3, r3, #2
 8013232:	2b00      	cmp	r3, #0
 8013234:	d10d      	bne.n	8013252 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	899b      	ldrh	r3, [r3, #12]
 801323c:	b29c      	uxth	r4, r3
 801323e:	2008      	movs	r0, #8
 8013240:	f7f9 fb7a 	bl	800c938 <lwip_htons>
 8013244:	4603      	mov	r3, r0
 8013246:	461a      	mov	r2, r3
 8013248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	4322      	orrs	r2, r4
 801324e:	b292      	uxth	r2, r2
 8013250:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013252:	2300      	movs	r3, #0
 8013254:	e031      	b.n	80132ba <tcp_write+0x6b2>
          goto memerr;
 8013256:	bf00      	nop
 8013258:	e006      	b.n	8013268 <tcp_write+0x660>
            goto memerr;
 801325a:	bf00      	nop
 801325c:	e004      	b.n	8013268 <tcp_write+0x660>
        goto memerr;
 801325e:	bf00      	nop
 8013260:	e002      	b.n	8013268 <tcp_write+0x660>
        goto memerr;
 8013262:	bf00      	nop
 8013264:	e000      	b.n	8013268 <tcp_write+0x660>
      goto memerr;
 8013266:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	8b5b      	ldrh	r3, [r3, #26]
 801326c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013270:	b29a      	uxth	r2, r3
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801327c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801327e:	f7fa ff07 	bl	800e090 <pbuf_free>
  }
  if (queue != NULL) {
 8013282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013288:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801328a:	f7fc fb71 	bl	800f970 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00e      	beq.n	80132b6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10a      	bne.n	80132b6 <tcp_write+0x6ae>
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d106      	bne.n	80132b6 <tcp_write+0x6ae>
 80132a8:	4b06      	ldr	r3, [pc, #24]	@ (80132c4 <tcp_write+0x6bc>)
 80132aa:	f240 3227 	movw	r2, #807	@ 0x327
 80132ae:	4906      	ldr	r1, [pc, #24]	@ (80132c8 <tcp_write+0x6c0>)
 80132b0:	4806      	ldr	r0, [pc, #24]	@ (80132cc <tcp_write+0x6c4>)
 80132b2:	f005 f837 	bl	8018324 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80132b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	375c      	adds	r7, #92	@ 0x5c
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd90      	pop	{r4, r7, pc}
 80132c2:	bf00      	nop
 80132c4:	0801c8fc 	.word	0x0801c8fc
 80132c8:	0801cc70 	.word	0x0801cc70
 80132cc:	0801c950 	.word	0x0801c950

080132d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80132d0:	b590      	push	{r4, r7, lr}
 80132d2:	b08b      	sub	sp, #44	@ 0x2c
 80132d4:	af02      	add	r7, sp, #8
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	460b      	mov	r3, r1
 80132da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80132dc:	2300      	movs	r3, #0
 80132de:	61fb      	str	r3, [r7, #28]
 80132e0:	2300      	movs	r3, #0
 80132e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80132e4:	2300      	movs	r3, #0
 80132e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d106      	bne.n	80132fc <tcp_split_unsent_seg+0x2c>
 80132ee:	4b95      	ldr	r3, [pc, #596]	@ (8013544 <tcp_split_unsent_seg+0x274>)
 80132f0:	f240 324b 	movw	r2, #843	@ 0x34b
 80132f4:	4994      	ldr	r1, [pc, #592]	@ (8013548 <tcp_split_unsent_seg+0x278>)
 80132f6:	4895      	ldr	r0, [pc, #596]	@ (801354c <tcp_split_unsent_seg+0x27c>)
 80132f8:	f005 f814 	bl	8018324 <iprintf>

  useg = pcb->unsent;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013300:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d102      	bne.n	801330e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013308:	f04f 33ff 	mov.w	r3, #4294967295
 801330c:	e116      	b.n	801353c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801330e:	887b      	ldrh	r3, [r7, #2]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d109      	bne.n	8013328 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013314:	4b8b      	ldr	r3, [pc, #556]	@ (8013544 <tcp_split_unsent_seg+0x274>)
 8013316:	f240 3253 	movw	r2, #851	@ 0x353
 801331a:	498d      	ldr	r1, [pc, #564]	@ (8013550 <tcp_split_unsent_seg+0x280>)
 801331c:	488b      	ldr	r0, [pc, #556]	@ (801354c <tcp_split_unsent_seg+0x27c>)
 801331e:	f005 f801 	bl	8018324 <iprintf>
    return ERR_VAL;
 8013322:	f06f 0305 	mvn.w	r3, #5
 8013326:	e109      	b.n	801353c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	891b      	ldrh	r3, [r3, #8]
 801332c:	887a      	ldrh	r2, [r7, #2]
 801332e:	429a      	cmp	r2, r3
 8013330:	d301      	bcc.n	8013336 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013332:	2300      	movs	r3, #0
 8013334:	e102      	b.n	801353c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801333a:	887a      	ldrh	r2, [r7, #2]
 801333c:	429a      	cmp	r2, r3
 801333e:	d906      	bls.n	801334e <tcp_split_unsent_seg+0x7e>
 8013340:	4b80      	ldr	r3, [pc, #512]	@ (8013544 <tcp_split_unsent_seg+0x274>)
 8013342:	f240 325b 	movw	r2, #859	@ 0x35b
 8013346:	4983      	ldr	r1, [pc, #524]	@ (8013554 <tcp_split_unsent_seg+0x284>)
 8013348:	4880      	ldr	r0, [pc, #512]	@ (801354c <tcp_split_unsent_seg+0x27c>)
 801334a:	f004 ffeb 	bl	8018324 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	891b      	ldrh	r3, [r3, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d106      	bne.n	8013364 <tcp_split_unsent_seg+0x94>
 8013356:	4b7b      	ldr	r3, [pc, #492]	@ (8013544 <tcp_split_unsent_seg+0x274>)
 8013358:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801335c:	497e      	ldr	r1, [pc, #504]	@ (8013558 <tcp_split_unsent_seg+0x288>)
 801335e:	487b      	ldr	r0, [pc, #492]	@ (801354c <tcp_split_unsent_seg+0x27c>)
 8013360:	f004 ffe0 	bl	8018324 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	7a9b      	ldrb	r3, [r3, #10]
 8013368:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801336a:	7bfb      	ldrb	r3, [r7, #15]
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	b2db      	uxtb	r3, r3
 8013370:	f003 0304 	and.w	r3, r3, #4
 8013374:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	891a      	ldrh	r2, [r3, #8]
 801337a:	887b      	ldrh	r3, [r7, #2]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013380:	7bbb      	ldrb	r3, [r7, #14]
 8013382:	b29a      	uxth	r2, r3
 8013384:	89bb      	ldrh	r3, [r7, #12]
 8013386:	4413      	add	r3, r2
 8013388:	b29b      	uxth	r3, r3
 801338a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801338e:	4619      	mov	r1, r3
 8013390:	2036      	movs	r0, #54	@ 0x36
 8013392:	f7fa fb99 	bl	800dac8 <pbuf_alloc>
 8013396:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	2b00      	cmp	r3, #0
 801339c:	f000 80b7 	beq.w	801350e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	891a      	ldrh	r2, [r3, #8]
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	891b      	ldrh	r3, [r3, #8]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	b29a      	uxth	r2, r3
 80133ae:	887b      	ldrh	r3, [r7, #2]
 80133b0:	4413      	add	r3, r2
 80133b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	6858      	ldr	r0, [r3, #4]
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	7bbb      	ldrb	r3, [r7, #14]
 80133be:	18d1      	adds	r1, r2, r3
 80133c0:	897b      	ldrh	r3, [r7, #10]
 80133c2:	89ba      	ldrh	r2, [r7, #12]
 80133c4:	f7fb f85a 	bl	800e47c <pbuf_copy_partial>
 80133c8:	4603      	mov	r3, r0
 80133ca:	461a      	mov	r2, r3
 80133cc:	89bb      	ldrh	r3, [r7, #12]
 80133ce:	4293      	cmp	r3, r2
 80133d0:	f040 809f 	bne.w	8013512 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	899b      	ldrh	r3, [r3, #12]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	4618      	mov	r0, r3
 80133de:	f7f9 faab 	bl	800c938 <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	b2db      	uxtb	r3, r3
 80133e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80133ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80133ec:	2300      	movs	r3, #0
 80133ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80133f0:	7efb      	ldrb	r3, [r7, #27]
 80133f2:	f003 0308 	and.w	r3, r3, #8
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d007      	beq.n	801340a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80133fa:	7efb      	ldrb	r3, [r7, #27]
 80133fc:	f023 0308 	bic.w	r3, r3, #8
 8013400:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013402:	7ebb      	ldrb	r3, [r7, #26]
 8013404:	f043 0308 	orr.w	r3, r3, #8
 8013408:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801340a:	7efb      	ldrb	r3, [r7, #27]
 801340c:	f003 0301 	and.w	r3, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d007      	beq.n	8013424 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013414:	7efb      	ldrb	r3, [r7, #27]
 8013416:	f023 0301 	bic.w	r3, r3, #1
 801341a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801341c:	7ebb      	ldrb	r3, [r7, #26]
 801341e:	f043 0301 	orr.w	r3, r3, #1
 8013422:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	4618      	mov	r0, r3
 801342c:	f7f9 fa99 	bl	800c962 <lwip_htonl>
 8013430:	4602      	mov	r2, r0
 8013432:	887b      	ldrh	r3, [r7, #2]
 8013434:	18d1      	adds	r1, r2, r3
 8013436:	7eba      	ldrb	r2, [r7, #26]
 8013438:	7bfb      	ldrb	r3, [r7, #15]
 801343a:	9300      	str	r3, [sp, #0]
 801343c:	460b      	mov	r3, r1
 801343e:	6939      	ldr	r1, [r7, #16]
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7ff fa51 	bl	80128e8 <tcp_create_segment>
 8013446:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d063      	beq.n	8013516 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	4618      	mov	r0, r3
 8013454:	f7fa feaa 	bl	800e1ac <pbuf_clen>
 8013458:	4603      	mov	r3, r0
 801345a:	461a      	mov	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013462:	1a9b      	subs	r3, r3, r2
 8013464:	b29a      	uxth	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	6858      	ldr	r0, [r3, #4]
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	891a      	ldrh	r2, [r3, #8]
 8013476:	89bb      	ldrh	r3, [r7, #12]
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	b29b      	uxth	r3, r3
 801347c:	4619      	mov	r1, r3
 801347e:	f7fa fc81 	bl	800dd84 <pbuf_realloc>
  useg->len -= remainder;
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	891a      	ldrh	r2, [r3, #8]
 8013486:	89bb      	ldrh	r3, [r7, #12]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	b29a      	uxth	r2, r3
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	899b      	ldrh	r3, [r3, #12]
 8013496:	b29c      	uxth	r4, r3
 8013498:	7efb      	ldrb	r3, [r7, #27]
 801349a:	b29b      	uxth	r3, r3
 801349c:	4618      	mov	r0, r3
 801349e:	f7f9 fa4b 	bl	800c938 <lwip_htons>
 80134a2:	4603      	mov	r3, r0
 80134a4:	461a      	mov	r2, r3
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	4322      	orrs	r2, r4
 80134ac:	b292      	uxth	r2, r2
 80134ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fa fe79 	bl	800e1ac <pbuf_clen>
 80134ba:	4603      	mov	r3, r0
 80134bc:	461a      	mov	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80134c4:	4413      	add	r3, r2
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fa fe6a 	bl	800e1ac <pbuf_clen>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80134e2:	4413      	add	r3, r2
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	69fa      	ldr	r2, [r7, #28]
 80134f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80134fa:	69fb      	ldr	r3, [r7, #28]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d103      	bne.n	801350a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2200      	movs	r2, #0
 8013506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801350a:	2300      	movs	r3, #0
 801350c:	e016      	b.n	801353c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801350e:	bf00      	nop
 8013510:	e002      	b.n	8013518 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013512:	bf00      	nop
 8013514:	e000      	b.n	8013518 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013516:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d006      	beq.n	801352c <tcp_split_unsent_seg+0x25c>
 801351e:	4b09      	ldr	r3, [pc, #36]	@ (8013544 <tcp_split_unsent_seg+0x274>)
 8013520:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013524:	490d      	ldr	r1, [pc, #52]	@ (801355c <tcp_split_unsent_seg+0x28c>)
 8013526:	4809      	ldr	r0, [pc, #36]	@ (801354c <tcp_split_unsent_seg+0x27c>)
 8013528:	f004 fefc 	bl	8018324 <iprintf>
  if (p != NULL) {
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d002      	beq.n	8013538 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013532:	6938      	ldr	r0, [r7, #16]
 8013534:	f7fa fdac 	bl	800e090 <pbuf_free>
  }

  return ERR_MEM;
 8013538:	f04f 33ff 	mov.w	r3, #4294967295
}
 801353c:	4618      	mov	r0, r3
 801353e:	3724      	adds	r7, #36	@ 0x24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd90      	pop	{r4, r7, pc}
 8013544:	0801c8fc 	.word	0x0801c8fc
 8013548:	0801cc90 	.word	0x0801cc90
 801354c:	0801c950 	.word	0x0801c950
 8013550:	0801ccb4 	.word	0x0801ccb4
 8013554:	0801ccd8 	.word	0x0801ccd8
 8013558:	0801cce8 	.word	0x0801cce8
 801355c:	0801ccf8 	.word	0x0801ccf8

08013560 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d106      	bne.n	801357c <tcp_send_fin+0x1c>
 801356e:	4b21      	ldr	r3, [pc, #132]	@ (80135f4 <tcp_send_fin+0x94>)
 8013570:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013574:	4920      	ldr	r1, [pc, #128]	@ (80135f8 <tcp_send_fin+0x98>)
 8013576:	4821      	ldr	r0, [pc, #132]	@ (80135fc <tcp_send_fin+0x9c>)
 8013578:	f004 fed4 	bl	8018324 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013580:	2b00      	cmp	r3, #0
 8013582:	d02e      	beq.n	80135e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013588:	60fb      	str	r3, [r7, #12]
 801358a:	e002      	b.n	8013592 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1f8      	bne.n	801358c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	899b      	ldrh	r3, [r3, #12]
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7f9 f9c8 	bl	800c938 <lwip_htons>
 80135a8:	4603      	mov	r3, r0
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	f003 0307 	and.w	r3, r3, #7
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d116      	bne.n	80135e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	68db      	ldr	r3, [r3, #12]
 80135b8:	899b      	ldrh	r3, [r3, #12]
 80135ba:	b29c      	uxth	r4, r3
 80135bc:	2001      	movs	r0, #1
 80135be:	f7f9 f9bb 	bl	800c938 <lwip_htons>
 80135c2:	4603      	mov	r3, r0
 80135c4:	461a      	mov	r2, r3
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	4322      	orrs	r2, r4
 80135cc:	b292      	uxth	r2, r2
 80135ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	8b5b      	ldrh	r3, [r3, #26]
 80135d4:	f043 0320 	orr.w	r3, r3, #32
 80135d8:	b29a      	uxth	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80135de:	2300      	movs	r3, #0
 80135e0:	e004      	b.n	80135ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80135e2:	2101      	movs	r1, #1
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f80b 	bl	8013600 <tcp_enqueue_flags>
 80135ea:	4603      	mov	r3, r0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3714      	adds	r7, #20
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}
 80135f4:	0801c8fc 	.word	0x0801c8fc
 80135f8:	0801cd04 	.word	0x0801cd04
 80135fc:	0801c950 	.word	0x0801c950

08013600 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b08a      	sub	sp, #40	@ 0x28
 8013604:	af02      	add	r7, sp, #8
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	460b      	mov	r3, r1
 801360a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013610:	2300      	movs	r3, #0
 8013612:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013614:	78fb      	ldrb	r3, [r7, #3]
 8013616:	f003 0303 	and.w	r3, r3, #3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <tcp_enqueue_flags+0x2c>
 801361e:	4b67      	ldr	r3, [pc, #412]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 8013620:	f240 4211 	movw	r2, #1041	@ 0x411
 8013624:	4966      	ldr	r1, [pc, #408]	@ (80137c0 <tcp_enqueue_flags+0x1c0>)
 8013626:	4867      	ldr	r0, [pc, #412]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 8013628:	f004 fe7c 	bl	8018324 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_enqueue_flags+0x40>
 8013632:	4b62      	ldr	r3, [pc, #392]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 8013634:	f240 4213 	movw	r2, #1043	@ 0x413
 8013638:	4963      	ldr	r1, [pc, #396]	@ (80137c8 <tcp_enqueue_flags+0x1c8>)
 801363a:	4862      	ldr	r0, [pc, #392]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 801363c:	f004 fe72 	bl	8018324 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013640:	78fb      	ldrb	r3, [r7, #3]
 8013642:	f003 0302 	and.w	r3, r3, #2
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801364a:	2301      	movs	r3, #1
 801364c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801364e:	7ffb      	ldrb	r3, [r7, #31]
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	b2db      	uxtb	r3, r3
 8013654:	f003 0304 	and.w	r3, r3, #4
 8013658:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801365a:	7dfb      	ldrb	r3, [r7, #23]
 801365c:	b29b      	uxth	r3, r3
 801365e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013662:	4619      	mov	r1, r3
 8013664:	2036      	movs	r0, #54	@ 0x36
 8013666:	f7fa fa2f 	bl	800dac8 <pbuf_alloc>
 801366a:	6138      	str	r0, [r7, #16]
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d109      	bne.n	8013686 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	8b5b      	ldrh	r3, [r3, #26]
 8013676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801367a:	b29a      	uxth	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013680:	f04f 33ff 	mov.w	r3, #4294967295
 8013684:	e095      	b.n	80137b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	895a      	ldrh	r2, [r3, #10]
 801368a:	7dfb      	ldrb	r3, [r7, #23]
 801368c:	b29b      	uxth	r3, r3
 801368e:	429a      	cmp	r2, r3
 8013690:	d206      	bcs.n	80136a0 <tcp_enqueue_flags+0xa0>
 8013692:	4b4a      	ldr	r3, [pc, #296]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 8013694:	f240 4239 	movw	r2, #1081	@ 0x439
 8013698:	494c      	ldr	r1, [pc, #304]	@ (80137cc <tcp_enqueue_flags+0x1cc>)
 801369a:	484a      	ldr	r0, [pc, #296]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 801369c:	f004 fe42 	bl	8018324 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80136a4:	78fa      	ldrb	r2, [r7, #3]
 80136a6:	7ffb      	ldrb	r3, [r7, #31]
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	460b      	mov	r3, r1
 80136ac:	6939      	ldr	r1, [r7, #16]
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f7ff f91a 	bl	80128e8 <tcp_create_segment>
 80136b4:	60f8      	str	r0, [r7, #12]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d109      	bne.n	80136d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8b5b      	ldrh	r3, [r3, #26]
 80136c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80136ca:	f04f 33ff 	mov.w	r3, #4294967295
 80136ce:	e070      	b.n	80137b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	f003 0303 	and.w	r3, r3, #3
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d006      	beq.n	80136ea <tcp_enqueue_flags+0xea>
 80136dc:	4b37      	ldr	r3, [pc, #220]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 80136de:	f240 4242 	movw	r2, #1090	@ 0x442
 80136e2:	493b      	ldr	r1, [pc, #236]	@ (80137d0 <tcp_enqueue_flags+0x1d0>)
 80136e4:	4837      	ldr	r0, [pc, #220]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 80136e6:	f004 fe1d 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	891b      	ldrh	r3, [r3, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d006      	beq.n	8013700 <tcp_enqueue_flags+0x100>
 80136f2:	4b32      	ldr	r3, [pc, #200]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 80136f4:	f240 4243 	movw	r2, #1091	@ 0x443
 80136f8:	4936      	ldr	r1, [pc, #216]	@ (80137d4 <tcp_enqueue_flags+0x1d4>)
 80136fa:	4832      	ldr	r0, [pc, #200]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 80136fc:	f004 fe12 	bl	8018324 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801370e:	e00d      	b.n	801372c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013714:	61bb      	str	r3, [r7, #24]
 8013716:	e002      	b.n	801371e <tcp_enqueue_flags+0x11e>
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	61bb      	str	r3, [r7, #24]
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d1f8      	bne.n	8013718 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2200      	movs	r2, #0
 8013730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013734:	78fb      	ldrb	r3, [r7, #3]
 8013736:	f003 0302 	and.w	r3, r3, #2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d104      	bne.n	8013748 <tcp_enqueue_flags+0x148>
 801373e:	78fb      	ldrb	r3, [r7, #3]
 8013740:	f003 0301 	and.w	r3, r3, #1
 8013744:	2b00      	cmp	r3, #0
 8013746:	d004      	beq.n	8013752 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801374c:	1c5a      	adds	r2, r3, #1
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013752:	78fb      	ldrb	r3, [r7, #3]
 8013754:	f003 0301 	and.w	r3, r3, #1
 8013758:	2b00      	cmp	r3, #0
 801375a:	d006      	beq.n	801376a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	8b5b      	ldrh	r3, [r3, #26]
 8013760:	f043 0320 	orr.w	r3, r3, #32
 8013764:	b29a      	uxth	r2, r3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	4618      	mov	r0, r3
 8013770:	f7fa fd1c 	bl	800e1ac <pbuf_clen>
 8013774:	4603      	mov	r3, r0
 8013776:	461a      	mov	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801377e:	4413      	add	r3, r2
 8013780:	b29a      	uxth	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00e      	beq.n	80137b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10a      	bne.n	80137b0 <tcp_enqueue_flags+0x1b0>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d106      	bne.n	80137b0 <tcp_enqueue_flags+0x1b0>
 80137a2:	4b06      	ldr	r3, [pc, #24]	@ (80137bc <tcp_enqueue_flags+0x1bc>)
 80137a4:	f240 4265 	movw	r2, #1125	@ 0x465
 80137a8:	490b      	ldr	r1, [pc, #44]	@ (80137d8 <tcp_enqueue_flags+0x1d8>)
 80137aa:	4806      	ldr	r0, [pc, #24]	@ (80137c4 <tcp_enqueue_flags+0x1c4>)
 80137ac:	f004 fdba 	bl	8018324 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3720      	adds	r7, #32
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	0801c8fc 	.word	0x0801c8fc
 80137c0:	0801cd20 	.word	0x0801cd20
 80137c4:	0801c950 	.word	0x0801c950
 80137c8:	0801cd78 	.word	0x0801cd78
 80137cc:	0801cd98 	.word	0x0801cd98
 80137d0:	0801cdd4 	.word	0x0801cdd4
 80137d4:	0801cdec 	.word	0x0801cdec
 80137d8:	0801ce18 	.word	0x0801ce18

080137dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80137dc:	b5b0      	push	{r4, r5, r7, lr}
 80137de:	b08a      	sub	sp, #40	@ 0x28
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <tcp_output+0x1c>
 80137ea:	4b8a      	ldr	r3, [pc, #552]	@ (8013a14 <tcp_output+0x238>)
 80137ec:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80137f0:	4989      	ldr	r1, [pc, #548]	@ (8013a18 <tcp_output+0x23c>)
 80137f2:	488a      	ldr	r0, [pc, #552]	@ (8013a1c <tcp_output+0x240>)
 80137f4:	f004 fd96 	bl	8018324 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	7d1b      	ldrb	r3, [r3, #20]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d106      	bne.n	801380e <tcp_output+0x32>
 8013800:	4b84      	ldr	r3, [pc, #528]	@ (8013a14 <tcp_output+0x238>)
 8013802:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013806:	4986      	ldr	r1, [pc, #536]	@ (8013a20 <tcp_output+0x244>)
 8013808:	4884      	ldr	r0, [pc, #528]	@ (8013a1c <tcp_output+0x240>)
 801380a:	f004 fd8b 	bl	8018324 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801380e:	4b85      	ldr	r3, [pc, #532]	@ (8013a24 <tcp_output+0x248>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	429a      	cmp	r2, r3
 8013816:	d101      	bne.n	801381c <tcp_output+0x40>
    return ERR_OK;
 8013818:	2300      	movs	r3, #0
 801381a:	e1ce      	b.n	8013bba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013828:	4293      	cmp	r3, r2
 801382a:	bf28      	it	cs
 801382c:	4613      	movcs	r3, r2
 801382e:	b29b      	uxth	r3, r3
 8013830:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013836:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383a:	2b00      	cmp	r3, #0
 801383c:	d10b      	bne.n	8013856 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	8b5b      	ldrh	r3, [r3, #26]
 8013842:	f003 0302 	and.w	r3, r3, #2
 8013846:	2b00      	cmp	r3, #0
 8013848:	f000 81aa 	beq.w	8013ba0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 fdcb 	bl	80143e8 <tcp_send_empty_ack>
 8013852:	4603      	mov	r3, r0
 8013854:	e1b1      	b.n	8013bba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013856:	6879      	ldr	r1, [r7, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3304      	adds	r3, #4
 801385c:	461a      	mov	r2, r3
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f7ff f826 	bl	80128b0 <tcp_route>
 8013864:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d102      	bne.n	8013872 <tcp_output+0x96>
    return ERR_RTE;
 801386c:	f06f 0303 	mvn.w	r3, #3
 8013870:	e1a3      	b.n	8013bba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d003      	beq.n	8013880 <tcp_output+0xa4>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d111      	bne.n	80138a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <tcp_output+0xb0>
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	3304      	adds	r3, #4
 801388a:	e000      	b.n	801388e <tcp_output+0xb2>
 801388c:	2300      	movs	r3, #0
 801388e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <tcp_output+0xc0>
      return ERR_RTE;
 8013896:	f06f 0303 	mvn.w	r3, #3
 801389a:	e18e      	b.n	8013bba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80138a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f9 f859 	bl	800c962 <lwip_htonl>
 80138b0:	4602      	mov	r2, r0
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138b6:	1ad3      	subs	r3, r2, r3
 80138b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138ba:	8912      	ldrh	r2, [r2, #8]
 80138bc:	4413      	add	r3, r2
 80138be:	69ba      	ldr	r2, [r7, #24]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d227      	bcs.n	8013914 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80138ca:	461a      	mov	r2, r3
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d114      	bne.n	80138fc <tcp_output+0x120>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d110      	bne.n	80138fc <tcp_output+0x120>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10b      	bne.n	80138fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	2200      	movs	r2, #0
 80138e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2201      	movs	r2, #1
 80138f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	8b5b      	ldrh	r3, [r3, #26]
 8013900:	f003 0302 	and.w	r3, r3, #2
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 814d 	beq.w	8013ba4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f000 fd6c 	bl	80143e8 <tcp_send_empty_ack>
 8013910:	4603      	mov	r3, r0
 8013912:	e152      	b.n	8013bba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2200      	movs	r2, #0
 8013918:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013920:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 811c 	beq.w	8013b62 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801392a:	e002      	b.n	8013932 <tcp_output+0x156>
 801392c:	6a3b      	ldr	r3, [r7, #32]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	623b      	str	r3, [r7, #32]
 8013932:	6a3b      	ldr	r3, [r7, #32]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1f8      	bne.n	801392c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801393a:	e112      	b.n	8013b62 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	b29b      	uxth	r3, r3
 8013944:	4618      	mov	r0, r3
 8013946:	f7f8 fff7 	bl	800c938 <lwip_htons>
 801394a:	4603      	mov	r3, r0
 801394c:	b2db      	uxtb	r3, r3
 801394e:	f003 0304 	and.w	r3, r3, #4
 8013952:	2b00      	cmp	r3, #0
 8013954:	d006      	beq.n	8013964 <tcp_output+0x188>
 8013956:	4b2f      	ldr	r3, [pc, #188]	@ (8013a14 <tcp_output+0x238>)
 8013958:	f240 5236 	movw	r2, #1334	@ 0x536
 801395c:	4932      	ldr	r1, [pc, #200]	@ (8013a28 <tcp_output+0x24c>)
 801395e:	482f      	ldr	r0, [pc, #188]	@ (8013a1c <tcp_output+0x240>)
 8013960:	f004 fce0 	bl	8018324 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013968:	2b00      	cmp	r3, #0
 801396a:	d01f      	beq.n	80139ac <tcp_output+0x1d0>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	8b5b      	ldrh	r3, [r3, #26]
 8013970:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013974:	2b00      	cmp	r3, #0
 8013976:	d119      	bne.n	80139ac <tcp_output+0x1d0>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <tcp_output+0x1bc>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d110      	bne.n	80139ac <tcp_output+0x1d0>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801398e:	891a      	ldrh	r2, [r3, #8]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013994:	429a      	cmp	r2, r3
 8013996:	d209      	bcs.n	80139ac <tcp_output+0x1d0>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d004      	beq.n	80139ac <tcp_output+0x1d0>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139a8:	2b08      	cmp	r3, #8
 80139aa:	d901      	bls.n	80139b0 <tcp_output+0x1d4>
 80139ac:	2301      	movs	r3, #1
 80139ae:	e000      	b.n	80139b2 <tcp_output+0x1d6>
 80139b0:	2300      	movs	r3, #0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8b5b      	ldrh	r3, [r3, #26]
 80139ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f000 80e4 	beq.w	8013b8c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	7d1b      	ldrb	r3, [r3, #20]
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d00d      	beq.n	80139e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80139cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	899b      	ldrh	r3, [r3, #12]
 80139d2:	b29c      	uxth	r4, r3
 80139d4:	2010      	movs	r0, #16
 80139d6:	f7f8 ffaf 	bl	800c938 <lwip_htons>
 80139da:	4603      	mov	r3, r0
 80139dc:	461a      	mov	r2, r3
 80139de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	4322      	orrs	r2, r4
 80139e4:	b292      	uxth	r2, r2
 80139e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	6879      	ldr	r1, [r7, #4]
 80139ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80139ee:	f000 f909 	bl	8013c04 <tcp_output_segment>
 80139f2:	4603      	mov	r3, r0
 80139f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80139f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d016      	beq.n	8013a2c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	8b5b      	ldrh	r3, [r3, #26]
 8013a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	835a      	strh	r2, [r3, #26]
      return err;
 8013a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a10:	e0d3      	b.n	8013bba <tcp_output+0x3de>
 8013a12:	bf00      	nop
 8013a14:	0801c8fc 	.word	0x0801c8fc
 8013a18:	0801ce40 	.word	0x0801ce40
 8013a1c:	0801c950 	.word	0x0801c950
 8013a20:	0801ce58 	.word	0x0801ce58
 8013a24:	2000e110 	.word	0x2000e110
 8013a28:	0801ce80 	.word	0x0801ce80
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	7d1b      	ldrb	r3, [r3, #20]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d006      	beq.n	8013a4a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	8b5b      	ldrh	r3, [r3, #26]
 8013a40:	f023 0303 	bic.w	r3, r3, #3
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4c:	68db      	ldr	r3, [r3, #12]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7f8 ff86 	bl	800c962 <lwip_htonl>
 8013a56:	4604      	mov	r4, r0
 8013a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5a:	891b      	ldrh	r3, [r3, #8]
 8013a5c:	461d      	mov	r5, r3
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	899b      	ldrh	r3, [r3, #12]
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7f8 ff66 	bl	800c938 <lwip_htons>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	f003 0303 	and.w	r3, r3, #3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <tcp_output+0x2a0>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e000      	b.n	8013a7e <tcp_output+0x2a2>
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	442b      	add	r3, r5
 8013a80:	4423      	add	r3, r4
 8013a82:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	da02      	bge.n	8013a96 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68ba      	ldr	r2, [r7, #8]
 8013a94:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a98:	891b      	ldrh	r3, [r3, #8]
 8013a9a:	461c      	mov	r4, r3
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	899b      	ldrh	r3, [r3, #12]
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f8 ff47 	bl	800c938 <lwip_htons>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	f003 0303 	and.w	r3, r3, #3
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d001      	beq.n	8013aba <tcp_output+0x2de>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e000      	b.n	8013abc <tcp_output+0x2e0>
 8013aba:	2300      	movs	r3, #0
 8013abc:	4423      	add	r3, r4
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d049      	beq.n	8013b56 <tcp_output+0x37a>
      seg->next = NULL;
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d105      	bne.n	8013adc <tcp_output+0x300>
        pcb->unacked = seg;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ad4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad8:	623b      	str	r3, [r7, #32]
 8013ada:	e03f      	b.n	8013b5c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f8 ff3d 	bl	800c962 <lwip_htonl>
 8013ae8:	4604      	mov	r4, r0
 8013aea:	6a3b      	ldr	r3, [r7, #32]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7f8 ff36 	bl	800c962 <lwip_htonl>
 8013af6:	4603      	mov	r3, r0
 8013af8:	1ae3      	subs	r3, r4, r3
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	da24      	bge.n	8013b48 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	3370      	adds	r3, #112	@ 0x70
 8013b02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013b04:	e002      	b.n	8013b0c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d011      	beq.n	8013b38 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f8 ff20 	bl	800c962 <lwip_htonl>
 8013b22:	4604      	mov	r4, r0
 8013b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b26:	68db      	ldr	r3, [r3, #12]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7f8 ff19 	bl	800c962 <lwip_htonl>
 8013b30:	4603      	mov	r3, r0
 8013b32:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	dbe6      	blt.n	8013b06 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	e009      	b.n	8013b5c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013b48:	6a3b      	ldr	r3, [r7, #32]
 8013b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b4c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013b4e:	6a3b      	ldr	r3, [r7, #32]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	623b      	str	r3, [r7, #32]
 8013b54:	e002      	b.n	8013b5c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013b56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b58:	f7fb ff1f 	bl	800f99a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d012      	beq.n	8013b8e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7f8 fef7 	bl	800c962 <lwip_htonl>
 8013b74:	4602      	mov	r2, r0
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b7e:	8912      	ldrh	r2, [r2, #8]
 8013b80:	4413      	add	r3, r2
  while (seg != NULL &&
 8013b82:	69ba      	ldr	r2, [r7, #24]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	f4bf aed9 	bcs.w	801393c <tcp_output+0x160>
 8013b8a:	e000      	b.n	8013b8e <tcp_output+0x3b2>
      break;
 8013b8c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d108      	bne.n	8013ba8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013b9e:	e004      	b.n	8013baa <tcp_output+0x3ce>
    goto output_done;
 8013ba0:	bf00      	nop
 8013ba2:	e002      	b.n	8013baa <tcp_output+0x3ce>
    goto output_done;
 8013ba4:	bf00      	nop
 8013ba6:	e000      	b.n	8013baa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013ba8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8b5b      	ldrh	r3, [r3, #26]
 8013bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013bb8:	2300      	movs	r3, #0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3728      	adds	r7, #40	@ 0x28
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8013bc2:	bf00      	nop

08013bc4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d106      	bne.n	8013be0 <tcp_output_segment_busy+0x1c>
 8013bd2:	4b09      	ldr	r3, [pc, #36]	@ (8013bf8 <tcp_output_segment_busy+0x34>)
 8013bd4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013bd8:	4908      	ldr	r1, [pc, #32]	@ (8013bfc <tcp_output_segment_busy+0x38>)
 8013bda:	4809      	ldr	r0, [pc, #36]	@ (8013c00 <tcp_output_segment_busy+0x3c>)
 8013bdc:	f004 fba2 	bl	8018324 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	7b9b      	ldrb	r3, [r3, #14]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d001      	beq.n	8013bee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013bea:	2301      	movs	r3, #1
 8013bec:	e000      	b.n	8013bf0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	0801c8fc 	.word	0x0801c8fc
 8013bfc:	0801ce98 	.word	0x0801ce98
 8013c00:	0801c950 	.word	0x0801c950

08013c04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b08c      	sub	sp, #48	@ 0x30
 8013c08:	af04      	add	r7, sp, #16
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <tcp_output_segment+0x20>
 8013c16:	4b64      	ldr	r3, [pc, #400]	@ (8013da8 <tcp_output_segment+0x1a4>)
 8013c18:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013c1c:	4963      	ldr	r1, [pc, #396]	@ (8013dac <tcp_output_segment+0x1a8>)
 8013c1e:	4864      	ldr	r0, [pc, #400]	@ (8013db0 <tcp_output_segment+0x1ac>)
 8013c20:	f004 fb80 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <tcp_output_segment+0x34>
 8013c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8013da8 <tcp_output_segment+0x1a4>)
 8013c2c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013c30:	4960      	ldr	r1, [pc, #384]	@ (8013db4 <tcp_output_segment+0x1b0>)
 8013c32:	485f      	ldr	r0, [pc, #380]	@ (8013db0 <tcp_output_segment+0x1ac>)
 8013c34:	f004 fb76 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d106      	bne.n	8013c4c <tcp_output_segment+0x48>
 8013c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8013da8 <tcp_output_segment+0x1a4>)
 8013c40:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013c44:	495c      	ldr	r1, [pc, #368]	@ (8013db8 <tcp_output_segment+0x1b4>)
 8013c46:	485a      	ldr	r0, [pc, #360]	@ (8013db0 <tcp_output_segment+0x1ac>)
 8013c48:	f004 fb6c 	bl	8018324 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f7ff ffb9 	bl	8013bc4 <tcp_output_segment_busy>
 8013c52:	4603      	mov	r3, r0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d001      	beq.n	8013c5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	e0a1      	b.n	8013da0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68dc      	ldr	r4, [r3, #12]
 8013c64:	4610      	mov	r0, r2
 8013c66:	f7f8 fe7c 	bl	800c962 <lwip_htonl>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	68dc      	ldr	r4, [r3, #12]
 8013c76:	4610      	mov	r0, r2
 8013c78:	f7f8 fe5e 	bl	800c938 <lwip_htons>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013c88:	441a      	add	r2, r3
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	3314      	adds	r3, #20
 8013c94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	7a9b      	ldrb	r3, [r3, #10]
 8013c9a:	f003 0301 	and.w	r3, r3, #1
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d015      	beq.n	8013cce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	6879      	ldr	r1, [r7, #4]
 8013caa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013cae:	f7fc fa39 	bl	8010124 <tcp_eff_send_mss_netif>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013cb6:	8b7b      	ldrh	r3, [r7, #26]
 8013cb8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f8 fe50 	bl	800c962 <lwip_htonl>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	3304      	adds	r3, #4
 8013ccc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	da02      	bge.n	8013cde <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d10c      	bne.n	8013d00 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013ce6:	4b35      	ldr	r3, [pc, #212]	@ (8013dbc <tcp_output_segment+0x1b8>)
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7f8 fe34 	bl	800c962 <lwip_htonl>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	68da      	ldr	r2, [r3, #12]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	8959      	ldrh	r1, [r3, #10]
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	8b3a      	ldrh	r2, [r7, #24]
 8013d1a:	1a8a      	subs	r2, r1, r2
 8013d1c:	b292      	uxth	r2, r2
 8013d1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	8919      	ldrh	r1, [r3, #8]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	8b3a      	ldrh	r2, [r7, #24]
 8013d2c:	1a8a      	subs	r2, r1, r2
 8013d2e:	b292      	uxth	r2, r2
 8013d30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	68fa      	ldr	r2, [r7, #12]
 8013d38:	68d2      	ldr	r2, [r2, #12]
 8013d3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	741a      	strb	r2, [r3, #16]
 8013d44:	2200      	movs	r2, #0
 8013d46:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68da      	ldr	r2, [r3, #12]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	7a9b      	ldrb	r3, [r3, #10]
 8013d50:	f003 0301 	and.w	r3, r3, #1
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d001      	beq.n	8013d5c <tcp_output_segment+0x158>
 8013d58:	2318      	movs	r3, #24
 8013d5a:	e000      	b.n	8013d5e <tcp_output_segment+0x15a>
 8013d5c:	2314      	movs	r3, #20
 8013d5e:	4413      	add	r3, r2
 8013d60:	69fa      	ldr	r2, [r7, #28]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d006      	beq.n	8013d74 <tcp_output_segment+0x170>
 8013d66:	4b10      	ldr	r3, [pc, #64]	@ (8013da8 <tcp_output_segment+0x1a4>)
 8013d68:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013d6c:	4914      	ldr	r1, [pc, #80]	@ (8013dc0 <tcp_output_segment+0x1bc>)
 8013d6e:	4810      	ldr	r0, [pc, #64]	@ (8013db0 <tcp_output_segment+0x1ac>)
 8013d70:	f004 fad8 	bl	8018324 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6858      	ldr	r0, [r3, #4]
 8013d78:	68b9      	ldr	r1, [r7, #8]
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	1d1c      	adds	r4, r3, #4
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	7add      	ldrb	r5, [r3, #11]
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	7a9b      	ldrb	r3, [r3, #10]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	9202      	str	r2, [sp, #8]
 8013d8a:	2206      	movs	r2, #6
 8013d8c:	9201      	str	r2, [sp, #4]
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	462b      	mov	r3, r5
 8013d92:	4622      	mov	r2, r4
 8013d94:	f002 fbaa 	bl	80164ec <ip4_output_if>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3720      	adds	r7, #32
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bdb0      	pop	{r4, r5, r7, pc}
 8013da8:	0801c8fc 	.word	0x0801c8fc
 8013dac:	0801cec0 	.word	0x0801cec0
 8013db0:	0801c950 	.word	0x0801c950
 8013db4:	0801cee0 	.word	0x0801cee0
 8013db8:	0801cf00 	.word	0x0801cf00
 8013dbc:	2000e0c4 	.word	0x2000e0c4
 8013dc0:	0801cf24 	.word	0x0801cf24

08013dc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013dc4:	b5b0      	push	{r4, r5, r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d106      	bne.n	8013de0 <tcp_rexmit_rto_prepare+0x1c>
 8013dd2:	4b31      	ldr	r3, [pc, #196]	@ (8013e98 <tcp_rexmit_rto_prepare+0xd4>)
 8013dd4:	f240 6263 	movw	r2, #1635	@ 0x663
 8013dd8:	4930      	ldr	r1, [pc, #192]	@ (8013e9c <tcp_rexmit_rto_prepare+0xd8>)
 8013dda:	4831      	ldr	r0, [pc, #196]	@ (8013ea0 <tcp_rexmit_rto_prepare+0xdc>)
 8013ddc:	f004 faa2 	bl	8018324 <iprintf>

  if (pcb->unacked == NULL) {
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d102      	bne.n	8013dee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013de8:	f06f 0305 	mvn.w	r3, #5
 8013dec:	e050      	b.n	8013e90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013df2:	60fb      	str	r3, [r7, #12]
 8013df4:	e00b      	b.n	8013e0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f7ff fee4 	bl	8013bc4 <tcp_output_segment_busy>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d002      	beq.n	8013e08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013e02:	f06f 0305 	mvn.w	r3, #5
 8013e06:	e043      	b.n	8013e90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	60fb      	str	r3, [r7, #12]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d1ef      	bne.n	8013df6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013e16:	68f8      	ldr	r0, [r7, #12]
 8013e18:	f7ff fed4 	bl	8013bc4 <tcp_output_segment_busy>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d002      	beq.n	8013e28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013e22:	f06f 0305 	mvn.w	r3, #5
 8013e26:	e033      	b.n	8013e90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8b5b      	ldrh	r3, [r3, #26]
 8013e42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7f8 fd85 	bl	800c962 <lwip_htonl>
 8013e58:	4604      	mov	r4, r0
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	891b      	ldrh	r3, [r3, #8]
 8013e5e:	461d      	mov	r5, r3
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	899b      	ldrh	r3, [r3, #12]
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7f8 fd65 	bl	800c938 <lwip_htons>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	f003 0303 	and.w	r3, r3, #3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d001      	beq.n	8013e7e <tcp_rexmit_rto_prepare+0xba>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e000      	b.n	8013e80 <tcp_rexmit_rto_prepare+0xbc>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	442b      	add	r3, r5
 8013e82:	18e2      	adds	r2, r4, r3
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013e8e:	2300      	movs	r3, #0
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3710      	adds	r7, #16
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bdb0      	pop	{r4, r5, r7, pc}
 8013e98:	0801c8fc 	.word	0x0801c8fc
 8013e9c:	0801cf38 	.word	0x0801cf38
 8013ea0:	0801c950 	.word	0x0801c950

08013ea4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d106      	bne.n	8013ec0 <tcp_rexmit_rto_commit+0x1c>
 8013eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8013ee8 <tcp_rexmit_rto_commit+0x44>)
 8013eb4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013eb8:	490c      	ldr	r1, [pc, #48]	@ (8013eec <tcp_rexmit_rto_commit+0x48>)
 8013eba:	480d      	ldr	r0, [pc, #52]	@ (8013ef0 <tcp_rexmit_rto_commit+0x4c>)
 8013ebc:	f004 fa32 	bl	8018324 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013ec6:	2bff      	cmp	r3, #255	@ 0xff
 8013ec8:	d007      	beq.n	8013eda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	b2da      	uxtb	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff fc7e 	bl	80137dc <tcp_output>
}
 8013ee0:	bf00      	nop
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	0801c8fc 	.word	0x0801c8fc
 8013eec:	0801cf5c 	.word	0x0801cf5c
 8013ef0:	0801c950 	.word	0x0801c950

08013ef4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <tcp_rexmit_rto+0x1c>
 8013f02:	4b0a      	ldr	r3, [pc, #40]	@ (8013f2c <tcp_rexmit_rto+0x38>)
 8013f04:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013f08:	4909      	ldr	r1, [pc, #36]	@ (8013f30 <tcp_rexmit_rto+0x3c>)
 8013f0a:	480a      	ldr	r0, [pc, #40]	@ (8013f34 <tcp_rexmit_rto+0x40>)
 8013f0c:	f004 fa0a 	bl	8018324 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7ff ff57 	bl	8013dc4 <tcp_rexmit_rto_prepare>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7ff ffc1 	bl	8013ea4 <tcp_rexmit_rto_commit>
  }
}
 8013f22:	bf00      	nop
 8013f24:	3708      	adds	r7, #8
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	0801c8fc 	.word	0x0801c8fc
 8013f30:	0801cf80 	.word	0x0801cf80
 8013f34:	0801c950 	.word	0x0801c950

08013f38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d106      	bne.n	8013f54 <tcp_rexmit+0x1c>
 8013f46:	4b2f      	ldr	r3, [pc, #188]	@ (8014004 <tcp_rexmit+0xcc>)
 8013f48:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013f4c:	492e      	ldr	r1, [pc, #184]	@ (8014008 <tcp_rexmit+0xd0>)
 8013f4e:	482f      	ldr	r0, [pc, #188]	@ (801400c <tcp_rexmit+0xd4>)
 8013f50:	f004 f9e8 	bl	8018324 <iprintf>

  if (pcb->unacked == NULL) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d102      	bne.n	8013f62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013f5c:	f06f 0305 	mvn.w	r3, #5
 8013f60:	e04c      	b.n	8013ffc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013f68:	68b8      	ldr	r0, [r7, #8]
 8013f6a:	f7ff fe2b 	bl	8013bc4 <tcp_output_segment_busy>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d002      	beq.n	8013f7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013f74:	f06f 0305 	mvn.w	r3, #5
 8013f78:	e040      	b.n	8013ffc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	681a      	ldr	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	336c      	adds	r3, #108	@ 0x6c
 8013f86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013f88:	e002      	b.n	8013f90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d011      	beq.n	8013fbc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7f8 fcde 	bl	800c962 <lwip_htonl>
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7f8 fcd7 	bl	800c962 <lwip_htonl>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	dbe6      	blt.n	8013f8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	68ba      	ldr	r2, [r7, #8]
 8013fc8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d103      	bne.n	8013fda <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013fe0:	2bff      	cmp	r3, #255	@ 0xff
 8013fe2:	d007      	beq.n	8013ff4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013fea:	3301      	adds	r3, #1
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	bd90      	pop	{r4, r7, pc}
 8014004:	0801c8fc 	.word	0x0801c8fc
 8014008:	0801cf9c 	.word	0x0801cf9c
 801400c:	0801c950 	.word	0x0801c950

08014010 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <tcp_rexmit_fast+0x1c>
 801401e:	4b2a      	ldr	r3, [pc, #168]	@ (80140c8 <tcp_rexmit_fast+0xb8>)
 8014020:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014024:	4929      	ldr	r1, [pc, #164]	@ (80140cc <tcp_rexmit_fast+0xbc>)
 8014026:	482a      	ldr	r0, [pc, #168]	@ (80140d0 <tcp_rexmit_fast+0xc0>)
 8014028:	f004 f97c 	bl	8018324 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014030:	2b00      	cmp	r3, #0
 8014032:	d045      	beq.n	80140c0 <tcp_rexmit_fast+0xb0>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	8b5b      	ldrh	r3, [r3, #26]
 8014038:	f003 0304 	and.w	r3, r3, #4
 801403c:	2b00      	cmp	r3, #0
 801403e:	d13f      	bne.n	80140c0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f7ff ff79 	bl	8013f38 <tcp_rexmit>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d139      	bne.n	80140c0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014058:	4293      	cmp	r3, r2
 801405a:	bf28      	it	cs
 801405c:	4613      	movcs	r3, r2
 801405e:	b29b      	uxth	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	da00      	bge.n	8014066 <tcp_rexmit_fast+0x56>
 8014064:	3301      	adds	r3, #1
 8014066:	105b      	asrs	r3, r3, #1
 8014068:	b29a      	uxth	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014076:	461a      	mov	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801407c:	005b      	lsls	r3, r3, #1
 801407e:	429a      	cmp	r2, r3
 8014080:	d206      	bcs.n	8014090 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	b29a      	uxth	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801409a:	4619      	mov	r1, r3
 801409c:	0049      	lsls	r1, r1, #1
 801409e:	440b      	add	r3, r1
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	4413      	add	r3, r2
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8b5b      	ldrh	r3, [r3, #26]
 80140b0:	f043 0304 	orr.w	r3, r3, #4
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2200      	movs	r2, #0
 80140be:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80140c0:	bf00      	nop
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	0801c8fc 	.word	0x0801c8fc
 80140cc:	0801cfb4 	.word	0x0801cfb4
 80140d0:	0801c950 	.word	0x0801c950

080140d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b086      	sub	sp, #24
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	607b      	str	r3, [r7, #4]
 80140de:	460b      	mov	r3, r1
 80140e0:	817b      	strh	r3, [r7, #10]
 80140e2:	4613      	mov	r3, r2
 80140e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80140e6:	897a      	ldrh	r2, [r7, #10]
 80140e8:	893b      	ldrh	r3, [r7, #8]
 80140ea:	4413      	add	r3, r2
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	3314      	adds	r3, #20
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80140f6:	4619      	mov	r1, r3
 80140f8:	2022      	movs	r0, #34	@ 0x22
 80140fa:	f7f9 fce5 	bl	800dac8 <pbuf_alloc>
 80140fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d04d      	beq.n	80141a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014106:	897b      	ldrh	r3, [r7, #10]
 8014108:	3313      	adds	r3, #19
 801410a:	697a      	ldr	r2, [r7, #20]
 801410c:	8952      	ldrh	r2, [r2, #10]
 801410e:	4293      	cmp	r3, r2
 8014110:	db06      	blt.n	8014120 <tcp_output_alloc_header_common+0x4c>
 8014112:	4b26      	ldr	r3, [pc, #152]	@ (80141ac <tcp_output_alloc_header_common+0xd8>)
 8014114:	f240 7223 	movw	r2, #1827	@ 0x723
 8014118:	4925      	ldr	r1, [pc, #148]	@ (80141b0 <tcp_output_alloc_header_common+0xdc>)
 801411a:	4826      	ldr	r0, [pc, #152]	@ (80141b4 <tcp_output_alloc_header_common+0xe0>)
 801411c:	f004 f902 	bl	8018324 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014126:	8c3b      	ldrh	r3, [r7, #32]
 8014128:	4618      	mov	r0, r3
 801412a:	f7f8 fc05 	bl	800c938 <lwip_htons>
 801412e:	4603      	mov	r3, r0
 8014130:	461a      	mov	r2, r3
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014138:	4618      	mov	r0, r3
 801413a:	f7f8 fbfd 	bl	800c938 <lwip_htons>
 801413e:	4603      	mov	r3, r0
 8014140:	461a      	mov	r2, r3
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f7f8 fc08 	bl	800c962 <lwip_htonl>
 8014152:	4602      	mov	r2, r0
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014158:	897b      	ldrh	r3, [r7, #10]
 801415a:	089b      	lsrs	r3, r3, #2
 801415c:	b29b      	uxth	r3, r3
 801415e:	3305      	adds	r3, #5
 8014160:	b29b      	uxth	r3, r3
 8014162:	031b      	lsls	r3, r3, #12
 8014164:	b29a      	uxth	r2, r3
 8014166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801416a:	b29b      	uxth	r3, r3
 801416c:	4313      	orrs	r3, r2
 801416e:	b29b      	uxth	r3, r3
 8014170:	4618      	mov	r0, r3
 8014172:	f7f8 fbe1 	bl	800c938 <lwip_htons>
 8014176:	4603      	mov	r3, r0
 8014178:	461a      	mov	r2, r3
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801417e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014180:	4618      	mov	r0, r3
 8014182:	f7f8 fbd9 	bl	800c938 <lwip_htons>
 8014186:	4603      	mov	r3, r0
 8014188:	461a      	mov	r2, r3
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801418e:	693b      	ldr	r3, [r7, #16]
 8014190:	2200      	movs	r2, #0
 8014192:	741a      	strb	r2, [r3, #16]
 8014194:	2200      	movs	r2, #0
 8014196:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	2200      	movs	r2, #0
 801419c:	749a      	strb	r2, [r3, #18]
 801419e:	2200      	movs	r2, #0
 80141a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80141a2:	697b      	ldr	r3, [r7, #20]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3718      	adds	r7, #24
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	0801c8fc 	.word	0x0801c8fc
 80141b0:	0801cfd4 	.word	0x0801cfd4
 80141b4:	0801c950 	.word	0x0801c950

080141b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80141b8:	b5b0      	push	{r4, r5, r7, lr}
 80141ba:	b08a      	sub	sp, #40	@ 0x28
 80141bc:	af04      	add	r7, sp, #16
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	607b      	str	r3, [r7, #4]
 80141c2:	460b      	mov	r3, r1
 80141c4:	817b      	strh	r3, [r7, #10]
 80141c6:	4613      	mov	r3, r2
 80141c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d106      	bne.n	80141de <tcp_output_alloc_header+0x26>
 80141d0:	4b15      	ldr	r3, [pc, #84]	@ (8014228 <tcp_output_alloc_header+0x70>)
 80141d2:	f240 7242 	movw	r2, #1858	@ 0x742
 80141d6:	4915      	ldr	r1, [pc, #84]	@ (801422c <tcp_output_alloc_header+0x74>)
 80141d8:	4815      	ldr	r0, [pc, #84]	@ (8014230 <tcp_output_alloc_header+0x78>)
 80141da:	f004 f8a3 	bl	8018324 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	8adb      	ldrh	r3, [r3, #22]
 80141e6:	68fa      	ldr	r2, [r7, #12]
 80141e8:	8b12      	ldrh	r2, [r2, #24]
 80141ea:	68f9      	ldr	r1, [r7, #12]
 80141ec:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80141ee:	893d      	ldrh	r5, [r7, #8]
 80141f0:	897c      	ldrh	r4, [r7, #10]
 80141f2:	9103      	str	r1, [sp, #12]
 80141f4:	2110      	movs	r1, #16
 80141f6:	9102      	str	r1, [sp, #8]
 80141f8:	9201      	str	r2, [sp, #4]
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	462a      	mov	r2, r5
 8014200:	4621      	mov	r1, r4
 8014202:	f7ff ff67 	bl	80140d4 <tcp_output_alloc_header_common>
 8014206:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d006      	beq.n	801421c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014216:	441a      	add	r2, r3
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801421c:	697b      	ldr	r3, [r7, #20]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3718      	adds	r7, #24
 8014222:	46bd      	mov	sp, r7
 8014224:	bdb0      	pop	{r4, r5, r7, pc}
 8014226:	bf00      	nop
 8014228:	0801c8fc 	.word	0x0801c8fc
 801422c:	0801d004 	.word	0x0801d004
 8014230:	0801c950 	.word	0x0801c950

08014234 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b088      	sub	sp, #32
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	4611      	mov	r1, r2
 8014240:	461a      	mov	r2, r3
 8014242:	460b      	mov	r3, r1
 8014244:	71fb      	strb	r3, [r7, #7]
 8014246:	4613      	mov	r3, r2
 8014248:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801424a:	2300      	movs	r3, #0
 801424c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d106      	bne.n	8014262 <tcp_output_fill_options+0x2e>
 8014254:	4b12      	ldr	r3, [pc, #72]	@ (80142a0 <tcp_output_fill_options+0x6c>)
 8014256:	f240 7256 	movw	r2, #1878	@ 0x756
 801425a:	4912      	ldr	r1, [pc, #72]	@ (80142a4 <tcp_output_fill_options+0x70>)
 801425c:	4812      	ldr	r0, [pc, #72]	@ (80142a8 <tcp_output_fill_options+0x74>)
 801425e:	f004 f861 	bl	8018324 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	3314      	adds	r3, #20
 801426c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801426e:	8bfb      	ldrh	r3, [r7, #30]
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	461a      	mov	r2, r3
 8014274:	79fb      	ldrb	r3, [r7, #7]
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	f003 0304 	and.w	r3, r3, #4
 801427c:	4413      	add	r3, r2
 801427e:	3314      	adds	r3, #20
 8014280:	69ba      	ldr	r2, [r7, #24]
 8014282:	4413      	add	r3, r2
 8014284:	697a      	ldr	r2, [r7, #20]
 8014286:	429a      	cmp	r2, r3
 8014288:	d006      	beq.n	8014298 <tcp_output_fill_options+0x64>
 801428a:	4b05      	ldr	r3, [pc, #20]	@ (80142a0 <tcp_output_fill_options+0x6c>)
 801428c:	f240 7275 	movw	r2, #1909	@ 0x775
 8014290:	4906      	ldr	r1, [pc, #24]	@ (80142ac <tcp_output_fill_options+0x78>)
 8014292:	4805      	ldr	r0, [pc, #20]	@ (80142a8 <tcp_output_fill_options+0x74>)
 8014294:	f004 f846 	bl	8018324 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014298:	bf00      	nop
 801429a:	3720      	adds	r7, #32
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	0801c8fc 	.word	0x0801c8fc
 80142a4:	0801d02c 	.word	0x0801d02c
 80142a8:	0801c950 	.word	0x0801c950
 80142ac:	0801cf24 	.word	0x0801cf24

080142b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08a      	sub	sp, #40	@ 0x28
 80142b4:	af04      	add	r7, sp, #16
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
 80142bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d106      	bne.n	80142d2 <tcp_output_control_segment+0x22>
 80142c4:	4b1c      	ldr	r3, [pc, #112]	@ (8014338 <tcp_output_control_segment+0x88>)
 80142c6:	f240 7287 	movw	r2, #1927	@ 0x787
 80142ca:	491c      	ldr	r1, [pc, #112]	@ (801433c <tcp_output_control_segment+0x8c>)
 80142cc:	481c      	ldr	r0, [pc, #112]	@ (8014340 <tcp_output_control_segment+0x90>)
 80142ce:	f004 f829 	bl	8018324 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80142d2:	683a      	ldr	r2, [r7, #0]
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f7fe faea 	bl	80128b0 <tcp_route>
 80142dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d102      	bne.n	80142ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80142e4:	23fc      	movs	r3, #252	@ 0xfc
 80142e6:	75fb      	strb	r3, [r7, #23]
 80142e8:	e01c      	b.n	8014324 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d006      	beq.n	80142fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	7adb      	ldrb	r3, [r3, #11]
 80142f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	7a9b      	ldrb	r3, [r3, #10]
 80142fa:	757b      	strb	r3, [r7, #21]
 80142fc:	e003      	b.n	8014306 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80142fe:	23ff      	movs	r3, #255	@ 0xff
 8014300:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014302:	2300      	movs	r3, #0
 8014304:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014306:	7dba      	ldrb	r2, [r7, #22]
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	9302      	str	r3, [sp, #8]
 801430c:	2306      	movs	r3, #6
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	7d7b      	ldrb	r3, [r7, #21]
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	4613      	mov	r3, r2
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	6879      	ldr	r1, [r7, #4]
 801431a:	68b8      	ldr	r0, [r7, #8]
 801431c:	f002 f8e6 	bl	80164ec <ip4_output_if>
 8014320:	4603      	mov	r3, r0
 8014322:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014324:	68b8      	ldr	r0, [r7, #8]
 8014326:	f7f9 feb3 	bl	800e090 <pbuf_free>
  return err;
 801432a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801432e:	4618      	mov	r0, r3
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	0801c8fc 	.word	0x0801c8fc
 801433c:	0801d054 	.word	0x0801d054
 8014340:	0801c950 	.word	0x0801c950

08014344 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014344:	b590      	push	{r4, r7, lr}
 8014346:	b08b      	sub	sp, #44	@ 0x2c
 8014348:	af04      	add	r7, sp, #16
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d106      	bne.n	8014366 <tcp_rst+0x22>
 8014358:	4b1f      	ldr	r3, [pc, #124]	@ (80143d8 <tcp_rst+0x94>)
 801435a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801435e:	491f      	ldr	r1, [pc, #124]	@ (80143dc <tcp_rst+0x98>)
 8014360:	481f      	ldr	r0, [pc, #124]	@ (80143e0 <tcp_rst+0x9c>)
 8014362:	f003 ffdf 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014368:	2b00      	cmp	r3, #0
 801436a:	d106      	bne.n	801437a <tcp_rst+0x36>
 801436c:	4b1a      	ldr	r3, [pc, #104]	@ (80143d8 <tcp_rst+0x94>)
 801436e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014372:	491c      	ldr	r1, [pc, #112]	@ (80143e4 <tcp_rst+0xa0>)
 8014374:	481a      	ldr	r0, [pc, #104]	@ (80143e0 <tcp_rst+0x9c>)
 8014376:	f003 ffd5 	bl	8018324 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801437a:	2300      	movs	r3, #0
 801437c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801437e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8014382:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014384:	7dfb      	ldrb	r3, [r7, #23]
 8014386:	b29c      	uxth	r4, r3
 8014388:	68b8      	ldr	r0, [r7, #8]
 801438a:	f7f8 faea 	bl	800c962 <lwip_htonl>
 801438e:	4602      	mov	r2, r0
 8014390:	8abb      	ldrh	r3, [r7, #20]
 8014392:	9303      	str	r3, [sp, #12]
 8014394:	2314      	movs	r3, #20
 8014396:	9302      	str	r3, [sp, #8]
 8014398:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801439a:	9301      	str	r3, [sp, #4]
 801439c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	4613      	mov	r3, r2
 80143a2:	2200      	movs	r2, #0
 80143a4:	4621      	mov	r1, r4
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7ff fe94 	bl	80140d4 <tcp_output_alloc_header_common>
 80143ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00c      	beq.n	80143ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143b4:	7dfb      	ldrb	r3, [r7, #23]
 80143b6:	2200      	movs	r2, #0
 80143b8:	6939      	ldr	r1, [r7, #16]
 80143ba:	68f8      	ldr	r0, [r7, #12]
 80143bc:	f7ff ff3a 	bl	8014234 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80143c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c2:	683a      	ldr	r2, [r7, #0]
 80143c4:	6939      	ldr	r1, [r7, #16]
 80143c6:	68f8      	ldr	r0, [r7, #12]
 80143c8:	f7ff ff72 	bl	80142b0 <tcp_output_control_segment>
 80143cc:	e000      	b.n	80143d0 <tcp_rst+0x8c>
    return;
 80143ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd90      	pop	{r4, r7, pc}
 80143d6:	bf00      	nop
 80143d8:	0801c8fc 	.word	0x0801c8fc
 80143dc:	0801d080 	.word	0x0801d080
 80143e0:	0801c950 	.word	0x0801c950
 80143e4:	0801d09c 	.word	0x0801d09c

080143e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80143e8:	b590      	push	{r4, r7, lr}
 80143ea:	b087      	sub	sp, #28
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80143f0:	2300      	movs	r3, #0
 80143f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80143f4:	2300      	movs	r3, #0
 80143f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_send_empty_ack+0x24>
 80143fe:	4b28      	ldr	r3, [pc, #160]	@ (80144a0 <tcp_send_empty_ack+0xb8>)
 8014400:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014404:	4927      	ldr	r1, [pc, #156]	@ (80144a4 <tcp_send_empty_ack+0xbc>)
 8014406:	4828      	ldr	r0, [pc, #160]	@ (80144a8 <tcp_send_empty_ack+0xc0>)
 8014408:	f003 ff8c 	bl	8018324 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801440c:	7dfb      	ldrb	r3, [r7, #23]
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	b2db      	uxtb	r3, r3
 8014412:	f003 0304 	and.w	r3, r3, #4
 8014416:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014418:	7d7b      	ldrb	r3, [r7, #21]
 801441a:	b29c      	uxth	r4, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014420:	4618      	mov	r0, r3
 8014422:	f7f8 fa9e 	bl	800c962 <lwip_htonl>
 8014426:	4603      	mov	r3, r0
 8014428:	2200      	movs	r2, #0
 801442a:	4621      	mov	r1, r4
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7ff fec3 	bl	80141b8 <tcp_output_alloc_header>
 8014432:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d109      	bne.n	801444e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	8b5b      	ldrh	r3, [r3, #26]
 801443e:	f043 0303 	orr.w	r3, r3, #3
 8014442:	b29a      	uxth	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014448:	f06f 0301 	mvn.w	r3, #1
 801444c:	e023      	b.n	8014496 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801444e:	7dbb      	ldrb	r3, [r7, #22]
 8014450:	7dfa      	ldrb	r2, [r7, #23]
 8014452:	6939      	ldr	r1, [r7, #16]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f7ff feed 	bl	8014234 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	3304      	adds	r3, #4
 8014460:	6939      	ldr	r1, [r7, #16]
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7ff ff24 	bl	80142b0 <tcp_output_control_segment>
 8014468:	4603      	mov	r3, r0
 801446a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801446c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d007      	beq.n	8014484 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	8b5b      	ldrh	r3, [r3, #26]
 8014478:	f043 0303 	orr.w	r3, r3, #3
 801447c:	b29a      	uxth	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	835a      	strh	r2, [r3, #26]
 8014482:	e006      	b.n	8014492 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	8b5b      	ldrh	r3, [r3, #26]
 8014488:	f023 0303 	bic.w	r3, r3, #3
 801448c:	b29a      	uxth	r2, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014496:	4618      	mov	r0, r3
 8014498:	371c      	adds	r7, #28
 801449a:	46bd      	mov	sp, r7
 801449c:	bd90      	pop	{r4, r7, pc}
 801449e:	bf00      	nop
 80144a0:	0801c8fc 	.word	0x0801c8fc
 80144a4:	0801d0b8 	.word	0x0801d0b8
 80144a8:	0801c950 	.word	0x0801c950

080144ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80144ac:	b590      	push	{r4, r7, lr}
 80144ae:	b087      	sub	sp, #28
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80144b4:	2300      	movs	r3, #0
 80144b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d106      	bne.n	80144cc <tcp_keepalive+0x20>
 80144be:	4b18      	ldr	r3, [pc, #96]	@ (8014520 <tcp_keepalive+0x74>)
 80144c0:	f640 0224 	movw	r2, #2084	@ 0x824
 80144c4:	4917      	ldr	r1, [pc, #92]	@ (8014524 <tcp_keepalive+0x78>)
 80144c6:	4818      	ldr	r0, [pc, #96]	@ (8014528 <tcp_keepalive+0x7c>)
 80144c8:	f003 ff2c 	bl	8018324 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80144cc:	7dfb      	ldrb	r3, [r7, #23]
 80144ce:	b29c      	uxth	r4, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144d4:	3b01      	subs	r3, #1
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7f8 fa43 	bl	800c962 <lwip_htonl>
 80144dc:	4603      	mov	r3, r0
 80144de:	2200      	movs	r2, #0
 80144e0:	4621      	mov	r1, r4
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f7ff fe68 	bl	80141b8 <tcp_output_alloc_header>
 80144e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d102      	bne.n	80144f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80144f0:	f04f 33ff 	mov.w	r3, #4294967295
 80144f4:	e010      	b.n	8014518 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80144f6:	7dfb      	ldrb	r3, [r7, #23]
 80144f8:	2200      	movs	r2, #0
 80144fa:	6939      	ldr	r1, [r7, #16]
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7ff fe99 	bl	8014234 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3304      	adds	r3, #4
 8014508:	6939      	ldr	r1, [r7, #16]
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7ff fed0 	bl	80142b0 <tcp_output_control_segment>
 8014510:	4603      	mov	r3, r0
 8014512:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014518:	4618      	mov	r0, r3
 801451a:	371c      	adds	r7, #28
 801451c:	46bd      	mov	sp, r7
 801451e:	bd90      	pop	{r4, r7, pc}
 8014520:	0801c8fc 	.word	0x0801c8fc
 8014524:	0801d0d8 	.word	0x0801d0d8
 8014528:	0801c950 	.word	0x0801c950

0801452c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b08b      	sub	sp, #44	@ 0x2c
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014534:	2300      	movs	r3, #0
 8014536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d106      	bne.n	801454e <tcp_zero_window_probe+0x22>
 8014540:	4b4c      	ldr	r3, [pc, #304]	@ (8014674 <tcp_zero_window_probe+0x148>)
 8014542:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014546:	494c      	ldr	r1, [pc, #304]	@ (8014678 <tcp_zero_window_probe+0x14c>)
 8014548:	484c      	ldr	r0, [pc, #304]	@ (801467c <tcp_zero_window_probe+0x150>)
 801454a:	f003 feeb 	bl	8018324 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014552:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014554:	6a3b      	ldr	r3, [r7, #32]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d101      	bne.n	801455e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801455a:	2300      	movs	r3, #0
 801455c:	e086      	b.n	801466c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014564:	2bff      	cmp	r3, #255	@ 0xff
 8014566:	d007      	beq.n	8014578 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801456e:	3301      	adds	r3, #1
 8014570:	b2da      	uxtb	r2, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014578:	6a3b      	ldr	r3, [r7, #32]
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	899b      	ldrh	r3, [r3, #12]
 801457e:	b29b      	uxth	r3, r3
 8014580:	4618      	mov	r0, r3
 8014582:	f7f8 f9d9 	bl	800c938 <lwip_htons>
 8014586:	4603      	mov	r3, r0
 8014588:	b2db      	uxtb	r3, r3
 801458a:	f003 0301 	and.w	r3, r3, #1
 801458e:	2b00      	cmp	r3, #0
 8014590:	d005      	beq.n	801459e <tcp_zero_window_probe+0x72>
 8014592:	6a3b      	ldr	r3, [r7, #32]
 8014594:	891b      	ldrh	r3, [r3, #8]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d101      	bne.n	801459e <tcp_zero_window_probe+0x72>
 801459a:	2301      	movs	r3, #1
 801459c:	e000      	b.n	80145a0 <tcp_zero_window_probe+0x74>
 801459e:	2300      	movs	r3, #0
 80145a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80145a2:	7ffb      	ldrb	r3, [r7, #31]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	bf0c      	ite	eq
 80145a8:	2301      	moveq	r3, #1
 80145aa:	2300      	movne	r3, #0
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80145b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145b4:	b299      	uxth	r1, r3
 80145b6:	6a3b      	ldr	r3, [r7, #32]
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	8bba      	ldrh	r2, [r7, #28]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7ff fdfa 	bl	80141b8 <tcp_output_alloc_header>
 80145c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d102      	bne.n	80145d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80145cc:	f04f 33ff 	mov.w	r3, #4294967295
 80145d0:	e04c      	b.n	801466c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80145d8:	7ffb      	ldrb	r3, [r7, #31]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d011      	beq.n	8014602 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	899b      	ldrh	r3, [r3, #12]
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	b21b      	sxth	r3, r3
 80145e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80145ea:	b21c      	sxth	r4, r3
 80145ec:	2011      	movs	r0, #17
 80145ee:	f7f8 f9a3 	bl	800c938 <lwip_htons>
 80145f2:	4603      	mov	r3, r0
 80145f4:	b21b      	sxth	r3, r3
 80145f6:	4323      	orrs	r3, r4
 80145f8:	b21b      	sxth	r3, r3
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	819a      	strh	r2, [r3, #12]
 8014600:	e010      	b.n	8014624 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	685b      	ldr	r3, [r3, #4]
 8014606:	3314      	adds	r3, #20
 8014608:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	6858      	ldr	r0, [r3, #4]
 801460e:	6a3b      	ldr	r3, [r7, #32]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	891a      	ldrh	r2, [r3, #8]
 8014614:	6a3b      	ldr	r3, [r7, #32]
 8014616:	891b      	ldrh	r3, [r3, #8]
 8014618:	1ad3      	subs	r3, r2, r3
 801461a:	b29b      	uxth	r3, r3
 801461c:	2201      	movs	r2, #1
 801461e:	6939      	ldr	r1, [r7, #16]
 8014620:	f7f9 ff2c 	bl	800e47c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014624:	6a3b      	ldr	r3, [r7, #32]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	4618      	mov	r0, r3
 801462c:	f7f8 f999 	bl	800c962 <lwip_htonl>
 8014630:	4603      	mov	r3, r0
 8014632:	3301      	adds	r3, #1
 8014634:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	1ad3      	subs	r3, r2, r3
 801463e:	2b00      	cmp	r3, #0
 8014640:	da02      	bge.n	8014648 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	68fa      	ldr	r2, [r7, #12]
 8014646:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801464c:	2200      	movs	r2, #0
 801464e:	69b9      	ldr	r1, [r7, #24]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff fdef 	bl	8014234 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	3304      	adds	r3, #4
 801465c:	69b9      	ldr	r1, [r7, #24]
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f7ff fe26 	bl	80142b0 <tcp_output_control_segment>
 8014664:	4603      	mov	r3, r0
 8014666:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014668:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801466c:	4618      	mov	r0, r3
 801466e:	372c      	adds	r7, #44	@ 0x2c
 8014670:	46bd      	mov	sp, r7
 8014672:	bd90      	pop	{r4, r7, pc}
 8014674:	0801c8fc 	.word	0x0801c8fc
 8014678:	0801d0f4 	.word	0x0801d0f4
 801467c:	0801c950 	.word	0x0801c950

08014680 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014688:	f7f9 ffe6 	bl	800e658 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801468c:	4b0a      	ldr	r3, [pc, #40]	@ (80146b8 <tcpip_tcp_timer+0x38>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d103      	bne.n	801469c <tcpip_tcp_timer+0x1c>
 8014694:	4b09      	ldr	r3, [pc, #36]	@ (80146bc <tcpip_tcp_timer+0x3c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d005      	beq.n	80146a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801469c:	2200      	movs	r2, #0
 801469e:	4908      	ldr	r1, [pc, #32]	@ (80146c0 <tcpip_tcp_timer+0x40>)
 80146a0:	20fa      	movs	r0, #250	@ 0xfa
 80146a2:	f000 f8f3 	bl	801488c <sys_timeout>
 80146a6:	e003      	b.n	80146b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80146a8:	4b06      	ldr	r3, [pc, #24]	@ (80146c4 <tcpip_tcp_timer+0x44>)
 80146aa:	2200      	movs	r2, #0
 80146ac:	601a      	str	r2, [r3, #0]
  }
}
 80146ae:	bf00      	nop
 80146b0:	bf00      	nop
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	2000e0d0 	.word	0x2000e0d0
 80146bc:	2000e0d4 	.word	0x2000e0d4
 80146c0:	08014681 	.word	0x08014681
 80146c4:	2000e11c 	.word	0x2000e11c

080146c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80146cc:	4b0a      	ldr	r3, [pc, #40]	@ (80146f8 <tcp_timer_needed+0x30>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d10f      	bne.n	80146f4 <tcp_timer_needed+0x2c>
 80146d4:	4b09      	ldr	r3, [pc, #36]	@ (80146fc <tcp_timer_needed+0x34>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d103      	bne.n	80146e4 <tcp_timer_needed+0x1c>
 80146dc:	4b08      	ldr	r3, [pc, #32]	@ (8014700 <tcp_timer_needed+0x38>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d007      	beq.n	80146f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80146e4:	4b04      	ldr	r3, [pc, #16]	@ (80146f8 <tcp_timer_needed+0x30>)
 80146e6:	2201      	movs	r2, #1
 80146e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80146ea:	2200      	movs	r2, #0
 80146ec:	4905      	ldr	r1, [pc, #20]	@ (8014704 <tcp_timer_needed+0x3c>)
 80146ee:	20fa      	movs	r0, #250	@ 0xfa
 80146f0:	f000 f8cc 	bl	801488c <sys_timeout>
  }
}
 80146f4:	bf00      	nop
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	2000e11c 	.word	0x2000e11c
 80146fc:	2000e0d0 	.word	0x2000e0d0
 8014700:	2000e0d4 	.word	0x2000e0d4
 8014704:	08014681 	.word	0x08014681

08014708 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b086      	sub	sp, #24
 801470c:	af00      	add	r7, sp, #0
 801470e:	60f8      	str	r0, [r7, #12]
 8014710:	60b9      	str	r1, [r7, #8]
 8014712:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014714:	200a      	movs	r0, #10
 8014716:	f7f8 fdc5 	bl	800d2a4 <memp_malloc>
 801471a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d109      	bne.n	8014736 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d151      	bne.n	80147cc <sys_timeout_abs+0xc4>
 8014728:	4b2a      	ldr	r3, [pc, #168]	@ (80147d4 <sys_timeout_abs+0xcc>)
 801472a:	22be      	movs	r2, #190	@ 0xbe
 801472c:	492a      	ldr	r1, [pc, #168]	@ (80147d8 <sys_timeout_abs+0xd0>)
 801472e:	482b      	ldr	r0, [pc, #172]	@ (80147dc <sys_timeout_abs+0xd4>)
 8014730:	f003 fdf8 	bl	8018324 <iprintf>
    return;
 8014734:	e04a      	b.n	80147cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	2200      	movs	r2, #0
 801473a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	68ba      	ldr	r2, [r7, #8]
 8014740:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801474e:	4b24      	ldr	r3, [pc, #144]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d103      	bne.n	801475e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014756:	4a22      	ldr	r2, [pc, #136]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	6013      	str	r3, [r2, #0]
    return;
 801475c:	e037      	b.n	80147ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	685a      	ldr	r2, [r3, #4]
 8014762:	4b1f      	ldr	r3, [pc, #124]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	1ad3      	subs	r3, r2, r3
 801476a:	0fdb      	lsrs	r3, r3, #31
 801476c:	f003 0301 	and.w	r3, r3, #1
 8014770:	b2db      	uxtb	r3, r3
 8014772:	2b00      	cmp	r3, #0
 8014774:	d007      	beq.n	8014786 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014776:	4b1a      	ldr	r3, [pc, #104]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801477e:	4a18      	ldr	r2, [pc, #96]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	6013      	str	r3, [r2, #0]
 8014784:	e023      	b.n	80147ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014786:	4b16      	ldr	r3, [pc, #88]	@ (80147e0 <sys_timeout_abs+0xd8>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	617b      	str	r3, [r7, #20]
 801478c:	e01a      	b.n	80147c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00b      	beq.n	80147ae <sys_timeout_abs+0xa6>
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	685a      	ldr	r2, [r3, #4]
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	0fdb      	lsrs	r3, r3, #31
 80147a4:	f003 0301 	and.w	r3, r3, #1
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d007      	beq.n	80147be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	693a      	ldr	r2, [r7, #16]
 80147ba:	601a      	str	r2, [r3, #0]
        break;
 80147bc:	e007      	b.n	80147ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	617b      	str	r3, [r7, #20]
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d1e1      	bne.n	801478e <sys_timeout_abs+0x86>
 80147ca:	e000      	b.n	80147ce <sys_timeout_abs+0xc6>
    return;
 80147cc:	bf00      	nop
      }
    }
  }
}
 80147ce:	3718      	adds	r7, #24
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	0801d118 	.word	0x0801d118
 80147d8:	0801d14c 	.word	0x0801d14c
 80147dc:	0801d18c 	.word	0x0801d18c
 80147e0:	2000e114 	.word	0x2000e114

080147e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	4798      	blx	r3

  now = sys_now();
 80147f6:	f7f1 fbfd 	bl	8005ff4 <sys_now>
 80147fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	4b0f      	ldr	r3, [pc, #60]	@ (8014840 <lwip_cyclic_timer+0x5c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4413      	add	r3, r2
 8014806:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	0fdb      	lsrs	r3, r3, #31
 8014810:	f003 0301 	and.w	r3, r3, #1
 8014814:	b2db      	uxtb	r3, r3
 8014816:	2b00      	cmp	r3, #0
 8014818:	d009      	beq.n	801482e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	681a      	ldr	r2, [r3, #0]
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	4413      	add	r3, r2
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	4907      	ldr	r1, [pc, #28]	@ (8014844 <lwip_cyclic_timer+0x60>)
 8014826:	4618      	mov	r0, r3
 8014828:	f7ff ff6e 	bl	8014708 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801482c:	e004      	b.n	8014838 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4904      	ldr	r1, [pc, #16]	@ (8014844 <lwip_cyclic_timer+0x60>)
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f7ff ff68 	bl	8014708 <sys_timeout_abs>
}
 8014838:	bf00      	nop
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	2000e118 	.word	0x2000e118
 8014844:	080147e5 	.word	0x080147e5

08014848 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801484e:	2301      	movs	r3, #1
 8014850:	607b      	str	r3, [r7, #4]
 8014852:	e00e      	b.n	8014872 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014854:	4a0b      	ldr	r2, [pc, #44]	@ (8014884 <sys_timeouts_init+0x3c>)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	00db      	lsls	r3, r3, #3
 8014860:	4a08      	ldr	r2, [pc, #32]	@ (8014884 <sys_timeouts_init+0x3c>)
 8014862:	4413      	add	r3, r2
 8014864:	461a      	mov	r2, r3
 8014866:	4908      	ldr	r1, [pc, #32]	@ (8014888 <sys_timeouts_init+0x40>)
 8014868:	f000 f810 	bl	801488c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	3301      	adds	r3, #1
 8014870:	607b      	str	r3, [r7, #4]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2b02      	cmp	r3, #2
 8014876:	d9ed      	bls.n	8014854 <sys_timeouts_init+0xc>
  }
}
 8014878:	bf00      	nop
 801487a:	bf00      	nop
 801487c:	3708      	adds	r7, #8
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	0801dd60 	.word	0x0801dd60
 8014888:	080147e5 	.word	0x080147e5

0801488c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b086      	sub	sp, #24
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801489e:	d306      	bcc.n	80148ae <sys_timeout+0x22>
 80148a0:	4b0a      	ldr	r3, [pc, #40]	@ (80148cc <sys_timeout+0x40>)
 80148a2:	f240 1229 	movw	r2, #297	@ 0x129
 80148a6:	490a      	ldr	r1, [pc, #40]	@ (80148d0 <sys_timeout+0x44>)
 80148a8:	480a      	ldr	r0, [pc, #40]	@ (80148d4 <sys_timeout+0x48>)
 80148aa:	f003 fd3b 	bl	8018324 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80148ae:	f7f1 fba1 	bl	8005ff4 <sys_now>
 80148b2:	4602      	mov	r2, r0
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	4413      	add	r3, r2
 80148b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	68b9      	ldr	r1, [r7, #8]
 80148be:	6978      	ldr	r0, [r7, #20]
 80148c0:	f7ff ff22 	bl	8014708 <sys_timeout_abs>
#endif
}
 80148c4:	bf00      	nop
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	0801d118 	.word	0x0801d118
 80148d0:	0801d1b4 	.word	0x0801d1b4
 80148d4:	0801d18c 	.word	0x0801d18c

080148d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80148de:	f7f1 fb89 	bl	8005ff4 <sys_now>
 80148e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80148e4:	4b17      	ldr	r3, [pc, #92]	@ (8014944 <sys_check_timeouts+0x6c>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d022      	beq.n	8014936 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	1ad3      	subs	r3, r2, r3
 80148f8:	0fdb      	lsrs	r3, r3, #31
 80148fa:	f003 0301 	and.w	r3, r3, #1
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	2b00      	cmp	r3, #0
 8014902:	d11a      	bne.n	801493a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	4a0e      	ldr	r2, [pc, #56]	@ (8014944 <sys_check_timeouts+0x6c>)
 801490a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	689b      	ldr	r3, [r3, #8]
 8014910:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	4a0a      	ldr	r2, [pc, #40]	@ (8014948 <sys_check_timeouts+0x70>)
 801491e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014920:	68b9      	ldr	r1, [r7, #8]
 8014922:	200a      	movs	r0, #10
 8014924:	f7f8 fd10 	bl	800d348 <memp_free>
    if (handler != NULL) {
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d0da      	beq.n	80148e4 <sys_check_timeouts+0xc>
      handler(arg);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6838      	ldr	r0, [r7, #0]
 8014932:	4798      	blx	r3
  do {
 8014934:	e7d6      	b.n	80148e4 <sys_check_timeouts+0xc>
      return;
 8014936:	bf00      	nop
 8014938:	e000      	b.n	801493c <sys_check_timeouts+0x64>
      return;
 801493a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801493c:	3710      	adds	r7, #16
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	2000e114 	.word	0x2000e114
 8014948:	2000e118 	.word	0x2000e118

0801494c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014952:	4b16      	ldr	r3, [pc, #88]	@ (80149ac <sys_timeouts_sleeptime+0x60>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d102      	bne.n	8014960 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801495a:	f04f 33ff 	mov.w	r3, #4294967295
 801495e:	e020      	b.n	80149a2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014960:	f7f1 fb48 	bl	8005ff4 <sys_now>
 8014964:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014966:	4b11      	ldr	r3, [pc, #68]	@ (80149ac <sys_timeouts_sleeptime+0x60>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	1ad3      	subs	r3, r2, r3
 8014970:	0fdb      	lsrs	r3, r3, #31
 8014972:	f003 0301 	and.w	r3, r3, #1
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b00      	cmp	r3, #0
 801497a:	d001      	beq.n	8014980 <sys_timeouts_sleeptime+0x34>
    return 0;
 801497c:	2300      	movs	r3, #0
 801497e:	e010      	b.n	80149a2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014980:	4b0a      	ldr	r3, [pc, #40]	@ (80149ac <sys_timeouts_sleeptime+0x60>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	1ad3      	subs	r3, r2, r3
 801498a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	da06      	bge.n	80149a0 <sys_timeouts_sleeptime+0x54>
 8014992:	4b07      	ldr	r3, [pc, #28]	@ (80149b0 <sys_timeouts_sleeptime+0x64>)
 8014994:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014998:	4906      	ldr	r1, [pc, #24]	@ (80149b4 <sys_timeouts_sleeptime+0x68>)
 801499a:	4807      	ldr	r0, [pc, #28]	@ (80149b8 <sys_timeouts_sleeptime+0x6c>)
 801499c:	f003 fcc2 	bl	8018324 <iprintf>
    return ret;
 80149a0:	683b      	ldr	r3, [r7, #0]
  }
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	2000e114 	.word	0x2000e114
 80149b0:	0801d118 	.word	0x0801d118
 80149b4:	0801d1ec 	.word	0x0801d1ec
 80149b8:	0801d18c 	.word	0x0801d18c

080149bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80149c0:	f002 ff78 	bl	80178b4 <rand>
 80149c4:	4603      	mov	r3, r0
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80149d2:	b29a      	uxth	r2, r3
 80149d4:	4b01      	ldr	r3, [pc, #4]	@ (80149dc <udp_init+0x20>)
 80149d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80149d8:	bf00      	nop
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	20000018 	.word	0x20000018

080149e0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80149ea:	4b17      	ldr	r3, [pc, #92]	@ (8014a48 <udp_new_port+0x68>)
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	1c5a      	adds	r2, r3, #1
 80149f0:	b291      	uxth	r1, r2
 80149f2:	4a15      	ldr	r2, [pc, #84]	@ (8014a48 <udp_new_port+0x68>)
 80149f4:	8011      	strh	r1, [r2, #0]
 80149f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80149fa:	4293      	cmp	r3, r2
 80149fc:	d103      	bne.n	8014a06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80149fe:	4b12      	ldr	r3, [pc, #72]	@ (8014a48 <udp_new_port+0x68>)
 8014a00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014a04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a06:	4b11      	ldr	r3, [pc, #68]	@ (8014a4c <udp_new_port+0x6c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	603b      	str	r3, [r7, #0]
 8014a0c:	e011      	b.n	8014a32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	8a5a      	ldrh	r2, [r3, #18]
 8014a12:	4b0d      	ldr	r3, [pc, #52]	@ (8014a48 <udp_new_port+0x68>)
 8014a14:	881b      	ldrh	r3, [r3, #0]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d108      	bne.n	8014a2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014a1a:	88fb      	ldrh	r3, [r7, #6]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	80fb      	strh	r3, [r7, #6]
 8014a20:	88fb      	ldrh	r3, [r7, #6]
 8014a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014a26:	d3e0      	bcc.n	80149ea <udp_new_port+0xa>
        return 0;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	e007      	b.n	8014a3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	603b      	str	r3, [r7, #0]
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d1ea      	bne.n	8014a0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014a38:	4b03      	ldr	r3, [pc, #12]	@ (8014a48 <udp_new_port+0x68>)
 8014a3a:	881b      	ldrh	r3, [r3, #0]
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr
 8014a48:	20000018 	.word	0x20000018
 8014a4c:	2000e120 	.word	0x2000e120

08014a50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b084      	sub	sp, #16
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	60f8      	str	r0, [r7, #12]
 8014a58:	60b9      	str	r1, [r7, #8]
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d105      	bne.n	8014a70 <udp_input_local_match+0x20>
 8014a64:	4b27      	ldr	r3, [pc, #156]	@ (8014b04 <udp_input_local_match+0xb4>)
 8014a66:	2287      	movs	r2, #135	@ 0x87
 8014a68:	4927      	ldr	r1, [pc, #156]	@ (8014b08 <udp_input_local_match+0xb8>)
 8014a6a:	4828      	ldr	r0, [pc, #160]	@ (8014b0c <udp_input_local_match+0xbc>)
 8014a6c:	f003 fc5a 	bl	8018324 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d105      	bne.n	8014a82 <udp_input_local_match+0x32>
 8014a76:	4b23      	ldr	r3, [pc, #140]	@ (8014b04 <udp_input_local_match+0xb4>)
 8014a78:	2288      	movs	r2, #136	@ 0x88
 8014a7a:	4925      	ldr	r1, [pc, #148]	@ (8014b10 <udp_input_local_match+0xc0>)
 8014a7c:	4823      	ldr	r0, [pc, #140]	@ (8014b0c <udp_input_local_match+0xbc>)
 8014a7e:	f003 fc51 	bl	8018324 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	7a1b      	ldrb	r3, [r3, #8]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d00b      	beq.n	8014aa2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	7a1a      	ldrb	r2, [r3, #8]
 8014a8e:	4b21      	ldr	r3, [pc, #132]	@ (8014b14 <udp_input_local_match+0xc4>)
 8014a90:	685b      	ldr	r3, [r3, #4]
 8014a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a96:	3301      	adds	r3, #1
 8014a98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d001      	beq.n	8014aa2 <udp_input_local_match+0x52>
    return 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	e02b      	b.n	8014afa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014aa2:	79fb      	ldrb	r3, [r7, #7]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d018      	beq.n	8014ada <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d013      	beq.n	8014ad6 <udp_input_local_match+0x86>
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d00f      	beq.n	8014ad6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014ab6:	4b17      	ldr	r3, [pc, #92]	@ (8014b14 <udp_input_local_match+0xc4>)
 8014ab8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014abe:	d00a      	beq.n	8014ad6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	4b13      	ldr	r3, [pc, #76]	@ (8014b14 <udp_input_local_match+0xc4>)
 8014ac6:	695b      	ldr	r3, [r3, #20]
 8014ac8:	405a      	eors	r2, r3
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	3308      	adds	r3, #8
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d110      	bne.n	8014af8 <udp_input_local_match+0xa8>
          return 1;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	e00f      	b.n	8014afa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d009      	beq.n	8014af4 <udp_input_local_match+0xa4>
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d005      	beq.n	8014af4 <udp_input_local_match+0xa4>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	4b09      	ldr	r3, [pc, #36]	@ (8014b14 <udp_input_local_match+0xc4>)
 8014aee:	695b      	ldr	r3, [r3, #20]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d101      	bne.n	8014af8 <udp_input_local_match+0xa8>
        return 1;
 8014af4:	2301      	movs	r3, #1
 8014af6:	e000      	b.n	8014afa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014af8:	2300      	movs	r3, #0
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3710      	adds	r7, #16
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	0801d200 	.word	0x0801d200
 8014b08:	0801d230 	.word	0x0801d230
 8014b0c:	0801d254 	.word	0x0801d254
 8014b10:	0801d27c 	.word	0x0801d27c
 8014b14:	200087b0 	.word	0x200087b0

08014b18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014b18:	b590      	push	{r4, r7, lr}
 8014b1a:	b08d      	sub	sp, #52	@ 0x34
 8014b1c:	af02      	add	r7, sp, #8
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d105      	bne.n	8014b38 <udp_input+0x20>
 8014b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8014d20 <udp_input+0x208>)
 8014b2e:	22cf      	movs	r2, #207	@ 0xcf
 8014b30:	497c      	ldr	r1, [pc, #496]	@ (8014d24 <udp_input+0x20c>)
 8014b32:	487d      	ldr	r0, [pc, #500]	@ (8014d28 <udp_input+0x210>)
 8014b34:	f003 fbf6 	bl	8018324 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d105      	bne.n	8014b4a <udp_input+0x32>
 8014b3e:	4b78      	ldr	r3, [pc, #480]	@ (8014d20 <udp_input+0x208>)
 8014b40:	22d0      	movs	r2, #208	@ 0xd0
 8014b42:	497a      	ldr	r1, [pc, #488]	@ (8014d2c <udp_input+0x214>)
 8014b44:	4878      	ldr	r0, [pc, #480]	@ (8014d28 <udp_input+0x210>)
 8014b46:	f003 fbed 	bl	8018324 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	895b      	ldrh	r3, [r3, #10]
 8014b4e:	2b07      	cmp	r3, #7
 8014b50:	d803      	bhi.n	8014b5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7f9 fa9c 	bl	800e090 <pbuf_free>
    goto end;
 8014b58:	e0de      	b.n	8014d18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014b60:	4b73      	ldr	r3, [pc, #460]	@ (8014d30 <udp_input+0x218>)
 8014b62:	695b      	ldr	r3, [r3, #20]
 8014b64:	4a72      	ldr	r2, [pc, #456]	@ (8014d30 <udp_input+0x218>)
 8014b66:	6812      	ldr	r2, [r2, #0]
 8014b68:	4611      	mov	r1, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f001 fd96 	bl	801669c <ip4_addr_isbroadcast_u32>
 8014b70:	4603      	mov	r3, r0
 8014b72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	881b      	ldrh	r3, [r3, #0]
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7f7 fedc 	bl	800c938 <lwip_htons>
 8014b80:	4603      	mov	r3, r0
 8014b82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	885b      	ldrh	r3, [r3, #2]
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7f7 fed4 	bl	800c938 <lwip_htons>
 8014b90:	4603      	mov	r3, r0
 8014b92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014b94:	2300      	movs	r3, #0
 8014b96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ba0:	4b64      	ldr	r3, [pc, #400]	@ (8014d34 <udp_input+0x21c>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ba6:	e054      	b.n	8014c52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014baa:	8a5b      	ldrh	r3, [r3, #18]
 8014bac:	89fa      	ldrh	r2, [r7, #14]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d14a      	bne.n	8014c48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014bb2:	7cfb      	ldrb	r3, [r7, #19]
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014bba:	f7ff ff49 	bl	8014a50 <udp_input_local_match>
 8014bbe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d041      	beq.n	8014c48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bc6:	7c1b      	ldrb	r3, [r3, #16]
 8014bc8:	f003 0304 	and.w	r3, r3, #4
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d11d      	bne.n	8014c0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d102      	bne.n	8014bdc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd8:	61fb      	str	r3, [r7, #28]
 8014bda:	e017      	b.n	8014c0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014bdc:	7cfb      	ldrb	r3, [r7, #19]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d014      	beq.n	8014c0c <udp_input+0xf4>
 8014be2:	4b53      	ldr	r3, [pc, #332]	@ (8014d30 <udp_input+0x218>)
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bea:	d10f      	bne.n	8014c0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014bec:	69fb      	ldr	r3, [r7, #28]
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d008      	beq.n	8014c0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	3304      	adds	r3, #4
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d101      	bne.n	8014c0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c0e:	8a9b      	ldrh	r3, [r3, #20]
 8014c10:	8a3a      	ldrh	r2, [r7, #16]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d118      	bne.n	8014c48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d005      	beq.n	8014c2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c20:	685a      	ldr	r2, [r3, #4]
 8014c22:	4b43      	ldr	r3, [pc, #268]	@ (8014d30 <udp_input+0x218>)
 8014c24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d10e      	bne.n	8014c48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d014      	beq.n	8014c5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c32:	68da      	ldr	r2, [r3, #12]
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014c38:	4b3e      	ldr	r3, [pc, #248]	@ (8014d34 <udp_input+0x21c>)
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014c40:	4a3c      	ldr	r2, [pc, #240]	@ (8014d34 <udp_input+0x21c>)
 8014c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014c46:	e008      	b.n	8014c5a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d1a7      	bne.n	8014ba8 <udp_input+0x90>
 8014c58:	e000      	b.n	8014c5c <udp_input+0x144>
        break;
 8014c5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d101      	bne.n	8014c66 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <udp_input+0x15a>
    for_us = 1;
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	76fb      	strb	r3, [r7, #27]
 8014c70:	e00a      	b.n	8014c88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	3304      	adds	r3, #4
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	4b2d      	ldr	r3, [pc, #180]	@ (8014d30 <udp_input+0x218>)
 8014c7a:	695b      	ldr	r3, [r3, #20]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	bf0c      	ite	eq
 8014c80:	2301      	moveq	r3, #1
 8014c82:	2300      	movne	r3, #0
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014c88:	7efb      	ldrb	r3, [r7, #27]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d041      	beq.n	8014d12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014c8e:	2108      	movs	r1, #8
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7f9 f977 	bl	800df84 <pbuf_remove_header>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00a      	beq.n	8014cb2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014c9c:	4b20      	ldr	r3, [pc, #128]	@ (8014d20 <udp_input+0x208>)
 8014c9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014ca2:	4925      	ldr	r1, [pc, #148]	@ (8014d38 <udp_input+0x220>)
 8014ca4:	4820      	ldr	r0, [pc, #128]	@ (8014d28 <udp_input+0x210>)
 8014ca6:	f003 fb3d 	bl	8018324 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7f9 f9f0 	bl	800e090 <pbuf_free>
      goto end;
 8014cb0:	e032      	b.n	8014d18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d012      	beq.n	8014cde <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cba:	699b      	ldr	r3, [r3, #24]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00a      	beq.n	8014cd6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc2:	699c      	ldr	r4, [r3, #24]
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc6:	69d8      	ldr	r0, [r3, #28]
 8014cc8:	8a3b      	ldrh	r3, [r7, #16]
 8014cca:	9300      	str	r3, [sp, #0]
 8014ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8014d3c <udp_input+0x224>)
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cd2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014cd4:	e021      	b.n	8014d1a <udp_input+0x202>
        pbuf_free(p);
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7f9 f9da 	bl	800e090 <pbuf_free>
        goto end;
 8014cdc:	e01c      	b.n	8014d18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014cde:	7cfb      	ldrb	r3, [r7, #19]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d112      	bne.n	8014d0a <udp_input+0x1f2>
 8014ce4:	4b12      	ldr	r3, [pc, #72]	@ (8014d30 <udp_input+0x218>)
 8014ce6:	695b      	ldr	r3, [r3, #20]
 8014ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014cec:	2be0      	cmp	r3, #224	@ 0xe0
 8014cee:	d00c      	beq.n	8014d0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8014d30 <udp_input+0x218>)
 8014cf2:	899b      	ldrh	r3, [r3, #12]
 8014cf4:	3308      	adds	r3, #8
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	b21b      	sxth	r3, r3
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7f9 f9b4 	bl	800e06a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014d02:	2103      	movs	r1, #3
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f001 f9a9 	bl	801605c <icmp_dest_unreach>
      pbuf_free(p);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7f9 f9c0 	bl	800e090 <pbuf_free>
  return;
 8014d10:	e003      	b.n	8014d1a <udp_input+0x202>
    pbuf_free(p);
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f7f9 f9bc 	bl	800e090 <pbuf_free>
  return;
 8014d18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014d1a:	372c      	adds	r7, #44	@ 0x2c
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd90      	pop	{r4, r7, pc}
 8014d20:	0801d200 	.word	0x0801d200
 8014d24:	0801d2a4 	.word	0x0801d2a4
 8014d28:	0801d254 	.word	0x0801d254
 8014d2c:	0801d2bc 	.word	0x0801d2bc
 8014d30:	200087b0 	.word	0x200087b0
 8014d34:	2000e120 	.word	0x2000e120
 8014d38:	0801d2d8 	.word	0x0801d2d8
 8014d3c:	200087c0 	.word	0x200087c0

08014d40 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	4613      	mov	r3, r2
 8014d4c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014d54:	4b39      	ldr	r3, [pc, #228]	@ (8014e3c <udp_bind+0xfc>)
 8014d56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d109      	bne.n	8014d72 <udp_bind+0x32>
 8014d5e:	4b38      	ldr	r3, [pc, #224]	@ (8014e40 <udp_bind+0x100>)
 8014d60:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014d64:	4937      	ldr	r1, [pc, #220]	@ (8014e44 <udp_bind+0x104>)
 8014d66:	4838      	ldr	r0, [pc, #224]	@ (8014e48 <udp_bind+0x108>)
 8014d68:	f003 fadc 	bl	8018324 <iprintf>
 8014d6c:	f06f 030f 	mvn.w	r3, #15
 8014d70:	e060      	b.n	8014e34 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014d72:	2300      	movs	r3, #0
 8014d74:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d76:	4b35      	ldr	r3, [pc, #212]	@ (8014e4c <udp_bind+0x10c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	617b      	str	r3, [r7, #20]
 8014d7c:	e009      	b.n	8014d92 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d102      	bne.n	8014d8c <udp_bind+0x4c>
      rebind = 1;
 8014d86:	2301      	movs	r3, #1
 8014d88:	74fb      	strb	r3, [r7, #19]
      break;
 8014d8a:	e005      	b.n	8014d98 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	617b      	str	r3, [r7, #20]
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d1f2      	bne.n	8014d7e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014d98:	88fb      	ldrh	r3, [r7, #6]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d109      	bne.n	8014db2 <udp_bind+0x72>
    port = udp_new_port();
 8014d9e:	f7ff fe1f 	bl	80149e0 <udp_new_port>
 8014da2:	4603      	mov	r3, r0
 8014da4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014da6:	88fb      	ldrh	r3, [r7, #6]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d12c      	bne.n	8014e06 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014dac:	f06f 0307 	mvn.w	r3, #7
 8014db0:	e040      	b.n	8014e34 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014db2:	4b26      	ldr	r3, [pc, #152]	@ (8014e4c <udp_bind+0x10c>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	617b      	str	r3, [r7, #20]
 8014db8:	e022      	b.n	8014e00 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014dba:	68fa      	ldr	r2, [r7, #12]
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d01b      	beq.n	8014dfa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	8a5b      	ldrh	r3, [r3, #18]
 8014dc6:	88fa      	ldrh	r2, [r7, #6]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d116      	bne.n	8014dfa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d00d      	beq.n	8014df4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00a      	beq.n	8014df4 <udp_bind+0xb4>
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d006      	beq.n	8014df4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014de6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d003      	beq.n	8014df4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d102      	bne.n	8014dfa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014df4:	f06f 0307 	mvn.w	r3, #7
 8014df8:	e01c      	b.n	8014e34 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	617b      	str	r3, [r7, #20]
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d1d9      	bne.n	8014dba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d002      	beq.n	8014e12 <udp_bind+0xd2>
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	e000      	b.n	8014e14 <udp_bind+0xd4>
 8014e12:	2300      	movs	r3, #0
 8014e14:	68fa      	ldr	r2, [r7, #12]
 8014e16:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	88fa      	ldrh	r2, [r7, #6]
 8014e1c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014e1e:	7cfb      	ldrb	r3, [r7, #19]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d106      	bne.n	8014e32 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014e24:	4b09      	ldr	r3, [pc, #36]	@ (8014e4c <udp_bind+0x10c>)
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014e2c:	4a07      	ldr	r2, [pc, #28]	@ (8014e4c <udp_bind+0x10c>)
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014e32:	2300      	movs	r3, #0
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3718      	adds	r7, #24
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	0801dd78 	.word	0x0801dd78
 8014e40:	0801d200 	.word	0x0801d200
 8014e44:	0801d4c8 	.word	0x0801d4c8
 8014e48:	0801d254 	.word	0x0801d254
 8014e4c:	2000e120 	.word	0x2000e120

08014e50 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d107      	bne.n	8014e72 <udp_recv+0x22>
 8014e62:	4b08      	ldr	r3, [pc, #32]	@ (8014e84 <udp_recv+0x34>)
 8014e64:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014e68:	4907      	ldr	r1, [pc, #28]	@ (8014e88 <udp_recv+0x38>)
 8014e6a:	4808      	ldr	r0, [pc, #32]	@ (8014e8c <udp_recv+0x3c>)
 8014e6c:	f003 fa5a 	bl	8018324 <iprintf>
 8014e70:	e005      	b.n	8014e7e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	68ba      	ldr	r2, [r7, #8]
 8014e76:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	61da      	str	r2, [r3, #28]
}
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	0801d200 	.word	0x0801d200
 8014e88:	0801d534 	.word	0x0801d534
 8014e8c:	0801d254 	.word	0x0801d254

08014e90 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d107      	bne.n	8014eae <udp_remove+0x1e>
 8014e9e:	4b19      	ldr	r3, [pc, #100]	@ (8014f04 <udp_remove+0x74>)
 8014ea0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014ea4:	4918      	ldr	r1, [pc, #96]	@ (8014f08 <udp_remove+0x78>)
 8014ea6:	4819      	ldr	r0, [pc, #100]	@ (8014f0c <udp_remove+0x7c>)
 8014ea8:	f003 fa3c 	bl	8018324 <iprintf>
 8014eac:	e026      	b.n	8014efc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014eae:	4b18      	ldr	r3, [pc, #96]	@ (8014f10 <udp_remove+0x80>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d105      	bne.n	8014ec4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014eb8:	4b15      	ldr	r3, [pc, #84]	@ (8014f10 <udp_remove+0x80>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	68db      	ldr	r3, [r3, #12]
 8014ebe:	4a14      	ldr	r2, [pc, #80]	@ (8014f10 <udp_remove+0x80>)
 8014ec0:	6013      	str	r3, [r2, #0]
 8014ec2:	e017      	b.n	8014ef4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ec4:	4b12      	ldr	r3, [pc, #72]	@ (8014f10 <udp_remove+0x80>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	60fb      	str	r3, [r7, #12]
 8014eca:	e010      	b.n	8014eee <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d009      	beq.n	8014ee8 <udp_remove+0x58>
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d104      	bne.n	8014ee8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	68da      	ldr	r2, [r3, #12]
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	60da      	str	r2, [r3, #12]
        break;
 8014ee6:	e005      	b.n	8014ef4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	60fb      	str	r3, [r7, #12]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d1eb      	bne.n	8014ecc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014ef4:	6879      	ldr	r1, [r7, #4]
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	f7f8 fa26 	bl	800d348 <memp_free>
}
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	0801d200 	.word	0x0801d200
 8014f08:	0801d54c 	.word	0x0801d54c
 8014f0c:	0801d254 	.word	0x0801d254
 8014f10:	2000e120 	.word	0x2000e120

08014f14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	f7f8 f9c2 	bl	800d2a4 <memp_malloc>
 8014f20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d007      	beq.n	8014f38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014f28:	2220      	movs	r2, #32
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f003 fb9f 	bl	8018670 <memset>
    pcb->ttl = UDP_TTL;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	22ff      	movs	r2, #255	@ 0xff
 8014f36:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014f38:	687b      	ldr	r3, [r7, #4]
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b084      	sub	sp, #16
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	4603      	mov	r3, r0
 8014f4a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014f4c:	f7ff ffe2 	bl	8014f14 <udp_new>
 8014f50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014f52:	68fb      	ldr	r3, [r7, #12]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3710      	adds	r7, #16
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b085      	sub	sp, #20
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d01e      	beq.n	8014faa <udp_netif_ip_addr_changed+0x4e>
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d01a      	beq.n	8014faa <udp_netif_ip_addr_changed+0x4e>
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d017      	beq.n	8014faa <udp_netif_ip_addr_changed+0x4e>
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d013      	beq.n	8014faa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014f82:	4b0d      	ldr	r3, [pc, #52]	@ (8014fb8 <udp_netif_ip_addr_changed+0x5c>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	60fb      	str	r3, [r7, #12]
 8014f88:	e00c      	b.n	8014fa4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681a      	ldr	r2, [r3, #0]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d103      	bne.n	8014f9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1ef      	bne.n	8014f8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014faa:	bf00      	nop
 8014fac:	3714      	adds	r7, #20
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop
 8014fb8:	2000e120 	.word	0x2000e120

08014fbc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014fc4:	4915      	ldr	r1, [pc, #84]	@ (801501c <etharp_free_entry+0x60>)
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	4613      	mov	r3, r2
 8014fca:	005b      	lsls	r3, r3, #1
 8014fcc:	4413      	add	r3, r2
 8014fce:	00db      	lsls	r3, r3, #3
 8014fd0:	440b      	add	r3, r1
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d013      	beq.n	8015000 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014fd8:	4910      	ldr	r1, [pc, #64]	@ (801501c <etharp_free_entry+0x60>)
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	4613      	mov	r3, r2
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	4413      	add	r3, r2
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	440b      	add	r3, r1
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7f9 f851 	bl	800e090 <pbuf_free>
    arp_table[i].q = NULL;
 8014fee:	490b      	ldr	r1, [pc, #44]	@ (801501c <etharp_free_entry+0x60>)
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	4413      	add	r3, r2
 8014ff8:	00db      	lsls	r3, r3, #3
 8014ffa:	440b      	add	r3, r1
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015000:	4906      	ldr	r1, [pc, #24]	@ (801501c <etharp_free_entry+0x60>)
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	4613      	mov	r3, r2
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	4413      	add	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	440b      	add	r3, r1
 801500e:	3314      	adds	r3, #20
 8015010:	2200      	movs	r2, #0
 8015012:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015014:	bf00      	nop
 8015016:	3708      	adds	r7, #8
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	2000e124 	.word	0x2000e124

08015020 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015026:	2300      	movs	r3, #0
 8015028:	607b      	str	r3, [r7, #4]
 801502a:	e096      	b.n	801515a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801502c:	494f      	ldr	r1, [pc, #316]	@ (801516c <etharp_tmr+0x14c>)
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	440b      	add	r3, r1
 801503a:	3314      	adds	r3, #20
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015040:	78fb      	ldrb	r3, [r7, #3]
 8015042:	2b00      	cmp	r3, #0
 8015044:	f000 8086 	beq.w	8015154 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015048:	4948      	ldr	r1, [pc, #288]	@ (801516c <etharp_tmr+0x14c>)
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	4613      	mov	r3, r2
 801504e:	005b      	lsls	r3, r3, #1
 8015050:	4413      	add	r3, r2
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	440b      	add	r3, r1
 8015056:	3312      	adds	r3, #18
 8015058:	881b      	ldrh	r3, [r3, #0]
 801505a:	3301      	adds	r3, #1
 801505c:	b298      	uxth	r0, r3
 801505e:	4943      	ldr	r1, [pc, #268]	@ (801516c <etharp_tmr+0x14c>)
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	4613      	mov	r3, r2
 8015064:	005b      	lsls	r3, r3, #1
 8015066:	4413      	add	r3, r2
 8015068:	00db      	lsls	r3, r3, #3
 801506a:	440b      	add	r3, r1
 801506c:	3312      	adds	r3, #18
 801506e:	4602      	mov	r2, r0
 8015070:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015072:	493e      	ldr	r1, [pc, #248]	@ (801516c <etharp_tmr+0x14c>)
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	440b      	add	r3, r1
 8015080:	3312      	adds	r3, #18
 8015082:	881b      	ldrh	r3, [r3, #0]
 8015084:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015088:	d215      	bcs.n	80150b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801508a:	4938      	ldr	r1, [pc, #224]	@ (801516c <etharp_tmr+0x14c>)
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	4613      	mov	r3, r2
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	4413      	add	r3, r2
 8015094:	00db      	lsls	r3, r3, #3
 8015096:	440b      	add	r3, r1
 8015098:	3314      	adds	r3, #20
 801509a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801509c:	2b01      	cmp	r3, #1
 801509e:	d10e      	bne.n	80150be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80150a0:	4932      	ldr	r1, [pc, #200]	@ (801516c <etharp_tmr+0x14c>)
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	4613      	mov	r3, r2
 80150a6:	005b      	lsls	r3, r3, #1
 80150a8:	4413      	add	r3, r2
 80150aa:	00db      	lsls	r3, r3, #3
 80150ac:	440b      	add	r3, r1
 80150ae:	3312      	adds	r3, #18
 80150b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80150b2:	2b04      	cmp	r3, #4
 80150b4:	d903      	bls.n	80150be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7ff ff80 	bl	8014fbc <etharp_free_entry>
 80150bc:	e04a      	b.n	8015154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80150be:	492b      	ldr	r1, [pc, #172]	@ (801516c <etharp_tmr+0x14c>)
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	4613      	mov	r3, r2
 80150c4:	005b      	lsls	r3, r3, #1
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	440b      	add	r3, r1
 80150cc:	3314      	adds	r3, #20
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	2b03      	cmp	r3, #3
 80150d2:	d10a      	bne.n	80150ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80150d4:	4925      	ldr	r1, [pc, #148]	@ (801516c <etharp_tmr+0x14c>)
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	4613      	mov	r3, r2
 80150da:	005b      	lsls	r3, r3, #1
 80150dc:	4413      	add	r3, r2
 80150de:	00db      	lsls	r3, r3, #3
 80150e0:	440b      	add	r3, r1
 80150e2:	3314      	adds	r3, #20
 80150e4:	2204      	movs	r2, #4
 80150e6:	701a      	strb	r2, [r3, #0]
 80150e8:	e034      	b.n	8015154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80150ea:	4920      	ldr	r1, [pc, #128]	@ (801516c <etharp_tmr+0x14c>)
 80150ec:	687a      	ldr	r2, [r7, #4]
 80150ee:	4613      	mov	r3, r2
 80150f0:	005b      	lsls	r3, r3, #1
 80150f2:	4413      	add	r3, r2
 80150f4:	00db      	lsls	r3, r3, #3
 80150f6:	440b      	add	r3, r1
 80150f8:	3314      	adds	r3, #20
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	2b04      	cmp	r3, #4
 80150fe:	d10a      	bne.n	8015116 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015100:	491a      	ldr	r1, [pc, #104]	@ (801516c <etharp_tmr+0x14c>)
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	4613      	mov	r3, r2
 8015106:	005b      	lsls	r3, r3, #1
 8015108:	4413      	add	r3, r2
 801510a:	00db      	lsls	r3, r3, #3
 801510c:	440b      	add	r3, r1
 801510e:	3314      	adds	r3, #20
 8015110:	2202      	movs	r2, #2
 8015112:	701a      	strb	r2, [r3, #0]
 8015114:	e01e      	b.n	8015154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015116:	4915      	ldr	r1, [pc, #84]	@ (801516c <etharp_tmr+0x14c>)
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	4613      	mov	r3, r2
 801511c:	005b      	lsls	r3, r3, #1
 801511e:	4413      	add	r3, r2
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	440b      	add	r3, r1
 8015124:	3314      	adds	r3, #20
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	2b01      	cmp	r3, #1
 801512a:	d113      	bne.n	8015154 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801512c:	490f      	ldr	r1, [pc, #60]	@ (801516c <etharp_tmr+0x14c>)
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	4613      	mov	r3, r2
 8015132:	005b      	lsls	r3, r3, #1
 8015134:	4413      	add	r3, r2
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	440b      	add	r3, r1
 801513a:	3308      	adds	r3, #8
 801513c:	6818      	ldr	r0, [r3, #0]
 801513e:	687a      	ldr	r2, [r7, #4]
 8015140:	4613      	mov	r3, r2
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	4413      	add	r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	4a08      	ldr	r2, [pc, #32]	@ (801516c <etharp_tmr+0x14c>)
 801514a:	4413      	add	r3, r2
 801514c:	3304      	adds	r3, #4
 801514e:	4619      	mov	r1, r3
 8015150:	f000 fe6e 	bl	8015e30 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	3301      	adds	r3, #1
 8015158:	607b      	str	r3, [r7, #4]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2b09      	cmp	r3, #9
 801515e:	f77f af65 	ble.w	801502c <etharp_tmr+0xc>
      }
    }
  }
}
 8015162:	bf00      	nop
 8015164:	bf00      	nop
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	2000e124 	.word	0x2000e124

08015170 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b08a      	sub	sp, #40	@ 0x28
 8015174:	af00      	add	r7, sp, #0
 8015176:	60f8      	str	r0, [r7, #12]
 8015178:	460b      	mov	r3, r1
 801517a:	607a      	str	r2, [r7, #4]
 801517c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801517e:	230a      	movs	r3, #10
 8015180:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015182:	230a      	movs	r3, #10
 8015184:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015186:	230a      	movs	r3, #10
 8015188:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801518a:	2300      	movs	r3, #0
 801518c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801518e:	230a      	movs	r3, #10
 8015190:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	83bb      	strh	r3, [r7, #28]
 8015196:	2300      	movs	r3, #0
 8015198:	837b      	strh	r3, [r7, #26]
 801519a:	2300      	movs	r3, #0
 801519c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801519e:	2300      	movs	r3, #0
 80151a0:	843b      	strh	r3, [r7, #32]
 80151a2:	e0ae      	b.n	8015302 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80151a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a8:	49a6      	ldr	r1, [pc, #664]	@ (8015444 <etharp_find_entry+0x2d4>)
 80151aa:	4613      	mov	r3, r2
 80151ac:	005b      	lsls	r3, r3, #1
 80151ae:	4413      	add	r3, r2
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	440b      	add	r3, r1
 80151b4:	3314      	adds	r3, #20
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80151ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80151be:	2b0a      	cmp	r3, #10
 80151c0:	d105      	bne.n	80151ce <etharp_find_entry+0x5e>
 80151c2:	7dfb      	ldrb	r3, [r7, #23]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d102      	bne.n	80151ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80151c8:	8c3b      	ldrh	r3, [r7, #32]
 80151ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80151cc:	e095      	b.n	80152fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80151ce:	7dfb      	ldrb	r3, [r7, #23]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	f000 8092 	beq.w	80152fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d009      	beq.n	80151f0 <etharp_find_entry+0x80>
 80151dc:	7dfb      	ldrb	r3, [r7, #23]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d806      	bhi.n	80151f0 <etharp_find_entry+0x80>
 80151e2:	4b99      	ldr	r3, [pc, #612]	@ (8015448 <etharp_find_entry+0x2d8>)
 80151e4:	f240 1223 	movw	r2, #291	@ 0x123
 80151e8:	4998      	ldr	r1, [pc, #608]	@ (801544c <etharp_find_entry+0x2dc>)
 80151ea:	4899      	ldr	r0, [pc, #612]	@ (8015450 <etharp_find_entry+0x2e0>)
 80151ec:	f003 f89a 	bl	8018324 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d020      	beq.n	8015238 <etharp_find_entry+0xc8>
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6819      	ldr	r1, [r3, #0]
 80151fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151fe:	4891      	ldr	r0, [pc, #580]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015200:	4613      	mov	r3, r2
 8015202:	005b      	lsls	r3, r3, #1
 8015204:	4413      	add	r3, r2
 8015206:	00db      	lsls	r3, r3, #3
 8015208:	4403      	add	r3, r0
 801520a:	3304      	adds	r3, #4
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	4299      	cmp	r1, r3
 8015210:	d112      	bne.n	8015238 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d00c      	beq.n	8015232 <etharp_find_entry+0xc2>
 8015218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801521c:	4989      	ldr	r1, [pc, #548]	@ (8015444 <etharp_find_entry+0x2d4>)
 801521e:	4613      	mov	r3, r2
 8015220:	005b      	lsls	r3, r3, #1
 8015222:	4413      	add	r3, r2
 8015224:	00db      	lsls	r3, r3, #3
 8015226:	440b      	add	r3, r1
 8015228:	3308      	adds	r3, #8
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	429a      	cmp	r2, r3
 8015230:	d102      	bne.n	8015238 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015236:	e100      	b.n	801543a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015238:	7dfb      	ldrb	r3, [r7, #23]
 801523a:	2b01      	cmp	r3, #1
 801523c:	d140      	bne.n	80152c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801523e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015242:	4980      	ldr	r1, [pc, #512]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015244:	4613      	mov	r3, r2
 8015246:	005b      	lsls	r3, r3, #1
 8015248:	4413      	add	r3, r2
 801524a:	00db      	lsls	r3, r3, #3
 801524c:	440b      	add	r3, r1
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d01a      	beq.n	801528a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015258:	497a      	ldr	r1, [pc, #488]	@ (8015444 <etharp_find_entry+0x2d4>)
 801525a:	4613      	mov	r3, r2
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	4413      	add	r3, r2
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	440b      	add	r3, r1
 8015264:	3312      	adds	r3, #18
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	8bba      	ldrh	r2, [r7, #28]
 801526a:	429a      	cmp	r2, r3
 801526c:	d845      	bhi.n	80152fa <etharp_find_entry+0x18a>
            old_queue = i;
 801526e:	8c3b      	ldrh	r3, [r7, #32]
 8015270:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015276:	4973      	ldr	r1, [pc, #460]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	00db      	lsls	r3, r3, #3
 8015280:	440b      	add	r3, r1
 8015282:	3312      	adds	r3, #18
 8015284:	881b      	ldrh	r3, [r3, #0]
 8015286:	83bb      	strh	r3, [r7, #28]
 8015288:	e037      	b.n	80152fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801528a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801528e:	496d      	ldr	r1, [pc, #436]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015290:	4613      	mov	r3, r2
 8015292:	005b      	lsls	r3, r3, #1
 8015294:	4413      	add	r3, r2
 8015296:	00db      	lsls	r3, r3, #3
 8015298:	440b      	add	r3, r1
 801529a:	3312      	adds	r3, #18
 801529c:	881b      	ldrh	r3, [r3, #0]
 801529e:	8b7a      	ldrh	r2, [r7, #26]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d82a      	bhi.n	80152fa <etharp_find_entry+0x18a>
            old_pending = i;
 80152a4:	8c3b      	ldrh	r3, [r7, #32]
 80152a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80152a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ac:	4965      	ldr	r1, [pc, #404]	@ (8015444 <etharp_find_entry+0x2d4>)
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	440b      	add	r3, r1
 80152b8:	3312      	adds	r3, #18
 80152ba:	881b      	ldrh	r3, [r3, #0]
 80152bc:	837b      	strh	r3, [r7, #26]
 80152be:	e01c      	b.n	80152fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d919      	bls.n	80152fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80152c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ca:	495e      	ldr	r1, [pc, #376]	@ (8015444 <etharp_find_entry+0x2d4>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4413      	add	r3, r2
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	440b      	add	r3, r1
 80152d6:	3312      	adds	r3, #18
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	8b3a      	ldrh	r2, [r7, #24]
 80152dc:	429a      	cmp	r2, r3
 80152de:	d80c      	bhi.n	80152fa <etharp_find_entry+0x18a>
            old_stable = i;
 80152e0:	8c3b      	ldrh	r3, [r7, #32]
 80152e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80152e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152e8:	4956      	ldr	r1, [pc, #344]	@ (8015444 <etharp_find_entry+0x2d4>)
 80152ea:	4613      	mov	r3, r2
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4413      	add	r3, r2
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	440b      	add	r3, r1
 80152f4:	3312      	adds	r3, #18
 80152f6:	881b      	ldrh	r3, [r3, #0]
 80152f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152fa:	8c3b      	ldrh	r3, [r7, #32]
 80152fc:	3301      	adds	r3, #1
 80152fe:	b29b      	uxth	r3, r3
 8015300:	843b      	strh	r3, [r7, #32]
 8015302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015306:	2b09      	cmp	r3, #9
 8015308:	f77f af4c 	ble.w	80151a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801530c:	7afb      	ldrb	r3, [r7, #11]
 801530e:	f003 0302 	and.w	r3, r3, #2
 8015312:	2b00      	cmp	r3, #0
 8015314:	d108      	bne.n	8015328 <etharp_find_entry+0x1b8>
 8015316:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801531a:	2b0a      	cmp	r3, #10
 801531c:	d107      	bne.n	801532e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801531e:	7afb      	ldrb	r3, [r7, #11]
 8015320:	f003 0301 	and.w	r3, r3, #1
 8015324:	2b00      	cmp	r3, #0
 8015326:	d102      	bne.n	801532e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015328:	f04f 33ff 	mov.w	r3, #4294967295
 801532c:	e085      	b.n	801543a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801532e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015332:	2b09      	cmp	r3, #9
 8015334:	dc02      	bgt.n	801533c <etharp_find_entry+0x1cc>
    i = empty;
 8015336:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015338:	843b      	strh	r3, [r7, #32]
 801533a:	e039      	b.n	80153b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801533c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015340:	2b09      	cmp	r3, #9
 8015342:	dc14      	bgt.n	801536e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015344:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015346:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801534c:	493d      	ldr	r1, [pc, #244]	@ (8015444 <etharp_find_entry+0x2d4>)
 801534e:	4613      	mov	r3, r2
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	4413      	add	r3, r2
 8015354:	00db      	lsls	r3, r3, #3
 8015356:	440b      	add	r3, r1
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d018      	beq.n	8015390 <etharp_find_entry+0x220>
 801535e:	4b3a      	ldr	r3, [pc, #232]	@ (8015448 <etharp_find_entry+0x2d8>)
 8015360:	f240 126d 	movw	r2, #365	@ 0x16d
 8015364:	493b      	ldr	r1, [pc, #236]	@ (8015454 <etharp_find_entry+0x2e4>)
 8015366:	483a      	ldr	r0, [pc, #232]	@ (8015450 <etharp_find_entry+0x2e0>)
 8015368:	f002 ffdc 	bl	8018324 <iprintf>
 801536c:	e010      	b.n	8015390 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801536e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015372:	2b09      	cmp	r3, #9
 8015374:	dc02      	bgt.n	801537c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015378:	843b      	strh	r3, [r7, #32]
 801537a:	e009      	b.n	8015390 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801537c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015380:	2b09      	cmp	r3, #9
 8015382:	dc02      	bgt.n	801538a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015384:	8bfb      	ldrh	r3, [r7, #30]
 8015386:	843b      	strh	r3, [r7, #32]
 8015388:	e002      	b.n	8015390 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801538a:	f04f 33ff 	mov.w	r3, #4294967295
 801538e:	e054      	b.n	801543a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015390:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015394:	2b09      	cmp	r3, #9
 8015396:	dd06      	ble.n	80153a6 <etharp_find_entry+0x236>
 8015398:	4b2b      	ldr	r3, [pc, #172]	@ (8015448 <etharp_find_entry+0x2d8>)
 801539a:	f240 127f 	movw	r2, #383	@ 0x17f
 801539e:	492e      	ldr	r1, [pc, #184]	@ (8015458 <etharp_find_entry+0x2e8>)
 80153a0:	482b      	ldr	r0, [pc, #172]	@ (8015450 <etharp_find_entry+0x2e0>)
 80153a2:	f002 ffbf 	bl	8018324 <iprintf>
    etharp_free_entry(i);
 80153a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7ff fe06 	bl	8014fbc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80153b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153b4:	2b09      	cmp	r3, #9
 80153b6:	dd06      	ble.n	80153c6 <etharp_find_entry+0x256>
 80153b8:	4b23      	ldr	r3, [pc, #140]	@ (8015448 <etharp_find_entry+0x2d8>)
 80153ba:	f240 1283 	movw	r2, #387	@ 0x183
 80153be:	4926      	ldr	r1, [pc, #152]	@ (8015458 <etharp_find_entry+0x2e8>)
 80153c0:	4823      	ldr	r0, [pc, #140]	@ (8015450 <etharp_find_entry+0x2e0>)
 80153c2:	f002 ffaf 	bl	8018324 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80153c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153ca:	491e      	ldr	r1, [pc, #120]	@ (8015444 <etharp_find_entry+0x2d4>)
 80153cc:	4613      	mov	r3, r2
 80153ce:	005b      	lsls	r3, r3, #1
 80153d0:	4413      	add	r3, r2
 80153d2:	00db      	lsls	r3, r3, #3
 80153d4:	440b      	add	r3, r1
 80153d6:	3314      	adds	r3, #20
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d006      	beq.n	80153ec <etharp_find_entry+0x27c>
 80153de:	4b1a      	ldr	r3, [pc, #104]	@ (8015448 <etharp_find_entry+0x2d8>)
 80153e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80153e4:	491d      	ldr	r1, [pc, #116]	@ (801545c <etharp_find_entry+0x2ec>)
 80153e6:	481a      	ldr	r0, [pc, #104]	@ (8015450 <etharp_find_entry+0x2e0>)
 80153e8:	f002 ff9c 	bl	8018324 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d00b      	beq.n	801540a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80153f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	6819      	ldr	r1, [r3, #0]
 80153fa:	4812      	ldr	r0, [pc, #72]	@ (8015444 <etharp_find_entry+0x2d4>)
 80153fc:	4613      	mov	r3, r2
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	4413      	add	r3, r2
 8015402:	00db      	lsls	r3, r3, #3
 8015404:	4403      	add	r3, r0
 8015406:	3304      	adds	r3, #4
 8015408:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801540a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801540e:	490d      	ldr	r1, [pc, #52]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015410:	4613      	mov	r3, r2
 8015412:	005b      	lsls	r3, r3, #1
 8015414:	4413      	add	r3, r2
 8015416:	00db      	lsls	r3, r3, #3
 8015418:	440b      	add	r3, r1
 801541a:	3312      	adds	r3, #18
 801541c:	2200      	movs	r2, #0
 801541e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015424:	4907      	ldr	r1, [pc, #28]	@ (8015444 <etharp_find_entry+0x2d4>)
 8015426:	4613      	mov	r3, r2
 8015428:	005b      	lsls	r3, r3, #1
 801542a:	4413      	add	r3, r2
 801542c:	00db      	lsls	r3, r3, #3
 801542e:	440b      	add	r3, r1
 8015430:	3308      	adds	r3, #8
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015436:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801543a:	4618      	mov	r0, r3
 801543c:	3728      	adds	r7, #40	@ 0x28
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	2000e124 	.word	0x2000e124
 8015448:	0801d564 	.word	0x0801d564
 801544c:	0801d59c 	.word	0x0801d59c
 8015450:	0801d5dc 	.word	0x0801d5dc
 8015454:	0801d604 	.word	0x0801d604
 8015458:	0801d61c 	.word	0x0801d61c
 801545c:	0801d630 	.word	0x0801d630

08015460 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b088      	sub	sp, #32
 8015464:	af02      	add	r7, sp, #8
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
 801546c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015474:	2b06      	cmp	r3, #6
 8015476:	d006      	beq.n	8015486 <etharp_update_arp_entry+0x26>
 8015478:	4b48      	ldr	r3, [pc, #288]	@ (801559c <etharp_update_arp_entry+0x13c>)
 801547a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801547e:	4948      	ldr	r1, [pc, #288]	@ (80155a0 <etharp_update_arp_entry+0x140>)
 8015480:	4848      	ldr	r0, [pc, #288]	@ (80155a4 <etharp_update_arp_entry+0x144>)
 8015482:	f002 ff4f 	bl	8018324 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d012      	beq.n	80154b2 <etharp_update_arp_entry+0x52>
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00e      	beq.n	80154b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	68f9      	ldr	r1, [r7, #12]
 801549a:	4618      	mov	r0, r3
 801549c:	f001 f8fe 	bl	801669c <ip4_addr_isbroadcast_u32>
 80154a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d105      	bne.n	80154b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80154a6:	68bb      	ldr	r3, [r7, #8]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80154ae:	2be0      	cmp	r3, #224	@ 0xe0
 80154b0:	d102      	bne.n	80154b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80154b2:	f06f 030f 	mvn.w	r3, #15
 80154b6:	e06c      	b.n	8015592 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80154b8:	78fb      	ldrb	r3, [r7, #3]
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	4619      	mov	r1, r3
 80154be:	68b8      	ldr	r0, [r7, #8]
 80154c0:	f7ff fe56 	bl	8015170 <etharp_find_entry>
 80154c4:	4603      	mov	r3, r0
 80154c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80154c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	da02      	bge.n	80154d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80154d0:	8afb      	ldrh	r3, [r7, #22]
 80154d2:	b25b      	sxtb	r3, r3
 80154d4:	e05d      	b.n	8015592 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80154d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80154da:	4933      	ldr	r1, [pc, #204]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 80154dc:	4613      	mov	r3, r2
 80154de:	005b      	lsls	r3, r3, #1
 80154e0:	4413      	add	r3, r2
 80154e2:	00db      	lsls	r3, r3, #3
 80154e4:	440b      	add	r3, r1
 80154e6:	3314      	adds	r3, #20
 80154e8:	2202      	movs	r2, #2
 80154ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80154ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80154f0:	492d      	ldr	r1, [pc, #180]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	00db      	lsls	r3, r3, #3
 80154fa:	440b      	add	r3, r1
 80154fc:	3308      	adds	r3, #8
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015502:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015506:	4613      	mov	r3, r2
 8015508:	005b      	lsls	r3, r3, #1
 801550a:	4413      	add	r3, r2
 801550c:	00db      	lsls	r3, r3, #3
 801550e:	3308      	adds	r3, #8
 8015510:	4a25      	ldr	r2, [pc, #148]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 8015512:	4413      	add	r3, r2
 8015514:	3304      	adds	r3, #4
 8015516:	2206      	movs	r2, #6
 8015518:	6879      	ldr	r1, [r7, #4]
 801551a:	4618      	mov	r0, r3
 801551c:	f003 f961 	bl	80187e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015524:	4920      	ldr	r1, [pc, #128]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 8015526:	4613      	mov	r3, r2
 8015528:	005b      	lsls	r3, r3, #1
 801552a:	4413      	add	r3, r2
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	440b      	add	r3, r1
 8015530:	3312      	adds	r3, #18
 8015532:	2200      	movs	r2, #0
 8015534:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801553a:	491b      	ldr	r1, [pc, #108]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 801553c:	4613      	mov	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	4413      	add	r3, r2
 8015542:	00db      	lsls	r3, r3, #3
 8015544:	440b      	add	r3, r1
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d021      	beq.n	8015590 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801554c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015550:	4915      	ldr	r1, [pc, #84]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 8015552:	4613      	mov	r3, r2
 8015554:	005b      	lsls	r3, r3, #1
 8015556:	4413      	add	r3, r2
 8015558:	00db      	lsls	r3, r3, #3
 801555a:	440b      	add	r3, r1
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015564:	4910      	ldr	r1, [pc, #64]	@ (80155a8 <etharp_update_arp_entry+0x148>)
 8015566:	4613      	mov	r3, r2
 8015568:	005b      	lsls	r3, r3, #1
 801556a:	4413      	add	r3, r2
 801556c:	00db      	lsls	r3, r3, #3
 801556e:	440b      	add	r3, r1
 8015570:	2200      	movs	r2, #0
 8015572:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801557a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6939      	ldr	r1, [r7, #16]
 8015584:	68f8      	ldr	r0, [r7, #12]
 8015586:	f001 ff97 	bl	80174b8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801558a:	6938      	ldr	r0, [r7, #16]
 801558c:	f7f8 fd80 	bl	800e090 <pbuf_free>
  }
  return ERR_OK;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	3718      	adds	r7, #24
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	0801d564 	.word	0x0801d564
 80155a0:	0801d65c 	.word	0x0801d65c
 80155a4:	0801d5dc 	.word	0x0801d5dc
 80155a8:	2000e124 	.word	0x2000e124

080155ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155b4:	2300      	movs	r3, #0
 80155b6:	60fb      	str	r3, [r7, #12]
 80155b8:	e01e      	b.n	80155f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80155ba:	4913      	ldr	r1, [pc, #76]	@ (8015608 <etharp_cleanup_netif+0x5c>)
 80155bc:	68fa      	ldr	r2, [r7, #12]
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	440b      	add	r3, r1
 80155c8:	3314      	adds	r3, #20
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80155ce:	7afb      	ldrb	r3, [r7, #11]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00e      	beq.n	80155f2 <etharp_cleanup_netif+0x46>
 80155d4:	490c      	ldr	r1, [pc, #48]	@ (8015608 <etharp_cleanup_netif+0x5c>)
 80155d6:	68fa      	ldr	r2, [r7, #12]
 80155d8:	4613      	mov	r3, r2
 80155da:	005b      	lsls	r3, r3, #1
 80155dc:	4413      	add	r3, r2
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	440b      	add	r3, r1
 80155e2:	3308      	adds	r3, #8
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	687a      	ldr	r2, [r7, #4]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d102      	bne.n	80155f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80155ec:	68f8      	ldr	r0, [r7, #12]
 80155ee:	f7ff fce5 	bl	8014fbc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	3301      	adds	r3, #1
 80155f6:	60fb      	str	r3, [r7, #12]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b09      	cmp	r3, #9
 80155fc:	dddd      	ble.n	80155ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80155fe:	bf00      	nop
 8015600:	bf00      	nop
 8015602:	3710      	adds	r7, #16
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	2000e124 	.word	0x2000e124

0801560c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801560c:	b5b0      	push	{r4, r5, r7, lr}
 801560e:	b08a      	sub	sp, #40	@ 0x28
 8015610:	af04      	add	r7, sp, #16
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d107      	bne.n	801562c <etharp_input+0x20>
 801561c:	4b3d      	ldr	r3, [pc, #244]	@ (8015714 <etharp_input+0x108>)
 801561e:	f240 228a 	movw	r2, #650	@ 0x28a
 8015622:	493d      	ldr	r1, [pc, #244]	@ (8015718 <etharp_input+0x10c>)
 8015624:	483d      	ldr	r0, [pc, #244]	@ (801571c <etharp_input+0x110>)
 8015626:	f002 fe7d 	bl	8018324 <iprintf>
 801562a:	e06f      	b.n	801570c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	881b      	ldrh	r3, [r3, #0]
 8015636:	b29b      	uxth	r3, r3
 8015638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801563c:	d10c      	bne.n	8015658 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015642:	2b06      	cmp	r3, #6
 8015644:	d108      	bne.n	8015658 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801564a:	2b04      	cmp	r3, #4
 801564c:	d104      	bne.n	8015658 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	885b      	ldrh	r3, [r3, #2]
 8015652:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015654:	2b08      	cmp	r3, #8
 8015656:	d003      	beq.n	8015660 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7f8 fd19 	bl	800e090 <pbuf_free>
    return;
 801565e:	e055      	b.n	801570c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	330e      	adds	r3, #14
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	3318      	adds	r3, #24
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	3304      	adds	r3, #4
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d102      	bne.n	8015680 <etharp_input+0x74>
    for_us = 0;
 801567a:	2300      	movs	r3, #0
 801567c:	75fb      	strb	r3, [r7, #23]
 801567e:	e009      	b.n	8015694 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	3304      	adds	r3, #4
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	429a      	cmp	r2, r3
 801568a:	bf0c      	ite	eq
 801568c:	2301      	moveq	r3, #1
 801568e:	2300      	movne	r3, #0
 8015690:	b2db      	uxtb	r3, r3
 8015692:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	f103 0208 	add.w	r2, r3, #8
 801569a:	7dfb      	ldrb	r3, [r7, #23]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d001      	beq.n	80156a4 <etharp_input+0x98>
 80156a0:	2301      	movs	r3, #1
 80156a2:	e000      	b.n	80156a6 <etharp_input+0x9a>
 80156a4:	2302      	movs	r3, #2
 80156a6:	f107 010c 	add.w	r1, r7, #12
 80156aa:	6838      	ldr	r0, [r7, #0]
 80156ac:	f7ff fed8 	bl	8015460 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80156b0:	693b      	ldr	r3, [r7, #16]
 80156b2:	88db      	ldrh	r3, [r3, #6]
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80156ba:	d003      	beq.n	80156c4 <etharp_input+0xb8>
 80156bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80156c0:	d01e      	beq.n	8015700 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80156c2:	e020      	b.n	8015706 <etharp_input+0xfa>
      if (for_us) {
 80156c4:	7dfb      	ldrb	r3, [r7, #23]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d01c      	beq.n	8015704 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80156e4:	2102      	movs	r1, #2
 80156e6:	9103      	str	r1, [sp, #12]
 80156e8:	f107 010c 	add.w	r1, r7, #12
 80156ec:	9102      	str	r1, [sp, #8]
 80156ee:	9201      	str	r2, [sp, #4]
 80156f0:	9300      	str	r3, [sp, #0]
 80156f2:	462b      	mov	r3, r5
 80156f4:	4622      	mov	r2, r4
 80156f6:	4601      	mov	r1, r0
 80156f8:	6838      	ldr	r0, [r7, #0]
 80156fa:	f000 faeb 	bl	8015cd4 <etharp_raw>
      break;
 80156fe:	e001      	b.n	8015704 <etharp_input+0xf8>
      break;
 8015700:	bf00      	nop
 8015702:	e000      	b.n	8015706 <etharp_input+0xfa>
      break;
 8015704:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7f8 fcc2 	bl	800e090 <pbuf_free>
}
 801570c:	3718      	adds	r7, #24
 801570e:	46bd      	mov	sp, r7
 8015710:	bdb0      	pop	{r4, r5, r7, pc}
 8015712:	bf00      	nop
 8015714:	0801d564 	.word	0x0801d564
 8015718:	0801d6b4 	.word	0x0801d6b4
 801571c:	0801d5dc 	.word	0x0801d5dc

08015720 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b086      	sub	sp, #24
 8015724:	af02      	add	r7, sp, #8
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	4613      	mov	r3, r2
 801572c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801572e:	79fa      	ldrb	r2, [r7, #7]
 8015730:	4944      	ldr	r1, [pc, #272]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 8015732:	4613      	mov	r3, r2
 8015734:	005b      	lsls	r3, r3, #1
 8015736:	4413      	add	r3, r2
 8015738:	00db      	lsls	r3, r3, #3
 801573a:	440b      	add	r3, r1
 801573c:	3314      	adds	r3, #20
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	2b01      	cmp	r3, #1
 8015742:	d806      	bhi.n	8015752 <etharp_output_to_arp_index+0x32>
 8015744:	4b40      	ldr	r3, [pc, #256]	@ (8015848 <etharp_output_to_arp_index+0x128>)
 8015746:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801574a:	4940      	ldr	r1, [pc, #256]	@ (801584c <etharp_output_to_arp_index+0x12c>)
 801574c:	4840      	ldr	r0, [pc, #256]	@ (8015850 <etharp_output_to_arp_index+0x130>)
 801574e:	f002 fde9 	bl	8018324 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015752:	79fa      	ldrb	r2, [r7, #7]
 8015754:	493b      	ldr	r1, [pc, #236]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	440b      	add	r3, r1
 8015760:	3314      	adds	r3, #20
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	2b02      	cmp	r3, #2
 8015766:	d153      	bne.n	8015810 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015768:	79fa      	ldrb	r2, [r7, #7]
 801576a:	4936      	ldr	r1, [pc, #216]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 801576c:	4613      	mov	r3, r2
 801576e:	005b      	lsls	r3, r3, #1
 8015770:	4413      	add	r3, r2
 8015772:	00db      	lsls	r3, r3, #3
 8015774:	440b      	add	r3, r1
 8015776:	3312      	adds	r3, #18
 8015778:	881b      	ldrh	r3, [r3, #0]
 801577a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801577e:	d919      	bls.n	80157b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015780:	79fa      	ldrb	r2, [r7, #7]
 8015782:	4613      	mov	r3, r2
 8015784:	005b      	lsls	r3, r3, #1
 8015786:	4413      	add	r3, r2
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	4a2e      	ldr	r2, [pc, #184]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 801578c:	4413      	add	r3, r2
 801578e:	3304      	adds	r3, #4
 8015790:	4619      	mov	r1, r3
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	f000 fb4c 	bl	8015e30 <etharp_request>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d138      	bne.n	8015810 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801579e:	79fa      	ldrb	r2, [r7, #7]
 80157a0:	4928      	ldr	r1, [pc, #160]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 80157a2:	4613      	mov	r3, r2
 80157a4:	005b      	lsls	r3, r3, #1
 80157a6:	4413      	add	r3, r2
 80157a8:	00db      	lsls	r3, r3, #3
 80157aa:	440b      	add	r3, r1
 80157ac:	3314      	adds	r3, #20
 80157ae:	2203      	movs	r2, #3
 80157b0:	701a      	strb	r2, [r3, #0]
 80157b2:	e02d      	b.n	8015810 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80157b4:	79fa      	ldrb	r2, [r7, #7]
 80157b6:	4923      	ldr	r1, [pc, #140]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 80157b8:	4613      	mov	r3, r2
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	4413      	add	r3, r2
 80157be:	00db      	lsls	r3, r3, #3
 80157c0:	440b      	add	r3, r1
 80157c2:	3312      	adds	r3, #18
 80157c4:	881b      	ldrh	r3, [r3, #0]
 80157c6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80157ca:	d321      	bcc.n	8015810 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80157cc:	79fa      	ldrb	r2, [r7, #7]
 80157ce:	4613      	mov	r3, r2
 80157d0:	005b      	lsls	r3, r3, #1
 80157d2:	4413      	add	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	4a1b      	ldr	r2, [pc, #108]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 80157d8:	4413      	add	r3, r2
 80157da:	1d19      	adds	r1, r3, #4
 80157dc:	79fa      	ldrb	r2, [r7, #7]
 80157de:	4613      	mov	r3, r2
 80157e0:	005b      	lsls	r3, r3, #1
 80157e2:	4413      	add	r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	3308      	adds	r3, #8
 80157e8:	4a16      	ldr	r2, [pc, #88]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 80157ea:	4413      	add	r3, r2
 80157ec:	3304      	adds	r3, #4
 80157ee:	461a      	mov	r2, r3
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f000 fafb 	bl	8015dec <etharp_request_dst>
 80157f6:	4603      	mov	r3, r0
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d109      	bne.n	8015810 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80157fc:	79fa      	ldrb	r2, [r7, #7]
 80157fe:	4911      	ldr	r1, [pc, #68]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 8015800:	4613      	mov	r3, r2
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	4413      	add	r3, r2
 8015806:	00db      	lsls	r3, r3, #3
 8015808:	440b      	add	r3, r1
 801580a:	3314      	adds	r3, #20
 801580c:	2203      	movs	r2, #3
 801580e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8015816:	79fa      	ldrb	r2, [r7, #7]
 8015818:	4613      	mov	r3, r2
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	4413      	add	r3, r2
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	3308      	adds	r3, #8
 8015822:	4a08      	ldr	r2, [pc, #32]	@ (8015844 <etharp_output_to_arp_index+0x124>)
 8015824:	4413      	add	r3, r2
 8015826:	3304      	adds	r3, #4
 8015828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801582c:	9200      	str	r2, [sp, #0]
 801582e:	460a      	mov	r2, r1
 8015830:	68b9      	ldr	r1, [r7, #8]
 8015832:	68f8      	ldr	r0, [r7, #12]
 8015834:	f001 fe40 	bl	80174b8 <ethernet_output>
 8015838:	4603      	mov	r3, r0
}
 801583a:	4618      	mov	r0, r3
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	2000e124 	.word	0x2000e124
 8015848:	0801d564 	.word	0x0801d564
 801584c:	0801d6d4 	.word	0x0801d6d4
 8015850:	0801d5dc 	.word	0x0801d5dc

08015854 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b08a      	sub	sp, #40	@ 0x28
 8015858:	af02      	add	r7, sp, #8
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d106      	bne.n	8015878 <etharp_output+0x24>
 801586a:	4b73      	ldr	r3, [pc, #460]	@ (8015a38 <etharp_output+0x1e4>)
 801586c:	f240 321e 	movw	r2, #798	@ 0x31e
 8015870:	4972      	ldr	r1, [pc, #456]	@ (8015a3c <etharp_output+0x1e8>)
 8015872:	4873      	ldr	r0, [pc, #460]	@ (8015a40 <etharp_output+0x1ec>)
 8015874:	f002 fd56 	bl	8018324 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d106      	bne.n	801588c <etharp_output+0x38>
 801587e:	4b6e      	ldr	r3, [pc, #440]	@ (8015a38 <etharp_output+0x1e4>)
 8015880:	f240 321f 	movw	r2, #799	@ 0x31f
 8015884:	496f      	ldr	r1, [pc, #444]	@ (8015a44 <etharp_output+0x1f0>)
 8015886:	486e      	ldr	r0, [pc, #440]	@ (8015a40 <etharp_output+0x1ec>)
 8015888:	f002 fd4c 	bl	8018324 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d106      	bne.n	80158a0 <etharp_output+0x4c>
 8015892:	4b69      	ldr	r3, [pc, #420]	@ (8015a38 <etharp_output+0x1e4>)
 8015894:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015898:	496b      	ldr	r1, [pc, #428]	@ (8015a48 <etharp_output+0x1f4>)
 801589a:	4869      	ldr	r0, [pc, #420]	@ (8015a40 <etharp_output+0x1ec>)
 801589c:	f002 fd42 	bl	8018324 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	68f9      	ldr	r1, [r7, #12]
 80158a6:	4618      	mov	r0, r3
 80158a8:	f000 fef8 	bl	801669c <ip4_addr_isbroadcast_u32>
 80158ac:	4603      	mov	r3, r0
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d002      	beq.n	80158b8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80158b2:	4b66      	ldr	r3, [pc, #408]	@ (8015a4c <etharp_output+0x1f8>)
 80158b4:	61fb      	str	r3, [r7, #28]
 80158b6:	e0af      	b.n	8015a18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80158c0:	2be0      	cmp	r3, #224	@ 0xe0
 80158c2:	d118      	bne.n	80158f6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80158c4:	2301      	movs	r3, #1
 80158c6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80158c8:	2300      	movs	r3, #0
 80158ca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80158cc:	235e      	movs	r3, #94	@ 0x5e
 80158ce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	3301      	adds	r3, #1
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	3302      	adds	r3, #2
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	3303      	adds	r3, #3
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80158ee:	f107 0310 	add.w	r3, r7, #16
 80158f2:	61fb      	str	r3, [r7, #28]
 80158f4:	e090      	b.n	8015a18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	3304      	adds	r3, #4
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	405a      	eors	r2, r3
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	3308      	adds	r3, #8
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4013      	ands	r3, r2
 801590a:	2b00      	cmp	r3, #0
 801590c:	d012      	beq.n	8015934 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015914:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015918:	4293      	cmp	r3, r2
 801591a:	d00b      	beq.n	8015934 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	330c      	adds	r3, #12
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d003      	beq.n	801592e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	330c      	adds	r3, #12
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	e002      	b.n	8015934 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801592e:	f06f 0303 	mvn.w	r3, #3
 8015932:	e07d      	b.n	8015a30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015934:	4b46      	ldr	r3, [pc, #280]	@ (8015a50 <etharp_output+0x1fc>)
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	4619      	mov	r1, r3
 801593a:	4a46      	ldr	r2, [pc, #280]	@ (8015a54 <etharp_output+0x200>)
 801593c:	460b      	mov	r3, r1
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	440b      	add	r3, r1
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	4413      	add	r3, r2
 8015946:	3314      	adds	r3, #20
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	2b01      	cmp	r3, #1
 801594c:	d925      	bls.n	801599a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801594e:	4b40      	ldr	r3, [pc, #256]	@ (8015a50 <etharp_output+0x1fc>)
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	4619      	mov	r1, r3
 8015954:	4a3f      	ldr	r2, [pc, #252]	@ (8015a54 <etharp_output+0x200>)
 8015956:	460b      	mov	r3, r1
 8015958:	005b      	lsls	r3, r3, #1
 801595a:	440b      	add	r3, r1
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	4413      	add	r3, r2
 8015960:	3308      	adds	r3, #8
 8015962:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015964:	68fa      	ldr	r2, [r7, #12]
 8015966:	429a      	cmp	r2, r3
 8015968:	d117      	bne.n	801599a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	681a      	ldr	r2, [r3, #0]
 801596e:	4b38      	ldr	r3, [pc, #224]	@ (8015a50 <etharp_output+0x1fc>)
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	4618      	mov	r0, r3
 8015974:	4937      	ldr	r1, [pc, #220]	@ (8015a54 <etharp_output+0x200>)
 8015976:	4603      	mov	r3, r0
 8015978:	005b      	lsls	r3, r3, #1
 801597a:	4403      	add	r3, r0
 801597c:	00db      	lsls	r3, r3, #3
 801597e:	440b      	add	r3, r1
 8015980:	3304      	adds	r3, #4
 8015982:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015984:	429a      	cmp	r2, r3
 8015986:	d108      	bne.n	801599a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015988:	4b31      	ldr	r3, [pc, #196]	@ (8015a50 <etharp_output+0x1fc>)
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	461a      	mov	r2, r3
 801598e:	68b9      	ldr	r1, [r7, #8]
 8015990:	68f8      	ldr	r0, [r7, #12]
 8015992:	f7ff fec5 	bl	8015720 <etharp_output_to_arp_index>
 8015996:	4603      	mov	r3, r0
 8015998:	e04a      	b.n	8015a30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801599a:	2300      	movs	r3, #0
 801599c:	75fb      	strb	r3, [r7, #23]
 801599e:	e031      	b.n	8015a04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80159a0:	7dfa      	ldrb	r2, [r7, #23]
 80159a2:	492c      	ldr	r1, [pc, #176]	@ (8015a54 <etharp_output+0x200>)
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	440b      	add	r3, r1
 80159ae:	3314      	adds	r3, #20
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d923      	bls.n	80159fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80159b6:	7dfa      	ldrb	r2, [r7, #23]
 80159b8:	4926      	ldr	r1, [pc, #152]	@ (8015a54 <etharp_output+0x200>)
 80159ba:	4613      	mov	r3, r2
 80159bc:	005b      	lsls	r3, r3, #1
 80159be:	4413      	add	r3, r2
 80159c0:	00db      	lsls	r3, r3, #3
 80159c2:	440b      	add	r3, r1
 80159c4:	3308      	adds	r3, #8
 80159c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80159c8:	68fa      	ldr	r2, [r7, #12]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d117      	bne.n	80159fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	6819      	ldr	r1, [r3, #0]
 80159d2:	7dfa      	ldrb	r2, [r7, #23]
 80159d4:	481f      	ldr	r0, [pc, #124]	@ (8015a54 <etharp_output+0x200>)
 80159d6:	4613      	mov	r3, r2
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	4413      	add	r3, r2
 80159dc:	00db      	lsls	r3, r3, #3
 80159de:	4403      	add	r3, r0
 80159e0:	3304      	adds	r3, #4
 80159e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80159e4:	4299      	cmp	r1, r3
 80159e6:	d10a      	bne.n	80159fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80159e8:	4a19      	ldr	r2, [pc, #100]	@ (8015a50 <etharp_output+0x1fc>)
 80159ea:	7dfb      	ldrb	r3, [r7, #23]
 80159ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80159ee:	7dfb      	ldrb	r3, [r7, #23]
 80159f0:	461a      	mov	r2, r3
 80159f2:	68b9      	ldr	r1, [r7, #8]
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f7ff fe93 	bl	8015720 <etharp_output_to_arp_index>
 80159fa:	4603      	mov	r3, r0
 80159fc:	e018      	b.n	8015a30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80159fe:	7dfb      	ldrb	r3, [r7, #23]
 8015a00:	3301      	adds	r3, #1
 8015a02:	75fb      	strb	r3, [r7, #23]
 8015a04:	7dfb      	ldrb	r3, [r7, #23]
 8015a06:	2b09      	cmp	r3, #9
 8015a08:	d9ca      	bls.n	80159a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015a0a:	68ba      	ldr	r2, [r7, #8]
 8015a0c:	69b9      	ldr	r1, [r7, #24]
 8015a0e:	68f8      	ldr	r0, [r7, #12]
 8015a10:	f000 f822 	bl	8015a58 <etharp_query>
 8015a14:	4603      	mov	r3, r0
 8015a16:	e00b      	b.n	8015a30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	68b9      	ldr	r1, [r7, #8]
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f001 fd45 	bl	80174b8 <ethernet_output>
 8015a2e:	4603      	mov	r3, r0
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3720      	adds	r7, #32
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}
 8015a38:	0801d564 	.word	0x0801d564
 8015a3c:	0801d6b4 	.word	0x0801d6b4
 8015a40:	0801d5dc 	.word	0x0801d5dc
 8015a44:	0801d704 	.word	0x0801d704
 8015a48:	0801d6a4 	.word	0x0801d6a4
 8015a4c:	0801dd7c 	.word	0x0801dd7c
 8015a50:	2000e214 	.word	0x2000e214
 8015a54:	2000e124 	.word	0x2000e124

08015a58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08c      	sub	sp, #48	@ 0x30
 8015a5c:	af02      	add	r7, sp, #8
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	3326      	adds	r3, #38	@ 0x26
 8015a68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015a6a:	23ff      	movs	r3, #255	@ 0xff
 8015a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015a70:	2300      	movs	r3, #0
 8015a72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	68f9      	ldr	r1, [r7, #12]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 fe0e 	bl	801669c <ip4_addr_isbroadcast_u32>
 8015a80:	4603      	mov	r3, r0
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d10c      	bne.n	8015aa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a8e:	2be0      	cmp	r3, #224	@ 0xe0
 8015a90:	d006      	beq.n	8015aa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d003      	beq.n	8015aa0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d102      	bne.n	8015aa6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015aa0:	f06f 030f 	mvn.w	r3, #15
 8015aa4:	e101      	b.n	8015caa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015aa6:	68fa      	ldr	r2, [r7, #12]
 8015aa8:	2101      	movs	r1, #1
 8015aaa:	68b8      	ldr	r0, [r7, #8]
 8015aac:	f7ff fb60 	bl	8015170 <etharp_find_entry>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	da02      	bge.n	8015ac2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015abc:	8a7b      	ldrh	r3, [r7, #18]
 8015abe:	b25b      	sxtb	r3, r3
 8015ac0:	e0f3      	b.n	8015caa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015ac2:	8a7b      	ldrh	r3, [r7, #18]
 8015ac4:	2b7e      	cmp	r3, #126	@ 0x7e
 8015ac6:	d906      	bls.n	8015ad6 <etharp_query+0x7e>
 8015ac8:	4b7a      	ldr	r3, [pc, #488]	@ (8015cb4 <etharp_query+0x25c>)
 8015aca:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015ace:	497a      	ldr	r1, [pc, #488]	@ (8015cb8 <etharp_query+0x260>)
 8015ad0:	487a      	ldr	r0, [pc, #488]	@ (8015cbc <etharp_query+0x264>)
 8015ad2:	f002 fc27 	bl	8018324 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015ad6:	8a7b      	ldrh	r3, [r7, #18]
 8015ad8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015ada:	7c7a      	ldrb	r2, [r7, #17]
 8015adc:	4978      	ldr	r1, [pc, #480]	@ (8015cc0 <etharp_query+0x268>)
 8015ade:	4613      	mov	r3, r2
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	4413      	add	r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	440b      	add	r3, r1
 8015ae8:	3314      	adds	r3, #20
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d115      	bne.n	8015b1c <etharp_query+0xc4>
    is_new_entry = 1;
 8015af0:	2301      	movs	r3, #1
 8015af2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015af4:	7c7a      	ldrb	r2, [r7, #17]
 8015af6:	4972      	ldr	r1, [pc, #456]	@ (8015cc0 <etharp_query+0x268>)
 8015af8:	4613      	mov	r3, r2
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	4413      	add	r3, r2
 8015afe:	00db      	lsls	r3, r3, #3
 8015b00:	440b      	add	r3, r1
 8015b02:	3314      	adds	r3, #20
 8015b04:	2201      	movs	r2, #1
 8015b06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015b08:	7c7a      	ldrb	r2, [r7, #17]
 8015b0a:	496d      	ldr	r1, [pc, #436]	@ (8015cc0 <etharp_query+0x268>)
 8015b0c:	4613      	mov	r3, r2
 8015b0e:	005b      	lsls	r3, r3, #1
 8015b10:	4413      	add	r3, r2
 8015b12:	00db      	lsls	r3, r3, #3
 8015b14:	440b      	add	r3, r1
 8015b16:	3308      	adds	r3, #8
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015b1c:	7c7a      	ldrb	r2, [r7, #17]
 8015b1e:	4968      	ldr	r1, [pc, #416]	@ (8015cc0 <etharp_query+0x268>)
 8015b20:	4613      	mov	r3, r2
 8015b22:	005b      	lsls	r3, r3, #1
 8015b24:	4413      	add	r3, r2
 8015b26:	00db      	lsls	r3, r3, #3
 8015b28:	440b      	add	r3, r1
 8015b2a:	3314      	adds	r3, #20
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d011      	beq.n	8015b56 <etharp_query+0xfe>
 8015b32:	7c7a      	ldrb	r2, [r7, #17]
 8015b34:	4962      	ldr	r1, [pc, #392]	@ (8015cc0 <etharp_query+0x268>)
 8015b36:	4613      	mov	r3, r2
 8015b38:	005b      	lsls	r3, r3, #1
 8015b3a:	4413      	add	r3, r2
 8015b3c:	00db      	lsls	r3, r3, #3
 8015b3e:	440b      	add	r3, r1
 8015b40:	3314      	adds	r3, #20
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	d806      	bhi.n	8015b56 <etharp_query+0xfe>
 8015b48:	4b5a      	ldr	r3, [pc, #360]	@ (8015cb4 <etharp_query+0x25c>)
 8015b4a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015b4e:	495d      	ldr	r1, [pc, #372]	@ (8015cc4 <etharp_query+0x26c>)
 8015b50:	485a      	ldr	r0, [pc, #360]	@ (8015cbc <etharp_query+0x264>)
 8015b52:	f002 fbe7 	bl	8018324 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015b56:	6a3b      	ldr	r3, [r7, #32]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d102      	bne.n	8015b62 <etharp_query+0x10a>
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d10c      	bne.n	8015b7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015b62:	68b9      	ldr	r1, [r7, #8]
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f000 f963 	bl	8015e30 <etharp_request>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d102      	bne.n	8015b7c <etharp_query+0x124>
      return result;
 8015b76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015b7a:	e096      	b.n	8015caa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d106      	bne.n	8015b90 <etharp_query+0x138>
 8015b82:	4b4c      	ldr	r3, [pc, #304]	@ (8015cb4 <etharp_query+0x25c>)
 8015b84:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015b88:	494f      	ldr	r1, [pc, #316]	@ (8015cc8 <etharp_query+0x270>)
 8015b8a:	484c      	ldr	r0, [pc, #304]	@ (8015cbc <etharp_query+0x264>)
 8015b8c:	f002 fbca 	bl	8018324 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015b90:	7c7a      	ldrb	r2, [r7, #17]
 8015b92:	494b      	ldr	r1, [pc, #300]	@ (8015cc0 <etharp_query+0x268>)
 8015b94:	4613      	mov	r3, r2
 8015b96:	005b      	lsls	r3, r3, #1
 8015b98:	4413      	add	r3, r2
 8015b9a:	00db      	lsls	r3, r3, #3
 8015b9c:	440b      	add	r3, r1
 8015b9e:	3314      	adds	r3, #20
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d917      	bls.n	8015bd6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015ba6:	4a49      	ldr	r2, [pc, #292]	@ (8015ccc <etharp_query+0x274>)
 8015ba8:	7c7b      	ldrb	r3, [r7, #17]
 8015baa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015bac:	7c7a      	ldrb	r2, [r7, #17]
 8015bae:	4613      	mov	r3, r2
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	4413      	add	r3, r2
 8015bb4:	00db      	lsls	r3, r3, #3
 8015bb6:	3308      	adds	r3, #8
 8015bb8:	4a41      	ldr	r2, [pc, #260]	@ (8015cc0 <etharp_query+0x268>)
 8015bba:	4413      	add	r3, r2
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015bc2:	9200      	str	r2, [sp, #0]
 8015bc4:	697a      	ldr	r2, [r7, #20]
 8015bc6:	6879      	ldr	r1, [r7, #4]
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f001 fc75 	bl	80174b8 <ethernet_output>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015bd4:	e067      	b.n	8015ca6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015bd6:	7c7a      	ldrb	r2, [r7, #17]
 8015bd8:	4939      	ldr	r1, [pc, #228]	@ (8015cc0 <etharp_query+0x268>)
 8015bda:	4613      	mov	r3, r2
 8015bdc:	005b      	lsls	r3, r3, #1
 8015bde:	4413      	add	r3, r2
 8015be0:	00db      	lsls	r3, r3, #3
 8015be2:	440b      	add	r3, r1
 8015be4:	3314      	adds	r3, #20
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	2b01      	cmp	r3, #1
 8015bea:	d15c      	bne.n	8015ca6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015bec:	2300      	movs	r3, #0
 8015bee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015bf4:	e01c      	b.n	8015c30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	895a      	ldrh	r2, [r3, #10]
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	891b      	ldrh	r3, [r3, #8]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d10a      	bne.n	8015c18 <etharp_query+0x1c0>
 8015c02:	69fb      	ldr	r3, [r7, #28]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d006      	beq.n	8015c18 <etharp_query+0x1c0>
 8015c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8015cb4 <etharp_query+0x25c>)
 8015c0c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015c10:	492f      	ldr	r1, [pc, #188]	@ (8015cd0 <etharp_query+0x278>)
 8015c12:	482a      	ldr	r0, [pc, #168]	@ (8015cbc <etharp_query+0x264>)
 8015c14:	f002 fb86 	bl	8018324 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015c18:	69fb      	ldr	r3, [r7, #28]
 8015c1a:	7b1b      	ldrb	r3, [r3, #12]
 8015c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d002      	beq.n	8015c2a <etharp_query+0x1d2>
        copy_needed = 1;
 8015c24:	2301      	movs	r3, #1
 8015c26:	61bb      	str	r3, [r7, #24]
        break;
 8015c28:	e005      	b.n	8015c36 <etharp_query+0x1de>
      }
      p = p->next;
 8015c2a:	69fb      	ldr	r3, [r7, #28]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d1df      	bne.n	8015bf6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015c36:	69bb      	ldr	r3, [r7, #24]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d007      	beq.n	8015c4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015c42:	200e      	movs	r0, #14
 8015c44:	f7f8 fc8c 	bl	800e560 <pbuf_clone>
 8015c48:	61f8      	str	r0, [r7, #28]
 8015c4a:	e004      	b.n	8015c56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015c50:	69f8      	ldr	r0, [r7, #28]
 8015c52:	f7f8 fac3 	bl	800e1dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015c56:	69fb      	ldr	r3, [r7, #28]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d021      	beq.n	8015ca0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015c5c:	7c7a      	ldrb	r2, [r7, #17]
 8015c5e:	4918      	ldr	r1, [pc, #96]	@ (8015cc0 <etharp_query+0x268>)
 8015c60:	4613      	mov	r3, r2
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	4413      	add	r3, r2
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	440b      	add	r3, r1
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00a      	beq.n	8015c86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015c70:	7c7a      	ldrb	r2, [r7, #17]
 8015c72:	4913      	ldr	r1, [pc, #76]	@ (8015cc0 <etharp_query+0x268>)
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	440b      	add	r3, r1
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7f8 fa05 	bl	800e090 <pbuf_free>
      }
      arp_table[i].q = p;
 8015c86:	7c7a      	ldrb	r2, [r7, #17]
 8015c88:	490d      	ldr	r1, [pc, #52]	@ (8015cc0 <etharp_query+0x268>)
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4413      	add	r3, r2
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	440b      	add	r3, r1
 8015c94:	69fa      	ldr	r2, [r7, #28]
 8015c96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015c9e:	e002      	b.n	8015ca6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015ca0:	23ff      	movs	r3, #255	@ 0xff
 8015ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015ca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3728      	adds	r7, #40	@ 0x28
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
 8015cb2:	bf00      	nop
 8015cb4:	0801d564 	.word	0x0801d564
 8015cb8:	0801d710 	.word	0x0801d710
 8015cbc:	0801d5dc 	.word	0x0801d5dc
 8015cc0:	2000e124 	.word	0x2000e124
 8015cc4:	0801d720 	.word	0x0801d720
 8015cc8:	0801d704 	.word	0x0801d704
 8015ccc:	2000e214 	.word	0x2000e214
 8015cd0:	0801d748 	.word	0x0801d748

08015cd4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b08a      	sub	sp, #40	@ 0x28
 8015cd8:	af02      	add	r7, sp, #8
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
 8015ce0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d106      	bne.n	8015cfa <etharp_raw+0x26>
 8015cec:	4b3a      	ldr	r3, [pc, #232]	@ (8015dd8 <etharp_raw+0x104>)
 8015cee:	f240 4257 	movw	r2, #1111	@ 0x457
 8015cf2:	493a      	ldr	r1, [pc, #232]	@ (8015ddc <etharp_raw+0x108>)
 8015cf4:	483a      	ldr	r0, [pc, #232]	@ (8015de0 <etharp_raw+0x10c>)
 8015cf6:	f002 fb15 	bl	8018324 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015cfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015cfe:	211c      	movs	r1, #28
 8015d00:	200e      	movs	r0, #14
 8015d02:	f7f7 fee1 	bl	800dac8 <pbuf_alloc>
 8015d06:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d102      	bne.n	8015d14 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d12:	e05d      	b.n	8015dd0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015d14:	69bb      	ldr	r3, [r7, #24]
 8015d16:	895b      	ldrh	r3, [r3, #10]
 8015d18:	2b1b      	cmp	r3, #27
 8015d1a:	d806      	bhi.n	8015d2a <etharp_raw+0x56>
 8015d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8015dd8 <etharp_raw+0x104>)
 8015d1e:	f240 4262 	movw	r2, #1122	@ 0x462
 8015d22:	4930      	ldr	r1, [pc, #192]	@ (8015de4 <etharp_raw+0x110>)
 8015d24:	482e      	ldr	r0, [pc, #184]	@ (8015de0 <etharp_raw+0x10c>)
 8015d26:	f002 fafd 	bl	8018324 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015d30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7f6 fe00 	bl	800c938 <lwip_htons>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015d46:	2b06      	cmp	r3, #6
 8015d48:	d006      	beq.n	8015d58 <etharp_raw+0x84>
 8015d4a:	4b23      	ldr	r3, [pc, #140]	@ (8015dd8 <etharp_raw+0x104>)
 8015d4c:	f240 4269 	movw	r2, #1129	@ 0x469
 8015d50:	4925      	ldr	r1, [pc, #148]	@ (8015de8 <etharp_raw+0x114>)
 8015d52:	4823      	ldr	r0, [pc, #140]	@ (8015de0 <etharp_raw+0x10c>)
 8015d54:	f002 fae6 	bl	8018324 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	3308      	adds	r3, #8
 8015d5c:	2206      	movs	r2, #6
 8015d5e:	6839      	ldr	r1, [r7, #0]
 8015d60:	4618      	mov	r0, r3
 8015d62:	f002 fd3e 	bl	80187e2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	3312      	adds	r3, #18
 8015d6a:	2206      	movs	r2, #6
 8015d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f002 fd37 	bl	80187e2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	330e      	adds	r3, #14
 8015d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d7a:	6812      	ldr	r2, [r2, #0]
 8015d7c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	3318      	adds	r3, #24
 8015d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d84:	6812      	ldr	r2, [r2, #0]
 8015d86:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	701a      	strb	r2, [r3, #0]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	f042 0201 	orr.w	r2, r2, #1
 8015d94:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015d96:	697b      	ldr	r3, [r7, #20]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	f042 0208 	orr.w	r2, r2, #8
 8015d9e:	709a      	strb	r2, [r3, #2]
 8015da0:	2200      	movs	r2, #0
 8015da2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	2206      	movs	r2, #6
 8015da8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	2204      	movs	r2, #4
 8015dae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015db0:	f640 0306 	movw	r3, #2054	@ 0x806
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	68ba      	ldr	r2, [r7, #8]
 8015dba:	69b9      	ldr	r1, [r7, #24]
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f001 fb7b 	bl	80174b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015dc2:	69b8      	ldr	r0, [r7, #24]
 8015dc4:	f7f8 f964 	bl	800e090 <pbuf_free>
  p = NULL;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015dcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3720      	adds	r7, #32
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	0801d564 	.word	0x0801d564
 8015ddc:	0801d6b4 	.word	0x0801d6b4
 8015de0:	0801d5dc 	.word	0x0801d5dc
 8015de4:	0801d764 	.word	0x0801d764
 8015de8:	0801d798 	.word	0x0801d798

08015dec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b088      	sub	sp, #32
 8015df0:	af04      	add	r7, sp, #16
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015e08:	2201      	movs	r2, #1
 8015e0a:	9203      	str	r2, [sp, #12]
 8015e0c:	68ba      	ldr	r2, [r7, #8]
 8015e0e:	9202      	str	r2, [sp, #8]
 8015e10:	4a06      	ldr	r2, [pc, #24]	@ (8015e2c <etharp_request_dst+0x40>)
 8015e12:	9201      	str	r2, [sp, #4]
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	4603      	mov	r3, r0
 8015e18:	687a      	ldr	r2, [r7, #4]
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f7ff ff5a 	bl	8015cd4 <etharp_raw>
 8015e20:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	0801dd84 	.word	0x0801dd84

08015e30 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015e3a:	4a05      	ldr	r2, [pc, #20]	@ (8015e50 <etharp_request+0x20>)
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7ff ffd4 	bl	8015dec <etharp_request_dst>
 8015e44:	4603      	mov	r3, r0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	0801dd7c 	.word	0x0801dd7c

08015e54 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b08e      	sub	sp, #56	@ 0x38
 8015e58:	af04      	add	r7, sp, #16
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015e5e:	4b79      	ldr	r3, [pc, #484]	@ (8016044 <icmp_input+0x1f0>)
 8015e60:	689b      	ldr	r3, [r3, #8]
 8015e62:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e66:	781b      	ldrb	r3, [r3, #0]
 8015e68:	f003 030f 	and.w	r3, r3, #15
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	009b      	lsls	r3, r3, #2
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015e74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015e76:	2b13      	cmp	r3, #19
 8015e78:	f240 80cd 	bls.w	8016016 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	895b      	ldrh	r3, [r3, #10]
 8015e80:	2b03      	cmp	r3, #3
 8015e82:	f240 80ca 	bls.w	801601a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015e90:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f000 80b7 	beq.w	8016008 <icmp_input+0x1b4>
 8015e9a:	2b08      	cmp	r3, #8
 8015e9c:	f040 80b7 	bne.w	801600e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015ea0:	4b69      	ldr	r3, [pc, #420]	@ (8016048 <icmp_input+0x1f4>)
 8015ea2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ea4:	4b67      	ldr	r3, [pc, #412]	@ (8016044 <icmp_input+0x1f0>)
 8015ea6:	695b      	ldr	r3, [r3, #20]
 8015ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015eac:	2be0      	cmp	r3, #224	@ 0xe0
 8015eae:	f000 80bb 	beq.w	8016028 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015eb2:	4b64      	ldr	r3, [pc, #400]	@ (8016044 <icmp_input+0x1f0>)
 8015eb4:	695b      	ldr	r3, [r3, #20]
 8015eb6:	4a63      	ldr	r2, [pc, #396]	@ (8016044 <icmp_input+0x1f0>)
 8015eb8:	6812      	ldr	r2, [r2, #0]
 8015eba:	4611      	mov	r1, r2
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f000 fbed 	bl	801669c <ip4_addr_isbroadcast_u32>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	f040 80b1 	bne.w	801602c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	891b      	ldrh	r3, [r3, #8]
 8015ece:	2b07      	cmp	r3, #7
 8015ed0:	f240 80a5 	bls.w	801601e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015ed4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ed6:	330e      	adds	r3, #14
 8015ed8:	4619      	mov	r1, r3
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7f8 f842 	bl	800df64 <pbuf_add_header>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d04b      	beq.n	8015f7e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	891a      	ldrh	r2, [r3, #8]
 8015eea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015eec:	4413      	add	r3, r2
 8015eee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	891b      	ldrh	r3, [r3, #8]
 8015ef4:	8b7a      	ldrh	r2, [r7, #26]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	f0c0 809a 	bcc.w	8016030 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015efc:	8b7b      	ldrh	r3, [r7, #26]
 8015efe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f02:	4619      	mov	r1, r3
 8015f04:	200e      	movs	r0, #14
 8015f06:	f7f7 fddf 	bl	800dac8 <pbuf_alloc>
 8015f0a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f000 8090 	beq.w	8016034 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	895b      	ldrh	r3, [r3, #10]
 8015f18:	461a      	mov	r2, r3
 8015f1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015f1c:	3308      	adds	r3, #8
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d203      	bcs.n	8015f2a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015f22:	6978      	ldr	r0, [r7, #20]
 8015f24:	f7f8 f8b4 	bl	800e090 <pbuf_free>
          goto icmperr;
 8015f28:	e085      	b.n	8016036 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	685b      	ldr	r3, [r3, #4]
 8015f2e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f32:	4618      	mov	r0, r3
 8015f34:	f002 fc55 	bl	80187e2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	6978      	ldr	r0, [r7, #20]
 8015f3e:	f7f8 f821 	bl	800df84 <pbuf_remove_header>
 8015f42:	4603      	mov	r3, r0
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d009      	beq.n	8015f5c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015f48:	4b40      	ldr	r3, [pc, #256]	@ (801604c <icmp_input+0x1f8>)
 8015f4a:	22b6      	movs	r2, #182	@ 0xb6
 8015f4c:	4940      	ldr	r1, [pc, #256]	@ (8016050 <icmp_input+0x1fc>)
 8015f4e:	4841      	ldr	r0, [pc, #260]	@ (8016054 <icmp_input+0x200>)
 8015f50:	f002 f9e8 	bl	8018324 <iprintf>
          pbuf_free(r);
 8015f54:	6978      	ldr	r0, [r7, #20]
 8015f56:	f7f8 f89b 	bl	800e090 <pbuf_free>
          goto icmperr;
 8015f5a:	e06c      	b.n	8016036 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015f5c:	6879      	ldr	r1, [r7, #4]
 8015f5e:	6978      	ldr	r0, [r7, #20]
 8015f60:	f7f8 f9ba 	bl	800e2d8 <pbuf_copy>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d003      	beq.n	8015f72 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015f6a:	6978      	ldr	r0, [r7, #20]
 8015f6c:	f7f8 f890 	bl	800e090 <pbuf_free>
          goto icmperr;
 8015f70:	e061      	b.n	8016036 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7f8 f88c 	bl	800e090 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	607b      	str	r3, [r7, #4]
 8015f7c:	e00f      	b.n	8015f9e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015f7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015f80:	330e      	adds	r3, #14
 8015f82:	4619      	mov	r1, r3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7f7 fffd 	bl	800df84 <pbuf_remove_header>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d006      	beq.n	8015f9e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015f90:	4b2e      	ldr	r3, [pc, #184]	@ (801604c <icmp_input+0x1f8>)
 8015f92:	22c7      	movs	r2, #199	@ 0xc7
 8015f94:	4930      	ldr	r1, [pc, #192]	@ (8016058 <icmp_input+0x204>)
 8015f96:	482f      	ldr	r0, [pc, #188]	@ (8016054 <icmp_input+0x200>)
 8015f98:	f002 f9c4 	bl	8018324 <iprintf>
          goto icmperr;
 8015f9c:	e04b      	b.n	8016036 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f7f7 ffdb 	bl	800df64 <pbuf_add_header>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d12b      	bne.n	801600c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015fba:	69fb      	ldr	r3, [r7, #28]
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015fc2:	4b20      	ldr	r3, [pc, #128]	@ (8016044 <icmp_input+0x1f0>)
 8015fc4:	691a      	ldr	r2, [r3, #16]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	709a      	strb	r2, [r3, #2]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	22ff      	movs	r2, #255	@ 0xff
 8015fde:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	729a      	strb	r2, [r3, #10]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	9302      	str	r3, [sp, #8]
 8015fee:	2301      	movs	r3, #1
 8015ff0:	9301      	str	r3, [sp, #4]
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	9300      	str	r3, [sp, #0]
 8015ff6:	23ff      	movs	r3, #255	@ 0xff
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	69f9      	ldr	r1, [r7, #28]
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f000 fa75 	bl	80164ec <ip4_output_if>
 8016002:	4603      	mov	r3, r0
 8016004:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016006:	e001      	b.n	801600c <icmp_input+0x1b8>
      break;
 8016008:	bf00      	nop
 801600a:	e000      	b.n	801600e <icmp_input+0x1ba>
      break;
 801600c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7f8 f83e 	bl	800e090 <pbuf_free>
  return;
 8016014:	e013      	b.n	801603e <icmp_input+0x1ea>
    goto lenerr;
 8016016:	bf00      	nop
 8016018:	e002      	b.n	8016020 <icmp_input+0x1cc>
    goto lenerr;
 801601a:	bf00      	nop
 801601c:	e000      	b.n	8016020 <icmp_input+0x1cc>
        goto lenerr;
 801601e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7f8 f835 	bl	800e090 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016026:	e00a      	b.n	801603e <icmp_input+0x1ea>
        goto icmperr;
 8016028:	bf00      	nop
 801602a:	e004      	b.n	8016036 <icmp_input+0x1e2>
        goto icmperr;
 801602c:	bf00      	nop
 801602e:	e002      	b.n	8016036 <icmp_input+0x1e2>
          goto icmperr;
 8016030:	bf00      	nop
 8016032:	e000      	b.n	8016036 <icmp_input+0x1e2>
          goto icmperr;
 8016034:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f7f8 f82a 	bl	800e090 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801603c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801603e:	3728      	adds	r7, #40	@ 0x28
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	200087b0 	.word	0x200087b0
 8016048:	200087c4 	.word	0x200087c4
 801604c:	0801d7dc 	.word	0x0801d7dc
 8016050:	0801d814 	.word	0x0801d814
 8016054:	0801d84c 	.word	0x0801d84c
 8016058:	0801d874 	.word	0x0801d874

0801605c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	460b      	mov	r3, r1
 8016066:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016068:	78fb      	ldrb	r3, [r7, #3]
 801606a:	461a      	mov	r2, r3
 801606c:	2103      	movs	r1, #3
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f814 	bl	801609c <icmp_send_response>
}
 8016074:	bf00      	nop
 8016076:	3708      	adds	r7, #8
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	460b      	mov	r3, r1
 8016086:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016088:	78fb      	ldrb	r3, [r7, #3]
 801608a:	461a      	mov	r2, r3
 801608c:	210b      	movs	r1, #11
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 f804 	bl	801609c <icmp_send_response>
}
 8016094:	bf00      	nop
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}

0801609c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b08c      	sub	sp, #48	@ 0x30
 80160a0:	af04      	add	r7, sp, #16
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	460b      	mov	r3, r1
 80160a6:	70fb      	strb	r3, [r7, #3]
 80160a8:	4613      	mov	r3, r2
 80160aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80160ac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80160b0:	2124      	movs	r1, #36	@ 0x24
 80160b2:	2022      	movs	r0, #34	@ 0x22
 80160b4:	f7f7 fd08 	bl	800dac8 <pbuf_alloc>
 80160b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80160ba:	69fb      	ldr	r3, [r7, #28]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d04c      	beq.n	801615a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80160c0:	69fb      	ldr	r3, [r7, #28]
 80160c2:	895b      	ldrh	r3, [r3, #10]
 80160c4:	2b23      	cmp	r3, #35	@ 0x23
 80160c6:	d806      	bhi.n	80160d6 <icmp_send_response+0x3a>
 80160c8:	4b26      	ldr	r3, [pc, #152]	@ (8016164 <icmp_send_response+0xc8>)
 80160ca:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80160ce:	4926      	ldr	r1, [pc, #152]	@ (8016168 <icmp_send_response+0xcc>)
 80160d0:	4826      	ldr	r0, [pc, #152]	@ (801616c <icmp_send_response+0xd0>)
 80160d2:	f002 f927 	bl	8018324 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	78fa      	ldrb	r2, [r7, #3]
 80160e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80160e8:	697b      	ldr	r3, [r7, #20]
 80160ea:	78ba      	ldrb	r2, [r7, #2]
 80160ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	2200      	movs	r2, #0
 80160f2:	711a      	strb	r2, [r3, #4]
 80160f4:	2200      	movs	r2, #0
 80160f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	2200      	movs	r2, #0
 80160fc:	719a      	strb	r2, [r3, #6]
 80160fe:	2200      	movs	r2, #0
 8016100:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016102:	69fb      	ldr	r3, [r7, #28]
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	f103 0008 	add.w	r0, r3, #8
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	221c      	movs	r2, #28
 8016110:	4619      	mov	r1, r3
 8016112:	f002 fb66 	bl	80187e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016116:	69bb      	ldr	r3, [r7, #24]
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801611c:	f107 030c 	add.w	r3, r7, #12
 8016120:	4618      	mov	r0, r3
 8016122:	f000 f825 	bl	8016170 <ip4_route>
 8016126:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d011      	beq.n	8016152 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	2200      	movs	r2, #0
 8016132:	709a      	strb	r2, [r3, #2]
 8016134:	2200      	movs	r2, #0
 8016136:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016138:	f107 020c 	add.w	r2, r7, #12
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	9302      	str	r3, [sp, #8]
 8016140:	2301      	movs	r3, #1
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	2300      	movs	r3, #0
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	23ff      	movs	r3, #255	@ 0xff
 801614a:	2100      	movs	r1, #0
 801614c:	69f8      	ldr	r0, [r7, #28]
 801614e:	f000 f9cd 	bl	80164ec <ip4_output_if>
  }
  pbuf_free(q);
 8016152:	69f8      	ldr	r0, [r7, #28]
 8016154:	f7f7 ff9c 	bl	800e090 <pbuf_free>
 8016158:	e000      	b.n	801615c <icmp_send_response+0xc0>
    return;
 801615a:	bf00      	nop
}
 801615c:	3720      	adds	r7, #32
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	0801d7dc 	.word	0x0801d7dc
 8016168:	0801d8a8 	.word	0x0801d8a8
 801616c:	0801d84c 	.word	0x0801d84c

08016170 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016170:	b480      	push	{r7}
 8016172:	b085      	sub	sp, #20
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016178:	4b33      	ldr	r3, [pc, #204]	@ (8016248 <ip4_route+0xd8>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	60fb      	str	r3, [r7, #12]
 801617e:	e036      	b.n	80161ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016186:	f003 0301 	and.w	r3, r3, #1
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b00      	cmp	r3, #0
 801618e:	d02b      	beq.n	80161e8 <ip4_route+0x78>
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016196:	089b      	lsrs	r3, r3, #2
 8016198:	f003 0301 	and.w	r3, r3, #1
 801619c:	b2db      	uxtb	r3, r3
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d022      	beq.n	80161e8 <ip4_route+0x78>
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	3304      	adds	r3, #4
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d01d      	beq.n	80161e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	3304      	adds	r3, #4
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	405a      	eors	r2, r3
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	3308      	adds	r3, #8
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	4013      	ands	r3, r2
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d101      	bne.n	80161c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	e038      	b.n	801623a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80161ce:	f003 0302 	and.w	r3, r3, #2
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d108      	bne.n	80161e8 <ip4_route+0x78>
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	330c      	adds	r3, #12
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d101      	bne.n	80161e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	e028      	b.n	801623a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	60fb      	str	r3, [r7, #12]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d1c5      	bne.n	8016180 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80161f4:	4b15      	ldr	r3, [pc, #84]	@ (801624c <ip4_route+0xdc>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d01a      	beq.n	8016232 <ip4_route+0xc2>
 80161fc:	4b13      	ldr	r3, [pc, #76]	@ (801624c <ip4_route+0xdc>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016204:	f003 0301 	and.w	r3, r3, #1
 8016208:	2b00      	cmp	r3, #0
 801620a:	d012      	beq.n	8016232 <ip4_route+0xc2>
 801620c:	4b0f      	ldr	r3, [pc, #60]	@ (801624c <ip4_route+0xdc>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016214:	f003 0304 	and.w	r3, r3, #4
 8016218:	2b00      	cmp	r3, #0
 801621a:	d00a      	beq.n	8016232 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801621c:	4b0b      	ldr	r3, [pc, #44]	@ (801624c <ip4_route+0xdc>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	3304      	adds	r3, #4
 8016222:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016224:	2b00      	cmp	r3, #0
 8016226:	d004      	beq.n	8016232 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	b2db      	uxtb	r3, r3
 801622e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016230:	d101      	bne.n	8016236 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016232:	2300      	movs	r3, #0
 8016234:	e001      	b.n	801623a <ip4_route+0xca>
  }

  return netif_default;
 8016236:	4b05      	ldr	r3, [pc, #20]	@ (801624c <ip4_route+0xdc>)
 8016238:	681b      	ldr	r3, [r3, #0]
}
 801623a:	4618      	mov	r0, r3
 801623c:	3714      	adds	r7, #20
 801623e:	46bd      	mov	sp, r7
 8016240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016244:	4770      	bx	lr
 8016246:	bf00      	nop
 8016248:	2000e0b8 	.word	0x2000e0b8
 801624c:	2000e0bc 	.word	0x2000e0bc

08016250 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801625e:	f003 0301 	and.w	r3, r3, #1
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	d016      	beq.n	8016296 <ip4_input_accept+0x46>
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	3304      	adds	r3, #4
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d011      	beq.n	8016296 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016272:	4b0b      	ldr	r3, [pc, #44]	@ (80162a0 <ip4_input_accept+0x50>)
 8016274:	695a      	ldr	r2, [r3, #20]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	3304      	adds	r3, #4
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	429a      	cmp	r2, r3
 801627e:	d008      	beq.n	8016292 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016280:	4b07      	ldr	r3, [pc, #28]	@ (80162a0 <ip4_input_accept+0x50>)
 8016282:	695b      	ldr	r3, [r3, #20]
 8016284:	6879      	ldr	r1, [r7, #4]
 8016286:	4618      	mov	r0, r3
 8016288:	f000 fa08 	bl	801669c <ip4_addr_isbroadcast_u32>
 801628c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801628e:	2b00      	cmp	r3, #0
 8016290:	d001      	beq.n	8016296 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016292:	2301      	movs	r3, #1
 8016294:	e000      	b.n	8016298 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016296:	2300      	movs	r3, #0
}
 8016298:	4618      	mov	r0, r3
 801629a:	3708      	adds	r7, #8
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	200087b0 	.word	0x200087b0

080162a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	091b      	lsrs	r3, r3, #4
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	2b04      	cmp	r3, #4
 80162be:	d004      	beq.n	80162ca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f7f7 fee5 	bl	800e090 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80162c6:	2300      	movs	r3, #0
 80162c8:	e107      	b.n	80164da <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	f003 030f 	and.w	r3, r3, #15
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	009b      	lsls	r3, r3, #2
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	885b      	ldrh	r3, [r3, #2]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f6 fb29 	bl	800c938 <lwip_htons>
 80162e6:	4603      	mov	r3, r0
 80162e8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	891b      	ldrh	r3, [r3, #8]
 80162ee:	89ba      	ldrh	r2, [r7, #12]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d204      	bcs.n	80162fe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80162f4:	89bb      	ldrh	r3, [r7, #12]
 80162f6:	4619      	mov	r1, r3
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7f7 fd43 	bl	800dd84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	895b      	ldrh	r3, [r3, #10]
 8016302:	89fa      	ldrh	r2, [r7, #14]
 8016304:	429a      	cmp	r2, r3
 8016306:	d807      	bhi.n	8016318 <ip4_input+0x74>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	891b      	ldrh	r3, [r3, #8]
 801630c:	89ba      	ldrh	r2, [r7, #12]
 801630e:	429a      	cmp	r2, r3
 8016310:	d802      	bhi.n	8016318 <ip4_input+0x74>
 8016312:	89fb      	ldrh	r3, [r7, #14]
 8016314:	2b13      	cmp	r3, #19
 8016316:	d804      	bhi.n	8016322 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f7f7 feb9 	bl	800e090 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801631e:	2300      	movs	r3, #0
 8016320:	e0db      	b.n	80164da <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	691b      	ldr	r3, [r3, #16]
 8016326:	4a6f      	ldr	r2, [pc, #444]	@ (80164e4 <ip4_input+0x240>)
 8016328:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	4a6d      	ldr	r2, [pc, #436]	@ (80164e4 <ip4_input+0x240>)
 8016330:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016332:	4b6c      	ldr	r3, [pc, #432]	@ (80164e4 <ip4_input+0x240>)
 8016334:	695b      	ldr	r3, [r3, #20]
 8016336:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801633a:	2be0      	cmp	r3, #224	@ 0xe0
 801633c:	d112      	bne.n	8016364 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016344:	f003 0301 	and.w	r3, r3, #1
 8016348:	b2db      	uxtb	r3, r3
 801634a:	2b00      	cmp	r3, #0
 801634c:	d007      	beq.n	801635e <ip4_input+0xba>
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	3304      	adds	r3, #4
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d002      	beq.n	801635e <ip4_input+0xba>
      netif = inp;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	613b      	str	r3, [r7, #16]
 801635c:	e02a      	b.n	80163b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801635e:	2300      	movs	r3, #0
 8016360:	613b      	str	r3, [r7, #16]
 8016362:	e027      	b.n	80163b4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016364:	6838      	ldr	r0, [r7, #0]
 8016366:	f7ff ff73 	bl	8016250 <ip4_input_accept>
 801636a:	4603      	mov	r3, r0
 801636c:	2b00      	cmp	r3, #0
 801636e:	d002      	beq.n	8016376 <ip4_input+0xd2>
      netif = inp;
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	613b      	str	r3, [r7, #16]
 8016374:	e01e      	b.n	80163b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016376:	2300      	movs	r3, #0
 8016378:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801637a:	4b5a      	ldr	r3, [pc, #360]	@ (80164e4 <ip4_input+0x240>)
 801637c:	695b      	ldr	r3, [r3, #20]
 801637e:	b2db      	uxtb	r3, r3
 8016380:	2b7f      	cmp	r3, #127	@ 0x7f
 8016382:	d017      	beq.n	80163b4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016384:	4b58      	ldr	r3, [pc, #352]	@ (80164e8 <ip4_input+0x244>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	613b      	str	r3, [r7, #16]
 801638a:	e00e      	b.n	80163aa <ip4_input+0x106>
          if (netif == inp) {
 801638c:	693a      	ldr	r2, [r7, #16]
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	429a      	cmp	r2, r3
 8016392:	d006      	beq.n	80163a2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016394:	6938      	ldr	r0, [r7, #16]
 8016396:	f7ff ff5b 	bl	8016250 <ip4_input_accept>
 801639a:	4603      	mov	r3, r0
 801639c:	2b00      	cmp	r3, #0
 801639e:	d108      	bne.n	80163b2 <ip4_input+0x10e>
 80163a0:	e000      	b.n	80163a4 <ip4_input+0x100>
            continue;
 80163a2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80163a4:	693b      	ldr	r3, [r7, #16]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	613b      	str	r3, [r7, #16]
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d1ed      	bne.n	801638c <ip4_input+0xe8>
 80163b0:	e000      	b.n	80163b4 <ip4_input+0x110>
            break;
 80163b2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80163b4:	4b4b      	ldr	r3, [pc, #300]	@ (80164e4 <ip4_input+0x240>)
 80163b6:	691b      	ldr	r3, [r3, #16]
 80163b8:	6839      	ldr	r1, [r7, #0]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f000 f96e 	bl	801669c <ip4_addr_isbroadcast_u32>
 80163c0:	4603      	mov	r3, r0
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d105      	bne.n	80163d2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80163c6:	4b47      	ldr	r3, [pc, #284]	@ (80164e4 <ip4_input+0x240>)
 80163c8:	691b      	ldr	r3, [r3, #16]
 80163ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80163ce:	2be0      	cmp	r3, #224	@ 0xe0
 80163d0:	d104      	bne.n	80163dc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f7f7 fe5c 	bl	800e090 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80163d8:	2300      	movs	r3, #0
 80163da:	e07e      	b.n	80164da <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d104      	bne.n	80163ec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7f7 fe54 	bl	800e090 <pbuf_free>
    return ERR_OK;
 80163e8:	2300      	movs	r3, #0
 80163ea:	e076      	b.n	80164da <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	88db      	ldrh	r3, [r3, #6]
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	461a      	mov	r2, r3
 80163f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80163f8:	4013      	ands	r3, r2
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d00b      	beq.n	8016416 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f000 fc92 	bl	8016d28 <ip4_reass>
 8016404:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d101      	bne.n	8016410 <ip4_input+0x16c>
      return ERR_OK;
 801640c:	2300      	movs	r3, #0
 801640e:	e064      	b.n	80164da <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016416:	4a33      	ldr	r2, [pc, #204]	@ (80164e4 <ip4_input+0x240>)
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801641c:	4a31      	ldr	r2, [pc, #196]	@ (80164e4 <ip4_input+0x240>)
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016422:	4a30      	ldr	r2, [pc, #192]	@ (80164e4 <ip4_input+0x240>)
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	f003 030f 	and.w	r3, r3, #15
 8016430:	b2db      	uxtb	r3, r3
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	b2db      	uxtb	r3, r3
 8016436:	461a      	mov	r2, r3
 8016438:	4b2a      	ldr	r3, [pc, #168]	@ (80164e4 <ip4_input+0x240>)
 801643a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801643c:	89fb      	ldrh	r3, [r7, #14]
 801643e:	4619      	mov	r1, r3
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f7f7 fd9f 	bl	800df84 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	7a5b      	ldrb	r3, [r3, #9]
 801644a:	2b11      	cmp	r3, #17
 801644c:	d006      	beq.n	801645c <ip4_input+0x1b8>
 801644e:	2b11      	cmp	r3, #17
 8016450:	dc13      	bgt.n	801647a <ip4_input+0x1d6>
 8016452:	2b01      	cmp	r3, #1
 8016454:	d00c      	beq.n	8016470 <ip4_input+0x1cc>
 8016456:	2b06      	cmp	r3, #6
 8016458:	d005      	beq.n	8016466 <ip4_input+0x1c2>
 801645a:	e00e      	b.n	801647a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801645c:	6839      	ldr	r1, [r7, #0]
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7fe fb5a 	bl	8014b18 <udp_input>
        break;
 8016464:	e026      	b.n	80164b4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016466:	6839      	ldr	r1, [r7, #0]
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f7f9 ff19 	bl	80102a0 <tcp_input>
        break;
 801646e:	e021      	b.n	80164b4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016470:	6839      	ldr	r1, [r7, #0]
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff fcee 	bl	8015e54 <icmp_input>
        break;
 8016478:	e01c      	b.n	80164b4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801647a:	4b1a      	ldr	r3, [pc, #104]	@ (80164e4 <ip4_input+0x240>)
 801647c:	695b      	ldr	r3, [r3, #20]
 801647e:	6939      	ldr	r1, [r7, #16]
 8016480:	4618      	mov	r0, r3
 8016482:	f000 f90b 	bl	801669c <ip4_addr_isbroadcast_u32>
 8016486:	4603      	mov	r3, r0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10f      	bne.n	80164ac <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801648c:	4b15      	ldr	r3, [pc, #84]	@ (80164e4 <ip4_input+0x240>)
 801648e:	695b      	ldr	r3, [r3, #20]
 8016490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016494:	2be0      	cmp	r3, #224	@ 0xe0
 8016496:	d009      	beq.n	80164ac <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801649c:	4619      	mov	r1, r3
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f7f7 fde3 	bl	800e06a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80164a4:	2102      	movs	r1, #2
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f7ff fdd8 	bl	801605c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f7f7 fdef 	bl	800e090 <pbuf_free>
        break;
 80164b2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80164b4:	4b0b      	ldr	r3, [pc, #44]	@ (80164e4 <ip4_input+0x240>)
 80164b6:	2200      	movs	r2, #0
 80164b8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80164ba:	4b0a      	ldr	r3, [pc, #40]	@ (80164e4 <ip4_input+0x240>)
 80164bc:	2200      	movs	r2, #0
 80164be:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80164c0:	4b08      	ldr	r3, [pc, #32]	@ (80164e4 <ip4_input+0x240>)
 80164c2:	2200      	movs	r2, #0
 80164c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80164c6:	4b07      	ldr	r3, [pc, #28]	@ (80164e4 <ip4_input+0x240>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80164cc:	4b05      	ldr	r3, [pc, #20]	@ (80164e4 <ip4_input+0x240>)
 80164ce:	2200      	movs	r2, #0
 80164d0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80164d2:	4b04      	ldr	r3, [pc, #16]	@ (80164e4 <ip4_input+0x240>)
 80164d4:	2200      	movs	r2, #0
 80164d6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80164d8:	2300      	movs	r3, #0
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3718      	adds	r7, #24
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	200087b0 	.word	0x200087b0
 80164e8:	2000e0b8 	.word	0x2000e0b8

080164ec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b08a      	sub	sp, #40	@ 0x28
 80164f0:	af04      	add	r7, sp, #16
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
 80164f8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d009      	beq.n	8016518 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d003      	beq.n	8016512 <ip4_output_if+0x26>
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d102      	bne.n	8016518 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016514:	3304      	adds	r3, #4
 8016516:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016518:	78fa      	ldrb	r2, [r7, #3]
 801651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801651c:	9302      	str	r3, [sp, #8]
 801651e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016522:	9301      	str	r3, [sp, #4]
 8016524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016528:	9300      	str	r3, [sp, #0]
 801652a:	4613      	mov	r3, r2
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	6979      	ldr	r1, [r7, #20]
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f000 f805 	bl	8016540 <ip4_output_if_src>
 8016536:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016538:	4618      	mov	r0, r3
 801653a:	3718      	adds	r7, #24
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b088      	sub	sp, #32
 8016544:	af00      	add	r7, sp, #0
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
 801654c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	7b9b      	ldrb	r3, [r3, #14]
 8016552:	2b01      	cmp	r3, #1
 8016554:	d006      	beq.n	8016564 <ip4_output_if_src+0x24>
 8016556:	4b4b      	ldr	r3, [pc, #300]	@ (8016684 <ip4_output_if_src+0x144>)
 8016558:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801655c:	494a      	ldr	r1, [pc, #296]	@ (8016688 <ip4_output_if_src+0x148>)
 801655e:	484b      	ldr	r0, [pc, #300]	@ (801668c <ip4_output_if_src+0x14c>)
 8016560:	f001 fee0 	bl	8018324 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d060      	beq.n	801662c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801656a:	2314      	movs	r3, #20
 801656c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801656e:	2114      	movs	r1, #20
 8016570:	68f8      	ldr	r0, [r7, #12]
 8016572:	f7f7 fcf7 	bl	800df64 <pbuf_add_header>
 8016576:	4603      	mov	r3, r0
 8016578:	2b00      	cmp	r3, #0
 801657a:	d002      	beq.n	8016582 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801657c:	f06f 0301 	mvn.w	r3, #1
 8016580:	e07c      	b.n	801667c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	895b      	ldrh	r3, [r3, #10]
 801658c:	2b13      	cmp	r3, #19
 801658e:	d806      	bhi.n	801659e <ip4_output_if_src+0x5e>
 8016590:	4b3c      	ldr	r3, [pc, #240]	@ (8016684 <ip4_output_if_src+0x144>)
 8016592:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016596:	493e      	ldr	r1, [pc, #248]	@ (8016690 <ip4_output_if_src+0x150>)
 8016598:	483c      	ldr	r0, [pc, #240]	@ (801668c <ip4_output_if_src+0x14c>)
 801659a:	f001 fec3 	bl	8018324 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	78fa      	ldrb	r2, [r7, #3]
 80165a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80165aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	69fb      	ldr	r3, [r7, #28]
 80165b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80165b4:	8b7b      	ldrh	r3, [r7, #26]
 80165b6:	089b      	lsrs	r3, r3, #2
 80165b8:	b29b      	uxth	r3, r3
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165c0:	b2da      	uxtb	r2, r3
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80165cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	891b      	ldrh	r3, [r3, #8]
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f6 f9b0 	bl	800c938 <lwip_htons>
 80165d8:	4603      	mov	r3, r0
 80165da:	461a      	mov	r2, r3
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	2200      	movs	r2, #0
 80165e4:	719a      	strb	r2, [r3, #6]
 80165e6:	2200      	movs	r2, #0
 80165e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80165ea:	4b2a      	ldr	r3, [pc, #168]	@ (8016694 <ip4_output_if_src+0x154>)
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7f6 f9a2 	bl	800c938 <lwip_htons>
 80165f4:	4603      	mov	r3, r0
 80165f6:	461a      	mov	r2, r3
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80165fc:	4b25      	ldr	r3, [pc, #148]	@ (8016694 <ip4_output_if_src+0x154>)
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	3301      	adds	r3, #1
 8016602:	b29a      	uxth	r2, r3
 8016604:	4b23      	ldr	r3, [pc, #140]	@ (8016694 <ip4_output_if_src+0x154>)
 8016606:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d104      	bne.n	8016618 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801660e:	4b22      	ldr	r3, [pc, #136]	@ (8016698 <ip4_output_if_src+0x158>)
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	60da      	str	r2, [r3, #12]
 8016616:	e003      	b.n	8016620 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	681a      	ldr	r2, [r3, #0]
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	2200      	movs	r2, #0
 8016624:	729a      	strb	r2, [r3, #10]
 8016626:	2200      	movs	r2, #0
 8016628:	72da      	strb	r2, [r3, #11]
 801662a:	e00f      	b.n	801664c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	895b      	ldrh	r3, [r3, #10]
 8016630:	2b13      	cmp	r3, #19
 8016632:	d802      	bhi.n	801663a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016634:	f06f 0301 	mvn.w	r3, #1
 8016638:	e020      	b.n	801667c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	691b      	ldr	r3, [r3, #16]
 8016644:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016646:	f107 0314 	add.w	r3, r7, #20
 801664a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801664e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016650:	2b00      	cmp	r3, #0
 8016652:	d00c      	beq.n	801666e <ip4_output_if_src+0x12e>
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	891a      	ldrh	r2, [r3, #8]
 8016658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801665a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801665c:	429a      	cmp	r2, r3
 801665e:	d906      	bls.n	801666e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016660:	687a      	ldr	r2, [r7, #4]
 8016662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	f000 fd53 	bl	8017110 <ip4_frag>
 801666a:	4603      	mov	r3, r0
 801666c:	e006      	b.n	801667c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016670:	695b      	ldr	r3, [r3, #20]
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	68f9      	ldr	r1, [r7, #12]
 8016676:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016678:	4798      	blx	r3
 801667a:	4603      	mov	r3, r0
}
 801667c:	4618      	mov	r0, r3
 801667e:	3720      	adds	r7, #32
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}
 8016684:	0801d8d4 	.word	0x0801d8d4
 8016688:	0801d908 	.word	0x0801d908
 801668c:	0801d914 	.word	0x0801d914
 8016690:	0801d93c 	.word	0x0801d93c
 8016694:	2000e216 	.word	0x2000e216
 8016698:	0801dd78 	.word	0x0801dd78

0801669c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801669c:	b480      	push	{r7}
 801669e:	b085      	sub	sp, #20
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166b0:	d002      	beq.n	80166b8 <ip4_addr_isbroadcast_u32+0x1c>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d101      	bne.n	80166bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80166b8:	2301      	movs	r3, #1
 80166ba:	e02a      	b.n	8016712 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80166c2:	f003 0302 	and.w	r3, r3, #2
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d101      	bne.n	80166ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e021      	b.n	8016712 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	3304      	adds	r3, #4
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	687a      	ldr	r2, [r7, #4]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d101      	bne.n	80166de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80166da:	2300      	movs	r3, #0
 80166dc:	e019      	b.n	8016712 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80166de:	68fa      	ldr	r2, [r7, #12]
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	3304      	adds	r3, #4
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	405a      	eors	r2, r3
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	3308      	adds	r3, #8
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	4013      	ands	r3, r2
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d10d      	bne.n	8016710 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	3308      	adds	r3, #8
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	43da      	mvns	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	3308      	adds	r3, #8
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016708:	429a      	cmp	r2, r3
 801670a:	d101      	bne.n	8016710 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801670c:	2301      	movs	r3, #1
 801670e:	e000      	b.n	8016712 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016710:	2300      	movs	r3, #0
  }
}
 8016712:	4618      	mov	r0, r3
 8016714:	3714      	adds	r7, #20
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr
	...

08016720 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016726:	2300      	movs	r3, #0
 8016728:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801672a:	4b12      	ldr	r3, [pc, #72]	@ (8016774 <ip_reass_tmr+0x54>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016730:	e018      	b.n	8016764 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	7fdb      	ldrb	r3, [r3, #31]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d00b      	beq.n	8016752 <ip_reass_tmr+0x32>
      r->timer--;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	7fdb      	ldrb	r3, [r3, #31]
 801673e:	3b01      	subs	r3, #1
 8016740:	b2da      	uxtb	r2, r3
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	60fb      	str	r3, [r7, #12]
 8016750:	e008      	b.n	8016764 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801675c:	68b9      	ldr	r1, [r7, #8]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f80a 	bl	8016778 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d1e3      	bne.n	8016732 <ip_reass_tmr+0x12>
    }
  }
}
 801676a:	bf00      	nop
 801676c:	bf00      	nop
 801676e:	3710      	adds	r7, #16
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	2000e218 	.word	0x2000e218

08016778 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b088      	sub	sp, #32
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016786:	683a      	ldr	r2, [r7, #0]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	429a      	cmp	r2, r3
 801678c:	d105      	bne.n	801679a <ip_reass_free_complete_datagram+0x22>
 801678e:	4b45      	ldr	r3, [pc, #276]	@ (80168a4 <ip_reass_free_complete_datagram+0x12c>)
 8016790:	22ab      	movs	r2, #171	@ 0xab
 8016792:	4945      	ldr	r1, [pc, #276]	@ (80168a8 <ip_reass_free_complete_datagram+0x130>)
 8016794:	4845      	ldr	r0, [pc, #276]	@ (80168ac <ip_reass_free_complete_datagram+0x134>)
 8016796:	f001 fdc5 	bl	8018324 <iprintf>
  if (prev != NULL) {
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00a      	beq.n	80167b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	687a      	ldr	r2, [r7, #4]
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d005      	beq.n	80167b6 <ip_reass_free_complete_datagram+0x3e>
 80167aa:	4b3e      	ldr	r3, [pc, #248]	@ (80168a4 <ip_reass_free_complete_datagram+0x12c>)
 80167ac:	22ad      	movs	r2, #173	@ 0xad
 80167ae:	4940      	ldr	r1, [pc, #256]	@ (80168b0 <ip_reass_free_complete_datagram+0x138>)
 80167b0:	483e      	ldr	r0, [pc, #248]	@ (80168ac <ip_reass_free_complete_datagram+0x134>)
 80167b2:	f001 fdb7 	bl	8018324 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	685b      	ldr	r3, [r3, #4]
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80167be:	697b      	ldr	r3, [r7, #20]
 80167c0:	889b      	ldrh	r3, [r3, #4]
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d12a      	bne.n	801681e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	681a      	ldr	r2, [r3, #0]
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80167d6:	69bb      	ldr	r3, [r7, #24]
 80167d8:	6858      	ldr	r0, [r3, #4]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	3308      	adds	r3, #8
 80167de:	2214      	movs	r2, #20
 80167e0:	4619      	mov	r1, r3
 80167e2:	f001 fffe 	bl	80187e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80167e6:	2101      	movs	r1, #1
 80167e8:	69b8      	ldr	r0, [r7, #24]
 80167ea:	f7ff fc47 	bl	801607c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80167ee:	69b8      	ldr	r0, [r7, #24]
 80167f0:	f7f7 fcdc 	bl	800e1ac <pbuf_clen>
 80167f4:	4603      	mov	r3, r0
 80167f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80167f8:	8bfa      	ldrh	r2, [r7, #30]
 80167fa:	8a7b      	ldrh	r3, [r7, #18]
 80167fc:	4413      	add	r3, r2
 80167fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016802:	db05      	blt.n	8016810 <ip_reass_free_complete_datagram+0x98>
 8016804:	4b27      	ldr	r3, [pc, #156]	@ (80168a4 <ip_reass_free_complete_datagram+0x12c>)
 8016806:	22bc      	movs	r2, #188	@ 0xbc
 8016808:	492a      	ldr	r1, [pc, #168]	@ (80168b4 <ip_reass_free_complete_datagram+0x13c>)
 801680a:	4828      	ldr	r0, [pc, #160]	@ (80168ac <ip_reass_free_complete_datagram+0x134>)
 801680c:	f001 fd8a 	bl	8018324 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016810:	8bfa      	ldrh	r2, [r7, #30]
 8016812:	8a7b      	ldrh	r3, [r7, #18]
 8016814:	4413      	add	r3, r2
 8016816:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016818:	69b8      	ldr	r0, [r7, #24]
 801681a:	f7f7 fc39 	bl	800e090 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016824:	e01f      	b.n	8016866 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f7f7 fcb8 	bl	800e1ac <pbuf_clen>
 801683c:	4603      	mov	r3, r0
 801683e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016840:	8bfa      	ldrh	r2, [r7, #30]
 8016842:	8a7b      	ldrh	r3, [r7, #18]
 8016844:	4413      	add	r3, r2
 8016846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801684a:	db05      	blt.n	8016858 <ip_reass_free_complete_datagram+0xe0>
 801684c:	4b15      	ldr	r3, [pc, #84]	@ (80168a4 <ip_reass_free_complete_datagram+0x12c>)
 801684e:	22cc      	movs	r2, #204	@ 0xcc
 8016850:	4918      	ldr	r1, [pc, #96]	@ (80168b4 <ip_reass_free_complete_datagram+0x13c>)
 8016852:	4816      	ldr	r0, [pc, #88]	@ (80168ac <ip_reass_free_complete_datagram+0x134>)
 8016854:	f001 fd66 	bl	8018324 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016858:	8bfa      	ldrh	r2, [r7, #30]
 801685a:	8a7b      	ldrh	r3, [r7, #18]
 801685c:	4413      	add	r3, r2
 801685e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016860:	68f8      	ldr	r0, [r7, #12]
 8016862:	f7f7 fc15 	bl	800e090 <pbuf_free>
  while (p != NULL) {
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d1dc      	bne.n	8016826 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801686c:	6839      	ldr	r1, [r7, #0]
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 f8c2 	bl	80169f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016874:	4b10      	ldr	r3, [pc, #64]	@ (80168b8 <ip_reass_free_complete_datagram+0x140>)
 8016876:	881b      	ldrh	r3, [r3, #0]
 8016878:	8bfa      	ldrh	r2, [r7, #30]
 801687a:	429a      	cmp	r2, r3
 801687c:	d905      	bls.n	801688a <ip_reass_free_complete_datagram+0x112>
 801687e:	4b09      	ldr	r3, [pc, #36]	@ (80168a4 <ip_reass_free_complete_datagram+0x12c>)
 8016880:	22d2      	movs	r2, #210	@ 0xd2
 8016882:	490e      	ldr	r1, [pc, #56]	@ (80168bc <ip_reass_free_complete_datagram+0x144>)
 8016884:	4809      	ldr	r0, [pc, #36]	@ (80168ac <ip_reass_free_complete_datagram+0x134>)
 8016886:	f001 fd4d 	bl	8018324 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801688a:	4b0b      	ldr	r3, [pc, #44]	@ (80168b8 <ip_reass_free_complete_datagram+0x140>)
 801688c:	881a      	ldrh	r2, [r3, #0]
 801688e:	8bfb      	ldrh	r3, [r7, #30]
 8016890:	1ad3      	subs	r3, r2, r3
 8016892:	b29a      	uxth	r2, r3
 8016894:	4b08      	ldr	r3, [pc, #32]	@ (80168b8 <ip_reass_free_complete_datagram+0x140>)
 8016896:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016898:	8bfb      	ldrh	r3, [r7, #30]
}
 801689a:	4618      	mov	r0, r3
 801689c:	3720      	adds	r7, #32
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	0801d96c 	.word	0x0801d96c
 80168a8:	0801d9a8 	.word	0x0801d9a8
 80168ac:	0801d9b4 	.word	0x0801d9b4
 80168b0:	0801d9dc 	.word	0x0801d9dc
 80168b4:	0801d9f0 	.word	0x0801d9f0
 80168b8:	2000e21c 	.word	0x2000e21c
 80168bc:	0801da10 	.word	0x0801da10

080168c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b08a      	sub	sp, #40	@ 0x28
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80168ca:	2300      	movs	r3, #0
 80168cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80168ce:	2300      	movs	r3, #0
 80168d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80168d2:	2300      	movs	r3, #0
 80168d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80168da:	2300      	movs	r3, #0
 80168dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80168de:	4b28      	ldr	r3, [pc, #160]	@ (8016980 <ip_reass_remove_oldest_datagram+0xc0>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80168e4:	e030      	b.n	8016948 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80168e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e8:	695a      	ldr	r2, [r3, #20]
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	68db      	ldr	r3, [r3, #12]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d10c      	bne.n	801690c <ip_reass_remove_oldest_datagram+0x4c>
 80168f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168f4:	699a      	ldr	r2, [r3, #24]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	691b      	ldr	r3, [r3, #16]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d106      	bne.n	801690c <ip_reass_remove_oldest_datagram+0x4c>
 80168fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016900:	899a      	ldrh	r2, [r3, #12]
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	889b      	ldrh	r3, [r3, #4]
 8016906:	b29b      	uxth	r3, r3
 8016908:	429a      	cmp	r2, r3
 801690a:	d014      	beq.n	8016936 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	3301      	adds	r3, #1
 8016910:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016912:	6a3b      	ldr	r3, [r7, #32]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d104      	bne.n	8016922 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801691a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801691c:	69fb      	ldr	r3, [r7, #28]
 801691e:	61bb      	str	r3, [r7, #24]
 8016920:	e009      	b.n	8016936 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016924:	7fda      	ldrb	r2, [r3, #31]
 8016926:	6a3b      	ldr	r3, [r7, #32]
 8016928:	7fdb      	ldrb	r3, [r3, #31]
 801692a:	429a      	cmp	r2, r3
 801692c:	d803      	bhi.n	8016936 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016930:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d001      	beq.n	8016942 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016940:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801694a:	2b00      	cmp	r3, #0
 801694c:	d1cb      	bne.n	80168e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d008      	beq.n	8016966 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016954:	69b9      	ldr	r1, [r7, #24]
 8016956:	6a38      	ldr	r0, [r7, #32]
 8016958:	f7ff ff0e 	bl	8016778 <ip_reass_free_complete_datagram>
 801695c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801695e:	697a      	ldr	r2, [r7, #20]
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	4413      	add	r3, r2
 8016964:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016966:	697a      	ldr	r2, [r7, #20]
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	429a      	cmp	r2, r3
 801696c:	da02      	bge.n	8016974 <ip_reass_remove_oldest_datagram+0xb4>
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	2b01      	cmp	r3, #1
 8016972:	dcac      	bgt.n	80168ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016974:	697b      	ldr	r3, [r7, #20]
}
 8016976:	4618      	mov	r0, r3
 8016978:	3728      	adds	r7, #40	@ 0x28
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
 801697e:	bf00      	nop
 8016980:	2000e218 	.word	0x2000e218

08016984 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801698e:	2004      	movs	r0, #4
 8016990:	f7f6 fc88 	bl	800d2a4 <memp_malloc>
 8016994:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d110      	bne.n	80169be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801699c:	6839      	ldr	r1, [r7, #0]
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f7ff ff8e 	bl	80168c0 <ip_reass_remove_oldest_datagram>
 80169a4:	4602      	mov	r2, r0
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	4293      	cmp	r3, r2
 80169aa:	dc03      	bgt.n	80169b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80169ac:	2004      	movs	r0, #4
 80169ae:	f7f6 fc79 	bl	800d2a4 <memp_malloc>
 80169b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d101      	bne.n	80169be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80169ba:	2300      	movs	r3, #0
 80169bc:	e016      	b.n	80169ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80169be:	2220      	movs	r2, #32
 80169c0:	2100      	movs	r1, #0
 80169c2:	68f8      	ldr	r0, [r7, #12]
 80169c4:	f001 fe54 	bl	8018670 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	220f      	movs	r2, #15
 80169cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80169ce:	4b09      	ldr	r3, [pc, #36]	@ (80169f4 <ip_reass_enqueue_new_datagram+0x70>)
 80169d0:	681a      	ldr	r2, [r3, #0]
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80169d6:	4a07      	ldr	r2, [pc, #28]	@ (80169f4 <ip_reass_enqueue_new_datagram+0x70>)
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	3308      	adds	r3, #8
 80169e0:	2214      	movs	r2, #20
 80169e2:	6879      	ldr	r1, [r7, #4]
 80169e4:	4618      	mov	r0, r3
 80169e6:	f001 fefc 	bl	80187e2 <memcpy>
  return ipr;
 80169ea:	68fb      	ldr	r3, [r7, #12]
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3710      	adds	r7, #16
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	2000e218 	.word	0x2000e218

080169f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016a02:	4b10      	ldr	r3, [pc, #64]	@ (8016a44 <ip_reass_dequeue_datagram+0x4c>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d104      	bne.n	8016a16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4a0c      	ldr	r2, [pc, #48]	@ (8016a44 <ip_reass_dequeue_datagram+0x4c>)
 8016a12:	6013      	str	r3, [r2, #0]
 8016a14:	e00d      	b.n	8016a32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d106      	bne.n	8016a2a <ip_reass_dequeue_datagram+0x32>
 8016a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8016a48 <ip_reass_dequeue_datagram+0x50>)
 8016a1e:	f240 1245 	movw	r2, #325	@ 0x145
 8016a22:	490a      	ldr	r1, [pc, #40]	@ (8016a4c <ip_reass_dequeue_datagram+0x54>)
 8016a24:	480a      	ldr	r0, [pc, #40]	@ (8016a50 <ip_reass_dequeue_datagram+0x58>)
 8016a26:	f001 fc7d 	bl	8018324 <iprintf>
    prev->next = ipr->next;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016a32:	6879      	ldr	r1, [r7, #4]
 8016a34:	2004      	movs	r0, #4
 8016a36:	f7f6 fc87 	bl	800d348 <memp_free>
}
 8016a3a:	bf00      	nop
 8016a3c:	3708      	adds	r7, #8
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	bf00      	nop
 8016a44:	2000e218 	.word	0x2000e218
 8016a48:	0801d96c 	.word	0x0801d96c
 8016a4c:	0801da34 	.word	0x0801da34
 8016a50:	0801d9b4 	.word	0x0801d9b4

08016a54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b08c      	sub	sp, #48	@ 0x30
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	60f8      	str	r0, [r7, #12]
 8016a5c:	60b9      	str	r1, [r7, #8]
 8016a5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016a60:	2300      	movs	r3, #0
 8016a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016a64:	2301      	movs	r3, #1
 8016a66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016a6e:	69fb      	ldr	r3, [r7, #28]
 8016a70:	885b      	ldrh	r3, [r3, #2]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7f5 ff5f 	bl	800c938 <lwip_htons>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	f003 030f 	and.w	r3, r3, #15
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	009b      	lsls	r3, r3, #2
 8016a8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016a8c:	7e7b      	ldrb	r3, [r7, #25]
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	8b7a      	ldrh	r2, [r7, #26]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d202      	bcs.n	8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a96:	f04f 33ff 	mov.w	r3, #4294967295
 8016a9a:	e135      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016a9c:	7e7b      	ldrb	r3, [r7, #25]
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	8b7a      	ldrh	r2, [r7, #26]
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	88db      	ldrh	r3, [r3, #6]
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7f5 ff43 	bl	800c938 <lwip_htons>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	00db      	lsls	r3, r3, #3
 8016abc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	701a      	strb	r2, [r3, #0]
 8016aca:	2200      	movs	r2, #0
 8016acc:	705a      	strb	r2, [r3, #1]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	709a      	strb	r2, [r3, #2]
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad8:	8afa      	ldrh	r2, [r7, #22]
 8016ada:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016adc:	8afa      	ldrh	r2, [r7, #22]
 8016ade:	8b7b      	ldrh	r3, [r7, #26]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ae6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aea:	88db      	ldrh	r3, [r3, #6]
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	8afa      	ldrh	r2, [r7, #22]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d902      	bls.n	8016afa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016af4:	f04f 33ff 	mov.w	r3, #4294967295
 8016af8:	e106      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b00:	e068      	b.n	8016bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b0a:	889b      	ldrh	r3, [r3, #4]
 8016b0c:	b29a      	uxth	r2, r3
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	889b      	ldrh	r3, [r3, #4]
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d235      	bcs.n	8016b84 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d020      	beq.n	8016b66 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b26:	889b      	ldrh	r3, [r3, #4]
 8016b28:	b29a      	uxth	r2, r3
 8016b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b2c:	88db      	ldrh	r3, [r3, #6]
 8016b2e:	b29b      	uxth	r3, r3
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d307      	bcc.n	8016b44 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b36:	88db      	ldrh	r3, [r3, #6]
 8016b38:	b29a      	uxth	r2, r3
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	889b      	ldrh	r3, [r3, #4]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d902      	bls.n	8016b4a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b44:	f04f 33ff 	mov.w	r3, #4294967295
 8016b48:	e0de      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b4c:	68ba      	ldr	r2, [r7, #8]
 8016b4e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b52:	88db      	ldrh	r3, [r3, #6]
 8016b54:	b29a      	uxth	r2, r3
 8016b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b58:	889b      	ldrh	r3, [r3, #4]
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d03d      	beq.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016b60:	2300      	movs	r3, #0
 8016b62:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016b64:	e03a      	b.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b68:	88db      	ldrh	r3, [r3, #6]
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	889b      	ldrh	r3, [r3, #4]
 8016b70:	b29b      	uxth	r3, r3
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d902      	bls.n	8016b7c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b76:	f04f 33ff 	mov.w	r3, #4294967295
 8016b7a:	e0c5      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	68ba      	ldr	r2, [r7, #8]
 8016b80:	605a      	str	r2, [r3, #4]
      break;
 8016b82:	e02b      	b.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b86:	889b      	ldrh	r3, [r3, #4]
 8016b88:	b29a      	uxth	r2, r3
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	889b      	ldrh	r3, [r3, #4]
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d102      	bne.n	8016b9a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b94:	f04f 33ff 	mov.w	r3, #4294967295
 8016b98:	e0b6      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b9c:	889b      	ldrh	r3, [r3, #4]
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	88db      	ldrh	r3, [r3, #6]
 8016ba4:	b29b      	uxth	r3, r3
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d202      	bcs.n	8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016baa:	f04f 33ff 	mov.w	r3, #4294967295
 8016bae:	e0ab      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d009      	beq.n	8016bca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bb8:	88db      	ldrh	r3, [r3, #6]
 8016bba:	b29a      	uxth	r2, r3
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	889b      	ldrh	r3, [r3, #4]
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d001      	beq.n	8016bca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d193      	bne.n	8016b02 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016bda:	e000      	b.n	8016bde <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016bdc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d12d      	bne.n	8016c40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d01c      	beq.n	8016c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bec:	88db      	ldrh	r3, [r3, #6]
 8016bee:	b29a      	uxth	r2, r3
 8016bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bf2:	889b      	ldrh	r3, [r3, #4]
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d906      	bls.n	8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016bfa:	4b45      	ldr	r3, [pc, #276]	@ (8016d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bfc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016c00:	4944      	ldr	r1, [pc, #272]	@ (8016d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016c02:	4845      	ldr	r0, [pc, #276]	@ (8016d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c04:	f001 fb8e 	bl	8018324 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c10:	88db      	ldrh	r3, [r3, #6]
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c16:	889b      	ldrh	r3, [r3, #4]
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d010      	beq.n	8016c40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	623b      	str	r3, [r7, #32]
 8016c22:	e00d      	b.n	8016c40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d006      	beq.n	8016c3a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016c2c:	4b38      	ldr	r3, [pc, #224]	@ (8016d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c2e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016c32:	493a      	ldr	r1, [pc, #232]	@ (8016d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016c34:	4838      	ldr	r0, [pc, #224]	@ (8016d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c36:	f001 fb75 	bl	8018324 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	68ba      	ldr	r2, [r7, #8]
 8016c3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d105      	bne.n	8016c52 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	7f9b      	ldrb	r3, [r3, #30]
 8016c4a:	f003 0301 	and.w	r3, r3, #1
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d059      	beq.n	8016d06 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016c52:	6a3b      	ldr	r3, [r7, #32]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d04f      	beq.n	8016cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d006      	beq.n	8016c6e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	889b      	ldrh	r3, [r3, #4]
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d002      	beq.n	8016c74 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	623b      	str	r3, [r7, #32]
 8016c72:	e041      	b.n	8016cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c76:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016c7e:	e012      	b.n	8016ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c88:	88db      	ldrh	r3, [r3, #6]
 8016c8a:	b29a      	uxth	r2, r3
 8016c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8e:	889b      	ldrh	r3, [r3, #4]
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d002      	beq.n	8016c9c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016c96:	2300      	movs	r3, #0
 8016c98:	623b      	str	r3, [r7, #32]
            break;
 8016c9a:	e007      	b.n	8016cac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d1e9      	bne.n	8016c80 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016cac:	6a3b      	ldr	r3, [r7, #32]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d022      	beq.n	8016cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	685b      	ldr	r3, [r3, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d106      	bne.n	8016cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016cba:	4b15      	ldr	r3, [pc, #84]	@ (8016d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016cbc:	f240 12df 	movw	r2, #479	@ 0x1df
 8016cc0:	4917      	ldr	r1, [pc, #92]	@ (8016d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016cc2:	4815      	ldr	r0, [pc, #84]	@ (8016d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016cc4:	f001 fb2e 	bl	8018324 <iprintf>
          LWIP_ASSERT("sanity check",
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	685b      	ldr	r3, [r3, #4]
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d106      	bne.n	8016ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8016d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016cd6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016cda:	4911      	ldr	r1, [pc, #68]	@ (8016d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016cdc:	480e      	ldr	r0, [pc, #56]	@ (8016d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016cde:	f001 fb21 	bl	8018324 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d006      	beq.n	8016cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016cea:	4b09      	ldr	r3, [pc, #36]	@ (8016d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016cec:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016cf0:	490c      	ldr	r1, [pc, #48]	@ (8016d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016cf2:	4809      	ldr	r0, [pc, #36]	@ (8016d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016cf4:	f001 fb16 	bl	8018324 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016cf8:	6a3b      	ldr	r3, [r7, #32]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	bf14      	ite	ne
 8016cfe:	2301      	movne	r3, #1
 8016d00:	2300      	moveq	r3, #0
 8016d02:	b2db      	uxtb	r3, r3
 8016d04:	e000      	b.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016d06:	2300      	movs	r3, #0
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3730      	adds	r7, #48	@ 0x30
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	0801d96c 	.word	0x0801d96c
 8016d14:	0801da50 	.word	0x0801da50
 8016d18:	0801d9b4 	.word	0x0801d9b4
 8016d1c:	0801da70 	.word	0x0801da70
 8016d20:	0801daa8 	.word	0x0801daa8
 8016d24:	0801dab8 	.word	0x0801dab8

08016d28 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b08e      	sub	sp, #56	@ 0x38
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	f003 030f 	and.w	r3, r3, #15
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	009b      	lsls	r3, r3, #2
 8016d42:	b2db      	uxtb	r3, r3
 8016d44:	2b14      	cmp	r3, #20
 8016d46:	f040 8171 	bne.w	801702c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d4c:	88db      	ldrh	r3, [r3, #6]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7f5 fdf1 	bl	800c938 <lwip_htons>
 8016d56:	4603      	mov	r3, r0
 8016d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	00db      	lsls	r3, r3, #3
 8016d60:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d64:	885b      	ldrh	r3, [r3, #2]
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7f5 fde5 	bl	800c938 <lwip_htons>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	f003 030f 	and.w	r3, r3, #15
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	f0c0 8150 	bcc.w	8017030 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016d90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016d94:	b29b      	uxth	r3, r3
 8016d96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016d98:	1ad3      	subs	r3, r2, r3
 8016d9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f7f7 fa05 	bl	800e1ac <pbuf_clen>
 8016da2:	4603      	mov	r3, r0
 8016da4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016da6:	4b8c      	ldr	r3, [pc, #560]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016da8:	881b      	ldrh	r3, [r3, #0]
 8016daa:	461a      	mov	r2, r3
 8016dac:	8c3b      	ldrh	r3, [r7, #32]
 8016dae:	4413      	add	r3, r2
 8016db0:	2b0a      	cmp	r3, #10
 8016db2:	dd10      	ble.n	8016dd6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016db4:	8c3b      	ldrh	r3, [r7, #32]
 8016db6:	4619      	mov	r1, r3
 8016db8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016dba:	f7ff fd81 	bl	80168c0 <ip_reass_remove_oldest_datagram>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f000 8137 	beq.w	8017034 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016dc6:	4b84      	ldr	r3, [pc, #528]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016dc8:	881b      	ldrh	r3, [r3, #0]
 8016dca:	461a      	mov	r2, r3
 8016dcc:	8c3b      	ldrh	r3, [r7, #32]
 8016dce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016dd0:	2b0a      	cmp	r3, #10
 8016dd2:	f300 812f 	bgt.w	8017034 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016dd6:	4b81      	ldr	r3, [pc, #516]	@ (8016fdc <ip4_reass+0x2b4>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8016ddc:	e015      	b.n	8016e0a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016de0:	695a      	ldr	r2, [r3, #20]
 8016de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d10c      	bne.n	8016e04 <ip4_reass+0xdc>
 8016dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dec:	699a      	ldr	r2, [r3, #24]
 8016dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016df0:	691b      	ldr	r3, [r3, #16]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d106      	bne.n	8016e04 <ip4_reass+0xdc>
 8016df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df8:	899a      	ldrh	r2, [r3, #12]
 8016dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dfc:	889b      	ldrh	r3, [r3, #4]
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d006      	beq.n	8016e12 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8016e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d1e6      	bne.n	8016dde <ip4_reass+0xb6>
 8016e10:	e000      	b.n	8016e14 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016e12:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d109      	bne.n	8016e2e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016e1a:	8c3b      	ldrh	r3, [r7, #32]
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016e20:	f7ff fdb0 	bl	8016984 <ip_reass_enqueue_new_datagram>
 8016e24:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d11c      	bne.n	8016e66 <ip4_reass+0x13e>
      goto nullreturn;
 8016e2c:	e105      	b.n	801703a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e30:	88db      	ldrh	r3, [r3, #6]
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f5 fd7f 	bl	800c938 <lwip_htons>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d110      	bne.n	8016e66 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e46:	89db      	ldrh	r3, [r3, #14]
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7f5 fd75 	bl	800c938 <lwip_htons>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d006      	beq.n	8016e66 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	2214      	movs	r2, #20
 8016e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016e60:	4618      	mov	r0, r3
 8016e62:	f001 fcbe 	bl	80187e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e68:	88db      	ldrh	r3, [r3, #6]
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	f003 0320 	and.w	r3, r3, #32
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	bf0c      	ite	eq
 8016e74:	2301      	moveq	r3, #1
 8016e76:	2300      	movne	r3, #0
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d00e      	beq.n	8016ea0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016e82:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016e84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016e86:	4413      	add	r3, r2
 8016e88:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016e8a:	8b7a      	ldrh	r2, [r7, #26]
 8016e8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016e8e:	429a      	cmp	r2, r3
 8016e90:	f0c0 80a0 	bcc.w	8016fd4 <ip4_reass+0x2ac>
 8016e94:	8b7b      	ldrh	r3, [r7, #26]
 8016e96:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	f200 809a 	bhi.w	8016fd4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016ea0:	69fa      	ldr	r2, [r7, #28]
 8016ea2:	6879      	ldr	r1, [r7, #4]
 8016ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ea6:	f7ff fdd5 	bl	8016a54 <ip_reass_chain_frag_into_datagram_and_validate>
 8016eaa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb2:	f000 809b 	beq.w	8016fec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016eb6:	4b48      	ldr	r3, [pc, #288]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016eb8:	881a      	ldrh	r2, [r3, #0]
 8016eba:	8c3b      	ldrh	r3, [r7, #32]
 8016ebc:	4413      	add	r3, r2
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	4b45      	ldr	r3, [pc, #276]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016ec2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016ec4:	69fb      	ldr	r3, [r7, #28]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d00d      	beq.n	8016ee6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016eca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016ecc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ece:	4413      	add	r3, r2
 8016ed0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ed4:	8a7a      	ldrh	r2, [r7, #18]
 8016ed6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eda:	7f9b      	ldrb	r3, [r3, #30]
 8016edc:	f043 0301 	orr.w	r3, r3, #1
 8016ee0:	b2da      	uxtb	r2, r3
 8016ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	d171      	bne.n	8016fd0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eee:	8b9b      	ldrh	r3, [r3, #28]
 8016ef0:	3314      	adds	r3, #20
 8016ef2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	685b      	ldr	r3, [r3, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f08:	3308      	adds	r3, #8
 8016f0a:	2214      	movs	r2, #20
 8016f0c:	4619      	mov	r1, r3
 8016f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f10:	f001 fc67 	bl	80187e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016f14:	8a3b      	ldrh	r3, [r7, #16]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7f5 fd0e 	bl	800c938 <lwip_htons>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	461a      	mov	r2, r3
 8016f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f22:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f26:	2200      	movs	r2, #0
 8016f28:	719a      	strb	r2, [r3, #6]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f30:	2200      	movs	r2, #0
 8016f32:	729a      	strb	r2, [r3, #10]
 8016f34:	2200      	movs	r2, #0
 8016f36:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016f3e:	e00d      	b.n	8016f5c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f42:	685b      	ldr	r3, [r3, #4]
 8016f44:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016f46:	2114      	movs	r1, #20
 8016f48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016f4a:	f7f7 f81b 	bl	800df84 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016f4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7f7 f96b 	bl	800e22c <pbuf_cat>
      r = iprh->next_pbuf;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d1ee      	bne.n	8016f40 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016f62:	4b1e      	ldr	r3, [pc, #120]	@ (8016fdc <ip4_reass+0x2b4>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d102      	bne.n	8016f72 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f70:	e010      	b.n	8016f94 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016f72:	4b1a      	ldr	r3, [pc, #104]	@ (8016fdc <ip4_reass+0x2b4>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f78:	e007      	b.n	8016f8a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d006      	beq.n	8016f92 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d1f4      	bne.n	8016f7a <ip4_reass+0x252>
 8016f90:	e000      	b.n	8016f94 <ip4_reass+0x26c>
          break;
 8016f92:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016f94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016f98:	f7ff fd2e 	bl	80169f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016f9c:	6878      	ldr	r0, [r7, #4]
 8016f9e:	f7f7 f905 	bl	800e1ac <pbuf_clen>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016fa8:	881b      	ldrh	r3, [r3, #0]
 8016faa:	8c3a      	ldrh	r2, [r7, #32]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d906      	bls.n	8016fbe <ip4_reass+0x296>
 8016fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8016fe0 <ip4_reass+0x2b8>)
 8016fb2:	f240 229b 	movw	r2, #667	@ 0x29b
 8016fb6:	490b      	ldr	r1, [pc, #44]	@ (8016fe4 <ip4_reass+0x2bc>)
 8016fb8:	480b      	ldr	r0, [pc, #44]	@ (8016fe8 <ip4_reass+0x2c0>)
 8016fba:	f001 f9b3 	bl	8018324 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016fbe:	4b06      	ldr	r3, [pc, #24]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016fc0:	881a      	ldrh	r2, [r3, #0]
 8016fc2:	8c3b      	ldrh	r3, [r7, #32]
 8016fc4:	1ad3      	subs	r3, r2, r3
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	4b03      	ldr	r3, [pc, #12]	@ (8016fd8 <ip4_reass+0x2b0>)
 8016fca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	e038      	b.n	8017042 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	e036      	b.n	8017042 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016fd4:	bf00      	nop
 8016fd6:	e00a      	b.n	8016fee <ip4_reass+0x2c6>
 8016fd8:	2000e21c 	.word	0x2000e21c
 8016fdc:	2000e218 	.word	0x2000e218
 8016fe0:	0801d96c 	.word	0x0801d96c
 8016fe4:	0801dadc 	.word	0x0801dadc
 8016fe8:	0801d9b4 	.word	0x0801d9b4
    goto nullreturn_ipr;
 8016fec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d106      	bne.n	8017002 <ip4_reass+0x2da>
 8016ff4:	4b15      	ldr	r3, [pc, #84]	@ (801704c <ip4_reass+0x324>)
 8016ff6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016ffa:	4915      	ldr	r1, [pc, #84]	@ (8017050 <ip4_reass+0x328>)
 8016ffc:	4815      	ldr	r0, [pc, #84]	@ (8017054 <ip4_reass+0x32c>)
 8016ffe:	f001 f991 	bl	8018324 <iprintf>
  if (ipr->p == NULL) {
 8017002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d116      	bne.n	8017038 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801700a:	4b13      	ldr	r3, [pc, #76]	@ (8017058 <ip4_reass+0x330>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017010:	429a      	cmp	r2, r3
 8017012:	d006      	beq.n	8017022 <ip4_reass+0x2fa>
 8017014:	4b0d      	ldr	r3, [pc, #52]	@ (801704c <ip4_reass+0x324>)
 8017016:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801701a:	4910      	ldr	r1, [pc, #64]	@ (801705c <ip4_reass+0x334>)
 801701c:	480d      	ldr	r0, [pc, #52]	@ (8017054 <ip4_reass+0x32c>)
 801701e:	f001 f981 	bl	8018324 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017022:	2100      	movs	r1, #0
 8017024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017026:	f7ff fce7 	bl	80169f8 <ip_reass_dequeue_datagram>
 801702a:	e006      	b.n	801703a <ip4_reass+0x312>
    goto nullreturn;
 801702c:	bf00      	nop
 801702e:	e004      	b.n	801703a <ip4_reass+0x312>
    goto nullreturn;
 8017030:	bf00      	nop
 8017032:	e002      	b.n	801703a <ip4_reass+0x312>
      goto nullreturn;
 8017034:	bf00      	nop
 8017036:	e000      	b.n	801703a <ip4_reass+0x312>
  }

nullreturn:
 8017038:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f7f7 f828 	bl	800e090 <pbuf_free>
  return NULL;
 8017040:	2300      	movs	r3, #0
}
 8017042:	4618      	mov	r0, r3
 8017044:	3738      	adds	r7, #56	@ 0x38
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	0801d96c 	.word	0x0801d96c
 8017050:	0801daf8 	.word	0x0801daf8
 8017054:	0801d9b4 	.word	0x0801d9b4
 8017058:	2000e218 	.word	0x2000e218
 801705c:	0801db04 	.word	0x0801db04

08017060 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017064:	2005      	movs	r0, #5
 8017066:	f7f6 f91d 	bl	800d2a4 <memp_malloc>
 801706a:	4603      	mov	r3, r0
}
 801706c:	4618      	mov	r0, r3
 801706e:	bd80      	pop	{r7, pc}

08017070 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d106      	bne.n	801708c <ip_frag_free_pbuf_custom_ref+0x1c>
 801707e:	4b07      	ldr	r3, [pc, #28]	@ (801709c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017080:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017084:	4906      	ldr	r1, [pc, #24]	@ (80170a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017086:	4807      	ldr	r0, [pc, #28]	@ (80170a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017088:	f001 f94c 	bl	8018324 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801708c:	6879      	ldr	r1, [r7, #4]
 801708e:	2005      	movs	r0, #5
 8017090:	f7f6 f95a 	bl	800d348 <memp_free>
}
 8017094:	bf00      	nop
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}
 801709c:	0801d96c 	.word	0x0801d96c
 80170a0:	0801db24 	.word	0x0801db24
 80170a4:	0801d9b4 	.word	0x0801d9b4

080170a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d106      	bne.n	80170c8 <ipfrag_free_pbuf_custom+0x20>
 80170ba:	4b11      	ldr	r3, [pc, #68]	@ (8017100 <ipfrag_free_pbuf_custom+0x58>)
 80170bc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80170c0:	4910      	ldr	r1, [pc, #64]	@ (8017104 <ipfrag_free_pbuf_custom+0x5c>)
 80170c2:	4811      	ldr	r0, [pc, #68]	@ (8017108 <ipfrag_free_pbuf_custom+0x60>)
 80170c4:	f001 f92e 	bl	8018324 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80170c8:	68fa      	ldr	r2, [r7, #12]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d006      	beq.n	80170de <ipfrag_free_pbuf_custom+0x36>
 80170d0:	4b0b      	ldr	r3, [pc, #44]	@ (8017100 <ipfrag_free_pbuf_custom+0x58>)
 80170d2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80170d6:	490d      	ldr	r1, [pc, #52]	@ (801710c <ipfrag_free_pbuf_custom+0x64>)
 80170d8:	480b      	ldr	r0, [pc, #44]	@ (8017108 <ipfrag_free_pbuf_custom+0x60>)
 80170da:	f001 f923 	bl	8018324 <iprintf>
  if (pcr->original != NULL) {
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	695b      	ldr	r3, [r3, #20]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d004      	beq.n	80170f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	695b      	ldr	r3, [r3, #20]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7f6 ffd0 	bl	800e090 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80170f0:	68f8      	ldr	r0, [r7, #12]
 80170f2:	f7ff ffbd 	bl	8017070 <ip_frag_free_pbuf_custom_ref>
}
 80170f6:	bf00      	nop
 80170f8:	3710      	adds	r7, #16
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	bf00      	nop
 8017100:	0801d96c 	.word	0x0801d96c
 8017104:	0801db30 	.word	0x0801db30
 8017108:	0801d9b4 	.word	0x0801d9b4
 801710c:	0801db3c 	.word	0x0801db3c

08017110 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b094      	sub	sp, #80	@ 0x50
 8017114:	af02      	add	r7, sp, #8
 8017116:	60f8      	str	r0, [r7, #12]
 8017118:	60b9      	str	r1, [r7, #8]
 801711a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801711c:	2300      	movs	r3, #0
 801711e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017126:	3b14      	subs	r3, #20
 8017128:	2b00      	cmp	r3, #0
 801712a:	da00      	bge.n	801712e <ip4_frag+0x1e>
 801712c:	3307      	adds	r3, #7
 801712e:	10db      	asrs	r3, r3, #3
 8017130:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017132:	2314      	movs	r3, #20
 8017134:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801713c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801713e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	f003 030f 	and.w	r3, r3, #15
 8017148:	b2db      	uxtb	r3, r3
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	b2db      	uxtb	r3, r3
 801714e:	2b14      	cmp	r3, #20
 8017150:	d002      	beq.n	8017158 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017152:	f06f 0305 	mvn.w	r3, #5
 8017156:	e110      	b.n	801737a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	895b      	ldrh	r3, [r3, #10]
 801715c:	2b13      	cmp	r3, #19
 801715e:	d809      	bhi.n	8017174 <ip4_frag+0x64>
 8017160:	4b88      	ldr	r3, [pc, #544]	@ (8017384 <ip4_frag+0x274>)
 8017162:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8017166:	4988      	ldr	r1, [pc, #544]	@ (8017388 <ip4_frag+0x278>)
 8017168:	4888      	ldr	r0, [pc, #544]	@ (801738c <ip4_frag+0x27c>)
 801716a:	f001 f8db 	bl	8018324 <iprintf>
 801716e:	f06f 0305 	mvn.w	r3, #5
 8017172:	e102      	b.n	801737a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017176:	88db      	ldrh	r3, [r3, #6]
 8017178:	b29b      	uxth	r3, r3
 801717a:	4618      	mov	r0, r3
 801717c:	f7f5 fbdc 	bl	800c938 <lwip_htons>
 8017180:	4603      	mov	r3, r0
 8017182:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017184:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017186:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801718a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801718e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017194:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	891b      	ldrh	r3, [r3, #8]
 801719a:	3b14      	subs	r3, #20
 801719c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80171a0:	e0e1      	b.n	8017366 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80171a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80171a4:	00db      	lsls	r3, r3, #3
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80171ac:	4293      	cmp	r3, r2
 80171ae:	bf28      	it	cs
 80171b0:	4613      	movcs	r3, r2
 80171b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80171b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80171b8:	2114      	movs	r1, #20
 80171ba:	200e      	movs	r0, #14
 80171bc:	f7f6 fc84 	bl	800dac8 <pbuf_alloc>
 80171c0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80171c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	f000 80d5 	beq.w	8017374 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80171ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171cc:	895b      	ldrh	r3, [r3, #10]
 80171ce:	2b13      	cmp	r3, #19
 80171d0:	d806      	bhi.n	80171e0 <ip4_frag+0xd0>
 80171d2:	4b6c      	ldr	r3, [pc, #432]	@ (8017384 <ip4_frag+0x274>)
 80171d4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80171d8:	496d      	ldr	r1, [pc, #436]	@ (8017390 <ip4_frag+0x280>)
 80171da:	486c      	ldr	r0, [pc, #432]	@ (801738c <ip4_frag+0x27c>)
 80171dc:	f001 f8a2 	bl	8018324 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80171e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e2:	685b      	ldr	r3, [r3, #4]
 80171e4:	2214      	movs	r2, #20
 80171e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80171e8:	4618      	mov	r0, r3
 80171ea:	f001 fafa 	bl	80187e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80171ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80171f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80171f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80171fa:	e064      	b.n	80172c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	895a      	ldrh	r2, [r3, #10]
 8017200:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017202:	1ad3      	subs	r3, r2, r3
 8017204:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	895b      	ldrh	r3, [r3, #10]
 801720a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801720c:	429a      	cmp	r2, r3
 801720e:	d906      	bls.n	801721e <ip4_frag+0x10e>
 8017210:	4b5c      	ldr	r3, [pc, #368]	@ (8017384 <ip4_frag+0x274>)
 8017212:	f240 322d 	movw	r2, #813	@ 0x32d
 8017216:	495f      	ldr	r1, [pc, #380]	@ (8017394 <ip4_frag+0x284>)
 8017218:	485c      	ldr	r0, [pc, #368]	@ (801738c <ip4_frag+0x27c>)
 801721a:	f001 f883 	bl	8018324 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801721e:	8bfa      	ldrh	r2, [r7, #30]
 8017220:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017224:	4293      	cmp	r3, r2
 8017226:	bf28      	it	cs
 8017228:	4613      	movcs	r3, r2
 801722a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801722e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017232:	2b00      	cmp	r3, #0
 8017234:	d105      	bne.n	8017242 <ip4_frag+0x132>
        poff = 0;
 8017236:	2300      	movs	r3, #0
 8017238:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	60fb      	str	r3, [r7, #12]
        continue;
 8017240:	e041      	b.n	80172c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017242:	f7ff ff0d 	bl	8017060 <ip_frag_alloc_pbuf_custom_ref>
 8017246:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017248:	69bb      	ldr	r3, [r7, #24]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d103      	bne.n	8017256 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801724e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017250:	f7f6 ff1e 	bl	800e090 <pbuf_free>
        goto memerr;
 8017254:	e08f      	b.n	8017376 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017256:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801725c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801725e:	4413      	add	r3, r2
 8017260:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017264:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017268:	9201      	str	r2, [sp, #4]
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	4603      	mov	r3, r0
 801726e:	2241      	movs	r2, #65	@ 0x41
 8017270:	2000      	movs	r0, #0
 8017272:	f7f6 fd53 	bl	800dd1c <pbuf_alloced_custom>
 8017276:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d106      	bne.n	801728c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801727e:	69b8      	ldr	r0, [r7, #24]
 8017280:	f7ff fef6 	bl	8017070 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017284:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017286:	f7f6 ff03 	bl	800e090 <pbuf_free>
        goto memerr;
 801728a:	e074      	b.n	8017376 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f7f6 ffa5 	bl	800e1dc <pbuf_ref>
      pcr->original = p;
 8017292:	69bb      	ldr	r3, [r7, #24]
 8017294:	68fa      	ldr	r2, [r7, #12]
 8017296:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017298:	69bb      	ldr	r3, [r7, #24]
 801729a:	4a3f      	ldr	r2, [pc, #252]	@ (8017398 <ip4_frag+0x288>)
 801729c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801729e:	6979      	ldr	r1, [r7, #20]
 80172a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80172a2:	f7f6 ffc3 	bl	800e22c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80172a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80172aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80172ae:	1ad3      	subs	r3, r2, r3
 80172b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80172b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d004      	beq.n	80172c6 <ip4_frag+0x1b6>
        poff = 0;
 80172bc:	2300      	movs	r3, #0
 80172be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80172c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d196      	bne.n	80171fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80172ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80172d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80172d4:	4413      	add	r3, r2
 80172d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80172dc:	f1a3 0213 	sub.w	r2, r3, #19
 80172e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80172e4:	429a      	cmp	r2, r3
 80172e6:	bfcc      	ite	gt
 80172e8:	2301      	movgt	r3, #1
 80172ea:	2300      	movle	r3, #0
 80172ec:	b2db      	uxtb	r3, r3
 80172ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80172f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80172f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80172f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80172fa:	6a3b      	ldr	r3, [r7, #32]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d002      	beq.n	8017306 <ip4_frag+0x1f6>
 8017300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017302:	2b00      	cmp	r3, #0
 8017304:	d003      	beq.n	801730e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017306:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801730c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801730e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017310:	4618      	mov	r0, r3
 8017312:	f7f5 fb11 	bl	800c938 <lwip_htons>
 8017316:	4603      	mov	r3, r0
 8017318:	461a      	mov	r2, r3
 801731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801731c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801731e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017320:	3314      	adds	r3, #20
 8017322:	b29b      	uxth	r3, r3
 8017324:	4618      	mov	r0, r3
 8017326:	f7f5 fb07 	bl	800c938 <lwip_htons>
 801732a:	4603      	mov	r3, r0
 801732c:	461a      	mov	r2, r3
 801732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017330:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017334:	2200      	movs	r2, #0
 8017336:	729a      	strb	r2, [r3, #10]
 8017338:	2200      	movs	r2, #0
 801733a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	695b      	ldr	r3, [r3, #20]
 8017340:	687a      	ldr	r2, [r7, #4]
 8017342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017344:	68b8      	ldr	r0, [r7, #8]
 8017346:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801734a:	f7f6 fea1 	bl	800e090 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801734e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017352:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017354:	1ad3      	subs	r3, r2, r3
 8017356:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801735a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801735e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017360:	4413      	add	r3, r2
 8017362:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8017366:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801736a:	2b00      	cmp	r3, #0
 801736c:	f47f af19 	bne.w	80171a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017370:	2300      	movs	r3, #0
 8017372:	e002      	b.n	801737a <ip4_frag+0x26a>
      goto memerr;
 8017374:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017376:	f04f 33ff 	mov.w	r3, #4294967295
}
 801737a:	4618      	mov	r0, r3
 801737c:	3748      	adds	r7, #72	@ 0x48
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	0801d96c 	.word	0x0801d96c
 8017388:	0801db48 	.word	0x0801db48
 801738c:	0801d9b4 	.word	0x0801d9b4
 8017390:	0801db64 	.word	0x0801db64
 8017394:	0801db84 	.word	0x0801db84
 8017398:	080170a9 	.word	0x080170a9

0801739c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b086      	sub	sp, #24
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80173a6:	230e      	movs	r3, #14
 80173a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	895b      	ldrh	r3, [r3, #10]
 80173ae:	2b0e      	cmp	r3, #14
 80173b0:	d96e      	bls.n	8017490 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	7bdb      	ldrb	r3, [r3, #15]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80173c0:	3301      	adds	r3, #1
 80173c2:	b2da      	uxtb	r2, r3
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	7b1a      	ldrb	r2, [r3, #12]
 80173d2:	7b5b      	ldrb	r3, [r3, #13]
 80173d4:	021b      	lsls	r3, r3, #8
 80173d6:	4313      	orrs	r3, r2
 80173d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	f003 0301 	and.w	r3, r3, #1
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d023      	beq.n	801742e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80173e6:	693b      	ldr	r3, [r7, #16]
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d10f      	bne.n	801740e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80173ee:	693b      	ldr	r3, [r7, #16]
 80173f0:	785b      	ldrb	r3, [r3, #1]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d11b      	bne.n	801742e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80173fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80173fc:	d117      	bne.n	801742e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	7b5b      	ldrb	r3, [r3, #13]
 8017402:	f043 0310 	orr.w	r3, r3, #16
 8017406:	b2da      	uxtb	r2, r3
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	735a      	strb	r2, [r3, #13]
 801740c:	e00f      	b.n	801742e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	2206      	movs	r2, #6
 8017412:	4928      	ldr	r1, [pc, #160]	@ (80174b4 <ethernet_input+0x118>)
 8017414:	4618      	mov	r0, r3
 8017416:	f001 f901 	bl	801861c <memcmp>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d106      	bne.n	801742e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	7b5b      	ldrb	r3, [r3, #13]
 8017424:	f043 0308 	orr.w	r3, r3, #8
 8017428:	b2da      	uxtb	r2, r3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801742e:	89fb      	ldrh	r3, [r7, #14]
 8017430:	2b08      	cmp	r3, #8
 8017432:	d003      	beq.n	801743c <ethernet_input+0xa0>
 8017434:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8017438:	d014      	beq.n	8017464 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801743a:	e032      	b.n	80174a2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017442:	f003 0308 	and.w	r3, r3, #8
 8017446:	2b00      	cmp	r3, #0
 8017448:	d024      	beq.n	8017494 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801744a:	8afb      	ldrh	r3, [r7, #22]
 801744c:	4619      	mov	r1, r3
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7f6 fd98 	bl	800df84 <pbuf_remove_header>
 8017454:	4603      	mov	r3, r0
 8017456:	2b00      	cmp	r3, #0
 8017458:	d11e      	bne.n	8017498 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801745a:	6839      	ldr	r1, [r7, #0]
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f7fe ff21 	bl	80162a4 <ip4_input>
      break;
 8017462:	e013      	b.n	801748c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801746a:	f003 0308 	and.w	r3, r3, #8
 801746e:	2b00      	cmp	r3, #0
 8017470:	d014      	beq.n	801749c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017472:	8afb      	ldrh	r3, [r7, #22]
 8017474:	4619      	mov	r1, r3
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f7f6 fd84 	bl	800df84 <pbuf_remove_header>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10e      	bne.n	80174a0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017482:	6839      	ldr	r1, [r7, #0]
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7fe f8c1 	bl	801560c <etharp_input>
      break;
 801748a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801748c:	2300      	movs	r3, #0
 801748e:	e00c      	b.n	80174aa <ethernet_input+0x10e>
    goto free_and_return;
 8017490:	bf00      	nop
 8017492:	e006      	b.n	80174a2 <ethernet_input+0x106>
        goto free_and_return;
 8017494:	bf00      	nop
 8017496:	e004      	b.n	80174a2 <ethernet_input+0x106>
        goto free_and_return;
 8017498:	bf00      	nop
 801749a:	e002      	b.n	80174a2 <ethernet_input+0x106>
        goto free_and_return;
 801749c:	bf00      	nop
 801749e:	e000      	b.n	80174a2 <ethernet_input+0x106>
        goto free_and_return;
 80174a0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7f6 fdf4 	bl	800e090 <pbuf_free>
  return ERR_OK;
 80174a8:	2300      	movs	r3, #0
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3718      	adds	r7, #24
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	0801dd7c 	.word	0x0801dd7c

080174b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b086      	sub	sp, #24
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
 80174c4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80174c6:	8c3b      	ldrh	r3, [r7, #32]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7f5 fa35 	bl	800c938 <lwip_htons>
 80174ce:	4603      	mov	r3, r0
 80174d0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80174d2:	210e      	movs	r1, #14
 80174d4:	68b8      	ldr	r0, [r7, #8]
 80174d6:	f7f6 fd45 	bl	800df64 <pbuf_add_header>
 80174da:	4603      	mov	r3, r0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d125      	bne.n	801752c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	8afa      	ldrh	r2, [r7, #22]
 80174ea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	2206      	movs	r2, #6
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	4618      	mov	r0, r3
 80174f4:	f001 f975 	bl	80187e2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	3306      	adds	r3, #6
 80174fc:	2206      	movs	r2, #6
 80174fe:	6879      	ldr	r1, [r7, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	f001 f96e 	bl	80187e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801750c:	2b06      	cmp	r3, #6
 801750e:	d006      	beq.n	801751e <ethernet_output+0x66>
 8017510:	4b0a      	ldr	r3, [pc, #40]	@ (801753c <ethernet_output+0x84>)
 8017512:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8017516:	490a      	ldr	r1, [pc, #40]	@ (8017540 <ethernet_output+0x88>)
 8017518:	480a      	ldr	r0, [pc, #40]	@ (8017544 <ethernet_output+0x8c>)
 801751a:	f000 ff03 	bl	8018324 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	699b      	ldr	r3, [r3, #24]
 8017522:	68b9      	ldr	r1, [r7, #8]
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	4798      	blx	r3
 8017528:	4603      	mov	r3, r0
 801752a:	e002      	b.n	8017532 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801752c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801752e:	f06f 0301 	mvn.w	r3, #1
}
 8017532:	4618      	mov	r0, r3
 8017534:	3718      	adds	r7, #24
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	0801db94 	.word	0x0801db94
 8017540:	0801dbcc 	.word	0x0801dbcc
 8017544:	0801dc00 	.word	0x0801dc00

08017548 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	2200      	movs	r2, #0
 8017556:	2104      	movs	r1, #4
 8017558:	4618      	mov	r0, r3
 801755a:	f7ef fa5b 	bl	8006a14 <osMessageQueueNew>
 801755e:	4602      	mov	r2, r0
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d102      	bne.n	8017572 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801756c:	f04f 33ff 	mov.w	r3, #4294967295
 8017570:	e000      	b.n	8017574 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017572:	2300      	movs	r3, #0
}
 8017574:	4618      	mov	r0, r3
 8017576:	3708      	adds	r7, #8
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	4618      	mov	r0, r3
 801758a:	f7ef fbaf 	bl	8006cec <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	4618      	mov	r0, r3
 8017594:	f7ef fbdc 	bl	8006d50 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017598:	bf00      	nop
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6818      	ldr	r0, [r3, #0]
 80175ae:	4639      	mov	r1, r7
 80175b0:	2300      	movs	r3, #0
 80175b2:	2200      	movs	r2, #0
 80175b4:	f7ef fab4 	bl	8006b20 <osMessageQueuePut>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d102      	bne.n	80175c4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80175be:	2300      	movs	r3, #0
 80175c0:	73fb      	strb	r3, [r7, #15]
 80175c2:	e001      	b.n	80175c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80175c4:	23ff      	movs	r3, #255	@ 0xff
 80175c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80175c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3710      	adds	r7, #16
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80175e0:	f7ee fe44 	bl	800626c <osKernelGetTickCount>
 80175e4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d013      	beq.n	8017614 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	6818      	ldr	r0, [r3, #0]
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2200      	movs	r2, #0
 80175f4:	68b9      	ldr	r1, [r7, #8]
 80175f6:	f7ef fb07 	bl	8006c08 <osMessageQueueGet>
 80175fa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d105      	bne.n	801760e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017602:	f7ee fe33 	bl	800626c <osKernelGetTickCount>
 8017606:	4602      	mov	r2, r0
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	e00f      	b.n	801762e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801760e:	f04f 33ff 	mov.w	r3, #4294967295
 8017612:	e00c      	b.n	801762e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	6818      	ldr	r0, [r3, #0]
 8017618:	f04f 33ff 	mov.w	r3, #4294967295
 801761c:	2200      	movs	r2, #0
 801761e:	68b9      	ldr	r1, [r7, #8]
 8017620:	f7ef faf2 	bl	8006c08 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017624:	f7ee fe22 	bl	800626c <osKernelGetTickCount>
 8017628:	4602      	mov	r2, r0
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801762e:	4618      	mov	r0, r3
 8017630:	3718      	adds	r7, #24
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}

08017636 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017636:	b580      	push	{r7, lr}
 8017638:	b082      	sub	sp, #8
 801763a:	af00      	add	r7, sp, #0
 801763c:	6078      	str	r0, [r7, #4]
 801763e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6818      	ldr	r0, [r3, #0]
 8017644:	2300      	movs	r3, #0
 8017646:	2200      	movs	r2, #0
 8017648:	6839      	ldr	r1, [r7, #0]
 801764a:	f7ef fadd 	bl	8006c08 <osMessageQueueGet>
 801764e:	4603      	mov	r3, r0
 8017650:	2b00      	cmp	r3, #0
 8017652:	d101      	bne.n	8017658 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017654:	2300      	movs	r3, #0
 8017656:	e001      	b.n	801765c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017658:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017664:	b480      	push	{r7}
 8017666:	b083      	sub	sp, #12
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d101      	bne.n	8017678 <sys_mbox_valid+0x14>
    return 0;
 8017674:	2300      	movs	r3, #0
 8017676:	e000      	b.n	801767a <sys_mbox_valid+0x16>
  else
    return 1;
 8017678:	2301      	movs	r3, #1
}
 801767a:	4618      	mov	r0, r3
 801767c:	370c      	adds	r7, #12
 801767e:	46bd      	mov	sp, r7
 8017680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017684:	4770      	bx	lr

08017686 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017686:	b480      	push	{r7}
 8017688:	b083      	sub	sp, #12
 801768a:	af00      	add	r7, sp, #0
 801768c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2200      	movs	r2, #0
 8017692:	601a      	str	r2, [r3, #0]
}
 8017694:	bf00      	nop
 8017696:	370c      	adds	r7, #12
 8017698:	46bd      	mov	sp, r7
 801769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769e:	4770      	bx	lr

080176a0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	460b      	mov	r3, r1
 80176aa:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80176ac:	78fb      	ldrb	r3, [r7, #3]
 80176ae:	2200      	movs	r2, #0
 80176b0:	4619      	mov	r1, r3
 80176b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80176b6:	f7ef f81d 	bl	80066f4 <osSemaphoreNew>
 80176ba:	4602      	mov	r2, r0
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d102      	bne.n	80176ce <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80176c8:	f04f 33ff 	mov.w	r3, #4294967295
 80176cc:	e009      	b.n	80176e2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80176ce:	78fb      	ldrb	r3, [r7, #3]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d105      	bne.n	80176e0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2100      	movs	r1, #0
 80176da:	4618      	mov	r0, r3
 80176dc:	f7ef f8a6 	bl	800682c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80176e0:	2300      	movs	r3, #0
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}

080176ea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80176ea:	b580      	push	{r7, lr}
 80176ec:	b084      	sub	sp, #16
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	6078      	str	r0, [r7, #4]
 80176f2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80176f4:	f7ee fdba 	bl	800626c <osKernelGetTickCount>
 80176f8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d011      	beq.n	8017724 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	6839      	ldr	r1, [r7, #0]
 8017706:	4618      	mov	r0, r3
 8017708:	f7ef f890 	bl	800682c <osSemaphoreAcquire>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d105      	bne.n	801771e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8017712:	f7ee fdab 	bl	800626c <osKernelGetTickCount>
 8017716:	4602      	mov	r2, r0
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	1ad3      	subs	r3, r2, r3
 801771c:	e012      	b.n	8017744 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801771e:	f04f 33ff 	mov.w	r3, #4294967295
 8017722:	e00f      	b.n	8017744 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8017724:	bf00      	nop
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	f04f 31ff 	mov.w	r1, #4294967295
 801772e:	4618      	mov	r0, r3
 8017730:	f7ef f87c 	bl	800682c <osSemaphoreAcquire>
 8017734:	4603      	mov	r3, r0
 8017736:	2b00      	cmp	r3, #0
 8017738:	d1f5      	bne.n	8017726 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801773a:	f7ee fd97 	bl	800626c <osKernelGetTickCount>
 801773e:	4602      	mov	r2, r0
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017744:	4618      	mov	r0, r3
 8017746:	3710      	adds	r7, #16
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4618      	mov	r0, r3
 801775a:	f7ef f8cd 	bl	80068f8 <osSemaphoreRelease>
}
 801775e:	bf00      	nop
 8017760:	3708      	adds	r7, #8
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}

08017766 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017766:	b580      	push	{r7, lr}
 8017768:	b082      	sub	sp, #8
 801776a:	af00      	add	r7, sp, #0
 801776c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	4618      	mov	r0, r3
 8017774:	f7ef f918 	bl	80069a8 <osSemaphoreDelete>
}
 8017778:	bf00      	nop
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}

08017780 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017780:	b480      	push	{r7}
 8017782:	b083      	sub	sp, #12
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d101      	bne.n	8017794 <sys_sem_valid+0x14>
    return 0;
 8017790:	2300      	movs	r3, #0
 8017792:	e000      	b.n	8017796 <sys_sem_valid+0x16>
  else
    return 1;
 8017794:	2301      	movs	r3, #1
}
 8017796:	4618      	mov	r0, r3
 8017798:	370c      	adds	r7, #12
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr

080177a2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80177a2:	b480      	push	{r7}
 80177a4:	b083      	sub	sp, #12
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2200      	movs	r2, #0
 80177ae:	601a      	str	r2, [r3, #0]
}
 80177b0:	bf00      	nop
 80177b2:	370c      	adds	r7, #12
 80177b4:	46bd      	mov	sp, r7
 80177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ba:	4770      	bx	lr

080177bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80177c0:	2000      	movs	r0, #0
 80177c2:	f7ee fe4f 	bl	8006464 <osMutexNew>
 80177c6:	4603      	mov	r3, r0
 80177c8:	4a01      	ldr	r2, [pc, #4]	@ (80177d0 <sys_init+0x14>)
 80177ca:	6013      	str	r3, [r2, #0]
#endif
}
 80177cc:	bf00      	nop
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	2000e224 	.word	0x2000e224

080177d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80177dc:	2000      	movs	r0, #0
 80177de:	f7ee fe41 	bl	8006464 <osMutexNew>
 80177e2:	4602      	mov	r2, r0
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d102      	bne.n	80177f6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80177f0:	f04f 33ff 	mov.w	r3, #4294967295
 80177f4:	e000      	b.n	80177f8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80177f6:	2300      	movs	r3, #0
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	3708      	adds	r7, #8
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}

08017800 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	f04f 31ff 	mov.w	r1, #4294967295
 8017810:	4618      	mov	r0, r3
 8017812:	f7ee fec1 	bl	8006598 <osMutexAcquire>
#endif
}
 8017816:	bf00      	nop
 8017818:	3708      	adds	r7, #8
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	4618      	mov	r0, r3
 801782c:	f7ee ff12 	bl	8006654 <osMutexRelease>
}
 8017830:	bf00      	nop
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b08e      	sub	sp, #56	@ 0x38
 801783c:	af00      	add	r7, sp, #0
 801783e:	60f8      	str	r0, [r7, #12]
 8017840:	60b9      	str	r1, [r7, #8]
 8017842:	607a      	str	r2, [r7, #4]
 8017844:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017846:	f107 0314 	add.w	r3, r7, #20
 801784a:	2224      	movs	r2, #36	@ 0x24
 801784c:	2100      	movs	r1, #0
 801784e:	4618      	mov	r0, r3
 8017850:	f000 ff0e 	bl	8018670 <memset>
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	617b      	str	r3, [r7, #20]
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801785c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017860:	f107 0314 	add.w	r3, r7, #20
 8017864:	461a      	mov	r2, r3
 8017866:	6879      	ldr	r1, [r7, #4]
 8017868:	68b8      	ldr	r0, [r7, #8]
 801786a:	f7ee fd27 	bl	80062bc <osThreadNew>
 801786e:	4603      	mov	r3, r0
#endif
}
 8017870:	4618      	mov	r0, r3
 8017872:	3738      	adds	r7, #56	@ 0x38
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}

08017878 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801787c:	4b04      	ldr	r3, [pc, #16]	@ (8017890 <sys_arch_protect+0x18>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	f04f 31ff 	mov.w	r1, #4294967295
 8017884:	4618      	mov	r0, r3
 8017886:	f7ee fe87 	bl	8006598 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801788a:	2301      	movs	r3, #1
}
 801788c:	4618      	mov	r0, r3
 801788e:	bd80      	pop	{r7, pc}
 8017890:	2000e224 	.word	0x2000e224

08017894 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b082      	sub	sp, #8
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801789c:	4b04      	ldr	r3, [pc, #16]	@ (80178b0 <sys_arch_unprotect+0x1c>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7ee fed7 	bl	8006654 <osMutexRelease>
}
 80178a6:	bf00      	nop
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	2000e224 	.word	0x2000e224

080178b4 <rand>:
 80178b4:	4b16      	ldr	r3, [pc, #88]	@ (8017910 <rand+0x5c>)
 80178b6:	b510      	push	{r4, lr}
 80178b8:	681c      	ldr	r4, [r3, #0]
 80178ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80178bc:	b9b3      	cbnz	r3, 80178ec <rand+0x38>
 80178be:	2018      	movs	r0, #24
 80178c0:	f001 fde6 	bl	8019490 <malloc>
 80178c4:	4602      	mov	r2, r0
 80178c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80178c8:	b920      	cbnz	r0, 80178d4 <rand+0x20>
 80178ca:	4b12      	ldr	r3, [pc, #72]	@ (8017914 <rand+0x60>)
 80178cc:	4812      	ldr	r0, [pc, #72]	@ (8017918 <rand+0x64>)
 80178ce:	2152      	movs	r1, #82	@ 0x52
 80178d0:	f000 ff96 	bl	8018800 <__assert_func>
 80178d4:	4911      	ldr	r1, [pc, #68]	@ (801791c <rand+0x68>)
 80178d6:	4b12      	ldr	r3, [pc, #72]	@ (8017920 <rand+0x6c>)
 80178d8:	e9c0 1300 	strd	r1, r3, [r0]
 80178dc:	4b11      	ldr	r3, [pc, #68]	@ (8017924 <rand+0x70>)
 80178de:	6083      	str	r3, [r0, #8]
 80178e0:	230b      	movs	r3, #11
 80178e2:	8183      	strh	r3, [r0, #12]
 80178e4:	2100      	movs	r1, #0
 80178e6:	2001      	movs	r0, #1
 80178e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80178ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80178ee:	480e      	ldr	r0, [pc, #56]	@ (8017928 <rand+0x74>)
 80178f0:	690b      	ldr	r3, [r1, #16]
 80178f2:	694c      	ldr	r4, [r1, #20]
 80178f4:	4a0d      	ldr	r2, [pc, #52]	@ (801792c <rand+0x78>)
 80178f6:	4358      	muls	r0, r3
 80178f8:	fb02 0004 	mla	r0, r2, r4, r0
 80178fc:	fba3 3202 	umull	r3, r2, r3, r2
 8017900:	3301      	adds	r3, #1
 8017902:	eb40 0002 	adc.w	r0, r0, r2
 8017906:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801790a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801790e:	bd10      	pop	{r4, pc}
 8017910:	20000028 	.word	0x20000028
 8017914:	0801dd8a 	.word	0x0801dd8a
 8017918:	0801dda1 	.word	0x0801dda1
 801791c:	abcd330e 	.word	0xabcd330e
 8017920:	e66d1234 	.word	0xe66d1234
 8017924:	0005deec 	.word	0x0005deec
 8017928:	5851f42d 	.word	0x5851f42d
 801792c:	4c957f2d 	.word	0x4c957f2d

08017930 <__cvt>:
 8017930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017932:	ed2d 8b02 	vpush	{d8}
 8017936:	eeb0 8b40 	vmov.f64	d8, d0
 801793a:	b085      	sub	sp, #20
 801793c:	4617      	mov	r7, r2
 801793e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017942:	ee18 2a90 	vmov	r2, s17
 8017946:	f025 0520 	bic.w	r5, r5, #32
 801794a:	2a00      	cmp	r2, #0
 801794c:	bfb6      	itet	lt
 801794e:	222d      	movlt	r2, #45	@ 0x2d
 8017950:	2200      	movge	r2, #0
 8017952:	eeb1 8b40 	vneglt.f64	d8, d0
 8017956:	2d46      	cmp	r5, #70	@ 0x46
 8017958:	460c      	mov	r4, r1
 801795a:	701a      	strb	r2, [r3, #0]
 801795c:	d004      	beq.n	8017968 <__cvt+0x38>
 801795e:	2d45      	cmp	r5, #69	@ 0x45
 8017960:	d100      	bne.n	8017964 <__cvt+0x34>
 8017962:	3401      	adds	r4, #1
 8017964:	2102      	movs	r1, #2
 8017966:	e000      	b.n	801796a <__cvt+0x3a>
 8017968:	2103      	movs	r1, #3
 801796a:	ab03      	add	r3, sp, #12
 801796c:	9301      	str	r3, [sp, #4]
 801796e:	ab02      	add	r3, sp, #8
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	4622      	mov	r2, r4
 8017974:	4633      	mov	r3, r6
 8017976:	eeb0 0b48 	vmov.f64	d0, d8
 801797a:	f000 ffe9 	bl	8018950 <_dtoa_r>
 801797e:	2d47      	cmp	r5, #71	@ 0x47
 8017980:	d114      	bne.n	80179ac <__cvt+0x7c>
 8017982:	07fb      	lsls	r3, r7, #31
 8017984:	d50a      	bpl.n	801799c <__cvt+0x6c>
 8017986:	1902      	adds	r2, r0, r4
 8017988:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017990:	bf08      	it	eq
 8017992:	9203      	streq	r2, [sp, #12]
 8017994:	2130      	movs	r1, #48	@ 0x30
 8017996:	9b03      	ldr	r3, [sp, #12]
 8017998:	4293      	cmp	r3, r2
 801799a:	d319      	bcc.n	80179d0 <__cvt+0xa0>
 801799c:	9b03      	ldr	r3, [sp, #12]
 801799e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179a0:	1a1b      	subs	r3, r3, r0
 80179a2:	6013      	str	r3, [r2, #0]
 80179a4:	b005      	add	sp, #20
 80179a6:	ecbd 8b02 	vpop	{d8}
 80179aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179ac:	2d46      	cmp	r5, #70	@ 0x46
 80179ae:	eb00 0204 	add.w	r2, r0, r4
 80179b2:	d1e9      	bne.n	8017988 <__cvt+0x58>
 80179b4:	7803      	ldrb	r3, [r0, #0]
 80179b6:	2b30      	cmp	r3, #48	@ 0x30
 80179b8:	d107      	bne.n	80179ca <__cvt+0x9a>
 80179ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80179be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c2:	bf1c      	itt	ne
 80179c4:	f1c4 0401 	rsbne	r4, r4, #1
 80179c8:	6034      	strne	r4, [r6, #0]
 80179ca:	6833      	ldr	r3, [r6, #0]
 80179cc:	441a      	add	r2, r3
 80179ce:	e7db      	b.n	8017988 <__cvt+0x58>
 80179d0:	1c5c      	adds	r4, r3, #1
 80179d2:	9403      	str	r4, [sp, #12]
 80179d4:	7019      	strb	r1, [r3, #0]
 80179d6:	e7de      	b.n	8017996 <__cvt+0x66>

080179d8 <__exponent>:
 80179d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179da:	2900      	cmp	r1, #0
 80179dc:	bfba      	itte	lt
 80179de:	4249      	neglt	r1, r1
 80179e0:	232d      	movlt	r3, #45	@ 0x2d
 80179e2:	232b      	movge	r3, #43	@ 0x2b
 80179e4:	2909      	cmp	r1, #9
 80179e6:	7002      	strb	r2, [r0, #0]
 80179e8:	7043      	strb	r3, [r0, #1]
 80179ea:	dd29      	ble.n	8017a40 <__exponent+0x68>
 80179ec:	f10d 0307 	add.w	r3, sp, #7
 80179f0:	461d      	mov	r5, r3
 80179f2:	270a      	movs	r7, #10
 80179f4:	461a      	mov	r2, r3
 80179f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80179fa:	fb07 1416 	mls	r4, r7, r6, r1
 80179fe:	3430      	adds	r4, #48	@ 0x30
 8017a00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017a04:	460c      	mov	r4, r1
 8017a06:	2c63      	cmp	r4, #99	@ 0x63
 8017a08:	f103 33ff 	add.w	r3, r3, #4294967295
 8017a0c:	4631      	mov	r1, r6
 8017a0e:	dcf1      	bgt.n	80179f4 <__exponent+0x1c>
 8017a10:	3130      	adds	r1, #48	@ 0x30
 8017a12:	1e94      	subs	r4, r2, #2
 8017a14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017a18:	1c41      	adds	r1, r0, #1
 8017a1a:	4623      	mov	r3, r4
 8017a1c:	42ab      	cmp	r3, r5
 8017a1e:	d30a      	bcc.n	8017a36 <__exponent+0x5e>
 8017a20:	f10d 0309 	add.w	r3, sp, #9
 8017a24:	1a9b      	subs	r3, r3, r2
 8017a26:	42ac      	cmp	r4, r5
 8017a28:	bf88      	it	hi
 8017a2a:	2300      	movhi	r3, #0
 8017a2c:	3302      	adds	r3, #2
 8017a2e:	4403      	add	r3, r0
 8017a30:	1a18      	subs	r0, r3, r0
 8017a32:	b003      	add	sp, #12
 8017a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017a3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017a3e:	e7ed      	b.n	8017a1c <__exponent+0x44>
 8017a40:	2330      	movs	r3, #48	@ 0x30
 8017a42:	3130      	adds	r1, #48	@ 0x30
 8017a44:	7083      	strb	r3, [r0, #2]
 8017a46:	70c1      	strb	r1, [r0, #3]
 8017a48:	1d03      	adds	r3, r0, #4
 8017a4a:	e7f1      	b.n	8017a30 <__exponent+0x58>
 8017a4c:	0000      	movs	r0, r0
	...

08017a50 <_printf_float>:
 8017a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a54:	b08d      	sub	sp, #52	@ 0x34
 8017a56:	460c      	mov	r4, r1
 8017a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017a5c:	4616      	mov	r6, r2
 8017a5e:	461f      	mov	r7, r3
 8017a60:	4605      	mov	r5, r0
 8017a62:	f000 fe45 	bl	80186f0 <_localeconv_r>
 8017a66:	f8d0 b000 	ldr.w	fp, [r0]
 8017a6a:	4658      	mov	r0, fp
 8017a6c:	f7e8 fc38 	bl	80002e0 <strlen>
 8017a70:	2300      	movs	r3, #0
 8017a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a74:	f8d8 3000 	ldr.w	r3, [r8]
 8017a78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017a7c:	6822      	ldr	r2, [r4, #0]
 8017a7e:	9005      	str	r0, [sp, #20]
 8017a80:	3307      	adds	r3, #7
 8017a82:	f023 0307 	bic.w	r3, r3, #7
 8017a86:	f103 0108 	add.w	r1, r3, #8
 8017a8a:	f8c8 1000 	str.w	r1, [r8]
 8017a8e:	ed93 0b00 	vldr	d0, [r3]
 8017a92:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8017cf0 <_printf_float+0x2a0>
 8017a96:	eeb0 7bc0 	vabs.f64	d7, d0
 8017a9a:	eeb4 7b46 	vcmp.f64	d7, d6
 8017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8017aa6:	dd24      	ble.n	8017af2 <_printf_float+0xa2>
 8017aa8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab0:	d502      	bpl.n	8017ab8 <_printf_float+0x68>
 8017ab2:	232d      	movs	r3, #45	@ 0x2d
 8017ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ab8:	498f      	ldr	r1, [pc, #572]	@ (8017cf8 <_printf_float+0x2a8>)
 8017aba:	4b90      	ldr	r3, [pc, #576]	@ (8017cfc <_printf_float+0x2ac>)
 8017abc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8017ac0:	bf94      	ite	ls
 8017ac2:	4688      	movls	r8, r1
 8017ac4:	4698      	movhi	r8, r3
 8017ac6:	f022 0204 	bic.w	r2, r2, #4
 8017aca:	2303      	movs	r3, #3
 8017acc:	6123      	str	r3, [r4, #16]
 8017ace:	6022      	str	r2, [r4, #0]
 8017ad0:	f04f 0a00 	mov.w	sl, #0
 8017ad4:	9700      	str	r7, [sp, #0]
 8017ad6:	4633      	mov	r3, r6
 8017ad8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017ada:	4621      	mov	r1, r4
 8017adc:	4628      	mov	r0, r5
 8017ade:	f000 f9d1 	bl	8017e84 <_printf_common>
 8017ae2:	3001      	adds	r0, #1
 8017ae4:	f040 8089 	bne.w	8017bfa <_printf_float+0x1aa>
 8017ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8017aec:	b00d      	add	sp, #52	@ 0x34
 8017aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af2:	eeb4 0b40 	vcmp.f64	d0, d0
 8017af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afa:	d709      	bvc.n	8017b10 <_printf_float+0xc0>
 8017afc:	ee10 3a90 	vmov	r3, s1
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	bfbc      	itt	lt
 8017b04:	232d      	movlt	r3, #45	@ 0x2d
 8017b06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017b0a:	497d      	ldr	r1, [pc, #500]	@ (8017d00 <_printf_float+0x2b0>)
 8017b0c:	4b7d      	ldr	r3, [pc, #500]	@ (8017d04 <_printf_float+0x2b4>)
 8017b0e:	e7d5      	b.n	8017abc <_printf_float+0x6c>
 8017b10:	6863      	ldr	r3, [r4, #4]
 8017b12:	1c59      	adds	r1, r3, #1
 8017b14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017b18:	d139      	bne.n	8017b8e <_printf_float+0x13e>
 8017b1a:	2306      	movs	r3, #6
 8017b1c:	6063      	str	r3, [r4, #4]
 8017b1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017b22:	2300      	movs	r3, #0
 8017b24:	6022      	str	r2, [r4, #0]
 8017b26:	9303      	str	r3, [sp, #12]
 8017b28:	ab0a      	add	r3, sp, #40	@ 0x28
 8017b2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017b2e:	ab09      	add	r3, sp, #36	@ 0x24
 8017b30:	9300      	str	r3, [sp, #0]
 8017b32:	6861      	ldr	r1, [r4, #4]
 8017b34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017b38:	4628      	mov	r0, r5
 8017b3a:	f7ff fef9 	bl	8017930 <__cvt>
 8017b3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017b42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017b44:	4680      	mov	r8, r0
 8017b46:	d129      	bne.n	8017b9c <_printf_float+0x14c>
 8017b48:	1cc8      	adds	r0, r1, #3
 8017b4a:	db02      	blt.n	8017b52 <_printf_float+0x102>
 8017b4c:	6863      	ldr	r3, [r4, #4]
 8017b4e:	4299      	cmp	r1, r3
 8017b50:	dd41      	ble.n	8017bd6 <_printf_float+0x186>
 8017b52:	f1a9 0902 	sub.w	r9, r9, #2
 8017b56:	fa5f f989 	uxtb.w	r9, r9
 8017b5a:	3901      	subs	r1, #1
 8017b5c:	464a      	mov	r2, r9
 8017b5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017b62:	9109      	str	r1, [sp, #36]	@ 0x24
 8017b64:	f7ff ff38 	bl	80179d8 <__exponent>
 8017b68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b6a:	1813      	adds	r3, r2, r0
 8017b6c:	2a01      	cmp	r2, #1
 8017b6e:	4682      	mov	sl, r0
 8017b70:	6123      	str	r3, [r4, #16]
 8017b72:	dc02      	bgt.n	8017b7a <_printf_float+0x12a>
 8017b74:	6822      	ldr	r2, [r4, #0]
 8017b76:	07d2      	lsls	r2, r2, #31
 8017b78:	d501      	bpl.n	8017b7e <_printf_float+0x12e>
 8017b7a:	3301      	adds	r3, #1
 8017b7c:	6123      	str	r3, [r4, #16]
 8017b7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d0a6      	beq.n	8017ad4 <_printf_float+0x84>
 8017b86:	232d      	movs	r3, #45	@ 0x2d
 8017b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b8c:	e7a2      	b.n	8017ad4 <_printf_float+0x84>
 8017b8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017b92:	d1c4      	bne.n	8017b1e <_printf_float+0xce>
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d1c2      	bne.n	8017b1e <_printf_float+0xce>
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e7bf      	b.n	8017b1c <_printf_float+0xcc>
 8017b9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017ba0:	d9db      	bls.n	8017b5a <_printf_float+0x10a>
 8017ba2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8017ba6:	d118      	bne.n	8017bda <_printf_float+0x18a>
 8017ba8:	2900      	cmp	r1, #0
 8017baa:	6863      	ldr	r3, [r4, #4]
 8017bac:	dd0b      	ble.n	8017bc6 <_printf_float+0x176>
 8017bae:	6121      	str	r1, [r4, #16]
 8017bb0:	b913      	cbnz	r3, 8017bb8 <_printf_float+0x168>
 8017bb2:	6822      	ldr	r2, [r4, #0]
 8017bb4:	07d0      	lsls	r0, r2, #31
 8017bb6:	d502      	bpl.n	8017bbe <_printf_float+0x16e>
 8017bb8:	3301      	adds	r3, #1
 8017bba:	440b      	add	r3, r1
 8017bbc:	6123      	str	r3, [r4, #16]
 8017bbe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017bc0:	f04f 0a00 	mov.w	sl, #0
 8017bc4:	e7db      	b.n	8017b7e <_printf_float+0x12e>
 8017bc6:	b913      	cbnz	r3, 8017bce <_printf_float+0x17e>
 8017bc8:	6822      	ldr	r2, [r4, #0]
 8017bca:	07d2      	lsls	r2, r2, #31
 8017bcc:	d501      	bpl.n	8017bd2 <_printf_float+0x182>
 8017bce:	3302      	adds	r3, #2
 8017bd0:	e7f4      	b.n	8017bbc <_printf_float+0x16c>
 8017bd2:	2301      	movs	r3, #1
 8017bd4:	e7f2      	b.n	8017bbc <_printf_float+0x16c>
 8017bd6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8017bda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bdc:	4299      	cmp	r1, r3
 8017bde:	db05      	blt.n	8017bec <_printf_float+0x19c>
 8017be0:	6823      	ldr	r3, [r4, #0]
 8017be2:	6121      	str	r1, [r4, #16]
 8017be4:	07d8      	lsls	r0, r3, #31
 8017be6:	d5ea      	bpl.n	8017bbe <_printf_float+0x16e>
 8017be8:	1c4b      	adds	r3, r1, #1
 8017bea:	e7e7      	b.n	8017bbc <_printf_float+0x16c>
 8017bec:	2900      	cmp	r1, #0
 8017bee:	bfd4      	ite	le
 8017bf0:	f1c1 0202 	rsble	r2, r1, #2
 8017bf4:	2201      	movgt	r2, #1
 8017bf6:	4413      	add	r3, r2
 8017bf8:	e7e0      	b.n	8017bbc <_printf_float+0x16c>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	055a      	lsls	r2, r3, #21
 8017bfe:	d407      	bmi.n	8017c10 <_printf_float+0x1c0>
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	4642      	mov	r2, r8
 8017c04:	4631      	mov	r1, r6
 8017c06:	4628      	mov	r0, r5
 8017c08:	47b8      	blx	r7
 8017c0a:	3001      	adds	r0, #1
 8017c0c:	d12a      	bne.n	8017c64 <_printf_float+0x214>
 8017c0e:	e76b      	b.n	8017ae8 <_printf_float+0x98>
 8017c10:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017c14:	f240 80e0 	bls.w	8017dd8 <_printf_float+0x388>
 8017c18:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017c1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c24:	d133      	bne.n	8017c8e <_printf_float+0x23e>
 8017c26:	4a38      	ldr	r2, [pc, #224]	@ (8017d08 <_printf_float+0x2b8>)
 8017c28:	2301      	movs	r3, #1
 8017c2a:	4631      	mov	r1, r6
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	47b8      	blx	r7
 8017c30:	3001      	adds	r0, #1
 8017c32:	f43f af59 	beq.w	8017ae8 <_printf_float+0x98>
 8017c36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017c3a:	4543      	cmp	r3, r8
 8017c3c:	db02      	blt.n	8017c44 <_printf_float+0x1f4>
 8017c3e:	6823      	ldr	r3, [r4, #0]
 8017c40:	07d8      	lsls	r0, r3, #31
 8017c42:	d50f      	bpl.n	8017c64 <_printf_float+0x214>
 8017c44:	9b05      	ldr	r3, [sp, #20]
 8017c46:	465a      	mov	r2, fp
 8017c48:	4631      	mov	r1, r6
 8017c4a:	4628      	mov	r0, r5
 8017c4c:	47b8      	blx	r7
 8017c4e:	3001      	adds	r0, #1
 8017c50:	f43f af4a 	beq.w	8017ae8 <_printf_float+0x98>
 8017c54:	f04f 0900 	mov.w	r9, #0
 8017c58:	f108 38ff 	add.w	r8, r8, #4294967295
 8017c5c:	f104 0a1a 	add.w	sl, r4, #26
 8017c60:	45c8      	cmp	r8, r9
 8017c62:	dc09      	bgt.n	8017c78 <_printf_float+0x228>
 8017c64:	6823      	ldr	r3, [r4, #0]
 8017c66:	079b      	lsls	r3, r3, #30
 8017c68:	f100 8107 	bmi.w	8017e7a <_printf_float+0x42a>
 8017c6c:	68e0      	ldr	r0, [r4, #12]
 8017c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c70:	4298      	cmp	r0, r3
 8017c72:	bfb8      	it	lt
 8017c74:	4618      	movlt	r0, r3
 8017c76:	e739      	b.n	8017aec <_printf_float+0x9c>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	4652      	mov	r2, sl
 8017c7c:	4631      	mov	r1, r6
 8017c7e:	4628      	mov	r0, r5
 8017c80:	47b8      	blx	r7
 8017c82:	3001      	adds	r0, #1
 8017c84:	f43f af30 	beq.w	8017ae8 <_printf_float+0x98>
 8017c88:	f109 0901 	add.w	r9, r9, #1
 8017c8c:	e7e8      	b.n	8017c60 <_printf_float+0x210>
 8017c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	dc3b      	bgt.n	8017d0c <_printf_float+0x2bc>
 8017c94:	4a1c      	ldr	r2, [pc, #112]	@ (8017d08 <_printf_float+0x2b8>)
 8017c96:	2301      	movs	r3, #1
 8017c98:	4631      	mov	r1, r6
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	47b8      	blx	r7
 8017c9e:	3001      	adds	r0, #1
 8017ca0:	f43f af22 	beq.w	8017ae8 <_printf_float+0x98>
 8017ca4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017ca8:	ea59 0303 	orrs.w	r3, r9, r3
 8017cac:	d102      	bne.n	8017cb4 <_printf_float+0x264>
 8017cae:	6823      	ldr	r3, [r4, #0]
 8017cb0:	07d9      	lsls	r1, r3, #31
 8017cb2:	d5d7      	bpl.n	8017c64 <_printf_float+0x214>
 8017cb4:	9b05      	ldr	r3, [sp, #20]
 8017cb6:	465a      	mov	r2, fp
 8017cb8:	4631      	mov	r1, r6
 8017cba:	4628      	mov	r0, r5
 8017cbc:	47b8      	blx	r7
 8017cbe:	3001      	adds	r0, #1
 8017cc0:	f43f af12 	beq.w	8017ae8 <_printf_float+0x98>
 8017cc4:	f04f 0a00 	mov.w	sl, #0
 8017cc8:	f104 0b1a 	add.w	fp, r4, #26
 8017ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cce:	425b      	negs	r3, r3
 8017cd0:	4553      	cmp	r3, sl
 8017cd2:	dc01      	bgt.n	8017cd8 <_printf_float+0x288>
 8017cd4:	464b      	mov	r3, r9
 8017cd6:	e794      	b.n	8017c02 <_printf_float+0x1b2>
 8017cd8:	2301      	movs	r3, #1
 8017cda:	465a      	mov	r2, fp
 8017cdc:	4631      	mov	r1, r6
 8017cde:	4628      	mov	r0, r5
 8017ce0:	47b8      	blx	r7
 8017ce2:	3001      	adds	r0, #1
 8017ce4:	f43f af00 	beq.w	8017ae8 <_printf_float+0x98>
 8017ce8:	f10a 0a01 	add.w	sl, sl, #1
 8017cec:	e7ee      	b.n	8017ccc <_printf_float+0x27c>
 8017cee:	bf00      	nop
 8017cf0:	ffffffff 	.word	0xffffffff
 8017cf4:	7fefffff 	.word	0x7fefffff
 8017cf8:	0801defa 	.word	0x0801defa
 8017cfc:	0801defe 	.word	0x0801defe
 8017d00:	0801df02 	.word	0x0801df02
 8017d04:	0801df06 	.word	0x0801df06
 8017d08:	0801df0a 	.word	0x0801df0a
 8017d0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017d0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017d12:	4553      	cmp	r3, sl
 8017d14:	bfa8      	it	ge
 8017d16:	4653      	movge	r3, sl
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	4699      	mov	r9, r3
 8017d1c:	dc37      	bgt.n	8017d8e <_printf_float+0x33e>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	9307      	str	r3, [sp, #28]
 8017d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d26:	f104 021a 	add.w	r2, r4, #26
 8017d2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017d2c:	9907      	ldr	r1, [sp, #28]
 8017d2e:	9306      	str	r3, [sp, #24]
 8017d30:	eba3 0309 	sub.w	r3, r3, r9
 8017d34:	428b      	cmp	r3, r1
 8017d36:	dc31      	bgt.n	8017d9c <_printf_float+0x34c>
 8017d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d3a:	459a      	cmp	sl, r3
 8017d3c:	dc3b      	bgt.n	8017db6 <_printf_float+0x366>
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	07da      	lsls	r2, r3, #31
 8017d42:	d438      	bmi.n	8017db6 <_printf_float+0x366>
 8017d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d46:	ebaa 0903 	sub.w	r9, sl, r3
 8017d4a:	9b06      	ldr	r3, [sp, #24]
 8017d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8017d50:	4599      	cmp	r9, r3
 8017d52:	bfa8      	it	ge
 8017d54:	4699      	movge	r9, r3
 8017d56:	f1b9 0f00 	cmp.w	r9, #0
 8017d5a:	dc34      	bgt.n	8017dc6 <_printf_float+0x376>
 8017d5c:	f04f 0800 	mov.w	r8, #0
 8017d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d64:	f104 0b1a 	add.w	fp, r4, #26
 8017d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d6a:	ebaa 0303 	sub.w	r3, sl, r3
 8017d6e:	eba3 0309 	sub.w	r3, r3, r9
 8017d72:	4543      	cmp	r3, r8
 8017d74:	f77f af76 	ble.w	8017c64 <_printf_float+0x214>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	465a      	mov	r2, fp
 8017d7c:	4631      	mov	r1, r6
 8017d7e:	4628      	mov	r0, r5
 8017d80:	47b8      	blx	r7
 8017d82:	3001      	adds	r0, #1
 8017d84:	f43f aeb0 	beq.w	8017ae8 <_printf_float+0x98>
 8017d88:	f108 0801 	add.w	r8, r8, #1
 8017d8c:	e7ec      	b.n	8017d68 <_printf_float+0x318>
 8017d8e:	4642      	mov	r2, r8
 8017d90:	4631      	mov	r1, r6
 8017d92:	4628      	mov	r0, r5
 8017d94:	47b8      	blx	r7
 8017d96:	3001      	adds	r0, #1
 8017d98:	d1c1      	bne.n	8017d1e <_printf_float+0x2ce>
 8017d9a:	e6a5      	b.n	8017ae8 <_printf_float+0x98>
 8017d9c:	2301      	movs	r3, #1
 8017d9e:	4631      	mov	r1, r6
 8017da0:	4628      	mov	r0, r5
 8017da2:	9206      	str	r2, [sp, #24]
 8017da4:	47b8      	blx	r7
 8017da6:	3001      	adds	r0, #1
 8017da8:	f43f ae9e 	beq.w	8017ae8 <_printf_float+0x98>
 8017dac:	9b07      	ldr	r3, [sp, #28]
 8017dae:	9a06      	ldr	r2, [sp, #24]
 8017db0:	3301      	adds	r3, #1
 8017db2:	9307      	str	r3, [sp, #28]
 8017db4:	e7b9      	b.n	8017d2a <_printf_float+0x2da>
 8017db6:	9b05      	ldr	r3, [sp, #20]
 8017db8:	465a      	mov	r2, fp
 8017dba:	4631      	mov	r1, r6
 8017dbc:	4628      	mov	r0, r5
 8017dbe:	47b8      	blx	r7
 8017dc0:	3001      	adds	r0, #1
 8017dc2:	d1bf      	bne.n	8017d44 <_printf_float+0x2f4>
 8017dc4:	e690      	b.n	8017ae8 <_printf_float+0x98>
 8017dc6:	9a06      	ldr	r2, [sp, #24]
 8017dc8:	464b      	mov	r3, r9
 8017dca:	4442      	add	r2, r8
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4628      	mov	r0, r5
 8017dd0:	47b8      	blx	r7
 8017dd2:	3001      	adds	r0, #1
 8017dd4:	d1c2      	bne.n	8017d5c <_printf_float+0x30c>
 8017dd6:	e687      	b.n	8017ae8 <_printf_float+0x98>
 8017dd8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8017ddc:	f1b9 0f01 	cmp.w	r9, #1
 8017de0:	dc01      	bgt.n	8017de6 <_printf_float+0x396>
 8017de2:	07db      	lsls	r3, r3, #31
 8017de4:	d536      	bpl.n	8017e54 <_printf_float+0x404>
 8017de6:	2301      	movs	r3, #1
 8017de8:	4642      	mov	r2, r8
 8017dea:	4631      	mov	r1, r6
 8017dec:	4628      	mov	r0, r5
 8017dee:	47b8      	blx	r7
 8017df0:	3001      	adds	r0, #1
 8017df2:	f43f ae79 	beq.w	8017ae8 <_printf_float+0x98>
 8017df6:	9b05      	ldr	r3, [sp, #20]
 8017df8:	465a      	mov	r2, fp
 8017dfa:	4631      	mov	r1, r6
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	47b8      	blx	r7
 8017e00:	3001      	adds	r0, #1
 8017e02:	f43f ae71 	beq.w	8017ae8 <_printf_float+0x98>
 8017e06:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e12:	f109 39ff 	add.w	r9, r9, #4294967295
 8017e16:	d018      	beq.n	8017e4a <_printf_float+0x3fa>
 8017e18:	464b      	mov	r3, r9
 8017e1a:	f108 0201 	add.w	r2, r8, #1
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4628      	mov	r0, r5
 8017e22:	47b8      	blx	r7
 8017e24:	3001      	adds	r0, #1
 8017e26:	d10c      	bne.n	8017e42 <_printf_float+0x3f2>
 8017e28:	e65e      	b.n	8017ae8 <_printf_float+0x98>
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	465a      	mov	r2, fp
 8017e2e:	4631      	mov	r1, r6
 8017e30:	4628      	mov	r0, r5
 8017e32:	47b8      	blx	r7
 8017e34:	3001      	adds	r0, #1
 8017e36:	f43f ae57 	beq.w	8017ae8 <_printf_float+0x98>
 8017e3a:	f108 0801 	add.w	r8, r8, #1
 8017e3e:	45c8      	cmp	r8, r9
 8017e40:	dbf3      	blt.n	8017e2a <_printf_float+0x3da>
 8017e42:	4653      	mov	r3, sl
 8017e44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017e48:	e6dc      	b.n	8017c04 <_printf_float+0x1b4>
 8017e4a:	f04f 0800 	mov.w	r8, #0
 8017e4e:	f104 0b1a 	add.w	fp, r4, #26
 8017e52:	e7f4      	b.n	8017e3e <_printf_float+0x3ee>
 8017e54:	2301      	movs	r3, #1
 8017e56:	4642      	mov	r2, r8
 8017e58:	e7e1      	b.n	8017e1e <_printf_float+0x3ce>
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	464a      	mov	r2, r9
 8017e5e:	4631      	mov	r1, r6
 8017e60:	4628      	mov	r0, r5
 8017e62:	47b8      	blx	r7
 8017e64:	3001      	adds	r0, #1
 8017e66:	f43f ae3f 	beq.w	8017ae8 <_printf_float+0x98>
 8017e6a:	f108 0801 	add.w	r8, r8, #1
 8017e6e:	68e3      	ldr	r3, [r4, #12]
 8017e70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e72:	1a5b      	subs	r3, r3, r1
 8017e74:	4543      	cmp	r3, r8
 8017e76:	dcf0      	bgt.n	8017e5a <_printf_float+0x40a>
 8017e78:	e6f8      	b.n	8017c6c <_printf_float+0x21c>
 8017e7a:	f04f 0800 	mov.w	r8, #0
 8017e7e:	f104 0919 	add.w	r9, r4, #25
 8017e82:	e7f4      	b.n	8017e6e <_printf_float+0x41e>

08017e84 <_printf_common>:
 8017e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e88:	4616      	mov	r6, r2
 8017e8a:	4698      	mov	r8, r3
 8017e8c:	688a      	ldr	r2, [r1, #8]
 8017e8e:	690b      	ldr	r3, [r1, #16]
 8017e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e94:	4293      	cmp	r3, r2
 8017e96:	bfb8      	it	lt
 8017e98:	4613      	movlt	r3, r2
 8017e9a:	6033      	str	r3, [r6, #0]
 8017e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017ea0:	4607      	mov	r7, r0
 8017ea2:	460c      	mov	r4, r1
 8017ea4:	b10a      	cbz	r2, 8017eaa <_printf_common+0x26>
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	6033      	str	r3, [r6, #0]
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	0699      	lsls	r1, r3, #26
 8017eae:	bf42      	ittt	mi
 8017eb0:	6833      	ldrmi	r3, [r6, #0]
 8017eb2:	3302      	addmi	r3, #2
 8017eb4:	6033      	strmi	r3, [r6, #0]
 8017eb6:	6825      	ldr	r5, [r4, #0]
 8017eb8:	f015 0506 	ands.w	r5, r5, #6
 8017ebc:	d106      	bne.n	8017ecc <_printf_common+0x48>
 8017ebe:	f104 0a19 	add.w	sl, r4, #25
 8017ec2:	68e3      	ldr	r3, [r4, #12]
 8017ec4:	6832      	ldr	r2, [r6, #0]
 8017ec6:	1a9b      	subs	r3, r3, r2
 8017ec8:	42ab      	cmp	r3, r5
 8017eca:	dc26      	bgt.n	8017f1a <_printf_common+0x96>
 8017ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ed0:	6822      	ldr	r2, [r4, #0]
 8017ed2:	3b00      	subs	r3, #0
 8017ed4:	bf18      	it	ne
 8017ed6:	2301      	movne	r3, #1
 8017ed8:	0692      	lsls	r2, r2, #26
 8017eda:	d42b      	bmi.n	8017f34 <_printf_common+0xb0>
 8017edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ee0:	4641      	mov	r1, r8
 8017ee2:	4638      	mov	r0, r7
 8017ee4:	47c8      	blx	r9
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	d01e      	beq.n	8017f28 <_printf_common+0xa4>
 8017eea:	6823      	ldr	r3, [r4, #0]
 8017eec:	6922      	ldr	r2, [r4, #16]
 8017eee:	f003 0306 	and.w	r3, r3, #6
 8017ef2:	2b04      	cmp	r3, #4
 8017ef4:	bf02      	ittt	eq
 8017ef6:	68e5      	ldreq	r5, [r4, #12]
 8017ef8:	6833      	ldreq	r3, [r6, #0]
 8017efa:	1aed      	subeq	r5, r5, r3
 8017efc:	68a3      	ldr	r3, [r4, #8]
 8017efe:	bf0c      	ite	eq
 8017f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f04:	2500      	movne	r5, #0
 8017f06:	4293      	cmp	r3, r2
 8017f08:	bfc4      	itt	gt
 8017f0a:	1a9b      	subgt	r3, r3, r2
 8017f0c:	18ed      	addgt	r5, r5, r3
 8017f0e:	2600      	movs	r6, #0
 8017f10:	341a      	adds	r4, #26
 8017f12:	42b5      	cmp	r5, r6
 8017f14:	d11a      	bne.n	8017f4c <_printf_common+0xc8>
 8017f16:	2000      	movs	r0, #0
 8017f18:	e008      	b.n	8017f2c <_printf_common+0xa8>
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	4652      	mov	r2, sl
 8017f1e:	4641      	mov	r1, r8
 8017f20:	4638      	mov	r0, r7
 8017f22:	47c8      	blx	r9
 8017f24:	3001      	adds	r0, #1
 8017f26:	d103      	bne.n	8017f30 <_printf_common+0xac>
 8017f28:	f04f 30ff 	mov.w	r0, #4294967295
 8017f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f30:	3501      	adds	r5, #1
 8017f32:	e7c6      	b.n	8017ec2 <_printf_common+0x3e>
 8017f34:	18e1      	adds	r1, r4, r3
 8017f36:	1c5a      	adds	r2, r3, #1
 8017f38:	2030      	movs	r0, #48	@ 0x30
 8017f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017f3e:	4422      	add	r2, r4
 8017f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017f48:	3302      	adds	r3, #2
 8017f4a:	e7c7      	b.n	8017edc <_printf_common+0x58>
 8017f4c:	2301      	movs	r3, #1
 8017f4e:	4622      	mov	r2, r4
 8017f50:	4641      	mov	r1, r8
 8017f52:	4638      	mov	r0, r7
 8017f54:	47c8      	blx	r9
 8017f56:	3001      	adds	r0, #1
 8017f58:	d0e6      	beq.n	8017f28 <_printf_common+0xa4>
 8017f5a:	3601      	adds	r6, #1
 8017f5c:	e7d9      	b.n	8017f12 <_printf_common+0x8e>
	...

08017f60 <_printf_i>:
 8017f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f64:	7e0f      	ldrb	r7, [r1, #24]
 8017f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017f68:	2f78      	cmp	r7, #120	@ 0x78
 8017f6a:	4691      	mov	r9, r2
 8017f6c:	4680      	mov	r8, r0
 8017f6e:	460c      	mov	r4, r1
 8017f70:	469a      	mov	sl, r3
 8017f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017f76:	d807      	bhi.n	8017f88 <_printf_i+0x28>
 8017f78:	2f62      	cmp	r7, #98	@ 0x62
 8017f7a:	d80a      	bhi.n	8017f92 <_printf_i+0x32>
 8017f7c:	2f00      	cmp	r7, #0
 8017f7e:	f000 80d2 	beq.w	8018126 <_printf_i+0x1c6>
 8017f82:	2f58      	cmp	r7, #88	@ 0x58
 8017f84:	f000 80b9 	beq.w	80180fa <_printf_i+0x19a>
 8017f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017f90:	e03a      	b.n	8018008 <_printf_i+0xa8>
 8017f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017f96:	2b15      	cmp	r3, #21
 8017f98:	d8f6      	bhi.n	8017f88 <_printf_i+0x28>
 8017f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8017fa0 <_printf_i+0x40>)
 8017f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017fa0:	08017ff9 	.word	0x08017ff9
 8017fa4:	0801800d 	.word	0x0801800d
 8017fa8:	08017f89 	.word	0x08017f89
 8017fac:	08017f89 	.word	0x08017f89
 8017fb0:	08017f89 	.word	0x08017f89
 8017fb4:	08017f89 	.word	0x08017f89
 8017fb8:	0801800d 	.word	0x0801800d
 8017fbc:	08017f89 	.word	0x08017f89
 8017fc0:	08017f89 	.word	0x08017f89
 8017fc4:	08017f89 	.word	0x08017f89
 8017fc8:	08017f89 	.word	0x08017f89
 8017fcc:	0801810d 	.word	0x0801810d
 8017fd0:	08018037 	.word	0x08018037
 8017fd4:	080180c7 	.word	0x080180c7
 8017fd8:	08017f89 	.word	0x08017f89
 8017fdc:	08017f89 	.word	0x08017f89
 8017fe0:	0801812f 	.word	0x0801812f
 8017fe4:	08017f89 	.word	0x08017f89
 8017fe8:	08018037 	.word	0x08018037
 8017fec:	08017f89 	.word	0x08017f89
 8017ff0:	08017f89 	.word	0x08017f89
 8017ff4:	080180cf 	.word	0x080180cf
 8017ff8:	6833      	ldr	r3, [r6, #0]
 8017ffa:	1d1a      	adds	r2, r3, #4
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	6032      	str	r2, [r6, #0]
 8018000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018008:	2301      	movs	r3, #1
 801800a:	e09d      	b.n	8018148 <_printf_i+0x1e8>
 801800c:	6833      	ldr	r3, [r6, #0]
 801800e:	6820      	ldr	r0, [r4, #0]
 8018010:	1d19      	adds	r1, r3, #4
 8018012:	6031      	str	r1, [r6, #0]
 8018014:	0606      	lsls	r6, r0, #24
 8018016:	d501      	bpl.n	801801c <_printf_i+0xbc>
 8018018:	681d      	ldr	r5, [r3, #0]
 801801a:	e003      	b.n	8018024 <_printf_i+0xc4>
 801801c:	0645      	lsls	r5, r0, #25
 801801e:	d5fb      	bpl.n	8018018 <_printf_i+0xb8>
 8018020:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018024:	2d00      	cmp	r5, #0
 8018026:	da03      	bge.n	8018030 <_printf_i+0xd0>
 8018028:	232d      	movs	r3, #45	@ 0x2d
 801802a:	426d      	negs	r5, r5
 801802c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018030:	4859      	ldr	r0, [pc, #356]	@ (8018198 <_printf_i+0x238>)
 8018032:	230a      	movs	r3, #10
 8018034:	e011      	b.n	801805a <_printf_i+0xfa>
 8018036:	6821      	ldr	r1, [r4, #0]
 8018038:	6833      	ldr	r3, [r6, #0]
 801803a:	0608      	lsls	r0, r1, #24
 801803c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018040:	d402      	bmi.n	8018048 <_printf_i+0xe8>
 8018042:	0649      	lsls	r1, r1, #25
 8018044:	bf48      	it	mi
 8018046:	b2ad      	uxthmi	r5, r5
 8018048:	2f6f      	cmp	r7, #111	@ 0x6f
 801804a:	4853      	ldr	r0, [pc, #332]	@ (8018198 <_printf_i+0x238>)
 801804c:	6033      	str	r3, [r6, #0]
 801804e:	bf14      	ite	ne
 8018050:	230a      	movne	r3, #10
 8018052:	2308      	moveq	r3, #8
 8018054:	2100      	movs	r1, #0
 8018056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801805a:	6866      	ldr	r6, [r4, #4]
 801805c:	60a6      	str	r6, [r4, #8]
 801805e:	2e00      	cmp	r6, #0
 8018060:	bfa2      	ittt	ge
 8018062:	6821      	ldrge	r1, [r4, #0]
 8018064:	f021 0104 	bicge.w	r1, r1, #4
 8018068:	6021      	strge	r1, [r4, #0]
 801806a:	b90d      	cbnz	r5, 8018070 <_printf_i+0x110>
 801806c:	2e00      	cmp	r6, #0
 801806e:	d04b      	beq.n	8018108 <_printf_i+0x1a8>
 8018070:	4616      	mov	r6, r2
 8018072:	fbb5 f1f3 	udiv	r1, r5, r3
 8018076:	fb03 5711 	mls	r7, r3, r1, r5
 801807a:	5dc7      	ldrb	r7, [r0, r7]
 801807c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018080:	462f      	mov	r7, r5
 8018082:	42bb      	cmp	r3, r7
 8018084:	460d      	mov	r5, r1
 8018086:	d9f4      	bls.n	8018072 <_printf_i+0x112>
 8018088:	2b08      	cmp	r3, #8
 801808a:	d10b      	bne.n	80180a4 <_printf_i+0x144>
 801808c:	6823      	ldr	r3, [r4, #0]
 801808e:	07df      	lsls	r7, r3, #31
 8018090:	d508      	bpl.n	80180a4 <_printf_i+0x144>
 8018092:	6923      	ldr	r3, [r4, #16]
 8018094:	6861      	ldr	r1, [r4, #4]
 8018096:	4299      	cmp	r1, r3
 8018098:	bfde      	ittt	le
 801809a:	2330      	movle	r3, #48	@ 0x30
 801809c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80180a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80180a4:	1b92      	subs	r2, r2, r6
 80180a6:	6122      	str	r2, [r4, #16]
 80180a8:	f8cd a000 	str.w	sl, [sp]
 80180ac:	464b      	mov	r3, r9
 80180ae:	aa03      	add	r2, sp, #12
 80180b0:	4621      	mov	r1, r4
 80180b2:	4640      	mov	r0, r8
 80180b4:	f7ff fee6 	bl	8017e84 <_printf_common>
 80180b8:	3001      	adds	r0, #1
 80180ba:	d14a      	bne.n	8018152 <_printf_i+0x1f2>
 80180bc:	f04f 30ff 	mov.w	r0, #4294967295
 80180c0:	b004      	add	sp, #16
 80180c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	f043 0320 	orr.w	r3, r3, #32
 80180cc:	6023      	str	r3, [r4, #0]
 80180ce:	4833      	ldr	r0, [pc, #204]	@ (801819c <_printf_i+0x23c>)
 80180d0:	2778      	movs	r7, #120	@ 0x78
 80180d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80180d6:	6823      	ldr	r3, [r4, #0]
 80180d8:	6831      	ldr	r1, [r6, #0]
 80180da:	061f      	lsls	r7, r3, #24
 80180dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80180e0:	d402      	bmi.n	80180e8 <_printf_i+0x188>
 80180e2:	065f      	lsls	r7, r3, #25
 80180e4:	bf48      	it	mi
 80180e6:	b2ad      	uxthmi	r5, r5
 80180e8:	6031      	str	r1, [r6, #0]
 80180ea:	07d9      	lsls	r1, r3, #31
 80180ec:	bf44      	itt	mi
 80180ee:	f043 0320 	orrmi.w	r3, r3, #32
 80180f2:	6023      	strmi	r3, [r4, #0]
 80180f4:	b11d      	cbz	r5, 80180fe <_printf_i+0x19e>
 80180f6:	2310      	movs	r3, #16
 80180f8:	e7ac      	b.n	8018054 <_printf_i+0xf4>
 80180fa:	4827      	ldr	r0, [pc, #156]	@ (8018198 <_printf_i+0x238>)
 80180fc:	e7e9      	b.n	80180d2 <_printf_i+0x172>
 80180fe:	6823      	ldr	r3, [r4, #0]
 8018100:	f023 0320 	bic.w	r3, r3, #32
 8018104:	6023      	str	r3, [r4, #0]
 8018106:	e7f6      	b.n	80180f6 <_printf_i+0x196>
 8018108:	4616      	mov	r6, r2
 801810a:	e7bd      	b.n	8018088 <_printf_i+0x128>
 801810c:	6833      	ldr	r3, [r6, #0]
 801810e:	6825      	ldr	r5, [r4, #0]
 8018110:	6961      	ldr	r1, [r4, #20]
 8018112:	1d18      	adds	r0, r3, #4
 8018114:	6030      	str	r0, [r6, #0]
 8018116:	062e      	lsls	r6, r5, #24
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	d501      	bpl.n	8018120 <_printf_i+0x1c0>
 801811c:	6019      	str	r1, [r3, #0]
 801811e:	e002      	b.n	8018126 <_printf_i+0x1c6>
 8018120:	0668      	lsls	r0, r5, #25
 8018122:	d5fb      	bpl.n	801811c <_printf_i+0x1bc>
 8018124:	8019      	strh	r1, [r3, #0]
 8018126:	2300      	movs	r3, #0
 8018128:	6123      	str	r3, [r4, #16]
 801812a:	4616      	mov	r6, r2
 801812c:	e7bc      	b.n	80180a8 <_printf_i+0x148>
 801812e:	6833      	ldr	r3, [r6, #0]
 8018130:	1d1a      	adds	r2, r3, #4
 8018132:	6032      	str	r2, [r6, #0]
 8018134:	681e      	ldr	r6, [r3, #0]
 8018136:	6862      	ldr	r2, [r4, #4]
 8018138:	2100      	movs	r1, #0
 801813a:	4630      	mov	r0, r6
 801813c:	f7e8 f880 	bl	8000240 <memchr>
 8018140:	b108      	cbz	r0, 8018146 <_printf_i+0x1e6>
 8018142:	1b80      	subs	r0, r0, r6
 8018144:	6060      	str	r0, [r4, #4]
 8018146:	6863      	ldr	r3, [r4, #4]
 8018148:	6123      	str	r3, [r4, #16]
 801814a:	2300      	movs	r3, #0
 801814c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018150:	e7aa      	b.n	80180a8 <_printf_i+0x148>
 8018152:	6923      	ldr	r3, [r4, #16]
 8018154:	4632      	mov	r2, r6
 8018156:	4649      	mov	r1, r9
 8018158:	4640      	mov	r0, r8
 801815a:	47d0      	blx	sl
 801815c:	3001      	adds	r0, #1
 801815e:	d0ad      	beq.n	80180bc <_printf_i+0x15c>
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	079b      	lsls	r3, r3, #30
 8018164:	d413      	bmi.n	801818e <_printf_i+0x22e>
 8018166:	68e0      	ldr	r0, [r4, #12]
 8018168:	9b03      	ldr	r3, [sp, #12]
 801816a:	4298      	cmp	r0, r3
 801816c:	bfb8      	it	lt
 801816e:	4618      	movlt	r0, r3
 8018170:	e7a6      	b.n	80180c0 <_printf_i+0x160>
 8018172:	2301      	movs	r3, #1
 8018174:	4632      	mov	r2, r6
 8018176:	4649      	mov	r1, r9
 8018178:	4640      	mov	r0, r8
 801817a:	47d0      	blx	sl
 801817c:	3001      	adds	r0, #1
 801817e:	d09d      	beq.n	80180bc <_printf_i+0x15c>
 8018180:	3501      	adds	r5, #1
 8018182:	68e3      	ldr	r3, [r4, #12]
 8018184:	9903      	ldr	r1, [sp, #12]
 8018186:	1a5b      	subs	r3, r3, r1
 8018188:	42ab      	cmp	r3, r5
 801818a:	dcf2      	bgt.n	8018172 <_printf_i+0x212>
 801818c:	e7eb      	b.n	8018166 <_printf_i+0x206>
 801818e:	2500      	movs	r5, #0
 8018190:	f104 0619 	add.w	r6, r4, #25
 8018194:	e7f5      	b.n	8018182 <_printf_i+0x222>
 8018196:	bf00      	nop
 8018198:	0801df0c 	.word	0x0801df0c
 801819c:	0801df1d 	.word	0x0801df1d

080181a0 <std>:
 80181a0:	2300      	movs	r3, #0
 80181a2:	b510      	push	{r4, lr}
 80181a4:	4604      	mov	r4, r0
 80181a6:	e9c0 3300 	strd	r3, r3, [r0]
 80181aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181ae:	6083      	str	r3, [r0, #8]
 80181b0:	8181      	strh	r1, [r0, #12]
 80181b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80181b4:	81c2      	strh	r2, [r0, #14]
 80181b6:	6183      	str	r3, [r0, #24]
 80181b8:	4619      	mov	r1, r3
 80181ba:	2208      	movs	r2, #8
 80181bc:	305c      	adds	r0, #92	@ 0x5c
 80181be:	f000 fa57 	bl	8018670 <memset>
 80181c2:	4b0d      	ldr	r3, [pc, #52]	@ (80181f8 <std+0x58>)
 80181c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80181c6:	4b0d      	ldr	r3, [pc, #52]	@ (80181fc <std+0x5c>)
 80181c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80181ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018200 <std+0x60>)
 80181cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80181ce:	4b0d      	ldr	r3, [pc, #52]	@ (8018204 <std+0x64>)
 80181d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80181d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018208 <std+0x68>)
 80181d4:	6224      	str	r4, [r4, #32]
 80181d6:	429c      	cmp	r4, r3
 80181d8:	d006      	beq.n	80181e8 <std+0x48>
 80181da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80181de:	4294      	cmp	r4, r2
 80181e0:	d002      	beq.n	80181e8 <std+0x48>
 80181e2:	33d0      	adds	r3, #208	@ 0xd0
 80181e4:	429c      	cmp	r4, r3
 80181e6:	d105      	bne.n	80181f4 <std+0x54>
 80181e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80181ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181f0:	f000 baec 	b.w	80187cc <__retarget_lock_init_recursive>
 80181f4:	bd10      	pop	{r4, pc}
 80181f6:	bf00      	nop
 80181f8:	0801846d 	.word	0x0801846d
 80181fc:	0801848f 	.word	0x0801848f
 8018200:	080184c7 	.word	0x080184c7
 8018204:	080184eb 	.word	0x080184eb
 8018208:	2000e228 	.word	0x2000e228

0801820c <stdio_exit_handler>:
 801820c:	4a02      	ldr	r2, [pc, #8]	@ (8018218 <stdio_exit_handler+0xc>)
 801820e:	4903      	ldr	r1, [pc, #12]	@ (801821c <stdio_exit_handler+0x10>)
 8018210:	4803      	ldr	r0, [pc, #12]	@ (8018220 <stdio_exit_handler+0x14>)
 8018212:	f000 b869 	b.w	80182e8 <_fwalk_sglue>
 8018216:	bf00      	nop
 8018218:	2000001c 	.word	0x2000001c
 801821c:	0801a33d 	.word	0x0801a33d
 8018220:	2000002c 	.word	0x2000002c

08018224 <cleanup_stdio>:
 8018224:	6841      	ldr	r1, [r0, #4]
 8018226:	4b0c      	ldr	r3, [pc, #48]	@ (8018258 <cleanup_stdio+0x34>)
 8018228:	4299      	cmp	r1, r3
 801822a:	b510      	push	{r4, lr}
 801822c:	4604      	mov	r4, r0
 801822e:	d001      	beq.n	8018234 <cleanup_stdio+0x10>
 8018230:	f002 f884 	bl	801a33c <_fflush_r>
 8018234:	68a1      	ldr	r1, [r4, #8]
 8018236:	4b09      	ldr	r3, [pc, #36]	@ (801825c <cleanup_stdio+0x38>)
 8018238:	4299      	cmp	r1, r3
 801823a:	d002      	beq.n	8018242 <cleanup_stdio+0x1e>
 801823c:	4620      	mov	r0, r4
 801823e:	f002 f87d 	bl	801a33c <_fflush_r>
 8018242:	68e1      	ldr	r1, [r4, #12]
 8018244:	4b06      	ldr	r3, [pc, #24]	@ (8018260 <cleanup_stdio+0x3c>)
 8018246:	4299      	cmp	r1, r3
 8018248:	d004      	beq.n	8018254 <cleanup_stdio+0x30>
 801824a:	4620      	mov	r0, r4
 801824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018250:	f002 b874 	b.w	801a33c <_fflush_r>
 8018254:	bd10      	pop	{r4, pc}
 8018256:	bf00      	nop
 8018258:	2000e228 	.word	0x2000e228
 801825c:	2000e290 	.word	0x2000e290
 8018260:	2000e2f8 	.word	0x2000e2f8

08018264 <global_stdio_init.part.0>:
 8018264:	b510      	push	{r4, lr}
 8018266:	4b0b      	ldr	r3, [pc, #44]	@ (8018294 <global_stdio_init.part.0+0x30>)
 8018268:	4c0b      	ldr	r4, [pc, #44]	@ (8018298 <global_stdio_init.part.0+0x34>)
 801826a:	4a0c      	ldr	r2, [pc, #48]	@ (801829c <global_stdio_init.part.0+0x38>)
 801826c:	601a      	str	r2, [r3, #0]
 801826e:	4620      	mov	r0, r4
 8018270:	2200      	movs	r2, #0
 8018272:	2104      	movs	r1, #4
 8018274:	f7ff ff94 	bl	80181a0 <std>
 8018278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801827c:	2201      	movs	r2, #1
 801827e:	2109      	movs	r1, #9
 8018280:	f7ff ff8e 	bl	80181a0 <std>
 8018284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018288:	2202      	movs	r2, #2
 801828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801828e:	2112      	movs	r1, #18
 8018290:	f7ff bf86 	b.w	80181a0 <std>
 8018294:	2000e360 	.word	0x2000e360
 8018298:	2000e228 	.word	0x2000e228
 801829c:	0801820d 	.word	0x0801820d

080182a0 <__sfp_lock_acquire>:
 80182a0:	4801      	ldr	r0, [pc, #4]	@ (80182a8 <__sfp_lock_acquire+0x8>)
 80182a2:	f000 ba94 	b.w	80187ce <__retarget_lock_acquire_recursive>
 80182a6:	bf00      	nop
 80182a8:	2000e365 	.word	0x2000e365

080182ac <__sfp_lock_release>:
 80182ac:	4801      	ldr	r0, [pc, #4]	@ (80182b4 <__sfp_lock_release+0x8>)
 80182ae:	f000 ba8f 	b.w	80187d0 <__retarget_lock_release_recursive>
 80182b2:	bf00      	nop
 80182b4:	2000e365 	.word	0x2000e365

080182b8 <__sinit>:
 80182b8:	b510      	push	{r4, lr}
 80182ba:	4604      	mov	r4, r0
 80182bc:	f7ff fff0 	bl	80182a0 <__sfp_lock_acquire>
 80182c0:	6a23      	ldr	r3, [r4, #32]
 80182c2:	b11b      	cbz	r3, 80182cc <__sinit+0x14>
 80182c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182c8:	f7ff bff0 	b.w	80182ac <__sfp_lock_release>
 80182cc:	4b04      	ldr	r3, [pc, #16]	@ (80182e0 <__sinit+0x28>)
 80182ce:	6223      	str	r3, [r4, #32]
 80182d0:	4b04      	ldr	r3, [pc, #16]	@ (80182e4 <__sinit+0x2c>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d1f5      	bne.n	80182c4 <__sinit+0xc>
 80182d8:	f7ff ffc4 	bl	8018264 <global_stdio_init.part.0>
 80182dc:	e7f2      	b.n	80182c4 <__sinit+0xc>
 80182de:	bf00      	nop
 80182e0:	08018225 	.word	0x08018225
 80182e4:	2000e360 	.word	0x2000e360

080182e8 <_fwalk_sglue>:
 80182e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182ec:	4607      	mov	r7, r0
 80182ee:	4688      	mov	r8, r1
 80182f0:	4614      	mov	r4, r2
 80182f2:	2600      	movs	r6, #0
 80182f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182f8:	f1b9 0901 	subs.w	r9, r9, #1
 80182fc:	d505      	bpl.n	801830a <_fwalk_sglue+0x22>
 80182fe:	6824      	ldr	r4, [r4, #0]
 8018300:	2c00      	cmp	r4, #0
 8018302:	d1f7      	bne.n	80182f4 <_fwalk_sglue+0xc>
 8018304:	4630      	mov	r0, r6
 8018306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801830a:	89ab      	ldrh	r3, [r5, #12]
 801830c:	2b01      	cmp	r3, #1
 801830e:	d907      	bls.n	8018320 <_fwalk_sglue+0x38>
 8018310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018314:	3301      	adds	r3, #1
 8018316:	d003      	beq.n	8018320 <_fwalk_sglue+0x38>
 8018318:	4629      	mov	r1, r5
 801831a:	4638      	mov	r0, r7
 801831c:	47c0      	blx	r8
 801831e:	4306      	orrs	r6, r0
 8018320:	3568      	adds	r5, #104	@ 0x68
 8018322:	e7e9      	b.n	80182f8 <_fwalk_sglue+0x10>

08018324 <iprintf>:
 8018324:	b40f      	push	{r0, r1, r2, r3}
 8018326:	b507      	push	{r0, r1, r2, lr}
 8018328:	4906      	ldr	r1, [pc, #24]	@ (8018344 <iprintf+0x20>)
 801832a:	ab04      	add	r3, sp, #16
 801832c:	6808      	ldr	r0, [r1, #0]
 801832e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018332:	6881      	ldr	r1, [r0, #8]
 8018334:	9301      	str	r3, [sp, #4]
 8018336:	f001 fe65 	bl	801a004 <_vfiprintf_r>
 801833a:	b003      	add	sp, #12
 801833c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018340:	b004      	add	sp, #16
 8018342:	4770      	bx	lr
 8018344:	20000028 	.word	0x20000028

08018348 <_puts_r>:
 8018348:	6a03      	ldr	r3, [r0, #32]
 801834a:	b570      	push	{r4, r5, r6, lr}
 801834c:	6884      	ldr	r4, [r0, #8]
 801834e:	4605      	mov	r5, r0
 8018350:	460e      	mov	r6, r1
 8018352:	b90b      	cbnz	r3, 8018358 <_puts_r+0x10>
 8018354:	f7ff ffb0 	bl	80182b8 <__sinit>
 8018358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801835a:	07db      	lsls	r3, r3, #31
 801835c:	d405      	bmi.n	801836a <_puts_r+0x22>
 801835e:	89a3      	ldrh	r3, [r4, #12]
 8018360:	0598      	lsls	r0, r3, #22
 8018362:	d402      	bmi.n	801836a <_puts_r+0x22>
 8018364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018366:	f000 fa32 	bl	80187ce <__retarget_lock_acquire_recursive>
 801836a:	89a3      	ldrh	r3, [r4, #12]
 801836c:	0719      	lsls	r1, r3, #28
 801836e:	d502      	bpl.n	8018376 <_puts_r+0x2e>
 8018370:	6923      	ldr	r3, [r4, #16]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d135      	bne.n	80183e2 <_puts_r+0x9a>
 8018376:	4621      	mov	r1, r4
 8018378:	4628      	mov	r0, r5
 801837a:	f000 f8f9 	bl	8018570 <__swsetup_r>
 801837e:	b380      	cbz	r0, 80183e2 <_puts_r+0x9a>
 8018380:	f04f 35ff 	mov.w	r5, #4294967295
 8018384:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018386:	07da      	lsls	r2, r3, #31
 8018388:	d405      	bmi.n	8018396 <_puts_r+0x4e>
 801838a:	89a3      	ldrh	r3, [r4, #12]
 801838c:	059b      	lsls	r3, r3, #22
 801838e:	d402      	bmi.n	8018396 <_puts_r+0x4e>
 8018390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018392:	f000 fa1d 	bl	80187d0 <__retarget_lock_release_recursive>
 8018396:	4628      	mov	r0, r5
 8018398:	bd70      	pop	{r4, r5, r6, pc}
 801839a:	2b00      	cmp	r3, #0
 801839c:	da04      	bge.n	80183a8 <_puts_r+0x60>
 801839e:	69a2      	ldr	r2, [r4, #24]
 80183a0:	429a      	cmp	r2, r3
 80183a2:	dc17      	bgt.n	80183d4 <_puts_r+0x8c>
 80183a4:	290a      	cmp	r1, #10
 80183a6:	d015      	beq.n	80183d4 <_puts_r+0x8c>
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	1c5a      	adds	r2, r3, #1
 80183ac:	6022      	str	r2, [r4, #0]
 80183ae:	7019      	strb	r1, [r3, #0]
 80183b0:	68a3      	ldr	r3, [r4, #8]
 80183b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80183b6:	3b01      	subs	r3, #1
 80183b8:	60a3      	str	r3, [r4, #8]
 80183ba:	2900      	cmp	r1, #0
 80183bc:	d1ed      	bne.n	801839a <_puts_r+0x52>
 80183be:	2b00      	cmp	r3, #0
 80183c0:	da11      	bge.n	80183e6 <_puts_r+0x9e>
 80183c2:	4622      	mov	r2, r4
 80183c4:	210a      	movs	r1, #10
 80183c6:	4628      	mov	r0, r5
 80183c8:	f000 f893 	bl	80184f2 <__swbuf_r>
 80183cc:	3001      	adds	r0, #1
 80183ce:	d0d7      	beq.n	8018380 <_puts_r+0x38>
 80183d0:	250a      	movs	r5, #10
 80183d2:	e7d7      	b.n	8018384 <_puts_r+0x3c>
 80183d4:	4622      	mov	r2, r4
 80183d6:	4628      	mov	r0, r5
 80183d8:	f000 f88b 	bl	80184f2 <__swbuf_r>
 80183dc:	3001      	adds	r0, #1
 80183de:	d1e7      	bne.n	80183b0 <_puts_r+0x68>
 80183e0:	e7ce      	b.n	8018380 <_puts_r+0x38>
 80183e2:	3e01      	subs	r6, #1
 80183e4:	e7e4      	b.n	80183b0 <_puts_r+0x68>
 80183e6:	6823      	ldr	r3, [r4, #0]
 80183e8:	1c5a      	adds	r2, r3, #1
 80183ea:	6022      	str	r2, [r4, #0]
 80183ec:	220a      	movs	r2, #10
 80183ee:	701a      	strb	r2, [r3, #0]
 80183f0:	e7ee      	b.n	80183d0 <_puts_r+0x88>
	...

080183f4 <puts>:
 80183f4:	4b02      	ldr	r3, [pc, #8]	@ (8018400 <puts+0xc>)
 80183f6:	4601      	mov	r1, r0
 80183f8:	6818      	ldr	r0, [r3, #0]
 80183fa:	f7ff bfa5 	b.w	8018348 <_puts_r>
 80183fe:	bf00      	nop
 8018400:	20000028 	.word	0x20000028

08018404 <sniprintf>:
 8018404:	b40c      	push	{r2, r3}
 8018406:	b530      	push	{r4, r5, lr}
 8018408:	4b17      	ldr	r3, [pc, #92]	@ (8018468 <sniprintf+0x64>)
 801840a:	1e0c      	subs	r4, r1, #0
 801840c:	681d      	ldr	r5, [r3, #0]
 801840e:	b09d      	sub	sp, #116	@ 0x74
 8018410:	da08      	bge.n	8018424 <sniprintf+0x20>
 8018412:	238b      	movs	r3, #139	@ 0x8b
 8018414:	602b      	str	r3, [r5, #0]
 8018416:	f04f 30ff 	mov.w	r0, #4294967295
 801841a:	b01d      	add	sp, #116	@ 0x74
 801841c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018420:	b002      	add	sp, #8
 8018422:	4770      	bx	lr
 8018424:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018428:	f8ad 3014 	strh.w	r3, [sp, #20]
 801842c:	bf14      	ite	ne
 801842e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018432:	4623      	moveq	r3, r4
 8018434:	9304      	str	r3, [sp, #16]
 8018436:	9307      	str	r3, [sp, #28]
 8018438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801843c:	9002      	str	r0, [sp, #8]
 801843e:	9006      	str	r0, [sp, #24]
 8018440:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018444:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018446:	ab21      	add	r3, sp, #132	@ 0x84
 8018448:	a902      	add	r1, sp, #8
 801844a:	4628      	mov	r0, r5
 801844c:	9301      	str	r3, [sp, #4]
 801844e:	f001 fcb3 	bl	8019db8 <_svfiprintf_r>
 8018452:	1c43      	adds	r3, r0, #1
 8018454:	bfbc      	itt	lt
 8018456:	238b      	movlt	r3, #139	@ 0x8b
 8018458:	602b      	strlt	r3, [r5, #0]
 801845a:	2c00      	cmp	r4, #0
 801845c:	d0dd      	beq.n	801841a <sniprintf+0x16>
 801845e:	9b02      	ldr	r3, [sp, #8]
 8018460:	2200      	movs	r2, #0
 8018462:	701a      	strb	r2, [r3, #0]
 8018464:	e7d9      	b.n	801841a <sniprintf+0x16>
 8018466:	bf00      	nop
 8018468:	20000028 	.word	0x20000028

0801846c <__sread>:
 801846c:	b510      	push	{r4, lr}
 801846e:	460c      	mov	r4, r1
 8018470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018474:	f000 f962 	bl	801873c <_read_r>
 8018478:	2800      	cmp	r0, #0
 801847a:	bfab      	itete	ge
 801847c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801847e:	89a3      	ldrhlt	r3, [r4, #12]
 8018480:	181b      	addge	r3, r3, r0
 8018482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018486:	bfac      	ite	ge
 8018488:	6563      	strge	r3, [r4, #84]	@ 0x54
 801848a:	81a3      	strhlt	r3, [r4, #12]
 801848c:	bd10      	pop	{r4, pc}

0801848e <__swrite>:
 801848e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018492:	461f      	mov	r7, r3
 8018494:	898b      	ldrh	r3, [r1, #12]
 8018496:	05db      	lsls	r3, r3, #23
 8018498:	4605      	mov	r5, r0
 801849a:	460c      	mov	r4, r1
 801849c:	4616      	mov	r6, r2
 801849e:	d505      	bpl.n	80184ac <__swrite+0x1e>
 80184a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184a4:	2302      	movs	r3, #2
 80184a6:	2200      	movs	r2, #0
 80184a8:	f000 f936 	bl	8018718 <_lseek_r>
 80184ac:	89a3      	ldrh	r3, [r4, #12]
 80184ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80184b6:	81a3      	strh	r3, [r4, #12]
 80184b8:	4632      	mov	r2, r6
 80184ba:	463b      	mov	r3, r7
 80184bc:	4628      	mov	r0, r5
 80184be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184c2:	f000 b94d 	b.w	8018760 <_write_r>

080184c6 <__sseek>:
 80184c6:	b510      	push	{r4, lr}
 80184c8:	460c      	mov	r4, r1
 80184ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184ce:	f000 f923 	bl	8018718 <_lseek_r>
 80184d2:	1c43      	adds	r3, r0, #1
 80184d4:	89a3      	ldrh	r3, [r4, #12]
 80184d6:	bf15      	itete	ne
 80184d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80184da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80184de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80184e2:	81a3      	strheq	r3, [r4, #12]
 80184e4:	bf18      	it	ne
 80184e6:	81a3      	strhne	r3, [r4, #12]
 80184e8:	bd10      	pop	{r4, pc}

080184ea <__sclose>:
 80184ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184ee:	f000 b903 	b.w	80186f8 <_close_r>

080184f2 <__swbuf_r>:
 80184f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184f4:	460e      	mov	r6, r1
 80184f6:	4614      	mov	r4, r2
 80184f8:	4605      	mov	r5, r0
 80184fa:	b118      	cbz	r0, 8018504 <__swbuf_r+0x12>
 80184fc:	6a03      	ldr	r3, [r0, #32]
 80184fe:	b90b      	cbnz	r3, 8018504 <__swbuf_r+0x12>
 8018500:	f7ff feda 	bl	80182b8 <__sinit>
 8018504:	69a3      	ldr	r3, [r4, #24]
 8018506:	60a3      	str	r3, [r4, #8]
 8018508:	89a3      	ldrh	r3, [r4, #12]
 801850a:	071a      	lsls	r2, r3, #28
 801850c:	d501      	bpl.n	8018512 <__swbuf_r+0x20>
 801850e:	6923      	ldr	r3, [r4, #16]
 8018510:	b943      	cbnz	r3, 8018524 <__swbuf_r+0x32>
 8018512:	4621      	mov	r1, r4
 8018514:	4628      	mov	r0, r5
 8018516:	f000 f82b 	bl	8018570 <__swsetup_r>
 801851a:	b118      	cbz	r0, 8018524 <__swbuf_r+0x32>
 801851c:	f04f 37ff 	mov.w	r7, #4294967295
 8018520:	4638      	mov	r0, r7
 8018522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018524:	6823      	ldr	r3, [r4, #0]
 8018526:	6922      	ldr	r2, [r4, #16]
 8018528:	1a98      	subs	r0, r3, r2
 801852a:	6963      	ldr	r3, [r4, #20]
 801852c:	b2f6      	uxtb	r6, r6
 801852e:	4283      	cmp	r3, r0
 8018530:	4637      	mov	r7, r6
 8018532:	dc05      	bgt.n	8018540 <__swbuf_r+0x4e>
 8018534:	4621      	mov	r1, r4
 8018536:	4628      	mov	r0, r5
 8018538:	f001 ff00 	bl	801a33c <_fflush_r>
 801853c:	2800      	cmp	r0, #0
 801853e:	d1ed      	bne.n	801851c <__swbuf_r+0x2a>
 8018540:	68a3      	ldr	r3, [r4, #8]
 8018542:	3b01      	subs	r3, #1
 8018544:	60a3      	str	r3, [r4, #8]
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	1c5a      	adds	r2, r3, #1
 801854a:	6022      	str	r2, [r4, #0]
 801854c:	701e      	strb	r6, [r3, #0]
 801854e:	6962      	ldr	r2, [r4, #20]
 8018550:	1c43      	adds	r3, r0, #1
 8018552:	429a      	cmp	r2, r3
 8018554:	d004      	beq.n	8018560 <__swbuf_r+0x6e>
 8018556:	89a3      	ldrh	r3, [r4, #12]
 8018558:	07db      	lsls	r3, r3, #31
 801855a:	d5e1      	bpl.n	8018520 <__swbuf_r+0x2e>
 801855c:	2e0a      	cmp	r6, #10
 801855e:	d1df      	bne.n	8018520 <__swbuf_r+0x2e>
 8018560:	4621      	mov	r1, r4
 8018562:	4628      	mov	r0, r5
 8018564:	f001 feea 	bl	801a33c <_fflush_r>
 8018568:	2800      	cmp	r0, #0
 801856a:	d0d9      	beq.n	8018520 <__swbuf_r+0x2e>
 801856c:	e7d6      	b.n	801851c <__swbuf_r+0x2a>
	...

08018570 <__swsetup_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	4b29      	ldr	r3, [pc, #164]	@ (8018618 <__swsetup_r+0xa8>)
 8018574:	4605      	mov	r5, r0
 8018576:	6818      	ldr	r0, [r3, #0]
 8018578:	460c      	mov	r4, r1
 801857a:	b118      	cbz	r0, 8018584 <__swsetup_r+0x14>
 801857c:	6a03      	ldr	r3, [r0, #32]
 801857e:	b90b      	cbnz	r3, 8018584 <__swsetup_r+0x14>
 8018580:	f7ff fe9a 	bl	80182b8 <__sinit>
 8018584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018588:	0719      	lsls	r1, r3, #28
 801858a:	d422      	bmi.n	80185d2 <__swsetup_r+0x62>
 801858c:	06da      	lsls	r2, r3, #27
 801858e:	d407      	bmi.n	80185a0 <__swsetup_r+0x30>
 8018590:	2209      	movs	r2, #9
 8018592:	602a      	str	r2, [r5, #0]
 8018594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018598:	81a3      	strh	r3, [r4, #12]
 801859a:	f04f 30ff 	mov.w	r0, #4294967295
 801859e:	e033      	b.n	8018608 <__swsetup_r+0x98>
 80185a0:	0758      	lsls	r0, r3, #29
 80185a2:	d512      	bpl.n	80185ca <__swsetup_r+0x5a>
 80185a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80185a6:	b141      	cbz	r1, 80185ba <__swsetup_r+0x4a>
 80185a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80185ac:	4299      	cmp	r1, r3
 80185ae:	d002      	beq.n	80185b6 <__swsetup_r+0x46>
 80185b0:	4628      	mov	r0, r5
 80185b2:	f000 ff23 	bl	80193fc <_free_r>
 80185b6:	2300      	movs	r3, #0
 80185b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80185ba:	89a3      	ldrh	r3, [r4, #12]
 80185bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80185c0:	81a3      	strh	r3, [r4, #12]
 80185c2:	2300      	movs	r3, #0
 80185c4:	6063      	str	r3, [r4, #4]
 80185c6:	6923      	ldr	r3, [r4, #16]
 80185c8:	6023      	str	r3, [r4, #0]
 80185ca:	89a3      	ldrh	r3, [r4, #12]
 80185cc:	f043 0308 	orr.w	r3, r3, #8
 80185d0:	81a3      	strh	r3, [r4, #12]
 80185d2:	6923      	ldr	r3, [r4, #16]
 80185d4:	b94b      	cbnz	r3, 80185ea <__swsetup_r+0x7a>
 80185d6:	89a3      	ldrh	r3, [r4, #12]
 80185d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80185dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80185e0:	d003      	beq.n	80185ea <__swsetup_r+0x7a>
 80185e2:	4621      	mov	r1, r4
 80185e4:	4628      	mov	r0, r5
 80185e6:	f001 ff09 	bl	801a3fc <__smakebuf_r>
 80185ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185ee:	f013 0201 	ands.w	r2, r3, #1
 80185f2:	d00a      	beq.n	801860a <__swsetup_r+0x9a>
 80185f4:	2200      	movs	r2, #0
 80185f6:	60a2      	str	r2, [r4, #8]
 80185f8:	6962      	ldr	r2, [r4, #20]
 80185fa:	4252      	negs	r2, r2
 80185fc:	61a2      	str	r2, [r4, #24]
 80185fe:	6922      	ldr	r2, [r4, #16]
 8018600:	b942      	cbnz	r2, 8018614 <__swsetup_r+0xa4>
 8018602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018606:	d1c5      	bne.n	8018594 <__swsetup_r+0x24>
 8018608:	bd38      	pop	{r3, r4, r5, pc}
 801860a:	0799      	lsls	r1, r3, #30
 801860c:	bf58      	it	pl
 801860e:	6962      	ldrpl	r2, [r4, #20]
 8018610:	60a2      	str	r2, [r4, #8]
 8018612:	e7f4      	b.n	80185fe <__swsetup_r+0x8e>
 8018614:	2000      	movs	r0, #0
 8018616:	e7f7      	b.n	8018608 <__swsetup_r+0x98>
 8018618:	20000028 	.word	0x20000028

0801861c <memcmp>:
 801861c:	b510      	push	{r4, lr}
 801861e:	3901      	subs	r1, #1
 8018620:	4402      	add	r2, r0
 8018622:	4290      	cmp	r0, r2
 8018624:	d101      	bne.n	801862a <memcmp+0xe>
 8018626:	2000      	movs	r0, #0
 8018628:	e005      	b.n	8018636 <memcmp+0x1a>
 801862a:	7803      	ldrb	r3, [r0, #0]
 801862c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018630:	42a3      	cmp	r3, r4
 8018632:	d001      	beq.n	8018638 <memcmp+0x1c>
 8018634:	1b18      	subs	r0, r3, r4
 8018636:	bd10      	pop	{r4, pc}
 8018638:	3001      	adds	r0, #1
 801863a:	e7f2      	b.n	8018622 <memcmp+0x6>

0801863c <memmove>:
 801863c:	4288      	cmp	r0, r1
 801863e:	b510      	push	{r4, lr}
 8018640:	eb01 0402 	add.w	r4, r1, r2
 8018644:	d902      	bls.n	801864c <memmove+0x10>
 8018646:	4284      	cmp	r4, r0
 8018648:	4623      	mov	r3, r4
 801864a:	d807      	bhi.n	801865c <memmove+0x20>
 801864c:	1e43      	subs	r3, r0, #1
 801864e:	42a1      	cmp	r1, r4
 8018650:	d008      	beq.n	8018664 <memmove+0x28>
 8018652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018656:	f803 2f01 	strb.w	r2, [r3, #1]!
 801865a:	e7f8      	b.n	801864e <memmove+0x12>
 801865c:	4402      	add	r2, r0
 801865e:	4601      	mov	r1, r0
 8018660:	428a      	cmp	r2, r1
 8018662:	d100      	bne.n	8018666 <memmove+0x2a>
 8018664:	bd10      	pop	{r4, pc}
 8018666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801866a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801866e:	e7f7      	b.n	8018660 <memmove+0x24>

08018670 <memset>:
 8018670:	4402      	add	r2, r0
 8018672:	4603      	mov	r3, r0
 8018674:	4293      	cmp	r3, r2
 8018676:	d100      	bne.n	801867a <memset+0xa>
 8018678:	4770      	bx	lr
 801867a:	f803 1b01 	strb.w	r1, [r3], #1
 801867e:	e7f9      	b.n	8018674 <memset+0x4>

08018680 <strcat>:
 8018680:	b510      	push	{r4, lr}
 8018682:	4602      	mov	r2, r0
 8018684:	7814      	ldrb	r4, [r2, #0]
 8018686:	4613      	mov	r3, r2
 8018688:	3201      	adds	r2, #1
 801868a:	2c00      	cmp	r4, #0
 801868c:	d1fa      	bne.n	8018684 <strcat+0x4>
 801868e:	3b01      	subs	r3, #1
 8018690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018694:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018698:	2a00      	cmp	r2, #0
 801869a:	d1f9      	bne.n	8018690 <strcat+0x10>
 801869c:	bd10      	pop	{r4, pc}

0801869e <strncpy>:
 801869e:	b510      	push	{r4, lr}
 80186a0:	3901      	subs	r1, #1
 80186a2:	4603      	mov	r3, r0
 80186a4:	b132      	cbz	r2, 80186b4 <strncpy+0x16>
 80186a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80186aa:	f803 4b01 	strb.w	r4, [r3], #1
 80186ae:	3a01      	subs	r2, #1
 80186b0:	2c00      	cmp	r4, #0
 80186b2:	d1f7      	bne.n	80186a4 <strncpy+0x6>
 80186b4:	441a      	add	r2, r3
 80186b6:	2100      	movs	r1, #0
 80186b8:	4293      	cmp	r3, r2
 80186ba:	d100      	bne.n	80186be <strncpy+0x20>
 80186bc:	bd10      	pop	{r4, pc}
 80186be:	f803 1b01 	strb.w	r1, [r3], #1
 80186c2:	e7f9      	b.n	80186b8 <strncpy+0x1a>

080186c4 <strstr>:
 80186c4:	780a      	ldrb	r2, [r1, #0]
 80186c6:	b570      	push	{r4, r5, r6, lr}
 80186c8:	b96a      	cbnz	r2, 80186e6 <strstr+0x22>
 80186ca:	bd70      	pop	{r4, r5, r6, pc}
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d109      	bne.n	80186e4 <strstr+0x20>
 80186d0:	460c      	mov	r4, r1
 80186d2:	4605      	mov	r5, r0
 80186d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d0f6      	beq.n	80186ca <strstr+0x6>
 80186dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80186e0:	429e      	cmp	r6, r3
 80186e2:	d0f7      	beq.n	80186d4 <strstr+0x10>
 80186e4:	3001      	adds	r0, #1
 80186e6:	7803      	ldrb	r3, [r0, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d1ef      	bne.n	80186cc <strstr+0x8>
 80186ec:	4618      	mov	r0, r3
 80186ee:	e7ec      	b.n	80186ca <strstr+0x6>

080186f0 <_localeconv_r>:
 80186f0:	4800      	ldr	r0, [pc, #0]	@ (80186f4 <_localeconv_r+0x4>)
 80186f2:	4770      	bx	lr
 80186f4:	20000168 	.word	0x20000168

080186f8 <_close_r>:
 80186f8:	b538      	push	{r3, r4, r5, lr}
 80186fa:	4d06      	ldr	r5, [pc, #24]	@ (8018714 <_close_r+0x1c>)
 80186fc:	2300      	movs	r3, #0
 80186fe:	4604      	mov	r4, r0
 8018700:	4608      	mov	r0, r1
 8018702:	602b      	str	r3, [r5, #0]
 8018704:	f7e8 fbec 	bl	8000ee0 <_close>
 8018708:	1c43      	adds	r3, r0, #1
 801870a:	d102      	bne.n	8018712 <_close_r+0x1a>
 801870c:	682b      	ldr	r3, [r5, #0]
 801870e:	b103      	cbz	r3, 8018712 <_close_r+0x1a>
 8018710:	6023      	str	r3, [r4, #0]
 8018712:	bd38      	pop	{r3, r4, r5, pc}
 8018714:	2000e220 	.word	0x2000e220

08018718 <_lseek_r>:
 8018718:	b538      	push	{r3, r4, r5, lr}
 801871a:	4d07      	ldr	r5, [pc, #28]	@ (8018738 <_lseek_r+0x20>)
 801871c:	4604      	mov	r4, r0
 801871e:	4608      	mov	r0, r1
 8018720:	4611      	mov	r1, r2
 8018722:	2200      	movs	r2, #0
 8018724:	602a      	str	r2, [r5, #0]
 8018726:	461a      	mov	r2, r3
 8018728:	f7e8 fc01 	bl	8000f2e <_lseek>
 801872c:	1c43      	adds	r3, r0, #1
 801872e:	d102      	bne.n	8018736 <_lseek_r+0x1e>
 8018730:	682b      	ldr	r3, [r5, #0]
 8018732:	b103      	cbz	r3, 8018736 <_lseek_r+0x1e>
 8018734:	6023      	str	r3, [r4, #0]
 8018736:	bd38      	pop	{r3, r4, r5, pc}
 8018738:	2000e220 	.word	0x2000e220

0801873c <_read_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d07      	ldr	r5, [pc, #28]	@ (801875c <_read_r+0x20>)
 8018740:	4604      	mov	r4, r0
 8018742:	4608      	mov	r0, r1
 8018744:	4611      	mov	r1, r2
 8018746:	2200      	movs	r2, #0
 8018748:	602a      	str	r2, [r5, #0]
 801874a:	461a      	mov	r2, r3
 801874c:	f7e8 fbab 	bl	8000ea6 <_read>
 8018750:	1c43      	adds	r3, r0, #1
 8018752:	d102      	bne.n	801875a <_read_r+0x1e>
 8018754:	682b      	ldr	r3, [r5, #0]
 8018756:	b103      	cbz	r3, 801875a <_read_r+0x1e>
 8018758:	6023      	str	r3, [r4, #0]
 801875a:	bd38      	pop	{r3, r4, r5, pc}
 801875c:	2000e220 	.word	0x2000e220

08018760 <_write_r>:
 8018760:	b538      	push	{r3, r4, r5, lr}
 8018762:	4d07      	ldr	r5, [pc, #28]	@ (8018780 <_write_r+0x20>)
 8018764:	4604      	mov	r4, r0
 8018766:	4608      	mov	r0, r1
 8018768:	4611      	mov	r1, r2
 801876a:	2200      	movs	r2, #0
 801876c:	602a      	str	r2, [r5, #0]
 801876e:	461a      	mov	r2, r3
 8018770:	f7e8 f814 	bl	800079c <_write>
 8018774:	1c43      	adds	r3, r0, #1
 8018776:	d102      	bne.n	801877e <_write_r+0x1e>
 8018778:	682b      	ldr	r3, [r5, #0]
 801877a:	b103      	cbz	r3, 801877e <_write_r+0x1e>
 801877c:	6023      	str	r3, [r4, #0]
 801877e:	bd38      	pop	{r3, r4, r5, pc}
 8018780:	2000e220 	.word	0x2000e220

08018784 <__libc_init_array>:
 8018784:	b570      	push	{r4, r5, r6, lr}
 8018786:	4d0d      	ldr	r5, [pc, #52]	@ (80187bc <__libc_init_array+0x38>)
 8018788:	4c0d      	ldr	r4, [pc, #52]	@ (80187c0 <__libc_init_array+0x3c>)
 801878a:	1b64      	subs	r4, r4, r5
 801878c:	10a4      	asrs	r4, r4, #2
 801878e:	2600      	movs	r6, #0
 8018790:	42a6      	cmp	r6, r4
 8018792:	d109      	bne.n	80187a8 <__libc_init_array+0x24>
 8018794:	4d0b      	ldr	r5, [pc, #44]	@ (80187c4 <__libc_init_array+0x40>)
 8018796:	4c0c      	ldr	r4, [pc, #48]	@ (80187c8 <__libc_init_array+0x44>)
 8018798:	f001 ff52 	bl	801a640 <_init>
 801879c:	1b64      	subs	r4, r4, r5
 801879e:	10a4      	asrs	r4, r4, #2
 80187a0:	2600      	movs	r6, #0
 80187a2:	42a6      	cmp	r6, r4
 80187a4:	d105      	bne.n	80187b2 <__libc_init_array+0x2e>
 80187a6:	bd70      	pop	{r4, r5, r6, pc}
 80187a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80187ac:	4798      	blx	r3
 80187ae:	3601      	adds	r6, #1
 80187b0:	e7ee      	b.n	8018790 <__libc_init_array+0xc>
 80187b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80187b6:	4798      	blx	r3
 80187b8:	3601      	adds	r6, #1
 80187ba:	e7f2      	b.n	80187a2 <__libc_init_array+0x1e>
 80187bc:	0801e15c 	.word	0x0801e15c
 80187c0:	0801e15c 	.word	0x0801e15c
 80187c4:	0801e15c 	.word	0x0801e15c
 80187c8:	0801e160 	.word	0x0801e160

080187cc <__retarget_lock_init_recursive>:
 80187cc:	4770      	bx	lr

080187ce <__retarget_lock_acquire_recursive>:
 80187ce:	4770      	bx	lr

080187d0 <__retarget_lock_release_recursive>:
 80187d0:	4770      	bx	lr

080187d2 <strcpy>:
 80187d2:	4603      	mov	r3, r0
 80187d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80187d8:	f803 2b01 	strb.w	r2, [r3], #1
 80187dc:	2a00      	cmp	r2, #0
 80187de:	d1f9      	bne.n	80187d4 <strcpy+0x2>
 80187e0:	4770      	bx	lr

080187e2 <memcpy>:
 80187e2:	440a      	add	r2, r1
 80187e4:	4291      	cmp	r1, r2
 80187e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80187ea:	d100      	bne.n	80187ee <memcpy+0xc>
 80187ec:	4770      	bx	lr
 80187ee:	b510      	push	{r4, lr}
 80187f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187f8:	4291      	cmp	r1, r2
 80187fa:	d1f9      	bne.n	80187f0 <memcpy+0xe>
 80187fc:	bd10      	pop	{r4, pc}
	...

08018800 <__assert_func>:
 8018800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018802:	4614      	mov	r4, r2
 8018804:	461a      	mov	r2, r3
 8018806:	4b09      	ldr	r3, [pc, #36]	@ (801882c <__assert_func+0x2c>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	4605      	mov	r5, r0
 801880c:	68d8      	ldr	r0, [r3, #12]
 801880e:	b954      	cbnz	r4, 8018826 <__assert_func+0x26>
 8018810:	4b07      	ldr	r3, [pc, #28]	@ (8018830 <__assert_func+0x30>)
 8018812:	461c      	mov	r4, r3
 8018814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018818:	9100      	str	r1, [sp, #0]
 801881a:	462b      	mov	r3, r5
 801881c:	4905      	ldr	r1, [pc, #20]	@ (8018834 <__assert_func+0x34>)
 801881e:	f001 fdb5 	bl	801a38c <fiprintf>
 8018822:	f001 fe59 	bl	801a4d8 <abort>
 8018826:	4b04      	ldr	r3, [pc, #16]	@ (8018838 <__assert_func+0x38>)
 8018828:	e7f4      	b.n	8018814 <__assert_func+0x14>
 801882a:	bf00      	nop
 801882c:	20000028 	.word	0x20000028
 8018830:	0801df69 	.word	0x0801df69
 8018834:	0801df3b 	.word	0x0801df3b
 8018838:	0801df2e 	.word	0x0801df2e

0801883c <quorem>:
 801883c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018840:	6903      	ldr	r3, [r0, #16]
 8018842:	690c      	ldr	r4, [r1, #16]
 8018844:	42a3      	cmp	r3, r4
 8018846:	4607      	mov	r7, r0
 8018848:	db7e      	blt.n	8018948 <quorem+0x10c>
 801884a:	3c01      	subs	r4, #1
 801884c:	f101 0814 	add.w	r8, r1, #20
 8018850:	00a3      	lsls	r3, r4, #2
 8018852:	f100 0514 	add.w	r5, r0, #20
 8018856:	9300      	str	r3, [sp, #0]
 8018858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801885c:	9301      	str	r3, [sp, #4]
 801885e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018866:	3301      	adds	r3, #1
 8018868:	429a      	cmp	r2, r3
 801886a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801886e:	fbb2 f6f3 	udiv	r6, r2, r3
 8018872:	d32e      	bcc.n	80188d2 <quorem+0x96>
 8018874:	f04f 0a00 	mov.w	sl, #0
 8018878:	46c4      	mov	ip, r8
 801887a:	46ae      	mov	lr, r5
 801887c:	46d3      	mov	fp, sl
 801887e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018882:	b298      	uxth	r0, r3
 8018884:	fb06 a000 	mla	r0, r6, r0, sl
 8018888:	0c02      	lsrs	r2, r0, #16
 801888a:	0c1b      	lsrs	r3, r3, #16
 801888c:	fb06 2303 	mla	r3, r6, r3, r2
 8018890:	f8de 2000 	ldr.w	r2, [lr]
 8018894:	b280      	uxth	r0, r0
 8018896:	b292      	uxth	r2, r2
 8018898:	1a12      	subs	r2, r2, r0
 801889a:	445a      	add	r2, fp
 801889c:	f8de 0000 	ldr.w	r0, [lr]
 80188a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80188a4:	b29b      	uxth	r3, r3
 80188a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80188aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80188ae:	b292      	uxth	r2, r2
 80188b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80188b4:	45e1      	cmp	r9, ip
 80188b6:	f84e 2b04 	str.w	r2, [lr], #4
 80188ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80188be:	d2de      	bcs.n	801887e <quorem+0x42>
 80188c0:	9b00      	ldr	r3, [sp, #0]
 80188c2:	58eb      	ldr	r3, [r5, r3]
 80188c4:	b92b      	cbnz	r3, 80188d2 <quorem+0x96>
 80188c6:	9b01      	ldr	r3, [sp, #4]
 80188c8:	3b04      	subs	r3, #4
 80188ca:	429d      	cmp	r5, r3
 80188cc:	461a      	mov	r2, r3
 80188ce:	d32f      	bcc.n	8018930 <quorem+0xf4>
 80188d0:	613c      	str	r4, [r7, #16]
 80188d2:	4638      	mov	r0, r7
 80188d4:	f001 f90c 	bl	8019af0 <__mcmp>
 80188d8:	2800      	cmp	r0, #0
 80188da:	db25      	blt.n	8018928 <quorem+0xec>
 80188dc:	4629      	mov	r1, r5
 80188de:	2000      	movs	r0, #0
 80188e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80188e4:	f8d1 c000 	ldr.w	ip, [r1]
 80188e8:	fa1f fe82 	uxth.w	lr, r2
 80188ec:	fa1f f38c 	uxth.w	r3, ip
 80188f0:	eba3 030e 	sub.w	r3, r3, lr
 80188f4:	4403      	add	r3, r0
 80188f6:	0c12      	lsrs	r2, r2, #16
 80188f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80188fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018900:	b29b      	uxth	r3, r3
 8018902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018906:	45c1      	cmp	r9, r8
 8018908:	f841 3b04 	str.w	r3, [r1], #4
 801890c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018910:	d2e6      	bcs.n	80188e0 <quorem+0xa4>
 8018912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801891a:	b922      	cbnz	r2, 8018926 <quorem+0xea>
 801891c:	3b04      	subs	r3, #4
 801891e:	429d      	cmp	r5, r3
 8018920:	461a      	mov	r2, r3
 8018922:	d30b      	bcc.n	801893c <quorem+0x100>
 8018924:	613c      	str	r4, [r7, #16]
 8018926:	3601      	adds	r6, #1
 8018928:	4630      	mov	r0, r6
 801892a:	b003      	add	sp, #12
 801892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018930:	6812      	ldr	r2, [r2, #0]
 8018932:	3b04      	subs	r3, #4
 8018934:	2a00      	cmp	r2, #0
 8018936:	d1cb      	bne.n	80188d0 <quorem+0x94>
 8018938:	3c01      	subs	r4, #1
 801893a:	e7c6      	b.n	80188ca <quorem+0x8e>
 801893c:	6812      	ldr	r2, [r2, #0]
 801893e:	3b04      	subs	r3, #4
 8018940:	2a00      	cmp	r2, #0
 8018942:	d1ef      	bne.n	8018924 <quorem+0xe8>
 8018944:	3c01      	subs	r4, #1
 8018946:	e7ea      	b.n	801891e <quorem+0xe2>
 8018948:	2000      	movs	r0, #0
 801894a:	e7ee      	b.n	801892a <quorem+0xee>
 801894c:	0000      	movs	r0, r0
	...

08018950 <_dtoa_r>:
 8018950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018954:	ed2d 8b02 	vpush	{d8}
 8018958:	69c7      	ldr	r7, [r0, #28]
 801895a:	b091      	sub	sp, #68	@ 0x44
 801895c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018960:	ec55 4b10 	vmov	r4, r5, d0
 8018964:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8018966:	9107      	str	r1, [sp, #28]
 8018968:	4681      	mov	r9, r0
 801896a:	9209      	str	r2, [sp, #36]	@ 0x24
 801896c:	930d      	str	r3, [sp, #52]	@ 0x34
 801896e:	b97f      	cbnz	r7, 8018990 <_dtoa_r+0x40>
 8018970:	2010      	movs	r0, #16
 8018972:	f000 fd8d 	bl	8019490 <malloc>
 8018976:	4602      	mov	r2, r0
 8018978:	f8c9 001c 	str.w	r0, [r9, #28]
 801897c:	b920      	cbnz	r0, 8018988 <_dtoa_r+0x38>
 801897e:	4ba0      	ldr	r3, [pc, #640]	@ (8018c00 <_dtoa_r+0x2b0>)
 8018980:	21ef      	movs	r1, #239	@ 0xef
 8018982:	48a0      	ldr	r0, [pc, #640]	@ (8018c04 <_dtoa_r+0x2b4>)
 8018984:	f7ff ff3c 	bl	8018800 <__assert_func>
 8018988:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801898c:	6007      	str	r7, [r0, #0]
 801898e:	60c7      	str	r7, [r0, #12]
 8018990:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018994:	6819      	ldr	r1, [r3, #0]
 8018996:	b159      	cbz	r1, 80189b0 <_dtoa_r+0x60>
 8018998:	685a      	ldr	r2, [r3, #4]
 801899a:	604a      	str	r2, [r1, #4]
 801899c:	2301      	movs	r3, #1
 801899e:	4093      	lsls	r3, r2
 80189a0:	608b      	str	r3, [r1, #8]
 80189a2:	4648      	mov	r0, r9
 80189a4:	f000 fe6a 	bl	801967c <_Bfree>
 80189a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80189ac:	2200      	movs	r2, #0
 80189ae:	601a      	str	r2, [r3, #0]
 80189b0:	1e2b      	subs	r3, r5, #0
 80189b2:	bfbb      	ittet	lt
 80189b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80189b8:	9303      	strlt	r3, [sp, #12]
 80189ba:	2300      	movge	r3, #0
 80189bc:	2201      	movlt	r2, #1
 80189be:	bfac      	ite	ge
 80189c0:	6033      	strge	r3, [r6, #0]
 80189c2:	6032      	strlt	r2, [r6, #0]
 80189c4:	4b90      	ldr	r3, [pc, #576]	@ (8018c08 <_dtoa_r+0x2b8>)
 80189c6:	9e03      	ldr	r6, [sp, #12]
 80189c8:	43b3      	bics	r3, r6
 80189ca:	d110      	bne.n	80189ee <_dtoa_r+0x9e>
 80189cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 80189d2:	6013      	str	r3, [r2, #0]
 80189d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80189d8:	4323      	orrs	r3, r4
 80189da:	f000 84de 	beq.w	801939a <_dtoa_r+0xa4a>
 80189de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80189e0:	4f8a      	ldr	r7, [pc, #552]	@ (8018c0c <_dtoa_r+0x2bc>)
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	f000 84e0 	beq.w	80193a8 <_dtoa_r+0xa58>
 80189e8:	1cfb      	adds	r3, r7, #3
 80189ea:	f000 bcdb 	b.w	80193a4 <_dtoa_r+0xa54>
 80189ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 80189f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80189f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189fa:	d10a      	bne.n	8018a12 <_dtoa_r+0xc2>
 80189fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189fe:	2301      	movs	r3, #1
 8018a00:	6013      	str	r3, [r2, #0]
 8018a02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018a04:	b113      	cbz	r3, 8018a0c <_dtoa_r+0xbc>
 8018a06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018a08:	4b81      	ldr	r3, [pc, #516]	@ (8018c10 <_dtoa_r+0x2c0>)
 8018a0a:	6013      	str	r3, [r2, #0]
 8018a0c:	4f81      	ldr	r7, [pc, #516]	@ (8018c14 <_dtoa_r+0x2c4>)
 8018a0e:	f000 bccb 	b.w	80193a8 <_dtoa_r+0xa58>
 8018a12:	aa0e      	add	r2, sp, #56	@ 0x38
 8018a14:	a90f      	add	r1, sp, #60	@ 0x3c
 8018a16:	4648      	mov	r0, r9
 8018a18:	eeb0 0b48 	vmov.f64	d0, d8
 8018a1c:	f001 f918 	bl	8019c50 <__d2b>
 8018a20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a26:	9001      	str	r0, [sp, #4]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d045      	beq.n	8018ab8 <_dtoa_r+0x168>
 8018a2c:	eeb0 7b48 	vmov.f64	d7, d8
 8018a30:	ee18 1a90 	vmov	r1, s17
 8018a34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018a38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8018a3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018a40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018a44:	2500      	movs	r5, #0
 8018a46:	ee07 1a90 	vmov	s15, r1
 8018a4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018a4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018be8 <_dtoa_r+0x298>
 8018a52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018a56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018bf0 <_dtoa_r+0x2a0>
 8018a5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018a5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018bf8 <_dtoa_r+0x2a8>
 8018a62:	ee07 3a90 	vmov	s15, r3
 8018a66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018a6a:	eeb0 7b46 	vmov.f64	d7, d6
 8018a6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018a72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018a76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a7e:	ee16 8a90 	vmov	r8, s13
 8018a82:	d508      	bpl.n	8018a96 <_dtoa_r+0x146>
 8018a84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018a88:	eeb4 6b47 	vcmp.f64	d6, d7
 8018a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a90:	bf18      	it	ne
 8018a92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8018a96:	f1b8 0f16 	cmp.w	r8, #22
 8018a9a:	d82b      	bhi.n	8018af4 <_dtoa_r+0x1a4>
 8018a9c:	495e      	ldr	r1, [pc, #376]	@ (8018c18 <_dtoa_r+0x2c8>)
 8018a9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018aa2:	ed91 7b00 	vldr	d7, [r1]
 8018aa6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aae:	d501      	bpl.n	8018ab4 <_dtoa_r+0x164>
 8018ab0:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ab4:	2100      	movs	r1, #0
 8018ab6:	e01e      	b.n	8018af6 <_dtoa_r+0x1a6>
 8018ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018aba:	4413      	add	r3, r2
 8018abc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018ac0:	2920      	cmp	r1, #32
 8018ac2:	bfc1      	itttt	gt
 8018ac4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018ac8:	408e      	lslgt	r6, r1
 8018aca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8018ace:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018ad2:	bfd6      	itet	le
 8018ad4:	f1c1 0120 	rsble	r1, r1, #32
 8018ad8:	4331      	orrgt	r1, r6
 8018ada:	fa04 f101 	lslle.w	r1, r4, r1
 8018ade:	ee07 1a90 	vmov	s15, r1
 8018ae2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018ae6:	3b01      	subs	r3, #1
 8018ae8:	ee17 1a90 	vmov	r1, s15
 8018aec:	2501      	movs	r5, #1
 8018aee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018af2:	e7a8      	b.n	8018a46 <_dtoa_r+0xf6>
 8018af4:	2101      	movs	r1, #1
 8018af6:	1ad2      	subs	r2, r2, r3
 8018af8:	1e53      	subs	r3, r2, #1
 8018afa:	9306      	str	r3, [sp, #24]
 8018afc:	bf45      	ittet	mi
 8018afe:	f1c2 0301 	rsbmi	r3, r2, #1
 8018b02:	9305      	strmi	r3, [sp, #20]
 8018b04:	2300      	movpl	r3, #0
 8018b06:	2300      	movmi	r3, #0
 8018b08:	bf4c      	ite	mi
 8018b0a:	9306      	strmi	r3, [sp, #24]
 8018b0c:	9305      	strpl	r3, [sp, #20]
 8018b0e:	f1b8 0f00 	cmp.w	r8, #0
 8018b12:	910c      	str	r1, [sp, #48]	@ 0x30
 8018b14:	db18      	blt.n	8018b48 <_dtoa_r+0x1f8>
 8018b16:	9b06      	ldr	r3, [sp, #24]
 8018b18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8018b1c:	4443      	add	r3, r8
 8018b1e:	9306      	str	r3, [sp, #24]
 8018b20:	2300      	movs	r3, #0
 8018b22:	9a07      	ldr	r2, [sp, #28]
 8018b24:	2a09      	cmp	r2, #9
 8018b26:	d849      	bhi.n	8018bbc <_dtoa_r+0x26c>
 8018b28:	2a05      	cmp	r2, #5
 8018b2a:	bfc4      	itt	gt
 8018b2c:	3a04      	subgt	r2, #4
 8018b2e:	9207      	strgt	r2, [sp, #28]
 8018b30:	9a07      	ldr	r2, [sp, #28]
 8018b32:	f1a2 0202 	sub.w	r2, r2, #2
 8018b36:	bfcc      	ite	gt
 8018b38:	2400      	movgt	r4, #0
 8018b3a:	2401      	movle	r4, #1
 8018b3c:	2a03      	cmp	r2, #3
 8018b3e:	d848      	bhi.n	8018bd2 <_dtoa_r+0x282>
 8018b40:	e8df f002 	tbb	[pc, r2]
 8018b44:	3a2c2e0b 	.word	0x3a2c2e0b
 8018b48:	9b05      	ldr	r3, [sp, #20]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	eba3 0308 	sub.w	r3, r3, r8
 8018b50:	9305      	str	r3, [sp, #20]
 8018b52:	920a      	str	r2, [sp, #40]	@ 0x28
 8018b54:	f1c8 0300 	rsb	r3, r8, #0
 8018b58:	e7e3      	b.n	8018b22 <_dtoa_r+0x1d2>
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	9208      	str	r2, [sp, #32]
 8018b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b60:	2a00      	cmp	r2, #0
 8018b62:	dc39      	bgt.n	8018bd8 <_dtoa_r+0x288>
 8018b64:	f04f 0b01 	mov.w	fp, #1
 8018b68:	46da      	mov	sl, fp
 8018b6a:	465a      	mov	r2, fp
 8018b6c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018b70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8018b74:	2100      	movs	r1, #0
 8018b76:	2004      	movs	r0, #4
 8018b78:	f100 0614 	add.w	r6, r0, #20
 8018b7c:	4296      	cmp	r6, r2
 8018b7e:	d930      	bls.n	8018be2 <_dtoa_r+0x292>
 8018b80:	6079      	str	r1, [r7, #4]
 8018b82:	4648      	mov	r0, r9
 8018b84:	9304      	str	r3, [sp, #16]
 8018b86:	f000 fd39 	bl	80195fc <_Balloc>
 8018b8a:	9b04      	ldr	r3, [sp, #16]
 8018b8c:	4607      	mov	r7, r0
 8018b8e:	2800      	cmp	r0, #0
 8018b90:	d146      	bne.n	8018c20 <_dtoa_r+0x2d0>
 8018b92:	4b22      	ldr	r3, [pc, #136]	@ (8018c1c <_dtoa_r+0x2cc>)
 8018b94:	4602      	mov	r2, r0
 8018b96:	f240 11af 	movw	r1, #431	@ 0x1af
 8018b9a:	e6f2      	b.n	8018982 <_dtoa_r+0x32>
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	e7dd      	b.n	8018b5c <_dtoa_r+0x20c>
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	9208      	str	r2, [sp, #32]
 8018ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ba6:	eb08 0b02 	add.w	fp, r8, r2
 8018baa:	f10b 0a01 	add.w	sl, fp, #1
 8018bae:	4652      	mov	r2, sl
 8018bb0:	2a01      	cmp	r2, #1
 8018bb2:	bfb8      	it	lt
 8018bb4:	2201      	movlt	r2, #1
 8018bb6:	e7db      	b.n	8018b70 <_dtoa_r+0x220>
 8018bb8:	2201      	movs	r2, #1
 8018bba:	e7f2      	b.n	8018ba2 <_dtoa_r+0x252>
 8018bbc:	2401      	movs	r4, #1
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018bc4:	f04f 3bff 	mov.w	fp, #4294967295
 8018bc8:	2100      	movs	r1, #0
 8018bca:	46da      	mov	sl, fp
 8018bcc:	2212      	movs	r2, #18
 8018bce:	9109      	str	r1, [sp, #36]	@ 0x24
 8018bd0:	e7ce      	b.n	8018b70 <_dtoa_r+0x220>
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	9208      	str	r2, [sp, #32]
 8018bd6:	e7f5      	b.n	8018bc4 <_dtoa_r+0x274>
 8018bd8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8018bdc:	46da      	mov	sl, fp
 8018bde:	465a      	mov	r2, fp
 8018be0:	e7c6      	b.n	8018b70 <_dtoa_r+0x220>
 8018be2:	3101      	adds	r1, #1
 8018be4:	0040      	lsls	r0, r0, #1
 8018be6:	e7c7      	b.n	8018b78 <_dtoa_r+0x228>
 8018be8:	636f4361 	.word	0x636f4361
 8018bec:	3fd287a7 	.word	0x3fd287a7
 8018bf0:	8b60c8b3 	.word	0x8b60c8b3
 8018bf4:	3fc68a28 	.word	0x3fc68a28
 8018bf8:	509f79fb 	.word	0x509f79fb
 8018bfc:	3fd34413 	.word	0x3fd34413
 8018c00:	0801dd8a 	.word	0x0801dd8a
 8018c04:	0801df77 	.word	0x0801df77
 8018c08:	7ff00000 	.word	0x7ff00000
 8018c0c:	0801df73 	.word	0x0801df73
 8018c10:	0801df0b 	.word	0x0801df0b
 8018c14:	0801df0a 	.word	0x0801df0a
 8018c18:	0801e070 	.word	0x0801e070
 8018c1c:	0801dfcf 	.word	0x0801dfcf
 8018c20:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018c24:	f1ba 0f0e 	cmp.w	sl, #14
 8018c28:	6010      	str	r0, [r2, #0]
 8018c2a:	d86f      	bhi.n	8018d0c <_dtoa_r+0x3bc>
 8018c2c:	2c00      	cmp	r4, #0
 8018c2e:	d06d      	beq.n	8018d0c <_dtoa_r+0x3bc>
 8018c30:	f1b8 0f00 	cmp.w	r8, #0
 8018c34:	f340 80c2 	ble.w	8018dbc <_dtoa_r+0x46c>
 8018c38:	4aca      	ldr	r2, [pc, #808]	@ (8018f64 <_dtoa_r+0x614>)
 8018c3a:	f008 010f 	and.w	r1, r8, #15
 8018c3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018c42:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018c46:	ed92 7b00 	vldr	d7, [r2]
 8018c4a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018c4e:	f000 80a9 	beq.w	8018da4 <_dtoa_r+0x454>
 8018c52:	4ac5      	ldr	r2, [pc, #788]	@ (8018f68 <_dtoa_r+0x618>)
 8018c54:	ed92 6b08 	vldr	d6, [r2, #32]
 8018c58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018c5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018c60:	f001 010f 	and.w	r1, r1, #15
 8018c64:	2203      	movs	r2, #3
 8018c66:	48c0      	ldr	r0, [pc, #768]	@ (8018f68 <_dtoa_r+0x618>)
 8018c68:	2900      	cmp	r1, #0
 8018c6a:	f040 809d 	bne.w	8018da8 <_dtoa_r+0x458>
 8018c6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018c72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018c76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018c7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018c7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c80:	2900      	cmp	r1, #0
 8018c82:	f000 80c1 	beq.w	8018e08 <_dtoa_r+0x4b8>
 8018c86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018c8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c92:	f140 80b9 	bpl.w	8018e08 <_dtoa_r+0x4b8>
 8018c96:	f1ba 0f00 	cmp.w	sl, #0
 8018c9a:	f000 80b5 	beq.w	8018e08 <_dtoa_r+0x4b8>
 8018c9e:	f1bb 0f00 	cmp.w	fp, #0
 8018ca2:	dd31      	ble.n	8018d08 <_dtoa_r+0x3b8>
 8018ca4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018ca8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018cb0:	f108 31ff 	add.w	r1, r8, #4294967295
 8018cb4:	9104      	str	r1, [sp, #16]
 8018cb6:	3201      	adds	r2, #1
 8018cb8:	465c      	mov	r4, fp
 8018cba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018cbe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018cc2:	ee07 2a90 	vmov	s15, r2
 8018cc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018cca:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018cce:	ee15 2a90 	vmov	r2, s11
 8018cd2:	ec51 0b15 	vmov	r0, r1, d5
 8018cd6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8018cda:	2c00      	cmp	r4, #0
 8018cdc:	f040 8098 	bne.w	8018e10 <_dtoa_r+0x4c0>
 8018ce0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018ce4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018ce8:	ec41 0b17 	vmov	d7, r0, r1
 8018cec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf4:	f300 8261 	bgt.w	80191ba <_dtoa_r+0x86a>
 8018cf8:	eeb1 7b47 	vneg.f64	d7, d7
 8018cfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d04:	f100 80f5 	bmi.w	8018ef2 <_dtoa_r+0x5a2>
 8018d08:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018d0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d0e:	2a00      	cmp	r2, #0
 8018d10:	f2c0 812c 	blt.w	8018f6c <_dtoa_r+0x61c>
 8018d14:	f1b8 0f0e 	cmp.w	r8, #14
 8018d18:	f300 8128 	bgt.w	8018f6c <_dtoa_r+0x61c>
 8018d1c:	4b91      	ldr	r3, [pc, #580]	@ (8018f64 <_dtoa_r+0x614>)
 8018d1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018d22:	ed93 6b00 	vldr	d6, [r3]
 8018d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	da03      	bge.n	8018d34 <_dtoa_r+0x3e4>
 8018d2c:	f1ba 0f00 	cmp.w	sl, #0
 8018d30:	f340 80d2 	ble.w	8018ed8 <_dtoa_r+0x588>
 8018d34:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018d3c:	463e      	mov	r6, r7
 8018d3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018d42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018d46:	ee15 3a10 	vmov	r3, s10
 8018d4a:	3330      	adds	r3, #48	@ 0x30
 8018d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8018d50:	1bf3      	subs	r3, r6, r7
 8018d52:	459a      	cmp	sl, r3
 8018d54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018d58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018d5c:	f040 80f8 	bne.w	8018f50 <_dtoa_r+0x600>
 8018d60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018d64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d6c:	f300 80dd 	bgt.w	8018f2a <_dtoa_r+0x5da>
 8018d70:	eeb4 7b46 	vcmp.f64	d7, d6
 8018d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d78:	d104      	bne.n	8018d84 <_dtoa_r+0x434>
 8018d7a:	ee15 3a10 	vmov	r3, s10
 8018d7e:	07db      	lsls	r3, r3, #31
 8018d80:	f100 80d3 	bmi.w	8018f2a <_dtoa_r+0x5da>
 8018d84:	9901      	ldr	r1, [sp, #4]
 8018d86:	4648      	mov	r0, r9
 8018d88:	f000 fc78 	bl	801967c <_Bfree>
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018d90:	7033      	strb	r3, [r6, #0]
 8018d92:	f108 0301 	add.w	r3, r8, #1
 8018d96:	6013      	str	r3, [r2, #0]
 8018d98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	f000 8304 	beq.w	80193a8 <_dtoa_r+0xa58>
 8018da0:	601e      	str	r6, [r3, #0]
 8018da2:	e301      	b.n	80193a8 <_dtoa_r+0xa58>
 8018da4:	2202      	movs	r2, #2
 8018da6:	e75e      	b.n	8018c66 <_dtoa_r+0x316>
 8018da8:	07cc      	lsls	r4, r1, #31
 8018daa:	d504      	bpl.n	8018db6 <_dtoa_r+0x466>
 8018dac:	ed90 6b00 	vldr	d6, [r0]
 8018db0:	3201      	adds	r2, #1
 8018db2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018db6:	1049      	asrs	r1, r1, #1
 8018db8:	3008      	adds	r0, #8
 8018dba:	e755      	b.n	8018c68 <_dtoa_r+0x318>
 8018dbc:	d022      	beq.n	8018e04 <_dtoa_r+0x4b4>
 8018dbe:	f1c8 0100 	rsb	r1, r8, #0
 8018dc2:	4a68      	ldr	r2, [pc, #416]	@ (8018f64 <_dtoa_r+0x614>)
 8018dc4:	f001 000f 	and.w	r0, r1, #15
 8018dc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018dcc:	ed92 7b00 	vldr	d7, [r2]
 8018dd0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018dd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018dd8:	4863      	ldr	r0, [pc, #396]	@ (8018f68 <_dtoa_r+0x618>)
 8018dda:	1109      	asrs	r1, r1, #4
 8018ddc:	2400      	movs	r4, #0
 8018dde:	2202      	movs	r2, #2
 8018de0:	b929      	cbnz	r1, 8018dee <_dtoa_r+0x49e>
 8018de2:	2c00      	cmp	r4, #0
 8018de4:	f43f af49 	beq.w	8018c7a <_dtoa_r+0x32a>
 8018de8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018dec:	e745      	b.n	8018c7a <_dtoa_r+0x32a>
 8018dee:	07ce      	lsls	r6, r1, #31
 8018df0:	d505      	bpl.n	8018dfe <_dtoa_r+0x4ae>
 8018df2:	ed90 6b00 	vldr	d6, [r0]
 8018df6:	3201      	adds	r2, #1
 8018df8:	2401      	movs	r4, #1
 8018dfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018dfe:	1049      	asrs	r1, r1, #1
 8018e00:	3008      	adds	r0, #8
 8018e02:	e7ed      	b.n	8018de0 <_dtoa_r+0x490>
 8018e04:	2202      	movs	r2, #2
 8018e06:	e738      	b.n	8018c7a <_dtoa_r+0x32a>
 8018e08:	f8cd 8010 	str.w	r8, [sp, #16]
 8018e0c:	4654      	mov	r4, sl
 8018e0e:	e754      	b.n	8018cba <_dtoa_r+0x36a>
 8018e10:	4a54      	ldr	r2, [pc, #336]	@ (8018f64 <_dtoa_r+0x614>)
 8018e12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018e16:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018e1a:	9a08      	ldr	r2, [sp, #32]
 8018e1c:	ec41 0b17 	vmov	d7, r0, r1
 8018e20:	443c      	add	r4, r7
 8018e22:	b34a      	cbz	r2, 8018e78 <_dtoa_r+0x528>
 8018e24:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018e28:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8018e2c:	463e      	mov	r6, r7
 8018e2e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018e32:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018e36:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018e3a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018e3e:	ee14 2a90 	vmov	r2, s9
 8018e42:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018e46:	3230      	adds	r2, #48	@ 0x30
 8018e48:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018e4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e54:	f806 2b01 	strb.w	r2, [r6], #1
 8018e58:	d438      	bmi.n	8018ecc <_dtoa_r+0x57c>
 8018e5a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018e5e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e66:	d462      	bmi.n	8018f2e <_dtoa_r+0x5de>
 8018e68:	42a6      	cmp	r6, r4
 8018e6a:	f43f af4d 	beq.w	8018d08 <_dtoa_r+0x3b8>
 8018e6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018e72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018e76:	e7e0      	b.n	8018e3a <_dtoa_r+0x4ea>
 8018e78:	4621      	mov	r1, r4
 8018e7a:	463e      	mov	r6, r7
 8018e7c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018e80:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018e84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018e88:	ee14 2a90 	vmov	r2, s9
 8018e8c:	3230      	adds	r2, #48	@ 0x30
 8018e8e:	f806 2b01 	strb.w	r2, [r6], #1
 8018e92:	42a6      	cmp	r6, r4
 8018e94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018e98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018e9c:	d119      	bne.n	8018ed2 <_dtoa_r+0x582>
 8018e9e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018ea2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018ea6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eae:	dc3e      	bgt.n	8018f2e <_dtoa_r+0x5de>
 8018eb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018eb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ebc:	f57f af24 	bpl.w	8018d08 <_dtoa_r+0x3b8>
 8018ec0:	460e      	mov	r6, r1
 8018ec2:	3901      	subs	r1, #1
 8018ec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ec8:	2b30      	cmp	r3, #48	@ 0x30
 8018eca:	d0f9      	beq.n	8018ec0 <_dtoa_r+0x570>
 8018ecc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018ed0:	e758      	b.n	8018d84 <_dtoa_r+0x434>
 8018ed2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018ed6:	e7d5      	b.n	8018e84 <_dtoa_r+0x534>
 8018ed8:	d10b      	bne.n	8018ef2 <_dtoa_r+0x5a2>
 8018eda:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018ede:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018ee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eee:	f2c0 8161 	blt.w	80191b4 <_dtoa_r+0x864>
 8018ef2:	2400      	movs	r4, #0
 8018ef4:	4625      	mov	r5, r4
 8018ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ef8:	43db      	mvns	r3, r3
 8018efa:	9304      	str	r3, [sp, #16]
 8018efc:	463e      	mov	r6, r7
 8018efe:	f04f 0800 	mov.w	r8, #0
 8018f02:	4621      	mov	r1, r4
 8018f04:	4648      	mov	r0, r9
 8018f06:	f000 fbb9 	bl	801967c <_Bfree>
 8018f0a:	2d00      	cmp	r5, #0
 8018f0c:	d0de      	beq.n	8018ecc <_dtoa_r+0x57c>
 8018f0e:	f1b8 0f00 	cmp.w	r8, #0
 8018f12:	d005      	beq.n	8018f20 <_dtoa_r+0x5d0>
 8018f14:	45a8      	cmp	r8, r5
 8018f16:	d003      	beq.n	8018f20 <_dtoa_r+0x5d0>
 8018f18:	4641      	mov	r1, r8
 8018f1a:	4648      	mov	r0, r9
 8018f1c:	f000 fbae 	bl	801967c <_Bfree>
 8018f20:	4629      	mov	r1, r5
 8018f22:	4648      	mov	r0, r9
 8018f24:	f000 fbaa 	bl	801967c <_Bfree>
 8018f28:	e7d0      	b.n	8018ecc <_dtoa_r+0x57c>
 8018f2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8018f2e:	4633      	mov	r3, r6
 8018f30:	461e      	mov	r6, r3
 8018f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018f36:	2a39      	cmp	r2, #57	@ 0x39
 8018f38:	d106      	bne.n	8018f48 <_dtoa_r+0x5f8>
 8018f3a:	429f      	cmp	r7, r3
 8018f3c:	d1f8      	bne.n	8018f30 <_dtoa_r+0x5e0>
 8018f3e:	9a04      	ldr	r2, [sp, #16]
 8018f40:	3201      	adds	r2, #1
 8018f42:	9204      	str	r2, [sp, #16]
 8018f44:	2230      	movs	r2, #48	@ 0x30
 8018f46:	703a      	strb	r2, [r7, #0]
 8018f48:	781a      	ldrb	r2, [r3, #0]
 8018f4a:	3201      	adds	r2, #1
 8018f4c:	701a      	strb	r2, [r3, #0]
 8018f4e:	e7bd      	b.n	8018ecc <_dtoa_r+0x57c>
 8018f50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018f54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f5c:	f47f aeef 	bne.w	8018d3e <_dtoa_r+0x3ee>
 8018f60:	e710      	b.n	8018d84 <_dtoa_r+0x434>
 8018f62:	bf00      	nop
 8018f64:	0801e070 	.word	0x0801e070
 8018f68:	0801e048 	.word	0x0801e048
 8018f6c:	9908      	ldr	r1, [sp, #32]
 8018f6e:	2900      	cmp	r1, #0
 8018f70:	f000 80e3 	beq.w	801913a <_dtoa_r+0x7ea>
 8018f74:	9907      	ldr	r1, [sp, #28]
 8018f76:	2901      	cmp	r1, #1
 8018f78:	f300 80c8 	bgt.w	801910c <_dtoa_r+0x7bc>
 8018f7c:	2d00      	cmp	r5, #0
 8018f7e:	f000 80c1 	beq.w	8019104 <_dtoa_r+0x7b4>
 8018f82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018f86:	9e05      	ldr	r6, [sp, #20]
 8018f88:	461c      	mov	r4, r3
 8018f8a:	9304      	str	r3, [sp, #16]
 8018f8c:	9b05      	ldr	r3, [sp, #20]
 8018f8e:	4413      	add	r3, r2
 8018f90:	9305      	str	r3, [sp, #20]
 8018f92:	9b06      	ldr	r3, [sp, #24]
 8018f94:	2101      	movs	r1, #1
 8018f96:	4413      	add	r3, r2
 8018f98:	4648      	mov	r0, r9
 8018f9a:	9306      	str	r3, [sp, #24]
 8018f9c:	f000 fc22 	bl	80197e4 <__i2b>
 8018fa0:	9b04      	ldr	r3, [sp, #16]
 8018fa2:	4605      	mov	r5, r0
 8018fa4:	b166      	cbz	r6, 8018fc0 <_dtoa_r+0x670>
 8018fa6:	9a06      	ldr	r2, [sp, #24]
 8018fa8:	2a00      	cmp	r2, #0
 8018faa:	dd09      	ble.n	8018fc0 <_dtoa_r+0x670>
 8018fac:	42b2      	cmp	r2, r6
 8018fae:	9905      	ldr	r1, [sp, #20]
 8018fb0:	bfa8      	it	ge
 8018fb2:	4632      	movge	r2, r6
 8018fb4:	1a89      	subs	r1, r1, r2
 8018fb6:	9105      	str	r1, [sp, #20]
 8018fb8:	9906      	ldr	r1, [sp, #24]
 8018fba:	1ab6      	subs	r6, r6, r2
 8018fbc:	1a8a      	subs	r2, r1, r2
 8018fbe:	9206      	str	r2, [sp, #24]
 8018fc0:	b1fb      	cbz	r3, 8019002 <_dtoa_r+0x6b2>
 8018fc2:	9a08      	ldr	r2, [sp, #32]
 8018fc4:	2a00      	cmp	r2, #0
 8018fc6:	f000 80bc 	beq.w	8019142 <_dtoa_r+0x7f2>
 8018fca:	b19c      	cbz	r4, 8018ff4 <_dtoa_r+0x6a4>
 8018fcc:	4629      	mov	r1, r5
 8018fce:	4622      	mov	r2, r4
 8018fd0:	4648      	mov	r0, r9
 8018fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018fd4:	f000 fcc6 	bl	8019964 <__pow5mult>
 8018fd8:	9a01      	ldr	r2, [sp, #4]
 8018fda:	4601      	mov	r1, r0
 8018fdc:	4605      	mov	r5, r0
 8018fde:	4648      	mov	r0, r9
 8018fe0:	f000 fc16 	bl	8019810 <__multiply>
 8018fe4:	9901      	ldr	r1, [sp, #4]
 8018fe6:	9004      	str	r0, [sp, #16]
 8018fe8:	4648      	mov	r0, r9
 8018fea:	f000 fb47 	bl	801967c <_Bfree>
 8018fee:	9a04      	ldr	r2, [sp, #16]
 8018ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ff2:	9201      	str	r2, [sp, #4]
 8018ff4:	1b1a      	subs	r2, r3, r4
 8018ff6:	d004      	beq.n	8019002 <_dtoa_r+0x6b2>
 8018ff8:	9901      	ldr	r1, [sp, #4]
 8018ffa:	4648      	mov	r0, r9
 8018ffc:	f000 fcb2 	bl	8019964 <__pow5mult>
 8019000:	9001      	str	r0, [sp, #4]
 8019002:	2101      	movs	r1, #1
 8019004:	4648      	mov	r0, r9
 8019006:	f000 fbed 	bl	80197e4 <__i2b>
 801900a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801900c:	4604      	mov	r4, r0
 801900e:	2b00      	cmp	r3, #0
 8019010:	f000 81d0 	beq.w	80193b4 <_dtoa_r+0xa64>
 8019014:	461a      	mov	r2, r3
 8019016:	4601      	mov	r1, r0
 8019018:	4648      	mov	r0, r9
 801901a:	f000 fca3 	bl	8019964 <__pow5mult>
 801901e:	9b07      	ldr	r3, [sp, #28]
 8019020:	2b01      	cmp	r3, #1
 8019022:	4604      	mov	r4, r0
 8019024:	f300 8095 	bgt.w	8019152 <_dtoa_r+0x802>
 8019028:	9b02      	ldr	r3, [sp, #8]
 801902a:	2b00      	cmp	r3, #0
 801902c:	f040 808b 	bne.w	8019146 <_dtoa_r+0x7f6>
 8019030:	9b03      	ldr	r3, [sp, #12]
 8019032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019036:	2a00      	cmp	r2, #0
 8019038:	f040 8087 	bne.w	801914a <_dtoa_r+0x7fa>
 801903c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019040:	0d12      	lsrs	r2, r2, #20
 8019042:	0512      	lsls	r2, r2, #20
 8019044:	2a00      	cmp	r2, #0
 8019046:	f000 8082 	beq.w	801914e <_dtoa_r+0x7fe>
 801904a:	9b05      	ldr	r3, [sp, #20]
 801904c:	3301      	adds	r3, #1
 801904e:	9305      	str	r3, [sp, #20]
 8019050:	9b06      	ldr	r3, [sp, #24]
 8019052:	3301      	adds	r3, #1
 8019054:	9306      	str	r3, [sp, #24]
 8019056:	2301      	movs	r3, #1
 8019058:	930b      	str	r3, [sp, #44]	@ 0x2c
 801905a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801905c:	2b00      	cmp	r3, #0
 801905e:	f000 81af 	beq.w	80193c0 <_dtoa_r+0xa70>
 8019062:	6922      	ldr	r2, [r4, #16]
 8019064:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019068:	6910      	ldr	r0, [r2, #16]
 801906a:	f000 fb6f 	bl	801974c <__hi0bits>
 801906e:	f1c0 0020 	rsb	r0, r0, #32
 8019072:	9b06      	ldr	r3, [sp, #24]
 8019074:	4418      	add	r0, r3
 8019076:	f010 001f 	ands.w	r0, r0, #31
 801907a:	d076      	beq.n	801916a <_dtoa_r+0x81a>
 801907c:	f1c0 0220 	rsb	r2, r0, #32
 8019080:	2a04      	cmp	r2, #4
 8019082:	dd69      	ble.n	8019158 <_dtoa_r+0x808>
 8019084:	9b05      	ldr	r3, [sp, #20]
 8019086:	f1c0 001c 	rsb	r0, r0, #28
 801908a:	4403      	add	r3, r0
 801908c:	9305      	str	r3, [sp, #20]
 801908e:	9b06      	ldr	r3, [sp, #24]
 8019090:	4406      	add	r6, r0
 8019092:	4403      	add	r3, r0
 8019094:	9306      	str	r3, [sp, #24]
 8019096:	9b05      	ldr	r3, [sp, #20]
 8019098:	2b00      	cmp	r3, #0
 801909a:	dd05      	ble.n	80190a8 <_dtoa_r+0x758>
 801909c:	9901      	ldr	r1, [sp, #4]
 801909e:	461a      	mov	r2, r3
 80190a0:	4648      	mov	r0, r9
 80190a2:	f000 fcb9 	bl	8019a18 <__lshift>
 80190a6:	9001      	str	r0, [sp, #4]
 80190a8:	9b06      	ldr	r3, [sp, #24]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	dd05      	ble.n	80190ba <_dtoa_r+0x76a>
 80190ae:	4621      	mov	r1, r4
 80190b0:	461a      	mov	r2, r3
 80190b2:	4648      	mov	r0, r9
 80190b4:	f000 fcb0 	bl	8019a18 <__lshift>
 80190b8:	4604      	mov	r4, r0
 80190ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d056      	beq.n	801916e <_dtoa_r+0x81e>
 80190c0:	9801      	ldr	r0, [sp, #4]
 80190c2:	4621      	mov	r1, r4
 80190c4:	f000 fd14 	bl	8019af0 <__mcmp>
 80190c8:	2800      	cmp	r0, #0
 80190ca:	da50      	bge.n	801916e <_dtoa_r+0x81e>
 80190cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80190d0:	9304      	str	r3, [sp, #16]
 80190d2:	9901      	ldr	r1, [sp, #4]
 80190d4:	2300      	movs	r3, #0
 80190d6:	220a      	movs	r2, #10
 80190d8:	4648      	mov	r0, r9
 80190da:	f000 faf1 	bl	80196c0 <__multadd>
 80190de:	9b08      	ldr	r3, [sp, #32]
 80190e0:	9001      	str	r0, [sp, #4]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f000 816e 	beq.w	80193c4 <_dtoa_r+0xa74>
 80190e8:	4629      	mov	r1, r5
 80190ea:	2300      	movs	r3, #0
 80190ec:	220a      	movs	r2, #10
 80190ee:	4648      	mov	r0, r9
 80190f0:	f000 fae6 	bl	80196c0 <__multadd>
 80190f4:	f1bb 0f00 	cmp.w	fp, #0
 80190f8:	4605      	mov	r5, r0
 80190fa:	dc64      	bgt.n	80191c6 <_dtoa_r+0x876>
 80190fc:	9b07      	ldr	r3, [sp, #28]
 80190fe:	2b02      	cmp	r3, #2
 8019100:	dc3e      	bgt.n	8019180 <_dtoa_r+0x830>
 8019102:	e060      	b.n	80191c6 <_dtoa_r+0x876>
 8019104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019106:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801910a:	e73c      	b.n	8018f86 <_dtoa_r+0x636>
 801910c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019110:	42a3      	cmp	r3, r4
 8019112:	bfbf      	itttt	lt
 8019114:	1ae2      	sublt	r2, r4, r3
 8019116:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019118:	189b      	addlt	r3, r3, r2
 801911a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801911c:	bfae      	itee	ge
 801911e:	1b1c      	subge	r4, r3, r4
 8019120:	4623      	movlt	r3, r4
 8019122:	2400      	movlt	r4, #0
 8019124:	f1ba 0f00 	cmp.w	sl, #0
 8019128:	bfb5      	itete	lt
 801912a:	9a05      	ldrlt	r2, [sp, #20]
 801912c:	9e05      	ldrge	r6, [sp, #20]
 801912e:	eba2 060a 	sublt.w	r6, r2, sl
 8019132:	4652      	movge	r2, sl
 8019134:	bfb8      	it	lt
 8019136:	2200      	movlt	r2, #0
 8019138:	e727      	b.n	8018f8a <_dtoa_r+0x63a>
 801913a:	9e05      	ldr	r6, [sp, #20]
 801913c:	9d08      	ldr	r5, [sp, #32]
 801913e:	461c      	mov	r4, r3
 8019140:	e730      	b.n	8018fa4 <_dtoa_r+0x654>
 8019142:	461a      	mov	r2, r3
 8019144:	e758      	b.n	8018ff8 <_dtoa_r+0x6a8>
 8019146:	2300      	movs	r3, #0
 8019148:	e786      	b.n	8019058 <_dtoa_r+0x708>
 801914a:	9b02      	ldr	r3, [sp, #8]
 801914c:	e784      	b.n	8019058 <_dtoa_r+0x708>
 801914e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019150:	e783      	b.n	801905a <_dtoa_r+0x70a>
 8019152:	2300      	movs	r3, #0
 8019154:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019156:	e784      	b.n	8019062 <_dtoa_r+0x712>
 8019158:	d09d      	beq.n	8019096 <_dtoa_r+0x746>
 801915a:	9b05      	ldr	r3, [sp, #20]
 801915c:	321c      	adds	r2, #28
 801915e:	4413      	add	r3, r2
 8019160:	9305      	str	r3, [sp, #20]
 8019162:	9b06      	ldr	r3, [sp, #24]
 8019164:	4416      	add	r6, r2
 8019166:	4413      	add	r3, r2
 8019168:	e794      	b.n	8019094 <_dtoa_r+0x744>
 801916a:	4602      	mov	r2, r0
 801916c:	e7f5      	b.n	801915a <_dtoa_r+0x80a>
 801916e:	f1ba 0f00 	cmp.w	sl, #0
 8019172:	f8cd 8010 	str.w	r8, [sp, #16]
 8019176:	46d3      	mov	fp, sl
 8019178:	dc21      	bgt.n	80191be <_dtoa_r+0x86e>
 801917a:	9b07      	ldr	r3, [sp, #28]
 801917c:	2b02      	cmp	r3, #2
 801917e:	dd1e      	ble.n	80191be <_dtoa_r+0x86e>
 8019180:	f1bb 0f00 	cmp.w	fp, #0
 8019184:	f47f aeb7 	bne.w	8018ef6 <_dtoa_r+0x5a6>
 8019188:	4621      	mov	r1, r4
 801918a:	465b      	mov	r3, fp
 801918c:	2205      	movs	r2, #5
 801918e:	4648      	mov	r0, r9
 8019190:	f000 fa96 	bl	80196c0 <__multadd>
 8019194:	4601      	mov	r1, r0
 8019196:	4604      	mov	r4, r0
 8019198:	9801      	ldr	r0, [sp, #4]
 801919a:	f000 fca9 	bl	8019af0 <__mcmp>
 801919e:	2800      	cmp	r0, #0
 80191a0:	f77f aea9 	ble.w	8018ef6 <_dtoa_r+0x5a6>
 80191a4:	463e      	mov	r6, r7
 80191a6:	2331      	movs	r3, #49	@ 0x31
 80191a8:	f806 3b01 	strb.w	r3, [r6], #1
 80191ac:	9b04      	ldr	r3, [sp, #16]
 80191ae:	3301      	adds	r3, #1
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	e6a4      	b.n	8018efe <_dtoa_r+0x5ae>
 80191b4:	f8cd 8010 	str.w	r8, [sp, #16]
 80191b8:	4654      	mov	r4, sl
 80191ba:	4625      	mov	r5, r4
 80191bc:	e7f2      	b.n	80191a4 <_dtoa_r+0x854>
 80191be:	9b08      	ldr	r3, [sp, #32]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	f000 8103 	beq.w	80193cc <_dtoa_r+0xa7c>
 80191c6:	2e00      	cmp	r6, #0
 80191c8:	dd05      	ble.n	80191d6 <_dtoa_r+0x886>
 80191ca:	4629      	mov	r1, r5
 80191cc:	4632      	mov	r2, r6
 80191ce:	4648      	mov	r0, r9
 80191d0:	f000 fc22 	bl	8019a18 <__lshift>
 80191d4:	4605      	mov	r5, r0
 80191d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d058      	beq.n	801928e <_dtoa_r+0x93e>
 80191dc:	6869      	ldr	r1, [r5, #4]
 80191de:	4648      	mov	r0, r9
 80191e0:	f000 fa0c 	bl	80195fc <_Balloc>
 80191e4:	4606      	mov	r6, r0
 80191e6:	b928      	cbnz	r0, 80191f4 <_dtoa_r+0x8a4>
 80191e8:	4b82      	ldr	r3, [pc, #520]	@ (80193f4 <_dtoa_r+0xaa4>)
 80191ea:	4602      	mov	r2, r0
 80191ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80191f0:	f7ff bbc7 	b.w	8018982 <_dtoa_r+0x32>
 80191f4:	692a      	ldr	r2, [r5, #16]
 80191f6:	3202      	adds	r2, #2
 80191f8:	0092      	lsls	r2, r2, #2
 80191fa:	f105 010c 	add.w	r1, r5, #12
 80191fe:	300c      	adds	r0, #12
 8019200:	f7ff faef 	bl	80187e2 <memcpy>
 8019204:	2201      	movs	r2, #1
 8019206:	4631      	mov	r1, r6
 8019208:	4648      	mov	r0, r9
 801920a:	f000 fc05 	bl	8019a18 <__lshift>
 801920e:	1c7b      	adds	r3, r7, #1
 8019210:	9305      	str	r3, [sp, #20]
 8019212:	eb07 030b 	add.w	r3, r7, fp
 8019216:	9309      	str	r3, [sp, #36]	@ 0x24
 8019218:	9b02      	ldr	r3, [sp, #8]
 801921a:	f003 0301 	and.w	r3, r3, #1
 801921e:	46a8      	mov	r8, r5
 8019220:	9308      	str	r3, [sp, #32]
 8019222:	4605      	mov	r5, r0
 8019224:	9b05      	ldr	r3, [sp, #20]
 8019226:	9801      	ldr	r0, [sp, #4]
 8019228:	4621      	mov	r1, r4
 801922a:	f103 3bff 	add.w	fp, r3, #4294967295
 801922e:	f7ff fb05 	bl	801883c <quorem>
 8019232:	4641      	mov	r1, r8
 8019234:	9002      	str	r0, [sp, #8]
 8019236:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801923a:	9801      	ldr	r0, [sp, #4]
 801923c:	f000 fc58 	bl	8019af0 <__mcmp>
 8019240:	462a      	mov	r2, r5
 8019242:	9006      	str	r0, [sp, #24]
 8019244:	4621      	mov	r1, r4
 8019246:	4648      	mov	r0, r9
 8019248:	f000 fc6e 	bl	8019b28 <__mdiff>
 801924c:	68c2      	ldr	r2, [r0, #12]
 801924e:	4606      	mov	r6, r0
 8019250:	b9fa      	cbnz	r2, 8019292 <_dtoa_r+0x942>
 8019252:	4601      	mov	r1, r0
 8019254:	9801      	ldr	r0, [sp, #4]
 8019256:	f000 fc4b 	bl	8019af0 <__mcmp>
 801925a:	4602      	mov	r2, r0
 801925c:	4631      	mov	r1, r6
 801925e:	4648      	mov	r0, r9
 8019260:	920a      	str	r2, [sp, #40]	@ 0x28
 8019262:	f000 fa0b 	bl	801967c <_Bfree>
 8019266:	9b07      	ldr	r3, [sp, #28]
 8019268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801926a:	9e05      	ldr	r6, [sp, #20]
 801926c:	ea43 0102 	orr.w	r1, r3, r2
 8019270:	9b08      	ldr	r3, [sp, #32]
 8019272:	4319      	orrs	r1, r3
 8019274:	d10f      	bne.n	8019296 <_dtoa_r+0x946>
 8019276:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801927a:	d028      	beq.n	80192ce <_dtoa_r+0x97e>
 801927c:	9b06      	ldr	r3, [sp, #24]
 801927e:	2b00      	cmp	r3, #0
 8019280:	dd02      	ble.n	8019288 <_dtoa_r+0x938>
 8019282:	9b02      	ldr	r3, [sp, #8]
 8019284:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019288:	f88b a000 	strb.w	sl, [fp]
 801928c:	e639      	b.n	8018f02 <_dtoa_r+0x5b2>
 801928e:	4628      	mov	r0, r5
 8019290:	e7bd      	b.n	801920e <_dtoa_r+0x8be>
 8019292:	2201      	movs	r2, #1
 8019294:	e7e2      	b.n	801925c <_dtoa_r+0x90c>
 8019296:	9b06      	ldr	r3, [sp, #24]
 8019298:	2b00      	cmp	r3, #0
 801929a:	db04      	blt.n	80192a6 <_dtoa_r+0x956>
 801929c:	9907      	ldr	r1, [sp, #28]
 801929e:	430b      	orrs	r3, r1
 80192a0:	9908      	ldr	r1, [sp, #32]
 80192a2:	430b      	orrs	r3, r1
 80192a4:	d120      	bne.n	80192e8 <_dtoa_r+0x998>
 80192a6:	2a00      	cmp	r2, #0
 80192a8:	ddee      	ble.n	8019288 <_dtoa_r+0x938>
 80192aa:	9901      	ldr	r1, [sp, #4]
 80192ac:	2201      	movs	r2, #1
 80192ae:	4648      	mov	r0, r9
 80192b0:	f000 fbb2 	bl	8019a18 <__lshift>
 80192b4:	4621      	mov	r1, r4
 80192b6:	9001      	str	r0, [sp, #4]
 80192b8:	f000 fc1a 	bl	8019af0 <__mcmp>
 80192bc:	2800      	cmp	r0, #0
 80192be:	dc03      	bgt.n	80192c8 <_dtoa_r+0x978>
 80192c0:	d1e2      	bne.n	8019288 <_dtoa_r+0x938>
 80192c2:	f01a 0f01 	tst.w	sl, #1
 80192c6:	d0df      	beq.n	8019288 <_dtoa_r+0x938>
 80192c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192cc:	d1d9      	bne.n	8019282 <_dtoa_r+0x932>
 80192ce:	2339      	movs	r3, #57	@ 0x39
 80192d0:	f88b 3000 	strb.w	r3, [fp]
 80192d4:	4633      	mov	r3, r6
 80192d6:	461e      	mov	r6, r3
 80192d8:	3b01      	subs	r3, #1
 80192da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80192de:	2a39      	cmp	r2, #57	@ 0x39
 80192e0:	d053      	beq.n	801938a <_dtoa_r+0xa3a>
 80192e2:	3201      	adds	r2, #1
 80192e4:	701a      	strb	r2, [r3, #0]
 80192e6:	e60c      	b.n	8018f02 <_dtoa_r+0x5b2>
 80192e8:	2a00      	cmp	r2, #0
 80192ea:	dd07      	ble.n	80192fc <_dtoa_r+0x9ac>
 80192ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192f0:	d0ed      	beq.n	80192ce <_dtoa_r+0x97e>
 80192f2:	f10a 0301 	add.w	r3, sl, #1
 80192f6:	f88b 3000 	strb.w	r3, [fp]
 80192fa:	e602      	b.n	8018f02 <_dtoa_r+0x5b2>
 80192fc:	9b05      	ldr	r3, [sp, #20]
 80192fe:	9a05      	ldr	r2, [sp, #20]
 8019300:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019306:	4293      	cmp	r3, r2
 8019308:	d029      	beq.n	801935e <_dtoa_r+0xa0e>
 801930a:	9901      	ldr	r1, [sp, #4]
 801930c:	2300      	movs	r3, #0
 801930e:	220a      	movs	r2, #10
 8019310:	4648      	mov	r0, r9
 8019312:	f000 f9d5 	bl	80196c0 <__multadd>
 8019316:	45a8      	cmp	r8, r5
 8019318:	9001      	str	r0, [sp, #4]
 801931a:	f04f 0300 	mov.w	r3, #0
 801931e:	f04f 020a 	mov.w	r2, #10
 8019322:	4641      	mov	r1, r8
 8019324:	4648      	mov	r0, r9
 8019326:	d107      	bne.n	8019338 <_dtoa_r+0x9e8>
 8019328:	f000 f9ca 	bl	80196c0 <__multadd>
 801932c:	4680      	mov	r8, r0
 801932e:	4605      	mov	r5, r0
 8019330:	9b05      	ldr	r3, [sp, #20]
 8019332:	3301      	adds	r3, #1
 8019334:	9305      	str	r3, [sp, #20]
 8019336:	e775      	b.n	8019224 <_dtoa_r+0x8d4>
 8019338:	f000 f9c2 	bl	80196c0 <__multadd>
 801933c:	4629      	mov	r1, r5
 801933e:	4680      	mov	r8, r0
 8019340:	2300      	movs	r3, #0
 8019342:	220a      	movs	r2, #10
 8019344:	4648      	mov	r0, r9
 8019346:	f000 f9bb 	bl	80196c0 <__multadd>
 801934a:	4605      	mov	r5, r0
 801934c:	e7f0      	b.n	8019330 <_dtoa_r+0x9e0>
 801934e:	f1bb 0f00 	cmp.w	fp, #0
 8019352:	bfcc      	ite	gt
 8019354:	465e      	movgt	r6, fp
 8019356:	2601      	movle	r6, #1
 8019358:	443e      	add	r6, r7
 801935a:	f04f 0800 	mov.w	r8, #0
 801935e:	9901      	ldr	r1, [sp, #4]
 8019360:	2201      	movs	r2, #1
 8019362:	4648      	mov	r0, r9
 8019364:	f000 fb58 	bl	8019a18 <__lshift>
 8019368:	4621      	mov	r1, r4
 801936a:	9001      	str	r0, [sp, #4]
 801936c:	f000 fbc0 	bl	8019af0 <__mcmp>
 8019370:	2800      	cmp	r0, #0
 8019372:	dcaf      	bgt.n	80192d4 <_dtoa_r+0x984>
 8019374:	d102      	bne.n	801937c <_dtoa_r+0xa2c>
 8019376:	f01a 0f01 	tst.w	sl, #1
 801937a:	d1ab      	bne.n	80192d4 <_dtoa_r+0x984>
 801937c:	4633      	mov	r3, r6
 801937e:	461e      	mov	r6, r3
 8019380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019384:	2a30      	cmp	r2, #48	@ 0x30
 8019386:	d0fa      	beq.n	801937e <_dtoa_r+0xa2e>
 8019388:	e5bb      	b.n	8018f02 <_dtoa_r+0x5b2>
 801938a:	429f      	cmp	r7, r3
 801938c:	d1a3      	bne.n	80192d6 <_dtoa_r+0x986>
 801938e:	9b04      	ldr	r3, [sp, #16]
 8019390:	3301      	adds	r3, #1
 8019392:	9304      	str	r3, [sp, #16]
 8019394:	2331      	movs	r3, #49	@ 0x31
 8019396:	703b      	strb	r3, [r7, #0]
 8019398:	e5b3      	b.n	8018f02 <_dtoa_r+0x5b2>
 801939a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801939c:	4f16      	ldr	r7, [pc, #88]	@ (80193f8 <_dtoa_r+0xaa8>)
 801939e:	b11b      	cbz	r3, 80193a8 <_dtoa_r+0xa58>
 80193a0:	f107 0308 	add.w	r3, r7, #8
 80193a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80193a6:	6013      	str	r3, [r2, #0]
 80193a8:	4638      	mov	r0, r7
 80193aa:	b011      	add	sp, #68	@ 0x44
 80193ac:	ecbd 8b02 	vpop	{d8}
 80193b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b4:	9b07      	ldr	r3, [sp, #28]
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	f77f ae36 	ble.w	8019028 <_dtoa_r+0x6d8>
 80193bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193c0:	2001      	movs	r0, #1
 80193c2:	e656      	b.n	8019072 <_dtoa_r+0x722>
 80193c4:	f1bb 0f00 	cmp.w	fp, #0
 80193c8:	f77f aed7 	ble.w	801917a <_dtoa_r+0x82a>
 80193cc:	463e      	mov	r6, r7
 80193ce:	9801      	ldr	r0, [sp, #4]
 80193d0:	4621      	mov	r1, r4
 80193d2:	f7ff fa33 	bl	801883c <quorem>
 80193d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80193da:	f806 ab01 	strb.w	sl, [r6], #1
 80193de:	1bf2      	subs	r2, r6, r7
 80193e0:	4593      	cmp	fp, r2
 80193e2:	ddb4      	ble.n	801934e <_dtoa_r+0x9fe>
 80193e4:	9901      	ldr	r1, [sp, #4]
 80193e6:	2300      	movs	r3, #0
 80193e8:	220a      	movs	r2, #10
 80193ea:	4648      	mov	r0, r9
 80193ec:	f000 f968 	bl	80196c0 <__multadd>
 80193f0:	9001      	str	r0, [sp, #4]
 80193f2:	e7ec      	b.n	80193ce <_dtoa_r+0xa7e>
 80193f4:	0801dfcf 	.word	0x0801dfcf
 80193f8:	0801df6a 	.word	0x0801df6a

080193fc <_free_r>:
 80193fc:	b538      	push	{r3, r4, r5, lr}
 80193fe:	4605      	mov	r5, r0
 8019400:	2900      	cmp	r1, #0
 8019402:	d041      	beq.n	8019488 <_free_r+0x8c>
 8019404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019408:	1f0c      	subs	r4, r1, #4
 801940a:	2b00      	cmp	r3, #0
 801940c:	bfb8      	it	lt
 801940e:	18e4      	addlt	r4, r4, r3
 8019410:	f000 f8e8 	bl	80195e4 <__malloc_lock>
 8019414:	4a1d      	ldr	r2, [pc, #116]	@ (801948c <_free_r+0x90>)
 8019416:	6813      	ldr	r3, [r2, #0]
 8019418:	b933      	cbnz	r3, 8019428 <_free_r+0x2c>
 801941a:	6063      	str	r3, [r4, #4]
 801941c:	6014      	str	r4, [r2, #0]
 801941e:	4628      	mov	r0, r5
 8019420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019424:	f000 b8e4 	b.w	80195f0 <__malloc_unlock>
 8019428:	42a3      	cmp	r3, r4
 801942a:	d908      	bls.n	801943e <_free_r+0x42>
 801942c:	6820      	ldr	r0, [r4, #0]
 801942e:	1821      	adds	r1, r4, r0
 8019430:	428b      	cmp	r3, r1
 8019432:	bf01      	itttt	eq
 8019434:	6819      	ldreq	r1, [r3, #0]
 8019436:	685b      	ldreq	r3, [r3, #4]
 8019438:	1809      	addeq	r1, r1, r0
 801943a:	6021      	streq	r1, [r4, #0]
 801943c:	e7ed      	b.n	801941a <_free_r+0x1e>
 801943e:	461a      	mov	r2, r3
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	b10b      	cbz	r3, 8019448 <_free_r+0x4c>
 8019444:	42a3      	cmp	r3, r4
 8019446:	d9fa      	bls.n	801943e <_free_r+0x42>
 8019448:	6811      	ldr	r1, [r2, #0]
 801944a:	1850      	adds	r0, r2, r1
 801944c:	42a0      	cmp	r0, r4
 801944e:	d10b      	bne.n	8019468 <_free_r+0x6c>
 8019450:	6820      	ldr	r0, [r4, #0]
 8019452:	4401      	add	r1, r0
 8019454:	1850      	adds	r0, r2, r1
 8019456:	4283      	cmp	r3, r0
 8019458:	6011      	str	r1, [r2, #0]
 801945a:	d1e0      	bne.n	801941e <_free_r+0x22>
 801945c:	6818      	ldr	r0, [r3, #0]
 801945e:	685b      	ldr	r3, [r3, #4]
 8019460:	6053      	str	r3, [r2, #4]
 8019462:	4408      	add	r0, r1
 8019464:	6010      	str	r0, [r2, #0]
 8019466:	e7da      	b.n	801941e <_free_r+0x22>
 8019468:	d902      	bls.n	8019470 <_free_r+0x74>
 801946a:	230c      	movs	r3, #12
 801946c:	602b      	str	r3, [r5, #0]
 801946e:	e7d6      	b.n	801941e <_free_r+0x22>
 8019470:	6820      	ldr	r0, [r4, #0]
 8019472:	1821      	adds	r1, r4, r0
 8019474:	428b      	cmp	r3, r1
 8019476:	bf04      	itt	eq
 8019478:	6819      	ldreq	r1, [r3, #0]
 801947a:	685b      	ldreq	r3, [r3, #4]
 801947c:	6063      	str	r3, [r4, #4]
 801947e:	bf04      	itt	eq
 8019480:	1809      	addeq	r1, r1, r0
 8019482:	6021      	streq	r1, [r4, #0]
 8019484:	6054      	str	r4, [r2, #4]
 8019486:	e7ca      	b.n	801941e <_free_r+0x22>
 8019488:	bd38      	pop	{r3, r4, r5, pc}
 801948a:	bf00      	nop
 801948c:	2000e36c 	.word	0x2000e36c

08019490 <malloc>:
 8019490:	4b02      	ldr	r3, [pc, #8]	@ (801949c <malloc+0xc>)
 8019492:	4601      	mov	r1, r0
 8019494:	6818      	ldr	r0, [r3, #0]
 8019496:	f000 b825 	b.w	80194e4 <_malloc_r>
 801949a:	bf00      	nop
 801949c:	20000028 	.word	0x20000028

080194a0 <sbrk_aligned>:
 80194a0:	b570      	push	{r4, r5, r6, lr}
 80194a2:	4e0f      	ldr	r6, [pc, #60]	@ (80194e0 <sbrk_aligned+0x40>)
 80194a4:	460c      	mov	r4, r1
 80194a6:	6831      	ldr	r1, [r6, #0]
 80194a8:	4605      	mov	r5, r0
 80194aa:	b911      	cbnz	r1, 80194b2 <sbrk_aligned+0x12>
 80194ac:	f001 f804 	bl	801a4b8 <_sbrk_r>
 80194b0:	6030      	str	r0, [r6, #0]
 80194b2:	4621      	mov	r1, r4
 80194b4:	4628      	mov	r0, r5
 80194b6:	f000 ffff 	bl	801a4b8 <_sbrk_r>
 80194ba:	1c43      	adds	r3, r0, #1
 80194bc:	d103      	bne.n	80194c6 <sbrk_aligned+0x26>
 80194be:	f04f 34ff 	mov.w	r4, #4294967295
 80194c2:	4620      	mov	r0, r4
 80194c4:	bd70      	pop	{r4, r5, r6, pc}
 80194c6:	1cc4      	adds	r4, r0, #3
 80194c8:	f024 0403 	bic.w	r4, r4, #3
 80194cc:	42a0      	cmp	r0, r4
 80194ce:	d0f8      	beq.n	80194c2 <sbrk_aligned+0x22>
 80194d0:	1a21      	subs	r1, r4, r0
 80194d2:	4628      	mov	r0, r5
 80194d4:	f000 fff0 	bl	801a4b8 <_sbrk_r>
 80194d8:	3001      	adds	r0, #1
 80194da:	d1f2      	bne.n	80194c2 <sbrk_aligned+0x22>
 80194dc:	e7ef      	b.n	80194be <sbrk_aligned+0x1e>
 80194de:	bf00      	nop
 80194e0:	2000e368 	.word	0x2000e368

080194e4 <_malloc_r>:
 80194e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194e8:	1ccd      	adds	r5, r1, #3
 80194ea:	f025 0503 	bic.w	r5, r5, #3
 80194ee:	3508      	adds	r5, #8
 80194f0:	2d0c      	cmp	r5, #12
 80194f2:	bf38      	it	cc
 80194f4:	250c      	movcc	r5, #12
 80194f6:	2d00      	cmp	r5, #0
 80194f8:	4606      	mov	r6, r0
 80194fa:	db01      	blt.n	8019500 <_malloc_r+0x1c>
 80194fc:	42a9      	cmp	r1, r5
 80194fe:	d904      	bls.n	801950a <_malloc_r+0x26>
 8019500:	230c      	movs	r3, #12
 8019502:	6033      	str	r3, [r6, #0]
 8019504:	2000      	movs	r0, #0
 8019506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801950a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80195e0 <_malloc_r+0xfc>
 801950e:	f000 f869 	bl	80195e4 <__malloc_lock>
 8019512:	f8d8 3000 	ldr.w	r3, [r8]
 8019516:	461c      	mov	r4, r3
 8019518:	bb44      	cbnz	r4, 801956c <_malloc_r+0x88>
 801951a:	4629      	mov	r1, r5
 801951c:	4630      	mov	r0, r6
 801951e:	f7ff ffbf 	bl	80194a0 <sbrk_aligned>
 8019522:	1c43      	adds	r3, r0, #1
 8019524:	4604      	mov	r4, r0
 8019526:	d158      	bne.n	80195da <_malloc_r+0xf6>
 8019528:	f8d8 4000 	ldr.w	r4, [r8]
 801952c:	4627      	mov	r7, r4
 801952e:	2f00      	cmp	r7, #0
 8019530:	d143      	bne.n	80195ba <_malloc_r+0xd6>
 8019532:	2c00      	cmp	r4, #0
 8019534:	d04b      	beq.n	80195ce <_malloc_r+0xea>
 8019536:	6823      	ldr	r3, [r4, #0]
 8019538:	4639      	mov	r1, r7
 801953a:	4630      	mov	r0, r6
 801953c:	eb04 0903 	add.w	r9, r4, r3
 8019540:	f000 ffba 	bl	801a4b8 <_sbrk_r>
 8019544:	4581      	cmp	r9, r0
 8019546:	d142      	bne.n	80195ce <_malloc_r+0xea>
 8019548:	6821      	ldr	r1, [r4, #0]
 801954a:	1a6d      	subs	r5, r5, r1
 801954c:	4629      	mov	r1, r5
 801954e:	4630      	mov	r0, r6
 8019550:	f7ff ffa6 	bl	80194a0 <sbrk_aligned>
 8019554:	3001      	adds	r0, #1
 8019556:	d03a      	beq.n	80195ce <_malloc_r+0xea>
 8019558:	6823      	ldr	r3, [r4, #0]
 801955a:	442b      	add	r3, r5
 801955c:	6023      	str	r3, [r4, #0]
 801955e:	f8d8 3000 	ldr.w	r3, [r8]
 8019562:	685a      	ldr	r2, [r3, #4]
 8019564:	bb62      	cbnz	r2, 80195c0 <_malloc_r+0xdc>
 8019566:	f8c8 7000 	str.w	r7, [r8]
 801956a:	e00f      	b.n	801958c <_malloc_r+0xa8>
 801956c:	6822      	ldr	r2, [r4, #0]
 801956e:	1b52      	subs	r2, r2, r5
 8019570:	d420      	bmi.n	80195b4 <_malloc_r+0xd0>
 8019572:	2a0b      	cmp	r2, #11
 8019574:	d917      	bls.n	80195a6 <_malloc_r+0xc2>
 8019576:	1961      	adds	r1, r4, r5
 8019578:	42a3      	cmp	r3, r4
 801957a:	6025      	str	r5, [r4, #0]
 801957c:	bf18      	it	ne
 801957e:	6059      	strne	r1, [r3, #4]
 8019580:	6863      	ldr	r3, [r4, #4]
 8019582:	bf08      	it	eq
 8019584:	f8c8 1000 	streq.w	r1, [r8]
 8019588:	5162      	str	r2, [r4, r5]
 801958a:	604b      	str	r3, [r1, #4]
 801958c:	4630      	mov	r0, r6
 801958e:	f000 f82f 	bl	80195f0 <__malloc_unlock>
 8019592:	f104 000b 	add.w	r0, r4, #11
 8019596:	1d23      	adds	r3, r4, #4
 8019598:	f020 0007 	bic.w	r0, r0, #7
 801959c:	1ac2      	subs	r2, r0, r3
 801959e:	bf1c      	itt	ne
 80195a0:	1a1b      	subne	r3, r3, r0
 80195a2:	50a3      	strne	r3, [r4, r2]
 80195a4:	e7af      	b.n	8019506 <_malloc_r+0x22>
 80195a6:	6862      	ldr	r2, [r4, #4]
 80195a8:	42a3      	cmp	r3, r4
 80195aa:	bf0c      	ite	eq
 80195ac:	f8c8 2000 	streq.w	r2, [r8]
 80195b0:	605a      	strne	r2, [r3, #4]
 80195b2:	e7eb      	b.n	801958c <_malloc_r+0xa8>
 80195b4:	4623      	mov	r3, r4
 80195b6:	6864      	ldr	r4, [r4, #4]
 80195b8:	e7ae      	b.n	8019518 <_malloc_r+0x34>
 80195ba:	463c      	mov	r4, r7
 80195bc:	687f      	ldr	r7, [r7, #4]
 80195be:	e7b6      	b.n	801952e <_malloc_r+0x4a>
 80195c0:	461a      	mov	r2, r3
 80195c2:	685b      	ldr	r3, [r3, #4]
 80195c4:	42a3      	cmp	r3, r4
 80195c6:	d1fb      	bne.n	80195c0 <_malloc_r+0xdc>
 80195c8:	2300      	movs	r3, #0
 80195ca:	6053      	str	r3, [r2, #4]
 80195cc:	e7de      	b.n	801958c <_malloc_r+0xa8>
 80195ce:	230c      	movs	r3, #12
 80195d0:	6033      	str	r3, [r6, #0]
 80195d2:	4630      	mov	r0, r6
 80195d4:	f000 f80c 	bl	80195f0 <__malloc_unlock>
 80195d8:	e794      	b.n	8019504 <_malloc_r+0x20>
 80195da:	6005      	str	r5, [r0, #0]
 80195dc:	e7d6      	b.n	801958c <_malloc_r+0xa8>
 80195de:	bf00      	nop
 80195e0:	2000e36c 	.word	0x2000e36c

080195e4 <__malloc_lock>:
 80195e4:	4801      	ldr	r0, [pc, #4]	@ (80195ec <__malloc_lock+0x8>)
 80195e6:	f7ff b8f2 	b.w	80187ce <__retarget_lock_acquire_recursive>
 80195ea:	bf00      	nop
 80195ec:	2000e364 	.word	0x2000e364

080195f0 <__malloc_unlock>:
 80195f0:	4801      	ldr	r0, [pc, #4]	@ (80195f8 <__malloc_unlock+0x8>)
 80195f2:	f7ff b8ed 	b.w	80187d0 <__retarget_lock_release_recursive>
 80195f6:	bf00      	nop
 80195f8:	2000e364 	.word	0x2000e364

080195fc <_Balloc>:
 80195fc:	b570      	push	{r4, r5, r6, lr}
 80195fe:	69c6      	ldr	r6, [r0, #28]
 8019600:	4604      	mov	r4, r0
 8019602:	460d      	mov	r5, r1
 8019604:	b976      	cbnz	r6, 8019624 <_Balloc+0x28>
 8019606:	2010      	movs	r0, #16
 8019608:	f7ff ff42 	bl	8019490 <malloc>
 801960c:	4602      	mov	r2, r0
 801960e:	61e0      	str	r0, [r4, #28]
 8019610:	b920      	cbnz	r0, 801961c <_Balloc+0x20>
 8019612:	4b18      	ldr	r3, [pc, #96]	@ (8019674 <_Balloc+0x78>)
 8019614:	4818      	ldr	r0, [pc, #96]	@ (8019678 <_Balloc+0x7c>)
 8019616:	216b      	movs	r1, #107	@ 0x6b
 8019618:	f7ff f8f2 	bl	8018800 <__assert_func>
 801961c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019620:	6006      	str	r6, [r0, #0]
 8019622:	60c6      	str	r6, [r0, #12]
 8019624:	69e6      	ldr	r6, [r4, #28]
 8019626:	68f3      	ldr	r3, [r6, #12]
 8019628:	b183      	cbz	r3, 801964c <_Balloc+0x50>
 801962a:	69e3      	ldr	r3, [r4, #28]
 801962c:	68db      	ldr	r3, [r3, #12]
 801962e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019632:	b9b8      	cbnz	r0, 8019664 <_Balloc+0x68>
 8019634:	2101      	movs	r1, #1
 8019636:	fa01 f605 	lsl.w	r6, r1, r5
 801963a:	1d72      	adds	r2, r6, #5
 801963c:	0092      	lsls	r2, r2, #2
 801963e:	4620      	mov	r0, r4
 8019640:	f000 ff51 	bl	801a4e6 <_calloc_r>
 8019644:	b160      	cbz	r0, 8019660 <_Balloc+0x64>
 8019646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801964a:	e00e      	b.n	801966a <_Balloc+0x6e>
 801964c:	2221      	movs	r2, #33	@ 0x21
 801964e:	2104      	movs	r1, #4
 8019650:	4620      	mov	r0, r4
 8019652:	f000 ff48 	bl	801a4e6 <_calloc_r>
 8019656:	69e3      	ldr	r3, [r4, #28]
 8019658:	60f0      	str	r0, [r6, #12]
 801965a:	68db      	ldr	r3, [r3, #12]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e4      	bne.n	801962a <_Balloc+0x2e>
 8019660:	2000      	movs	r0, #0
 8019662:	bd70      	pop	{r4, r5, r6, pc}
 8019664:	6802      	ldr	r2, [r0, #0]
 8019666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801966a:	2300      	movs	r3, #0
 801966c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019670:	e7f7      	b.n	8019662 <_Balloc+0x66>
 8019672:	bf00      	nop
 8019674:	0801dd8a 	.word	0x0801dd8a
 8019678:	0801dfe0 	.word	0x0801dfe0

0801967c <_Bfree>:
 801967c:	b570      	push	{r4, r5, r6, lr}
 801967e:	69c6      	ldr	r6, [r0, #28]
 8019680:	4605      	mov	r5, r0
 8019682:	460c      	mov	r4, r1
 8019684:	b976      	cbnz	r6, 80196a4 <_Bfree+0x28>
 8019686:	2010      	movs	r0, #16
 8019688:	f7ff ff02 	bl	8019490 <malloc>
 801968c:	4602      	mov	r2, r0
 801968e:	61e8      	str	r0, [r5, #28]
 8019690:	b920      	cbnz	r0, 801969c <_Bfree+0x20>
 8019692:	4b09      	ldr	r3, [pc, #36]	@ (80196b8 <_Bfree+0x3c>)
 8019694:	4809      	ldr	r0, [pc, #36]	@ (80196bc <_Bfree+0x40>)
 8019696:	218f      	movs	r1, #143	@ 0x8f
 8019698:	f7ff f8b2 	bl	8018800 <__assert_func>
 801969c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80196a0:	6006      	str	r6, [r0, #0]
 80196a2:	60c6      	str	r6, [r0, #12]
 80196a4:	b13c      	cbz	r4, 80196b6 <_Bfree+0x3a>
 80196a6:	69eb      	ldr	r3, [r5, #28]
 80196a8:	6862      	ldr	r2, [r4, #4]
 80196aa:	68db      	ldr	r3, [r3, #12]
 80196ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80196b0:	6021      	str	r1, [r4, #0]
 80196b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80196b6:	bd70      	pop	{r4, r5, r6, pc}
 80196b8:	0801dd8a 	.word	0x0801dd8a
 80196bc:	0801dfe0 	.word	0x0801dfe0

080196c0 <__multadd>:
 80196c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196c4:	690d      	ldr	r5, [r1, #16]
 80196c6:	4607      	mov	r7, r0
 80196c8:	460c      	mov	r4, r1
 80196ca:	461e      	mov	r6, r3
 80196cc:	f101 0c14 	add.w	ip, r1, #20
 80196d0:	2000      	movs	r0, #0
 80196d2:	f8dc 3000 	ldr.w	r3, [ip]
 80196d6:	b299      	uxth	r1, r3
 80196d8:	fb02 6101 	mla	r1, r2, r1, r6
 80196dc:	0c1e      	lsrs	r6, r3, #16
 80196de:	0c0b      	lsrs	r3, r1, #16
 80196e0:	fb02 3306 	mla	r3, r2, r6, r3
 80196e4:	b289      	uxth	r1, r1
 80196e6:	3001      	adds	r0, #1
 80196e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80196ec:	4285      	cmp	r5, r0
 80196ee:	f84c 1b04 	str.w	r1, [ip], #4
 80196f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80196f6:	dcec      	bgt.n	80196d2 <__multadd+0x12>
 80196f8:	b30e      	cbz	r6, 801973e <__multadd+0x7e>
 80196fa:	68a3      	ldr	r3, [r4, #8]
 80196fc:	42ab      	cmp	r3, r5
 80196fe:	dc19      	bgt.n	8019734 <__multadd+0x74>
 8019700:	6861      	ldr	r1, [r4, #4]
 8019702:	4638      	mov	r0, r7
 8019704:	3101      	adds	r1, #1
 8019706:	f7ff ff79 	bl	80195fc <_Balloc>
 801970a:	4680      	mov	r8, r0
 801970c:	b928      	cbnz	r0, 801971a <__multadd+0x5a>
 801970e:	4602      	mov	r2, r0
 8019710:	4b0c      	ldr	r3, [pc, #48]	@ (8019744 <__multadd+0x84>)
 8019712:	480d      	ldr	r0, [pc, #52]	@ (8019748 <__multadd+0x88>)
 8019714:	21ba      	movs	r1, #186	@ 0xba
 8019716:	f7ff f873 	bl	8018800 <__assert_func>
 801971a:	6922      	ldr	r2, [r4, #16]
 801971c:	3202      	adds	r2, #2
 801971e:	f104 010c 	add.w	r1, r4, #12
 8019722:	0092      	lsls	r2, r2, #2
 8019724:	300c      	adds	r0, #12
 8019726:	f7ff f85c 	bl	80187e2 <memcpy>
 801972a:	4621      	mov	r1, r4
 801972c:	4638      	mov	r0, r7
 801972e:	f7ff ffa5 	bl	801967c <_Bfree>
 8019732:	4644      	mov	r4, r8
 8019734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019738:	3501      	adds	r5, #1
 801973a:	615e      	str	r6, [r3, #20]
 801973c:	6125      	str	r5, [r4, #16]
 801973e:	4620      	mov	r0, r4
 8019740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019744:	0801dfcf 	.word	0x0801dfcf
 8019748:	0801dfe0 	.word	0x0801dfe0

0801974c <__hi0bits>:
 801974c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019750:	4603      	mov	r3, r0
 8019752:	bf36      	itet	cc
 8019754:	0403      	lslcc	r3, r0, #16
 8019756:	2000      	movcs	r0, #0
 8019758:	2010      	movcc	r0, #16
 801975a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801975e:	bf3c      	itt	cc
 8019760:	021b      	lslcc	r3, r3, #8
 8019762:	3008      	addcc	r0, #8
 8019764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019768:	bf3c      	itt	cc
 801976a:	011b      	lslcc	r3, r3, #4
 801976c:	3004      	addcc	r0, #4
 801976e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019772:	bf3c      	itt	cc
 8019774:	009b      	lslcc	r3, r3, #2
 8019776:	3002      	addcc	r0, #2
 8019778:	2b00      	cmp	r3, #0
 801977a:	db05      	blt.n	8019788 <__hi0bits+0x3c>
 801977c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019780:	f100 0001 	add.w	r0, r0, #1
 8019784:	bf08      	it	eq
 8019786:	2020      	moveq	r0, #32
 8019788:	4770      	bx	lr

0801978a <__lo0bits>:
 801978a:	6803      	ldr	r3, [r0, #0]
 801978c:	4602      	mov	r2, r0
 801978e:	f013 0007 	ands.w	r0, r3, #7
 8019792:	d00b      	beq.n	80197ac <__lo0bits+0x22>
 8019794:	07d9      	lsls	r1, r3, #31
 8019796:	d421      	bmi.n	80197dc <__lo0bits+0x52>
 8019798:	0798      	lsls	r0, r3, #30
 801979a:	bf49      	itett	mi
 801979c:	085b      	lsrmi	r3, r3, #1
 801979e:	089b      	lsrpl	r3, r3, #2
 80197a0:	2001      	movmi	r0, #1
 80197a2:	6013      	strmi	r3, [r2, #0]
 80197a4:	bf5c      	itt	pl
 80197a6:	6013      	strpl	r3, [r2, #0]
 80197a8:	2002      	movpl	r0, #2
 80197aa:	4770      	bx	lr
 80197ac:	b299      	uxth	r1, r3
 80197ae:	b909      	cbnz	r1, 80197b4 <__lo0bits+0x2a>
 80197b0:	0c1b      	lsrs	r3, r3, #16
 80197b2:	2010      	movs	r0, #16
 80197b4:	b2d9      	uxtb	r1, r3
 80197b6:	b909      	cbnz	r1, 80197bc <__lo0bits+0x32>
 80197b8:	3008      	adds	r0, #8
 80197ba:	0a1b      	lsrs	r3, r3, #8
 80197bc:	0719      	lsls	r1, r3, #28
 80197be:	bf04      	itt	eq
 80197c0:	091b      	lsreq	r3, r3, #4
 80197c2:	3004      	addeq	r0, #4
 80197c4:	0799      	lsls	r1, r3, #30
 80197c6:	bf04      	itt	eq
 80197c8:	089b      	lsreq	r3, r3, #2
 80197ca:	3002      	addeq	r0, #2
 80197cc:	07d9      	lsls	r1, r3, #31
 80197ce:	d403      	bmi.n	80197d8 <__lo0bits+0x4e>
 80197d0:	085b      	lsrs	r3, r3, #1
 80197d2:	f100 0001 	add.w	r0, r0, #1
 80197d6:	d003      	beq.n	80197e0 <__lo0bits+0x56>
 80197d8:	6013      	str	r3, [r2, #0]
 80197da:	4770      	bx	lr
 80197dc:	2000      	movs	r0, #0
 80197de:	4770      	bx	lr
 80197e0:	2020      	movs	r0, #32
 80197e2:	4770      	bx	lr

080197e4 <__i2b>:
 80197e4:	b510      	push	{r4, lr}
 80197e6:	460c      	mov	r4, r1
 80197e8:	2101      	movs	r1, #1
 80197ea:	f7ff ff07 	bl	80195fc <_Balloc>
 80197ee:	4602      	mov	r2, r0
 80197f0:	b928      	cbnz	r0, 80197fe <__i2b+0x1a>
 80197f2:	4b05      	ldr	r3, [pc, #20]	@ (8019808 <__i2b+0x24>)
 80197f4:	4805      	ldr	r0, [pc, #20]	@ (801980c <__i2b+0x28>)
 80197f6:	f240 1145 	movw	r1, #325	@ 0x145
 80197fa:	f7ff f801 	bl	8018800 <__assert_func>
 80197fe:	2301      	movs	r3, #1
 8019800:	6144      	str	r4, [r0, #20]
 8019802:	6103      	str	r3, [r0, #16]
 8019804:	bd10      	pop	{r4, pc}
 8019806:	bf00      	nop
 8019808:	0801dfcf 	.word	0x0801dfcf
 801980c:	0801dfe0 	.word	0x0801dfe0

08019810 <__multiply>:
 8019810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019814:	4614      	mov	r4, r2
 8019816:	690a      	ldr	r2, [r1, #16]
 8019818:	6923      	ldr	r3, [r4, #16]
 801981a:	429a      	cmp	r2, r3
 801981c:	bfa8      	it	ge
 801981e:	4623      	movge	r3, r4
 8019820:	460f      	mov	r7, r1
 8019822:	bfa4      	itt	ge
 8019824:	460c      	movge	r4, r1
 8019826:	461f      	movge	r7, r3
 8019828:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801982c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8019830:	68a3      	ldr	r3, [r4, #8]
 8019832:	6861      	ldr	r1, [r4, #4]
 8019834:	eb0a 0609 	add.w	r6, sl, r9
 8019838:	42b3      	cmp	r3, r6
 801983a:	b085      	sub	sp, #20
 801983c:	bfb8      	it	lt
 801983e:	3101      	addlt	r1, #1
 8019840:	f7ff fedc 	bl	80195fc <_Balloc>
 8019844:	b930      	cbnz	r0, 8019854 <__multiply+0x44>
 8019846:	4602      	mov	r2, r0
 8019848:	4b44      	ldr	r3, [pc, #272]	@ (801995c <__multiply+0x14c>)
 801984a:	4845      	ldr	r0, [pc, #276]	@ (8019960 <__multiply+0x150>)
 801984c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019850:	f7fe ffd6 	bl	8018800 <__assert_func>
 8019854:	f100 0514 	add.w	r5, r0, #20
 8019858:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801985c:	462b      	mov	r3, r5
 801985e:	2200      	movs	r2, #0
 8019860:	4543      	cmp	r3, r8
 8019862:	d321      	bcc.n	80198a8 <__multiply+0x98>
 8019864:	f107 0114 	add.w	r1, r7, #20
 8019868:	f104 0214 	add.w	r2, r4, #20
 801986c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8019870:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8019874:	9302      	str	r3, [sp, #8]
 8019876:	1b13      	subs	r3, r2, r4
 8019878:	3b15      	subs	r3, #21
 801987a:	f023 0303 	bic.w	r3, r3, #3
 801987e:	3304      	adds	r3, #4
 8019880:	f104 0715 	add.w	r7, r4, #21
 8019884:	42ba      	cmp	r2, r7
 8019886:	bf38      	it	cc
 8019888:	2304      	movcc	r3, #4
 801988a:	9301      	str	r3, [sp, #4]
 801988c:	9b02      	ldr	r3, [sp, #8]
 801988e:	9103      	str	r1, [sp, #12]
 8019890:	428b      	cmp	r3, r1
 8019892:	d80c      	bhi.n	80198ae <__multiply+0x9e>
 8019894:	2e00      	cmp	r6, #0
 8019896:	dd03      	ble.n	80198a0 <__multiply+0x90>
 8019898:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801989c:	2b00      	cmp	r3, #0
 801989e:	d05b      	beq.n	8019958 <__multiply+0x148>
 80198a0:	6106      	str	r6, [r0, #16]
 80198a2:	b005      	add	sp, #20
 80198a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a8:	f843 2b04 	str.w	r2, [r3], #4
 80198ac:	e7d8      	b.n	8019860 <__multiply+0x50>
 80198ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80198b2:	f1ba 0f00 	cmp.w	sl, #0
 80198b6:	d024      	beq.n	8019902 <__multiply+0xf2>
 80198b8:	f104 0e14 	add.w	lr, r4, #20
 80198bc:	46a9      	mov	r9, r5
 80198be:	f04f 0c00 	mov.w	ip, #0
 80198c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80198c6:	f8d9 3000 	ldr.w	r3, [r9]
 80198ca:	fa1f fb87 	uxth.w	fp, r7
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80198d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80198d8:	f8d9 7000 	ldr.w	r7, [r9]
 80198dc:	4463      	add	r3, ip
 80198de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80198e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80198e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80198f0:	4572      	cmp	r2, lr
 80198f2:	f849 3b04 	str.w	r3, [r9], #4
 80198f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80198fa:	d8e2      	bhi.n	80198c2 <__multiply+0xb2>
 80198fc:	9b01      	ldr	r3, [sp, #4]
 80198fe:	f845 c003 	str.w	ip, [r5, r3]
 8019902:	9b03      	ldr	r3, [sp, #12]
 8019904:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8019908:	3104      	adds	r1, #4
 801990a:	f1b9 0f00 	cmp.w	r9, #0
 801990e:	d021      	beq.n	8019954 <__multiply+0x144>
 8019910:	682b      	ldr	r3, [r5, #0]
 8019912:	f104 0c14 	add.w	ip, r4, #20
 8019916:	46ae      	mov	lr, r5
 8019918:	f04f 0a00 	mov.w	sl, #0
 801991c:	f8bc b000 	ldrh.w	fp, [ip]
 8019920:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8019924:	fb09 770b 	mla	r7, r9, fp, r7
 8019928:	4457      	add	r7, sl
 801992a:	b29b      	uxth	r3, r3
 801992c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8019930:	f84e 3b04 	str.w	r3, [lr], #4
 8019934:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801993c:	f8be 3000 	ldrh.w	r3, [lr]
 8019940:	fb09 330a 	mla	r3, r9, sl, r3
 8019944:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8019948:	4562      	cmp	r2, ip
 801994a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801994e:	d8e5      	bhi.n	801991c <__multiply+0x10c>
 8019950:	9f01      	ldr	r7, [sp, #4]
 8019952:	51eb      	str	r3, [r5, r7]
 8019954:	3504      	adds	r5, #4
 8019956:	e799      	b.n	801988c <__multiply+0x7c>
 8019958:	3e01      	subs	r6, #1
 801995a:	e79b      	b.n	8019894 <__multiply+0x84>
 801995c:	0801dfcf 	.word	0x0801dfcf
 8019960:	0801dfe0 	.word	0x0801dfe0

08019964 <__pow5mult>:
 8019964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019968:	4615      	mov	r5, r2
 801996a:	f012 0203 	ands.w	r2, r2, #3
 801996e:	4607      	mov	r7, r0
 8019970:	460e      	mov	r6, r1
 8019972:	d007      	beq.n	8019984 <__pow5mult+0x20>
 8019974:	4c25      	ldr	r4, [pc, #148]	@ (8019a0c <__pow5mult+0xa8>)
 8019976:	3a01      	subs	r2, #1
 8019978:	2300      	movs	r3, #0
 801997a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801997e:	f7ff fe9f 	bl	80196c0 <__multadd>
 8019982:	4606      	mov	r6, r0
 8019984:	10ad      	asrs	r5, r5, #2
 8019986:	d03d      	beq.n	8019a04 <__pow5mult+0xa0>
 8019988:	69fc      	ldr	r4, [r7, #28]
 801998a:	b97c      	cbnz	r4, 80199ac <__pow5mult+0x48>
 801998c:	2010      	movs	r0, #16
 801998e:	f7ff fd7f 	bl	8019490 <malloc>
 8019992:	4602      	mov	r2, r0
 8019994:	61f8      	str	r0, [r7, #28]
 8019996:	b928      	cbnz	r0, 80199a4 <__pow5mult+0x40>
 8019998:	4b1d      	ldr	r3, [pc, #116]	@ (8019a10 <__pow5mult+0xac>)
 801999a:	481e      	ldr	r0, [pc, #120]	@ (8019a14 <__pow5mult+0xb0>)
 801999c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80199a0:	f7fe ff2e 	bl	8018800 <__assert_func>
 80199a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80199a8:	6004      	str	r4, [r0, #0]
 80199aa:	60c4      	str	r4, [r0, #12]
 80199ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80199b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80199b4:	b94c      	cbnz	r4, 80199ca <__pow5mult+0x66>
 80199b6:	f240 2171 	movw	r1, #625	@ 0x271
 80199ba:	4638      	mov	r0, r7
 80199bc:	f7ff ff12 	bl	80197e4 <__i2b>
 80199c0:	2300      	movs	r3, #0
 80199c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80199c6:	4604      	mov	r4, r0
 80199c8:	6003      	str	r3, [r0, #0]
 80199ca:	f04f 0900 	mov.w	r9, #0
 80199ce:	07eb      	lsls	r3, r5, #31
 80199d0:	d50a      	bpl.n	80199e8 <__pow5mult+0x84>
 80199d2:	4631      	mov	r1, r6
 80199d4:	4622      	mov	r2, r4
 80199d6:	4638      	mov	r0, r7
 80199d8:	f7ff ff1a 	bl	8019810 <__multiply>
 80199dc:	4631      	mov	r1, r6
 80199de:	4680      	mov	r8, r0
 80199e0:	4638      	mov	r0, r7
 80199e2:	f7ff fe4b 	bl	801967c <_Bfree>
 80199e6:	4646      	mov	r6, r8
 80199e8:	106d      	asrs	r5, r5, #1
 80199ea:	d00b      	beq.n	8019a04 <__pow5mult+0xa0>
 80199ec:	6820      	ldr	r0, [r4, #0]
 80199ee:	b938      	cbnz	r0, 8019a00 <__pow5mult+0x9c>
 80199f0:	4622      	mov	r2, r4
 80199f2:	4621      	mov	r1, r4
 80199f4:	4638      	mov	r0, r7
 80199f6:	f7ff ff0b 	bl	8019810 <__multiply>
 80199fa:	6020      	str	r0, [r4, #0]
 80199fc:	f8c0 9000 	str.w	r9, [r0]
 8019a00:	4604      	mov	r4, r0
 8019a02:	e7e4      	b.n	80199ce <__pow5mult+0x6a>
 8019a04:	4630      	mov	r0, r6
 8019a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a0a:	bf00      	nop
 8019a0c:	0801e03c 	.word	0x0801e03c
 8019a10:	0801dd8a 	.word	0x0801dd8a
 8019a14:	0801dfe0 	.word	0x0801dfe0

08019a18 <__lshift>:
 8019a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a1c:	460c      	mov	r4, r1
 8019a1e:	6849      	ldr	r1, [r1, #4]
 8019a20:	6923      	ldr	r3, [r4, #16]
 8019a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a26:	68a3      	ldr	r3, [r4, #8]
 8019a28:	4607      	mov	r7, r0
 8019a2a:	4691      	mov	r9, r2
 8019a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a30:	f108 0601 	add.w	r6, r8, #1
 8019a34:	42b3      	cmp	r3, r6
 8019a36:	db0b      	blt.n	8019a50 <__lshift+0x38>
 8019a38:	4638      	mov	r0, r7
 8019a3a:	f7ff fddf 	bl	80195fc <_Balloc>
 8019a3e:	4605      	mov	r5, r0
 8019a40:	b948      	cbnz	r0, 8019a56 <__lshift+0x3e>
 8019a42:	4602      	mov	r2, r0
 8019a44:	4b28      	ldr	r3, [pc, #160]	@ (8019ae8 <__lshift+0xd0>)
 8019a46:	4829      	ldr	r0, [pc, #164]	@ (8019aec <__lshift+0xd4>)
 8019a48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019a4c:	f7fe fed8 	bl	8018800 <__assert_func>
 8019a50:	3101      	adds	r1, #1
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	e7ee      	b.n	8019a34 <__lshift+0x1c>
 8019a56:	2300      	movs	r3, #0
 8019a58:	f100 0114 	add.w	r1, r0, #20
 8019a5c:	f100 0210 	add.w	r2, r0, #16
 8019a60:	4618      	mov	r0, r3
 8019a62:	4553      	cmp	r3, sl
 8019a64:	db33      	blt.n	8019ace <__lshift+0xb6>
 8019a66:	6920      	ldr	r0, [r4, #16]
 8019a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019a6c:	f104 0314 	add.w	r3, r4, #20
 8019a70:	f019 091f 	ands.w	r9, r9, #31
 8019a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019a78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019a7c:	d02b      	beq.n	8019ad6 <__lshift+0xbe>
 8019a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8019a82:	468a      	mov	sl, r1
 8019a84:	2200      	movs	r2, #0
 8019a86:	6818      	ldr	r0, [r3, #0]
 8019a88:	fa00 f009 	lsl.w	r0, r0, r9
 8019a8c:	4310      	orrs	r0, r2
 8019a8e:	f84a 0b04 	str.w	r0, [sl], #4
 8019a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a96:	459c      	cmp	ip, r3
 8019a98:	fa22 f20e 	lsr.w	r2, r2, lr
 8019a9c:	d8f3      	bhi.n	8019a86 <__lshift+0x6e>
 8019a9e:	ebac 0304 	sub.w	r3, ip, r4
 8019aa2:	3b15      	subs	r3, #21
 8019aa4:	f023 0303 	bic.w	r3, r3, #3
 8019aa8:	3304      	adds	r3, #4
 8019aaa:	f104 0015 	add.w	r0, r4, #21
 8019aae:	4584      	cmp	ip, r0
 8019ab0:	bf38      	it	cc
 8019ab2:	2304      	movcc	r3, #4
 8019ab4:	50ca      	str	r2, [r1, r3]
 8019ab6:	b10a      	cbz	r2, 8019abc <__lshift+0xa4>
 8019ab8:	f108 0602 	add.w	r6, r8, #2
 8019abc:	3e01      	subs	r6, #1
 8019abe:	4638      	mov	r0, r7
 8019ac0:	612e      	str	r6, [r5, #16]
 8019ac2:	4621      	mov	r1, r4
 8019ac4:	f7ff fdda 	bl	801967c <_Bfree>
 8019ac8:	4628      	mov	r0, r5
 8019aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8019ad2:	3301      	adds	r3, #1
 8019ad4:	e7c5      	b.n	8019a62 <__lshift+0x4a>
 8019ad6:	3904      	subs	r1, #4
 8019ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8019adc:	f841 2f04 	str.w	r2, [r1, #4]!
 8019ae0:	459c      	cmp	ip, r3
 8019ae2:	d8f9      	bhi.n	8019ad8 <__lshift+0xc0>
 8019ae4:	e7ea      	b.n	8019abc <__lshift+0xa4>
 8019ae6:	bf00      	nop
 8019ae8:	0801dfcf 	.word	0x0801dfcf
 8019aec:	0801dfe0 	.word	0x0801dfe0

08019af0 <__mcmp>:
 8019af0:	690a      	ldr	r2, [r1, #16]
 8019af2:	4603      	mov	r3, r0
 8019af4:	6900      	ldr	r0, [r0, #16]
 8019af6:	1a80      	subs	r0, r0, r2
 8019af8:	b530      	push	{r4, r5, lr}
 8019afa:	d10e      	bne.n	8019b1a <__mcmp+0x2a>
 8019afc:	3314      	adds	r3, #20
 8019afe:	3114      	adds	r1, #20
 8019b00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019b04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019b10:	4295      	cmp	r5, r2
 8019b12:	d003      	beq.n	8019b1c <__mcmp+0x2c>
 8019b14:	d205      	bcs.n	8019b22 <__mcmp+0x32>
 8019b16:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1a:	bd30      	pop	{r4, r5, pc}
 8019b1c:	42a3      	cmp	r3, r4
 8019b1e:	d3f3      	bcc.n	8019b08 <__mcmp+0x18>
 8019b20:	e7fb      	b.n	8019b1a <__mcmp+0x2a>
 8019b22:	2001      	movs	r0, #1
 8019b24:	e7f9      	b.n	8019b1a <__mcmp+0x2a>
	...

08019b28 <__mdiff>:
 8019b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2c:	4689      	mov	r9, r1
 8019b2e:	4606      	mov	r6, r0
 8019b30:	4611      	mov	r1, r2
 8019b32:	4648      	mov	r0, r9
 8019b34:	4614      	mov	r4, r2
 8019b36:	f7ff ffdb 	bl	8019af0 <__mcmp>
 8019b3a:	1e05      	subs	r5, r0, #0
 8019b3c:	d112      	bne.n	8019b64 <__mdiff+0x3c>
 8019b3e:	4629      	mov	r1, r5
 8019b40:	4630      	mov	r0, r6
 8019b42:	f7ff fd5b 	bl	80195fc <_Balloc>
 8019b46:	4602      	mov	r2, r0
 8019b48:	b928      	cbnz	r0, 8019b56 <__mdiff+0x2e>
 8019b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8019c48 <__mdiff+0x120>)
 8019b4c:	f240 2137 	movw	r1, #567	@ 0x237
 8019b50:	483e      	ldr	r0, [pc, #248]	@ (8019c4c <__mdiff+0x124>)
 8019b52:	f7fe fe55 	bl	8018800 <__assert_func>
 8019b56:	2301      	movs	r3, #1
 8019b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019b5c:	4610      	mov	r0, r2
 8019b5e:	b003      	add	sp, #12
 8019b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b64:	bfbc      	itt	lt
 8019b66:	464b      	movlt	r3, r9
 8019b68:	46a1      	movlt	r9, r4
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019b70:	bfba      	itte	lt
 8019b72:	461c      	movlt	r4, r3
 8019b74:	2501      	movlt	r5, #1
 8019b76:	2500      	movge	r5, #0
 8019b78:	f7ff fd40 	bl	80195fc <_Balloc>
 8019b7c:	4602      	mov	r2, r0
 8019b7e:	b918      	cbnz	r0, 8019b88 <__mdiff+0x60>
 8019b80:	4b31      	ldr	r3, [pc, #196]	@ (8019c48 <__mdiff+0x120>)
 8019b82:	f240 2145 	movw	r1, #581	@ 0x245
 8019b86:	e7e3      	b.n	8019b50 <__mdiff+0x28>
 8019b88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019b8c:	6926      	ldr	r6, [r4, #16]
 8019b8e:	60c5      	str	r5, [r0, #12]
 8019b90:	f109 0310 	add.w	r3, r9, #16
 8019b94:	f109 0514 	add.w	r5, r9, #20
 8019b98:	f104 0e14 	add.w	lr, r4, #20
 8019b9c:	f100 0b14 	add.w	fp, r0, #20
 8019ba0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019ba4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019ba8:	9301      	str	r3, [sp, #4]
 8019baa:	46d9      	mov	r9, fp
 8019bac:	f04f 0c00 	mov.w	ip, #0
 8019bb0:	9b01      	ldr	r3, [sp, #4]
 8019bb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019bb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019bba:	9301      	str	r3, [sp, #4]
 8019bbc:	fa1f f38a 	uxth.w	r3, sl
 8019bc0:	4619      	mov	r1, r3
 8019bc2:	b283      	uxth	r3, r0
 8019bc4:	1acb      	subs	r3, r1, r3
 8019bc6:	0c00      	lsrs	r0, r0, #16
 8019bc8:	4463      	add	r3, ip
 8019bca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019bce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019bd2:	b29b      	uxth	r3, r3
 8019bd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019bd8:	4576      	cmp	r6, lr
 8019bda:	f849 3b04 	str.w	r3, [r9], #4
 8019bde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019be2:	d8e5      	bhi.n	8019bb0 <__mdiff+0x88>
 8019be4:	1b33      	subs	r3, r6, r4
 8019be6:	3b15      	subs	r3, #21
 8019be8:	f023 0303 	bic.w	r3, r3, #3
 8019bec:	3415      	adds	r4, #21
 8019bee:	3304      	adds	r3, #4
 8019bf0:	42a6      	cmp	r6, r4
 8019bf2:	bf38      	it	cc
 8019bf4:	2304      	movcc	r3, #4
 8019bf6:	441d      	add	r5, r3
 8019bf8:	445b      	add	r3, fp
 8019bfa:	461e      	mov	r6, r3
 8019bfc:	462c      	mov	r4, r5
 8019bfe:	4544      	cmp	r4, r8
 8019c00:	d30e      	bcc.n	8019c20 <__mdiff+0xf8>
 8019c02:	f108 0103 	add.w	r1, r8, #3
 8019c06:	1b49      	subs	r1, r1, r5
 8019c08:	f021 0103 	bic.w	r1, r1, #3
 8019c0c:	3d03      	subs	r5, #3
 8019c0e:	45a8      	cmp	r8, r5
 8019c10:	bf38      	it	cc
 8019c12:	2100      	movcc	r1, #0
 8019c14:	440b      	add	r3, r1
 8019c16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019c1a:	b191      	cbz	r1, 8019c42 <__mdiff+0x11a>
 8019c1c:	6117      	str	r7, [r2, #16]
 8019c1e:	e79d      	b.n	8019b5c <__mdiff+0x34>
 8019c20:	f854 1b04 	ldr.w	r1, [r4], #4
 8019c24:	46e6      	mov	lr, ip
 8019c26:	0c08      	lsrs	r0, r1, #16
 8019c28:	fa1c fc81 	uxtah	ip, ip, r1
 8019c2c:	4471      	add	r1, lr
 8019c2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019c32:	b289      	uxth	r1, r1
 8019c34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019c38:	f846 1b04 	str.w	r1, [r6], #4
 8019c3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c40:	e7dd      	b.n	8019bfe <__mdiff+0xd6>
 8019c42:	3f01      	subs	r7, #1
 8019c44:	e7e7      	b.n	8019c16 <__mdiff+0xee>
 8019c46:	bf00      	nop
 8019c48:	0801dfcf 	.word	0x0801dfcf
 8019c4c:	0801dfe0 	.word	0x0801dfe0

08019c50 <__d2b>:
 8019c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019c54:	460f      	mov	r7, r1
 8019c56:	2101      	movs	r1, #1
 8019c58:	ec59 8b10 	vmov	r8, r9, d0
 8019c5c:	4616      	mov	r6, r2
 8019c5e:	f7ff fccd 	bl	80195fc <_Balloc>
 8019c62:	4604      	mov	r4, r0
 8019c64:	b930      	cbnz	r0, 8019c74 <__d2b+0x24>
 8019c66:	4602      	mov	r2, r0
 8019c68:	4b23      	ldr	r3, [pc, #140]	@ (8019cf8 <__d2b+0xa8>)
 8019c6a:	4824      	ldr	r0, [pc, #144]	@ (8019cfc <__d2b+0xac>)
 8019c6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8019c70:	f7fe fdc6 	bl	8018800 <__assert_func>
 8019c74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019c78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019c7c:	b10d      	cbz	r5, 8019c82 <__d2b+0x32>
 8019c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019c82:	9301      	str	r3, [sp, #4]
 8019c84:	f1b8 0300 	subs.w	r3, r8, #0
 8019c88:	d023      	beq.n	8019cd2 <__d2b+0x82>
 8019c8a:	4668      	mov	r0, sp
 8019c8c:	9300      	str	r3, [sp, #0]
 8019c8e:	f7ff fd7c 	bl	801978a <__lo0bits>
 8019c92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019c96:	b1d0      	cbz	r0, 8019cce <__d2b+0x7e>
 8019c98:	f1c0 0320 	rsb	r3, r0, #32
 8019c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8019ca0:	430b      	orrs	r3, r1
 8019ca2:	40c2      	lsrs	r2, r0
 8019ca4:	6163      	str	r3, [r4, #20]
 8019ca6:	9201      	str	r2, [sp, #4]
 8019ca8:	9b01      	ldr	r3, [sp, #4]
 8019caa:	61a3      	str	r3, [r4, #24]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	bf0c      	ite	eq
 8019cb0:	2201      	moveq	r2, #1
 8019cb2:	2202      	movne	r2, #2
 8019cb4:	6122      	str	r2, [r4, #16]
 8019cb6:	b1a5      	cbz	r5, 8019ce2 <__d2b+0x92>
 8019cb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019cbc:	4405      	add	r5, r0
 8019cbe:	603d      	str	r5, [r7, #0]
 8019cc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019cc4:	6030      	str	r0, [r6, #0]
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	b003      	add	sp, #12
 8019cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cce:	6161      	str	r1, [r4, #20]
 8019cd0:	e7ea      	b.n	8019ca8 <__d2b+0x58>
 8019cd2:	a801      	add	r0, sp, #4
 8019cd4:	f7ff fd59 	bl	801978a <__lo0bits>
 8019cd8:	9b01      	ldr	r3, [sp, #4]
 8019cda:	6163      	str	r3, [r4, #20]
 8019cdc:	3020      	adds	r0, #32
 8019cde:	2201      	movs	r2, #1
 8019ce0:	e7e8      	b.n	8019cb4 <__d2b+0x64>
 8019ce2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ce6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019cea:	6038      	str	r0, [r7, #0]
 8019cec:	6918      	ldr	r0, [r3, #16]
 8019cee:	f7ff fd2d 	bl	801974c <__hi0bits>
 8019cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019cf6:	e7e5      	b.n	8019cc4 <__d2b+0x74>
 8019cf8:	0801dfcf 	.word	0x0801dfcf
 8019cfc:	0801dfe0 	.word	0x0801dfe0

08019d00 <__ssputs_r>:
 8019d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d04:	688e      	ldr	r6, [r1, #8]
 8019d06:	461f      	mov	r7, r3
 8019d08:	42be      	cmp	r6, r7
 8019d0a:	680b      	ldr	r3, [r1, #0]
 8019d0c:	4682      	mov	sl, r0
 8019d0e:	460c      	mov	r4, r1
 8019d10:	4690      	mov	r8, r2
 8019d12:	d82d      	bhi.n	8019d70 <__ssputs_r+0x70>
 8019d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019d18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019d1c:	d026      	beq.n	8019d6c <__ssputs_r+0x6c>
 8019d1e:	6965      	ldr	r5, [r4, #20]
 8019d20:	6909      	ldr	r1, [r1, #16]
 8019d22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d26:	eba3 0901 	sub.w	r9, r3, r1
 8019d2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d2e:	1c7b      	adds	r3, r7, #1
 8019d30:	444b      	add	r3, r9
 8019d32:	106d      	asrs	r5, r5, #1
 8019d34:	429d      	cmp	r5, r3
 8019d36:	bf38      	it	cc
 8019d38:	461d      	movcc	r5, r3
 8019d3a:	0553      	lsls	r3, r2, #21
 8019d3c:	d527      	bpl.n	8019d8e <__ssputs_r+0x8e>
 8019d3e:	4629      	mov	r1, r5
 8019d40:	f7ff fbd0 	bl	80194e4 <_malloc_r>
 8019d44:	4606      	mov	r6, r0
 8019d46:	b360      	cbz	r0, 8019da2 <__ssputs_r+0xa2>
 8019d48:	6921      	ldr	r1, [r4, #16]
 8019d4a:	464a      	mov	r2, r9
 8019d4c:	f7fe fd49 	bl	80187e2 <memcpy>
 8019d50:	89a3      	ldrh	r3, [r4, #12]
 8019d52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d5a:	81a3      	strh	r3, [r4, #12]
 8019d5c:	6126      	str	r6, [r4, #16]
 8019d5e:	6165      	str	r5, [r4, #20]
 8019d60:	444e      	add	r6, r9
 8019d62:	eba5 0509 	sub.w	r5, r5, r9
 8019d66:	6026      	str	r6, [r4, #0]
 8019d68:	60a5      	str	r5, [r4, #8]
 8019d6a:	463e      	mov	r6, r7
 8019d6c:	42be      	cmp	r6, r7
 8019d6e:	d900      	bls.n	8019d72 <__ssputs_r+0x72>
 8019d70:	463e      	mov	r6, r7
 8019d72:	6820      	ldr	r0, [r4, #0]
 8019d74:	4632      	mov	r2, r6
 8019d76:	4641      	mov	r1, r8
 8019d78:	f7fe fc60 	bl	801863c <memmove>
 8019d7c:	68a3      	ldr	r3, [r4, #8]
 8019d7e:	1b9b      	subs	r3, r3, r6
 8019d80:	60a3      	str	r3, [r4, #8]
 8019d82:	6823      	ldr	r3, [r4, #0]
 8019d84:	4433      	add	r3, r6
 8019d86:	6023      	str	r3, [r4, #0]
 8019d88:	2000      	movs	r0, #0
 8019d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d8e:	462a      	mov	r2, r5
 8019d90:	f000 fbcf 	bl	801a532 <_realloc_r>
 8019d94:	4606      	mov	r6, r0
 8019d96:	2800      	cmp	r0, #0
 8019d98:	d1e0      	bne.n	8019d5c <__ssputs_r+0x5c>
 8019d9a:	6921      	ldr	r1, [r4, #16]
 8019d9c:	4650      	mov	r0, sl
 8019d9e:	f7ff fb2d 	bl	80193fc <_free_r>
 8019da2:	230c      	movs	r3, #12
 8019da4:	f8ca 3000 	str.w	r3, [sl]
 8019da8:	89a3      	ldrh	r3, [r4, #12]
 8019daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019dae:	81a3      	strh	r3, [r4, #12]
 8019db0:	f04f 30ff 	mov.w	r0, #4294967295
 8019db4:	e7e9      	b.n	8019d8a <__ssputs_r+0x8a>
	...

08019db8 <_svfiprintf_r>:
 8019db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dbc:	4698      	mov	r8, r3
 8019dbe:	898b      	ldrh	r3, [r1, #12]
 8019dc0:	061b      	lsls	r3, r3, #24
 8019dc2:	b09d      	sub	sp, #116	@ 0x74
 8019dc4:	4607      	mov	r7, r0
 8019dc6:	460d      	mov	r5, r1
 8019dc8:	4614      	mov	r4, r2
 8019dca:	d510      	bpl.n	8019dee <_svfiprintf_r+0x36>
 8019dcc:	690b      	ldr	r3, [r1, #16]
 8019dce:	b973      	cbnz	r3, 8019dee <_svfiprintf_r+0x36>
 8019dd0:	2140      	movs	r1, #64	@ 0x40
 8019dd2:	f7ff fb87 	bl	80194e4 <_malloc_r>
 8019dd6:	6028      	str	r0, [r5, #0]
 8019dd8:	6128      	str	r0, [r5, #16]
 8019dda:	b930      	cbnz	r0, 8019dea <_svfiprintf_r+0x32>
 8019ddc:	230c      	movs	r3, #12
 8019dde:	603b      	str	r3, [r7, #0]
 8019de0:	f04f 30ff 	mov.w	r0, #4294967295
 8019de4:	b01d      	add	sp, #116	@ 0x74
 8019de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dea:	2340      	movs	r3, #64	@ 0x40
 8019dec:	616b      	str	r3, [r5, #20]
 8019dee:	2300      	movs	r3, #0
 8019df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8019df2:	2320      	movs	r3, #32
 8019df4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8019dfc:	2330      	movs	r3, #48	@ 0x30
 8019dfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019f9c <_svfiprintf_r+0x1e4>
 8019e02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019e06:	f04f 0901 	mov.w	r9, #1
 8019e0a:	4623      	mov	r3, r4
 8019e0c:	469a      	mov	sl, r3
 8019e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e12:	b10a      	cbz	r2, 8019e18 <_svfiprintf_r+0x60>
 8019e14:	2a25      	cmp	r2, #37	@ 0x25
 8019e16:	d1f9      	bne.n	8019e0c <_svfiprintf_r+0x54>
 8019e18:	ebba 0b04 	subs.w	fp, sl, r4
 8019e1c:	d00b      	beq.n	8019e36 <_svfiprintf_r+0x7e>
 8019e1e:	465b      	mov	r3, fp
 8019e20:	4622      	mov	r2, r4
 8019e22:	4629      	mov	r1, r5
 8019e24:	4638      	mov	r0, r7
 8019e26:	f7ff ff6b 	bl	8019d00 <__ssputs_r>
 8019e2a:	3001      	adds	r0, #1
 8019e2c:	f000 80a7 	beq.w	8019f7e <_svfiprintf_r+0x1c6>
 8019e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e32:	445a      	add	r2, fp
 8019e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e36:	f89a 3000 	ldrb.w	r3, [sl]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	f000 809f 	beq.w	8019f7e <_svfiprintf_r+0x1c6>
 8019e40:	2300      	movs	r3, #0
 8019e42:	f04f 32ff 	mov.w	r2, #4294967295
 8019e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e4a:	f10a 0a01 	add.w	sl, sl, #1
 8019e4e:	9304      	str	r3, [sp, #16]
 8019e50:	9307      	str	r3, [sp, #28]
 8019e52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019e56:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e58:	4654      	mov	r4, sl
 8019e5a:	2205      	movs	r2, #5
 8019e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e60:	484e      	ldr	r0, [pc, #312]	@ (8019f9c <_svfiprintf_r+0x1e4>)
 8019e62:	f7e6 f9ed 	bl	8000240 <memchr>
 8019e66:	9a04      	ldr	r2, [sp, #16]
 8019e68:	b9d8      	cbnz	r0, 8019ea2 <_svfiprintf_r+0xea>
 8019e6a:	06d0      	lsls	r0, r2, #27
 8019e6c:	bf44      	itt	mi
 8019e6e:	2320      	movmi	r3, #32
 8019e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e74:	0711      	lsls	r1, r2, #28
 8019e76:	bf44      	itt	mi
 8019e78:	232b      	movmi	r3, #43	@ 0x2b
 8019e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8019e82:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e84:	d015      	beq.n	8019eb2 <_svfiprintf_r+0xfa>
 8019e86:	9a07      	ldr	r2, [sp, #28]
 8019e88:	4654      	mov	r4, sl
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	f04f 0c0a 	mov.w	ip, #10
 8019e90:	4621      	mov	r1, r4
 8019e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e96:	3b30      	subs	r3, #48	@ 0x30
 8019e98:	2b09      	cmp	r3, #9
 8019e9a:	d94b      	bls.n	8019f34 <_svfiprintf_r+0x17c>
 8019e9c:	b1b0      	cbz	r0, 8019ecc <_svfiprintf_r+0x114>
 8019e9e:	9207      	str	r2, [sp, #28]
 8019ea0:	e014      	b.n	8019ecc <_svfiprintf_r+0x114>
 8019ea2:	eba0 0308 	sub.w	r3, r0, r8
 8019ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8019eaa:	4313      	orrs	r3, r2
 8019eac:	9304      	str	r3, [sp, #16]
 8019eae:	46a2      	mov	sl, r4
 8019eb0:	e7d2      	b.n	8019e58 <_svfiprintf_r+0xa0>
 8019eb2:	9b03      	ldr	r3, [sp, #12]
 8019eb4:	1d19      	adds	r1, r3, #4
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	9103      	str	r1, [sp, #12]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	bfbb      	ittet	lt
 8019ebe:	425b      	neglt	r3, r3
 8019ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8019ec4:	9307      	strge	r3, [sp, #28]
 8019ec6:	9307      	strlt	r3, [sp, #28]
 8019ec8:	bfb8      	it	lt
 8019eca:	9204      	strlt	r2, [sp, #16]
 8019ecc:	7823      	ldrb	r3, [r4, #0]
 8019ece:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ed0:	d10a      	bne.n	8019ee8 <_svfiprintf_r+0x130>
 8019ed2:	7863      	ldrb	r3, [r4, #1]
 8019ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ed6:	d132      	bne.n	8019f3e <_svfiprintf_r+0x186>
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	1d1a      	adds	r2, r3, #4
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	9203      	str	r2, [sp, #12]
 8019ee0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ee4:	3402      	adds	r4, #2
 8019ee6:	9305      	str	r3, [sp, #20]
 8019ee8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019fac <_svfiprintf_r+0x1f4>
 8019eec:	7821      	ldrb	r1, [r4, #0]
 8019eee:	2203      	movs	r2, #3
 8019ef0:	4650      	mov	r0, sl
 8019ef2:	f7e6 f9a5 	bl	8000240 <memchr>
 8019ef6:	b138      	cbz	r0, 8019f08 <_svfiprintf_r+0x150>
 8019ef8:	9b04      	ldr	r3, [sp, #16]
 8019efa:	eba0 000a 	sub.w	r0, r0, sl
 8019efe:	2240      	movs	r2, #64	@ 0x40
 8019f00:	4082      	lsls	r2, r0
 8019f02:	4313      	orrs	r3, r2
 8019f04:	3401      	adds	r4, #1
 8019f06:	9304      	str	r3, [sp, #16]
 8019f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f0c:	4824      	ldr	r0, [pc, #144]	@ (8019fa0 <_svfiprintf_r+0x1e8>)
 8019f0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019f12:	2206      	movs	r2, #6
 8019f14:	f7e6 f994 	bl	8000240 <memchr>
 8019f18:	2800      	cmp	r0, #0
 8019f1a:	d036      	beq.n	8019f8a <_svfiprintf_r+0x1d2>
 8019f1c:	4b21      	ldr	r3, [pc, #132]	@ (8019fa4 <_svfiprintf_r+0x1ec>)
 8019f1e:	bb1b      	cbnz	r3, 8019f68 <_svfiprintf_r+0x1b0>
 8019f20:	9b03      	ldr	r3, [sp, #12]
 8019f22:	3307      	adds	r3, #7
 8019f24:	f023 0307 	bic.w	r3, r3, #7
 8019f28:	3308      	adds	r3, #8
 8019f2a:	9303      	str	r3, [sp, #12]
 8019f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f2e:	4433      	add	r3, r6
 8019f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f32:	e76a      	b.n	8019e0a <_svfiprintf_r+0x52>
 8019f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f38:	460c      	mov	r4, r1
 8019f3a:	2001      	movs	r0, #1
 8019f3c:	e7a8      	b.n	8019e90 <_svfiprintf_r+0xd8>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	3401      	adds	r4, #1
 8019f42:	9305      	str	r3, [sp, #20]
 8019f44:	4619      	mov	r1, r3
 8019f46:	f04f 0c0a 	mov.w	ip, #10
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f50:	3a30      	subs	r2, #48	@ 0x30
 8019f52:	2a09      	cmp	r2, #9
 8019f54:	d903      	bls.n	8019f5e <_svfiprintf_r+0x1a6>
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d0c6      	beq.n	8019ee8 <_svfiprintf_r+0x130>
 8019f5a:	9105      	str	r1, [sp, #20]
 8019f5c:	e7c4      	b.n	8019ee8 <_svfiprintf_r+0x130>
 8019f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f62:	4604      	mov	r4, r0
 8019f64:	2301      	movs	r3, #1
 8019f66:	e7f0      	b.n	8019f4a <_svfiprintf_r+0x192>
 8019f68:	ab03      	add	r3, sp, #12
 8019f6a:	9300      	str	r3, [sp, #0]
 8019f6c:	462a      	mov	r2, r5
 8019f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8019fa8 <_svfiprintf_r+0x1f0>)
 8019f70:	a904      	add	r1, sp, #16
 8019f72:	4638      	mov	r0, r7
 8019f74:	f7fd fd6c 	bl	8017a50 <_printf_float>
 8019f78:	1c42      	adds	r2, r0, #1
 8019f7a:	4606      	mov	r6, r0
 8019f7c:	d1d6      	bne.n	8019f2c <_svfiprintf_r+0x174>
 8019f7e:	89ab      	ldrh	r3, [r5, #12]
 8019f80:	065b      	lsls	r3, r3, #25
 8019f82:	f53f af2d 	bmi.w	8019de0 <_svfiprintf_r+0x28>
 8019f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f88:	e72c      	b.n	8019de4 <_svfiprintf_r+0x2c>
 8019f8a:	ab03      	add	r3, sp, #12
 8019f8c:	9300      	str	r3, [sp, #0]
 8019f8e:	462a      	mov	r2, r5
 8019f90:	4b05      	ldr	r3, [pc, #20]	@ (8019fa8 <_svfiprintf_r+0x1f0>)
 8019f92:	a904      	add	r1, sp, #16
 8019f94:	4638      	mov	r0, r7
 8019f96:	f7fd ffe3 	bl	8017f60 <_printf_i>
 8019f9a:	e7ed      	b.n	8019f78 <_svfiprintf_r+0x1c0>
 8019f9c:	0801e138 	.word	0x0801e138
 8019fa0:	0801e142 	.word	0x0801e142
 8019fa4:	08017a51 	.word	0x08017a51
 8019fa8:	08019d01 	.word	0x08019d01
 8019fac:	0801e13e 	.word	0x0801e13e

08019fb0 <__sfputc_r>:
 8019fb0:	6893      	ldr	r3, [r2, #8]
 8019fb2:	3b01      	subs	r3, #1
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	b410      	push	{r4}
 8019fb8:	6093      	str	r3, [r2, #8]
 8019fba:	da08      	bge.n	8019fce <__sfputc_r+0x1e>
 8019fbc:	6994      	ldr	r4, [r2, #24]
 8019fbe:	42a3      	cmp	r3, r4
 8019fc0:	db01      	blt.n	8019fc6 <__sfputc_r+0x16>
 8019fc2:	290a      	cmp	r1, #10
 8019fc4:	d103      	bne.n	8019fce <__sfputc_r+0x1e>
 8019fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fca:	f7fe ba92 	b.w	80184f2 <__swbuf_r>
 8019fce:	6813      	ldr	r3, [r2, #0]
 8019fd0:	1c58      	adds	r0, r3, #1
 8019fd2:	6010      	str	r0, [r2, #0]
 8019fd4:	7019      	strb	r1, [r3, #0]
 8019fd6:	4608      	mov	r0, r1
 8019fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fdc:	4770      	bx	lr

08019fde <__sfputs_r>:
 8019fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe0:	4606      	mov	r6, r0
 8019fe2:	460f      	mov	r7, r1
 8019fe4:	4614      	mov	r4, r2
 8019fe6:	18d5      	adds	r5, r2, r3
 8019fe8:	42ac      	cmp	r4, r5
 8019fea:	d101      	bne.n	8019ff0 <__sfputs_r+0x12>
 8019fec:	2000      	movs	r0, #0
 8019fee:	e007      	b.n	801a000 <__sfputs_r+0x22>
 8019ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ff4:	463a      	mov	r2, r7
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	f7ff ffda 	bl	8019fb0 <__sfputc_r>
 8019ffc:	1c43      	adds	r3, r0, #1
 8019ffe:	d1f3      	bne.n	8019fe8 <__sfputs_r+0xa>
 801a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a004 <_vfiprintf_r>:
 801a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a008:	460d      	mov	r5, r1
 801a00a:	b09d      	sub	sp, #116	@ 0x74
 801a00c:	4614      	mov	r4, r2
 801a00e:	4698      	mov	r8, r3
 801a010:	4606      	mov	r6, r0
 801a012:	b118      	cbz	r0, 801a01c <_vfiprintf_r+0x18>
 801a014:	6a03      	ldr	r3, [r0, #32]
 801a016:	b90b      	cbnz	r3, 801a01c <_vfiprintf_r+0x18>
 801a018:	f7fe f94e 	bl	80182b8 <__sinit>
 801a01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a01e:	07d9      	lsls	r1, r3, #31
 801a020:	d405      	bmi.n	801a02e <_vfiprintf_r+0x2a>
 801a022:	89ab      	ldrh	r3, [r5, #12]
 801a024:	059a      	lsls	r2, r3, #22
 801a026:	d402      	bmi.n	801a02e <_vfiprintf_r+0x2a>
 801a028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a02a:	f7fe fbd0 	bl	80187ce <__retarget_lock_acquire_recursive>
 801a02e:	89ab      	ldrh	r3, [r5, #12]
 801a030:	071b      	lsls	r3, r3, #28
 801a032:	d501      	bpl.n	801a038 <_vfiprintf_r+0x34>
 801a034:	692b      	ldr	r3, [r5, #16]
 801a036:	b99b      	cbnz	r3, 801a060 <_vfiprintf_r+0x5c>
 801a038:	4629      	mov	r1, r5
 801a03a:	4630      	mov	r0, r6
 801a03c:	f7fe fa98 	bl	8018570 <__swsetup_r>
 801a040:	b170      	cbz	r0, 801a060 <_vfiprintf_r+0x5c>
 801a042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a044:	07dc      	lsls	r4, r3, #31
 801a046:	d504      	bpl.n	801a052 <_vfiprintf_r+0x4e>
 801a048:	f04f 30ff 	mov.w	r0, #4294967295
 801a04c:	b01d      	add	sp, #116	@ 0x74
 801a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a052:	89ab      	ldrh	r3, [r5, #12]
 801a054:	0598      	lsls	r0, r3, #22
 801a056:	d4f7      	bmi.n	801a048 <_vfiprintf_r+0x44>
 801a058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a05a:	f7fe fbb9 	bl	80187d0 <__retarget_lock_release_recursive>
 801a05e:	e7f3      	b.n	801a048 <_vfiprintf_r+0x44>
 801a060:	2300      	movs	r3, #0
 801a062:	9309      	str	r3, [sp, #36]	@ 0x24
 801a064:	2320      	movs	r3, #32
 801a066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a06e:	2330      	movs	r3, #48	@ 0x30
 801a070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a220 <_vfiprintf_r+0x21c>
 801a074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a078:	f04f 0901 	mov.w	r9, #1
 801a07c:	4623      	mov	r3, r4
 801a07e:	469a      	mov	sl, r3
 801a080:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a084:	b10a      	cbz	r2, 801a08a <_vfiprintf_r+0x86>
 801a086:	2a25      	cmp	r2, #37	@ 0x25
 801a088:	d1f9      	bne.n	801a07e <_vfiprintf_r+0x7a>
 801a08a:	ebba 0b04 	subs.w	fp, sl, r4
 801a08e:	d00b      	beq.n	801a0a8 <_vfiprintf_r+0xa4>
 801a090:	465b      	mov	r3, fp
 801a092:	4622      	mov	r2, r4
 801a094:	4629      	mov	r1, r5
 801a096:	4630      	mov	r0, r6
 801a098:	f7ff ffa1 	bl	8019fde <__sfputs_r>
 801a09c:	3001      	adds	r0, #1
 801a09e:	f000 80a7 	beq.w	801a1f0 <_vfiprintf_r+0x1ec>
 801a0a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a0a4:	445a      	add	r2, fp
 801a0a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	f000 809f 	beq.w	801a1f0 <_vfiprintf_r+0x1ec>
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0bc:	f10a 0a01 	add.w	sl, sl, #1
 801a0c0:	9304      	str	r3, [sp, #16]
 801a0c2:	9307      	str	r3, [sp, #28]
 801a0c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a0c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801a0ca:	4654      	mov	r4, sl
 801a0cc:	2205      	movs	r2, #5
 801a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0d2:	4853      	ldr	r0, [pc, #332]	@ (801a220 <_vfiprintf_r+0x21c>)
 801a0d4:	f7e6 f8b4 	bl	8000240 <memchr>
 801a0d8:	9a04      	ldr	r2, [sp, #16]
 801a0da:	b9d8      	cbnz	r0, 801a114 <_vfiprintf_r+0x110>
 801a0dc:	06d1      	lsls	r1, r2, #27
 801a0de:	bf44      	itt	mi
 801a0e0:	2320      	movmi	r3, #32
 801a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0e6:	0713      	lsls	r3, r2, #28
 801a0e8:	bf44      	itt	mi
 801a0ea:	232b      	movmi	r3, #43	@ 0x2b
 801a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0f6:	d015      	beq.n	801a124 <_vfiprintf_r+0x120>
 801a0f8:	9a07      	ldr	r2, [sp, #28]
 801a0fa:	4654      	mov	r4, sl
 801a0fc:	2000      	movs	r0, #0
 801a0fe:	f04f 0c0a 	mov.w	ip, #10
 801a102:	4621      	mov	r1, r4
 801a104:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a108:	3b30      	subs	r3, #48	@ 0x30
 801a10a:	2b09      	cmp	r3, #9
 801a10c:	d94b      	bls.n	801a1a6 <_vfiprintf_r+0x1a2>
 801a10e:	b1b0      	cbz	r0, 801a13e <_vfiprintf_r+0x13a>
 801a110:	9207      	str	r2, [sp, #28]
 801a112:	e014      	b.n	801a13e <_vfiprintf_r+0x13a>
 801a114:	eba0 0308 	sub.w	r3, r0, r8
 801a118:	fa09 f303 	lsl.w	r3, r9, r3
 801a11c:	4313      	orrs	r3, r2
 801a11e:	9304      	str	r3, [sp, #16]
 801a120:	46a2      	mov	sl, r4
 801a122:	e7d2      	b.n	801a0ca <_vfiprintf_r+0xc6>
 801a124:	9b03      	ldr	r3, [sp, #12]
 801a126:	1d19      	adds	r1, r3, #4
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	9103      	str	r1, [sp, #12]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	bfbb      	ittet	lt
 801a130:	425b      	neglt	r3, r3
 801a132:	f042 0202 	orrlt.w	r2, r2, #2
 801a136:	9307      	strge	r3, [sp, #28]
 801a138:	9307      	strlt	r3, [sp, #28]
 801a13a:	bfb8      	it	lt
 801a13c:	9204      	strlt	r2, [sp, #16]
 801a13e:	7823      	ldrb	r3, [r4, #0]
 801a140:	2b2e      	cmp	r3, #46	@ 0x2e
 801a142:	d10a      	bne.n	801a15a <_vfiprintf_r+0x156>
 801a144:	7863      	ldrb	r3, [r4, #1]
 801a146:	2b2a      	cmp	r3, #42	@ 0x2a
 801a148:	d132      	bne.n	801a1b0 <_vfiprintf_r+0x1ac>
 801a14a:	9b03      	ldr	r3, [sp, #12]
 801a14c:	1d1a      	adds	r2, r3, #4
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	9203      	str	r2, [sp, #12]
 801a152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a156:	3402      	adds	r4, #2
 801a158:	9305      	str	r3, [sp, #20]
 801a15a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a230 <_vfiprintf_r+0x22c>
 801a15e:	7821      	ldrb	r1, [r4, #0]
 801a160:	2203      	movs	r2, #3
 801a162:	4650      	mov	r0, sl
 801a164:	f7e6 f86c 	bl	8000240 <memchr>
 801a168:	b138      	cbz	r0, 801a17a <_vfiprintf_r+0x176>
 801a16a:	9b04      	ldr	r3, [sp, #16]
 801a16c:	eba0 000a 	sub.w	r0, r0, sl
 801a170:	2240      	movs	r2, #64	@ 0x40
 801a172:	4082      	lsls	r2, r0
 801a174:	4313      	orrs	r3, r2
 801a176:	3401      	adds	r4, #1
 801a178:	9304      	str	r3, [sp, #16]
 801a17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a17e:	4829      	ldr	r0, [pc, #164]	@ (801a224 <_vfiprintf_r+0x220>)
 801a180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a184:	2206      	movs	r2, #6
 801a186:	f7e6 f85b 	bl	8000240 <memchr>
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d03f      	beq.n	801a20e <_vfiprintf_r+0x20a>
 801a18e:	4b26      	ldr	r3, [pc, #152]	@ (801a228 <_vfiprintf_r+0x224>)
 801a190:	bb1b      	cbnz	r3, 801a1da <_vfiprintf_r+0x1d6>
 801a192:	9b03      	ldr	r3, [sp, #12]
 801a194:	3307      	adds	r3, #7
 801a196:	f023 0307 	bic.w	r3, r3, #7
 801a19a:	3308      	adds	r3, #8
 801a19c:	9303      	str	r3, [sp, #12]
 801a19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1a0:	443b      	add	r3, r7
 801a1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1a4:	e76a      	b.n	801a07c <_vfiprintf_r+0x78>
 801a1a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1aa:	460c      	mov	r4, r1
 801a1ac:	2001      	movs	r0, #1
 801a1ae:	e7a8      	b.n	801a102 <_vfiprintf_r+0xfe>
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	3401      	adds	r4, #1
 801a1b4:	9305      	str	r3, [sp, #20]
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	f04f 0c0a 	mov.w	ip, #10
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1c2:	3a30      	subs	r2, #48	@ 0x30
 801a1c4:	2a09      	cmp	r2, #9
 801a1c6:	d903      	bls.n	801a1d0 <_vfiprintf_r+0x1cc>
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d0c6      	beq.n	801a15a <_vfiprintf_r+0x156>
 801a1cc:	9105      	str	r1, [sp, #20]
 801a1ce:	e7c4      	b.n	801a15a <_vfiprintf_r+0x156>
 801a1d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	e7f0      	b.n	801a1bc <_vfiprintf_r+0x1b8>
 801a1da:	ab03      	add	r3, sp, #12
 801a1dc:	9300      	str	r3, [sp, #0]
 801a1de:	462a      	mov	r2, r5
 801a1e0:	4b12      	ldr	r3, [pc, #72]	@ (801a22c <_vfiprintf_r+0x228>)
 801a1e2:	a904      	add	r1, sp, #16
 801a1e4:	4630      	mov	r0, r6
 801a1e6:	f7fd fc33 	bl	8017a50 <_printf_float>
 801a1ea:	4607      	mov	r7, r0
 801a1ec:	1c78      	adds	r0, r7, #1
 801a1ee:	d1d6      	bne.n	801a19e <_vfiprintf_r+0x19a>
 801a1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a1f2:	07d9      	lsls	r1, r3, #31
 801a1f4:	d405      	bmi.n	801a202 <_vfiprintf_r+0x1fe>
 801a1f6:	89ab      	ldrh	r3, [r5, #12]
 801a1f8:	059a      	lsls	r2, r3, #22
 801a1fa:	d402      	bmi.n	801a202 <_vfiprintf_r+0x1fe>
 801a1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a1fe:	f7fe fae7 	bl	80187d0 <__retarget_lock_release_recursive>
 801a202:	89ab      	ldrh	r3, [r5, #12]
 801a204:	065b      	lsls	r3, r3, #25
 801a206:	f53f af1f 	bmi.w	801a048 <_vfiprintf_r+0x44>
 801a20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a20c:	e71e      	b.n	801a04c <_vfiprintf_r+0x48>
 801a20e:	ab03      	add	r3, sp, #12
 801a210:	9300      	str	r3, [sp, #0]
 801a212:	462a      	mov	r2, r5
 801a214:	4b05      	ldr	r3, [pc, #20]	@ (801a22c <_vfiprintf_r+0x228>)
 801a216:	a904      	add	r1, sp, #16
 801a218:	4630      	mov	r0, r6
 801a21a:	f7fd fea1 	bl	8017f60 <_printf_i>
 801a21e:	e7e4      	b.n	801a1ea <_vfiprintf_r+0x1e6>
 801a220:	0801e138 	.word	0x0801e138
 801a224:	0801e142 	.word	0x0801e142
 801a228:	08017a51 	.word	0x08017a51
 801a22c:	08019fdf 	.word	0x08019fdf
 801a230:	0801e13e 	.word	0x0801e13e

0801a234 <__sflush_r>:
 801a234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a23c:	0716      	lsls	r6, r2, #28
 801a23e:	4605      	mov	r5, r0
 801a240:	460c      	mov	r4, r1
 801a242:	d454      	bmi.n	801a2ee <__sflush_r+0xba>
 801a244:	684b      	ldr	r3, [r1, #4]
 801a246:	2b00      	cmp	r3, #0
 801a248:	dc02      	bgt.n	801a250 <__sflush_r+0x1c>
 801a24a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	dd48      	ble.n	801a2e2 <__sflush_r+0xae>
 801a250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a252:	2e00      	cmp	r6, #0
 801a254:	d045      	beq.n	801a2e2 <__sflush_r+0xae>
 801a256:	2300      	movs	r3, #0
 801a258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a25c:	682f      	ldr	r7, [r5, #0]
 801a25e:	6a21      	ldr	r1, [r4, #32]
 801a260:	602b      	str	r3, [r5, #0]
 801a262:	d030      	beq.n	801a2c6 <__sflush_r+0x92>
 801a264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a266:	89a3      	ldrh	r3, [r4, #12]
 801a268:	0759      	lsls	r1, r3, #29
 801a26a:	d505      	bpl.n	801a278 <__sflush_r+0x44>
 801a26c:	6863      	ldr	r3, [r4, #4]
 801a26e:	1ad2      	subs	r2, r2, r3
 801a270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a272:	b10b      	cbz	r3, 801a278 <__sflush_r+0x44>
 801a274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a276:	1ad2      	subs	r2, r2, r3
 801a278:	2300      	movs	r3, #0
 801a27a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a27c:	6a21      	ldr	r1, [r4, #32]
 801a27e:	4628      	mov	r0, r5
 801a280:	47b0      	blx	r6
 801a282:	1c43      	adds	r3, r0, #1
 801a284:	89a3      	ldrh	r3, [r4, #12]
 801a286:	d106      	bne.n	801a296 <__sflush_r+0x62>
 801a288:	6829      	ldr	r1, [r5, #0]
 801a28a:	291d      	cmp	r1, #29
 801a28c:	d82b      	bhi.n	801a2e6 <__sflush_r+0xb2>
 801a28e:	4a2a      	ldr	r2, [pc, #168]	@ (801a338 <__sflush_r+0x104>)
 801a290:	410a      	asrs	r2, r1
 801a292:	07d6      	lsls	r6, r2, #31
 801a294:	d427      	bmi.n	801a2e6 <__sflush_r+0xb2>
 801a296:	2200      	movs	r2, #0
 801a298:	6062      	str	r2, [r4, #4]
 801a29a:	04d9      	lsls	r1, r3, #19
 801a29c:	6922      	ldr	r2, [r4, #16]
 801a29e:	6022      	str	r2, [r4, #0]
 801a2a0:	d504      	bpl.n	801a2ac <__sflush_r+0x78>
 801a2a2:	1c42      	adds	r2, r0, #1
 801a2a4:	d101      	bne.n	801a2aa <__sflush_r+0x76>
 801a2a6:	682b      	ldr	r3, [r5, #0]
 801a2a8:	b903      	cbnz	r3, 801a2ac <__sflush_r+0x78>
 801a2aa:	6560      	str	r0, [r4, #84]	@ 0x54
 801a2ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a2ae:	602f      	str	r7, [r5, #0]
 801a2b0:	b1b9      	cbz	r1, 801a2e2 <__sflush_r+0xae>
 801a2b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a2b6:	4299      	cmp	r1, r3
 801a2b8:	d002      	beq.n	801a2c0 <__sflush_r+0x8c>
 801a2ba:	4628      	mov	r0, r5
 801a2bc:	f7ff f89e 	bl	80193fc <_free_r>
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a2c4:	e00d      	b.n	801a2e2 <__sflush_r+0xae>
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	47b0      	blx	r6
 801a2cc:	4602      	mov	r2, r0
 801a2ce:	1c50      	adds	r0, r2, #1
 801a2d0:	d1c9      	bne.n	801a266 <__sflush_r+0x32>
 801a2d2:	682b      	ldr	r3, [r5, #0]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d0c6      	beq.n	801a266 <__sflush_r+0x32>
 801a2d8:	2b1d      	cmp	r3, #29
 801a2da:	d001      	beq.n	801a2e0 <__sflush_r+0xac>
 801a2dc:	2b16      	cmp	r3, #22
 801a2de:	d11e      	bne.n	801a31e <__sflush_r+0xea>
 801a2e0:	602f      	str	r7, [r5, #0]
 801a2e2:	2000      	movs	r0, #0
 801a2e4:	e022      	b.n	801a32c <__sflush_r+0xf8>
 801a2e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a2ea:	b21b      	sxth	r3, r3
 801a2ec:	e01b      	b.n	801a326 <__sflush_r+0xf2>
 801a2ee:	690f      	ldr	r7, [r1, #16]
 801a2f0:	2f00      	cmp	r7, #0
 801a2f2:	d0f6      	beq.n	801a2e2 <__sflush_r+0xae>
 801a2f4:	0793      	lsls	r3, r2, #30
 801a2f6:	680e      	ldr	r6, [r1, #0]
 801a2f8:	bf08      	it	eq
 801a2fa:	694b      	ldreq	r3, [r1, #20]
 801a2fc:	600f      	str	r7, [r1, #0]
 801a2fe:	bf18      	it	ne
 801a300:	2300      	movne	r3, #0
 801a302:	eba6 0807 	sub.w	r8, r6, r7
 801a306:	608b      	str	r3, [r1, #8]
 801a308:	f1b8 0f00 	cmp.w	r8, #0
 801a30c:	dde9      	ble.n	801a2e2 <__sflush_r+0xae>
 801a30e:	6a21      	ldr	r1, [r4, #32]
 801a310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a312:	4643      	mov	r3, r8
 801a314:	463a      	mov	r2, r7
 801a316:	4628      	mov	r0, r5
 801a318:	47b0      	blx	r6
 801a31a:	2800      	cmp	r0, #0
 801a31c:	dc08      	bgt.n	801a330 <__sflush_r+0xfc>
 801a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a326:	81a3      	strh	r3, [r4, #12]
 801a328:	f04f 30ff 	mov.w	r0, #4294967295
 801a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a330:	4407      	add	r7, r0
 801a332:	eba8 0800 	sub.w	r8, r8, r0
 801a336:	e7e7      	b.n	801a308 <__sflush_r+0xd4>
 801a338:	dfbffffe 	.word	0xdfbffffe

0801a33c <_fflush_r>:
 801a33c:	b538      	push	{r3, r4, r5, lr}
 801a33e:	690b      	ldr	r3, [r1, #16]
 801a340:	4605      	mov	r5, r0
 801a342:	460c      	mov	r4, r1
 801a344:	b913      	cbnz	r3, 801a34c <_fflush_r+0x10>
 801a346:	2500      	movs	r5, #0
 801a348:	4628      	mov	r0, r5
 801a34a:	bd38      	pop	{r3, r4, r5, pc}
 801a34c:	b118      	cbz	r0, 801a356 <_fflush_r+0x1a>
 801a34e:	6a03      	ldr	r3, [r0, #32]
 801a350:	b90b      	cbnz	r3, 801a356 <_fflush_r+0x1a>
 801a352:	f7fd ffb1 	bl	80182b8 <__sinit>
 801a356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d0f3      	beq.n	801a346 <_fflush_r+0xa>
 801a35e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a360:	07d0      	lsls	r0, r2, #31
 801a362:	d404      	bmi.n	801a36e <_fflush_r+0x32>
 801a364:	0599      	lsls	r1, r3, #22
 801a366:	d402      	bmi.n	801a36e <_fflush_r+0x32>
 801a368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a36a:	f7fe fa30 	bl	80187ce <__retarget_lock_acquire_recursive>
 801a36e:	4628      	mov	r0, r5
 801a370:	4621      	mov	r1, r4
 801a372:	f7ff ff5f 	bl	801a234 <__sflush_r>
 801a376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a378:	07da      	lsls	r2, r3, #31
 801a37a:	4605      	mov	r5, r0
 801a37c:	d4e4      	bmi.n	801a348 <_fflush_r+0xc>
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	059b      	lsls	r3, r3, #22
 801a382:	d4e1      	bmi.n	801a348 <_fflush_r+0xc>
 801a384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a386:	f7fe fa23 	bl	80187d0 <__retarget_lock_release_recursive>
 801a38a:	e7dd      	b.n	801a348 <_fflush_r+0xc>

0801a38c <fiprintf>:
 801a38c:	b40e      	push	{r1, r2, r3}
 801a38e:	b503      	push	{r0, r1, lr}
 801a390:	4601      	mov	r1, r0
 801a392:	ab03      	add	r3, sp, #12
 801a394:	4805      	ldr	r0, [pc, #20]	@ (801a3ac <fiprintf+0x20>)
 801a396:	f853 2b04 	ldr.w	r2, [r3], #4
 801a39a:	6800      	ldr	r0, [r0, #0]
 801a39c:	9301      	str	r3, [sp, #4]
 801a39e:	f7ff fe31 	bl	801a004 <_vfiprintf_r>
 801a3a2:	b002      	add	sp, #8
 801a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3a8:	b003      	add	sp, #12
 801a3aa:	4770      	bx	lr
 801a3ac:	20000028 	.word	0x20000028

0801a3b0 <__swhatbuf_r>:
 801a3b0:	b570      	push	{r4, r5, r6, lr}
 801a3b2:	460c      	mov	r4, r1
 801a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3b8:	2900      	cmp	r1, #0
 801a3ba:	b096      	sub	sp, #88	@ 0x58
 801a3bc:	4615      	mov	r5, r2
 801a3be:	461e      	mov	r6, r3
 801a3c0:	da0d      	bge.n	801a3de <__swhatbuf_r+0x2e>
 801a3c2:	89a3      	ldrh	r3, [r4, #12]
 801a3c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a3c8:	f04f 0100 	mov.w	r1, #0
 801a3cc:	bf14      	ite	ne
 801a3ce:	2340      	movne	r3, #64	@ 0x40
 801a3d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a3d4:	2000      	movs	r0, #0
 801a3d6:	6031      	str	r1, [r6, #0]
 801a3d8:	602b      	str	r3, [r5, #0]
 801a3da:	b016      	add	sp, #88	@ 0x58
 801a3dc:	bd70      	pop	{r4, r5, r6, pc}
 801a3de:	466a      	mov	r2, sp
 801a3e0:	f000 f848 	bl	801a474 <_fstat_r>
 801a3e4:	2800      	cmp	r0, #0
 801a3e6:	dbec      	blt.n	801a3c2 <__swhatbuf_r+0x12>
 801a3e8:	9901      	ldr	r1, [sp, #4]
 801a3ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a3ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a3f2:	4259      	negs	r1, r3
 801a3f4:	4159      	adcs	r1, r3
 801a3f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a3fa:	e7eb      	b.n	801a3d4 <__swhatbuf_r+0x24>

0801a3fc <__smakebuf_r>:
 801a3fc:	898b      	ldrh	r3, [r1, #12]
 801a3fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a400:	079d      	lsls	r5, r3, #30
 801a402:	4606      	mov	r6, r0
 801a404:	460c      	mov	r4, r1
 801a406:	d507      	bpl.n	801a418 <__smakebuf_r+0x1c>
 801a408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a40c:	6023      	str	r3, [r4, #0]
 801a40e:	6123      	str	r3, [r4, #16]
 801a410:	2301      	movs	r3, #1
 801a412:	6163      	str	r3, [r4, #20]
 801a414:	b003      	add	sp, #12
 801a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a418:	ab01      	add	r3, sp, #4
 801a41a:	466a      	mov	r2, sp
 801a41c:	f7ff ffc8 	bl	801a3b0 <__swhatbuf_r>
 801a420:	9f00      	ldr	r7, [sp, #0]
 801a422:	4605      	mov	r5, r0
 801a424:	4639      	mov	r1, r7
 801a426:	4630      	mov	r0, r6
 801a428:	f7ff f85c 	bl	80194e4 <_malloc_r>
 801a42c:	b948      	cbnz	r0, 801a442 <__smakebuf_r+0x46>
 801a42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a432:	059a      	lsls	r2, r3, #22
 801a434:	d4ee      	bmi.n	801a414 <__smakebuf_r+0x18>
 801a436:	f023 0303 	bic.w	r3, r3, #3
 801a43a:	f043 0302 	orr.w	r3, r3, #2
 801a43e:	81a3      	strh	r3, [r4, #12]
 801a440:	e7e2      	b.n	801a408 <__smakebuf_r+0xc>
 801a442:	89a3      	ldrh	r3, [r4, #12]
 801a444:	6020      	str	r0, [r4, #0]
 801a446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a44a:	81a3      	strh	r3, [r4, #12]
 801a44c:	9b01      	ldr	r3, [sp, #4]
 801a44e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a452:	b15b      	cbz	r3, 801a46c <__smakebuf_r+0x70>
 801a454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a458:	4630      	mov	r0, r6
 801a45a:	f000 f81d 	bl	801a498 <_isatty_r>
 801a45e:	b128      	cbz	r0, 801a46c <__smakebuf_r+0x70>
 801a460:	89a3      	ldrh	r3, [r4, #12]
 801a462:	f023 0303 	bic.w	r3, r3, #3
 801a466:	f043 0301 	orr.w	r3, r3, #1
 801a46a:	81a3      	strh	r3, [r4, #12]
 801a46c:	89a3      	ldrh	r3, [r4, #12]
 801a46e:	431d      	orrs	r5, r3
 801a470:	81a5      	strh	r5, [r4, #12]
 801a472:	e7cf      	b.n	801a414 <__smakebuf_r+0x18>

0801a474 <_fstat_r>:
 801a474:	b538      	push	{r3, r4, r5, lr}
 801a476:	4d07      	ldr	r5, [pc, #28]	@ (801a494 <_fstat_r+0x20>)
 801a478:	2300      	movs	r3, #0
 801a47a:	4604      	mov	r4, r0
 801a47c:	4608      	mov	r0, r1
 801a47e:	4611      	mov	r1, r2
 801a480:	602b      	str	r3, [r5, #0]
 801a482:	f7e6 fd39 	bl	8000ef8 <_fstat>
 801a486:	1c43      	adds	r3, r0, #1
 801a488:	d102      	bne.n	801a490 <_fstat_r+0x1c>
 801a48a:	682b      	ldr	r3, [r5, #0]
 801a48c:	b103      	cbz	r3, 801a490 <_fstat_r+0x1c>
 801a48e:	6023      	str	r3, [r4, #0]
 801a490:	bd38      	pop	{r3, r4, r5, pc}
 801a492:	bf00      	nop
 801a494:	2000e220 	.word	0x2000e220

0801a498 <_isatty_r>:
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	4d06      	ldr	r5, [pc, #24]	@ (801a4b4 <_isatty_r+0x1c>)
 801a49c:	2300      	movs	r3, #0
 801a49e:	4604      	mov	r4, r0
 801a4a0:	4608      	mov	r0, r1
 801a4a2:	602b      	str	r3, [r5, #0]
 801a4a4:	f7e6 fd38 	bl	8000f18 <_isatty>
 801a4a8:	1c43      	adds	r3, r0, #1
 801a4aa:	d102      	bne.n	801a4b2 <_isatty_r+0x1a>
 801a4ac:	682b      	ldr	r3, [r5, #0]
 801a4ae:	b103      	cbz	r3, 801a4b2 <_isatty_r+0x1a>
 801a4b0:	6023      	str	r3, [r4, #0]
 801a4b2:	bd38      	pop	{r3, r4, r5, pc}
 801a4b4:	2000e220 	.word	0x2000e220

0801a4b8 <_sbrk_r>:
 801a4b8:	b538      	push	{r3, r4, r5, lr}
 801a4ba:	4d06      	ldr	r5, [pc, #24]	@ (801a4d4 <_sbrk_r+0x1c>)
 801a4bc:	2300      	movs	r3, #0
 801a4be:	4604      	mov	r4, r0
 801a4c0:	4608      	mov	r0, r1
 801a4c2:	602b      	str	r3, [r5, #0]
 801a4c4:	f7e6 fd40 	bl	8000f48 <_sbrk>
 801a4c8:	1c43      	adds	r3, r0, #1
 801a4ca:	d102      	bne.n	801a4d2 <_sbrk_r+0x1a>
 801a4cc:	682b      	ldr	r3, [r5, #0]
 801a4ce:	b103      	cbz	r3, 801a4d2 <_sbrk_r+0x1a>
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	bd38      	pop	{r3, r4, r5, pc}
 801a4d4:	2000e220 	.word	0x2000e220

0801a4d8 <abort>:
 801a4d8:	b508      	push	{r3, lr}
 801a4da:	2006      	movs	r0, #6
 801a4dc:	f000 f88c 	bl	801a5f8 <raise>
 801a4e0:	2001      	movs	r0, #1
 801a4e2:	f7e6 fcd5 	bl	8000e90 <_exit>

0801a4e6 <_calloc_r>:
 801a4e6:	b570      	push	{r4, r5, r6, lr}
 801a4e8:	fba1 5402 	umull	r5, r4, r1, r2
 801a4ec:	b93c      	cbnz	r4, 801a4fe <_calloc_r+0x18>
 801a4ee:	4629      	mov	r1, r5
 801a4f0:	f7fe fff8 	bl	80194e4 <_malloc_r>
 801a4f4:	4606      	mov	r6, r0
 801a4f6:	b928      	cbnz	r0, 801a504 <_calloc_r+0x1e>
 801a4f8:	2600      	movs	r6, #0
 801a4fa:	4630      	mov	r0, r6
 801a4fc:	bd70      	pop	{r4, r5, r6, pc}
 801a4fe:	220c      	movs	r2, #12
 801a500:	6002      	str	r2, [r0, #0]
 801a502:	e7f9      	b.n	801a4f8 <_calloc_r+0x12>
 801a504:	462a      	mov	r2, r5
 801a506:	4621      	mov	r1, r4
 801a508:	f7fe f8b2 	bl	8018670 <memset>
 801a50c:	e7f5      	b.n	801a4fa <_calloc_r+0x14>

0801a50e <__ascii_mbtowc>:
 801a50e:	b082      	sub	sp, #8
 801a510:	b901      	cbnz	r1, 801a514 <__ascii_mbtowc+0x6>
 801a512:	a901      	add	r1, sp, #4
 801a514:	b142      	cbz	r2, 801a528 <__ascii_mbtowc+0x1a>
 801a516:	b14b      	cbz	r3, 801a52c <__ascii_mbtowc+0x1e>
 801a518:	7813      	ldrb	r3, [r2, #0]
 801a51a:	600b      	str	r3, [r1, #0]
 801a51c:	7812      	ldrb	r2, [r2, #0]
 801a51e:	1e10      	subs	r0, r2, #0
 801a520:	bf18      	it	ne
 801a522:	2001      	movne	r0, #1
 801a524:	b002      	add	sp, #8
 801a526:	4770      	bx	lr
 801a528:	4610      	mov	r0, r2
 801a52a:	e7fb      	b.n	801a524 <__ascii_mbtowc+0x16>
 801a52c:	f06f 0001 	mvn.w	r0, #1
 801a530:	e7f8      	b.n	801a524 <__ascii_mbtowc+0x16>

0801a532 <_realloc_r>:
 801a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a536:	4680      	mov	r8, r0
 801a538:	4615      	mov	r5, r2
 801a53a:	460c      	mov	r4, r1
 801a53c:	b921      	cbnz	r1, 801a548 <_realloc_r+0x16>
 801a53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a542:	4611      	mov	r1, r2
 801a544:	f7fe bfce 	b.w	80194e4 <_malloc_r>
 801a548:	b92a      	cbnz	r2, 801a556 <_realloc_r+0x24>
 801a54a:	f7fe ff57 	bl	80193fc <_free_r>
 801a54e:	2400      	movs	r4, #0
 801a550:	4620      	mov	r0, r4
 801a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a556:	f000 f86b 	bl	801a630 <_malloc_usable_size_r>
 801a55a:	4285      	cmp	r5, r0
 801a55c:	4606      	mov	r6, r0
 801a55e:	d802      	bhi.n	801a566 <_realloc_r+0x34>
 801a560:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a564:	d8f4      	bhi.n	801a550 <_realloc_r+0x1e>
 801a566:	4629      	mov	r1, r5
 801a568:	4640      	mov	r0, r8
 801a56a:	f7fe ffbb 	bl	80194e4 <_malloc_r>
 801a56e:	4607      	mov	r7, r0
 801a570:	2800      	cmp	r0, #0
 801a572:	d0ec      	beq.n	801a54e <_realloc_r+0x1c>
 801a574:	42b5      	cmp	r5, r6
 801a576:	462a      	mov	r2, r5
 801a578:	4621      	mov	r1, r4
 801a57a:	bf28      	it	cs
 801a57c:	4632      	movcs	r2, r6
 801a57e:	f7fe f930 	bl	80187e2 <memcpy>
 801a582:	4621      	mov	r1, r4
 801a584:	4640      	mov	r0, r8
 801a586:	f7fe ff39 	bl	80193fc <_free_r>
 801a58a:	463c      	mov	r4, r7
 801a58c:	e7e0      	b.n	801a550 <_realloc_r+0x1e>

0801a58e <__ascii_wctomb>:
 801a58e:	4603      	mov	r3, r0
 801a590:	4608      	mov	r0, r1
 801a592:	b141      	cbz	r1, 801a5a6 <__ascii_wctomb+0x18>
 801a594:	2aff      	cmp	r2, #255	@ 0xff
 801a596:	d904      	bls.n	801a5a2 <__ascii_wctomb+0x14>
 801a598:	228a      	movs	r2, #138	@ 0x8a
 801a59a:	601a      	str	r2, [r3, #0]
 801a59c:	f04f 30ff 	mov.w	r0, #4294967295
 801a5a0:	4770      	bx	lr
 801a5a2:	700a      	strb	r2, [r1, #0]
 801a5a4:	2001      	movs	r0, #1
 801a5a6:	4770      	bx	lr

0801a5a8 <_raise_r>:
 801a5a8:	291f      	cmp	r1, #31
 801a5aa:	b538      	push	{r3, r4, r5, lr}
 801a5ac:	4605      	mov	r5, r0
 801a5ae:	460c      	mov	r4, r1
 801a5b0:	d904      	bls.n	801a5bc <_raise_r+0x14>
 801a5b2:	2316      	movs	r3, #22
 801a5b4:	6003      	str	r3, [r0, #0]
 801a5b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}
 801a5bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a5be:	b112      	cbz	r2, 801a5c6 <_raise_r+0x1e>
 801a5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a5c4:	b94b      	cbnz	r3, 801a5da <_raise_r+0x32>
 801a5c6:	4628      	mov	r0, r5
 801a5c8:	f000 f830 	bl	801a62c <_getpid_r>
 801a5cc:	4622      	mov	r2, r4
 801a5ce:	4601      	mov	r1, r0
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5d6:	f000 b817 	b.w	801a608 <_kill_r>
 801a5da:	2b01      	cmp	r3, #1
 801a5dc:	d00a      	beq.n	801a5f4 <_raise_r+0x4c>
 801a5de:	1c59      	adds	r1, r3, #1
 801a5e0:	d103      	bne.n	801a5ea <_raise_r+0x42>
 801a5e2:	2316      	movs	r3, #22
 801a5e4:	6003      	str	r3, [r0, #0]
 801a5e6:	2001      	movs	r0, #1
 801a5e8:	e7e7      	b.n	801a5ba <_raise_r+0x12>
 801a5ea:	2100      	movs	r1, #0
 801a5ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	4798      	blx	r3
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	e7e0      	b.n	801a5ba <_raise_r+0x12>

0801a5f8 <raise>:
 801a5f8:	4b02      	ldr	r3, [pc, #8]	@ (801a604 <raise+0xc>)
 801a5fa:	4601      	mov	r1, r0
 801a5fc:	6818      	ldr	r0, [r3, #0]
 801a5fe:	f7ff bfd3 	b.w	801a5a8 <_raise_r>
 801a602:	bf00      	nop
 801a604:	20000028 	.word	0x20000028

0801a608 <_kill_r>:
 801a608:	b538      	push	{r3, r4, r5, lr}
 801a60a:	4d07      	ldr	r5, [pc, #28]	@ (801a628 <_kill_r+0x20>)
 801a60c:	2300      	movs	r3, #0
 801a60e:	4604      	mov	r4, r0
 801a610:	4608      	mov	r0, r1
 801a612:	4611      	mov	r1, r2
 801a614:	602b      	str	r3, [r5, #0]
 801a616:	f7e6 fc29 	bl	8000e6c <_kill>
 801a61a:	1c43      	adds	r3, r0, #1
 801a61c:	d102      	bne.n	801a624 <_kill_r+0x1c>
 801a61e:	682b      	ldr	r3, [r5, #0]
 801a620:	b103      	cbz	r3, 801a624 <_kill_r+0x1c>
 801a622:	6023      	str	r3, [r4, #0]
 801a624:	bd38      	pop	{r3, r4, r5, pc}
 801a626:	bf00      	nop
 801a628:	2000e220 	.word	0x2000e220

0801a62c <_getpid_r>:
 801a62c:	f7e6 bc16 	b.w	8000e5c <_getpid>

0801a630 <_malloc_usable_size_r>:
 801a630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a634:	1f18      	subs	r0, r3, #4
 801a636:	2b00      	cmp	r3, #0
 801a638:	bfbc      	itt	lt
 801a63a:	580b      	ldrlt	r3, [r1, r0]
 801a63c:	18c0      	addlt	r0, r0, r3
 801a63e:	4770      	bx	lr

0801a640 <_init>:
 801a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a642:	bf00      	nop
 801a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a646:	bc08      	pop	{r3}
 801a648:	469e      	mov	lr, r3
 801a64a:	4770      	bx	lr

0801a64c <_fini>:
 801a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a64e:	bf00      	nop
 801a650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a652:	bc08      	pop	{r3}
 801a654:	469e      	mov	lr, r3
 801a656:	4770      	bx	lr
