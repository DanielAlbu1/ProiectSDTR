
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b238  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bec  0801b438  0801b438  0001c438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f024  0801f024  000211e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f024  0801f024  00020024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f02c  0801f02c  000211e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f02c  0801f02c  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f030  0801f030  00020030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0801f034  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e1e0  200001e4  0801f218  000211e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e3c4  0801f218  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000211e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003abb1  00000000  00000000  00021212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091ab  00000000  00000000  0005bdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b68  00000000  00000000  00064f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000225b  00000000  00000000  00067ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bf61  00000000  00000000  00069d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047b5d  00000000  00000000  000a5c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126dd0  00000000  00000000  000ed7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002145c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c3fc  00000000  00000000  00214604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00220a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801b420 	.word	0x0801b420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0801b420 	.word	0x0801b420

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <humiditySensorAdcInit>:
#include "adc_sensors.h"


void humiditySensorAdcInit(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

	//activare ceas pentru GPIOA SI ADC1

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44

	//CONFIGURARE PA3 CA INTRARE ANALOGICA
	GPIOA->MODER |= GPIO_MODER_MODER3;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <humiditySensorAdcInit+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <humiditySensorAdcInit+0x84>)
 8000602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000612:	60d3      	str	r3, [r2, #12]

	//CONFIGURARE ADC1
	ADC1->CR2 = 0;//RESETARE REGISTRU CONTROL
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON; //ACTIVARE ADC
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 = 3; //CANALUL 3 IN PRIMA POZITIE DE SECVENTA DE CONVERSIE
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000628:	2203      	movs	r2, #3
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC1->SMPR2 |= ADC_SMPR2_SMP3;//SETARE TIMP ESNATIONARE CANALUL 3
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000632:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000636:	6113      	str	r3, [r2, #16]
	ADC1->CR1 = 0;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= ADC_CR2_EXTSEL;//SETARE DECLANSATOR SOFTWARE
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000644:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000648:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0; //ACTIVARE DECLANSATOR SOFTWARE
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	6093      	str	r3, [r2, #8]

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40012000 	.word	0x40012000

0800066c <humiditySensorReadValue>:

uint16_t humiditySensorReadValue(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_CR2_SWSTART; //start conversie
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <humiditySensorReadValue+0x30>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a09      	ldr	r2, [pc, #36]	@ (800069c <humiditySensorReadValue+0x30>)
 8000676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800067a:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & ADC_SR_EOC));//ASTEPTARE FINALIZARE CONVERSIE
 800067c:	bf00      	nop
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <humiditySensorReadValue+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <humiditySensorReadValue+0x12>

	return ADC1 -> DR;
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <humiditySensorReadValue+0x30>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	b29b      	uxth	r3, r3


}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000

080006a0 <humidity_read_task>:
void humidity_read_task(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while (1)
	    {
	        // Citește valoarea ADC de la senzorul de umiditate
	        int adc_value = humiditySensorReadValue();  // Funcția care citește ADC-ul senzorului de umiditate
 80006a8:	f7ff ffe0 	bl	800066c <humiditySensorReadValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	617b      	str	r3, [r7, #20]

	        // Asigură-te că valoarea ADC este între 1200 și 4000
	        if (adc_value < 1200) adc_value = 1200;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80006b6:	da02      	bge.n	80006be <humidity_read_task+0x1e>
 80006b8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80006bc:	617b      	str	r3, [r7, #20]
	        if (adc_value > 4000) adc_value = 4000;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006c4:	dd02      	ble.n	80006cc <humidity_read_task+0x2c>
 80006c6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80006ca:	617b      	str	r3, [r7, #20]

	        // Calculează valoarea umidității (în procente)
	        float humidity = (float)(4000 - adc_value) / (4000 - 1200) * 100;  // Transforma valoarea ADC într-un procent
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006da:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800071c <humidity_read_task+0x7c>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000720 <humidity_read_task+0x80>
 80006e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ea:	edc7 7a04 	vstr	s15, [r7, #16]

	        // Creează structura cu valorile citite
	        HumiditySensorData sensorData;
	        sensorData.humidity = humidity;       // Setează umiditatea
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	60bb      	str	r3, [r7, #8]
	        sensorData.adc_value = adc_value;    // Setează valoarea ADC
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	60fb      	str	r3, [r7, #12]

	        // Pune structura pe coadă (suprascrie orice valoare anterioară)
	        if (xQueueOverwrite(sensorQueue, &sensorData) != pdTRUE)
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <humidity_read_task+0x84>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f107 0108 	add.w	r1, r7, #8
 80006fe:	2302      	movs	r3, #2
 8000700:	2200      	movs	r2, #0
 8000702:	f007 fda1 	bl	8008248 <xQueueGenericSend>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <humidity_read_task+0x72>
	        {
	            printf("Failed to send humidity data to queue\n");
 800070c:	4806      	ldr	r0, [pc, #24]	@ (8000728 <humidity_read_task+0x88>)
 800070e:	f018 fd41 	bl	8019194 <puts>
	        }

	        // Așteaptă 5 secunde înainte de a citi din nou
	        vTaskDelay(pdMS_TO_TICKS(1000));
 8000712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000716:	f008 ff15 	bl	8009544 <vTaskDelay>
	    {
 800071a:	e7c5      	b.n	80006a8 <humidity_read_task+0x8>
 800071c:	452f0000 	.word	0x452f0000
 8000720:	42c80000 	.word	0x42c80000
 8000724:	200006e0 	.word	0x200006e0
 8000728:	0801b438 	.word	0x0801b438

0800072c <init_humidity_task>:
	    }
}
void init_humidity_task(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0
    osThreadAttr_t humidityTask_attributes = {
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2224      	movs	r2, #36	@ 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f018 fe89 	bl	8019450 <memset>
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <init_humidity_task+0x34>)
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	2318      	movs	r3, #24
 800074a:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };

    // Crează task-ul care citește umiditatea la fiecare 5 secunde
    osThreadNew(humidity_read_task, NULL, &humidityTask_attributes);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <init_humidity_task+0x38>)
 8000754:	f006 fc84 	bl	8007060 <osThreadNew>
}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	@ 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0801b460 	.word	0x0801b460
 8000764:	080006a1 	.word	0x080006a1

08000768 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af02      	add	r7, sp, #8
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f023 030f 	bic.w	r3, r3, #15
 8000778:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f043 030c 	orr.w	r3, r3, #12
 8000786:	b2db      	uxtb	r3, r3
 8000788:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	b2db      	uxtb	r3, r3
 8000792:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	f043 030c 	orr.w	r3, r3, #12
 800079a:	b2db      	uxtb	r3, r3
 800079c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007a8:	f107 0208 	add.w	r2, r7, #8
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2304      	movs	r3, #4
 80007b2:	214e      	movs	r1, #78	@ 0x4e
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <lcd_send_cmd+0x5c>)
 80007b6:	f002 fd17 	bl	80031e8 <HAL_I2C_Master_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000028c 	.word	0x2000028c

080007c8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f023 030f 	bic.w	r3, r3, #15
 80007d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f043 030d 	orr.w	r3, r3, #13
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f043 0309 	orr.w	r3, r3, #9
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	f043 030d 	orr.w	r3, r3, #13
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	f043 0309 	orr.w	r3, r3, #9
 8000804:	b2db      	uxtb	r3, r3
 8000806:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000808:	f107 0208 	add.w	r2, r7, #8
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2304      	movs	r3, #4
 8000812:	214e      	movs	r1, #78	@ 0x4e
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <lcd_send_data+0x5c>)
 8000816:	f002 fce7 	bl	80031e8 <HAL_I2C_Master_Transmit>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000028c 	.word	0x2000028c

08000828 <lcd_clear>:

void lcd_clear (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800082e:	2080      	movs	r0, #128	@ 0x80
 8000830:	f7ff ff9a 	bl	8000768 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	e005      	b.n	8000846 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800083a:	2020      	movs	r0, #32
 800083c:	f7ff ffc4 	bl	80007c8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b45      	cmp	r3, #69	@ 0x45
 800084a:	ddf6      	ble.n	800083a <lcd_clear+0x12>
	}
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <lcd_put_cur+0x18>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d005      	beq.n	8000878 <lcd_put_cur+0x22>
 800086c:	e009      	b.n	8000882 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	603b      	str	r3, [r7, #0]
            break;
 8000876:	e004      	b.n	8000882 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800087e:	603b      	str	r3, [r7, #0]
            break;
 8000880:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff6e 	bl	8000768 <lcd_send_cmd>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_init>:


void lcd_init (void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	vTaskDelay(pdMS_TO_TICKS(40));  // wait for >40ms
 8000898:	2028      	movs	r0, #40	@ 0x28
 800089a:	f008 fe53 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x30);
 800089e:	2030      	movs	r0, #48	@ 0x30
 80008a0:	f7ff ff62 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(5));   // wait for >4.1ms
 80008a4:	2005      	movs	r0, #5
 80008a6:	f008 fe4d 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x30);
 80008aa:	2030      	movs	r0, #48	@ 0x30
 80008ac:	f7ff ff5c 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1)); // wait for >100us
 80008b0:	2001      	movs	r0, #1
 80008b2:	f008 fe47 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x30);
 80008b6:	2030      	movs	r0, #48	@ 0x30
 80008b8:	f7ff ff56 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 80008bc:	200a      	movs	r0, #10
 80008be:	f008 fe41 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008c2:	2020      	movs	r0, #32
 80008c4:	f7ff ff50 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 80008c8:	200a      	movs	r0, #10
 80008ca:	f008 fe3b 	bl	8009544 <vTaskDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008ce:	2028      	movs	r0, #40	@ 0x28
 80008d0:	f7ff ff4a 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80008d4:	2001      	movs	r0, #1
 80008d6:	f008 fe35 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008da:	2008      	movs	r0, #8
 80008dc:	f7ff ff44 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80008e0:	2001      	movs	r0, #1
 80008e2:	f008 fe2f 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x01);  // clear display
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff3e 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1)); vTaskDelay(pdMS_TO_TICKS(1));
 80008ec:	2001      	movs	r0, #1
 80008ee:	f008 fe29 	bl	8009544 <vTaskDelay>
 80008f2:	2001      	movs	r0, #1
 80008f4:	f008 fe26 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f7ff ff35 	bl	8000768 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80008fe:	2001      	movs	r0, #1
 8000900:	f008 fe20 	bl	8009544 <vTaskDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000904:	200c      	movs	r0, #12
 8000906:	f7ff ff2f 	bl	8000768 <lcd_send_cmd>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}

0800090e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000916:	e006      	b.n	8000926 <lcd_send_string+0x18>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff51 	bl	80007c8 <lcd_send_data>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f4      	bne.n	8000918 <lcd_send_string+0xa>
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <init_led_control_task>:
// Variabile pentru starea LED-urilor
static uint8_t led_states[3] = {0, 0, 0}; // 0 = OFF, 1 = ON

// Funcția pentru inițializarea LED-urilor și task-ului
void init_led_control_task(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
    // Creăm coada pentru mesaje
    ledQueue = xQueueCreate(10, sizeof(LedMessage));
 800093e:	2200      	movs	r2, #0
 8000940:	2102      	movs	r1, #2
 8000942:	200a      	movs	r0, #10
 8000944:	f007 fae7 	bl	8007f16 <xQueueGenericCreate>
 8000948:	4603      	mov	r3, r0
 800094a:	4a10      	ldr	r2, [pc, #64]	@ (800098c <init_led_control_task+0x54>)
 800094c:	6013      	str	r3, [r2, #0]
    if (ledQueue == NULL) {
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <init_led_control_task+0x54>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <init_led_control_task+0x26>
        printf("Failed to create LED queue\n");
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <init_led_control_task+0x58>)
 8000958:	f018 fc1c 	bl	8019194 <puts>
 800095c:	e012      	b.n	8000984 <init_led_control_task+0x4c>
        return;
    }

    // Atributele task-ului
    osThreadAttr_t ledTask_attributes = {
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2224      	movs	r2, #36	@ 0x24
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f018 fd73 	bl	8019450 <memset>
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <init_led_control_task+0x5c>)
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	2318      	movs	r3, #24
 8000976:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };

    // Creăm task-ul pentru controlul LED-urilor
    osThreadNew(led_control_task, NULL, &ledTask_attributes);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	461a      	mov	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <init_led_control_task+0x60>)
 8000980:	f006 fb6e 	bl	8007060 <osThreadNew>
}
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000200 	.word	0x20000200
 8000990:	0801b470 	.word	0x0801b470
 8000994:	0801b48c 	.word	0x0801b48c
 8000998:	0800099d 	.word	0x0800099d

0800099c <led_control_task>:

// Task-ul pentru controlul LED-urilor
void led_control_task(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    LedMessage message;

    // Inițializează LED-urile ca OUTPUT și le setează ca OFF
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED1 - PB0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	482e      	ldr	r0, [pc, #184]	@ (8000a64 <led_control_task+0xc8>)
 80009aa:	f002 fb73 	bl	8003094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  // LED2 - PB7
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	482c      	ldr	r0, [pc, #176]	@ (8000a64 <led_control_task+0xc8>)
 80009b4:	f002 fb6e 	bl	8003094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // LED3 - PB14
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009be:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <led_control_task+0xc8>)
 80009c0:	f002 fb68 	bl	8003094 <HAL_GPIO_WritePin>

    while (1) {
        // Așteaptă mesaje din coadă
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <led_control_task+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f107 010c 	add.w	r1, r7, #12
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	4618      	mov	r0, r3
 80009d2:	f007 fe7f 	bl	80086d4 <xQueueReceive>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d1f3      	bne.n	80009c4 <led_control_task+0x28>
            uint8_t led_index = (uint8_t)message.led;
 80009dc:	7b3b      	ldrb	r3, [r7, #12]
 80009de:	73fb      	strb	r3, [r7, #15]

            if (led_index < 3) {
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d8ee      	bhi.n	80009c4 <led_control_task+0x28>
                // Schimbă starea LED-ului
                led_states[led_index] ^= 1; // Toggle
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	4a20      	ldr	r2, [pc, #128]	@ (8000a6c <led_control_task+0xd0>)
 80009ea:	5cd2      	ldrb	r2, [r2, r3]
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	f082 0201 	eor.w	r2, r2, #1
 80009f2:	b2d1      	uxtb	r1, r2
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <led_control_task+0xd0>)
 80009f6:	54d1      	strb	r1, [r2, r3]
                GPIO_PinState pin_state = (led_states[led_index]) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <led_control_task+0xd0>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	73bb      	strb	r3, [r7, #14]

                switch (message.led) {
 8000a0a:	7b3b      	ldrb	r3, [r7, #12]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d014      	beq.n	8000a3a <led_control_task+0x9e>
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	dc1a      	bgt.n	8000a4a <led_control_task+0xae>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <led_control_task+0x82>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d007      	beq.n	8000a2c <led_control_task+0x90>
 8000a1c:	e015      	b.n	8000a4a <led_control_task+0xae>
                    case LED1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state); break;
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2101      	movs	r1, #1
 8000a24:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <led_control_task+0xc8>)
 8000a26:	f002 fb35 	bl	8003094 <HAL_GPIO_WritePin>
 8000a2a:	e00e      	b.n	8000a4a <led_control_task+0xae>
                    case LED2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); break;
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2180      	movs	r1, #128	@ 0x80
 8000a32:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <led_control_task+0xc8>)
 8000a34:	f002 fb2e 	bl	8003094 <HAL_GPIO_WritePin>
 8000a38:	e007      	b.n	8000a4a <led_control_task+0xae>
                    case LED3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); break;
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <led_control_task+0xc8>)
 8000a44:	f002 fb26 	bl	8003094 <HAL_GPIO_WritePin>
 8000a48:	bf00      	nop
                }

                printf("LED%d state: %s\n", led_index + 1, (pin_state == GPIO_PIN_SET) ? "ON" : "OFF");
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	1c59      	adds	r1, r3, #1
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d101      	bne.n	8000a58 <led_control_task+0xbc>
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <led_control_task+0xd4>)
 8000a56:	e000      	b.n	8000a5a <led_control_task+0xbe>
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <led_control_task+0xd8>)
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <led_control_task+0xdc>)
 8000a5e:	f018 fb31 	bl	80190c4 <iprintf>
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 8000a62:	e7af      	b.n	80009c4 <led_control_task+0x28>
 8000a64:	40020400 	.word	0x40020400
 8000a68:	20000200 	.word	0x20000200
 8000a6c:	20000204 	.word	0x20000204
 8000a70:	0801b49c 	.word	0x0801b49c
 8000a74:	0801b4a0 	.word	0x0801b4a0
 8000a78:	0801b4a4 	.word	0x0801b4a4

08000a7c <QueueInit>:
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */
QueueHandle_t sensorQueue;

void QueueInit(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	sensorQueue = xQueueCreate(1,sizeof(HumiditySensorData));
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	2001      	movs	r0, #1
 8000a86:	f007 fa46 	bl	8007f16 <xQueueGenericCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <QueueInit+0x2c>)
 8000a8e:	6013      	str	r3, [r2, #0]

	if(sensorQueue == NULL){
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <QueueInit+0x2c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <QueueInit+0x26>
		printf("stiva pentru senzor umiditate nu a putut fi intializata");
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <QueueInit+0x30>)
 8000a9a:	f018 fb13 	bl	80190c4 <iprintf>
		while(1){};
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <QueueInit+0x22>
	}

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200006e0 	.word	0x200006e0
 8000aac:	0801b4c4 	.word	0x0801b4c4

08000ab0 <_write>:
int _write(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 100);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	2364      	movs	r3, #100	@ 0x64
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <_write+0x24>)
 8000ac6:	f004 fd1d 	bl	8005504 <HAL_UART_Transmit>
	return len;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000208 	.word	0x20000208

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fe8f 	bl	80017fe <HAL_Init>
  QueueInit();
 8000ae0:	f7ff ffcc 	bl	8000a7c <QueueInit>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f822 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 f92e 	bl	8000d48 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000aec:	f000 f8be 	bl	8000c6c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000af0:	f000 f88c 	bl	8000c0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000af4:	f000 f8fa 	bl	8000cec <MX_USB_OTG_FS_PCD_Init>
  humiditySensorAdcInit();
 8000af8:	f7ff fd72 	bl	80005e0 <humiditySensorAdcInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000afc:	f006 fa1e 	bl	8006f3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <main+0x48>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <main+0x4c>)
 8000b06:	f006 faab 	bl	8007060 <osThreadNew>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <main+0x50>)
 8000b0e:	6013      	str	r3, [r2, #0]
  init_humidity_task();
 8000b10:	f7ff fe0c 	bl	800072c <init_humidity_task>
  init_led_control_task();
 8000b14:	f7ff ff10 	bl	8000938 <init_led_control_task>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b18:	f006 fa44 	bl	8006fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <main+0x44>
 8000b20:	0801eaf8 	.word	0x0801eaf8
 8000b24:	08000ea5 	.word	0x08000ea5
 8000b28:	200006dc 	.word	0x200006dc

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	@ 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2234      	movs	r2, #52	@ 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f018 fc88 	bl	8019450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b50:	f003 f81c 	bl	8003b8c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <SystemClock_Config+0xd8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	4a2a      	ldr	r2, [pc, #168]	@ (8000c04 <SystemClock_Config+0xd8>)
 8000b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b60:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <SystemClock_Config+0xd8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a25      	ldr	r2, [pc, #148]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b88:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b9c:	23d8      	movs	r3, #216	@ 0xd8
 8000b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba4:	2309      	movs	r3, #9
 8000ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 f84b 	bl	8003c4c <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bbc:	f000 f9ca 	bl	8000f54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc0:	f002 fff4 	bl	8003bac <HAL_PWREx_EnableOverDrive>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bca:	f000 f9c3 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bce:	230f      	movs	r3, #15
 8000bd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2107      	movs	r1, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fadb 	bl	80041a8 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bf8:	f000 f9ac 	bl	8000f54 <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3750      	adds	r7, #80	@ 0x50
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <MX_USART3_UART_Init+0x5c>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c50:	f004 fc0a 	bl	8005468 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c5a:	f000 f97b 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000208 	.word	0x20000208
 8000c68:	40004800 	.word	0x40004800

08000c6c <MX_I2C2_Init>:
static void MX_I2C2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_I2C2_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <MX_I2C2_Init+0x7c>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000ca8:	f002 fa0e 	bl	80030c8 <HAL_I2C_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cb2:	f000 f94f 	bl	8000f54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000cba:	f002 fd87 	bl	80037cc <HAL_I2CEx_ConfigAnalogFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 f946 	bl	8000f54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_I2C2_Init+0x74>)
 8000ccc:	f002 fdc9 	bl	8003862 <HAL_I2CEx_ConfigDigitalFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 f93d 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000028c 	.word	0x2000028c
 8000ce4:	40005800 	.word	0x40005800
 8000ce8:	20404768 	.word	0x20404768

08000cec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfa:	2206      	movs	r2, #6
 8000cfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d30:	f002 fde3 	bl	80038fa <HAL_PCD_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f90b 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200002d8 	.word	0x200002d8

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	@ 0x30
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a4c      	ldr	r2, [pc, #304]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a40      	ldr	r2, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b3b      	ldr	r3, [pc, #236]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a3a      	ldr	r2, [pc, #232]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a34      	ldr	r2, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a2e      	ldr	r2, [pc, #184]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_GPIO_Init+0x14c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e0c:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000e0e:	f002 f941 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2140      	movs	r1, #64	@ 0x40
 8000e16:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000e18:	f002 f93c 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0x158>)
 8000e34:	f001 ff82 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e38:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000e52:	f001 ff73 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000e6e:	f001 ff65 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000e86:	f001 ff59 	bl	8002d3c <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	@ 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000eac:	f005 fac0 	bl	8006430 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000eb0:	f000 fc68 	bl	8001784 <tcpserver_init>
  /* Infinite loop */
  lcd_init();
 8000eb4:	f7ff fcee 	bl	8000894 <lcd_init>

  char adc_str[16];    // Buffer pentru string-ul valorii ADC
  char humidity_str[16]; // Buffer pentru string-ul valorii de umiditate
  for(;;)
  {
	  if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <StartDefaultTask+0x80>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 fe06 	bl	8008ad4 <xQueuePeek>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d125      	bne.n	8000f1a <StartDefaultTask+0x76>
		    {
			    // Conversia valorilor în string
		    sprintf(adc_str, "ADC: %d", sensor_data.adc_value);         // Conversie pentru int
 8000ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	4914      	ldr	r1, [pc, #80]	@ (8000f28 <StartDefaultTask+0x84>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f018 f998 	bl	801920c <siprintf>
			    sprintf(humidity_str, "Hum: %.2f%%", sensor_data.humidity); // Conversie pentru float cu 2 zecimale
 8000edc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ee0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee4:	f107 0008 	add.w	r0, r7, #8
 8000ee8:	ec53 2b17 	vmov	r2, r3, d7
 8000eec:	490f      	ldr	r1, [pc, #60]	@ (8000f2c <StartDefaultTask+0x88>)
 8000eee:	f018 f98d 	bl	801920c <siprintf>
	//
			    lcd_clear();
 8000ef2:	f7ff fc99 	bl	8000828 <lcd_clear>
			    // Afișarea pe LCD
			    lcd_put_cur(0, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fcac 	bl	8000856 <lcd_put_cur>
			    lcd_send_string(adc_str);
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd03 	bl	800090e <lcd_send_string>
			    lcd_put_cur(1, 0);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fca3 	bl	8000856 <lcd_put_cur>
			    lcd_send_string(humidity_str);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fcfa 	bl	800090e <lcd_send_string>
		    }

		    vTaskDelay(1000);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f008 fb11 	bl	8009544 <vTaskDelay>
	  if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000f22:	e7c9      	b.n	8000eb8 <StartDefaultTask+0x14>
 8000f24:	200006e0 	.word	0x200006e0
 8000f28:	0801b4fc 	.word	0x0801b4fc
 8000f2c:	0801b504 	.word	0x0801b504

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f42:	f000 fc69 	bl	8001818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010000 	.word	0x40010000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210f      	movs	r1, #15
 8000f9a:	f06f 0001 	mvn.w	r0, #1
 8000f9e:	f000 fd37 	bl	8001a10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ae      	sub	sp, #184	@ 0xb8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2290      	movs	r2, #144	@ 0x90
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f018 fa3d 	bl	8019450 <memset>
  if(huart->Instance==USART3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <HAL_UART_MspInit+0xb4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13c      	bne.n	800105a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fb32 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffa:	f7ff ffab 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_UART_MspInit+0xb8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800102e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001048:	2307      	movs	r3, #7
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <HAL_UART_MspInit+0xbc>)
 8001056:	f001 fe71 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	37b8      	adds	r7, #184	@ 0xb8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ae      	sub	sp, #184	@ 0xb8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2290      	movs	r2, #144	@ 0x90
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f018 f9dd 	bl	8019450 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109e:	d159      	bne.n	8001154 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fad1 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010bc:	f7ff ff4a 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_PCD_MspInit+0xec>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4a25      	ldr	r2, [pc, #148]	@ (800115c <HAL_PCD_MspInit+0xec>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80010cc:	4b23      	ldr	r3, [pc, #140]	@ (800115c <HAL_PCD_MspInit+0xec>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f2:	230a      	movs	r3, #10
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4818      	ldr	r0, [pc, #96]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 8001100:	f001 fe1c 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800111c:	4619      	mov	r1, r3
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <HAL_PCD_MspInit+0xf0>)
 8001120:	f001 fe0c 	bl	8002d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_PCD_MspInit+0xec>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <HAL_PCD_MspInit+0xec>)
 800112a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800112e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_PCD_MspInit+0xec>)
 8001132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <HAL_PCD_MspInit+0xec>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_PCD_MspInit+0xec>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001146:	6453      	str	r3, [r2, #68]	@ 0x44
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <HAL_PCD_MspInit+0xec>)
 800114a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	37b8      	adds	r7, #184	@ 0xb8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0ae      	sub	sp, #184	@ 0xb8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2290      	movs	r2, #144	@ 0x90
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f018 f963 	bl	8019450 <memset>
  if(hi2c->Instance==I2C2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <HAL_I2C_MspInit+0xb0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d13b      	bne.n	800120c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001198:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800119a:	2300      	movs	r3, #0
 800119c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fa58 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ae:	f7ff fed1 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <HAL_I2C_MspInit+0xb8>)
 80011f0:	f001 fda4 	bl	8002d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 80011fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_I2C_MspInit+0xb4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800120c:	bf00      	nop
 800120e:	37b8      	adds	r7, #184	@ 0xb8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005800 	.word	0x40005800
 8001218:	40023800 	.word	0x40023800
 800121c:	40021400 	.word	0x40021400

08001220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2019      	movs	r0, #25
 8001236:	f000 fbeb 	bl	8001a10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800123a:	2019      	movs	r0, #25
 800123c:	f000 fc04 	bl	8001a48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001240:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HAL_InitTick+0xa0>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001244:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <HAL_InitTick+0xa0>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6453      	str	r3, [r2, #68]	@ 0x44
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_InitTick+0xa0>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001258:	f107 0210 	add.w	r2, r7, #16
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f003 f9c6 	bl	80045f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001268:	f003 f9b0 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 800126c:	4603      	mov	r3, r0
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <HAL_InitTick+0xa4>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3b01      	subs	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_InitTick+0xa8>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <HAL_InitTick+0xac>)
 8001284:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_InitTick+0xa8>)
 8001288:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800128c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_InitTick+0xa8>)
 8001290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001292:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_InitTick+0xa8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_InitTick+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <HAL_InitTick+0xa8>)
 80012a2:	f003 fe01 	bl	8004ea8 <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d104      	bne.n	80012b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012ac:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <HAL_InitTick+0xa8>)
 80012ae:	f003 fe5d 	bl	8004f6c <HAL_TIM_Base_Start_IT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3730      	adds	r7, #48	@ 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	200006e4 	.word	0x200006e4
 80012cc:	40010000 	.word	0x40010000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <NMI_Handler+0x4>

080012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <MemManage_Handler+0x4>

080012e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800130e:	f003 fea5 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200006e4 	.word	0x200006e4

0800131c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <ETH_IRQHandler+0x10>)
 8001322:	f000 ff7d 	bl	8002220 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20003e64 	.word	0x20003e64

08001330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	return 1;
 8001334:	2301      	movs	r3, #1
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_kill>:

int _kill(int pid, int sig)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <_kill+0x20>)
 800134c:	2216      	movs	r2, #22
 800134e:	601a      	str	r2, [r3, #0]
	return -1;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	2000e274 	.word	0x2000e274

08001364 <_exit>:

void _exit (int status)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffe5 	bl	8001340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001376:	bf00      	nop
 8001378:	e7fd      	b.n	8001376 <_exit+0x12>

0800137a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e00a      	b.n	80013a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800138c:	f3af 8000 	nop.w
 8001390:	4601      	mov	r1, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	60ba      	str	r2, [r7, #8]
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf0      	blt.n	800138c <_read+0x12>
	}

return len;
 80013aa:	687b      	ldr	r3, [r7, #4]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013dc:	605a      	str	r2, [r3, #4]
	return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_isatty>:

int _isatty(int file)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
	return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d205      	bcs.n	8001458 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <_sbrk+0x6c>)
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	20080000 	.word	0x20080000
 800147c:	00000400 	.word	0x00000400
 8001480:	20000730 	.word	0x20000730
 8001484:	2000e3c8 	.word	0x2000e3c8
 8001488:	2000e274 	.word	0x2000e274

0800148c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <get_humidity_value>:
static struct netbuf *buf;
char msg[512];
char smsg[1024];

 float get_humidity_value(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
    HumiditySensorData sensor_data;
    // Verificăm dacă valoarea există în coadă
    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <get_humidity_value+0x30>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4639      	mov	r1, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 fb08 	bl	8008ad4 <xQueuePeek>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <get_humidity_value+0x1e>
    {
        return sensor_data.humidity; // Returnăm valoarea umidității
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	e000      	b.n	80014d0 <get_humidity_value+0x20>
    }
    return -1.0f; // Dacă nu sunt date, returnăm o valoare invalidă
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <get_humidity_value+0x34>)
}
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200006e0 	.word	0x200006e0
 80014e4:	bf800000 	.word	0xbf800000

080014e8 <process_http_request>:

// Funcție pentru a analiza cererea HTTP
static void process_http_request(const char *request, char *response)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a2      	sub	sp, #136	@ 0x88
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 80014f2:	494e      	ldr	r1, [pc, #312]	@ (800162c <process_http_request+0x144>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f017 ffd5 	bl	80194a4 <strstr>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01d      	beq.n	800153c <process_http_request+0x54>
    {
        // Obținem valoarea umidității
        float humidity = get_humidity_value();
 8001500:	f7ff ffd6 	bl	80014b0 <get_humidity_value>
 8001504:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

        // Pregătește răspunsul
        char humidity_str[100];
        snprintf(humidity_str, sizeof(humidity_str), "%.2f", humidity);
 8001508:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800150c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	ed8d 7b00 	vstr	d7, [sp]
 8001518:	4a45      	ldr	r2, [pc, #276]	@ (8001630 <process_http_request+0x148>)
 800151a:	2164      	movs	r1, #100	@ 0x64
 800151c:	4618      	mov	r0, r3
 800151e:	f017 fe41 	bl	80191a4 <sniprintf>

        const char *http_response =
 8001522:	4b44      	ldr	r3, [pc, #272]	@ (8001634 <process_http_request+0x14c>)
 8001524:	673b      	str	r3, [r7, #112]	@ 0x70
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n";
        strcpy(response, http_response);
 8001526:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f018 f842 	bl	80195b2 <strcpy>
        strcat(response, humidity_str);
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f017 ff93 	bl	8019460 <strcat>
 800153a:	e073      	b.n	8001624 <process_http_request+0x13c>
    }
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 800153c:	493e      	ldr	r1, [pc, #248]	@ (8001638 <process_http_request+0x150>)
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f017 ffb0 	bl	80194a4 <strstr>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d066      	beq.n	8001618 <process_http_request+0x130>
    {
        // Găsește corpul cererii
        const char *body = strstr(request, "\r\n\r\n");
 800154a:	493c      	ldr	r1, [pc, #240]	@ (800163c <process_http_request+0x154>)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f017 ffa9 	bl	80194a4 <strstr>
 8001552:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (body != NULL)
 8001554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001556:	2b00      	cmp	r3, #0
 8001558:	d057      	beq.n	800160a <process_http_request+0x122>
        {
            body += 4;
 800155a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800155c:	3304      	adds	r3, #4
 800155e:	67bb      	str	r3, [r7, #120]	@ 0x78

            LedMessage message;
            if (strstr(body, "led=1") != NULL)
 8001560:	4937      	ldr	r1, [pc, #220]	@ (8001640 <process_http_request+0x158>)
 8001562:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001564:	f017 ff9e 	bl	80194a4 <strstr>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <process_http_request+0x8e>
            {
                message.led = LED1;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001574:	e01c      	b.n	80015b0 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=2") != NULL)
 8001576:	4933      	ldr	r1, [pc, #204]	@ (8001644 <process_http_request+0x15c>)
 8001578:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800157a:	f017 ff93 	bl	80194a4 <strstr>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <process_http_request+0xa4>
            {
                message.led = LED2;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800158a:	e011      	b.n	80015b0 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=3") != NULL)
 800158c:	492e      	ldr	r1, [pc, #184]	@ (8001648 <process_http_request+0x160>)
 800158e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001590:	f017 ff88 	bl	80194a4 <strstr>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <process_http_request+0xba>
            {
                message.led = LED3;
 800159a:	2302      	movs	r3, #2
 800159c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80015a0:	e006      	b.n	80015b0 <process_http_request+0xc8>
            }
            else
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nInvalid LED ID");
 80015a2:	4a2a      	ldr	r2, [pc, #168]	@ (800164c <process_http_request+0x164>)
 80015a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f017 fdfb 	bl	80191a4 <sniprintf>
                return;
 80015ae:	e039      	b.n	8001624 <process_http_request+0x13c>
            }

            if (strstr(body, "toggle=1") != NULL)
 80015b0:	4927      	ldr	r1, [pc, #156]	@ (8001650 <process_http_request+0x168>)
 80015b2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80015b4:	f017 ff76 	bl	80194a4 <strstr>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <process_http_request+0xf4>
            {
                message.toggle = 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
                return;
            }

            if (xQueueSendToBack(ledQueue, &message, 0) != pdTRUE)
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <process_http_request+0x16c>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	f006 fe3a 	bl	8008248 <xQueueGenericSend>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00e      	beq.n	80015f8 <process_http_request+0x110>
 80015da:	e006      	b.n	80015ea <process_http_request+0x102>
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
 80015dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001658 <process_http_request+0x170>)
 80015de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f017 fdde 	bl	80191a4 <sniprintf>
                return;
 80015e8:	e01c      	b.n	8001624 <process_http_request+0x13c>
            {
                snprintf(response, 256, "HTTP/1.1 500 Internal Server Error\r\n\r\nQueue full");
 80015ea:	4a1c      	ldr	r2, [pc, #112]	@ (800165c <process_http_request+0x174>)
 80015ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f017 fdd7 	bl	80191a4 <sniprintf>
                return;
 80015f6:	e015      	b.n	8001624 <process_http_request+0x13c>
            }

            snprintf(response, 256, "HTTP/1.1 200 OK\r\n\r\nLED %d toggled", message.led);
 80015f8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80015fc:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <process_http_request+0x178>)
 80015fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f017 fdce 	bl	80191a4 <sniprintf>
 8001608:	e00c      	b.n	8001624 <process_http_request+0x13c>
        }
        else
        {
            snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nNo body found");
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <process_http_request+0x17c>)
 800160c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f017 fdc7 	bl	80191a4 <sniprintf>
 8001616:	e005      	b.n	8001624 <process_http_request+0x13c>
        }
    }
    else
    {
        const char *http_response =
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <process_http_request+0x180>)
 800161a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
 800161c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f017 ffc7 	bl	80195b2 <strcpy>
    }
}
 8001624:	3780      	adds	r7, #128	@ 0x80
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	0801b510 	.word	0x0801b510
 8001630:	0801b520 	.word	0x0801b520
 8001634:	0801b528 	.word	0x0801b528
 8001638:	0801b568 	.word	0x0801b568
 800163c:	0801b578 	.word	0x0801b578
 8001640:	0801b580 	.word	0x0801b580
 8001644:	0801b588 	.word	0x0801b588
 8001648:	0801b590 	.word	0x0801b590
 800164c:	0801b598 	.word	0x0801b598
 8001650:	0801b5c4 	.word	0x0801b5c4
 8001654:	20000200 	.word	0x20000200
 8001658:	0801b5d0 	.word	0x0801b5d0
 800165c:	0801b604 	.word	0x0801b604
 8001660:	0801b638 	.word	0x0801b638
 8001664:	0801b65c 	.word	0x0801b65c
 8001668:	0801b688 	.word	0x0801b688

0800166c <tcp_thread>:


// Funcția principală a serverului TCP
static void tcp_thread(void *arg)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;

    // Creează o conexiune TCP
    conn = netconn_new(NETCONN_TCP);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2010      	movs	r0, #16
 800167a:	f009 fdb5 	bl	800b1e8 <netconn_new_with_proto_and_callback>
 800167e:	4603      	mov	r3, r0
 8001680:	4a37      	ldr	r2, [pc, #220]	@ (8001760 <tcp_thread+0xf4>)
 8001682:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <tcp_thread+0xf4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d065      	beq.n	8001758 <tcp_thread+0xec>
    {
        // Leagă conexiunea de portul 80 (HTTP default)
        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <tcp_thread+0xf4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2250      	movs	r2, #80	@ 0x50
 8001692:	4934      	ldr	r1, [pc, #208]	@ (8001764 <tcp_thread+0xf8>)
 8001694:	4618      	mov	r0, r3
 8001696:	f009 fe61 	bl	800b35c <netconn_bind>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d150      	bne.n	8001748 <tcp_thread+0xdc>
        {
            // Intră în modul de ascultare
            netconn_listen(conn);
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <tcp_thread+0xf4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	21ff      	movs	r1, #255	@ 0xff
 80016ac:	4618      	mov	r0, r3
 80016ae:	f009 fe8d 	bl	800b3cc <netconn_listen_with_backlog>

            while (1)
            {
                // Acceptă o nouă conexiune
                accept_err = netconn_accept(conn, &newconn);
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <tcp_thread+0xf4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	492c      	ldr	r1, [pc, #176]	@ (8001768 <tcp_thread+0xfc>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f009 feb3 	bl	800b424 <netconn_accept>
 80016be:	4603      	mov	r3, r0
 80016c0:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 80016c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d13a      	bne.n	8001740 <tcp_thread+0xd4>
                {
                    // Primește date de la client
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 80016ca:	e02f      	b.n	800172c <tcp_thread+0xc0>
                    {
                        // Procesează cererea HTTP
                        strncpy(msg, buf->p->payload, buf->p->len);  // Extrage cererea
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <tcp_thread+0x100>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <tcp_thread+0x100>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	895b      	ldrh	r3, [r3, #10]
 80016dc:	461a      	mov	r2, r3
 80016de:	4824      	ldr	r0, [pc, #144]	@ (8001770 <tcp_thread+0x104>)
 80016e0:	f017 fecd 	bl	801947e <strncpy>

                        // Print pentru debug
                        printf("Received request: %s\n", msg);
 80016e4:	4922      	ldr	r1, [pc, #136]	@ (8001770 <tcp_thread+0x104>)
 80016e6:	4823      	ldr	r0, [pc, #140]	@ (8001774 <tcp_thread+0x108>)
 80016e8:	f017 fcec 	bl	80190c4 <iprintf>

                        // Pregătește răspunsul HTTP
                        process_http_request(msg, smsg);
 80016ec:	4922      	ldr	r1, [pc, #136]	@ (8001778 <tcp_thread+0x10c>)
 80016ee:	4820      	ldr	r0, [pc, #128]	@ (8001770 <tcp_thread+0x104>)
 80016f0:	f7ff fefa 	bl	80014e8 <process_http_request>

                        // Trimite răspunsul la client
                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <tcp_thread+0xfc>)
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	481f      	ldr	r0, [pc, #124]	@ (8001778 <tcp_thread+0x10c>)
 80016fa:	f7fe fdf1 	bl	80002e0 <strlen>
 80016fe:	4602      	mov	r2, r0
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	491c      	ldr	r1, [pc, #112]	@ (8001778 <tcp_thread+0x10c>)
 8001708:	4620      	mov	r0, r4
 800170a:	f00a f90d 	bl	800b928 <netconn_write_partly>

                        // Curăță bufferul
                        netbuf_delete(buf);
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <tcp_thread+0x100>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fe08 	bl	800d328 <netbuf_delete>

                        // Închide și șterge conexiunea după fiecare răspuns
                        netconn_close(newconn);
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <tcp_thread+0xfc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f00a fa05 	bl	800bb2c <netconn_close>
                        netconn_delete(newconn);
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <tcp_thread+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f009 fdfc 	bl	800b324 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <tcp_thread+0xfc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <tcp_thread+0x100>)
 8001732:	4618      	mov	r0, r3
 8001734:	f00a f87e 	bl	800b834 <netconn_recv>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0c6      	beq.n	80016cc <tcp_thread+0x60>
 800173e:	e7b8      	b.n	80016b2 <tcp_thread+0x46>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 8001740:	480e      	ldr	r0, [pc, #56]	@ (800177c <tcp_thread+0x110>)
 8001742:	f017 fd27 	bl	8019194 <puts>
                accept_err = netconn_accept(conn, &newconn);
 8001746:	e7b4      	b.n	80016b2 <tcp_thread+0x46>
                }
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <tcp_thread+0x114>)
 800174a:	f017 fd23 	bl	8019194 <puts>
            netconn_delete(conn);
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <tcp_thread+0xf4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f009 fde6 	bl	800b324 <netconn_delete>
        }
    }
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000734 	.word	0x20000734
 8001764:	0801ec48 	.word	0x0801ec48
 8001768:	20000738 	.word	0x20000738
 800176c:	2000073c 	.word	0x2000073c
 8001770:	20000740 	.word	0x20000740
 8001774:	0801b6e8 	.word	0x0801b6e8
 8001778:	20000940 	.word	0x20000940
 800177c:	0801b700 	.word	0x0801b700
 8001780:	0801b71c 	.word	0x0801b71c

08001784 <tcpserver_init>:

// Funcția de inițializare
void tcpserver_init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 800178a:	2318      	movs	r3, #24
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001792:	2200      	movs	r2, #0
 8001794:	4903      	ldr	r1, [pc, #12]	@ (80017a4 <tcpserver_init+0x20>)
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <tcpserver_init+0x24>)
 8001798:	f016 ff1e 	bl	80185d8 <sys_thread_new>
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800166d 	.word	0x0800166d
 80017a8:	0801b738 	.word	0x0801b738

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b2:	490e      	ldr	r1, [pc, #56]	@ (80017ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b4:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c8:	4c0b      	ldr	r4, [pc, #44]	@ (80017f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d6:	f7ff fe59 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f017 fec3 	bl	8019564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff f97b 	bl	8000ad8 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80017f0:	0801f034 	.word	0x0801f034
  ldr r2, =_sbss
 80017f4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80017f8:	2000e3c4 	.word	0x2000e3c4

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>

080017fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f000 f8f9 	bl	80019fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001808:	200f      	movs	r0, #15
 800180a:	f7ff fd09 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180e:	f7ff fba7 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	20000d40 	.word	0x20000d40

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000d40 	.word	0x20000d40

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x40>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x40>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	05fa0000 	.word	0x05fa0000

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	@ (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	@ (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff4c 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a22:	f7ff ff61 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	6978      	ldr	r0, [r7, #20]
 8001a2e:	f7ff ffb1 	bl	8001994 <NVIC_EncodePriority>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff80 	bl	8001940 <__NVIC_SetPriority>
}
 8001a40:	bf00      	nop
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff54 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001a74:	4ba0      	ldr	r3, [pc, #640]	@ (8001cf8 <HAL_ETH_Init+0x294>)
 8001a76:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e180      	b.n	8001d8c <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f004 fe28 	bl	80066f4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4b95      	ldr	r3, [pc, #596]	@ (8001cfc <HAL_ETH_Init+0x298>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa8:	4a94      	ldr	r2, [pc, #592]	@ (8001cfc <HAL_ETH_Init+0x298>)
 8001aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab0:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <HAL_ETH_Init+0x298>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001abc:	4b90      	ldr	r3, [pc, #576]	@ (8001d00 <HAL_ETH_Init+0x29c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a8f      	ldr	r2, [pc, #572]	@ (8001d00 <HAL_ETH_Init+0x29c>)
 8001ac2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ac6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8001d00 <HAL_ETH_Init+0x29c>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	498b      	ldr	r1, [pc, #556]	@ (8001d00 <HAL_ETH_Init+0x29c>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aec:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aee:	f7ff fea7 	bl	8001840 <HAL_GetTick>
 8001af2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001af4:	e011      	b.n	8001b1a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001af6:	f7ff fea3 	bl	8001840 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b04:	d909      	bls.n	8001b1a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e138      	b.n	8001d8c <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e4      	bne.n	8001af6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f023 031c 	bic.w	r3, r3, #28
 8001b3a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b3c:	f002 fd26 	bl	800458c <HAL_RCC_GetHCLKFreq>
 8001b40:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4a6f      	ldr	r2, [pc, #444]	@ (8001d04 <HAL_ETH_Init+0x2a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d908      	bls.n	8001b5c <HAL_ETH_Init+0xf8>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d08 <HAL_ETH_Init+0x2a4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d804      	bhi.n	8001b5c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e027      	b.n	8001bac <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8001d08 <HAL_ETH_Init+0x2a4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d908      	bls.n	8001b76 <HAL_ETH_Init+0x112>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4a64      	ldr	r2, [pc, #400]	@ (8001cf8 <HAL_ETH_Init+0x294>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d204      	bcs.n	8001b76 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f043 030c 	orr.w	r3, r3, #12
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	e01a      	b.n	8001bac <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf8 <HAL_ETH_Init+0x294>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d303      	bcc.n	8001b86 <HAL_ETH_Init+0x122>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4a62      	ldr	r2, [pc, #392]	@ (8001d0c <HAL_ETH_Init+0x2a8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d911      	bls.n	8001baa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4a60      	ldr	r2, [pc, #384]	@ (8001d0c <HAL_ETH_Init+0x2a8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_ETH_Init+0x13c>
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4a5f      	ldr	r2, [pc, #380]	@ (8001d10 <HAL_ETH_Init+0x2ac>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d804      	bhi.n	8001ba0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e005      	b.n	8001bac <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e000      	b.n	8001bac <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001baa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001bb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bb8:	2100      	movs	r1, #0
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fc10 	bl	80023e0 <HAL_ETH_WritePHYRegister>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001bca:	6939      	ldr	r1, [r7, #16]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fdc5 	bl	800275c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0d6      	b.n	8001d8c <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001bde:	20ff      	movs	r0, #255	@ 0xff
 8001be0:	f7ff fe3a 	bl	8001858 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a4 	beq.w	8001d36 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bee:	f7ff fe27 	bl	8001840 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fb87 	bl	8002310 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001c02:	f7ff fe1d 	bl	8001840 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d90f      	bls.n	8001c34 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fd9e 	bl	800275c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0ab      	b.n	8001d8c <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0da      	beq.n	8001bf4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001c3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c42:	2100      	movs	r1, #0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fbcb 	bl	80023e0 <HAL_ETH_WritePHYRegister>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fd80 	bl	800275c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c64:	2301      	movs	r3, #1
 8001c66:	e091      	b.n	8001d8c <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff fdea 	bl	8001840 <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	461a      	mov	r2, r3
 8001c74:	2101      	movs	r1, #1
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fb4a 	bl	8002310 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c7c:	f7ff fde0 	bl	8001840 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d90f      	bls.n	8001cae <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fd61 	bl	800275c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e06e      	b.n	8001d8c <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0da      	beq.n	8001c6e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fb25 	bl	8002310 <HAL_ETH_ReadPHYRegister>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cd0:	6939      	ldr	r1, [r7, #16]
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fd42 	bl	800275c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e053      	b.n	8001d8c <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	e010      	b.n	8001d1a <HAL_ETH_Init+0x2b6>
 8001cf8:	03938700 	.word	0x03938700
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	01312cff 	.word	0x01312cff
 8001d08:	02160ebf 	.word	0x02160ebf
 8001d0c:	05f5e0ff 	.word	0x05f5e0ff
 8001d10:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	e026      	b.n	8001d7a <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e021      	b.n	8001d7a <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fb46 	bl	80023e0 <HAL_ETH_WritePHYRegister>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d5e:	6939      	ldr	r1, [r7, #16]
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fcfb 	bl	800275c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d72:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001d76:	f7ff fd6f 	bl	8001858 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d7a:	6939      	ldr	r1, [r7, #16]
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fced 	bl	800275c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ETH_DMATxDescListInit+0x20>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e051      	b.n	8001e58 <HAL_ETH_DMATxDescListInit+0xc4>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e030      	b.n	8001e32 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d208      	bcs.n	8001e26 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	015b      	lsls	r3, r3, #5
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	e002      	b.n	8001e2c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3ca      	bcc.n	8001dd0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e44:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_ETH_DMARxDescListInit+0x20>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e055      	b.n	8001f30 <HAL_ETH_DMARxDescListInit+0xcc>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e034      	b.n	8001f0a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001eb0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001eb8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d208      	bcs.n	8001efe <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	e002      	b.n	8001f04 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3c6      	bcc.n	8001ea0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f1c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ETH_TransmitFrame+0x24>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0cc      	b.n	80020fa <HAL_ETH_TransmitFrame+0x1be>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0b7      	b.n	80020fa <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da09      	bge.n	8001fa8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2212      	movs	r2, #18
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0a8      	b.n	80020fa <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d915      	bls.n	8001fde <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4a54      	ldr	r2, [pc, #336]	@ (8002108 <HAL_ETH_TransmitFrame+0x1cc>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0a9b      	lsrs	r3, r3, #10
 8001fbc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	4b51      	ldr	r3, [pc, #324]	@ (8002108 <HAL_ETH_TransmitFrame+0x1cc>)
 8001fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e001      	b.n	8001fe2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d11c      	bne.n	8002022 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001ff6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002002:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002012:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002020:	e04b      	b.n	80020ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e044      	b.n	80020b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002036:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800204c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002056:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3b01      	subs	r3, #1
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d116      	bne.n	8002090 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002070:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	4a25      	ldr	r2, [pc, #148]	@ (800210c <HAL_ETH_TransmitFrame+0x1d0>)
 8002076:	fb03 f202 	mul.w	r2, r3, r2
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8002082:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800208e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800209e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	3301      	adds	r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3b6      	bcc.n	8002028 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	461a      	mov	r2, r3
 80020d6:	2304      	movs	r3, #4
 80020d8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	461a      	mov	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	ac02b00b 	.word	0xac02b00b
 800210c:	fffffa0c 	.word	0xfffffa0c

08002110 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002126:	2302      	movs	r3, #2
 8002128:	e074      	b.n	8002214 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800213a:	e05a      	b.n	80021f2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002150:	d10d      	bne.n	800216e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
 800216c:	e041      	b.n	80021f2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
 8002192:	e02e      	b.n	80021f2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d103      	bne.n	80021b6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80021c2:	1f1a      	subs	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e010      	b.n	8002214 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db02      	blt.n	8002202 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d99c      	bls.n	800213c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002236:	2b40      	cmp	r3, #64	@ 0x40
 8002238:	d112      	bne.n	8002260 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f004 fb1a 	bl	8006874 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800225e:	e01a      	b.n	8002296 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d111      	bne.n	8002296 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f838 	bl	80022e8 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002280:	461a      	mov	r2, r3
 8002282:	2301      	movs	r3, #1
 8002284:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800229e:	461a      	mov	r2, r3
 80022a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022a4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b8:	d112      	bne.n	80022e0 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f81e 	bl	80022fc <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c8:	461a      	mov	r2, r3
 80022ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ce:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	460b      	mov	r3, r1
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b82      	cmp	r3, #130	@ 0x82
 8002330:	d101      	bne.n	8002336 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e050      	b.n	80023d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2282      	movs	r2, #130	@ 0x82
 800233a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 031c 	and.w	r3, r3, #28
 800234c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8a1b      	ldrh	r3, [r3, #16]
 8002352:	02db      	lsls	r3, r3, #11
 8002354:	b29b      	uxth	r3, r3
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 0302 	bic.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002382:	f7ff fa5d 	bl	8001840 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002388:	e015      	b.n	80023b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800238a:	f7ff fa59 	bl	8001840 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002398:	d309      	bcc.n	80023ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e014      	b.n	80023d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e4      	bne.n	800238a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	460b      	mov	r3, r1
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b42      	cmp	r3, #66	@ 0x42
 8002400:	d101      	bne.n	8002406 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e04e      	b.n	80024a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2242      	movs	r2, #66	@ 0x42
 800240a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 031c 	and.w	r3, r3, #28
 800241c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8a1b      	ldrh	r3, [r3, #16]
 8002422:	02db      	lsls	r3, r3, #11
 8002424:	b29b      	uxth	r3, r3
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800245c:	f7ff f9f0 	bl	8001840 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002462:	e015      	b.n	8002490 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002464:	f7ff f9ec 	bl	8001840 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002472:	d309      	bcc.n	8002488 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e00d      	b.n	80024a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e4      	bne.n	8002464 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ETH_Start+0x16>
 80024be:	2302      	movs	r3, #2
 80024c0:	e01f      	b.n	8002502 <HAL_ETH_Start+0x56>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fb40 	bl	8002b58 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fb77 	bl	8002bcc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fc06 	bl	8002cf0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fbab 	bl	8002c40 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fbd4 	bl	8002c98 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_ETH_Stop+0x16>
 800251c:	2302      	movs	r3, #2
 800251e:	e01f      	b.n	8002560 <HAL_ETH_Stop+0x56>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fb9b 	bl	8002c6c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fbc4 	bl	8002cc4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb62 	bl	8002c06 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fbd4 	bl	8002cf0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fb22 	bl	8002b92 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_ETH_ConfigMAC+0x1c>
 8002580:	2302      	movs	r3, #2
 8002582:	e0e4      	b.n	800274e <HAL_ETH_ConfigMAC+0x1e6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80b1 	beq.w	80026fe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002758 <HAL_ETH_ConfigMAC+0x1f0>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80025ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80025c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80025c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80025cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80025d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80025d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80025de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80025e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80025ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 80025f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 80025f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800260e:	2001      	movs	r0, #1
 8002610:	f7ff f922 	bl	8001858 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002624:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 800262a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8002630:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 8002636:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 800263c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8002642:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800264e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002650:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff f8fc 	bl	8001858 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002670:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800267a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002692:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002698:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 800269e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 80026a4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 80026aa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 80026b0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff f8c5 	bl	8001858 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff f8b2 	bl	8001858 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	61da      	str	r2, [r3, #28]
 80026fc:	e01e      	b.n	800273c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800270c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800272e:	2001      	movs	r0, #1
 8002730:	f7ff f892 	bl	8001858 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	ff20810f 	.word	0xff20810f

0800275c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0b0      	sub	sp, #192	@ 0xc0
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002778:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002780:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800278a:	2300      	movs	r3, #0
 800278c:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80027a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a8:	e001      	b.n	80027ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80027ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027b8:	2300      	movs	r3, #0
 80027ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80027c8:	2340      	movs	r3, #64	@ 0x40
 80027ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002830:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002834:	4ba9      	ldr	r3, [pc, #676]	@ (8002adc <ETH_MACDMAConfig+0x380>)
 8002836:	4013      	ands	r3, r2
 8002838:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800283c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 800283e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002840:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8002844:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8002848:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800284e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8002852:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 8002856:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800285c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800285e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8002860:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8002864:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8002868:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800286a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800286c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800286e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8002870:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002872:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002884:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002890:	2001      	movs	r0, #1
 8002892:	f7fe ffe1 	bl	8001858 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800289e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80028a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80028a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 80028a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80028aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 80028ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80028b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 80028b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80028b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 80028ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80028bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 80028c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80028c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80028cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7fe ffbc 	bl	8001858 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80028e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80028fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002908:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800290c:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002910:	4013      	ands	r3, r2
 8002912:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800291a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800291c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002920:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002926:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 800292c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800292e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002932:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002938:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800293a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800294c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002958:	2001      	movs	r0, #1
 800295a:	f7fe ff7d 	bl	8001858 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002966:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002968:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 800296c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002982:	2001      	movs	r0, #1
 8002984:	f7fe ff68 	bl	8001858 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002990:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800299a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80029a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029a4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80029b6:	2304      	movs	r3, #4
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80029ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80029c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029ca:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029da:	2300      	movs	r3, #0
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80029f0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <ETH_MACDMAConfig+0x384>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029f8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80029fa:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029fc:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80029fe:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002a00:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002a02:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002a04:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002a06:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002a08:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002a0a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002a0c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002a10:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002a14:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002a18:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a32:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7fe ff08 	bl	8001858 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	461a      	mov	r2, r3
 8002a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a56:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a5c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8002a60:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a64:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8002a68:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a6c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a6e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a72:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a80:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe fee1 	bl	8001858 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aa4:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10b      	bne.n	8002ac6 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab6:	69d9      	ldr	r1, [r3, #28]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <ETH_MACDMAConfig+0x388>)
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ac4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	461a      	mov	r2, r3
 8002acc:	2100      	movs	r1, #0
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f80a 	bl	8002ae8 <ETH_MACAddressConfig>
}
 8002ad4:	bf00      	nop
 8002ad6:	37c0      	adds	r7, #192	@ 0xc0
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ff20810f 	.word	0xff20810f
 8002ae0:	f8de3f23 	.word	0xf8de3f23
 8002ae4:	00010040 	.word	0x00010040

08002ae8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3305      	adds	r3, #5
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	3204      	adds	r2, #4
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <ETH_MACAddressConfig+0x68>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3303      	adds	r3, #3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	061a      	lsls	r2, r3, #24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3301      	adds	r3, #1
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <ETH_MACAddressConfig+0x6c>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	6013      	str	r3, [r2, #0]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40028040 	.word	0x40028040
 8002b54:	40028044 	.word	0x40028044

08002b58 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7fe fe6b 	bl	8001858 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0208 	bic.w	r2, r2, #8
 8002bac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fe fe4e 	bl	8001858 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0204 	orr.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe fe31 	bl	8001858 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7fe fe14 	bl	8001858 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c5e:	6193      	str	r3, [r2, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c8a:	6193      	str	r3, [r2, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb6:	6193      	str	r3, [r2, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	f023 0302 	bic.w	r3, r3, #2
 8002cde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ce2:	6193      	str	r3, [r2, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d12:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe fd99 	bl	8001858 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d30:	6193      	str	r3, [r2, #24]
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e175      	b.n	8003048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 8164 	bne.w	8003042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <HAL_GPIO_Init+0x56>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d017      	beq.n	8002e30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d123      	bne.n	8002e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80be 	beq.w	8003042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ede:	4a61      	ldr	r2, [pc, #388]	@ (8003064 <HAL_GPIO_Init+0x328>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a58      	ldr	r2, [pc, #352]	@ (8003068 <HAL_GPIO_Init+0x32c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d037      	beq.n	8002f7a <HAL_GPIO_Init+0x23e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	@ (800306c <HAL_GPIO_Init+0x330>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_GPIO_Init+0x23a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a56      	ldr	r2, [pc, #344]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x236>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a55      	ldr	r2, [pc, #340]	@ (8003074 <HAL_GPIO_Init+0x338>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d025      	beq.n	8002f6e <HAL_GPIO_Init+0x232>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a54      	ldr	r2, [pc, #336]	@ (8003078 <HAL_GPIO_Init+0x33c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <HAL_GPIO_Init+0x22e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a53      	ldr	r2, [pc, #332]	@ (800307c <HAL_GPIO_Init+0x340>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x22a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a52      	ldr	r2, [pc, #328]	@ (8003080 <HAL_GPIO_Init+0x344>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	@ (8003084 <HAL_GPIO_Init+0x348>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x222>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a50      	ldr	r2, [pc, #320]	@ (8003088 <HAL_GPIO_Init+0x34c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x21e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800308c <HAL_GPIO_Init+0x350>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f52:	2309      	movs	r3, #9
 8002f54:	e012      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f56:	230a      	movs	r3, #10
 8002f58:	e010      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	e00e      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f5e:	2307      	movs	r3, #7
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f62:	2306      	movs	r3, #6
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x240>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	@ (8003064 <HAL_GPIO_Init+0x328>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a34      	ldr	r2, [pc, #208]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b32      	ldr	r3, [pc, #200]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a29      	ldr	r2, [pc, #164]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <HAL_GPIO_Init+0x354>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_GPIO_Init+0x354>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <HAL_GPIO_Init+0x354>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae86 	bls.w	8002d5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40021c00 	.word	0x40021c00
 8003088:	40022000 	.word	0x40022000
 800308c:	40022400 	.word	0x40022400
 8003090:	40013c00 	.word	0x40013c00

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030b0:	e003      	b.n	80030ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	041a      	lsls	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	619a      	str	r2, [r3, #24]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f838 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	@ 0x24
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e006      	b.n	8003150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800314e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d104      	bne.n	8003162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_I2C_Init+0x11c>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	02008000 	.word	0x02008000

080031e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	460b      	mov	r3, r1
 80031f6:	817b      	strh	r3, [r7, #10]
 80031f8:	4613      	mov	r3, r2
 80031fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b20      	cmp	r3, #32
 8003206:	f040 80da 	bne.w	80033be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_I2C_Master_Transmit+0x30>
 8003214:	2302      	movs	r3, #2
 8003216:	e0d3      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fb0e 	bl	8001840 <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2319      	movs	r3, #25
 800322c:	2201      	movs	r2, #1
 800322e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f8f0 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0be      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2221      	movs	r2, #33	@ 0x21
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2210      	movs	r2, #16
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	893a      	ldrh	r2, [r7, #8]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	2bff      	cmp	r3, #255	@ 0xff
 8003272:	d90e      	bls.n	8003292 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	22ff      	movs	r2, #255	@ 0xff
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	b2da      	uxtb	r2, r3
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	4b51      	ldr	r3, [pc, #324]	@ (80033c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa6c 	bl	8003768 <I2C_TransferConfig>
 8003290:	e06c      	b.n	800336c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fa5b 	bl	8003768 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032b2:	e05b      	b.n	800336c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f8ed 	bl	8003498 <I2C_WaitOnTXISFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e07b      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d034      	beq.n	800336c <HAL_I2C_Master_Transmit+0x184>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d130      	bne.n	800336c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2200      	movs	r2, #0
 8003312:	2180      	movs	r1, #128	@ 0x80
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f87f 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e04d      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2bff      	cmp	r3, #255	@ 0xff
 800332c:	d90e      	bls.n	800334c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	@ 0xff
 8003332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	b2da      	uxtb	r2, r3
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	2300      	movs	r3, #0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fa0f 	bl	8003768 <I2C_TransferConfig>
 800334a:	e00f      	b.n	800336c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	b2da      	uxtb	r2, r3
 800335c:	8979      	ldrh	r1, [r7, #10]
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f9fe 	bl	8003768 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19e      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8cc 	bl	8003518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e01a      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2220      	movs	r2, #32
 8003390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_I2C_Master_Transmit+0x1e4>)
 800339e:	400b      	ands	r3, r1
 80033a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	80002000 	.word	0x80002000
 80033cc:	fe00e800 	.word	0xfe00e800

080033d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d103      	bne.n	80033ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d007      	beq.n	800340c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	619a      	str	r2, [r3, #24]
  }
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	e022      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d01e      	beq.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fa05 	bl	8001840 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d113      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e00f      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	d0cd      	beq.n	800342a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a4:	e02c      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f870 	bl	8003590 <I2C_IsErrorOccurred>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02a      	b.n	8003510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d01e      	beq.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe f9bd 	bl	8001840 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d113      	bne.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e007      	b.n	8003510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d1cb      	bne.n	80034a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003524:	e028      	b.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f830 	bl	8003590 <I2C_IsErrorOccurred>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e026      	b.n	8003588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe f981 	bl	8001840 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d1cf      	bne.n	8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d075      	beq.n	80036a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c4:	e056      	b.n	8003674 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d052      	beq.n	8003674 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe f937 	bl	8001840 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_IsErrorOccurred+0x54>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d147      	bne.n	8003674 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003606:	d12e      	bne.n	8003666 <I2C_IsErrorOccurred+0xd6>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360e:	d02a      	beq.n	8003666 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d027      	beq.n	8003666 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003624:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003626:	f7fe f90b 	bl	8001840 <HAL_GetTick>
 800362a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e01b      	b.n	8003666 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362e:	f7fe f907 	bl	8001840 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b19      	cmp	r3, #25
 800363a:	d914      	bls.n	8003666 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d1dc      	bne.n	800362e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d003      	beq.n	800368a <I2C_IsErrorOccurred+0xfa>
 8003682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003686:	2b00      	cmp	r3, #0
 8003688:	d09d      	beq.n	80035c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01c      	beq.n	8003758 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff fe56 	bl	80033d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <I2C_IsErrorOccurred+0x1d4>)
 8003730:	400b      	ands	r3, r1
 8003732:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	fe00e800 	.word	0xfe00e800

08003768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	4613      	mov	r3, r2
 8003778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003780:	7a7b      	ldrb	r3, [r7, #9]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003788:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	4313      	orrs	r3, r2
 8003792:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003796:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	0d5b      	lsrs	r3, r3, #21
 80037a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037a6:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <I2C_TransferConfig+0x60>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	43db      	mvns	r3, r3
 80037ac:	ea02 0103 	and.w	r1, r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	03ff63ff 	.word	0x03ff63ff

080037cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d138      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e032      	b.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	@ 0x24
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800381e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	d139      	bne.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003882:	2302      	movs	r3, #2
 8003884:	e033      	b.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2224      	movs	r2, #36	@ 0x24
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fc:	b08f      	sub	sp, #60	@ 0x3c
 80038fe:	af0a      	add	r7, sp, #40	@ 0x28
 8003900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e116      	b.n	8003b3a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fba2 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f002 fada 	bl	8005f04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	687e      	ldr	r6, [r7, #4]
 8003958:	466d      	mov	r5, sp
 800395a:	f106 0410 	add.w	r4, r6, #16
 800395e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396a:	e885 0003 	stmia.w	r5, {r0, r1}
 800396e:	1d33      	adds	r3, r6, #4
 8003970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f002 fa6e 	bl	8005e54 <USB_CoreInit>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0d7      	b.n	8003b3a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f002 fac8 	bl	8005f26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e04a      	b.n	8003a32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	333d      	adds	r3, #61	@ 0x3d
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	333c      	adds	r3, #60	@ 0x3c
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	b298      	uxth	r0, r3
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3342      	adds	r3, #66	@ 0x42
 80039d8:	4602      	mov	r2, r0
 80039da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	333f      	adds	r3, #63	@ 0x3f
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3344      	adds	r3, #68	@ 0x44
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3348      	adds	r3, #72	@ 0x48
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3350      	adds	r3, #80	@ 0x50
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3af      	bcc.n	800399c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	e044      	b.n	8003acc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3b5      	bcc.n	8003a42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	687e      	ldr	r6, [r7, #4]
 8003ade:	466d      	mov	r5, sp
 8003ae0:	f106 0410 	add.w	r4, r6, #16
 8003ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af4:	1d33      	adds	r3, r6, #4
 8003af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f002 fa61 	bl	8005fc0 <USB_DevInit>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e014      	b.n	8003b3a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f80b 	bl	8003b44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 fc1b 	bl	800636e <USB_DevDisconnect>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b72:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	10000003 	.word	0x10000003

08003b8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a04      	ldr	r2, [pc, #16]	@ (8003ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40007000 	.word	0x40007000

08003bac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	4b23      	ldr	r3, [pc, #140]	@ (8003c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc2:	4b20      	ldr	r3, [pc, #128]	@ (8003c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bda:	f7fd fe31 	bl	8001840 <HAL_GetTick>
 8003bde:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003be0:	e009      	b.n	8003bf6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be2:	f7fd fe2d 	bl	8001840 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bf0:	d901      	bls.n	8003bf6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e022      	b.n	8003c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf6:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c02:	d1ee      	bne.n	8003be2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0f      	ldr	r2, [pc, #60]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7fd fe16 	bl	8001840 <HAL_GetTick>
 8003c14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c16:	e009      	b.n	8003c2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c18:	f7fd fe12 	bl	8001840 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c26:	d901      	bls.n	8003c2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e007      	b.n	8003c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c38:	d1ee      	bne.n	8003c18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c54:	2300      	movs	r3, #0
 8003c56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e29b      	b.n	800419a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8087 	beq.w	8003d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c70:	4b96      	ldr	r3, [pc, #600]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7c:	4b93      	ldr	r3, [pc, #588]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d112      	bne.n	8003cae <HAL_RCC_OscConfig+0x62>
 8003c88:	4b90      	ldr	r3, [pc, #576]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c94:	d10b      	bne.n	8003cae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c96:	4b8d      	ldr	r3, [pc, #564]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x130>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d168      	bne.n	8003d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e275      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x7a>
 8003cb8:	4b84      	ldr	r3, [pc, #528]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a83      	ldr	r2, [pc, #524]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e02e      	b.n	8003d24 <HAL_RCC_OscConfig+0xd8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x9c>
 8003cce:	4b7f      	ldr	r3, [pc, #508]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b7c      	ldr	r3, [pc, #496]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a7b      	ldr	r2, [pc, #492]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xd8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0xc0>
 8003cf2:	4b76      	ldr	r3, [pc, #472]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a75      	ldr	r2, [pc, #468]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b73      	ldr	r3, [pc, #460]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a72      	ldr	r2, [pc, #456]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xd8>
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fd88 	bl	8001840 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fd fd84 	bl	8001840 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e229      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe8>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fd74 	bl	8001840 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd fd70 	bl	8001840 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	@ 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e215      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x110>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d069      	beq.n	8003e5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8a:	4b50      	ldr	r3, [pc, #320]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x190>
 8003da2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x17a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1e9      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b41      	ldr	r3, [pc, #260]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	493d      	ldr	r1, [pc, #244]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e040      	b.n	8003e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d023      	beq.n	8003e2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a38      	ldr	r2, [pc, #224]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fd26 	bl	8001840 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fd fd22 	bl	8001840 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1c7      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b30      	ldr	r3, [pc, #192]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4929      	ldr	r1, [pc, #164]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
 8003e2a:	e018      	b.n	8003e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a26      	ldr	r2, [pc, #152]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fd02 	bl	8001840 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e40:	f7fd fcfe 	bl	8001840 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1a3      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d038      	beq.n	8003edc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e72:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fcdf 	bl	8001840 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fd fcdb 	bl	8001840 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e180      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x23a>
 8003ea4:	e01a      	b.n	8003edc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <HAL_RCC_OscConfig+0x280>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fcc5 	bl	8001840 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eba:	f7fd fcc1 	bl	8001840 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d903      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e166      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
 8003ecc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b92      	ldr	r3, [pc, #584]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a4 	beq.w	8004032 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eea:	4b8c      	ldr	r3, [pc, #560]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b89      	ldr	r3, [pc, #548]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a88      	ldr	r2, [pc, #544]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f02:	4b86      	ldr	r3, [pc, #536]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f12:	4b83      	ldr	r3, [pc, #524]	@ (8004120 <HAL_RCC_OscConfig+0x4d4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d118      	bne.n	8003f50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f1e:	4b80      	ldr	r3, [pc, #512]	@ (8004120 <HAL_RCC_OscConfig+0x4d4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7f      	ldr	r2, [pc, #508]	@ (8004120 <HAL_RCC_OscConfig+0x4d4>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fc89 	bl	8001840 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fd fc85 	bl	8001840 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	@ 0x64
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e12a      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f44:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCC_OscConfig+0x4d4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x31a>
 8003f58:	4b70      	ldr	r3, [pc, #448]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a6f      	ldr	r2, [pc, #444]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	e02d      	b.n	8003fc2 <HAL_RCC_OscConfig+0x376>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x33c>
 8003f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	4a6a      	ldr	r2, [pc, #424]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7a:	4b68      	ldr	r3, [pc, #416]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	4a67      	ldr	r2, [pc, #412]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f86:	e01c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x376>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCC_OscConfig+0x35e>
 8003f90:	4b62      	ldr	r3, [pc, #392]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a61      	ldr	r2, [pc, #388]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	e00b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x376>
 8003faa:	4b5c      	ldr	r3, [pc, #368]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	4a5b      	ldr	r2, [pc, #364]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb6:	4b59      	ldr	r3, [pc, #356]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a58      	ldr	r2, [pc, #352]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d015      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fc39 	bl	8001840 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd fc35 	bl	8001840 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0d8      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ee      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x386>
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fc23 	bl	8001840 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffe:	f7fd fc1f 	bl	8001840 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0c2      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004014:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1ee      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004026:	4b3d      	ldr	r3, [pc, #244]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	4a3c      	ldr	r2, [pc, #240]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 800402c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80ae 	beq.w	8004198 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403c:	4b37      	ldr	r3, [pc, #220]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d06d      	beq.n	8004124 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d14b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b32      	ldr	r3, [pc, #200]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a31      	ldr	r2, [pc, #196]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fbf0 	bl	8001840 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd fbec 	bl	8001840 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e091      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	491b      	ldr	r1, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b19      	ldr	r3, [pc, #100]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fbbe 	bl	8001840 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fbba 	bl	8001840 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e05f      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b10      	ldr	r3, [pc, #64]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x47c>
 80040e6:	e057      	b.n	8004198 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e8:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fba4 	bl	8001840 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fba0 	bl	8001840 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e045      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_RCC_OscConfig+0x4d0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x4b0>
 800411a:	e03d      	b.n	8004198 <HAL_RCC_OscConfig+0x54c>
 800411c:	40023800 	.word	0x40023800
 8004120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004124:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <HAL_RCC_OscConfig+0x558>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d030      	beq.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d129      	bne.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d122      	bne.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800415a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d119      	bne.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d10f      	bne.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0d0      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c0:	4b6a      	ldr	r3, [pc, #424]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d910      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b67      	ldr	r3, [pc, #412]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 020f 	bic.w	r2, r3, #15
 80041d6:	4965      	ldr	r1, [pc, #404]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d040      	beq.n	80042cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426a:	4b41      	ldr	r3, [pc, #260]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e073      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	4b3d      	ldr	r3, [pc, #244]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06b      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428a:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4936      	ldr	r1, [pc, #216]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fad0 	bl	8001840 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fd facc 	bl	8001840 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e053      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 020c 	and.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1eb      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042cc:	4b27      	ldr	r3, [pc, #156]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d210      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b24      	ldr	r3, [pc, #144]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	4922      	ldr	r1, [pc, #136]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	@ (8004374 <HAL_RCC_ClockConfig+0x1cc>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <HAL_RCC_ClockConfig+0x1d0>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <HAL_RCC_ClockConfig+0x1d4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc ff60 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	0801eb1c 	.word	0x0801eb1c
 8004378:	20000000 	.word	0x20000000
 800437c:	20000004 	.word	0x20000004

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b094      	sub	sp, #80	@ 0x50
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	647b      	str	r3, [r7, #68]	@ 0x44
 800438c:	2300      	movs	r3, #0
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	2300      	movs	r3, #0
 8004392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b79      	ldr	r3, [pc, #484]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x40>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80e1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e0db      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b73      	ldr	r3, [pc, #460]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x204>)
 80043b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043b8:	e0db      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b73      	ldr	r3, [pc, #460]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x208>)
 80043bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043be:	e0d8      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	f04f 0000 	mov.w	r0, #0
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	0159      	lsls	r1, r3, #5
 8004400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004404:	0150      	lsls	r0, r2, #5
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4621      	mov	r1, r4
 800440c:	1a51      	subs	r1, r2, r1
 800440e:	6139      	str	r1, [r7, #16]
 8004410:	4629      	mov	r1, r5
 8004412:	eb63 0301 	sbc.w	r3, r3, r1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004424:	4659      	mov	r1, fp
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442e:	4651      	mov	r1, sl
 8004430:	018a      	lsls	r2, r1, #6
 8004432:	4651      	mov	r1, sl
 8004434:	ebb2 0801 	subs.w	r8, r2, r1
 8004438:	4659      	mov	r1, fp
 800443a:	eb63 0901 	sbc.w	r9, r3, r1
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800444a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004452:	4690      	mov	r8, r2
 8004454:	4699      	mov	r9, r3
 8004456:	4623      	mov	r3, r4
 8004458:	eb18 0303 	adds.w	r3, r8, r3
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	462b      	mov	r3, r5
 8004460:	eb49 0303 	adc.w	r3, r9, r3
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004472:	4629      	mov	r1, r5
 8004474:	024b      	lsls	r3, r1, #9
 8004476:	4621      	mov	r1, r4
 8004478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800447c:	4621      	mov	r1, r4
 800447e:	024a      	lsls	r2, r1, #9
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	2200      	movs	r2, #0
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800448a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004490:	f7fb ff2e 	bl	80002f0 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449c:	e058      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	2200      	movs	r2, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	4611      	mov	r1, r2
 80044aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	2300      	movs	r3, #0
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b8:	4642      	mov	r2, r8
 80044ba:	464b      	mov	r3, r9
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	0159      	lsls	r1, r3, #5
 80044c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ca:	0150      	lsls	r0, r2, #5
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4641      	mov	r1, r8
 80044d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044f0:	ebb2 040a 	subs.w	r4, r2, sl
 80044f4:	eb63 050b 	sbc.w	r5, r3, fp
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	00eb      	lsls	r3, r5, #3
 8004502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004506:	00e2      	lsls	r2, r4, #3
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	4643      	mov	r3, r8
 800450e:	18e3      	adds	r3, r4, r3
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	464b      	mov	r3, r9
 8004514:	eb45 0303 	adc.w	r3, r5, r3
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004526:	4629      	mov	r1, r5
 8004528:	028b      	lsls	r3, r1, #10
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004530:	4621      	mov	r1, r4
 8004532:	028a      	lsls	r2, r1, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	2200      	movs	r2, #0
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	61fa      	str	r2, [r7, #28]
 8004540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004544:	f7fb fed4 	bl	80002f0 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x200>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x204>)
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004574:	4618      	mov	r0, r3
 8004576:	3750      	adds	r7, #80	@ 0x50
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	007a1200 	.word	0x007a1200

0800458c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff0 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	@ (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	0801eb2c 	.word	0x0801eb2c

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff ffdc 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0b5b      	lsrs	r3, r3, #13
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	0801eb2c 	.word	0x0801eb2c

080045f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	220f      	movs	r2, #15
 8004602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0203 	and.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004610:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004636:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <HAL_RCC_GetClockConfig+0x60>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40023c00 	.word	0x40023c00

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004680:	4b69      	ldr	r3, [pc, #420]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a68      	ldr	r2, [pc, #416]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800468a:	6093      	str	r3, [r2, #8]
 800468c:	4b66      	ldr	r3, [pc, #408]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	4964      	ldr	r1, [pc, #400]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	4959      	ldr	r1, [pc, #356]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	494a      	ldr	r1, [pc, #296]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800470c:	d101      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 808b 	beq.w	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	4b3a      	ldr	r3, [pc, #232]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	4a39      	ldr	r2, [pc, #228]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004746:	6413      	str	r3, [r2, #64]	@ 0x40
 8004748:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a34      	ldr	r2, [pc, #208]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800475e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7fd f86e 	bl	8001840 <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7fd f86a 	bl	8001840 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	@ 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e38f      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800477a:	4b2c      	ldr	r3, [pc, #176]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004786:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800478e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d035      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d02e      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a4:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	4a1a      	ldr	r2, [pc, #104]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047c6:	4a18      	ldr	r2, [pc, #96]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047cc:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d114      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd f832 	bl	8001840 <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047de:	e00a      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fd f82e 	bl	8001840 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e351      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ee      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800480e:	d111      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800481e:	400b      	ands	r3, r1
 8004820:	4901      	ldr	r1, [pc, #4]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
 8004826:	e00b      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000
 8004830:	0ffffcff 	.word	0x0ffffcff
 8004834:	4bac      	ldr	r3, [pc, #688]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4aab      	ldr	r2, [pc, #684]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	4ba9      	ldr	r3, [pc, #676]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	49a6      	ldr	r1, [pc, #664]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	4313      	orrs	r3, r2
 8004850:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800485e:	4ba2      	ldr	r3, [pc, #648]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004864:	4aa0      	ldr	r2, [pc, #640]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800486e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	499b      	ldr	r1, [pc, #620]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488c:	4b96      	ldr	r3, [pc, #600]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800489a:	4993      	ldr	r1, [pc, #588]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ae:	4b8e      	ldr	r3, [pc, #568]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048bc:	498a      	ldr	r1, [pc, #552]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d0:	4b85      	ldr	r3, [pc, #532]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048de:	4982      	ldr	r1, [pc, #520]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048f2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	4979      	ldr	r1, [pc, #484]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004914:	4b74      	ldr	r3, [pc, #464]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	4971      	ldr	r1, [pc, #452]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004936:	4b6c      	ldr	r3, [pc, #432]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493c:	f023 020c 	bic.w	r2, r3, #12
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004944:	4968      	ldr	r1, [pc, #416]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004958:	4b63      	ldr	r3, [pc, #396]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004966:	4960      	ldr	r1, [pc, #384]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800497a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004988:	4957      	ldr	r1, [pc, #348]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800499c:	4b52      	ldr	r3, [pc, #328]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	494f      	ldr	r1, [pc, #316]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049be:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049cc:	4946      	ldr	r1, [pc, #280]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049e0:	4b41      	ldr	r3, [pc, #260]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	493e      	ldr	r1, [pc, #248]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a02:	4b39      	ldr	r3, [pc, #228]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a10:	4935      	ldr	r1, [pc, #212]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a24:	4b30      	ldr	r3, [pc, #192]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a32:	492d      	ldr	r1, [pc, #180]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a46:	4b28      	ldr	r3, [pc, #160]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a54:	4924      	ldr	r1, [pc, #144]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a64:	d101      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a86:	4b18      	ldr	r3, [pc, #96]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	4914      	ldr	r1, [pc, #80]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab8:	490b      	ldr	r1, [pc, #44]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004adc:	4902      	ldr	r1, [pc, #8]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004af8:	4b8a      	ldr	r3, [pc, #552]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	4986      	ldr	r1, [pc, #536]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b1c:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2c:	497d      	ldr	r1, [pc, #500]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d006      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80d6 	beq.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b48:	4b76      	ldr	r3, [pc, #472]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a75      	ldr	r2, [pc, #468]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b54:	f7fc fe74 	bl	8001840 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b5c:	f7fc fe70 	bl	8001840 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e195      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d021      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11d      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b8e:	4b65      	ldr	r3, [pc, #404]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b9c:	4b61      	ldr	r3, [pc, #388]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba2:	0e1b      	lsrs	r3, r3, #24
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	019a      	lsls	r2, r3, #6
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	4958      	ldr	r1, [pc, #352]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02e      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf4:	d129      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c04:	4b47      	ldr	r3, [pc, #284]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	0f1b      	lsrs	r3, r3, #28
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	019a      	lsls	r2, r3, #6
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	071b      	lsls	r3, r3, #28
 8004c2a:	493e      	ldr	r1, [pc, #248]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c32:	4b3c      	ldr	r3, [pc, #240]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c38:	f023 021f 	bic.w	r2, r3, #31
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	3b01      	subs	r3, #1
 8004c42:	4938      	ldr	r1, [pc, #224]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01d      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c56:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c5c:	0e1b      	lsrs	r3, r3, #24
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c64:	4b2f      	ldr	r3, [pc, #188]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6a:	0f1b      	lsrs	r3, r3, #28
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	019a      	lsls	r2, r3, #6
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	071b      	lsls	r3, r3, #28
 8004c8a:	4926      	ldr	r1, [pc, #152]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d011      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	019a      	lsls	r2, r3, #6
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	491a      	ldr	r1, [pc, #104]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc2:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc fdb7 	bl	8001840 <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd6:	f7fc fdb3 	bl	8001840 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b64      	cmp	r3, #100	@ 0x64
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0d8      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	f040 80ce 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cfc:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a08      	ldr	r2, [pc, #32]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fc fd9a 	bl	8001840 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d10:	f7fc fd96 	bl	8001840 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	@ 0x64
 8004d1c:	d904      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0bb      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d28:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d34:	d0ec      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d02e      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d12a      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	0f1b      	lsrs	r3, r3, #28
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	019a      	lsls	r2, r3, #6
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	071b      	lsls	r3, r3, #28
 8004d92:	4944      	ldr	r1, [pc, #272]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004da0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	493d      	ldr	r1, [pc, #244]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d022      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dc8:	d11d      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dca:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	0e1b      	lsrs	r3, r3, #24
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	0f1b      	lsrs	r3, r3, #28
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	019a      	lsls	r2, r3, #6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	071b      	lsls	r3, r3, #28
 8004dfe:	4929      	ldr	r1, [pc, #164]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d028      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e12:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e20:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	019a      	lsls	r2, r3, #6
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	061b      	lsls	r3, r3, #24
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	071b      	lsls	r3, r3, #28
 8004e46:	4917      	ldr	r1, [pc, #92]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	4911      	ldr	r1, [pc, #68]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e70:	f7fc fce6 	bl	8001840 <HAL_GetTick>
 8004e74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e78:	f7fc fce2 	bl	8001840 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	@ 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e007      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e96:	d1ef      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e049      	b.n	8004f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f841 	bl	8004f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fa00 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e054      	b.n	800502e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	@ (800503c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d01d      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800504c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8005054 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d115      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <HAL_TIM_Base_Start_IT+0xec>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d015      	beq.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005004:	d011      	beq.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e008      	b.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e000      	b.n	800502c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40010400 	.word	0x40010400
 8005050:	40014000 	.word	0x40014000
 8005054:	40001800 	.word	0x40001800
 8005058:	00010007 	.word	0x00010007

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f905 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8f7 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f908 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8db 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8cd 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8de 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8b1 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8a3 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8b4 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f887 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f879 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f88a 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb fea8 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b80      	cmp	r3, #128	@ 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f8:	2b80      	cmp	r3, #128	@ 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f91a 	bl	8005440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521a:	d10e      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005226:	2b80      	cmp	r3, #128	@ 0x80
 8005228:	d107      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f90d 	bl	8005454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d10e      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005252:	2b40      	cmp	r3, #64	@ 0x40
 8005254:	d107      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f838 	bl	80052d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d10e      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0220 	mvn.w	r2, #32
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8cd 	bl	800542c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a40      	ldr	r2, [pc, #256]	@ (8005400 <TIM_Base_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3d      	ldr	r2, [pc, #244]	@ (8005404 <TIM_Base_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3c      	ldr	r2, [pc, #240]	@ (8005408 <TIM_Base_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3b      	ldr	r2, [pc, #236]	@ (800540c <TIM_Base_SetConfig+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3a      	ldr	r2, [pc, #232]	@ (8005410 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2f      	ldr	r2, [pc, #188]	@ (8005400 <TIM_Base_SetConfig+0x114>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d02b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534c:	d027      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <TIM_Base_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d023      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2b      	ldr	r2, [pc, #172]	@ (8005408 <TIM_Base_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2a      	ldr	r2, [pc, #168]	@ (800540c <TIM_Base_SetConfig+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a29      	ldr	r2, [pc, #164]	@ (8005410 <TIM_Base_SetConfig+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d017      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a28      	ldr	r2, [pc, #160]	@ (8005414 <TIM_Base_SetConfig+0x128>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a27      	ldr	r2, [pc, #156]	@ (8005418 <TIM_Base_SetConfig+0x12c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a26      	ldr	r2, [pc, #152]	@ (800541c <TIM_Base_SetConfig+0x130>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a25      	ldr	r2, [pc, #148]	@ (8005420 <TIM_Base_SetConfig+0x134>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a24      	ldr	r2, [pc, #144]	@ (8005424 <TIM_Base_SetConfig+0x138>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a23      	ldr	r2, [pc, #140]	@ (8005428 <TIM_Base_SetConfig+0x13c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005400 <TIM_Base_SetConfig+0x114>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <TIM_Base_SetConfig+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40010400 	.word	0x40010400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800
 8005420:	40001800 	.word	0x40001800
 8005424:	40001c00 	.word	0x40001c00
 8005428:	40002000 	.word	0x40002000

0800542c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e040      	b.n	80054fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fd90 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	@ 0x24
 8005494:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8c0 	bl	800562c <UART_SetConfig>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e022      	b.n	80054fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fb18 	bl	8005af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fb9f 	bl	8005c38 <UART_CheckIdleState>
 80054fa:	4603      	mov	r3, r0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	@ 0x28
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005518:	2b20      	cmp	r3, #32
 800551a:	f040 8081 	bne.w	8005620 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_UART_Transmit+0x26>
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e079      	b.n	8005622 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_UART_Transmit+0x38>
 8005538:	2302      	movs	r3, #2
 800553a:	e072      	b.n	8005622 <HAL_UART_Transmit+0x11e>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2221      	movs	r2, #33	@ 0x21
 8005550:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005552:	f7fc f975 	bl	8001840 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005570:	d108      	bne.n	8005584 <HAL_UART_Transmit+0x80>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	e003      	b.n	800558c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8005594:	e02c      	b.n	80055f0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	@ 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fb92 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e038      	b.n	8005622 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	3302      	adds	r3, #2
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e007      	b.n	80055de <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1cc      	bne.n	8005596 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	2140      	movs	r1, #64	@ 0x40
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb5f 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e005      	b.n	8005622 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4ba6      	ldr	r3, [pc, #664]	@ (80058f0 <UART_SetConfig+0x2c4>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	430b      	orrs	r3, r1
 8005662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a94      	ldr	r2, [pc, #592]	@ (80058f4 <UART_SetConfig+0x2c8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d120      	bne.n	80056ea <UART_SetConfig+0xbe>
 80056a8:	4b93      	ldr	r3, [pc, #588]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d816      	bhi.n	80056e4 <UART_SetConfig+0xb8>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <UART_SetConfig+0x90>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056cd 	.word	0x080056cd
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056d3 	.word	0x080056d3
 80056c8:	080056df 	.word	0x080056df
 80056cc:	2301      	movs	r3, #1
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e150      	b.n	8005974 <UART_SetConfig+0x348>
 80056d2:	2302      	movs	r3, #2
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e14d      	b.n	8005974 <UART_SetConfig+0x348>
 80056d8:	2304      	movs	r3, #4
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e14a      	b.n	8005974 <UART_SetConfig+0x348>
 80056de:	2308      	movs	r3, #8
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e147      	b.n	8005974 <UART_SetConfig+0x348>
 80056e4:	2310      	movs	r3, #16
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e144      	b.n	8005974 <UART_SetConfig+0x348>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a83      	ldr	r2, [pc, #524]	@ (80058fc <UART_SetConfig+0x2d0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d132      	bne.n	800575a <UART_SetConfig+0x12e>
 80056f4:	4b80      	ldr	r3, [pc, #512]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d828      	bhi.n	8005754 <UART_SetConfig+0x128>
 8005702:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <UART_SetConfig+0xdc>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800573d 	.word	0x0800573d
 800570c:	08005755 	.word	0x08005755
 8005710:	08005755 	.word	0x08005755
 8005714:	08005755 	.word	0x08005755
 8005718:	08005749 	.word	0x08005749
 800571c:	08005755 	.word	0x08005755
 8005720:	08005755 	.word	0x08005755
 8005724:	08005755 	.word	0x08005755
 8005728:	08005743 	.word	0x08005743
 800572c:	08005755 	.word	0x08005755
 8005730:	08005755 	.word	0x08005755
 8005734:	08005755 	.word	0x08005755
 8005738:	0800574f 	.word	0x0800574f
 800573c:	2300      	movs	r3, #0
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e118      	b.n	8005974 <UART_SetConfig+0x348>
 8005742:	2302      	movs	r3, #2
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e115      	b.n	8005974 <UART_SetConfig+0x348>
 8005748:	2304      	movs	r3, #4
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e112      	b.n	8005974 <UART_SetConfig+0x348>
 800574e:	2308      	movs	r3, #8
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e10f      	b.n	8005974 <UART_SetConfig+0x348>
 8005754:	2310      	movs	r3, #16
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e10c      	b.n	8005974 <UART_SetConfig+0x348>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a68      	ldr	r2, [pc, #416]	@ (8005900 <UART_SetConfig+0x2d4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d120      	bne.n	80057a6 <UART_SetConfig+0x17a>
 8005764:	4b64      	ldr	r3, [pc, #400]	@ (80058f8 <UART_SetConfig+0x2cc>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800576e:	2b30      	cmp	r3, #48	@ 0x30
 8005770:	d013      	beq.n	800579a <UART_SetConfig+0x16e>
 8005772:	2b30      	cmp	r3, #48	@ 0x30
 8005774:	d814      	bhi.n	80057a0 <UART_SetConfig+0x174>
 8005776:	2b20      	cmp	r3, #32
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x162>
 800577a:	2b20      	cmp	r3, #32
 800577c:	d810      	bhi.n	80057a0 <UART_SetConfig+0x174>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <UART_SetConfig+0x15c>
 8005782:	2b10      	cmp	r3, #16
 8005784:	d006      	beq.n	8005794 <UART_SetConfig+0x168>
 8005786:	e00b      	b.n	80057a0 <UART_SetConfig+0x174>
 8005788:	2300      	movs	r3, #0
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e0f2      	b.n	8005974 <UART_SetConfig+0x348>
 800578e:	2302      	movs	r3, #2
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e0ef      	b.n	8005974 <UART_SetConfig+0x348>
 8005794:	2304      	movs	r3, #4
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e0ec      	b.n	8005974 <UART_SetConfig+0x348>
 800579a:	2308      	movs	r3, #8
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e0e9      	b.n	8005974 <UART_SetConfig+0x348>
 80057a0:	2310      	movs	r3, #16
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e0e6      	b.n	8005974 <UART_SetConfig+0x348>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a56      	ldr	r2, [pc, #344]	@ (8005904 <UART_SetConfig+0x2d8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d120      	bne.n	80057f2 <UART_SetConfig+0x1c6>
 80057b0:	4b51      	ldr	r3, [pc, #324]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80057bc:	d013      	beq.n	80057e6 <UART_SetConfig+0x1ba>
 80057be:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c0:	d814      	bhi.n	80057ec <UART_SetConfig+0x1c0>
 80057c2:	2b80      	cmp	r3, #128	@ 0x80
 80057c4:	d009      	beq.n	80057da <UART_SetConfig+0x1ae>
 80057c6:	2b80      	cmp	r3, #128	@ 0x80
 80057c8:	d810      	bhi.n	80057ec <UART_SetConfig+0x1c0>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <UART_SetConfig+0x1a8>
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d006      	beq.n	80057e0 <UART_SetConfig+0x1b4>
 80057d2:	e00b      	b.n	80057ec <UART_SetConfig+0x1c0>
 80057d4:	2300      	movs	r3, #0
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e0cc      	b.n	8005974 <UART_SetConfig+0x348>
 80057da:	2302      	movs	r3, #2
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e0c9      	b.n	8005974 <UART_SetConfig+0x348>
 80057e0:	2304      	movs	r3, #4
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e0c6      	b.n	8005974 <UART_SetConfig+0x348>
 80057e6:	2308      	movs	r3, #8
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e0c3      	b.n	8005974 <UART_SetConfig+0x348>
 80057ec:	2310      	movs	r3, #16
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e0c0      	b.n	8005974 <UART_SetConfig+0x348>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a44      	ldr	r2, [pc, #272]	@ (8005908 <UART_SetConfig+0x2dc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d125      	bne.n	8005848 <UART_SetConfig+0x21c>
 80057fc:	4b3e      	ldr	r3, [pc, #248]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800580a:	d017      	beq.n	800583c <UART_SetConfig+0x210>
 800580c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005810:	d817      	bhi.n	8005842 <UART_SetConfig+0x216>
 8005812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005816:	d00b      	beq.n	8005830 <UART_SetConfig+0x204>
 8005818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581c:	d811      	bhi.n	8005842 <UART_SetConfig+0x216>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <UART_SetConfig+0x1fe>
 8005822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005826:	d006      	beq.n	8005836 <UART_SetConfig+0x20a>
 8005828:	e00b      	b.n	8005842 <UART_SetConfig+0x216>
 800582a:	2300      	movs	r3, #0
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e0a1      	b.n	8005974 <UART_SetConfig+0x348>
 8005830:	2302      	movs	r3, #2
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e09e      	b.n	8005974 <UART_SetConfig+0x348>
 8005836:	2304      	movs	r3, #4
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e09b      	b.n	8005974 <UART_SetConfig+0x348>
 800583c:	2308      	movs	r3, #8
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e098      	b.n	8005974 <UART_SetConfig+0x348>
 8005842:	2310      	movs	r3, #16
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e095      	b.n	8005974 <UART_SetConfig+0x348>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2f      	ldr	r2, [pc, #188]	@ (800590c <UART_SetConfig+0x2e0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d125      	bne.n	800589e <UART_SetConfig+0x272>
 8005852:	4b29      	ldr	r3, [pc, #164]	@ (80058f8 <UART_SetConfig+0x2cc>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005858:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800585c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005860:	d017      	beq.n	8005892 <UART_SetConfig+0x266>
 8005862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005866:	d817      	bhi.n	8005898 <UART_SetConfig+0x26c>
 8005868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586c:	d00b      	beq.n	8005886 <UART_SetConfig+0x25a>
 800586e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005872:	d811      	bhi.n	8005898 <UART_SetConfig+0x26c>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <UART_SetConfig+0x254>
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587c:	d006      	beq.n	800588c <UART_SetConfig+0x260>
 800587e:	e00b      	b.n	8005898 <UART_SetConfig+0x26c>
 8005880:	2301      	movs	r3, #1
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e076      	b.n	8005974 <UART_SetConfig+0x348>
 8005886:	2302      	movs	r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e073      	b.n	8005974 <UART_SetConfig+0x348>
 800588c:	2304      	movs	r3, #4
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e070      	b.n	8005974 <UART_SetConfig+0x348>
 8005892:	2308      	movs	r3, #8
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e06d      	b.n	8005974 <UART_SetConfig+0x348>
 8005898:	2310      	movs	r3, #16
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e06a      	b.n	8005974 <UART_SetConfig+0x348>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005910 <UART_SetConfig+0x2e4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d138      	bne.n	800591a <UART_SetConfig+0x2ee>
 80058a8:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80058b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058b6:	d017      	beq.n	80058e8 <UART_SetConfig+0x2bc>
 80058b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058bc:	d82a      	bhi.n	8005914 <UART_SetConfig+0x2e8>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c2:	d00b      	beq.n	80058dc <UART_SetConfig+0x2b0>
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c8:	d824      	bhi.n	8005914 <UART_SetConfig+0x2e8>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <UART_SetConfig+0x2aa>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d2:	d006      	beq.n	80058e2 <UART_SetConfig+0x2b6>
 80058d4:	e01e      	b.n	8005914 <UART_SetConfig+0x2e8>
 80058d6:	2300      	movs	r3, #0
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e04b      	b.n	8005974 <UART_SetConfig+0x348>
 80058dc:	2302      	movs	r3, #2
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e048      	b.n	8005974 <UART_SetConfig+0x348>
 80058e2:	2304      	movs	r3, #4
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e045      	b.n	8005974 <UART_SetConfig+0x348>
 80058e8:	2308      	movs	r3, #8
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e042      	b.n	8005974 <UART_SetConfig+0x348>
 80058ee:	bf00      	nop
 80058f0:	efff69f3 	.word	0xefff69f3
 80058f4:	40011000 	.word	0x40011000
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40004400 	.word	0x40004400
 8005900:	40004800 	.word	0x40004800
 8005904:	40004c00 	.word	0x40004c00
 8005908:	40005000 	.word	0x40005000
 800590c:	40011400 	.word	0x40011400
 8005910:	40007800 	.word	0x40007800
 8005914:	2310      	movs	r3, #16
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e02c      	b.n	8005974 <UART_SetConfig+0x348>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a72      	ldr	r2, [pc, #456]	@ (8005ae8 <UART_SetConfig+0x4bc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d125      	bne.n	8005970 <UART_SetConfig+0x344>
 8005924:	4b71      	ldr	r3, [pc, #452]	@ (8005aec <UART_SetConfig+0x4c0>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800592e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005932:	d017      	beq.n	8005964 <UART_SetConfig+0x338>
 8005934:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005938:	d817      	bhi.n	800596a <UART_SetConfig+0x33e>
 800593a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593e:	d00b      	beq.n	8005958 <UART_SetConfig+0x32c>
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005944:	d811      	bhi.n	800596a <UART_SetConfig+0x33e>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <UART_SetConfig+0x326>
 800594a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800594e:	d006      	beq.n	800595e <UART_SetConfig+0x332>
 8005950:	e00b      	b.n	800596a <UART_SetConfig+0x33e>
 8005952:	2300      	movs	r3, #0
 8005954:	77fb      	strb	r3, [r7, #31]
 8005956:	e00d      	b.n	8005974 <UART_SetConfig+0x348>
 8005958:	2302      	movs	r3, #2
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e00a      	b.n	8005974 <UART_SetConfig+0x348>
 800595e:	2304      	movs	r3, #4
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e007      	b.n	8005974 <UART_SetConfig+0x348>
 8005964:	2308      	movs	r3, #8
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e004      	b.n	8005974 <UART_SetConfig+0x348>
 800596a:	2310      	movs	r3, #16
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e001      	b.n	8005974 <UART_SetConfig+0x348>
 8005970:	2310      	movs	r3, #16
 8005972:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800597c:	d15b      	bne.n	8005a36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800597e:	7ffb      	ldrb	r3, [r7, #31]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d828      	bhi.n	80059d6 <UART_SetConfig+0x3aa>
 8005984:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x360>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe fdf8 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80059b4:	61b8      	str	r0, [r7, #24]
        break;
 80059b6:	e013      	b.n	80059e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe fe08 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 80059bc:	61b8      	str	r0, [r7, #24]
        break;
 80059be:	e00f      	b.n	80059e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b4b      	ldr	r3, [pc, #300]	@ (8005af0 <UART_SetConfig+0x4c4>)
 80059c2:	61bb      	str	r3, [r7, #24]
        break;
 80059c4:	e00c      	b.n	80059e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fe fcdb 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80059ca:	61b8      	str	r0, [r7, #24]
        break;
 80059cc:	e008      	b.n	80059e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d2:	61bb      	str	r3, [r7, #24]
        break;
 80059d4:	e004      	b.n	80059e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	77bb      	strb	r3, [r7, #30]
        break;
 80059de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d074      	beq.n	8005ad0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	005a      	lsls	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d916      	bls.n	8005a30 <UART_SetConfig+0x404>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d212      	bcs.n	8005a30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f023 030f 	bic.w	r3, r3, #15
 8005a12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	89fb      	ldrh	r3, [r7, #14]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	89fa      	ldrh	r2, [r7, #14]
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	e04f      	b.n	8005ad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	77bb      	strb	r3, [r7, #30]
 8005a34:	e04c      	b.n	8005ad0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a36:	7ffb      	ldrb	r3, [r7, #31]
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d828      	bhi.n	8005a8e <UART_SetConfig+0x462>
 8005a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x418>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a71 	.word	0x08005a71
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	08005a8f 	.word	0x08005a8f
 8005a54:	08005a7f 	.word	0x08005a7f
 8005a58:	08005a8f 	.word	0x08005a8f
 8005a5c:	08005a8f 	.word	0x08005a8f
 8005a60:	08005a8f 	.word	0x08005a8f
 8005a64:	08005a87 	.word	0x08005a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a68:	f7fe fd9c 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	61b8      	str	r0, [r7, #24]
        break;
 8005a6e:	e013      	b.n	8005a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a70:	f7fe fdac 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8005a74:	61b8      	str	r0, [r7, #24]
        break;
 8005a76:	e00f      	b.n	8005a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a78:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <UART_SetConfig+0x4c4>)
 8005a7a:	61bb      	str	r3, [r7, #24]
        break;
 8005a7c:	e00c      	b.n	8005a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7e:	f7fe fc7f 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005a82:	61b8      	str	r0, [r7, #24]
        break;
 8005a84:	e008      	b.n	8005a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a8a:	61bb      	str	r3, [r7, #24]
        break;
 8005a8c:	e004      	b.n	8005a98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	77bb      	strb	r3, [r7, #30]
        break;
 8005a96:	bf00      	nop
    }

    if (pclk != 0U)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	085a      	lsrs	r2, r3, #1
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d909      	bls.n	8005acc <UART_SetConfig+0x4a0>
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abe:	d205      	bcs.n	8005acc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	e001      	b.n	8005ad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8005adc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40007c00 	.word	0x40007c00
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400

08005af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bf2:	d10a      	bne.n	8005c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c48:	f7fb fdfa 	bl	8001840 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d10e      	bne.n	8005c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f82d 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e023      	b.n	8005cc2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d10e      	bne.n	8005ca6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f817 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e00d      	b.n	8005cc2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b09c      	sub	sp, #112	@ 0x70
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cda:	e0a5      	b.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	f000 80a1 	beq.w	8005e28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce6:	f7fb fdab 	bl	8001840 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8005cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d13e      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005d20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e6      	bne.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005d50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e067      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d04f      	beq.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d96:	d147      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005da0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e6      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005df4:	623a      	str	r2, [r7, #32]
 8005df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	69f9      	ldr	r1, [r7, #28]
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e5      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e010      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4013      	ands	r3, r2
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	bf0c      	ite	eq
 8005e38:	2301      	moveq	r3, #1
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	f43f af4a 	beq.w	8005cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3770      	adds	r7, #112	@ 0x70
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e54:	b084      	sub	sp, #16
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	f107 001c 	add.w	r0, r7, #28
 8005e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d120      	bne.n	8005eae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <USB_CoreInit+0xac>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d105      	bne.n	8005ea2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa92 	bl	80063cc <USB_CoreReset>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e010      	b.n	8005ed0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa86 	bl	80063cc <USB_CoreReset>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d10b      	bne.n	8005eee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f043 0206 	orr.w	r2, r3, #6
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005efa:	b004      	add	sp, #16
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	ffbdffbf 	.word	0xffbdffbf

08005f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 0201 	bic.w	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d115      	bne.n	8005f74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fb fc7f 	bl	8001858 <HAL_Delay>
      ms++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa25 	bl	80063b0 <USB_GetMode>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d01e      	beq.n	8005faa <USB_SetCurrentMode+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b31      	cmp	r3, #49	@ 0x31
 8005f70:	d9f0      	bls.n	8005f54 <USB_SetCurrentMode+0x2e>
 8005f72:	e01a      	b.n	8005faa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d115      	bne.n	8005fa6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f86:	2001      	movs	r0, #1
 8005f88:	f7fb fc66 	bl	8001858 <HAL_Delay>
      ms++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa0c 	bl	80063b0 <USB_GetMode>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <USB_SetCurrentMode+0x84>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b31      	cmp	r3, #49	@ 0x31
 8005fa2:	d9f0      	bls.n	8005f86 <USB_SetCurrentMode+0x60>
 8005fa4:	e001      	b.n	8005faa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e005      	b.n	8005fb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b32      	cmp	r3, #50	@ 0x32
 8005fae:	d101      	bne.n	8005fb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e009      	b.n	8005ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3340      	adds	r3, #64	@ 0x40
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b0e      	cmp	r3, #14
 8005ff8:	d9f2      	bls.n	8005fe0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11c      	bne.n	800603a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800600e:	f043 0302 	orr.w	r3, r3, #2
 8006012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006018:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e005      	b.n	8006046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800604c:	461a      	mov	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	4619      	mov	r1, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006060:	461a      	mov	r2, r3
 8006062:	680b      	ldr	r3, [r1, #0]
 8006064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10c      	bne.n	8006086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f961 	bl	800633c <USB_SetDevSpeed>
 800607a:	e008      	b.n	800608e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800607c:	2101      	movs	r1, #1
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f95c 	bl	800633c <USB_SetDevSpeed>
 8006084:	e003      	b.n	800608e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006086:	2103      	movs	r1, #3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f957 	bl	800633c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800608e:	2110      	movs	r1, #16
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f8f3 	bl	800627c <USB_FlushTxFifo>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f91d 	bl	80062e0 <USB_FlushRxFifo>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b6:	461a      	mov	r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	e043      	b.n	8006162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060f0:	d118      	bne.n	8006124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e013      	b.n	8006136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	461a      	mov	r2, r3
 800611c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e008      	b.n	8006136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	461a      	mov	r2, r3
 8006132:	2300      	movs	r3, #0
 8006134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006154:	461a      	mov	r2, r3
 8006156:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800615a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	3301      	adds	r3, #1
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3b7      	bcc.n	80060da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	e043      	b.n	80061f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006186:	d118      	bne.n	80061ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e013      	b.n	80061cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e008      	b.n	80061cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	461a      	mov	r2, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	461a      	mov	r2, r3
 80061ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d3b7      	bcc.n	8006170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800620e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f043 0210 	orr.w	r2, r3, #16
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <USB_DevInit+0x2b4>)
 800623a:	4313      	orrs	r3, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f043 0208 	orr.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d105      	bne.n	8006264 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <USB_DevInit+0x2b8>)
 800625e:	4313      	orrs	r3, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006270:	b004      	add	sp, #16
 8006272:	4770      	bx	lr
 8006274:	803c3800 	.word	0x803c3800
 8006278:	40000004 	.word	0x40000004

0800627c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	4a12      	ldr	r2, [pc, #72]	@ (80062dc <USB_FlushTxFifo+0x60>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d901      	bls.n	800629a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e01a      	b.n	80062d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	daf3      	bge.n	800628a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	019b      	lsls	r3, r3, #6
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <USB_FlushTxFifo+0x60>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e006      	b.n	80062d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d0f1      	beq.n	80062b2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	00030d40 	.word	0x00030d40

080062e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4a11      	ldr	r2, [pc, #68]	@ (8006338 <USB_FlushRxFifo+0x58>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e017      	b.n	800632c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	daf3      	bge.n	80062ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2210      	movs	r2, #16
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	4a08      	ldr	r2, [pc, #32]	@ (8006338 <USB_FlushRxFifo+0x58>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e006      	b.n	800632c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b10      	cmp	r3, #16
 8006328:	d0f1      	beq.n	800630e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	00030d40 	.word	0x00030d40

0800633c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006388:	f023 0303 	bic.w	r3, r3, #3
 800638c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0301 	and.w	r3, r3, #1
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	4a13      	ldr	r2, [pc, #76]	@ (800642c <USB_CoreReset+0x60>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d901      	bls.n	80063e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e01a      	b.n	800641e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	daf3      	bge.n	80063d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f043 0201 	orr.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4a09      	ldr	r2, [pc, #36]	@ (800642c <USB_CoreReset+0x60>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d901      	bls.n	8006410 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e006      	b.n	800641e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d0f1      	beq.n	8006400 <USB_CoreReset+0x34>

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	00030d40 	.word	0x00030d40

08006430 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006436:	4ba0      	ldr	r3, [pc, #640]	@ (80066b8 <MX_LWIP_Init+0x288>)
 8006438:	22c0      	movs	r2, #192	@ 0xc0
 800643a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800643c:	4b9e      	ldr	r3, [pc, #632]	@ (80066b8 <MX_LWIP_Init+0x288>)
 800643e:	22a8      	movs	r2, #168	@ 0xa8
 8006440:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006442:	4b9d      	ldr	r3, [pc, #628]	@ (80066b8 <MX_LWIP_Init+0x288>)
 8006444:	2200      	movs	r2, #0
 8006446:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 8006448:	4b9b      	ldr	r3, [pc, #620]	@ (80066b8 <MX_LWIP_Init+0x288>)
 800644a:	221c      	movs	r2, #28
 800644c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800644e:	4b9b      	ldr	r3, [pc, #620]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006450:	22ff      	movs	r2, #255	@ 0xff
 8006452:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006454:	4b99      	ldr	r3, [pc, #612]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006456:	22ff      	movs	r2, #255	@ 0xff
 8006458:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800645a:	4b98      	ldr	r3, [pc, #608]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800645c:	22ff      	movs	r2, #255	@ 0xff
 800645e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006460:	4b96      	ldr	r3, [pc, #600]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006462:	2200      	movs	r2, #0
 8006464:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8006466:	4b96      	ldr	r3, [pc, #600]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800646c:	4b94      	ldr	r3, [pc, #592]	@ (80066c0 <MX_LWIP_Init+0x290>)
 800646e:	2200      	movs	r2, #0
 8006470:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006472:	4b93      	ldr	r3, [pc, #588]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006474:	2200      	movs	r2, #0
 8006476:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006478:	4b91      	ldr	r3, [pc, #580]	@ (80066c0 <MX_LWIP_Init+0x290>)
 800647a:	2200      	movs	r2, #0
 800647c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800647e:	2100      	movs	r1, #0
 8006480:	2000      	movs	r0, #0
 8006482:	f007 f8df 	bl	800d644 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006486:	4b8c      	ldr	r3, [pc, #560]	@ (80066b8 <MX_LWIP_Init+0x288>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	061a      	lsls	r2, r3, #24
 800648c:	4b8a      	ldr	r3, [pc, #552]	@ (80066b8 <MX_LWIP_Init+0x288>)
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	431a      	orrs	r2, r3
 8006494:	4b88      	ldr	r3, [pc, #544]	@ (80066b8 <MX_LWIP_Init+0x288>)
 8006496:	789b      	ldrb	r3, [r3, #2]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	4313      	orrs	r3, r2
 800649c:	4a86      	ldr	r2, [pc, #536]	@ (80066b8 <MX_LWIP_Init+0x288>)
 800649e:	78d2      	ldrb	r2, [r2, #3]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	061a      	lsls	r2, r3, #24
 80064a4:	4b84      	ldr	r3, [pc, #528]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	0619      	lsls	r1, r3, #24
 80064aa:	4b83      	ldr	r3, [pc, #524]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	4319      	orrs	r1, r3
 80064b2:	4b81      	ldr	r3, [pc, #516]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064b4:	789b      	ldrb	r3, [r3, #2]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	430b      	orrs	r3, r1
 80064ba:	497f      	ldr	r1, [pc, #508]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064bc:	78c9      	ldrb	r1, [r1, #3]
 80064be:	430b      	orrs	r3, r1
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80064c6:	431a      	orrs	r2, r3
 80064c8:	4b7b      	ldr	r3, [pc, #492]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	0619      	lsls	r1, r3, #24
 80064ce:	4b7a      	ldr	r3, [pc, #488]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	4319      	orrs	r1, r3
 80064d6:	4b78      	ldr	r3, [pc, #480]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064d8:	789b      	ldrb	r3, [r3, #2]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	430b      	orrs	r3, r1
 80064de:	4976      	ldr	r1, [pc, #472]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064e0:	78c9      	ldrb	r1, [r1, #3]
 80064e2:	430b      	orrs	r3, r1
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80064ea:	431a      	orrs	r2, r3
 80064ec:	4b72      	ldr	r3, [pc, #456]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	0619      	lsls	r1, r3, #24
 80064f2:	4b71      	ldr	r3, [pc, #452]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	4319      	orrs	r1, r3
 80064fa:	4b6f      	ldr	r3, [pc, #444]	@ (80066b8 <MX_LWIP_Init+0x288>)
 80064fc:	789b      	ldrb	r3, [r3, #2]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	430b      	orrs	r3, r1
 8006502:	496d      	ldr	r1, [pc, #436]	@ (80066b8 <MX_LWIP_Init+0x288>)
 8006504:	78c9      	ldrb	r1, [r1, #3]
 8006506:	430b      	orrs	r3, r1
 8006508:	0e1b      	lsrs	r3, r3, #24
 800650a:	4313      	orrs	r3, r2
 800650c:	4a6d      	ldr	r2, [pc, #436]	@ (80066c4 <MX_LWIP_Init+0x294>)
 800650e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006510:	4b6a      	ldr	r3, [pc, #424]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	061a      	lsls	r2, r3, #24
 8006516:	4b69      	ldr	r3, [pc, #420]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	431a      	orrs	r2, r3
 800651e:	4b67      	ldr	r3, [pc, #412]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006520:	789b      	ldrb	r3, [r3, #2]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	4313      	orrs	r3, r2
 8006526:	4a65      	ldr	r2, [pc, #404]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006528:	78d2      	ldrb	r2, [r2, #3]
 800652a:	4313      	orrs	r3, r2
 800652c:	061a      	lsls	r2, r3, #24
 800652e:	4b63      	ldr	r3, [pc, #396]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	0619      	lsls	r1, r3, #24
 8006534:	4b61      	ldr	r3, [pc, #388]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	041b      	lsls	r3, r3, #16
 800653a:	4319      	orrs	r1, r3
 800653c:	4b5f      	ldr	r3, [pc, #380]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800653e:	789b      	ldrb	r3, [r3, #2]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	430b      	orrs	r3, r1
 8006544:	495d      	ldr	r1, [pc, #372]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006546:	78c9      	ldrb	r1, [r1, #3]
 8006548:	430b      	orrs	r3, r1
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006550:	431a      	orrs	r2, r3
 8006552:	4b5a      	ldr	r3, [pc, #360]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	0619      	lsls	r1, r3, #24
 8006558:	4b58      	ldr	r3, [pc, #352]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	4319      	orrs	r1, r3
 8006560:	4b56      	ldr	r3, [pc, #344]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006562:	789b      	ldrb	r3, [r3, #2]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	430b      	orrs	r3, r1
 8006568:	4954      	ldr	r1, [pc, #336]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800656a:	78c9      	ldrb	r1, [r1, #3]
 800656c:	430b      	orrs	r3, r1
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006574:	431a      	orrs	r2, r3
 8006576:	4b51      	ldr	r3, [pc, #324]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	0619      	lsls	r1, r3, #24
 800657c:	4b4f      	ldr	r3, [pc, #316]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	041b      	lsls	r3, r3, #16
 8006582:	4319      	orrs	r1, r3
 8006584:	4b4d      	ldr	r3, [pc, #308]	@ (80066bc <MX_LWIP_Init+0x28c>)
 8006586:	789b      	ldrb	r3, [r3, #2]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	430b      	orrs	r3, r1
 800658c:	494b      	ldr	r1, [pc, #300]	@ (80066bc <MX_LWIP_Init+0x28c>)
 800658e:	78c9      	ldrb	r1, [r1, #3]
 8006590:	430b      	orrs	r3, r1
 8006592:	0e1b      	lsrs	r3, r3, #24
 8006594:	4313      	orrs	r3, r2
 8006596:	4a4c      	ldr	r2, [pc, #304]	@ (80066c8 <MX_LWIP_Init+0x298>)
 8006598:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800659a:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <MX_LWIP_Init+0x290>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	061a      	lsls	r2, r3, #24
 80065a0:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	431a      	orrs	r2, r3
 80065a8:	4b45      	ldr	r3, [pc, #276]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065aa:	789b      	ldrb	r3, [r3, #2]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4313      	orrs	r3, r2
 80065b0:	4a43      	ldr	r2, [pc, #268]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065b2:	78d2      	ldrb	r2, [r2, #3]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	061a      	lsls	r2, r3, #24
 80065b8:	4b41      	ldr	r3, [pc, #260]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	0619      	lsls	r1, r3, #24
 80065be:	4b40      	ldr	r3, [pc, #256]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	4319      	orrs	r1, r3
 80065c6:	4b3e      	ldr	r3, [pc, #248]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065c8:	789b      	ldrb	r3, [r3, #2]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	430b      	orrs	r3, r1
 80065ce:	493c      	ldr	r1, [pc, #240]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065d0:	78c9      	ldrb	r1, [r1, #3]
 80065d2:	430b      	orrs	r3, r1
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065da:	431a      	orrs	r2, r3
 80065dc:	4b38      	ldr	r3, [pc, #224]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	0619      	lsls	r1, r3, #24
 80065e2:	4b37      	ldr	r3, [pc, #220]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	4319      	orrs	r1, r3
 80065ea:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065ec:	789b      	ldrb	r3, [r3, #2]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	430b      	orrs	r3, r1
 80065f2:	4933      	ldr	r1, [pc, #204]	@ (80066c0 <MX_LWIP_Init+0x290>)
 80065f4:	78c9      	ldrb	r1, [r1, #3]
 80065f6:	430b      	orrs	r3, r1
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80065fe:	431a      	orrs	r2, r3
 8006600:	4b2f      	ldr	r3, [pc, #188]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	0619      	lsls	r1, r3, #24
 8006606:	4b2e      	ldr	r3, [pc, #184]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	4319      	orrs	r1, r3
 800660e:	4b2c      	ldr	r3, [pc, #176]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006610:	789b      	ldrb	r3, [r3, #2]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	430b      	orrs	r3, r1
 8006616:	492a      	ldr	r1, [pc, #168]	@ (80066c0 <MX_LWIP_Init+0x290>)
 8006618:	78c9      	ldrb	r1, [r1, #3]
 800661a:	430b      	orrs	r3, r1
 800661c:	0e1b      	lsrs	r3, r3, #24
 800661e:	4313      	orrs	r3, r2
 8006620:	4a2a      	ldr	r2, [pc, #168]	@ (80066cc <MX_LWIP_Init+0x29c>)
 8006622:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006624:	4b2a      	ldr	r3, [pc, #168]	@ (80066d0 <MX_LWIP_Init+0x2a0>)
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	4b2a      	ldr	r3, [pc, #168]	@ (80066d4 <MX_LWIP_Init+0x2a4>)
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4b26      	ldr	r3, [pc, #152]	@ (80066cc <MX_LWIP_Init+0x29c>)
 8006632:	4a25      	ldr	r2, [pc, #148]	@ (80066c8 <MX_LWIP_Init+0x298>)
 8006634:	4923      	ldr	r1, [pc, #140]	@ (80066c4 <MX_LWIP_Init+0x294>)
 8006636:	4828      	ldr	r0, [pc, #160]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 8006638:	f007 fd88 	bl	800e14c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800663c:	4826      	ldr	r0, [pc, #152]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 800663e:	f007 ff37 	bl	800e4b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006642:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 8006644:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006648:	089b      	lsrs	r3, r3, #2
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006654:	4820      	ldr	r0, [pc, #128]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 8006656:	f007 ff3b 	bl	800e4d0 <netif_set_up>
 800665a:	e002      	b.n	8006662 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800665c:	481e      	ldr	r0, [pc, #120]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 800665e:	f007 ffa3 	bl	800e5a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006662:	491e      	ldr	r1, [pc, #120]	@ (80066dc <MX_LWIP_Init+0x2ac>)
 8006664:	481c      	ldr	r0, [pc, #112]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 8006666:	f008 f835 	bl	800e6d4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800666a:	2200      	movs	r2, #0
 800666c:	2101      	movs	r1, #1
 800666e:	2001      	movs	r0, #1
 8006670:	f000 ff12 	bl	8007498 <osSemaphoreNew>
 8006674:	4603      	mov	r3, r0
 8006676:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <MX_LWIP_Init+0x2b0>)
 8006678:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800667a:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <MX_LWIP_Init+0x2b4>)
 800667c:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <MX_LWIP_Init+0x2a8>)
 800667e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006680:	4b17      	ldr	r3, [pc, #92]	@ (80066e0 <MX_LWIP_Init+0x2b0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <MX_LWIP_Init+0x2b4>)
 8006686:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006688:	2224      	movs	r2, #36	@ 0x24
 800668a:	2100      	movs	r1, #0
 800668c:	4816      	ldr	r0, [pc, #88]	@ (80066e8 <MX_LWIP_Init+0x2b8>)
 800668e:	f012 fedf 	bl	8019450 <memset>
  attributes.name = "LinkThr";
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <MX_LWIP_Init+0x2b8>)
 8006694:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <MX_LWIP_Init+0x2bc>)
 8006696:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006698:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <MX_LWIP_Init+0x2b8>)
 800669a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800669e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80066a0:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <MX_LWIP_Init+0x2b8>)
 80066a2:	2210      	movs	r2, #16
 80066a4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80066a6:	4a10      	ldr	r2, [pc, #64]	@ (80066e8 <MX_LWIP_Init+0x2b8>)
 80066a8:	490e      	ldr	r1, [pc, #56]	@ (80066e4 <MX_LWIP_Init+0x2b4>)
 80066aa:	4811      	ldr	r0, [pc, #68]	@ (80066f0 <MX_LWIP_Init+0x2c0>)
 80066ac:	f000 fcd8 	bl	8007060 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80066b0:	bf00      	nop
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000d90 	.word	0x20000d90
 80066bc:	20000d94 	.word	0x20000d94
 80066c0:	20000d98 	.word	0x20000d98
 80066c4:	20000d84 	.word	0x20000d84
 80066c8:	20000d88 	.word	0x20000d88
 80066cc:	20000d8c 	.word	0x20000d8c
 80066d0:	0800d555 	.word	0x0800d555
 80066d4:	08006d3d 	.word	0x08006d3d
 80066d8:	20000d50 	.word	0x20000d50
 80066dc:	08006e21 	.word	0x08006e21
 80066e0:	20000d44 	.word	0x20000d44
 80066e4:	20000d48 	.word	0x20000d48
 80066e8:	20000d9c 	.word	0x20000d9c
 80066ec:	0801b744 	.word	0x0801b744
 80066f0:	08006da9 	.word	0x08006da9

080066f4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08e      	sub	sp, #56	@ 0x38
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a52      	ldr	r2, [pc, #328]	@ (800685c <HAL_ETH_MspInit+0x168>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f040 809e 	bne.w	8006854 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006718:	4b51      	ldr	r3, [pc, #324]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	4a50      	ldr	r2, [pc, #320]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800671e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006722:	6313      	str	r3, [r2, #48]	@ 0x30
 8006724:	4b4e      	ldr	r3, [pc, #312]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	4b4b      	ldr	r3, [pc, #300]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	4a4a      	ldr	r2, [pc, #296]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800673a:	6313      	str	r3, [r2, #48]	@ 0x30
 800673c:	4b48      	ldr	r3, [pc, #288]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4b45      	ldr	r3, [pc, #276]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	4a44      	ldr	r2, [pc, #272]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800674e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006752:	6313      	str	r3, [r2, #48]	@ 0x30
 8006754:	4b42      	ldr	r3, [pc, #264]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006760:	4b3f      	ldr	r3, [pc, #252]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006764:	4a3e      	ldr	r2, [pc, #248]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006766:	f043 0304 	orr.w	r3, r3, #4
 800676a:	6313      	str	r3, [r2, #48]	@ 0x30
 800676c:	4b3c      	ldr	r3, [pc, #240]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006778:	4b39      	ldr	r3, [pc, #228]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	4a38      	ldr	r2, [pc, #224]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6313      	str	r3, [r2, #48]	@ 0x30
 8006784:	4b36      	ldr	r3, [pc, #216]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006790:	4b33      	ldr	r3, [pc, #204]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006794:	4a32      	ldr	r2, [pc, #200]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 8006796:	f043 0302 	orr.w	r3, r3, #2
 800679a:	6313      	str	r3, [r2, #48]	@ 0x30
 800679c:	4b30      	ldr	r3, [pc, #192]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 80067ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80067b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006860 <HAL_ETH_MspInit+0x16c>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80067c0:	2332      	movs	r3, #50	@ 0x32
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c4:	2302      	movs	r3, #2
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067cc:	2303      	movs	r3, #3
 80067ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067d0:	230b      	movs	r3, #11
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067d8:	4619      	mov	r1, r3
 80067da:	4822      	ldr	r0, [pc, #136]	@ (8006864 <HAL_ETH_MspInit+0x170>)
 80067dc:	f7fc faae 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80067e0:	2386      	movs	r3, #134	@ 0x86
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e4:	2302      	movs	r3, #2
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ec:	2303      	movs	r3, #3
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067f0:	230b      	movs	r3, #11
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067f8:	4619      	mov	r1, r3
 80067fa:	481b      	ldr	r0, [pc, #108]	@ (8006868 <HAL_ETH_MspInit+0x174>)
 80067fc:	f7fc fa9e 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006806:	2302      	movs	r3, #2
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680e:	2303      	movs	r3, #3
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006812:	230b      	movs	r3, #11
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800681a:	4619      	mov	r1, r3
 800681c:	4813      	ldr	r0, [pc, #76]	@ (800686c <HAL_ETH_MspInit+0x178>)
 800681e:	f7fc fa8d 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006822:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006828:	2302      	movs	r3, #2
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682c:	2300      	movs	r3, #0
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006834:	230b      	movs	r3, #11
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800683c:	4619      	mov	r1, r3
 800683e:	480c      	ldr	r0, [pc, #48]	@ (8006870 <HAL_ETH_MspInit+0x17c>)
 8006840:	f7fc fa7c 	bl	8002d3c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006844:	2200      	movs	r2, #0
 8006846:	2105      	movs	r1, #5
 8006848:	203d      	movs	r0, #61	@ 0x3d
 800684a:	f7fb f8e1 	bl	8001a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800684e:	203d      	movs	r0, #61	@ 0x3d
 8006850:	f7fb f8fa 	bl	8001a48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006854:	bf00      	nop
 8006856:	3738      	adds	r7, #56	@ 0x38
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40028000 	.word	0x40028000
 8006860:	40023800 	.word	0x40023800
 8006864:	40020800 	.word	0x40020800
 8006868:	40020000 	.word	0x40020000
 800686c:	40020400 	.word	0x40020400
 8006870:	40021800 	.word	0x40021800

08006874 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800687c:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <HAL_ETH_RxCpltCallback+0x1c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 ff0b 	bl	800769c <osSemaphoreRelease>
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20003e60 	.word	0x20003e60

08006894 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b090      	sub	sp, #64	@ 0x40
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80068a0:	4b5d      	ldr	r3, [pc, #372]	@ (8006a18 <low_level_init+0x184>)
 80068a2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a1c <low_level_init+0x188>)
 80068a4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80068a6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a18 <low_level_init+0x184>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80068ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006a18 <low_level_init+0x184>)
 80068ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80068b2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80068b4:	4b58      	ldr	r3, [pc, #352]	@ (8006a18 <low_level_init+0x184>)
 80068b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ba:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80068bc:	4b56      	ldr	r3, [pc, #344]	@ (8006a18 <low_level_init+0x184>)
 80068be:	2200      	movs	r2, #0
 80068c0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80068c2:	2300      	movs	r3, #0
 80068c4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 80068c6:	2322      	movs	r3, #34	@ 0x22
 80068c8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 80068ca:	23c0      	movs	r3, #192	@ 0xc0
 80068cc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 80068ce:	23a8      	movs	r3, #168	@ 0xa8
 80068d0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80068d2:	2300      	movs	r3, #0
 80068d4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 80068d6:	231c      	movs	r3, #28
 80068d8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80068da:	4a4f      	ldr	r2, [pc, #316]	@ (8006a18 <low_level_init+0x184>)
 80068dc:	f107 030c 	add.w	r3, r7, #12
 80068e0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80068e2:	4b4d      	ldr	r3, [pc, #308]	@ (8006a18 <low_level_init+0x184>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80068e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006a18 <low_level_init+0x184>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80068ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006a18 <low_level_init+0x184>)
 80068f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068f4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80068f6:	4848      	ldr	r0, [pc, #288]	@ (8006a18 <low_level_init+0x184>)
 80068f8:	f7fb f8b4 	bl	8001a64 <HAL_ETH_Init>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006902:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	b2da      	uxtb	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800691c:	2304      	movs	r3, #4
 800691e:	4a40      	ldr	r2, [pc, #256]	@ (8006a20 <low_level_init+0x18c>)
 8006920:	4940      	ldr	r1, [pc, #256]	@ (8006a24 <low_level_init+0x190>)
 8006922:	483d      	ldr	r0, [pc, #244]	@ (8006a18 <low_level_init+0x184>)
 8006924:	f7fb fa36 	bl	8001d94 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006928:	2304      	movs	r3, #4
 800692a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a28 <low_level_init+0x194>)
 800692c:	493f      	ldr	r1, [pc, #252]	@ (8006a2c <low_level_init+0x198>)
 800692e:	483a      	ldr	r0, [pc, #232]	@ (8006a18 <low_level_init+0x184>)
 8006930:	f7fb fa98 	bl	8001e64 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2206      	movs	r2, #6
 8006938:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800693c:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <low_level_init+0x184>)
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006948:	4b33      	ldr	r3, [pc, #204]	@ (8006a18 <low_level_init+0x184>)
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	785a      	ldrb	r2, [r3, #1]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006954:	4b30      	ldr	r3, [pc, #192]	@ (8006a18 <low_level_init+0x184>)
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	789a      	ldrb	r2, [r3, #2]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006960:	4b2d      	ldr	r3, [pc, #180]	@ (8006a18 <low_level_init+0x184>)
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	78da      	ldrb	r2, [r3, #3]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800696c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a18 <low_level_init+0x184>)
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	791a      	ldrb	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006978:	4b27      	ldr	r3, [pc, #156]	@ (8006a18 <low_level_init+0x184>)
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	795a      	ldrb	r2, [r3, #5]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800698a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006992:	f043 030a 	orr.w	r3, r3, #10
 8006996:	b2da      	uxtb	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800699e:	2200      	movs	r2, #0
 80069a0:	2101      	movs	r1, #1
 80069a2:	2001      	movs	r0, #1
 80069a4:	f000 fd78 	bl	8007498 <osSemaphoreNew>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4a21      	ldr	r2, [pc, #132]	@ (8006a30 <low_level_init+0x19c>)
 80069ac:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	2224      	movs	r2, #36	@ 0x24
 80069b4:	2100      	movs	r1, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	f012 fd4a 	bl	8019450 <memset>
  attributes.name = "EthIf";
 80069bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <low_level_init+0x1a0>)
 80069be:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80069c0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80069c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 80069c6:	2330      	movs	r3, #48	@ 0x30
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	461a      	mov	r2, r3
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4819      	ldr	r0, [pc, #100]	@ (8006a38 <low_level_init+0x1a4>)
 80069d4:	f000 fb44 	bl	8007060 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80069d8:	480f      	ldr	r0, [pc, #60]	@ (8006a18 <low_level_init+0x184>)
 80069da:	f7fb fd67 	bl	80024ac <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80069de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80069e2:	461a      	mov	r2, r3
 80069e4:	211d      	movs	r1, #29
 80069e6:	480c      	ldr	r0, [pc, #48]	@ (8006a18 <low_level_init+0x184>)
 80069e8:	f7fb fc92 	bl	8002310 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f043 030b 	orr.w	r3, r3, #11
 80069f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	461a      	mov	r2, r3
 80069f8:	211d      	movs	r1, #29
 80069fa:	4807      	ldr	r0, [pc, #28]	@ (8006a18 <low_level_init+0x184>)
 80069fc:	f7fb fcf0 	bl	80023e0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006a00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a04:	461a      	mov	r2, r3
 8006a06:	211d      	movs	r1, #29
 8006a08:	4803      	ldr	r0, [pc, #12]	@ (8006a18 <low_level_init+0x184>)
 8006a0a:	f7fb fc81 	bl	8002310 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006a0e:	bf00      	nop
 8006a10:	3740      	adds	r7, #64	@ 0x40
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20003e64 	.word	0x20003e64
 8006a1c:	40028000 	.word	0x40028000
 8006a20:	20002690 	.word	0x20002690
 8006a24:	20000e40 	.word	0x20000e40
 8006a28:	20000ec0 	.word	0x20000ec0
 8006a2c:	20000dc0 	.word	0x20000dc0
 8006a30:	20003e60 	.word	0x20003e60
 8006a34:	0801b74c 	.word	0x0801b74c
 8006a38:	08006cdd 	.word	0x08006cdd

08006a3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	@ 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006a46:	4b4b      	ldr	r3, [pc, #300]	@ (8006b74 <low_level_output+0x138>)
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006a5e:	4b45      	ldr	r3, [pc, #276]	@ (8006b74 <low_level_output+0x138>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	623b      	str	r3, [r7, #32]
 8006a6c:	e05a      	b.n	8006b24 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da03      	bge.n	8006a7e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006a76:	23f8      	movs	r3, #248	@ 0xf8
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8006a7c:	e05c      	b.n	8006b38 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	895b      	ldrh	r3, [r3, #10]
 8006a82:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006a88:	e02f      	b.n	8006aea <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	18d0      	adds	r0, r2, r3
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	18d1      	adds	r1, r2, r3
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f012 fd8e 	bl	80195c2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da03      	bge.n	8006abc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006ab4:	23f8      	movs	r3, #248	@ 0xf8
 8006ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8006aba:	e03d      	b.n	8006b38 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006acc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006ad8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006ae4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d8c8      	bhi.n	8006a8a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	18d0      	adds	r0, r2, r3
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4413      	add	r3, r2
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f012 fd5a 	bl	80195c2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1a1      	bne.n	8006a6e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	4811      	ldr	r0, [pc, #68]	@ (8006b74 <low_level_output+0x138>)
 8006b2e:	f7fb fa05 	bl	8001f3c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006b38:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <low_level_output+0x138>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <low_level_output+0x138>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b52:	461a      	mov	r2, r3
 8006b54:	2320      	movs	r3, #32
 8006b56:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006b58:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <low_level_output+0x138>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b60:	461a      	mov	r2, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006b66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3728      	adds	r7, #40	@ 0x28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20003e64 	.word	0x20003e64

08006b78 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	@ 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006b9c:	484e      	ldr	r0, [pc, #312]	@ (8006cd8 <low_level_input+0x160>)
 8006b9e:	f7fb fab7 	bl	8002110 <HAL_ETH_GetReceivedFrame_IT>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <low_level_input+0x34>

    return NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e091      	b.n	8006cd0 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006bac:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd8 <low_level_input+0x160>)
 8006bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006bb2:	4b49      	ldr	r3, [pc, #292]	@ (8006cd8 <low_level_input+0x160>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f007 fe4e 	bl	800e868 <pbuf_alloc>
 8006bcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d04b      	beq.n	8006c6c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006bd4:	4b40      	ldr	r3, [pc, #256]	@ (8006cd8 <low_level_input+0x160>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006be2:	e040      	b.n	8006c66 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	895b      	ldrh	r3, [r3, #10]
 8006be8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006bee:	e021      	b.n	8006c34 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	18d0      	adds	r0, r2, r3
 8006bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	18d1      	adds	r1, r2, r3
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	461a      	mov	r2, r3
 8006c08:	f012 fcdb 	bl	80195c2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006c22:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006c2e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d8d6      	bhi.n	8006bf0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	18d0      	adds	r0, r2, r3
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4619      	mov	r1, r3
 8006c54:	f012 fcb5 	bl	80195c2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1bb      	bne.n	8006be4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <low_level_input+0x160>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	e00b      	b.n	8006c90 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	4b11      	ldr	r3, [pc, #68]	@ (8006cd8 <low_level_input+0x160>)
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3ee      	bcc.n	8006c78 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd8 <low_level_input+0x160>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <low_level_input+0x160>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006cb2:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <low_level_input+0x160>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2380      	movs	r3, #128	@ 0x80
 8006cbe:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <low_level_input+0x160>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	@ 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20003e64 	.word	0x20003e64

08006cdc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006ce8:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <ethernetif_input+0x58>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fc6d 	bl	80075d0 <osSemaphoreAcquire>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f5      	bne.n	8006ce8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006cfc:	480e      	ldr	r0, [pc, #56]	@ (8006d38 <ethernetif_input+0x5c>)
 8006cfe:	f011 fc4f 	bl	80185a0 <sys_mutex_lock>
        p = low_level_input( netif );
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff ff38 	bl	8006b78 <low_level_input>
 8006d08:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	68f9      	ldr	r1, [r7, #12]
 8006d16:	68b8      	ldr	r0, [r7, #8]
 8006d18:	4798      	blx	r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006d20:	68b8      	ldr	r0, [r7, #8]
 8006d22:	f008 f885 	bl	800ee30 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006d26:	4804      	ldr	r0, [pc, #16]	@ (8006d38 <ethernetif_input+0x5c>)
 8006d28:	f011 fc49 	bl	80185be <sys_mutex_unlock>
      } while(p!=NULL);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e4      	bne.n	8006cfc <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006d32:	e7d9      	b.n	8006ce8 <ethernetif_input+0xc>
 8006d34:	20003e60 	.word	0x20003e60
 8006d38:	20008800 	.word	0x20008800

08006d3c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <ethernetif_init+0x1c>
 8006d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <ethernetif_init+0x48>)
 8006d4c:	f240 223b 	movw	r2, #571	@ 0x23b
 8006d50:	490d      	ldr	r1, [pc, #52]	@ (8006d88 <ethernetif_init+0x4c>)
 8006d52:	480e      	ldr	r0, [pc, #56]	@ (8006d8c <ethernetif_init+0x50>)
 8006d54:	f012 f9b6 	bl	80190c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2273      	movs	r2, #115	@ 0x73
 8006d5c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2274      	movs	r2, #116	@ 0x74
 8006d64:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a09      	ldr	r2, [pc, #36]	@ (8006d90 <ethernetif_init+0x54>)
 8006d6c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a08      	ldr	r2, [pc, #32]	@ (8006d94 <ethernetif_init+0x58>)
 8006d72:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fd8d 	bl	8006894 <low_level_init>

  return ERR_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	0801b754 	.word	0x0801b754
 8006d88:	0801b770 	.word	0x0801b770
 8006d8c:	0801b780 	.word	0x0801b780
 8006d90:	080165f5 	.word	0x080165f5
 8006d94:	08006a3d 	.word	0x08006a3d

08006d98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006d9c:	f7fa fd50 	bl	8001840 <HAL_GetTick>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006db8:	f107 0308 	add.w	r3, r7, #8
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4816      	ldr	r0, [pc, #88]	@ (8006e1c <ethernetif_set_link+0x74>)
 8006dc2:	f7fb faa5 	bl	8002310 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <ethernetif_set_link+0x48>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f007 fc0f 	bl	800e60c <netif_set_link_up>
 8006dee:	e011      	b.n	8006e14 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <ethernetif_set_link+0x6c>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f007 fc30 	bl	800e674 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006e14:	20c8      	movs	r0, #200	@ 0xc8
 8006e16:	f000 f9c9 	bl	80071ac <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006e1a:	e7cd      	b.n	8006db8 <ethernetif_set_link+0x10>
 8006e1c:	20003e64 	.word	0x20003e64

08006e20 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d05d      	beq.n	8006efe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006e42:	4b34      	ldr	r3, [pc, #208]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03f      	beq.n	8006eca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006e4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4830      	ldr	r0, [pc, #192]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006e52:	f7fb fac5 	bl	80023e0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006e56:	f7fa fcf3 	bl	8001840 <HAL_GetTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	461a      	mov	r2, r3
 8006e64:	2101      	movs	r1, #1
 8006e66:	482b      	ldr	r0, [pc, #172]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006e68:	f7fb fa52 	bl	8002310 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006e6c:	f7fa fce8 	bl	8001840 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e7a:	d828      	bhi.n	8006ece <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0eb      	beq.n	8006e5e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2110      	movs	r1, #16
 8006e8e:	4821      	ldr	r0, [pc, #132]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006e90:	f7fb fa3e 	bl	8002310 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006ea0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ea4:	60da      	str	r2, [r3, #12]
 8006ea6:	e002      	b.n	8006eae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006eb8:	4b16      	ldr	r3, [pc, #88]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
 8006ebe:	e016      	b.n	8006eee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006ec0:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006ec2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	e011      	b.n	8006eee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <ethernetif_update_config+0xb0>
          goto error;
 8006ece:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006ed0:	4b10      	ldr	r3, [pc, #64]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	480a      	ldr	r0, [pc, #40]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006eea:	f7fb fa79 	bl	80023e0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4808      	ldr	r0, [pc, #32]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006ef2:	f7fb fb39 	bl	8002568 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006ef6:	4807      	ldr	r0, [pc, #28]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006ef8:	f7fb fad8 	bl	80024ac <HAL_ETH_Start>
 8006efc:	e002      	b.n	8006f04 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006efe:	4805      	ldr	r0, [pc, #20]	@ (8006f14 <ethernetif_update_config+0xf4>)
 8006f00:	f7fb fb03 	bl	800250a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f807 	bl	8006f18 <ethernetif_notify_conn_changed>
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20003e64 	.word	0x20003e64

08006f18 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f42:	f3ef 8305 	mrs	r3, IPSR
 8006f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f52:	607b      	str	r3, [r7, #4]
  return(result);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <osKernelInitialize+0x3a>
 8006f66:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa0 <osKernelInitialize+0x64>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d103      	bne.n	8006f76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006f6e:	f06f 0305 	mvn.w	r3, #5
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e00c      	b.n	8006f90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f76:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <osKernelInitialize+0x64>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f7e:	4b08      	ldr	r3, [pc, #32]	@ (8006fa0 <osKernelInitialize+0x64>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e002      	b.n	8006f90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f90:	68fb      	ldr	r3, [r7, #12]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20003eac 	.word	0x20003eac

08006fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006faa:	f3ef 8305 	mrs	r3, IPSR
 8006fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10f      	bne.n	8006fd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fba:	607b      	str	r3, [r7, #4]
  return(result);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <osKernelStart+0x3a>
 8006fce:	4b0f      	ldr	r3, [pc, #60]	@ (800700c <osKernelStart+0x68>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d103      	bne.n	8006fde <osKernelStart+0x3a>
    stat = osErrorISR;
 8006fd6:	f06f 0305 	mvn.w	r3, #5
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e010      	b.n	8007000 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <osKernelStart+0x68>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d109      	bne.n	8006ffa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fe6:	f7ff ffa1 	bl	8006f2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fea:	4b08      	ldr	r3, [pc, #32]	@ (800700c <osKernelStart+0x68>)
 8006fec:	2202      	movs	r2, #2
 8006fee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ff0:	f002 fae0 	bl	80095b4 <vTaskStartScheduler>
      stat = osOK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e002      	b.n	8007000 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20003eac 	.word	0x20003eac

08007010 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007016:	f3ef 8305 	mrs	r3, IPSR
 800701a:	60bb      	str	r3, [r7, #8]
  return(result);
 800701c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10f      	bne.n	8007042 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007022:	f3ef 8310 	mrs	r3, PRIMASK
 8007026:	607b      	str	r3, [r7, #4]
  return(result);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800702e:	f3ef 8311 	mrs	r3, BASEPRI
 8007032:	603b      	str	r3, [r7, #0]
  return(result);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <osKernelGetTickCount+0x3a>
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <osKernelGetTickCount+0x4c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d103      	bne.n	800704a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8007042:	f002 fbe1 	bl	8009808 <xTaskGetTickCountFromISR>
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	e002      	b.n	8007050 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800704a:	f002 fbcd 	bl	80097e8 <xTaskGetTickCount>
 800704e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007050:	68fb      	ldr	r3, [r7, #12]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20003eac 	.word	0x20003eac

08007060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b090      	sub	sp, #64	@ 0x40
 8007064:	af04      	add	r7, sp, #16
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007070:	f3ef 8305 	mrs	r3, IPSR
 8007074:	61fb      	str	r3, [r7, #28]
  return(result);
 8007076:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 808f 	bne.w	800719c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800707e:	f3ef 8310 	mrs	r3, PRIMASK
 8007082:	61bb      	str	r3, [r7, #24]
  return(result);
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800708a:	f3ef 8311 	mrs	r3, BASEPRI
 800708e:	617b      	str	r3, [r7, #20]
  return(result);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <osThreadNew+0x3e>
 8007096:	4b44      	ldr	r3, [pc, #272]	@ (80071a8 <osThreadNew+0x148>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d07e      	beq.n	800719c <osThreadNew+0x13c>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d07b      	beq.n	800719c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80070a8:	2318      	movs	r3, #24
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80070b0:	f04f 33ff 	mov.w	r3, #4294967295
 80070b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d045      	beq.n	8007148 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <osThreadNew+0x6a>
        name = attr->name;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <osThreadNew+0x90>
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	2b38      	cmp	r3, #56	@ 0x38
 80070e2:	d805      	bhi.n	80070f0 <osThreadNew+0x90>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <osThreadNew+0x94>
        return (NULL);
 80070f0:	2300      	movs	r3, #0
 80070f2:	e054      	b.n	800719e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	089b      	lsrs	r3, r3, #2
 8007102:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <osThreadNew+0xca>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b5b      	cmp	r3, #91	@ 0x5b
 8007112:	d90a      	bls.n	800712a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <osThreadNew+0xca>
        mem = 1;
 8007124:	2301      	movs	r3, #1
 8007126:	623b      	str	r3, [r7, #32]
 8007128:	e010      	b.n	800714c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10c      	bne.n	800714c <osThreadNew+0xec>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d108      	bne.n	800714c <osThreadNew+0xec>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <osThreadNew+0xec>
          mem = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	623b      	str	r3, [r7, #32]
 8007146:	e001      	b.n	800714c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d110      	bne.n	8007174 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800715a:	9202      	str	r2, [sp, #8]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f002 f83d 	bl	80091e8 <xTaskCreateStatic>
 800716e:	4603      	mov	r3, r0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	e013      	b.n	800719c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d110      	bne.n	800719c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717c:	b29a      	uxth	r2, r3
 800717e:	f107 0310 	add.w	r3, r7, #16
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f002 f891 	bl	80092b4 <xTaskCreate>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <osThreadNew+0x13c>
          hTask = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800719c:	693b      	ldr	r3, [r7, #16]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3730      	adds	r7, #48	@ 0x30
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20003eac 	.word	0x20003eac

080071ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b4:	f3ef 8305 	mrs	r3, IPSR
 80071b8:	613b      	str	r3, [r7, #16]
  return(result);
 80071ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10f      	bne.n	80071e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d105      	bne.n	80071d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071cc:	f3ef 8311 	mrs	r3, BASEPRI
 80071d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <osDelay+0x3c>
 80071d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <osDelay+0x58>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d103      	bne.n	80071e8 <osDelay+0x3c>
    stat = osErrorISR;
 80071e0:	f06f 0305 	mvn.w	r3, #5
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e007      	b.n	80071f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f002 f9a6 	bl	8009544 <vTaskDelay>
    }
  }

  return (stat);
 80071f8:	697b      	ldr	r3, [r7, #20]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20003eac 	.word	0x20003eac

08007208 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	@ 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007214:	f3ef 8305 	mrs	r3, IPSR
 8007218:	613b      	str	r3, [r7, #16]
  return(result);
 800721a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 8085 	bne.w	800732c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007222:	f3ef 8310 	mrs	r3, PRIMASK
 8007226:	60fb      	str	r3, [r7, #12]
  return(result);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d105      	bne.n	800723a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800722e:	f3ef 8311 	mrs	r3, BASEPRI
 8007232:	60bb      	str	r3, [r7, #8]
  return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <osMutexNew+0x3a>
 800723a:	4b3f      	ldr	r3, [pc, #252]	@ (8007338 <osMutexNew+0x130>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d074      	beq.n	800732c <osMutexNew+0x124>
    if (attr != NULL) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	e001      	b.n	8007254 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <osMutexNew+0x5c>
      rmtx = 1U;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	e001      	b.n	8007268 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d15c      	bne.n	800732c <osMutexNew+0x124>
      mem = -1;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osMutexNew+0x8c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b4f      	cmp	r3, #79	@ 0x4f
 800728c:	d902      	bls.n	8007294 <osMutexNew+0x8c>
          mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e00c      	b.n	80072ae <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <osMutexNew+0xa6>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <osMutexNew+0xa6>
            mem = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e001      	b.n	80072ae <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d112      	bne.n	80072da <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4619      	mov	r1, r3
 80072c0:	2004      	movs	r0, #4
 80072c2:	f000 fec0 	bl	8008046 <xQueueCreateMutexStatic>
 80072c6:	6278      	str	r0, [r7, #36]	@ 0x24
 80072c8:	e016      	b.n	80072f8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4619      	mov	r1, r3
 80072d0:	2001      	movs	r0, #1
 80072d2:	f000 feb8 	bl	8008046 <xQueueCreateMutexStatic>
 80072d6:	6278      	str	r0, [r7, #36]	@ 0x24
 80072d8:	e00e      	b.n	80072f8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80072e6:	2004      	movs	r0, #4
 80072e8:	f000 fe95 	bl	8008016 <xQueueCreateMutex>
 80072ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80072ee:	e003      	b.n	80072f8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80072f0:	2001      	movs	r0, #1
 80072f2:	f000 fe90 	bl	8008016 <xQueueCreateMutex>
 80072f6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <osMutexNew+0x110>
        if (attr != NULL) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <osMutexNew+0x104>
          name = attr->name;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	e001      	b.n	8007310 <osMutexNew+0x108>
        } else {
          name = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007310:	6979      	ldr	r1, [r7, #20]
 8007312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007314:	f001 fee0 	bl	80090d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <osMutexNew+0x124>
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	@ 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20003eac 	.word	0x20003eac

0800733c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735a:	f3ef 8305 	mrs	r3, IPSR
 800735e:	613b      	str	r3, [r7, #16]
  return(result);
 8007360:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007366:	f3ef 8310 	mrs	r3, PRIMASK
 800736a:	60fb      	str	r3, [r7, #12]
  return(result);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007372:	f3ef 8311 	mrs	r3, BASEPRI
 8007376:	60bb      	str	r3, [r7, #8]
  return(result);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <osMutexAcquire+0x52>
 800737e:	4b1d      	ldr	r3, [pc, #116]	@ (80073f4 <osMutexAcquire+0xb8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d103      	bne.n	800738e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007386:	f06f 0305 	mvn.w	r3, #5
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e02c      	b.n	80073e8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007394:	f06f 0303 	mvn.w	r3, #3
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	e025      	b.n	80073e8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d011      	beq.n	80073c6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 fea0 	bl	80080ea <xQueueTakeMutexRecursive>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d01b      	beq.n	80073e8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80073b6:	f06f 0301 	mvn.w	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e014      	b.n	80073e8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80073be:	f06f 0302 	mvn.w	r3, #2
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e010      	b.n	80073e8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	69b8      	ldr	r0, [r7, #24]
 80073ca:	f001 fa6b 	bl	80088a4 <xQueueSemaphoreTake>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d009      	beq.n	80073e8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80073da:	f06f 0301 	mvn.w	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	e002      	b.n	80073e8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80073e2:	f06f 0302 	mvn.w	r3, #2
 80073e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80073e8:	69fb      	ldr	r3, [r7, #28]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20003eac 	.word	0x20003eac

080073f8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007414:	f3ef 8305 	mrs	r3, IPSR
 8007418:	613b      	str	r3, [r7, #16]
  return(result);
 800741a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10f      	bne.n	8007440 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007420:	f3ef 8310 	mrs	r3, PRIMASK
 8007424:	60fb      	str	r3, [r7, #12]
  return(result);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800742c:	f3ef 8311 	mrs	r3, BASEPRI
 8007430:	60bb      	str	r3, [r7, #8]
  return(result);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <osMutexRelease+0x50>
 8007438:	4b16      	ldr	r3, [pc, #88]	@ (8007494 <osMutexRelease+0x9c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d103      	bne.n	8007448 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007440:	f06f 0305 	mvn.w	r3, #5
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e01f      	b.n	8007488 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800744e:	f06f 0303 	mvn.w	r3, #3
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e018      	b.n	8007488 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800745c:	69b8      	ldr	r0, [r7, #24]
 800745e:	f000 fe0d 	bl	800807c <xQueueGiveMutexRecursive>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d00f      	beq.n	8007488 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007468:	f06f 0302 	mvn.w	r3, #2
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	e00b      	b.n	8007488 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	69b8      	ldr	r0, [r7, #24]
 8007478:	f000 fee6 	bl	8008248 <xQueueGenericSend>
 800747c:	4603      	mov	r3, r0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d002      	beq.n	8007488 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007482:	f06f 0302 	mvn.w	r3, #2
 8007486:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007488:	69fb      	ldr	r3, [r7, #28]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20003eac 	.word	0x20003eac

08007498 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	@ 0x30
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a8:	f3ef 8305 	mrs	r3, IPSR
 80074ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 8086 	bne.w	80075c2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ba:	617b      	str	r3, [r7, #20]
  return(result);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074c2:	f3ef 8311 	mrs	r3, BASEPRI
 80074c6:	613b      	str	r3, [r7, #16]
  return(result);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <osSemaphoreNew+0x3e>
 80074ce:	4b3f      	ldr	r3, [pc, #252]	@ (80075cc <osSemaphoreNew+0x134>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d075      	beq.n	80075c2 <osSemaphoreNew+0x12a>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d072      	beq.n	80075c2 <osSemaphoreNew+0x12a>
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d86e      	bhi.n	80075c2 <osSemaphoreNew+0x12a>
    mem = -1;
 80074e4:	f04f 33ff 	mov.w	r3, #4294967295
 80074e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d015      	beq.n	800751c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <osSemaphoreNew+0x6e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80074fe:	d902      	bls.n	8007506 <osSemaphoreNew+0x6e>
        mem = 1;
 8007500:	2301      	movs	r3, #1
 8007502:	623b      	str	r3, [r7, #32]
 8007504:	e00c      	b.n	8007520 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <osSemaphoreNew+0x88>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <osSemaphoreNew+0x88>
          mem = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	e001      	b.n	8007520 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d04c      	beq.n	80075c2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d128      	bne.n	8007580 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10a      	bne.n	800754a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2203      	movs	r2, #3
 800753a:	9200      	str	r2, [sp, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	2100      	movs	r1, #0
 8007540:	2001      	movs	r0, #1
 8007542:	f000 fc61 	bl	8007e08 <xQueueGenericCreateStatic>
 8007546:	6278      	str	r0, [r7, #36]	@ 0x24
 8007548:	e005      	b.n	8007556 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800754a:	2203      	movs	r2, #3
 800754c:	2100      	movs	r1, #0
 800754e:	2001      	movs	r0, #1
 8007550:	f000 fce1 	bl	8007f16 <xQueueGenericCreate>
 8007554:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d022      	beq.n	80075a2 <osSemaphoreNew+0x10a>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01f      	beq.n	80075a2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	2100      	movs	r1, #0
 8007568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800756a:	f000 fe6d 	bl	8008248 <xQueueGenericSend>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d016      	beq.n	80075a2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007576:	f001 fc61 	bl	8008e3c <vQueueDelete>
            hSemaphore = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
 800757e:	e010      	b.n	80075a2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d108      	bne.n	8007598 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	461a      	mov	r2, r3
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fde4 	bl	800815c <xQueueCreateCountingSemaphoreStatic>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
 8007596:	e004      	b.n	80075a2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fe1b 	bl	80081d6 <xQueueCreateCountingSemaphore>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e001      	b.n	80075ba <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80075ba:	69f9      	ldr	r1, [r7, #28]
 80075bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075be:	f001 fd8b 	bl	80090d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3728      	adds	r7, #40	@ 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20003eac 	.word	0x20003eac

080075d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80075e8:	f06f 0303 	mvn.w	r3, #3
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	e04b      	b.n	8007688 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f0:	f3ef 8305 	mrs	r3, IPSR
 80075f4:	617b      	str	r3, [r7, #20]
  return(result);
 80075f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10f      	bne.n	800761c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007600:	613b      	str	r3, [r7, #16]
  return(result);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d105      	bne.n	8007614 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007608:	f3ef 8311 	mrs	r3, BASEPRI
 800760c:	60fb      	str	r3, [r7, #12]
  return(result);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d026      	beq.n	8007662 <osSemaphoreAcquire+0x92>
 8007614:	4b1f      	ldr	r3, [pc, #124]	@ (8007694 <osSemaphoreAcquire+0xc4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d122      	bne.n	8007662 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007622:	f06f 0303 	mvn.w	r3, #3
 8007626:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007628:	e02d      	b.n	8007686 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	461a      	mov	r2, r3
 8007634:	2100      	movs	r1, #0
 8007636:	69b8      	ldr	r0, [r7, #24]
 8007638:	f001 fb36 	bl	8008ca8 <xQueueReceiveFromISR>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d003      	beq.n	800764a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007642:	f06f 0302 	mvn.w	r3, #2
 8007646:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007648:	e01d      	b.n	8007686 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <osSemaphoreAcquire+0xb6>
 8007650:	4b11      	ldr	r3, [pc, #68]	@ (8007698 <osSemaphoreAcquire+0xc8>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007660:	e011      	b.n	8007686 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	69b8      	ldr	r0, [r7, #24]
 8007666:	f001 f91d 	bl	80088a4 <xQueueSemaphoreTake>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d00b      	beq.n	8007688 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007676:	f06f 0301 	mvn.w	r3, #1
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e004      	b.n	8007688 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800767e:	f06f 0302 	mvn.w	r3, #2
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e000      	b.n	8007688 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007686:	bf00      	nop
      }
    }
  }

  return (stat);
 8007688:	69fb      	ldr	r3, [r7, #28]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20003eac 	.word	0x20003eac
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80076b2:	f06f 0303 	mvn.w	r3, #3
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e03e      	b.n	8007738 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ba:	f3ef 8305 	mrs	r3, IPSR
 80076be:	617b      	str	r3, [r7, #20]
  return(result);
 80076c0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10f      	bne.n	80076e6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ca:	613b      	str	r3, [r7, #16]
  return(result);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d2:	f3ef 8311 	mrs	r3, BASEPRI
 80076d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01e      	beq.n	800771c <osSemaphoreRelease+0x80>
 80076de:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <osSemaphoreRelease+0xa8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d11a      	bne.n	800771c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076ea:	f107 0308 	add.w	r3, r7, #8
 80076ee:	4619      	mov	r1, r3
 80076f0:	69b8      	ldr	r0, [r7, #24]
 80076f2:	f000 ff56 	bl	80085a2 <xQueueGiveFromISR>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d003      	beq.n	8007704 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80076fc:	f06f 0302 	mvn.w	r3, #2
 8007700:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007702:	e018      	b.n	8007736 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d015      	beq.n	8007736 <osSemaphoreRelease+0x9a>
 800770a:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <osSemaphoreRelease+0xac>)
 800770c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800771a:	e00c      	b.n	8007736 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	69b8      	ldr	r0, [r7, #24]
 8007724:	f000 fd90 	bl	8008248 <xQueueGenericSend>
 8007728:	4603      	mov	r3, r0
 800772a:	2b01      	cmp	r3, #1
 800772c:	d004      	beq.n	8007738 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800772e:	f06f 0302 	mvn.w	r3, #2
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e000      	b.n	8007738 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007736:	bf00      	nop
    }
  }

  return (stat);
 8007738:	69fb      	ldr	r3, [r7, #28]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20003eac 	.word	0x20003eac
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007758:	f3ef 8305 	mrs	r3, IPSR
 800775c:	617b      	str	r3, [r7, #20]
  return(result);
 800775e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	613b      	str	r3, [r7, #16]
  return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007770:	f3ef 8311 	mrs	r3, BASEPRI
 8007774:	60fb      	str	r3, [r7, #12]
  return(result);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <osSemaphoreDelete+0x40>
 800777c:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <osSemaphoreDelete+0x68>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d103      	bne.n	800778c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007784:	f06f 0305 	mvn.w	r3, #5
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e00e      	b.n	80077aa <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007792:	f06f 0303 	mvn.w	r3, #3
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e007      	b.n	80077aa <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800779a:	69b8      	ldr	r0, [r7, #24]
 800779c:	f001 fcc6 	bl	800912c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80077a4:	69b8      	ldr	r0, [r7, #24]
 80077a6:	f001 fb49 	bl	8008e3c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80077aa:	69fb      	ldr	r3, [r7, #28]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20003eac 	.word	0x20003eac

080077b8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08c      	sub	sp, #48	@ 0x30
 80077bc:	af02      	add	r7, sp, #8
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077c8:	f3ef 8305 	mrs	r3, IPSR
 80077cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80077ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d16f      	bne.n	80078b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d4:	f3ef 8310 	mrs	r3, PRIMASK
 80077d8:	617b      	str	r3, [r7, #20]
  return(result);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077e0:	f3ef 8311 	mrs	r3, BASEPRI
 80077e4:	613b      	str	r3, [r7, #16]
  return(result);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <osMessageQueueNew+0x3c>
 80077ec:	4b34      	ldr	r3, [pc, #208]	@ (80078c0 <osMessageQueueNew+0x108>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d05f      	beq.n	80078b4 <osMessageQueueNew+0xfc>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d05c      	beq.n	80078b4 <osMessageQueueNew+0xfc>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d059      	beq.n	80078b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8007800:	f04f 33ff 	mov.w	r3, #4294967295
 8007804:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d029      	beq.n	8007860 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d012      	beq.n	800783a <osMessageQueueNew+0x82>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b4f      	cmp	r3, #79	@ 0x4f
 800781a:	d90e      	bls.n	800783a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	429a      	cmp	r2, r3
 8007832:	d302      	bcc.n	800783a <osMessageQueueNew+0x82>
        mem = 1;
 8007834:	2301      	movs	r3, #1
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	e014      	b.n	8007864 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d110      	bne.n	8007864 <osMessageQueueNew+0xac>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10c      	bne.n	8007864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <osMessageQueueNew+0xac>
          mem = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	623b      	str	r3, [r7, #32]
 800785e:	e001      	b.n	8007864 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d10b      	bne.n	8007882 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2100      	movs	r1, #0
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fac5 	bl	8007e08 <xQueueGenericCreateStatic>
 800787e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007880:	e008      	b.n	8007894 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007888:	2200      	movs	r2, #0
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fb42 	bl	8007f16 <xQueueGenericCreate>
 8007892:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00c      	beq.n	80078b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	e001      	b.n	80078ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80078ac:	69f9      	ldr	r1, [r7, #28]
 80078ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078b0:	f001 fc12 	bl	80090d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3728      	adds	r7, #40	@ 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20003eac 	.word	0x20003eac

080078c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	@ 0x28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078dc:	f3ef 8305 	mrs	r3, IPSR
 80078e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80078e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10f      	bne.n	8007908 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f4:	f3ef 8311 	mrs	r3, BASEPRI
 80078f8:	617b      	str	r3, [r7, #20]
  return(result);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d02c      	beq.n	800795a <osMessageQueuePut+0x96>
 8007900:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <osMessageQueuePut+0xe0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d128      	bne.n	800795a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <osMessageQueuePut+0x56>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <osMessageQueuePut+0x56>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800791a:	f06f 0303 	mvn.w	r3, #3
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007920:	e039      	b.n	8007996 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007926:	f107 0210 	add.w	r2, r7, #16
 800792a:	2300      	movs	r3, #0
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	6a38      	ldr	r0, [r7, #32]
 8007930:	f000 fd94 	bl	800845c <xQueueGenericSendFromISR>
 8007934:	4603      	mov	r3, r0
 8007936:	2b01      	cmp	r3, #1
 8007938:	d003      	beq.n	8007942 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800793a:	f06f 0302 	mvn.w	r3, #2
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007940:	e029      	b.n	8007996 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d026      	beq.n	8007996 <osMessageQueuePut+0xd2>
 8007948:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <osMessageQueuePut+0xe4>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007958:	e01d      	b.n	8007996 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <osMessageQueuePut+0xa2>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007966:	f06f 0303 	mvn.w	r3, #3
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
 800796c:	e014      	b.n	8007998 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800796e:	2300      	movs	r3, #0
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	6a38      	ldr	r0, [r7, #32]
 8007976:	f000 fc67 	bl	8008248 <xQueueGenericSend>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d00b      	beq.n	8007998 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007986:	f06f 0301 	mvn.w	r3, #1
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
 800798c:	e004      	b.n	8007998 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800798e:	f06f 0302 	mvn.w	r3, #2
 8007992:	627b      	str	r3, [r7, #36]	@ 0x24
 8007994:	e000      	b.n	8007998 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007996:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800799a:	4618      	mov	r0, r3
 800799c:	3728      	adds	r7, #40	@ 0x28
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20003eac 	.word	0x20003eac
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	@ 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c2:	f3ef 8305 	mrs	r3, IPSR
 80079c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10f      	bne.n	80079ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ce:	f3ef 8310 	mrs	r3, PRIMASK
 80079d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079da:	f3ef 8311 	mrs	r3, BASEPRI
 80079de:	617b      	str	r3, [r7, #20]
  return(result);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02c      	beq.n	8007a40 <osMessageQueueGet+0x94>
 80079e6:	4b28      	ldr	r3, [pc, #160]	@ (8007a88 <osMessageQueueGet+0xdc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d128      	bne.n	8007a40 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <osMessageQueueGet+0x54>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <osMessageQueueGet+0x54>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007a00:	f06f 0303 	mvn.w	r3, #3
 8007a04:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a06:	e038      	b.n	8007a7a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a0c:	f107 0310 	add.w	r3, r7, #16
 8007a10:	461a      	mov	r2, r3
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	6a38      	ldr	r0, [r7, #32]
 8007a16:	f001 f947 	bl	8008ca8 <xQueueReceiveFromISR>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d003      	beq.n	8007a28 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007a20:	f06f 0302 	mvn.w	r3, #2
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a26:	e028      	b.n	8007a7a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d025      	beq.n	8007a7a <osMessageQueueGet+0xce>
 8007a2e:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <osMessageQueueGet+0xe0>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a3e:	e01c      	b.n	8007a7a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <osMessageQueueGet+0xa0>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007a4c:	f06f 0303 	mvn.w	r3, #3
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a52:	e013      	b.n	8007a7c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	6a38      	ldr	r0, [r7, #32]
 8007a5a:	f000 fe3b 	bl	80086d4 <xQueueReceive>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d00b      	beq.n	8007a7c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007a6a:	f06f 0301 	mvn.w	r3, #1
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a70:	e004      	b.n	8007a7c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007a72:	f06f 0302 	mvn.w	r3, #2
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a78:	e000      	b.n	8007a7c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3728      	adds	r7, #40	@ 0x28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20003eac 	.word	0x20003eac
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	e01e      	b.n	8007ae6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa8:	f3ef 8305 	mrs	r3, IPSR
 8007aac:	617b      	str	r3, [r7, #20]
  return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10f      	bne.n	8007ad4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <osMessageQueueGetCount+0x4e>
 8007acc:	4b08      	ldr	r3, [pc, #32]	@ (8007af0 <osMessageQueueGetCount+0x60>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d104      	bne.n	8007ade <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007ad4:	69b8      	ldr	r0, [r7, #24]
 8007ad6:	f001 f990 	bl	8008dfa <uxQueueMessagesWaitingFromISR>
 8007ada:	61f8      	str	r0, [r7, #28]
 8007adc:	e003      	b.n	8007ae6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007ade:	69b8      	ldr	r0, [r7, #24]
 8007ae0:	f001 f96a 	bl	8008db8 <uxQueueMessagesWaiting>
 8007ae4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007ae6:	69fb      	ldr	r3, [r7, #28]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3720      	adds	r7, #32
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20003eac 	.word	0x20003eac

08007af4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b00:	f3ef 8305 	mrs	r3, IPSR
 8007b04:	617b      	str	r3, [r7, #20]
  return(result);
 8007b06:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10f      	bne.n	8007b2c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b10:	613b      	str	r3, [r7, #16]
  return(result);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b18:	f3ef 8311 	mrs	r3, BASEPRI
 8007b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <osMessageQueueDelete+0x40>
 8007b24:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <osMessageQueueDelete+0x68>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d103      	bne.n	8007b34 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007b2c:	f06f 0305 	mvn.w	r3, #5
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e00e      	b.n	8007b52 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007b3a:	f06f 0303 	mvn.w	r3, #3
 8007b3e:	61fb      	str	r3, [r7, #28]
 8007b40:	e007      	b.n	8007b52 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007b42:	69b8      	ldr	r0, [r7, #24]
 8007b44:	f001 faf2 	bl	800912c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f001 f975 	bl	8008e3c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007b52:	69fb      	ldr	r3, [r7, #28]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20003eac 	.word	0x20003eac

08007b60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a07      	ldr	r2, [pc, #28]	@ (8007b8c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a06      	ldr	r2, [pc, #24]	@ (8007b90 <vApplicationGetIdleTaskMemory+0x30>)
 8007b76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2280      	movs	r2, #128	@ 0x80
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20003eb0 	.word	0x20003eb0
 8007b90:	20003f0c 	.word	0x20003f0c

08007b94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a07      	ldr	r2, [pc, #28]	@ (8007bc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a06      	ldr	r2, [pc, #24]	@ (8007bc4 <vApplicationGetTimerTaskMemory+0x30>)
 8007baa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	2000410c 	.word	0x2000410c
 8007bc4:	20004168 	.word	0x20004168

08007bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f103 0208 	add.w	r2, r3, #8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f103 0208 	add.w	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f103 0208 	add.w	r2, r3, #8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d103      	bne.n	8007c8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e00c      	b.n	8007ca4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e002      	b.n	8007c98 <vListInsert+0x2e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d2f6      	bcs.n	8007c92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6892      	ldr	r2, [r2, #8]
 8007cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6852      	ldr	r2, [r2, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d103      	bne.n	8007d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	1e5a      	subs	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10d      	bne.n	8007d60 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	b672      	cpsid	i
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	b662      	cpsie	i
 8007d58:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d60:	f002 ff0c 	bl	800ab7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6c:	68f9      	ldr	r1, [r7, #12]
 8007d6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d70:	fb01 f303 	mul.w	r3, r1, r3
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d90:	3b01      	subs	r3, #1
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	441a      	add	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	22ff      	movs	r2, #255	@ 0xff
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	22ff      	movs	r2, #255	@ 0xff
 8007dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d114      	bne.n	8007de0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01a      	beq.n	8007df4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 fea4 	bl	8009b10 <xTaskRemoveFromEventList>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d012      	beq.n	8007df4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <xQueueGenericReset+0xd4>)
 8007dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	e009      	b.n	8007df4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3310      	adds	r3, #16
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff feef 	bl	8007bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3324      	adds	r3, #36	@ 0x24
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff feea 	bl	8007bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007df4:	f002 fef8 	bl	800abe8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007df8:	2301      	movs	r3, #1
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	@ 0x38
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	b672      	cpsid	i
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	b662      	cpsie	i
 8007e30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	b672      	cpsid	i
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	b662      	cpsie	i
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <xQueueGenericCreateStatic+0x5e>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <xQueueGenericCreateStatic+0x62>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <xQueueGenericCreateStatic+0x64>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10d      	bne.n	8007e8c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	b672      	cpsid	i
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	b662      	cpsie	i
 8007e84:	623b      	str	r3, [r7, #32]
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	e7fd      	b.n	8007e88 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <xQueueGenericCreateStatic+0x90>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <xQueueGenericCreateStatic+0x94>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <xQueueGenericCreateStatic+0x96>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10d      	bne.n	8007ebe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	61fb      	str	r3, [r7, #28]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ebe:	2350      	movs	r3, #80	@ 0x50
 8007ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b50      	cmp	r3, #80	@ 0x50
 8007ec6:	d00d      	beq.n	8007ee4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	b672      	cpsid	i
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	b662      	cpsie	i
 8007edc:	61bb      	str	r3, [r7, #24]
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ee4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ef8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4613      	mov	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f848 	bl	8007f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3730      	adds	r7, #48	@ 0x30
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b08a      	sub	sp, #40	@ 0x28
 8007f1a:	af02      	add	r7, sp, #8
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10d      	bne.n	8007f46 <xQueueGenericCreate+0x30>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	b672      	cpsid	i
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	b662      	cpsie	i
 8007f3e:	613b      	str	r3, [r7, #16]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e004      	b.n	8007f5c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	3350      	adds	r3, #80	@ 0x50
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 ff39 	bl	800add8 <pvPortMalloc>
 8007f66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d011      	beq.n	8007f92 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	3350      	adds	r3, #80	@ 0x50
 8007f76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4613      	mov	r3, r2
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f805 	bl	8007f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f92:	69bb      	ldr	r3, [r7, #24]
	}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fca:	2101      	movs	r1, #1
 8007fcc:	69b8      	ldr	r0, [r7, #24]
 8007fce:	f7ff feaf 	bl	8007d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008002:	2300      	movs	r3, #0
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f91d 	bl	8008248 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	4603      	mov	r3, r0
 800801e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008020:	2301      	movs	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	461a      	mov	r2, r3
 800802c:	6939      	ldr	r1, [r7, #16]
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f7ff ff71 	bl	8007f16 <xQueueGenericCreate>
 8008034:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff ffd3 	bl	8007fe2 <prvInitialiseMutex>

		return xNewQueue;
 800803c:	68fb      	ldr	r3, [r7, #12]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008046:	b580      	push	{r7, lr}
 8008048:	b088      	sub	sp, #32
 800804a:	af02      	add	r7, sp, #8
 800804c:	4603      	mov	r3, r0
 800804e:	6039      	str	r1, [r7, #0]
 8008050:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008052:	2301      	movs	r3, #1
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2200      	movs	r2, #0
 8008062:	6939      	ldr	r1, [r7, #16]
 8008064:	6978      	ldr	r0, [r7, #20]
 8008066:	f7ff fecf 	bl	8007e08 <xQueueGenericCreateStatic>
 800806a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff ffb8 	bl	8007fe2 <prvInitialiseMutex>

		return xNewQueue;
 8008072:	68fb      	ldr	r3, [r7, #12]
	}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800807c:	b590      	push	{r4, r7, lr}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	b672      	cpsid	i
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	b662      	cpsie	i
 80080a2:	60fb      	str	r3, [r7, #12]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	689c      	ldr	r4, [r3, #8]
 80080ae:	f001 fef7 	bl	8009ea0 <xTaskGetCurrentTaskHandle>
 80080b2:	4603      	mov	r3, r0
 80080b4:	429c      	cmp	r4, r3
 80080b6:	d111      	bne.n	80080dc <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	1e5a      	subs	r2, r3, #1
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80080ca:	2300      	movs	r3, #0
 80080cc:	2200      	movs	r2, #0
 80080ce:	2100      	movs	r1, #0
 80080d0:	6938      	ldr	r0, [r7, #16]
 80080d2:	f000 f8b9 	bl	8008248 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e001      	b.n	80080e0 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80080e0:	697b      	ldr	r3, [r7, #20]
	}
 80080e2:	4618      	mov	r0, r3
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd90      	pop	{r4, r7, pc}

080080ea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80080ea:	b590      	push	{r4, r7, lr}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10d      	bne.n	800811a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	b672      	cpsid	i
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	b662      	cpsie	i
 8008112:	60fb      	str	r3, [r7, #12]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	689c      	ldr	r4, [r3, #8]
 800811e:	f001 febf 	bl	8009ea0 <xTaskGetCurrentTaskHandle>
 8008122:	4603      	mov	r3, r0
 8008124:	429c      	cmp	r4, r3
 8008126:	d107      	bne.n	8008138 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008132:	2301      	movs	r3, #1
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e00c      	b.n	8008152 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6938      	ldr	r0, [r7, #16]
 800813c:	f000 fbb2 	bl	80088a4 <xQueueSemaphoreTake>
 8008140:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008152:	697b      	ldr	r3, [r7, #20]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd90      	pop	{r4, r7, pc}

0800815c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	@ 0x28
 8008160:	af02      	add	r7, sp, #8
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10d      	bne.n	800818a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	b672      	cpsid	i
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	b662      	cpsie	i
 8008182:	61bb      	str	r3, [r7, #24]
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	e7fd      	b.n	8008186 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d90d      	bls.n	80081ae <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	617b      	str	r3, [r7, #20]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081ae:	2302      	movs	r3, #2
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2100      	movs	r1, #0
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff fe25 	bl	8007e08 <xQueueGenericCreateStatic>
 80081be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80081cc:	69fb      	ldr	r3, [r7, #28]
	}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	b672      	cpsid	i
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	b662      	cpsie	i
 80081fa:	613b      	str	r3, [r7, #16]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d90d      	bls.n	8008226 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	b672      	cpsid	i
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	b662      	cpsie	i
 800821e:	60fb      	str	r3, [r7, #12]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008226:	2202      	movs	r2, #2
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fe73 	bl	8007f16 <xQueueGenericCreate>
 8008230:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800823e:	697b      	ldr	r3, [r7, #20]
	}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08e      	sub	sp, #56	@ 0x38
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008256:	2300      	movs	r3, #0
 8008258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10d      	bne.n	8008280 <xQueueGenericSend+0x38>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	b672      	cpsid	i
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	b662      	cpsie	i
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <xQueueGenericSend+0x46>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <xQueueGenericSend+0x4a>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <xQueueGenericSend+0x4c>
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10d      	bne.n	80082b4 <xQueueGenericSend+0x6c>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	b672      	cpsid	i
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	b662      	cpsie	i
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082ae:	bf00      	nop
 80082b0:	bf00      	nop
 80082b2:	e7fd      	b.n	80082b0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d103      	bne.n	80082c2 <xQueueGenericSend+0x7a>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <xQueueGenericSend+0x7e>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueGenericSend+0x80>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <xQueueGenericSend+0xa0>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	623b      	str	r3, [r7, #32]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082e8:	f001 fdea 	bl	8009ec0 <xTaskGetSchedulerState>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <xQueueGenericSend+0xb0>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <xQueueGenericSend+0xb4>
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <xQueueGenericSend+0xb6>
 80082fc:	2300      	movs	r3, #0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10d      	bne.n	800831e <xQueueGenericSend+0xd6>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	61fb      	str	r3, [r7, #28]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800831e:	f002 fc2d 	bl	800ab7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	429a      	cmp	r2, r3
 800832c:	d302      	bcc.n	8008334 <xQueueGenericSend+0xec>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d129      	bne.n	8008388 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800833a:	f000 fdbd 	bl	8008eb8 <prvCopyDataToQueue>
 800833e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	d010      	beq.n	800836a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	3324      	adds	r3, #36	@ 0x24
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fbdf 	bl	8009b10 <xTaskRemoveFromEventList>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d013      	beq.n	8008380 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008358:	4b3f      	ldr	r3, [pc, #252]	@ (8008458 <xQueueGenericSend+0x210>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	e00a      	b.n	8008380 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800836a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008370:	4b39      	ldr	r3, [pc, #228]	@ (8008458 <xQueueGenericSend+0x210>)
 8008372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008380:	f002 fc32 	bl	800abe8 <vPortExitCritical>
				return pdPASS;
 8008384:	2301      	movs	r3, #1
 8008386:	e063      	b.n	8008450 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800838e:	f002 fc2b 	bl	800abe8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008392:	2300      	movs	r3, #0
 8008394:	e05c      	b.n	8008450 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fc1b 	bl	8009bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083aa:	f002 fc1d 	bl	800abe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083ae:	f001 f96d 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b2:	f002 fbe3 	bl	800ab7c <vPortEnterCritical>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d103      	bne.n	80083cc <xQueueGenericSend+0x184>
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083d2:	b25b      	sxtb	r3, r3
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d8:	d103      	bne.n	80083e2 <xQueueGenericSend+0x19a>
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083e2:	f002 fc01 	bl	800abe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e6:	1d3a      	adds	r2, r7, #4
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fc0a 	bl	8009c08 <xTaskCheckForTimeOut>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d124      	bne.n	8008444 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083fc:	f000 fe54 	bl	80090a8 <prvIsQueueFull>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	3310      	adds	r3, #16
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fb28 	bl	8009a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008416:	f000 fddf 	bl	8008fd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800841a:	f001 f945 	bl	80096a8 <xTaskResumeAll>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	f47f af7c 	bne.w	800831e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <xQueueGenericSend+0x210>)
 8008428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	e772      	b.n	800831e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800843a:	f000 fdcd 	bl	8008fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800843e:	f001 f933 	bl	80096a8 <xTaskResumeAll>
 8008442:	e76c      	b.n	800831e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008446:	f000 fdc7 	bl	8008fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800844a:	f001 f92d 	bl	80096a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800844e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008450:	4618      	mov	r0, r3
 8008452:	3738      	adds	r7, #56	@ 0x38
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08e      	sub	sp, #56	@ 0x38
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10d      	bne.n	8008490 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	b672      	cpsid	i
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	b662      	cpsie	i
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <xQueueGenericSendFromISR+0x42>
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <xQueueGenericSendFromISR+0x46>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <xQueueGenericSendFromISR+0x48>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	623b      	str	r3, [r7, #32]
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d103      	bne.n	80084d2 <xQueueGenericSendFromISR+0x76>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <xQueueGenericSendFromISR+0x7a>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericSendFromISR+0x7c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10d      	bne.n	80084f8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	b672      	cpsid	i
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	b662      	cpsie	i
 80084f0:	61fb      	str	r3, [r7, #28]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084f8:	f002 fc28 	bl	800ad4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084fc:	f3ef 8211 	mrs	r2, BASEPRI
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	b672      	cpsid	i
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	b662      	cpsie	i
 8008514:	61ba      	str	r2, [r7, #24]
 8008516:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008518:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008524:	429a      	cmp	r2, r3
 8008526:	d302      	bcc.n	800852e <xQueueGenericSendFromISR+0xd2>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d12c      	bne.n	8008588 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800853e:	f000 fcbb 	bl	8008eb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008542:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d112      	bne.n	8008572 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d016      	beq.n	8008582 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	3324      	adds	r3, #36	@ 0x24
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fad9 	bl	8009b10 <xTaskRemoveFromEventList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e007      	b.n	8008582 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008572:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008576:	3301      	adds	r3, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	b25a      	sxtb	r2, r3
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008582:	2301      	movs	r3, #1
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008586:	e001      	b.n	800858c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008588:	2300      	movs	r3, #0
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
 800858c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800859a:	4618      	mov	r0, r3
 800859c:	3738      	adds	r7, #56	@ 0x38
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b08e      	sub	sp, #56	@ 0x38
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10d      	bne.n	80085d2 <xQueueGiveFromISR+0x30>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	b672      	cpsid	i
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	b662      	cpsie	i
 80085ca:	623b      	str	r3, [r7, #32]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <xQueueGiveFromISR+0x54>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	b672      	cpsid	i
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	b662      	cpsie	i
 80085ee:	61fb      	str	r3, [r7, #28]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d103      	bne.n	8008606 <xQueueGiveFromISR+0x64>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <xQueueGiveFromISR+0x68>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueGiveFromISR+0x6a>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10d      	bne.n	800862c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	b672      	cpsid	i
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	b662      	cpsie	i
 8008624:	61bb      	str	r3, [r7, #24]
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	e7fd      	b.n	8008628 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800862c:	f002 fb8e 	bl	800ad4c <vPortValidateInterruptPriority>
	__asm volatile
 8008630:	f3ef 8211 	mrs	r2, BASEPRI
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	b672      	cpsid	i
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	b662      	cpsie	i
 8008648:	617a      	str	r2, [r7, #20]
 800864a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800864c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800864e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865c:	429a      	cmp	r2, r3
 800865e:	d22b      	bcs.n	80086b8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008672:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867a:	d112      	bne.n	80086a2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d016      	beq.n	80086b2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	3324      	adds	r3, #36	@ 0x24
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fa41 	bl	8009b10 <xTaskRemoveFromEventList>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00e      	beq.n	80086b2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e007      	b.n	80086b2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086a6:	3301      	adds	r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	b25a      	sxtb	r2, r3
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086b2:	2301      	movs	r3, #1
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b6:	e001      	b.n	80086bc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f383 8811 	msr	BASEPRI, r3
}
 80086c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3738      	adds	r7, #56	@ 0x38
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	@ 0x30
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <xQueueReceive+0x36>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	623b      	str	r3, [r7, #32]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d103      	bne.n	8008718 <xQueueReceive+0x44>
 8008710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <xQueueReceive+0x48>
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <xQueueReceive+0x4a>
 800871c:	2300      	movs	r3, #0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10d      	bne.n	800873e <xQueueReceive+0x6a>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	61fb      	str	r3, [r7, #28]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800873e:	f001 fbbf 	bl	8009ec0 <xTaskGetSchedulerState>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <xQueueReceive+0x7a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <xQueueReceive+0x7e>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <xQueueReceive+0x80>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10d      	bne.n	8008774 <xQueueReceive+0xa0>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	61bb      	str	r3, [r7, #24]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008774:	f002 fa02 	bl	800ab7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01f      	beq.n	80087c4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008788:	f000 fc00 	bl	8008f8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	1e5a      	subs	r2, r3, #1
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00f      	beq.n	80087bc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	3310      	adds	r3, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f9b5 	bl	8009b10 <xTaskRemoveFromEventList>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087ac:	4b3c      	ldr	r3, [pc, #240]	@ (80088a0 <xQueueReceive+0x1cc>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087bc:	f002 fa14 	bl	800abe8 <vPortExitCritical>
				return pdPASS;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e069      	b.n	8008898 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ca:	f002 fa0d 	bl	800abe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e062      	b.n	8008898 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d8:	f107 0310 	add.w	r3, r7, #16
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 f9fd 	bl	8009bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087e2:	2301      	movs	r3, #1
 80087e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087e6:	f002 f9ff 	bl	800abe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ea:	f000 ff4f 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ee:	f002 f9c5 	bl	800ab7c <vPortEnterCritical>
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087f8:	b25b      	sxtb	r3, r3
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d103      	bne.n	8008808 <xQueueReceive+0x134>
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800880e:	b25b      	sxtb	r3, r3
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d103      	bne.n	800881e <xQueueReceive+0x14a>
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800881e:	f002 f9e3 	bl	800abe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008822:	1d3a      	adds	r2, r7, #4
 8008824:	f107 0310 	add.w	r3, r7, #16
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f001 f9ec 	bl	8009c08 <xTaskCheckForTimeOut>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d123      	bne.n	800887e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008838:	f000 fc20 	bl	800907c <prvIsQueueEmpty>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d017      	beq.n	8008872 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	3324      	adds	r3, #36	@ 0x24
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f001 f90a 	bl	8009a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008852:	f000 fbc1 	bl	8008fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008856:	f000 ff27 	bl	80096a8 <xTaskResumeAll>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d189      	bne.n	8008774 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008860:	4b0f      	ldr	r3, [pc, #60]	@ (80088a0 <xQueueReceive+0x1cc>)
 8008862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	e780      	b.n	8008774 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008874:	f000 fbb0 	bl	8008fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008878:	f000 ff16 	bl	80096a8 <xTaskResumeAll>
 800887c:	e77a      	b.n	8008774 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008880:	f000 fbaa 	bl	8008fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008884:	f000 ff10 	bl	80096a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888a:	f000 fbf7 	bl	800907c <prvIsQueueEmpty>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	f43f af6f 	beq.w	8008774 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008896:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008898:	4618      	mov	r0, r3
 800889a:	3730      	adds	r7, #48	@ 0x30
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08e      	sub	sp, #56	@ 0x38
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <xQueueSemaphoreTake+0x38>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	b672      	cpsid	i
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	b662      	cpsie	i
 80088d4:	623b      	str	r3, [r7, #32]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00d      	beq.n	8008900 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	b672      	cpsid	i
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	b662      	cpsie	i
 80088f8:	61fb      	str	r3, [r7, #28]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008900:	f001 fade 	bl	8009ec0 <xTaskGetSchedulerState>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <xQueueSemaphoreTake+0x6c>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <xQueueSemaphoreTake+0x70>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <xQueueSemaphoreTake+0x72>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10d      	bne.n	8008936 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	b672      	cpsid	i
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	b662      	cpsie	i
 800892e:	61bb      	str	r3, [r7, #24]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008936:	f002 f921 	bl	800ab7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d024      	beq.n	8008990 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800894e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008956:	f001 fc35 	bl	800a1c4 <pvTaskIncrementMutexHeldCount>
 800895a:	4602      	mov	r2, r0
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00f      	beq.n	8008988 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	3310      	adds	r3, #16
 800896c:	4618      	mov	r0, r3
 800896e:	f001 f8cf 	bl	8009b10 <xTaskRemoveFromEventList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008978:	4b55      	ldr	r3, [pc, #340]	@ (8008ad0 <xQueueSemaphoreTake+0x22c>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008988:	f002 f92e 	bl	800abe8 <vPortExitCritical>
				return pdPASS;
 800898c:	2301      	movs	r3, #1
 800898e:	e09a      	b.n	8008ac6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d114      	bne.n	80089c0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00d      	beq.n	80089b8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a0:	b672      	cpsid	i
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	b662      	cpsie	i
 80089b0:	617b      	str	r3, [r7, #20]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80089b8:	f002 f916 	bl	800abe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089bc:	2300      	movs	r3, #0
 80089be:	e082      	b.n	8008ac6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089c6:	f107 030c 	add.w	r3, r7, #12
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 f906 	bl	8009bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089d0:	2301      	movs	r3, #1
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089d4:	f002 f908 	bl	800abe8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089d8:	f000 fe58 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089dc:	f002 f8ce 	bl	800ab7c <vPortEnterCritical>
 80089e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d103      	bne.n	80089f6 <xQueueSemaphoreTake+0x152>
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d103      	bne.n	8008a0c <xQueueSemaphoreTake+0x168>
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a0c:	f002 f8ec 	bl	800abe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a10:	463a      	mov	r2, r7
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 f8f5 	bl	8009c08 <xTaskCheckForTimeOut>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d132      	bne.n	8008a8a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a26:	f000 fb29 	bl	800907c <prvIsQueueEmpty>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d026      	beq.n	8008a7e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008a38:	f002 f8a0 	bl	800ab7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 fa5b 	bl	8009efc <xTaskPriorityInherit>
 8008a46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008a48:	f002 f8ce 	bl	800abe8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	3324      	adds	r3, #36	@ 0x24
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 f805 	bl	8009a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a5c:	f000 fabc 	bl	8008fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a60:	f000 fe22 	bl	80096a8 <xTaskResumeAll>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f47f af65 	bne.w	8008936 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008a6c:	4b18      	ldr	r3, [pc, #96]	@ (8008ad0 <xQueueSemaphoreTake+0x22c>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	e75b      	b.n	8008936 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a80:	f000 faaa 	bl	8008fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a84:	f000 fe10 	bl	80096a8 <xTaskResumeAll>
 8008a88:	e755      	b.n	8008936 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008a8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a8c:	f000 faa4 	bl	8008fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a90:	f000 fe0a 	bl	80096a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a96:	f000 faf1 	bl	800907c <prvIsQueueEmpty>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f43f af4a 	beq.w	8008936 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008aa8:	f002 f868 	bl	800ab7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008aac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008aae:	f000 f9eb 	bl	8008e88 <prvGetDisinheritPriorityAfterTimeout>
 8008ab2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fafa 	bl	800a0b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ac0:	f002 f892 	bl	800abe8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3738      	adds	r7, #56	@ 0x38
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	e000ed04 	.word	0xe000ed04

08008ad4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	@ 0x38
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <xQueuePeek+0x36>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	b672      	cpsid	i
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	b662      	cpsie	i
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <xQueuePeek+0x44>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <xQueuePeek+0x48>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <xQueuePeek+0x4a>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <xQueuePeek+0x6a>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b26:	b672      	cpsid	i
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	b662      	cpsie	i
 8008b36:	623b      	str	r3, [r7, #32]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 f9bf 	bl	8009ec0 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueuePeek+0x7a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueuePeek+0x7e>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueuePeek+0x80>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10d      	bne.n	8008b74 <xQueuePeek+0xa0>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	b672      	cpsid	i
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	b662      	cpsie	i
 8008b6c:	61fb      	str	r3, [r7, #28]
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b74:	f002 f802 	bl	800ab7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d021      	beq.n	8008bc8 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b8e:	f000 f9fd 	bl	8008f8c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b96:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00f      	beq.n	8008bc0 <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	3324      	adds	r3, #36	@ 0x24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ffb3 	bl	8009b10 <xTaskRemoveFromEventList>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ca4 <xQueuePeek+0x1d0>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bc0:	f002 f812 	bl	800abe8 <vPortExitCritical>
				return pdPASS;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e069      	b.n	8008c9c <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bce:	f002 f80b 	bl	800abe8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e062      	b.n	8008c9c <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d106      	bne.n	8008bea <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fffb 	bl	8009bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bea:	f001 fffd 	bl	800abe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bee:	f000 fd4d 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bf2:	f001 ffc3 	bl	800ab7c <vPortEnterCritical>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d103      	bne.n	8008c0c <xQueuePeek+0x138>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d103      	bne.n	8008c22 <xQueuePeek+0x14e>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c22:	f001 ffe1 	bl	800abe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c26:	1d3a      	adds	r2, r7, #4
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 ffea 	bl	8009c08 <xTaskCheckForTimeOut>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d123      	bne.n	8008c82 <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c3c:	f000 fa1e 	bl	800907c <prvIsQueueEmpty>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d017      	beq.n	8008c76 <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	3324      	adds	r3, #36	@ 0x24
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 ff08 	bl	8009a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c56:	f000 f9bf 	bl	8008fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c5a:	f000 fd25 	bl	80096a8 <xTaskResumeAll>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d187      	bne.n	8008b74 <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <xQueuePeek+0x1d0>)
 8008c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	e77e      	b.n	8008b74 <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8008c76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c78:	f000 f9ae 	bl	8008fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c7c:	f000 fd14 	bl	80096a8 <xTaskResumeAll>
 8008c80:	e778      	b.n	8008b74 <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8008c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c84:	f000 f9a8 	bl	8008fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c88:	f000 fd0e 	bl	80096a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c8e:	f000 f9f5 	bl	800907c <prvIsQueueEmpty>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f43f af6d 	beq.w	8008b74 <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3738      	adds	r7, #56	@ 0x38
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08e      	sub	sp, #56	@ 0x38
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	b672      	cpsid	i
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	b662      	cpsie	i
 8008cd2:	623b      	str	r3, [r7, #32]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <xQueueReceiveFromISR+0x40>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <xQueueReceiveFromISR+0x44>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <xQueueReceiveFromISR+0x46>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10d      	bne.n	8008d0e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	b672      	cpsid	i
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	b662      	cpsie	i
 8008d06:	61fb      	str	r3, [r7, #28]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d0e:	f002 f81d 	bl	800ad4c <vPortValidateInterruptPriority>
	__asm volatile
 8008d12:	f3ef 8211 	mrs	r2, BASEPRI
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	61ba      	str	r2, [r7, #24]
 8008d2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d02f      	beq.n	8008d9e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d4c:	f000 f91e 	bl	8008f8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	1e5a      	subs	r2, r3, #1
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d112      	bne.n	8008d88 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	3310      	adds	r3, #16
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fece 	bl	8009b10 <xTaskRemoveFromEventList>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	e007      	b.n	8008d98 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	b25a      	sxtb	r2, r3
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d9c:	e001      	b.n	8008da2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f383 8811 	msr	BASEPRI, r3
}
 8008dac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3738      	adds	r7, #56	@ 0x38
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	60bb      	str	r3, [r7, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8008de2:	f001 fecb 	bl	800ab7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008dec:	f001 fefc 	bl	800abe8 <vPortExitCritical>

	return uxReturn;
 8008df0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	b672      	cpsid	i
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	b662      	cpsie	i
 8008e20:	60fb      	str	r3, [r7, #12]
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	e7fd      	b.n	8008e24 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008e2e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008e30:	4618      	mov	r0, r3
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10d      	bne.n	8008e6a <vQueueDelete+0x2e>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	b672      	cpsid	i
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	b662      	cpsie	i
 8008e62:	60bb      	str	r3, [r7, #8]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f95e 	bl	800912c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f002 f87a 	bl	800af74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d006      	beq.n	8008ea6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e001      	b.n	8008eaa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
	}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d14d      	bne.n	8008f7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f872 	bl	8009fcc <xTaskPriorityDisinherit>
 8008ee8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	e043      	b.n	8008f7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d119      	bne.n	8008f2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6858      	ldr	r0, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	461a      	mov	r2, r3
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	f010 fb5d 	bl	80195c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d32b      	bcc.n	8008f7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e026      	b.n	8008f7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68d8      	ldr	r0, [r3, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	461a      	mov	r2, r3
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	f010 fb43 	bl	80195c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f44:	425b      	negs	r3, r3
 8008f46:	441a      	add	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d207      	bcs.n	8008f68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	425b      	negs	r3, r3
 8008f62:	441a      	add	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d105      	bne.n	8008f7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f82:	697b      	ldr	r3, [r7, #20]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d018      	beq.n	8008fd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	441a      	add	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d303      	bcc.n	8008fc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68d9      	ldr	r1, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6838      	ldr	r0, [r7, #0]
 8008fcc:	f010 faf9 	bl	80195c2 <memcpy>
	}
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fe0:	f001 fdcc 	bl	800ab7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fec:	e011      	b.n	8009012 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d012      	beq.n	800901c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3324      	adds	r3, #36	@ 0x24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fd88 	bl	8009b10 <xTaskRemoveFromEventList>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009006:	f000 fe67 	bl	8009cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	3b01      	subs	r3, #1
 800900e:	b2db      	uxtb	r3, r3
 8009010:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dce9      	bgt.n	8008fee <prvUnlockQueue+0x16>
 800901a:	e000      	b.n	800901e <prvUnlockQueue+0x46>
					break;
 800901c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	22ff      	movs	r2, #255	@ 0xff
 8009022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009026:	f001 fddf 	bl	800abe8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800902a:	f001 fda7 	bl	800ab7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009034:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009036:	e011      	b.n	800905c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d012      	beq.n	8009066 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3310      	adds	r3, #16
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fd63 	bl	8009b10 <xTaskRemoveFromEventList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009050:	f000 fe42 	bl	8009cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	3b01      	subs	r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800905c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	dce9      	bgt.n	8009038 <prvUnlockQueue+0x60>
 8009064:	e000      	b.n	8009068 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009066:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	22ff      	movs	r2, #255	@ 0xff
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009070:	f001 fdba 	bl	800abe8 <vPortExitCritical>
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009084:	f001 fd7a 	bl	800ab7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e001      	b.n	800909a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800909a:	f001 fda5 	bl	800abe8 <vPortExitCritical>

	return xReturn;
 800909e:	68fb      	ldr	r3, [r7, #12]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090b0:	f001 fd64 	bl	800ab7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d102      	bne.n	80090c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e001      	b.n	80090ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ca:	f001 fd8d 	bl	800abe8 <vPortExitCritical>

	return xReturn;
 80090ce:	68fb      	ldr	r3, [r7, #12]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e014      	b.n	8009112 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009128 <vQueueAddToRegistry+0x50>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090f4:	490c      	ldr	r1, [pc, #48]	@ (8009128 <vQueueAddToRegistry+0x50>)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009128 <vQueueAddToRegistry+0x50>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800910a:	e006      	b.n	800911a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b07      	cmp	r3, #7
 8009116:	d9e7      	bls.n	80090e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20004568 	.word	0x20004568

0800912c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	e016      	b.n	8009168 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800913a:	4a10      	ldr	r2, [pc, #64]	@ (800917c <vQueueUnregisterQueue+0x50>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	429a      	cmp	r2, r3
 8009148:	d10b      	bne.n	8009162 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800914a:	4a0c      	ldr	r2, [pc, #48]	@ (800917c <vQueueUnregisterQueue+0x50>)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2100      	movs	r1, #0
 8009150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009154:	4a09      	ldr	r2, [pc, #36]	@ (800917c <vQueueUnregisterQueue+0x50>)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	4413      	add	r3, r2
 800915c:	2200      	movs	r2, #0
 800915e:	605a      	str	r2, [r3, #4]
				break;
 8009160:	e006      	b.n	8009170 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b07      	cmp	r3, #7
 800916c:	d9e5      	bls.n	800913a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20004568 	.word	0x20004568

08009180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009190:	f001 fcf4 	bl	800ab7c <vPortEnterCritical>
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800919a:	b25b      	sxtb	r3, r3
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d103      	bne.n	80091aa <vQueueWaitForMessageRestricted+0x2a>
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d103      	bne.n	80091c0 <vQueueWaitForMessageRestricted+0x40>
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091c0:	f001 fd12 	bl	800abe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	3324      	adds	r3, #36	@ 0x24
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fc6d 	bl	8009ab4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091da:	6978      	ldr	r0, [r7, #20]
 80091dc:	f7ff fefc 	bl	8008fd8 <prvUnlockQueue>
	}
 80091e0:	bf00      	nop
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	@ 0x38
 80091ec:	af04      	add	r7, sp, #16
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10d      	bne.n	8009218 <xTaskCreateStatic+0x30>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	623b      	str	r3, [r7, #32]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10d      	bne.n	800923a <xTaskCreateStatic+0x52>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	b672      	cpsid	i
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	b662      	cpsie	i
 8009232:	61fb      	str	r3, [r7, #28]
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800923a:	235c      	movs	r3, #92	@ 0x5c
 800923c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b5c      	cmp	r3, #92	@ 0x5c
 8009242:	d00d      	beq.n	8009260 <xTaskCreateStatic+0x78>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009248:	b672      	cpsid	i
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	b662      	cpsie	i
 8009258:	61bb      	str	r3, [r7, #24]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009260:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01e      	beq.n	80092a6 <xTaskCreateStatic+0xbe>
 8009268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01b      	beq.n	80092a6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009276:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	2202      	movs	r2, #2
 800927c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009280:	2300      	movs	r3, #0
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f850 	bl	800933e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800929e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092a0:	f000 f8e0 	bl	8009464 <prvAddNewTaskToReadyList>
 80092a4:	e001      	b.n	80092aa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092aa:	697b      	ldr	r3, [r7, #20]
	}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3728      	adds	r7, #40	@ 0x28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08c      	sub	sp, #48	@ 0x30
 80092b8:	af04      	add	r7, sp, #16
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fd85 	bl	800add8 <pvPortMalloc>
 80092ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00e      	beq.n	80092f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092d6:	205c      	movs	r0, #92	@ 0x5c
 80092d8:	f001 fd7e 	bl	800add8 <pvPortMalloc>
 80092dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80092ea:	e005      	b.n	80092f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092ec:	6978      	ldr	r0, [r7, #20]
 80092ee:	f001 fe41 	bl	800af74 <vPortFree>
 80092f2:	e001      	b.n	80092f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d017      	beq.n	800932e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	2300      	movs	r3, #0
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f80e 	bl	800933e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009322:	69f8      	ldr	r0, [r7, #28]
 8009324:	f000 f89e 	bl	8009464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009328:	2301      	movs	r3, #1
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e002      	b.n	8009334 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800932e:	f04f 33ff 	mov.w	r3, #4294967295
 8009332:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009334:	69bb      	ldr	r3, [r7, #24]
	}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b088      	sub	sp, #32
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	461a      	mov	r2, r3
 8009356:	21a5      	movs	r1, #165	@ 0xa5
 8009358:	f010 f87a 	bl	8019450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009366:	440b      	add	r3, r1
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f023 0307 	bic.w	r3, r3, #7
 8009374:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00d      	beq.n	800939c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	617b      	str	r3, [r7, #20]
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	e7fd      	b.n	8009398 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01f      	beq.n	80093e2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e012      	b.n	80093ce <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	4413      	add	r3, r2
 80093ae:	7819      	ldrb	r1, [r3, #0]
 80093b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	3334      	adds	r3, #52	@ 0x34
 80093b8:	460a      	mov	r2, r1
 80093ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	4413      	add	r3, r2
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d006      	beq.n	80093d6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	3301      	adds	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d9e9      	bls.n	80093a8 <prvInitialiseNewTask+0x6a>
 80093d4:	e000      	b.n	80093d8 <prvInitialiseNewTask+0x9a>
			{
				break;
 80093d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80093e0:	e003      	b.n	80093ea <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	2b37      	cmp	r3, #55	@ 0x37
 80093ee:	d901      	bls.n	80093f4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093f0:	2337      	movs	r3, #55	@ 0x37
 80093f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	2200      	movs	r2, #0
 8009404:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	3304      	adds	r3, #4
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fbfc 	bl	8007c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	3318      	adds	r3, #24
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fbf7 	bl	8007c08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	2200      	movs	r2, #0
 8009434:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	68f9      	ldr	r1, [r7, #12]
 8009442:	69b8      	ldr	r0, [r7, #24]
 8009444:	f001 fa8e 	bl	800a964 <pxPortInitialiseStack>
 8009448:	4602      	mov	r2, r0
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800944e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800945a:	bf00      	nop
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800946c:	f001 fb86 	bl	800ab7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009470:	4b2d      	ldr	r3, [pc, #180]	@ (8009528 <prvAddNewTaskToReadyList+0xc4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	4a2c      	ldr	r2, [pc, #176]	@ (8009528 <prvAddNewTaskToReadyList+0xc4>)
 8009478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800947a:	4b2c      	ldr	r3, [pc, #176]	@ (800952c <prvAddNewTaskToReadyList+0xc8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d109      	bne.n	8009496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009482:	4a2a      	ldr	r2, [pc, #168]	@ (800952c <prvAddNewTaskToReadyList+0xc8>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009488:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <prvAddNewTaskToReadyList+0xc4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d110      	bne.n	80094b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009490:	f000 fc46 	bl	8009d20 <prvInitialiseTaskLists>
 8009494:	e00d      	b.n	80094b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009496:	4b26      	ldr	r3, [pc, #152]	@ (8009530 <prvAddNewTaskToReadyList+0xcc>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800949e:	4b23      	ldr	r3, [pc, #140]	@ (800952c <prvAddNewTaskToReadyList+0xc8>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d802      	bhi.n	80094b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094ac:	4a1f      	ldr	r2, [pc, #124]	@ (800952c <prvAddNewTaskToReadyList+0xc8>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094b2:	4b20      	ldr	r3, [pc, #128]	@ (8009534 <prvAddNewTaskToReadyList+0xd0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009534 <prvAddNewTaskToReadyList+0xd0>)
 80094ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <prvAddNewTaskToReadyList+0xd0>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009538 <prvAddNewTaskToReadyList+0xd4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <prvAddNewTaskToReadyList+0x74>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d4:	4a18      	ldr	r2, [pc, #96]	@ (8009538 <prvAddNewTaskToReadyList+0xd4>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4a15      	ldr	r2, [pc, #84]	@ (800953c <prvAddNewTaskToReadyList+0xd8>)
 80094e6:	441a      	add	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fb97 	bl	8007c22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094f4:	f001 fb78 	bl	800abe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <prvAddNewTaskToReadyList+0xcc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00e      	beq.n	800951e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009500:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <prvAddNewTaskToReadyList+0xc8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	429a      	cmp	r2, r3
 800950c:	d207      	bcs.n	800951e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800950e:	4b0c      	ldr	r3, [pc, #48]	@ (8009540 <prvAddNewTaskToReadyList+0xdc>)
 8009510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20004a7c 	.word	0x20004a7c
 800952c:	200045a8 	.word	0x200045a8
 8009530:	20004a88 	.word	0x20004a88
 8009534:	20004a98 	.word	0x20004a98
 8009538:	20004a84 	.word	0x20004a84
 800953c:	200045ac 	.word	0x200045ac
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009556:	4b15      	ldr	r3, [pc, #84]	@ (80095ac <vTaskDelay+0x68>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00d      	beq.n	800957a <vTaskDelay+0x36>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800957a:	f000 f887 	bl	800968c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fe33 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009586:	f000 f88f 	bl	80096a8 <xTaskResumeAll>
 800958a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009592:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <vTaskDelay+0x6c>)
 8009594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20004aa4 	.word	0x20004aa4
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	@ 0x28
 80095b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095c2:	463a      	mov	r2, r7
 80095c4:	1d39      	adds	r1, r7, #4
 80095c6:	f107 0308 	add.w	r3, r7, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fac8 	bl	8007b60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	9202      	str	r2, [sp, #8]
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	2300      	movs	r3, #0
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	460a      	mov	r2, r1
 80095e2:	4924      	ldr	r1, [pc, #144]	@ (8009674 <vTaskStartScheduler+0xc0>)
 80095e4:	4824      	ldr	r0, [pc, #144]	@ (8009678 <vTaskStartScheduler+0xc4>)
 80095e6:	f7ff fdff 	bl	80091e8 <xTaskCreateStatic>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4a23      	ldr	r2, [pc, #140]	@ (800967c <vTaskStartScheduler+0xc8>)
 80095ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f0:	4b22      	ldr	r3, [pc, #136]	@ (800967c <vTaskStartScheduler+0xc8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e001      	b.n	8009602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d102      	bne.n	800960e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009608:	f000 fe44 	bl	800a294 <xTimerCreateTimerTask>
 800960c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d118      	bne.n	8009646 <vTaskStartScheduler+0x92>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	b672      	cpsid	i
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	b662      	cpsie	i
 8009628:	613b      	str	r3, [r7, #16]
}
 800962a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800962c:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <vTaskStartScheduler+0xcc>)
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009634:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <vTaskStartScheduler+0xd0>)
 8009636:	2201      	movs	r2, #1
 8009638:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800963a:	4b13      	ldr	r3, [pc, #76]	@ (8009688 <vTaskStartScheduler+0xd4>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009640:	f001 fa1e 	bl	800aa80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009644:	e011      	b.n	800966a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d10d      	bne.n	800966a <vTaskStartScheduler+0xb6>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	b672      	cpsid	i
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	b662      	cpsie	i
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <vTaskStartScheduler+0xb2>
}
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	0801b7a8 	.word	0x0801b7a8
 8009678:	08009cf1 	.word	0x08009cf1
 800967c:	20004aa0 	.word	0x20004aa0
 8009680:	20004a9c 	.word	0x20004a9c
 8009684:	20004a88 	.word	0x20004a88
 8009688:	20004a80 	.word	0x20004a80

0800968c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009690:	4b04      	ldr	r3, [pc, #16]	@ (80096a4 <vTaskSuspendAll+0x18>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a03      	ldr	r2, [pc, #12]	@ (80096a4 <vTaskSuspendAll+0x18>)
 8009698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800969a:	bf00      	nop
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20004aa4 	.word	0x20004aa4

080096a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096b6:	4b43      	ldr	r3, [pc, #268]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10d      	bne.n	80096da <xTaskResumeAll+0x32>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	b672      	cpsid	i
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	b662      	cpsie	i
 80096d2:	603b      	str	r3, [r7, #0]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096da:	f001 fa4f 	bl	800ab7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096de:	4b39      	ldr	r3, [pc, #228]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	4a37      	ldr	r2, [pc, #220]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e8:	4b36      	ldr	r3, [pc, #216]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d162      	bne.n	80097b6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096f0:	4b35      	ldr	r3, [pc, #212]	@ (80097c8 <xTaskResumeAll+0x120>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d05e      	beq.n	80097b6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f8:	e02f      	b.n	800975a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fa:	4b34      	ldr	r3, [pc, #208]	@ (80097cc <xTaskResumeAll+0x124>)
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3318      	adds	r3, #24
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fae8 	bl	8007cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3304      	adds	r3, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fae3 	bl	8007cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971a:	4b2d      	ldr	r3, [pc, #180]	@ (80097d0 <xTaskResumeAll+0x128>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d903      	bls.n	800972a <xTaskResumeAll+0x82>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	4a2a      	ldr	r2, [pc, #168]	@ (80097d0 <xTaskResumeAll+0x128>)
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4a27      	ldr	r2, [pc, #156]	@ (80097d4 <xTaskResumeAll+0x12c>)
 8009738:	441a      	add	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3304      	adds	r3, #4
 800973e:	4619      	mov	r1, r3
 8009740:	4610      	mov	r0, r2
 8009742:	f7fe fa6e 	bl	8007c22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	4b23      	ldr	r3, [pc, #140]	@ (80097d8 <xTaskResumeAll+0x130>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009754:	4b21      	ldr	r3, [pc, #132]	@ (80097dc <xTaskResumeAll+0x134>)
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800975a:	4b1c      	ldr	r3, [pc, #112]	@ (80097cc <xTaskResumeAll+0x124>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1cb      	bne.n	80096fa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009768:	f000 fb7a 	bl	8009e60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800976c:	4b1c      	ldr	r3, [pc, #112]	@ (80097e0 <xTaskResumeAll+0x138>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009778:	f000 f858 	bl	800982c <xTaskIncrementTick>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009782:	4b16      	ldr	r3, [pc, #88]	@ (80097dc <xTaskResumeAll+0x134>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3b01      	subs	r3, #1
 800978c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f1      	bne.n	8009778 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009794:	4b12      	ldr	r3, [pc, #72]	@ (80097e0 <xTaskResumeAll+0x138>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800979a:	4b10      	ldr	r3, [pc, #64]	@ (80097dc <xTaskResumeAll+0x134>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097a2:	2301      	movs	r3, #1
 80097a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <xTaskResumeAll+0x13c>)
 80097a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097b6:	f001 fa17 	bl	800abe8 <vPortExitCritical>

	return xAlreadyYielded;
 80097ba:	68bb      	ldr	r3, [r7, #8]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20004aa4 	.word	0x20004aa4
 80097c8:	20004a7c 	.word	0x20004a7c
 80097cc:	20004a3c 	.word	0x20004a3c
 80097d0:	20004a84 	.word	0x20004a84
 80097d4:	200045ac 	.word	0x200045ac
 80097d8:	200045a8 	.word	0x200045a8
 80097dc:	20004a90 	.word	0x20004a90
 80097e0:	20004a8c 	.word	0x20004a8c
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097ee:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <xTaskGetTickCount+0x1c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097f4:	687b      	ldr	r3, [r7, #4]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20004a80 	.word	0x20004a80

08009808 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800980e:	f001 fa9d 	bl	800ad4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009812:	2300      	movs	r3, #0
 8009814:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009816:	4b04      	ldr	r3, [pc, #16]	@ (8009828 <xTaskGetTickCountFromISR+0x20>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800981c:	683b      	ldr	r3, [r7, #0]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20004a80 	.word	0x20004a80

0800982c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009836:	4b50      	ldr	r3, [pc, #320]	@ (8009978 <xTaskIncrementTick+0x14c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f040 808c 	bne.w	8009958 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009840:	4b4e      	ldr	r3, [pc, #312]	@ (800997c <xTaskIncrementTick+0x150>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009848:	4a4c      	ldr	r2, [pc, #304]	@ (800997c <xTaskIncrementTick+0x150>)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d123      	bne.n	800989c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009854:	4b4a      	ldr	r3, [pc, #296]	@ (8009980 <xTaskIncrementTick+0x154>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00d      	beq.n	800987a <xTaskIncrementTick+0x4e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	b672      	cpsid	i
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	b662      	cpsie	i
 8009872:	603b      	str	r3, [r7, #0]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xTaskIncrementTick+0x4a>
 800987a:	4b41      	ldr	r3, [pc, #260]	@ (8009980 <xTaskIncrementTick+0x154>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	4b40      	ldr	r3, [pc, #256]	@ (8009984 <xTaskIncrementTick+0x158>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a3e      	ldr	r2, [pc, #248]	@ (8009980 <xTaskIncrementTick+0x154>)
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	4a3e      	ldr	r2, [pc, #248]	@ (8009984 <xTaskIncrementTick+0x158>)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b3e      	ldr	r3, [pc, #248]	@ (8009988 <xTaskIncrementTick+0x15c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	4a3c      	ldr	r2, [pc, #240]	@ (8009988 <xTaskIncrementTick+0x15c>)
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f000 fae2 	bl	8009e60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800989c:	4b3b      	ldr	r3, [pc, #236]	@ (800998c <xTaskIncrementTick+0x160>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d349      	bcc.n	800993a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a6:	4b36      	ldr	r3, [pc, #216]	@ (8009980 <xTaskIncrementTick+0x154>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <xTaskIncrementTick+0x160>)
 80098b2:	f04f 32ff 	mov.w	r2, #4294967295
 80098b6:	601a      	str	r2, [r3, #0]
					break;
 80098b8:	e03f      	b.n	800993a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ba:	4b31      	ldr	r3, [pc, #196]	@ (8009980 <xTaskIncrementTick+0x154>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d203      	bcs.n	80098da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098d2:	4a2e      	ldr	r2, [pc, #184]	@ (800998c <xTaskIncrementTick+0x160>)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098d8:	e02f      	b.n	800993a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f9fc 	bl	8007cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	3318      	adds	r3, #24
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe f9f3 	bl	8007cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098fa:	4b25      	ldr	r3, [pc, #148]	@ (8009990 <xTaskIncrementTick+0x164>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d903      	bls.n	800990a <xTaskIncrementTick+0xde>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	4a22      	ldr	r2, [pc, #136]	@ (8009990 <xTaskIncrementTick+0x164>)
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4a1f      	ldr	r2, [pc, #124]	@ (8009994 <xTaskIncrementTick+0x168>)
 8009918:	441a      	add	r2, r3
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	3304      	adds	r3, #4
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f7fe f97e 	bl	8007c22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992a:	4b1b      	ldr	r3, [pc, #108]	@ (8009998 <xTaskIncrementTick+0x16c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009930:	429a      	cmp	r2, r3
 8009932:	d3b8      	bcc.n	80098a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009938:	e7b5      	b.n	80098a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800993a:	4b17      	ldr	r3, [pc, #92]	@ (8009998 <xTaskIncrementTick+0x16c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009940:	4914      	ldr	r1, [pc, #80]	@ (8009994 <xTaskIncrementTick+0x168>)
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d907      	bls.n	8009962 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009952:	2301      	movs	r3, #1
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	e004      	b.n	8009962 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009958:	4b10      	ldr	r3, [pc, #64]	@ (800999c <xTaskIncrementTick+0x170>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3301      	adds	r3, #1
 800995e:	4a0f      	ldr	r2, [pc, #60]	@ (800999c <xTaskIncrementTick+0x170>)
 8009960:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009962:	4b0f      	ldr	r3, [pc, #60]	@ (80099a0 <xTaskIncrementTick+0x174>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800996a:	2301      	movs	r3, #1
 800996c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800996e:	697b      	ldr	r3, [r7, #20]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20004aa4 	.word	0x20004aa4
 800997c:	20004a80 	.word	0x20004a80
 8009980:	20004a34 	.word	0x20004a34
 8009984:	20004a38 	.word	0x20004a38
 8009988:	20004a94 	.word	0x20004a94
 800998c:	20004a9c 	.word	0x20004a9c
 8009990:	20004a84 	.word	0x20004a84
 8009994:	200045ac 	.word	0x200045ac
 8009998:	200045a8 	.word	0x200045a8
 800999c:	20004a8c 	.word	0x20004a8c
 80099a0:	20004a90 	.word	0x20004a90

080099a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099aa:	4b29      	ldr	r3, [pc, #164]	@ (8009a50 <vTaskSwitchContext+0xac>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099b2:	4b28      	ldr	r3, [pc, #160]	@ (8009a54 <vTaskSwitchContext+0xb0>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099b8:	e044      	b.n	8009a44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80099ba:	4b26      	ldr	r3, [pc, #152]	@ (8009a54 <vTaskSwitchContext+0xb0>)
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c0:	4b25      	ldr	r3, [pc, #148]	@ (8009a58 <vTaskSwitchContext+0xb4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	e013      	b.n	80099f0 <vTaskSwitchContext+0x4c>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <vTaskSwitchContext+0x46>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	b672      	cpsid	i
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	b662      	cpsie	i
 80099e2:	607b      	str	r3, [r7, #4]
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
 80099e8:	e7fd      	b.n	80099e6 <vTaskSwitchContext+0x42>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	491a      	ldr	r1, [pc, #104]	@ (8009a5c <vTaskSwitchContext+0xb8>)
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0e1      	beq.n	80099c8 <vTaskSwitchContext+0x24>
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4a13      	ldr	r2, [pc, #76]	@ (8009a5c <vTaskSwitchContext+0xb8>)
 8009a10:	4413      	add	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	3308      	adds	r3, #8
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d104      	bne.n	8009a34 <vTaskSwitchContext+0x90>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	605a      	str	r2, [r3, #4]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	4a09      	ldr	r2, [pc, #36]	@ (8009a60 <vTaskSwitchContext+0xbc>)
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	4a06      	ldr	r2, [pc, #24]	@ (8009a58 <vTaskSwitchContext+0xb4>)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6013      	str	r3, [r2, #0]
}
 8009a44:	bf00      	nop
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20004aa4 	.word	0x20004aa4
 8009a54:	20004a90 	.word	0x20004a90
 8009a58:	20004a84 	.word	0x20004a84
 8009a5c:	200045ac 	.word	0x200045ac
 8009a60:	200045a8 	.word	0x200045a8

08009a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10d      	bne.n	8009a90 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	b672      	cpsid	i
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	b662      	cpsie	i
 8009a88:	60fb      	str	r3, [r7, #12]
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a90:	4b07      	ldr	r3, [pc, #28]	@ (8009ab0 <vTaskPlaceOnEventList+0x4c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3318      	adds	r3, #24
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7fe f8e6 	bl	8007c6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	6838      	ldr	r0, [r7, #0]
 8009aa2:	f000 fba3 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	200045a8 	.word	0x200045a8

08009ab4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10d      	bne.n	8009ae2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	b672      	cpsid	i
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	b662      	cpsie	i
 8009ada:	617b      	str	r3, [r7, #20]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <vTaskPlaceOnEventListRestricted+0x58>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3318      	adds	r3, #24
 8009ae8:	4619      	mov	r1, r3
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7fe f899 	bl	8007c22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295
 8009afa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	68b8      	ldr	r0, [r7, #8]
 8009b00:	f000 fb74 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
	}
 8009b04:	bf00      	nop
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	200045a8 	.word	0x200045a8

08009b10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10d      	bne.n	8009b42 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	60fb      	str	r3, [r7, #12]
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	3318      	adds	r3, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe f8c8 	bl	8007cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bc4 <xTaskRemoveFromEventList+0xb4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11d      	bne.n	8009b90 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe f8bf 	bl	8007cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b62:	4b19      	ldr	r3, [pc, #100]	@ (8009bc8 <xTaskRemoveFromEventList+0xb8>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d903      	bls.n	8009b72 <xTaskRemoveFromEventList+0x62>
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6e:	4a16      	ldr	r2, [pc, #88]	@ (8009bc8 <xTaskRemoveFromEventList+0xb8>)
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b76:	4613      	mov	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4a13      	ldr	r2, [pc, #76]	@ (8009bcc <xTaskRemoveFromEventList+0xbc>)
 8009b80:	441a      	add	r2, r3
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f7fe f84a 	bl	8007c22 <vListInsertEnd>
 8009b8e:	e005      	b.n	8009b9c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	3318      	adds	r3, #24
 8009b94:	4619      	mov	r1, r3
 8009b96:	480e      	ldr	r0, [pc, #56]	@ (8009bd0 <xTaskRemoveFromEventList+0xc0>)
 8009b98:	f7fe f843 	bl	8007c22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <xTaskRemoveFromEventList+0xc4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d905      	bls.n	8009bb6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009baa:	2301      	movs	r3, #1
 8009bac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bae:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd8 <xTaskRemoveFromEventList+0xc8>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	e001      	b.n	8009bba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bba:	697b      	ldr	r3, [r7, #20]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20004aa4 	.word	0x20004aa4
 8009bc8:	20004a84 	.word	0x20004a84
 8009bcc:	200045ac 	.word	0x200045ac
 8009bd0:	20004a3c 	.word	0x20004a3c
 8009bd4:	200045a8 	.word	0x200045a8
 8009bd8:	20004a90 	.word	0x20004a90

08009bdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009be4:	4b06      	ldr	r3, [pc, #24]	@ (8009c00 <vTaskInternalSetTimeOutState+0x24>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <vTaskInternalSetTimeOutState+0x28>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20004a94 	.word	0x20004a94
 8009c04:	20004a80 	.word	0x20004a80

08009c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10d      	bne.n	8009c34 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	b672      	cpsid	i
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	b662      	cpsie	i
 8009c2c:	613b      	str	r3, [r7, #16]
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10d      	bne.n	8009c56 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	b672      	cpsid	i
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	b662      	cpsie	i
 8009c4e:	60fb      	str	r3, [r7, #12]
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	e7fd      	b.n	8009c52 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009c56:	f000 ff91 	bl	800ab7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd0 <xTaskCheckForTimeOut+0xc8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d102      	bne.n	8009c7a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	e023      	b.n	8009cc2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	4b15      	ldr	r3, [pc, #84]	@ (8009cd4 <xTaskCheckForTimeOut+0xcc>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d007      	beq.n	8009c96 <xTaskCheckForTimeOut+0x8e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d302      	bcc.n	8009c96 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	61fb      	str	r3, [r7, #28]
 8009c94:	e015      	b.n	8009cc2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d20b      	bcs.n	8009cb8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff ff95 	bl	8009bdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	e004      	b.n	8009cc2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cc2:	f000 ff91 	bl	800abe8 <vPortExitCritical>

	return xReturn;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3720      	adds	r7, #32
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20004a80 	.word	0x20004a80
 8009cd4:	20004a94 	.word	0x20004a94

08009cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <vTaskMissedYield+0x14>)
 8009cde:	2201      	movs	r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]
}
 8009ce2:	bf00      	nop
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20004a90 	.word	0x20004a90

08009cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cf8:	f000 f852 	bl	8009da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cfc:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <prvIdleTask+0x28>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d9f9      	bls.n	8009cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <prvIdleTask+0x2c>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d14:	e7f0      	b.n	8009cf8 <prvIdleTask+0x8>
 8009d16:	bf00      	nop
 8009d18:	200045ac 	.word	0x200045ac
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d26:	2300      	movs	r3, #0
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	e00c      	b.n	8009d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4a12      	ldr	r2, [pc, #72]	@ (8009d80 <prvInitialiseTaskLists+0x60>)
 8009d38:	4413      	add	r3, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fd ff44 	bl	8007bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3301      	adds	r3, #1
 8009d44:	607b      	str	r3, [r7, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b37      	cmp	r3, #55	@ 0x37
 8009d4a:	d9ef      	bls.n	8009d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d4c:	480d      	ldr	r0, [pc, #52]	@ (8009d84 <prvInitialiseTaskLists+0x64>)
 8009d4e:	f7fd ff3b 	bl	8007bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d52:	480d      	ldr	r0, [pc, #52]	@ (8009d88 <prvInitialiseTaskLists+0x68>)
 8009d54:	f7fd ff38 	bl	8007bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d58:	480c      	ldr	r0, [pc, #48]	@ (8009d8c <prvInitialiseTaskLists+0x6c>)
 8009d5a:	f7fd ff35 	bl	8007bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d5e:	480c      	ldr	r0, [pc, #48]	@ (8009d90 <prvInitialiseTaskLists+0x70>)
 8009d60:	f7fd ff32 	bl	8007bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d64:	480b      	ldr	r0, [pc, #44]	@ (8009d94 <prvInitialiseTaskLists+0x74>)
 8009d66:	f7fd ff2f 	bl	8007bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d98 <prvInitialiseTaskLists+0x78>)
 8009d6c:	4a05      	ldr	r2, [pc, #20]	@ (8009d84 <prvInitialiseTaskLists+0x64>)
 8009d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d70:	4b0a      	ldr	r3, [pc, #40]	@ (8009d9c <prvInitialiseTaskLists+0x7c>)
 8009d72:	4a05      	ldr	r2, [pc, #20]	@ (8009d88 <prvInitialiseTaskLists+0x68>)
 8009d74:	601a      	str	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	200045ac 	.word	0x200045ac
 8009d84:	20004a0c 	.word	0x20004a0c
 8009d88:	20004a20 	.word	0x20004a20
 8009d8c:	20004a3c 	.word	0x20004a3c
 8009d90:	20004a50 	.word	0x20004a50
 8009d94:	20004a68 	.word	0x20004a68
 8009d98:	20004a34 	.word	0x20004a34
 8009d9c:	20004a38 	.word	0x20004a38

08009da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009da6:	e019      	b.n	8009ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009da8:	f000 fee8 	bl	800ab7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dac:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <prvCheckTasksWaitingTermination+0x50>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ff8f 	bl	8007cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009df4 <prvCheckTasksWaitingTermination+0x54>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8009df4 <prvCheckTasksWaitingTermination+0x54>)
 8009dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009df8 <prvCheckTasksWaitingTermination+0x58>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	4a0a      	ldr	r2, [pc, #40]	@ (8009df8 <prvCheckTasksWaitingTermination+0x58>)
 8009dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dd2:	f000 ff09 	bl	800abe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f810 	bl	8009dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ddc:	4b06      	ldr	r3, [pc, #24]	@ (8009df8 <prvCheckTasksWaitingTermination+0x58>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e1      	bne.n	8009da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20004a50 	.word	0x20004a50
 8009df4:	20004a7c 	.word	0x20004a7c
 8009df8:	20004a64 	.word	0x20004a64

08009dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d108      	bne.n	8009e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 f8ae 	bl	800af74 <vPortFree>
				vPortFree( pxTCB );
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f8ab 	bl	800af74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e1e:	e01b      	b.n	8009e58 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d103      	bne.n	8009e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 f8a2 	bl	800af74 <vPortFree>
	}
 8009e30:	e012      	b.n	8009e58 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d00d      	beq.n	8009e58 <prvDeleteTCB+0x5c>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <prvDeleteTCB+0x58>
	}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e66:	4b0c      	ldr	r3, [pc, #48]	@ (8009e98 <prvResetNextTaskUnblockTime+0x38>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e70:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <prvResetNextTaskUnblockTime+0x3c>)
 8009e72:	f04f 32ff 	mov.w	r2, #4294967295
 8009e76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e78:	e008      	b.n	8009e8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e7a:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <prvResetNextTaskUnblockTime+0x38>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4a04      	ldr	r2, [pc, #16]	@ (8009e9c <prvResetNextTaskUnblockTime+0x3c>)
 8009e8a:	6013      	str	r3, [r2, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	20004a34 	.word	0x20004a34
 8009e9c:	20004a9c 	.word	0x20004a9c

08009ea0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009ea6:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <xTaskGetCurrentTaskHandle+0x1c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009eac:	687b      	ldr	r3, [r7, #4]
	}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	200045a8 	.word	0x200045a8

08009ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef4 <xTaskGetSchedulerState+0x34>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	e008      	b.n	8009ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ed4:	4b08      	ldr	r3, [pc, #32]	@ (8009ef8 <xTaskGetSchedulerState+0x38>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009edc:	2302      	movs	r3, #2
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	e001      	b.n	8009ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ee6:	687b      	ldr	r3, [r7, #4]
	}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	20004a88 	.word	0x20004a88
 8009ef8:	20004aa4 	.word	0x20004aa4

08009efc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d051      	beq.n	8009fb6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f16:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc0 <xTaskPriorityInherit+0xc4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d241      	bcs.n	8009fa4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	db06      	blt.n	8009f36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f28:	4b25      	ldr	r3, [pc, #148]	@ (8009fc0 <xTaskPriorityInherit+0xc4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6959      	ldr	r1, [r3, #20]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc4 <xTaskPriorityInherit+0xc8>)
 8009f48:	4413      	add	r3, r2
 8009f4a:	4299      	cmp	r1, r3
 8009f4c:	d122      	bne.n	8009f94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fec2 	bl	8007cdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f58:	4b19      	ldr	r3, [pc, #100]	@ (8009fc0 <xTaskPriorityInherit+0xc4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f66:	4b18      	ldr	r3, [pc, #96]	@ (8009fc8 <xTaskPriorityInherit+0xcc>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d903      	bls.n	8009f76 <xTaskPriorityInherit+0x7a>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f72:	4a15      	ldr	r2, [pc, #84]	@ (8009fc8 <xTaskPriorityInherit+0xcc>)
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a10      	ldr	r2, [pc, #64]	@ (8009fc4 <xTaskPriorityInherit+0xc8>)
 8009f84:	441a      	add	r2, r3
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fd fe48 	bl	8007c22 <vListInsertEnd>
 8009f92:	e004      	b.n	8009f9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f94:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <xTaskPriorityInherit+0xc4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	e008      	b.n	8009fb6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fa8:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <xTaskPriorityInherit+0xc4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d201      	bcs.n	8009fb6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200045a8 	.word	0x200045a8
 8009fc4:	200045ac 	.word	0x200045ac
 8009fc8:	20004a84 	.word	0x20004a84

08009fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d05c      	beq.n	800a09c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fe2:	4b31      	ldr	r3, [pc, #196]	@ (800a0a8 <xTaskPriorityDisinherit+0xdc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d00d      	beq.n	800a008 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	b672      	cpsid	i
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	b662      	cpsie	i
 800a000:	60fb      	str	r3, [r7, #12]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10d      	bne.n	800a02c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a014:	b672      	cpsid	i
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	b662      	cpsie	i
 800a024:	60bb      	str	r3, [r7, #8]
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	e7fd      	b.n	800a028 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a03e:	429a      	cmp	r2, r3
 800a040:	d02c      	beq.n	800a09c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a046:	2b00      	cmp	r3, #0
 800a048:	d128      	bne.n	800a09c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3304      	adds	r3, #4
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fd fe44 	bl	8007cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a060:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06c:	4b0f      	ldr	r3, [pc, #60]	@ (800a0ac <xTaskPriorityDisinherit+0xe0>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d903      	bls.n	800a07c <xTaskPriorityDisinherit+0xb0>
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	4a0c      	ldr	r2, [pc, #48]	@ (800a0ac <xTaskPriorityDisinherit+0xe0>)
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4a09      	ldr	r2, [pc, #36]	@ (800a0b0 <xTaskPriorityDisinherit+0xe4>)
 800a08a:	441a      	add	r2, r3
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fd fdc5 	bl	8007c22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a09c:	697b      	ldr	r3, [r7, #20]
	}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200045a8 	.word	0x200045a8
 800a0ac:	20004a84 	.word	0x20004a84
 800a0b0:	200045ac 	.word	0x200045ac

0800a0b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d070      	beq.n	800a1ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10d      	bne.n	800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d8:	b672      	cpsid	i
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	b662      	cpsie	i
 800a0e8:	60fb      	str	r3, [r7, #12]
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d902      	bls.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	e002      	b.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a104:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d04e      	beq.n	800a1ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	429a      	cmp	r2, r3
 800a118:	d149      	bne.n	800a1ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a11a:	4b27      	ldr	r3, [pc, #156]	@ (800a1b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	429a      	cmp	r2, r3
 800a122:	d10d      	bne.n	800a140 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	b672      	cpsid	i
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	b662      	cpsie	i
 800a138:	60bb      	str	r3, [r7, #8]
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a144:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	db04      	blt.n	800a15e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	6959      	ldr	r1, [r3, #20]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	4613      	mov	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4a13      	ldr	r2, [pc, #76]	@ (800a1bc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a16e:	4413      	add	r3, r2
 800a170:	4299      	cmp	r1, r3
 800a172:	d11c      	bne.n	800a1ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fd fdaf 	bl	8007cdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a182:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d903      	bls.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	4a0c      	ldr	r2, [pc, #48]	@ (800a1c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a07      	ldr	r2, [pc, #28]	@ (800a1bc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a1a0:	441a      	add	r2, r3
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7fd fd3a 	bl	8007c22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1ae:	bf00      	nop
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	200045a8 	.word	0x200045a8
 800a1bc:	200045ac 	.word	0x200045ac
 800a1c0:	20004a84 	.word	0x20004a84

0800a1c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1c8:	4b07      	ldr	r3, [pc, #28]	@ (800a1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1d0:	4b05      	ldr	r3, [pc, #20]	@ (800a1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a1da:	4b03      	ldr	r3, [pc, #12]	@ (800a1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
	}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	200045a8 	.word	0x200045a8

0800a1ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1f6:	4b21      	ldr	r3, [pc, #132]	@ (800a27c <prvAddCurrentTaskToDelayedList+0x90>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fc:	4b20      	ldr	r3, [pc, #128]	@ (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7fd fd6a 	bl	8007cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d10a      	bne.n	800a226 <prvAddCurrentTaskToDelayedList+0x3a>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a216:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4819      	ldr	r0, [pc, #100]	@ (800a284 <prvAddCurrentTaskToDelayedList+0x98>)
 800a220:	f7fd fcff 	bl	8007c22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a224:	e026      	b.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4413      	add	r3, r2
 800a22c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a22e:	4b14      	ldr	r3, [pc, #80]	@ (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d209      	bcs.n	800a252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23e:	4b12      	ldr	r3, [pc, #72]	@ (800a288 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b0f      	ldr	r3, [pc, #60]	@ (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f7fd fd0d 	bl	8007c6a <vListInsert>
}
 800a250:	e010      	b.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a252:	4b0e      	ldr	r3, [pc, #56]	@ (800a28c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fd fd03 	bl	8007c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a264:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d202      	bcs.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a26e:	4a08      	ldr	r2, [pc, #32]	@ (800a290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6013      	str	r3, [r2, #0]
}
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20004a80 	.word	0x20004a80
 800a280:	200045a8 	.word	0x200045a8
 800a284:	20004a68 	.word	0x20004a68
 800a288:	20004a38 	.word	0x20004a38
 800a28c:	20004a34 	.word	0x20004a34
 800a290:	20004a9c 	.word	0x20004a9c

0800a294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	@ 0x28
 800a298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a29e:	f000 fb21 	bl	800a8e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a31c <xTimerCreateTimerTask+0x88>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d021      	beq.n	800a2ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2b2:	1d3a      	adds	r2, r7, #4
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fd fc69 	bl	8007b94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	9202      	str	r2, [sp, #8]
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	4912      	ldr	r1, [pc, #72]	@ (800a320 <xTimerCreateTimerTask+0x8c>)
 800a2d6:	4813      	ldr	r0, [pc, #76]	@ (800a324 <xTimerCreateTimerTask+0x90>)
 800a2d8:	f7fe ff86 	bl	80091e8 <xTaskCreateStatic>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4a12      	ldr	r2, [pc, #72]	@ (800a328 <xTimerCreateTimerTask+0x94>)
 800a2e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2e2:	4b11      	ldr	r3, [pc, #68]	@ (800a328 <xTimerCreateTimerTask+0x94>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10d      	bne.n	800a310 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	613b      	str	r3, [r7, #16]
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	e7fd      	b.n	800a30c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a310:	697b      	ldr	r3, [r7, #20]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20004ad8 	.word	0x20004ad8
 800a320:	0801b7b0 	.word	0x0801b7b0
 800a324:	0800a46d 	.word	0x0800a46d
 800a328:	20004adc 	.word	0x20004adc

0800a32c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	@ 0x28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10d      	bne.n	800a360 <xTimerGenericCommand+0x34>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	b672      	cpsid	i
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	b662      	cpsie	i
 800a358:	623b      	str	r3, [r7, #32]
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	e7fd      	b.n	800a35c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a360:	4b19      	ldr	r3, [pc, #100]	@ (800a3c8 <xTimerGenericCommand+0x9c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d02a      	beq.n	800a3be <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b05      	cmp	r3, #5
 800a378:	dc18      	bgt.n	800a3ac <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a37a:	f7ff fda1 	bl	8009ec0 <xTaskGetSchedulerState>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b02      	cmp	r3, #2
 800a382:	d109      	bne.n	800a398 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a384:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <xTimerGenericCommand+0x9c>)
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	f107 0110 	add.w	r1, r7, #16
 800a38c:	2300      	movs	r3, #0
 800a38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a390:	f7fd ff5a 	bl	8008248 <xQueueGenericSend>
 800a394:	6278      	str	r0, [r7, #36]	@ 0x24
 800a396:	e012      	b.n	800a3be <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a398:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <xTimerGenericCommand+0x9c>)
 800a39a:	6818      	ldr	r0, [r3, #0]
 800a39c:	f107 0110 	add.w	r1, r7, #16
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f7fd ff50 	bl	8008248 <xQueueGenericSend>
 800a3a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a3aa:	e008      	b.n	800a3be <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3ac:	4b06      	ldr	r3, [pc, #24]	@ (800a3c8 <xTimerGenericCommand+0x9c>)
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	f107 0110 	add.w	r1, r7, #16
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	f7fe f850 	bl	800845c <xQueueGenericSendFromISR>
 800a3bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3728      	adds	r7, #40	@ 0x28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20004ad8 	.word	0x20004ad8

0800a3cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d6:	4b24      	ldr	r3, [pc, #144]	@ (800a468 <prvProcessExpiredTimer+0x9c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fd fc79 	bl	8007cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f0:	f003 0304 	and.w	r3, r3, #4
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d025      	beq.n	800a444 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	699a      	ldr	r2, [r3, #24]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	18d1      	adds	r1, r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	6978      	ldr	r0, [r7, #20]
 800a406:	f000 f8d7 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d022      	beq.n	800a456 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a410:	2300      	movs	r3, #0
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	2100      	movs	r1, #0
 800a41a:	6978      	ldr	r0, [r7, #20]
 800a41c:	f7ff ff86 	bl	800a32c <xTimerGenericCommand>
 800a420:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d116      	bne.n	800a456 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	b672      	cpsid	i
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	b662      	cpsie	i
 800a43c:	60fb      	str	r3, [r7, #12]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	4798      	blx	r3
}
 800a45e:	bf00      	nop
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20004ad0 	.word	0x20004ad0

0800a46c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a474:	f107 0308 	add.w	r3, r7, #8
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f859 	bl	800a530 <prvGetNextExpireTime>
 800a47e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4619      	mov	r1, r3
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f805 	bl	800a494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a48a:	f000 f8d7 	bl	800a63c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a48e:	bf00      	nop
 800a490:	e7f0      	b.n	800a474 <prvTimerTask+0x8>
	...

0800a494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a49e:	f7ff f8f5 	bl	800968c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f866 	bl	800a578 <prvSampleTimeNow>
 800a4ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d130      	bne.n	800a516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d806      	bhi.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4c2:	f7ff f8f1 	bl	80096a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff7f 	bl	800a3cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4ce:	e024      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4d6:	4b13      	ldr	r3, [pc, #76]	@ (800a524 <prvProcessTimerOrBlockTask+0x90>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <prvProcessTimerOrBlockTask+0x50>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <prvProcessTimerOrBlockTask+0x52>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a528 <prvProcessTimerOrBlockTask+0x94>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f7fe fe43 	bl	8009180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4fa:	f7ff f8d5 	bl	80096a8 <xTaskResumeAll>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a504:	4b09      	ldr	r3, [pc, #36]	@ (800a52c <prvProcessTimerOrBlockTask+0x98>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
}
 800a514:	e001      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a516:	f7ff f8c7 	bl	80096a8 <xTaskResumeAll>
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20004ad4 	.word	0x20004ad4
 800a528:	20004ad8 	.word	0x20004ad8
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a538:	4b0e      	ldr	r3, [pc, #56]	@ (800a574 <prvGetNextExpireTime+0x44>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <prvGetNextExpireTime+0x16>
 800a542:	2201      	movs	r2, #1
 800a544:	e000      	b.n	800a548 <prvGetNextExpireTime+0x18>
 800a546:	2200      	movs	r2, #0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a554:	4b07      	ldr	r3, [pc, #28]	@ (800a574 <prvGetNextExpireTime+0x44>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e001      	b.n	800a564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20004ad0 	.word	0x20004ad0

0800a578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a580:	f7ff f932 	bl	80097e8 <xTaskGetTickCount>
 800a584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a586:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b4 <prvSampleTimeNow+0x3c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d205      	bcs.n	800a59c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a590:	f000 f940 	bl	800a814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	e002      	b.n	800a5a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5a2:	4a04      	ldr	r2, [pc, #16]	@ (800a5b4 <prvSampleTimeNow+0x3c>)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20004ae0 	.word	0x20004ae0

0800a5b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d812      	bhi.n	800a604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	1ad2      	subs	r2, r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d302      	bcc.n	800a5f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e01b      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5f2:	4b10      	ldr	r3, [pc, #64]	@ (800a634 <prvInsertTimerInActiveList+0x7c>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f7fd fb34 	bl	8007c6a <vListInsert>
 800a602:	e012      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d206      	bcs.n	800a61a <prvInsertTimerInActiveList+0x62>
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d302      	bcc.n	800a61a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e007      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a61a:	4b07      	ldr	r3, [pc, #28]	@ (800a638 <prvInsertTimerInActiveList+0x80>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fd fb20 	bl	8007c6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20004ad4 	.word	0x20004ad4
 800a638:	20004ad0 	.word	0x20004ad0

0800a63c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	@ 0x38
 800a640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a642:	e0d4      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	da1b      	bge.n	800a682 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	3304      	adds	r3, #4
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10d      	bne.n	800a672 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	b672      	cpsid	i
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	b662      	cpsie	i
 800a66a:	61fb      	str	r3, [r7, #28]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a678:	6850      	ldr	r0, [r2, #4]
 800a67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a67c:	6892      	ldr	r2, [r2, #8]
 800a67e:	4611      	mov	r1, r2
 800a680:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f2c0 80b2 	blt.w	800a7ee <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	3304      	adds	r3, #4
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd fb1e 	bl	8007cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff ff68 	bl	800a578 <prvSampleTimeNow>
 800a6a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	f200 809b 	bhi.w	800a7e8 <prvProcessReceivedCommands+0x1ac>
 800a6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b8 <prvProcessReceivedCommands+0x7c>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e1 	.word	0x0800a6e1
 800a6c4:	0800a75b 	.word	0x0800a75b
 800a6c8:	0800a76f 	.word	0x0800a76f
 800a6cc:	0800a7bf 	.word	0x0800a7bf
 800a6d0:	0800a6e1 	.word	0x0800a6e1
 800a6d4:	0800a6e1 	.word	0x0800a6e1
 800a6d8:	0800a75b 	.word	0x0800a75b
 800a6dc:	0800a76f 	.word	0x0800a76f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	18d1      	adds	r1, r2, r3
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a700:	f7ff ff5a 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d070      	beq.n	800a7ec <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d065      	beq.n	800a7ec <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	441a      	add	r2, r3
 800a728:	2300      	movs	r3, #0
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	2300      	movs	r3, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a732:	f7ff fdfb 	bl	800a32c <xTimerGenericCommand>
 800a736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d156      	bne.n	800a7ec <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	b672      	cpsid	i
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	b662      	cpsie	i
 800a752:	61bb      	str	r3, [r7, #24]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a760:	f023 0301 	bic.w	r3, r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a76c:	e03f      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a774:	f043 0301 	orr.w	r3, r3, #1
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10d      	bne.n	800a7aa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	b672      	cpsid	i
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	b662      	cpsie	i
 800a7a2:	617b      	str	r3, [r7, #20]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	18d1      	adds	r1, r2, r3
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7b8:	f7ff fefe 	bl	800a5b8 <prvInsertTimerInActiveList>
					break;
 800a7bc:	e017      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a7cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7ce:	f000 fbd1 	bl	800af74 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7d2:	e00c      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7da:	f023 0301 	bic.w	r3, r3, #1
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a7e6:	e002      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a7e8:	bf00      	nop
 800a7ea:	e000      	b.n	800a7ee <prvProcessReceivedCommands+0x1b2>
					break;
 800a7ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7ee:	4b08      	ldr	r3, [pc, #32]	@ (800a810 <prvProcessReceivedCommands+0x1d4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	1d39      	adds	r1, r7, #4
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd ff6c 	bl	80086d4 <xQueueReceive>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f47f af20 	bne.w	800a644 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	3730      	adds	r7, #48	@ 0x30
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20004ad8 	.word	0x20004ad8

0800a814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a81a:	e04b      	b.n	800a8b4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a81c:	4b2f      	ldr	r3, [pc, #188]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a826:	4b2d      	ldr	r3, [pc, #180]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	3304      	adds	r3, #4
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd fa51 	bl	8007cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d031      	beq.n	800a8b4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4413      	add	r3, r2
 800a858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d90e      	bls.n	800a880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a86e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fd f9f6 	bl	8007c6a <vListInsert>
 800a87e:	e019      	b.n	800a8b4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a880:	2300      	movs	r3, #0
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	2300      	movs	r3, #0
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	2100      	movs	r1, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fd4e 	bl	800a32c <xTimerGenericCommand>
 800a890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10d      	bne.n	800a8b4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	b672      	cpsid	i
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	b662      	cpsie	i
 800a8ac:	603b      	str	r3, [r7, #0]
}
 800a8ae:	bf00      	nop
 800a8b0:	bf00      	nop
 800a8b2:	e7fd      	b.n	800a8b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8b4:	4b09      	ldr	r3, [pc, #36]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1ae      	bne.n	800a81c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8be:	4b07      	ldr	r3, [pc, #28]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8c4:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <prvSwitchTimerLists+0xcc>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a04      	ldr	r2, [pc, #16]	@ (800a8dc <prvSwitchTimerLists+0xc8>)
 800a8ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8cc:	4a04      	ldr	r2, [pc, #16]	@ (800a8e0 <prvSwitchTimerLists+0xcc>)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	6013      	str	r3, [r2, #0]
}
 800a8d2:	bf00      	nop
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20004ad0 	.word	0x20004ad0
 800a8e0:	20004ad4 	.word	0x20004ad4

0800a8e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8ea:	f000 f947 	bl	800ab7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8ee:	4b15      	ldr	r3, [pc, #84]	@ (800a944 <prvCheckForValidListAndQueue+0x60>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d120      	bne.n	800a938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8f6:	4814      	ldr	r0, [pc, #80]	@ (800a948 <prvCheckForValidListAndQueue+0x64>)
 800a8f8:	f7fd f966 	bl	8007bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8fc:	4813      	ldr	r0, [pc, #76]	@ (800a94c <prvCheckForValidListAndQueue+0x68>)
 800a8fe:	f7fd f963 	bl	8007bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a902:	4b13      	ldr	r3, [pc, #76]	@ (800a950 <prvCheckForValidListAndQueue+0x6c>)
 800a904:	4a10      	ldr	r2, [pc, #64]	@ (800a948 <prvCheckForValidListAndQueue+0x64>)
 800a906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a908:	4b12      	ldr	r3, [pc, #72]	@ (800a954 <prvCheckForValidListAndQueue+0x70>)
 800a90a:	4a10      	ldr	r2, [pc, #64]	@ (800a94c <prvCheckForValidListAndQueue+0x68>)
 800a90c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a90e:	2300      	movs	r3, #0
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	4b11      	ldr	r3, [pc, #68]	@ (800a958 <prvCheckForValidListAndQueue+0x74>)
 800a914:	4a11      	ldr	r2, [pc, #68]	@ (800a95c <prvCheckForValidListAndQueue+0x78>)
 800a916:	2110      	movs	r1, #16
 800a918:	200a      	movs	r0, #10
 800a91a:	f7fd fa75 	bl	8007e08 <xQueueGenericCreateStatic>
 800a91e:	4603      	mov	r3, r0
 800a920:	4a08      	ldr	r2, [pc, #32]	@ (800a944 <prvCheckForValidListAndQueue+0x60>)
 800a922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a924:	4b07      	ldr	r3, [pc, #28]	@ (800a944 <prvCheckForValidListAndQueue+0x60>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <prvCheckForValidListAndQueue+0x60>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	490b      	ldr	r1, [pc, #44]	@ (800a960 <prvCheckForValidListAndQueue+0x7c>)
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fbd0 	bl	80090d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a938:	f000 f956 	bl	800abe8 <vPortExitCritical>
}
 800a93c:	bf00      	nop
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20004ad8 	.word	0x20004ad8
 800a948:	20004aa8 	.word	0x20004aa8
 800a94c:	20004abc 	.word	0x20004abc
 800a950:	20004ad0 	.word	0x20004ad0
 800a954:	20004ad4 	.word	0x20004ad4
 800a958:	20004b84 	.word	0x20004b84
 800a95c:	20004ae4 	.word	0x20004ae4
 800a960:	0801b7b8 	.word	0x0801b7b8

0800a964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3b04      	subs	r3, #4
 800a974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a97c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3b04      	subs	r3, #4
 800a982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f023 0201 	bic.w	r2, r3, #1
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3b04      	subs	r3, #4
 800a992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a994:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c8 <pxPortInitialiseStack+0x64>)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3b14      	subs	r3, #20
 800a99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f06f 0202 	mvn.w	r2, #2
 800a9b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3b20      	subs	r3, #32
 800a9b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	0800a9cd 	.word	0x0800a9cd

0800a9cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9d6:	4b15      	ldr	r3, [pc, #84]	@ (800aa2c <prvTaskExitError+0x60>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d00d      	beq.n	800a9fc <prvTaskExitError+0x30>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	b672      	cpsid	i
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	b662      	cpsie	i
 800a9f4:	60fb      	str	r3, [r7, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <prvTaskExitError+0x2c>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa00:	b672      	cpsid	i
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	b662      	cpsie	i
 800aa10:	60bb      	str	r3, [r7, #8]
}
 800aa12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa14:	bf00      	nop
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0fc      	beq.n	800aa16 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	2000000c 	.word	0x2000000c

0800aa30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa30:	4b07      	ldr	r3, [pc, #28]	@ (800aa50 <pxCurrentTCBConst2>)
 800aa32:	6819      	ldr	r1, [r3, #0]
 800aa34:	6808      	ldr	r0, [r1, #0]
 800aa36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	f380 8809 	msr	PSP, r0
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8811 	msr	BASEPRI, r0
 800aa4a:	4770      	bx	lr
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst2>:
 800aa50:	200045a8 	.word	0x200045a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa58:	4808      	ldr	r0, [pc, #32]	@ (800aa7c <prvPortStartFirstTask+0x24>)
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	6800      	ldr	r0, [r0, #0]
 800aa5e:	f380 8808 	msr	MSP, r0
 800aa62:	f04f 0000 	mov.w	r0, #0
 800aa66:	f380 8814 	msr	CONTROL, r0
 800aa6a:	b662      	cpsie	i
 800aa6c:	b661      	cpsie	f
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	df00      	svc	0
 800aa78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa7a:	bf00      	nop
 800aa7c:	e000ed08 	.word	0xe000ed08

0800aa80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa86:	4b37      	ldr	r3, [pc, #220]	@ (800ab64 <xPortStartScheduler+0xe4>)
 800aa88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	22ff      	movs	r2, #255	@ 0xff
 800aa96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	@ (800ab68 <xPortStartScheduler+0xe8>)
 800aaac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaae:	4b2f      	ldr	r3, [pc, #188]	@ (800ab6c <xPortStartScheduler+0xec>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aab4:	e009      	b.n	800aaca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aab6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab6c <xPortStartScheduler+0xec>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	4a2b      	ldr	r2, [pc, #172]	@ (800ab6c <xPortStartScheduler+0xec>)
 800aabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaca:	78fb      	ldrb	r3, [r7, #3]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aad2:	2b80      	cmp	r3, #128	@ 0x80
 800aad4:	d0ef      	beq.n	800aab6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aad6:	4b25      	ldr	r3, [pc, #148]	@ (800ab6c <xPortStartScheduler+0xec>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f1c3 0307 	rsb	r3, r3, #7
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d00d      	beq.n	800aafe <xPortStartScheduler+0x7e>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae6:	b672      	cpsid	i
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	b662      	cpsie	i
 800aaf6:	60bb      	str	r3, [r7, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aafe:	4b1b      	ldr	r3, [pc, #108]	@ (800ab6c <xPortStartScheduler+0xec>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	021b      	lsls	r3, r3, #8
 800ab04:	4a19      	ldr	r2, [pc, #100]	@ (800ab6c <xPortStartScheduler+0xec>)
 800ab06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab08:	4b18      	ldr	r3, [pc, #96]	@ (800ab6c <xPortStartScheduler+0xec>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab10:	4a16      	ldr	r2, [pc, #88]	@ (800ab6c <xPortStartScheduler+0xec>)
 800ab12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab1c:	4b14      	ldr	r3, [pc, #80]	@ (800ab70 <xPortStartScheduler+0xf0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a13      	ldr	r2, [pc, #76]	@ (800ab70 <xPortStartScheduler+0xf0>)
 800ab22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab28:	4b11      	ldr	r3, [pc, #68]	@ (800ab70 <xPortStartScheduler+0xf0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a10      	ldr	r2, [pc, #64]	@ (800ab70 <xPortStartScheduler+0xf0>)
 800ab2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab34:	f000 f8dc 	bl	800acf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab38:	4b0e      	ldr	r3, [pc, #56]	@ (800ab74 <xPortStartScheduler+0xf4>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab3e:	f000 f8fb 	bl	800ad38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <xPortStartScheduler+0xf8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a0c      	ldr	r2, [pc, #48]	@ (800ab78 <xPortStartScheduler+0xf8>)
 800ab48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab4e:	f7ff ff83 	bl	800aa58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab52:	f7fe ff27 	bl	80099a4 <vTaskSwitchContext>
	prvTaskExitError();
 800ab56:	f7ff ff39 	bl	800a9cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	e000e400 	.word	0xe000e400
 800ab68:	20004bd4 	.word	0x20004bd4
 800ab6c:	20004bd8 	.word	0x20004bd8
 800ab70:	e000ed20 	.word	0xe000ed20
 800ab74:	2000000c 	.word	0x2000000c
 800ab78:	e000ef34 	.word	0xe000ef34

0800ab7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab86:	b672      	cpsid	i
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	b662      	cpsie	i
 800ab96:	607b      	str	r3, [r7, #4]
}
 800ab98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab9a:	4b11      	ldr	r3, [pc, #68]	@ (800abe0 <vPortEnterCritical+0x64>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	4a0f      	ldr	r2, [pc, #60]	@ (800abe0 <vPortEnterCritical+0x64>)
 800aba2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aba4:	4b0e      	ldr	r3, [pc, #56]	@ (800abe0 <vPortEnterCritical+0x64>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d112      	bne.n	800abd2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abac:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <vPortEnterCritical+0x68>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00d      	beq.n	800abd2 <vPortEnterCritical+0x56>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abba:	b672      	cpsid	i
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	b662      	cpsie	i
 800abca:	603b      	str	r3, [r7, #0]
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <vPortEnterCritical+0x52>
	}
}
 800abd2:	bf00      	nop
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	2000000c 	.word	0x2000000c
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abee:	4b13      	ldr	r3, [pc, #76]	@ (800ac3c <vPortExitCritical+0x54>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10d      	bne.n	800ac12 <vPortExitCritical+0x2a>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	b672      	cpsid	i
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	b662      	cpsie	i
 800ac0a:	607b      	str	r3, [r7, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ac12:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <vPortExitCritical+0x54>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	4a08      	ldr	r2, [pc, #32]	@ (800ac3c <vPortExitCritical+0x54>)
 800ac1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac1c:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <vPortExitCritical+0x54>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d105      	bne.n	800ac30 <vPortExitCritical+0x48>
 800ac24:	2300      	movs	r3, #0
 800ac26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	f383 8811 	msr	BASEPRI, r3
}
 800ac2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	2000000c 	.word	0x2000000c

0800ac40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac40:	f3ef 8009 	mrs	r0, PSP
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4b15      	ldr	r3, [pc, #84]	@ (800aca0 <pxCurrentTCBConst>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	f01e 0f10 	tst.w	lr, #16
 800ac50:	bf08      	it	eq
 800ac52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5a:	6010      	str	r0, [r2, #0]
 800ac5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac64:	b672      	cpsid	i
 800ac66:	f380 8811 	msr	BASEPRI, r0
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	b662      	cpsie	i
 800ac74:	f7fe fe96 	bl	80099a4 <vTaskSwitchContext>
 800ac78:	f04f 0000 	mov.w	r0, #0
 800ac7c:	f380 8811 	msr	BASEPRI, r0
 800ac80:	bc09      	pop	{r0, r3}
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	6808      	ldr	r0, [r1, #0]
 800ac86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	f01e 0f10 	tst.w	lr, #16
 800ac8e:	bf08      	it	eq
 800ac90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac94:	f380 8809 	msr	PSP, r0
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop

0800aca0 <pxCurrentTCBConst>:
 800aca0:	200045a8 	.word	0x200045a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop

0800aca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	b672      	cpsid	i
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	b662      	cpsie	i
 800acc2:	607b      	str	r3, [r7, #4]
}
 800acc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acc6:	f7fe fdb1 	bl	800982c <xTaskIncrementTick>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acd0:	4b06      	ldr	r3, [pc, #24]	@ (800acec <SysTick_Handler+0x44>)
 800acd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	2300      	movs	r3, #0
 800acda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	f383 8811 	msr	BASEPRI, r3
}
 800ace2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	e000ed04 	.word	0xe000ed04

0800acf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad24 <vPortSetupTimerInterrupt+0x34>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ad28 <vPortSetupTimerInterrupt+0x38>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad00:	4b0a      	ldr	r3, [pc, #40]	@ (800ad2c <vPortSetupTimerInterrupt+0x3c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a0a      	ldr	r2, [pc, #40]	@ (800ad30 <vPortSetupTimerInterrupt+0x40>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	099b      	lsrs	r3, r3, #6
 800ad0c:	4a09      	ldr	r2, [pc, #36]	@ (800ad34 <vPortSetupTimerInterrupt+0x44>)
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad12:	4b04      	ldr	r3, [pc, #16]	@ (800ad24 <vPortSetupTimerInterrupt+0x34>)
 800ad14:	2207      	movs	r2, #7
 800ad16:	601a      	str	r2, [r3, #0]
}
 800ad18:	bf00      	nop
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	e000e010 	.word	0xe000e010
 800ad28:	e000e018 	.word	0xe000e018
 800ad2c:	20000000 	.word	0x20000000
 800ad30:	10624dd3 	.word	0x10624dd3
 800ad34:	e000e014 	.word	0xe000e014

0800ad38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad48 <vPortEnableVFP+0x10>
 800ad3c:	6801      	ldr	r1, [r0, #0]
 800ad3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad42:	6001      	str	r1, [r0, #0]
 800ad44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad46:	bf00      	nop
 800ad48:	e000ed88 	.word	0xe000ed88

0800ad4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad52:	f3ef 8305 	mrs	r3, IPSR
 800ad56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b0f      	cmp	r3, #15
 800ad5c:	d917      	bls.n	800ad8e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad5e:	4a1a      	ldr	r2, [pc, #104]	@ (800adc8 <vPortValidateInterruptPriority+0x7c>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad68:	4b18      	ldr	r3, [pc, #96]	@ (800adcc <vPortValidateInterruptPriority+0x80>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	7afa      	ldrb	r2, [r7, #11]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d20d      	bcs.n	800ad8e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	b672      	cpsid	i
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	b662      	cpsie	i
 800ad86:	607b      	str	r3, [r7, #4]
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad8e:	4b10      	ldr	r3, [pc, #64]	@ (800add0 <vPortValidateInterruptPriority+0x84>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ad96:	4b0f      	ldr	r3, [pc, #60]	@ (800add4 <vPortValidateInterruptPriority+0x88>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d90d      	bls.n	800adba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	b672      	cpsid	i
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	b662      	cpsie	i
 800adb2:	603b      	str	r3, [r7, #0]
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	e7fd      	b.n	800adb6 <vPortValidateInterruptPriority+0x6a>
	}
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	e000e3f0 	.word	0xe000e3f0
 800adcc:	20004bd4 	.word	0x20004bd4
 800add0:	e000ed0c 	.word	0xe000ed0c
 800add4:	20004bd8 	.word	0x20004bd8

0800add8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	@ 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ade4:	f7fe fc52 	bl	800968c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ade8:	4b5d      	ldr	r3, [pc, #372]	@ (800af60 <pvPortMalloc+0x188>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adf0:	f000 f920 	bl	800b034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adf4:	4b5b      	ldr	r3, [pc, #364]	@ (800af64 <pvPortMalloc+0x18c>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f040 8094 	bne.w	800af2a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d020      	beq.n	800ae4a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ae08:	2208      	movs	r2, #8
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d017      	beq.n	800ae4a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f023 0307 	bic.w	r3, r3, #7
 800ae20:	3308      	adds	r3, #8
 800ae22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00d      	beq.n	800ae4a <pvPortMalloc+0x72>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae32:	b672      	cpsid	i
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	b662      	cpsie	i
 800ae42:	617b      	str	r3, [r7, #20]
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	e7fd      	b.n	800ae46 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d06c      	beq.n	800af2a <pvPortMalloc+0x152>
 800ae50:	4b45      	ldr	r3, [pc, #276]	@ (800af68 <pvPortMalloc+0x190>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d867      	bhi.n	800af2a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae5a:	4b44      	ldr	r3, [pc, #272]	@ (800af6c <pvPortMalloc+0x194>)
 800ae5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae5e:	4b43      	ldr	r3, [pc, #268]	@ (800af6c <pvPortMalloc+0x194>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae64:	e004      	b.n	800ae70 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d903      	bls.n	800ae82 <pvPortMalloc+0xaa>
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f1      	bne.n	800ae66 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae82:	4b37      	ldr	r3, [pc, #220]	@ (800af60 <pvPortMalloc+0x188>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d04e      	beq.n	800af2a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2208      	movs	r2, #8
 800ae92:	4413      	add	r3, r2
 800ae94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	2308      	movs	r3, #8
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d922      	bls.n	800aef4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00d      	beq.n	800aedc <pvPortMalloc+0x104>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	b672      	cpsid	i
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	b662      	cpsie	i
 800aed4:	613b      	str	r3, [r7, #16]
}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	e7fd      	b.n	800aed8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1ad2      	subs	r2, r2, r3
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeee:	69b8      	ldr	r0, [r7, #24]
 800aef0:	f000 f902 	bl	800b0f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aef4:	4b1c      	ldr	r3, [pc, #112]	@ (800af68 <pvPortMalloc+0x190>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	4a1a      	ldr	r2, [pc, #104]	@ (800af68 <pvPortMalloc+0x190>)
 800af00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af02:	4b19      	ldr	r3, [pc, #100]	@ (800af68 <pvPortMalloc+0x190>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	4b1a      	ldr	r3, [pc, #104]	@ (800af70 <pvPortMalloc+0x198>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d203      	bcs.n	800af16 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af0e:	4b16      	ldr	r3, [pc, #88]	@ (800af68 <pvPortMalloc+0x190>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a17      	ldr	r2, [pc, #92]	@ (800af70 <pvPortMalloc+0x198>)
 800af14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	4b12      	ldr	r3, [pc, #72]	@ (800af64 <pvPortMalloc+0x18c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	431a      	orrs	r2, r3
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af2a:	f7fe fbbd 	bl	80096a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00d      	beq.n	800af54 <pvPortMalloc+0x17c>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	b672      	cpsid	i
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	b662      	cpsie	i
 800af4c:	60fb      	str	r3, [r7, #12]
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	e7fd      	b.n	800af50 <pvPortMalloc+0x178>
	return pvReturn;
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3728      	adds	r7, #40	@ 0x28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	200087e4 	.word	0x200087e4
 800af64:	200087f0 	.word	0x200087f0
 800af68:	200087e8 	.word	0x200087e8
 800af6c:	200087dc 	.word	0x200087dc
 800af70:	200087ec 	.word	0x200087ec

0800af74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d04e      	beq.n	800b024 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af86:	2308      	movs	r3, #8
 800af88:	425b      	negs	r3, r3
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	4b24      	ldr	r3, [pc, #144]	@ (800b02c <vPortFree+0xb8>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10d      	bne.n	800afbe <vPortFree+0x4a>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	b672      	cpsid	i
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	b662      	cpsie	i
 800afb6:	60fb      	str	r3, [r7, #12]
}
 800afb8:	bf00      	nop
 800afba:	bf00      	nop
 800afbc:	e7fd      	b.n	800afba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00d      	beq.n	800afe2 <vPortFree+0x6e>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afca:	b672      	cpsid	i
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	b662      	cpsie	i
 800afda:	60bb      	str	r3, [r7, #8]
}
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	e7fd      	b.n	800afde <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4b11      	ldr	r3, [pc, #68]	@ (800b02c <vPortFree+0xb8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4013      	ands	r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d019      	beq.n	800b024 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d115      	bne.n	800b024 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b0b      	ldr	r3, [pc, #44]	@ (800b02c <vPortFree+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b008:	f7fe fb40 	bl	800968c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <vPortFree+0xbc>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4413      	add	r3, r2
 800b016:	4a06      	ldr	r2, [pc, #24]	@ (800b030 <vPortFree+0xbc>)
 800b018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b01a:	6938      	ldr	r0, [r7, #16]
 800b01c:	f000 f86c 	bl	800b0f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b020:	f7fe fb42 	bl	80096a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b024:	bf00      	nop
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200087f0 	.word	0x200087f0
 800b030:	200087e8 	.word	0x200087e8

0800b034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b03a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b03e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b040:	4b27      	ldr	r3, [pc, #156]	@ (800b0e0 <prvHeapInit+0xac>)
 800b042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00c      	beq.n	800b068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0307 	bic.w	r3, r3, #7
 800b05a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	4a1f      	ldr	r2, [pc, #124]	@ (800b0e0 <prvHeapInit+0xac>)
 800b064:	4413      	add	r3, r2
 800b066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b06c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e4 <prvHeapInit+0xb0>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b072:	4b1c      	ldr	r3, [pc, #112]	@ (800b0e4 <prvHeapInit+0xb0>)
 800b074:	2200      	movs	r2, #0
 800b076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	4413      	add	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b080:	2208      	movs	r2, #8
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a15      	ldr	r2, [pc, #84]	@ (800b0e8 <prvHeapInit+0xb4>)
 800b094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b096:	4b14      	ldr	r3, [pc, #80]	@ (800b0e8 <prvHeapInit+0xb4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b09e:	4b12      	ldr	r3, [pc, #72]	@ (800b0e8 <prvHeapInit+0xb4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e8 <prvHeapInit+0xb4>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b0ec <prvHeapInit+0xb8>)
 800b0c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4a09      	ldr	r2, [pc, #36]	@ (800b0f0 <prvHeapInit+0xbc>)
 800b0ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0cc:	4b09      	ldr	r3, [pc, #36]	@ (800b0f4 <prvHeapInit+0xc0>)
 800b0ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	20004bdc 	.word	0x20004bdc
 800b0e4:	200087dc 	.word	0x200087dc
 800b0e8:	200087e4 	.word	0x200087e4
 800b0ec:	200087ec 	.word	0x200087ec
 800b0f0:	200087e8 	.word	0x200087e8
 800b0f4:	200087f0 	.word	0x200087f0

0800b0f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b100:	4b28      	ldr	r3, [pc, #160]	@ (800b1a4 <prvInsertBlockIntoFreeList+0xac>)
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e002      	b.n	800b10c <prvInsertBlockIntoFreeList+0x14>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	429a      	cmp	r2, r3
 800b114:	d8f7      	bhi.n	800b106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d108      	bne.n	800b13a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	441a      	add	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d118      	bne.n	800b180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b15      	ldr	r3, [pc, #84]	@ (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d00d      	beq.n	800b176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	441a      	add	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	e008      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b176:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	e003      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d002      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	200087dc 	.word	0x200087dc
 800b1a8:	200087e4 	.word	0x200087e4

0800b1ac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	330c      	adds	r3, #12
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f002 fa29 	bl	800d618 <tcpip_send_msg_wait_sem>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d103      	bne.n	800b1da <netconn_apimsg+0x2e>
    return apimsg->err;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b1d8:	e001      	b.n	800b1de <netconn_apimsg+0x32>
  }
  return err;
 800b1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	@ 0x30
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	603a      	str	r2, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 f923 	bl	800c448 <netconn_alloc>
 800b202:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800b204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b206:	2b00      	cmp	r3, #0
 800b208:	d054      	beq.n	800b2b4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b20a:	79bb      	ldrb	r3, [r7, #6]
 800b20c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b210:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b212:	f107 0308 	add.w	r3, r7, #8
 800b216:	4619      	mov	r1, r3
 800b218:	4829      	ldr	r0, [pc, #164]	@ (800b2c0 <netconn_new_with_proto_and_callback+0xd8>)
 800b21a:	f7ff ffc7 	bl	800b1ac <netconn_apimsg>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800b224:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d043      	beq.n	800b2b4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <netconn_new_with_proto_and_callback+0x58>
 800b234:	4b23      	ldr	r3, [pc, #140]	@ (800b2c4 <netconn_new_with_proto_and_callback+0xdc>)
 800b236:	22a3      	movs	r2, #163	@ 0xa3
 800b238:	4923      	ldr	r1, [pc, #140]	@ (800b2c8 <netconn_new_with_proto_and_callback+0xe0>)
 800b23a:	4824      	ldr	r0, [pc, #144]	@ (800b2cc <netconn_new_with_proto_and_callback+0xe4>)
 800b23c:	f00d ff42 	bl	80190c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b242:	3310      	adds	r3, #16
 800b244:	4618      	mov	r0, r3
 800b246:	f00d f8dd 	bl	8018404 <sys_mbox_valid>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d105      	bne.n	800b25c <netconn_new_with_proto_and_callback+0x74>
 800b250:	4b1c      	ldr	r3, [pc, #112]	@ (800b2c4 <netconn_new_with_proto_and_callback+0xdc>)
 800b252:	22a4      	movs	r2, #164	@ 0xa4
 800b254:	491e      	ldr	r1, [pc, #120]	@ (800b2d0 <netconn_new_with_proto_and_callback+0xe8>)
 800b256:	481d      	ldr	r0, [pc, #116]	@ (800b2cc <netconn_new_with_proto_and_callback+0xe4>)
 800b258:	f00d ff34 	bl	80190c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	3314      	adds	r3, #20
 800b260:	4618      	mov	r0, r3
 800b262:	f00d f8cf 	bl	8018404 <sys_mbox_valid>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <netconn_new_with_proto_and_callback+0x90>
 800b26c:	4b15      	ldr	r3, [pc, #84]	@ (800b2c4 <netconn_new_with_proto_and_callback+0xdc>)
 800b26e:	22a6      	movs	r2, #166	@ 0xa6
 800b270:	4918      	ldr	r1, [pc, #96]	@ (800b2d4 <netconn_new_with_proto_and_callback+0xec>)
 800b272:	4816      	ldr	r0, [pc, #88]	@ (800b2cc <netconn_new_with_proto_and_callback+0xe4>)
 800b274:	f00d ff26 	bl	80190c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	330c      	adds	r3, #12
 800b27c:	4618      	mov	r0, r3
 800b27e:	f00d f94f 	bl	8018520 <sys_sem_valid>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d105      	bne.n	800b294 <netconn_new_with_proto_and_callback+0xac>
 800b288:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c4 <netconn_new_with_proto_and_callback+0xdc>)
 800b28a:	22a9      	movs	r2, #169	@ 0xa9
 800b28c:	4912      	ldr	r1, [pc, #72]	@ (800b2d8 <netconn_new_with_proto_and_callback+0xf0>)
 800b28e:	480f      	ldr	r0, [pc, #60]	@ (800b2cc <netconn_new_with_proto_and_callback+0xe4>)
 800b290:	f00d ff18 	bl	80190c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b296:	330c      	adds	r3, #12
 800b298:	4618      	mov	r0, r3
 800b29a:	f00d f934 	bl	8018506 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a0:	3310      	adds	r3, #16
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f00d f83a 	bl	801831c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b2a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2aa:	2007      	movs	r0, #7
 800b2ac:	f002 ff1c 	bl	800e0e8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e000      	b.n	800b2b6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3730      	adds	r7, #48	@ 0x30
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	0800c41d 	.word	0x0800c41d
 800b2c4:	0801b7c0 	.word	0x0801b7c0
 800b2c8:	0801b7f4 	.word	0x0801b7f4
 800b2cc:	0801b818 	.word	0x0801b818
 800b2d0:	0801b840 	.word	0x0801b840
 800b2d4:	0801b858 	.word	0x0801b858
 800b2d8:	0801b87c 	.word	0x0801b87c

0800b2dc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08c      	sub	sp, #48	@ 0x30
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e014      	b.n	800b318 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b2f2:	2329      	movs	r3, #41	@ 0x29
 800b2f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b2f6:	f107 030c 	add.w	r3, r7, #12
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4808      	ldr	r0, [pc, #32]	@ (800b320 <netconn_prepare_delete+0x44>)
 800b2fe:	f7ff ff55 	bl	800b1ac <netconn_apimsg>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b308:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <netconn_prepare_delete+0x3a>
    return err;
 800b310:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b314:	e000      	b.n	800b318 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3730      	adds	r7, #48	@ 0x30
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	0800c989 	.word	0x0800c989

0800b324 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <netconn_delete+0x12>
    return ERR_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	e00d      	b.n	800b352 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff ffd0 	bl	800b2dc <netconn_prepare_delete>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <netconn_delete+0x2a>
    netconn_free(conn);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 f8eb 	bl	800c524 <netconn_free>
  }
  return err;
 800b34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08e      	sub	sp, #56	@ 0x38
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d109      	bne.n	800b384 <netconn_bind+0x28>
 800b370:	4b11      	ldr	r3, [pc, #68]	@ (800b3b8 <netconn_bind+0x5c>)
 800b372:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800b376:	4911      	ldr	r1, [pc, #68]	@ (800b3bc <netconn_bind+0x60>)
 800b378:	4811      	ldr	r0, [pc, #68]	@ (800b3c0 <netconn_bind+0x64>)
 800b37a:	f00d fea3 	bl	80190c4 <iprintf>
 800b37e:	f06f 030f 	mvn.w	r3, #15
 800b382:	e015      	b.n	800b3b0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800b38a:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c4 <netconn_bind+0x68>)
 800b38c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b396:	88fb      	ldrh	r3, [r7, #6]
 800b398:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b39a:	f107 0314 	add.w	r3, r7, #20
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4809      	ldr	r0, [pc, #36]	@ (800b3c8 <netconn_bind+0x6c>)
 800b3a2:	f7ff ff03 	bl	800b1ac <netconn_apimsg>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b3ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3738      	adds	r7, #56	@ 0x38
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	0801b7c0 	.word	0x0801b7c0
 800b3bc:	0801b8f8 	.word	0x0801b8f8
 800b3c0:	0801b818 	.word	0x0801b818
 800b3c4:	0801ec48 	.word	0x0801ec48
 800b3c8:	0800cb51 	.word	0x0800cb51

0800b3cc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08c      	sub	sp, #48	@ 0x30
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <netconn_listen_with_backlog+0x26>
 800b3de:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <netconn_listen_with_backlog+0x48>)
 800b3e0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800b3e4:	490c      	ldr	r1, [pc, #48]	@ (800b418 <netconn_listen_with_backlog+0x4c>)
 800b3e6:	480d      	ldr	r0, [pc, #52]	@ (800b41c <netconn_listen_with_backlog+0x50>)
 800b3e8:	f00d fe6c 	bl	80190c4 <iprintf>
 800b3ec:	f06f 030f 	mvn.w	r3, #15
 800b3f0:	e00c      	b.n	800b40c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800b3f6:	f107 030c 	add.w	r3, r7, #12
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4808      	ldr	r0, [pc, #32]	@ (800b420 <netconn_listen_with_backlog+0x54>)
 800b3fe:	f7ff fed5 	bl	800b1ac <netconn_apimsg>
 800b402:	4603      	mov	r3, r0
 800b404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b408:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3730      	adds	r7, #48	@ 0x30
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0801b7c0 	.word	0x0801b7c0
 800b418:	0801b978 	.word	0x0801b978
 800b41c:	0801b818 	.word	0x0801b818
 800b420:	0800cbc5 	.word	0x0800cbc5

0800b424 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d109      	bne.n	800b448 <netconn_accept+0x24>
 800b434:	4b3d      	ldr	r3, [pc, #244]	@ (800b52c <netconn_accept+0x108>)
 800b436:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b43a:	493d      	ldr	r1, [pc, #244]	@ (800b530 <netconn_accept+0x10c>)
 800b43c:	483d      	ldr	r0, [pc, #244]	@ (800b534 <netconn_accept+0x110>)
 800b43e:	f00d fe41 	bl	80190c4 <iprintf>
 800b442:	f06f 030f 	mvn.w	r3, #15
 800b446:	e06c      	b.n	800b522 <netconn_accept+0xfe>
  *new_conn = NULL;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <netconn_accept+0x44>
 800b454:	4b35      	ldr	r3, [pc, #212]	@ (800b52c <netconn_accept+0x108>)
 800b456:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800b45a:	4937      	ldr	r1, [pc, #220]	@ (800b538 <netconn_accept+0x114>)
 800b45c:	4835      	ldr	r0, [pc, #212]	@ (800b534 <netconn_accept+0x110>)
 800b45e:	f00d fe31 	bl	80190c4 <iprintf>
 800b462:	f06f 030f 	mvn.w	r3, #15
 800b466:	e05c      	b.n	800b522 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fb6c 	bl	800bb46 <netconn_err>
 800b46e:	4603      	mov	r3, r0
 800b470:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800b472:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800b47a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b47e:	e050      	b.n	800b522 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3314      	adds	r3, #20
 800b484:	4618      	mov	r0, r3
 800b486:	f00c ffbd 	bl	8018404 <sys_mbox_valid>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <netconn_accept+0x78>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7f1b      	ldrb	r3, [r3, #28]
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800b49c:	f06f 030e 	mvn.w	r3, #14
 800b4a0:	e03f      	b.n	800b522 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7f1b      	ldrb	r3, [r3, #28]
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00e      	beq.n	800b4cc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3314      	adds	r3, #20
 800b4b2:	f107 020c 	add.w	r2, r7, #12
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f00c ff8c 	bl	80183d6 <sys_arch_mbox_tryfetch>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c4:	d10a      	bne.n	800b4dc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800b4c6:	f06f 0306 	mvn.w	r3, #6
 800b4ca:	e02a      	b.n	800b522 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	f107 010c 	add.w	r1, r7, #12
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f00c ff4c 	bl	8018374 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <netconn_accept+0xcc>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f107 0213 	add.w	r2, r7, #19
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fb75 	bl	800bbe8 <lwip_netconn_is_err_msg>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800b504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b508:	e00b      	b.n	800b522 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800b510:	f06f 030e 	mvn.w	r3, #14
 800b514:	e005      	b.n	800b522 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b520:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0801b7c0 	.word	0x0801b7c0
 800b530:	0801b998 	.word	0x0801b998
 800b534:	0801b818 	.word	0x0801b818
 800b538:	0801b9b8 	.word	0x0801b9b8

0800b53c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <netconn_recv_data+0x2c>
 800b554:	4b58      	ldr	r3, [pc, #352]	@ (800b6b8 <netconn_recv_data+0x17c>)
 800b556:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800b55a:	4958      	ldr	r1, [pc, #352]	@ (800b6bc <netconn_recv_data+0x180>)
 800b55c:	4858      	ldr	r0, [pc, #352]	@ (800b6c0 <netconn_recv_data+0x184>)
 800b55e:	f00d fdb1 	bl	80190c4 <iprintf>
 800b562:	f06f 030f 	mvn.w	r3, #15
 800b566:	e0a2      	b.n	800b6ae <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d109      	bne.n	800b588 <netconn_recv_data+0x4c>
 800b574:	4b50      	ldr	r3, [pc, #320]	@ (800b6b8 <netconn_recv_data+0x17c>)
 800b576:	f240 224a 	movw	r2, #586	@ 0x24a
 800b57a:	4952      	ldr	r1, [pc, #328]	@ (800b6c4 <netconn_recv_data+0x188>)
 800b57c:	4850      	ldr	r0, [pc, #320]	@ (800b6c0 <netconn_recv_data+0x184>)
 800b57e:	f00d fda1 	bl	80190c4 <iprintf>
 800b582:	f06f 030f 	mvn.w	r3, #15
 800b586:	e092      	b.n	800b6ae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3310      	adds	r3, #16
 800b58c:	4618      	mov	r0, r3
 800b58e:	f00c ff39 	bl	8018404 <sys_mbox_valid>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10e      	bne.n	800b5b6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fad4 	bl	800bb46 <netconn_err>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b5a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b5aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b5ae:	e07e      	b.n	800b6ae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b5b0:	f06f 030a 	mvn.w	r3, #10
 800b5b4:	e07b      	b.n	800b6ae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	7f1b      	ldrb	r3, [r3, #28]
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10f      	bne.n	800b5e2 <netconn_recv_data+0xa6>
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7f1b      	ldrb	r3, [r3, #28]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d023      	beq.n	800b62a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3310      	adds	r3, #16
 800b5e6:	f107 0218 	add.w	r2, r7, #24
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f00c fef2 	bl	80183d6 <sys_arch_mbox_tryfetch>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d11f      	bne.n	800b63a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 faa3 	bl	800bb46 <netconn_err>
 800b600:	4603      	mov	r3, r0
 800b602:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b604:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b60c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b610:	e04d      	b.n	800b6ae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	7f1b      	ldrb	r3, [r3, #28]
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b61e:	f06f 030a 	mvn.w	r3, #10
 800b622:	e044      	b.n	800b6ae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b624:	f06f 0306 	mvn.w	r3, #6
 800b628:	e041      	b.n	800b6ae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3310      	adds	r3, #16
 800b62e:	f107 0118 	add.w	r1, r7, #24
 800b632:	2200      	movs	r2, #0
 800b634:	4618      	mov	r0, r3
 800b636:	f00c fe9d 	bl	8018374 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b642:	2b10      	cmp	r3, #16
 800b644:	d117      	bne.n	800b676 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f107 0217 	add.w	r2, r7, #23
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 faca 	bl	800bbe8 <lwip_netconn_is_err_msg>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b65e:	f113 0f0f 	cmn.w	r3, #15
 800b662:	d101      	bne.n	800b668 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	e022      	b.n	800b6ae <netconn_recv_data+0x172>
      }
      return err;
 800b668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b66c:	e01f      	b.n	800b6ae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	891b      	ldrh	r3, [r3, #8]
 800b672:	83fb      	strh	r3, [r7, #30]
 800b674:	e00d      	b.n	800b692 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <netconn_recv_data+0x14e>
 800b67c:	4b0e      	ldr	r3, [pc, #56]	@ (800b6b8 <netconn_recv_data+0x17c>)
 800b67e:	f240 2291 	movw	r2, #657	@ 0x291
 800b682:	4911      	ldr	r1, [pc, #68]	@ (800b6c8 <netconn_recv_data+0x18c>)
 800b684:	480e      	ldr	r0, [pc, #56]	@ (800b6c0 <netconn_recv_data+0x184>)
 800b686:	f00d fd1d 	bl	80190c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	891b      	ldrh	r3, [r3, #8]
 800b690:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <netconn_recv_data+0x16a>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69e:	8bfa      	ldrh	r2, [r7, #30]
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3720      	adds	r7, #32
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	0801b7c0 	.word	0x0801b7c0
 800b6bc:	0801b9d8 	.word	0x0801b9d8
 800b6c0:	0801b818 	.word	0x0801b818
 800b6c4:	0801b9f8 	.word	0x0801b9f8
 800b6c8:	0801ba14 	.word	0x0801ba14

0800b6cc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <netconn_tcp_recvd_msg+0x1e>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6e6:	2b10      	cmp	r3, #16
 800b6e8:	d009      	beq.n	800b6fe <netconn_tcp_recvd_msg+0x32>
 800b6ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <netconn_tcp_recvd_msg+0x50>)
 800b6ec:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800b6f0:	490b      	ldr	r1, [pc, #44]	@ (800b720 <netconn_tcp_recvd_msg+0x54>)
 800b6f2:	480c      	ldr	r0, [pc, #48]	@ (800b724 <netconn_tcp_recvd_msg+0x58>)
 800b6f4:	f00d fce6 	bl	80190c4 <iprintf>
 800b6f8:	f06f 030f 	mvn.w	r3, #15
 800b6fc:	e00a      	b.n	800b714 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	4806      	ldr	r0, [pc, #24]	@ (800b728 <netconn_tcp_recvd_msg+0x5c>)
 800b70e:	f7ff fd4d 	bl	800b1ac <netconn_apimsg>
 800b712:	4603      	mov	r3, r0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	0801b7c0 	.word	0x0801b7c0
 800b720:	0801ba20 	.word	0x0801ba20
 800b724:	0801b818 	.word	0x0801b818
 800b728:	0800ccf5 	.word	0x0800ccf5

0800b72c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b090      	sub	sp, #64	@ 0x40
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4613      	mov	r3, r2
 800b738:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3310      	adds	r3, #16
 800b73e:	4618      	mov	r0, r3
 800b740:	f00c fe60 	bl	8018404 <sys_mbox_valid>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d102      	bne.n	800b750 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b74a:	f06f 030a 	mvn.w	r3, #10
 800b74e:	e06d      	b.n	800b82c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	7f1b      	ldrb	r3, [r3, #28]
 800b754:	b25b      	sxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	da07      	bge.n	800b76a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	7f1b      	ldrb	r3, [r3, #28]
 800b75e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b762:	b2da      	uxtb	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b768:	e039      	b.n	800b7de <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7ff fee3 	bl	800b53c <netconn_recv_data>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800b77c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b784:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b788:	e050      	b.n	800b82c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10e      	bne.n	800b7b8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <netconn_recv_data_tcp+0x7a>
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	891b      	ldrh	r3, [r3, #8]
 800b7a4:	e000      	b.n	800b7a8 <netconn_recv_data_tcp+0x7c>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b7aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7ac:	f107 0214 	add.w	r2, r7, #20
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff8a 	bl	800b6cc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d134      	bne.n	800b828 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	f003 0310 	and.w	r3, r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	7f1b      	ldrb	r3, [r3, #28]
 800b7cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b7d6:	f06f 0306 	mvn.w	r3, #6
 800b7da:	e027      	b.n	800b82c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b7dc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <netconn_recv_data_tcp+0xc6>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10f      	bne.n	800b81a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f9a3 	bl	800bb46 <netconn_err>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800b806:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d002      	beq.n	800b814 <netconn_recv_data_tcp+0xe8>
          return err;
 800b80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b812:	e00b      	b.n	800b82c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b814:	f06f 030d 	mvn.w	r3, #13
 800b818:	e008      	b.n	800b82c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b81a:	2101      	movs	r1, #1
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 f955 	bl	800bacc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b822:	f06f 030e 	mvn.w	r3, #14
 800b826:	e001      	b.n	800b82c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b828:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3740      	adds	r7, #64	@ 0x40
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d109      	bne.n	800b85c <netconn_recv+0x28>
 800b848:	4b32      	ldr	r3, [pc, #200]	@ (800b914 <netconn_recv+0xe0>)
 800b84a:	f240 3263 	movw	r2, #867	@ 0x363
 800b84e:	4932      	ldr	r1, [pc, #200]	@ (800b918 <netconn_recv+0xe4>)
 800b850:	4832      	ldr	r0, [pc, #200]	@ (800b91c <netconn_recv+0xe8>)
 800b852:	f00d fc37 	bl	80190c4 <iprintf>
 800b856:	f06f 030f 	mvn.w	r3, #15
 800b85a:	e056      	b.n	800b90a <netconn_recv+0xd6>
  *new_buf = NULL;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d109      	bne.n	800b87c <netconn_recv+0x48>
 800b868:	4b2a      	ldr	r3, [pc, #168]	@ (800b914 <netconn_recv+0xe0>)
 800b86a:	f240 3265 	movw	r2, #869	@ 0x365
 800b86e:	492c      	ldr	r1, [pc, #176]	@ (800b920 <netconn_recv+0xec>)
 800b870:	482a      	ldr	r0, [pc, #168]	@ (800b91c <netconn_recv+0xe8>)
 800b872:	f00d fc27 	bl	80190c4 <iprintf>
 800b876:	f06f 030f 	mvn.w	r3, #15
 800b87a:	e046      	b.n	800b90a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b884:	2b10      	cmp	r3, #16
 800b886:	d13a      	bne.n	800b8fe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b88c:	2006      	movs	r0, #6
 800b88e:	f002 fbd9 	bl	800e044 <memp_malloc>
 800b892:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <netconn_recv+0x6c>
      return ERR_MEM;
 800b89a:	f04f 33ff 	mov.w	r3, #4294967295
 800b89e:	e034      	b.n	800b90a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff ff3f 	bl	800b72c <netconn_recv_data_tcp>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b8b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d006      	beq.n	800b8c8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b8ba:	6979      	ldr	r1, [r7, #20]
 800b8bc:	2006      	movs	r0, #6
 800b8be:	f002 fc13 	bl	800e0e8 <memp_free>
      return err;
 800b8c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8c6:	e020      	b.n	800b90a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <netconn_recv+0xa8>
 800b8ce:	4b11      	ldr	r3, [pc, #68]	@ (800b914 <netconn_recv+0xe0>)
 800b8d0:	f240 3279 	movw	r2, #889	@ 0x379
 800b8d4:	4913      	ldr	r1, [pc, #76]	@ (800b924 <netconn_recv+0xf0>)
 800b8d6:	4811      	ldr	r0, [pc, #68]	@ (800b91c <netconn_recv+0xe8>)
 800b8d8:	f00d fbf4 	bl	80190c4 <iprintf>

    buf->p = p;
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e005      	b.n	800b90a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff fe1a 	bl	800b53c <netconn_recv_data>
 800b908:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	0801b7c0 	.word	0x0801b7c0
 800b918:	0801b9d8 	.word	0x0801b9d8
 800b91c:	0801b818 	.word	0x0801b818
 800b920:	0801b9f8 	.word	0x0801b9f8
 800b924:	0801ba70 	.word	0x0801ba70

0800b928 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	f107 0110 	add.w	r1, r7, #16
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	2201      	movs	r2, #1
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f805 	bl	800b95c <netconn_write_vectors_partly>
 800b952:	4603      	mov	r3, r0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b092      	sub	sp, #72	@ 0x48
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	4611      	mov	r1, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	460b      	mov	r3, r1
 800b96c:	80fb      	strh	r3, [r7, #6]
 800b96e:	4613      	mov	r3, r2
 800b970:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d109      	bne.n	800b98c <netconn_write_vectors_partly+0x30>
 800b978:	4b4e      	ldr	r3, [pc, #312]	@ (800bab4 <netconn_write_vectors_partly+0x158>)
 800b97a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b97e:	494e      	ldr	r1, [pc, #312]	@ (800bab8 <netconn_write_vectors_partly+0x15c>)
 800b980:	484e      	ldr	r0, [pc, #312]	@ (800babc <netconn_write_vectors_partly+0x160>)
 800b982:	f00d fb9f 	bl	80190c4 <iprintf>
 800b986:	f06f 030f 	mvn.w	r3, #15
 800b98a:	e08e      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b994:	2b10      	cmp	r3, #16
 800b996:	d009      	beq.n	800b9ac <netconn_write_vectors_partly+0x50>
 800b998:	4b46      	ldr	r3, [pc, #280]	@ (800bab4 <netconn_write_vectors_partly+0x158>)
 800b99a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800b99e:	4948      	ldr	r1, [pc, #288]	@ (800bac0 <netconn_write_vectors_partly+0x164>)
 800b9a0:	4846      	ldr	r0, [pc, #280]	@ (800babc <netconn_write_vectors_partly+0x160>)
 800b9a2:	f00d fb8f 	bl	80190c4 <iprintf>
 800b9a6:	f06f 0305 	mvn.w	r3, #5
 800b9aa:	e07e      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	7f1b      	ldrb	r3, [r3, #28]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <netconn_write_vectors_partly+0x66>
 800b9b8:	797b      	ldrb	r3, [r7, #5]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <netconn_write_vectors_partly+0x6a>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <netconn_write_vectors_partly+0x6c>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b9cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d005      	beq.n	800b9e0 <netconn_write_vectors_partly+0x84>
 800b9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d102      	bne.n	800b9e0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b9da:	f06f 0305 	mvn.w	r3, #5
 800b9de:	e064      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9e8:	e015      	b.n	800ba16 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9f6:	4413      	add	r3, r2
 800b9f8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9fc:	00db      	lsls	r3, r3, #3
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	4413      	add	r3, r2
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d202      	bcs.n	800ba10 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ba0a:	f06f 0305 	mvn.w	r3, #5
 800ba0e:	e04c      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ba10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba12:	3301      	adds	r3, #1
 800ba14:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	dbe5      	blt.n	800b9ea <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ba1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	e040      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ba28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da0a      	bge.n	800ba44 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ba2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ba34:	f06f 0305 	mvn.w	r3, #5
 800ba38:	e037      	b.n	800baaa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ba3a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ba54:	797b      	ldrb	r3, [r7, #5]
 800ba56:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ba5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	4619      	mov	r1, r3
 800ba68:	4816      	ldr	r0, [pc, #88]	@ (800bac4 <netconn_write_vectors_partly+0x168>)
 800ba6a:	f7ff fb9f 	bl	800b1ac <netconn_apimsg>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ba74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d114      	bne.n	800baa6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ba7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ba82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba86:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ba88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d006      	beq.n	800baa6 <netconn_write_vectors_partly+0x14a>
 800ba98:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <netconn_write_vectors_partly+0x158>)
 800ba9a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ba9e:	490a      	ldr	r1, [pc, #40]	@ (800bac8 <netconn_write_vectors_partly+0x16c>)
 800baa0:	4806      	ldr	r0, [pc, #24]	@ (800babc <netconn_write_vectors_partly+0x160>)
 800baa2:	f00d fb0f 	bl	80190c4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800baa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3748      	adds	r7, #72	@ 0x48
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	0801b7c0 	.word	0x0801b7c0
 800bab8:	0801ba98 	.word	0x0801ba98
 800babc:	0801b818 	.word	0x0801b818
 800bac0:	0801bab4 	.word	0x0801bab4
 800bac4:	0800d0f9 	.word	0x0800d0f9
 800bac8:	0801bad8 	.word	0x0801bad8

0800bacc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08c      	sub	sp, #48	@ 0x30
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <netconn_close_shutdown+0x26>
 800bade:	4b0f      	ldr	r3, [pc, #60]	@ (800bb1c <netconn_close_shutdown+0x50>)
 800bae0:	f240 4247 	movw	r2, #1095	@ 0x447
 800bae4:	490e      	ldr	r1, [pc, #56]	@ (800bb20 <netconn_close_shutdown+0x54>)
 800bae6:	480f      	ldr	r0, [pc, #60]	@ (800bb24 <netconn_close_shutdown+0x58>)
 800bae8:	f00d faec 	bl	80190c4 <iprintf>
 800baec:	f06f 030f 	mvn.w	r3, #15
 800baf0:	e010      	b.n	800bb14 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bafa:	2329      	movs	r3, #41	@ 0x29
 800bafc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800bafe:	f107 030c 	add.w	r3, r7, #12
 800bb02:	4619      	mov	r1, r3
 800bb04:	4808      	ldr	r0, [pc, #32]	@ (800bb28 <netconn_close_shutdown+0x5c>)
 800bb06:	f7ff fb51 	bl	800b1ac <netconn_apimsg>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bb10:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3730      	adds	r7, #48	@ 0x30
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	0801b7c0 	.word	0x0801b7c0
 800bb20:	0801bafc 	.word	0x0801bafc
 800bb24:	0801b818 	.word	0x0801b818
 800bb28:	0800d211 	.word	0x0800d211

0800bb2c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800bb34:	2103      	movs	r1, #3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff ffc8 	bl	800bacc <netconn_close_shutdown>
 800bb3c:	4603      	mov	r3, r0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <netconn_err+0x12>
    return ERR_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e00d      	b.n	800bb74 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800bb58:	f00c fd5e 	bl	8018618 <sys_arch_protect>
 800bb5c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	7a1b      	ldrb	r3, [r3, #8]
 800bb62:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f00c fd62 	bl	8018634 <sys_arch_unprotect>
  return err;
 800bb70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800bb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb8a:	f113 0f0d 	cmn.w	r3, #13
 800bb8e:	d009      	beq.n	800bba4 <lwip_netconn_err_to_msg+0x28>
 800bb90:	f113 0f0d 	cmn.w	r3, #13
 800bb94:	dc0c      	bgt.n	800bbb0 <lwip_netconn_err_to_msg+0x34>
 800bb96:	f113 0f0f 	cmn.w	r3, #15
 800bb9a:	d007      	beq.n	800bbac <lwip_netconn_err_to_msg+0x30>
 800bb9c:	f113 0f0e 	cmn.w	r3, #14
 800bba0:	d002      	beq.n	800bba8 <lwip_netconn_err_to_msg+0x2c>
 800bba2:	e005      	b.n	800bbb0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800bba4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd0 <lwip_netconn_err_to_msg+0x54>)
 800bba6:	e00e      	b.n	800bbc6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800bba8:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd4 <lwip_netconn_err_to_msg+0x58>)
 800bbaa:	e00c      	b.n	800bbc6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800bbac:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <lwip_netconn_err_to_msg+0x5c>)
 800bbae:	e00a      	b.n	800bbc6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800bbb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d005      	beq.n	800bbc4 <lwip_netconn_err_to_msg+0x48>
 800bbb8:	4b08      	ldr	r3, [pc, #32]	@ (800bbdc <lwip_netconn_err_to_msg+0x60>)
 800bbba:	227d      	movs	r2, #125	@ 0x7d
 800bbbc:	4908      	ldr	r1, [pc, #32]	@ (800bbe0 <lwip_netconn_err_to_msg+0x64>)
 800bbbe:	4809      	ldr	r0, [pc, #36]	@ (800bbe4 <lwip_netconn_err_to_msg+0x68>)
 800bbc0:	f00d fa80 	bl	80190c4 <iprintf>
      return NULL;
 800bbc4:	2300      	movs	r3, #0
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	0801eb34 	.word	0x0801eb34
 800bbd4:	0801eb35 	.word	0x0801eb35
 800bbd8:	0801eb36 	.word	0x0801eb36
 800bbdc:	0801bb18 	.word	0x0801bb18
 800bbe0:	0801bb4c 	.word	0x0801bb4c
 800bbe4:	0801bb5c 	.word	0x0801bb5c

0800bbe8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d105      	bne.n	800bc04 <lwip_netconn_is_err_msg+0x1c>
 800bbf8:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <lwip_netconn_is_err_msg+0x5c>)
 800bbfa:	2285      	movs	r2, #133	@ 0x85
 800bbfc:	4912      	ldr	r1, [pc, #72]	@ (800bc48 <lwip_netconn_is_err_msg+0x60>)
 800bbfe:	4813      	ldr	r0, [pc, #76]	@ (800bc4c <lwip_netconn_is_err_msg+0x64>)
 800bc00:	f00d fa60 	bl	80190c4 <iprintf>

  if (msg == &netconn_aborted) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a12      	ldr	r2, [pc, #72]	@ (800bc50 <lwip_netconn_is_err_msg+0x68>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d104      	bne.n	800bc16 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	22f3      	movs	r2, #243	@ 0xf3
 800bc10:	701a      	strb	r2, [r3, #0]
    return 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e012      	b.n	800bc3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a0e      	ldr	r2, [pc, #56]	@ (800bc54 <lwip_netconn_is_err_msg+0x6c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d104      	bne.n	800bc28 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	22f2      	movs	r2, #242	@ 0xf2
 800bc22:	701a      	strb	r2, [r3, #0]
    return 1;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e009      	b.n	800bc3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a0b      	ldr	r2, [pc, #44]	@ (800bc58 <lwip_netconn_is_err_msg+0x70>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d104      	bne.n	800bc3a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	22f1      	movs	r2, #241	@ 0xf1
 800bc34:	701a      	strb	r2, [r3, #0]
    return 1;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e000      	b.n	800bc3c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0801bb18 	.word	0x0801bb18
 800bc48:	0801bb84 	.word	0x0801bb84
 800bc4c:	0801bb5c 	.word	0x0801bb5c
 800bc50:	0801eb34 	.word	0x0801eb34
 800bc54:	0801eb35 	.word	0x0801eb35
 800bc58:	0801eb36 	.word	0x0801eb36

0800bc5c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d105      	bne.n	800bc7c <recv_udp+0x20>
 800bc70:	4b34      	ldr	r3, [pc, #208]	@ (800bd44 <recv_udp+0xe8>)
 800bc72:	22e5      	movs	r2, #229	@ 0xe5
 800bc74:	4934      	ldr	r1, [pc, #208]	@ (800bd48 <recv_udp+0xec>)
 800bc76:	4835      	ldr	r0, [pc, #212]	@ (800bd4c <recv_udp+0xf0>)
 800bc78:	f00d fa24 	bl	80190c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d105      	bne.n	800bc8e <recv_udp+0x32>
 800bc82:	4b30      	ldr	r3, [pc, #192]	@ (800bd44 <recv_udp+0xe8>)
 800bc84:	22e6      	movs	r2, #230	@ 0xe6
 800bc86:	4932      	ldr	r1, [pc, #200]	@ (800bd50 <recv_udp+0xf4>)
 800bc88:	4830      	ldr	r0, [pc, #192]	@ (800bd4c <recv_udp+0xf0>)
 800bc8a:	f00d fa1b 	bl	80190c4 <iprintf>
  conn = (struct netconn *)arg;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d103      	bne.n	800bca0 <recv_udp+0x44>
    pbuf_free(p);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f003 f8c9 	bl	800ee30 <pbuf_free>
    return;
 800bc9e:	e04d      	b.n	800bd3c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d005      	beq.n	800bcb6 <recv_udp+0x5a>
 800bcaa:	4b26      	ldr	r3, [pc, #152]	@ (800bd44 <recv_udp+0xe8>)
 800bcac:	22ee      	movs	r2, #238	@ 0xee
 800bcae:	4929      	ldr	r1, [pc, #164]	@ (800bd54 <recv_udp+0xf8>)
 800bcb0:	4826      	ldr	r0, [pc, #152]	@ (800bd4c <recv_udp+0xf0>)
 800bcb2:	f00d fa07 	bl	80190c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	3310      	adds	r3, #16
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f00c fba2 	bl	8018404 <sys_mbox_valid>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d103      	bne.n	800bcce <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f003 f8b2 	bl	800ee30 <pbuf_free>
    return;
 800bccc:	e036      	b.n	800bd3c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bcce:	2006      	movs	r0, #6
 800bcd0:	f002 f9b8 	bl	800e044 <memp_malloc>
 800bcd4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <recv_udp+0x88>
    pbuf_free(p);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f003 f8a7 	bl	800ee30 <pbuf_free>
    return;
 800bce2:	e02b      	b.n	800bd3c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <recv_udp+0xa0>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	e000      	b.n	800bcfe <recv_udp+0xa2>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	69ba      	ldr	r2, [r7, #24]
 800bd00:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bd06:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	891b      	ldrh	r3, [r3, #8]
 800bd0c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	3310      	adds	r3, #16
 800bd12:	69b9      	ldr	r1, [r7, #24]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f00c fb13 	bl	8018340 <sys_mbox_trypost>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <recv_udp+0xcc>
    netbuf_delete(buf);
 800bd20:	69b8      	ldr	r0, [r7, #24]
 800bd22:	f001 fb01 	bl	800d328 <netbuf_delete>
    return;
 800bd26:	e009      	b.n	800bd3c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <recv_udp+0xe0>
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd34:	8afa      	ldrh	r2, [r7, #22]
 800bd36:	2100      	movs	r1, #0
 800bd38:	69f8      	ldr	r0, [r7, #28]
 800bd3a:	4798      	blx	r3
  }
}
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	0801bb18 	.word	0x0801bb18
 800bd48:	0801bb90 	.word	0x0801bb90
 800bd4c:	0801bb5c 	.word	0x0801bb5c
 800bd50:	0801bbb4 	.word	0x0801bbb4
 800bd54:	0801bbd4 	.word	0x0801bbd4

0800bd58 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d106      	bne.n	800bd7a <recv_tcp+0x22>
 800bd6c:	4b36      	ldr	r3, [pc, #216]	@ (800be48 <recv_tcp+0xf0>)
 800bd6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bd72:	4936      	ldr	r1, [pc, #216]	@ (800be4c <recv_tcp+0xf4>)
 800bd74:	4836      	ldr	r0, [pc, #216]	@ (800be50 <recv_tcp+0xf8>)
 800bd76:	f00d f9a5 	bl	80190c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d106      	bne.n	800bd8e <recv_tcp+0x36>
 800bd80:	4b31      	ldr	r3, [pc, #196]	@ (800be48 <recv_tcp+0xf0>)
 800bd82:	f240 122d 	movw	r2, #301	@ 0x12d
 800bd86:	4933      	ldr	r1, [pc, #204]	@ (800be54 <recv_tcp+0xfc>)
 800bd88:	4831      	ldr	r0, [pc, #196]	@ (800be50 <recv_tcp+0xf8>)
 800bd8a:	f00d f99b 	bl	80190c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800bd8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d006      	beq.n	800bda4 <recv_tcp+0x4c>
 800bd96:	4b2c      	ldr	r3, [pc, #176]	@ (800be48 <recv_tcp+0xf0>)
 800bd98:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800bd9c:	492e      	ldr	r1, [pc, #184]	@ (800be58 <recv_tcp+0x100>)
 800bd9e:	482c      	ldr	r0, [pc, #176]	@ (800be50 <recv_tcp+0xf8>)
 800bda0:	f00d f990 	bl	80190c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d102      	bne.n	800bdb4 <recv_tcp+0x5c>
    return ERR_VAL;
 800bdae:	f06f 0305 	mvn.w	r3, #5
 800bdb2:	e045      	b.n	800be40 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d006      	beq.n	800bdcc <recv_tcp+0x74>
 800bdbe:	4b22      	ldr	r3, [pc, #136]	@ (800be48 <recv_tcp+0xf0>)
 800bdc0:	f240 1235 	movw	r2, #309	@ 0x135
 800bdc4:	4925      	ldr	r1, [pc, #148]	@ (800be5c <recv_tcp+0x104>)
 800bdc6:	4822      	ldr	r0, [pc, #136]	@ (800be50 <recv_tcp+0xf8>)
 800bdc8:	f00d f97c 	bl	80190c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	3310      	adds	r3, #16
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f00c fb17 	bl	8018404 <sys_mbox_valid>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10d      	bne.n	800bdf8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d008      	beq.n	800bdf4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	891b      	ldrh	r3, [r3, #8]
 800bde6:	4619      	mov	r1, r3
 800bde8:	68b8      	ldr	r0, [r7, #8]
 800bdea:	f003 ffd9 	bl	800fda0 <tcp_recved>
      pbuf_free(p);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f003 f81e 	bl	800ee30 <pbuf_free>
    }
    return ERR_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e023      	b.n	800be40 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <recv_tcp+0xb2>
    msg = p;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	891b      	ldrh	r3, [r3, #8]
 800be06:	83fb      	strh	r3, [r7, #30]
 800be08:	e003      	b.n	800be12 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800be0a:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <recv_tcp+0x108>)
 800be0c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3310      	adds	r3, #16
 800be16:	69b9      	ldr	r1, [r7, #24]
 800be18:	4618      	mov	r0, r3
 800be1a:	f00c fa91 	bl	8018340 <sys_mbox_trypost>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800be24:	f04f 33ff 	mov.w	r3, #4294967295
 800be28:	e00a      	b.n	800be40 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d005      	beq.n	800be3e <recv_tcp+0xe6>
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be36:	8bfa      	ldrh	r2, [r7, #30]
 800be38:	2100      	movs	r1, #0
 800be3a:	6978      	ldr	r0, [r7, #20]
 800be3c:	4798      	blx	r3
  }

  return ERR_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	0801bb18 	.word	0x0801bb18
 800be4c:	0801bbf4 	.word	0x0801bbf4
 800be50:	0801bb5c 	.word	0x0801bb5c
 800be54:	0801bc18 	.word	0x0801bc18
 800be58:	0801bc38 	.word	0x0801bc38
 800be5c:	0801bc50 	.word	0x0801bc50
 800be60:	0801eb36 	.word	0x0801eb36

0800be64 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <poll_tcp+0x22>
 800be78:	4b29      	ldr	r3, [pc, #164]	@ (800bf20 <poll_tcp+0xbc>)
 800be7a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800be7e:	4929      	ldr	r1, [pc, #164]	@ (800bf24 <poll_tcp+0xc0>)
 800be80:	4829      	ldr	r0, [pc, #164]	@ (800bf28 <poll_tcp+0xc4>)
 800be82:	f00d f91f 	bl	80190c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d104      	bne.n	800be98 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800be8e:	2101      	movs	r1, #1
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 ff65 	bl	800cd60 <lwip_netconn_do_writemore>
 800be96:	e016      	b.n	800bec6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	785b      	ldrb	r3, [r3, #1]
 800be9c:	2b04      	cmp	r3, #4
 800be9e:	d112      	bne.n	800bec6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <poll_tcp+0x5a>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	7a5b      	ldrb	r3, [r3, #9]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d005      	beq.n	800bebe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	7a5a      	ldrb	r2, [r3, #9]
 800beb8:	3a01      	subs	r2, #1
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bebe:	2101      	movs	r1, #1
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 fbf7 	bl	800c6b4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	7f1b      	ldrb	r3, [r3, #28]
 800beca:	f003 0310 	and.w	r3, r3, #16
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d021      	beq.n	800bf16 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d01d      	beq.n	800bf16 <poll_tcp+0xb2>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bee2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800bee6:	d316      	bcc.n	800bf16 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d810      	bhi.n	800bf16 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	7f1b      	ldrb	r3, [r3, #28]
 800bef8:	f023 0310 	bic.w	r3, r3, #16
 800befc:	b2da      	uxtb	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <poll_tcp+0xb2>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2102      	movs	r1, #2
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801bb18 	.word	0x0801bb18
 800bf24:	0801bc70 	.word	0x0801bc70
 800bf28:	0801bb5c 	.word	0x0801bb5c

0800bf2c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <sent_tcp+0x26>
 800bf44:	4b20      	ldr	r3, [pc, #128]	@ (800bfc8 <sent_tcp+0x9c>)
 800bf46:	f240 1293 	movw	r2, #403	@ 0x193
 800bf4a:	4920      	ldr	r1, [pc, #128]	@ (800bfcc <sent_tcp+0xa0>)
 800bf4c:	4820      	ldr	r0, [pc, #128]	@ (800bfd0 <sent_tcp+0xa4>)
 800bf4e:	f00d f8b9 	bl	80190c4 <iprintf>

  if (conn) {
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d032      	beq.n	800bfbe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	785b      	ldrb	r3, [r3, #1]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d104      	bne.n	800bf6a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bf60:	2101      	movs	r1, #1
 800bf62:	6978      	ldr	r0, [r7, #20]
 800bf64:	f000 fefc 	bl	800cd60 <lwip_netconn_do_writemore>
 800bf68:	e007      	b.n	800bf7a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d103      	bne.n	800bf7a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bf72:	2101      	movs	r1, #1
 800bf74:	6978      	ldr	r0, [r7, #20]
 800bf76:	f000 fb9d 	bl	800c6b4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d01d      	beq.n	800bfbe <sent_tcp+0x92>
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf8a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800bf8e:	d316      	bcc.n	800bfbe <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	d810      	bhi.n	800bfbe <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	7f1b      	ldrb	r3, [r3, #28]
 800bfa0:	f023 0310 	bic.w	r3, r3, #16
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <sent_tcp+0x92>
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	2102      	movs	r1, #2
 800bfba:	6978      	ldr	r0, [r7, #20]
 800bfbc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0801bb18 	.word	0x0801bb18
 800bfcc:	0801bc70 	.word	0x0801bc70
 800bfd0:	0801bb5c 	.word	0x0801bb5c

0800bfd4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	460b      	mov	r3, r1
 800bfde:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <err_tcp+0x24>
 800bfea:	4b5f      	ldr	r3, [pc, #380]	@ (800c168 <err_tcp+0x194>)
 800bfec:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800bff0:	495e      	ldr	r1, [pc, #376]	@ (800c16c <err_tcp+0x198>)
 800bff2:	485f      	ldr	r0, [pc, #380]	@ (800c170 <err_tcp+0x19c>)
 800bff4:	f00d f866 	bl	80190c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bff8:	f00c fb0e 	bl	8018618 <sys_arch_protect>
 800bffc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2200      	movs	r2, #0
 800c002:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	78fa      	ldrb	r2, [r7, #3]
 800c008:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	7f1b      	ldrb	r3, [r3, #28]
 800c00e:	f043 0301 	orr.w	r3, r3, #1
 800c012:	b2da      	uxtb	r2, r3
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	2200      	movs	r2, #0
 800c022:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c024:	69b8      	ldr	r0, [r7, #24]
 800c026:	f00c fb05 	bl	8018634 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d005      	beq.n	800c03e <err_tcp+0x6a>
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c036:	2200      	movs	r2, #0
 800c038:	2104      	movs	r1, #4
 800c03a:	69f8      	ldr	r0, [r7, #28]
 800c03c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c042:	2b00      	cmp	r3, #0
 800c044:	d005      	beq.n	800c052 <err_tcp+0x7e>
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c04a:	2200      	movs	r2, #0
 800c04c:	2100      	movs	r1, #0
 800c04e:	69f8      	ldr	r0, [r7, #28]
 800c050:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c056:	2b00      	cmp	r3, #0
 800c058:	d005      	beq.n	800c066 <err_tcp+0x92>
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c05e:	2200      	movs	r2, #0
 800c060:	2102      	movs	r1, #2
 800c062:	69f8      	ldr	r0, [r7, #28]
 800c064:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fd86 	bl	800bb7c <lwip_netconn_err_to_msg>
 800c070:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	3310      	adds	r3, #16
 800c076:	4618      	mov	r0, r3
 800c078:	f00c f9c4 	bl	8018404 <sys_mbox_valid>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d005      	beq.n	800c08e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	3310      	adds	r3, #16
 800c086:	6939      	ldr	r1, [r7, #16]
 800c088:	4618      	mov	r0, r3
 800c08a:	f00c f959 	bl	8018340 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	3314      	adds	r3, #20
 800c092:	4618      	mov	r0, r3
 800c094:	f00c f9b6 	bl	8018404 <sys_mbox_valid>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d005      	beq.n	800c0aa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	3314      	adds	r3, #20
 800c0a2:	6939      	ldr	r1, [r7, #16]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f00c f94b 	bl	8018340 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d005      	beq.n	800c0bc <err_tcp+0xe8>
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d002      	beq.n	800c0bc <err_tcp+0xe8>
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d143      	bne.n	800c144 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	7f1b      	ldrb	r3, [r3, #28]
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bf14      	ite	ne
 800c0c8:	2301      	movne	r3, #1
 800c0ca:	2300      	moveq	r3, #0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	7f1b      	ldrb	r3, [r3, #28]
 800c0d4:	f023 0304 	bic.w	r3, r3, #4
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d13b      	bne.n	800c15c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d106      	bne.n	800c0fa <err_tcp+0x126>
 800c0ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c168 <err_tcp+0x194>)
 800c0ee:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c0f2:	4920      	ldr	r1, [pc, #128]	@ (800c174 <err_tcp+0x1a0>)
 800c0f4:	481e      	ldr	r0, [pc, #120]	@ (800c170 <err_tcp+0x19c>)
 800c0f6:	f00c ffe5 	bl	80190c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d104      	bne.n	800c10a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	2200      	movs	r2, #0
 800c106:	711a      	strb	r2, [r3, #4]
 800c108:	e003      	b.n	800c112 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	78fa      	ldrb	r2, [r7, #3]
 800c110:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	330c      	adds	r3, #12
 800c11a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c11c:	68b8      	ldr	r0, [r7, #8]
 800c11e:	f00c f9ff 	bl	8018520 <sys_sem_valid>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <err_tcp+0x162>
 800c128:	4b0f      	ldr	r3, [pc, #60]	@ (800c168 <err_tcp+0x194>)
 800c12a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c12e:	4912      	ldr	r1, [pc, #72]	@ (800c178 <err_tcp+0x1a4>)
 800c130:	480f      	ldr	r0, [pc, #60]	@ (800c170 <err_tcp+0x19c>)
 800c132:	f00c ffc7 	bl	80190c4 <iprintf>
      conn->current_msg = NULL;
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	2200      	movs	r2, #0
 800c13a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c13c:	68b8      	ldr	r0, [r7, #8]
 800c13e:	f00c f9d5 	bl	80184ec <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c142:	e00b      	b.n	800c15c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d008      	beq.n	800c15e <err_tcp+0x18a>
 800c14c:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <err_tcp+0x194>)
 800c14e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c152:	490a      	ldr	r1, [pc, #40]	@ (800c17c <err_tcp+0x1a8>)
 800c154:	4806      	ldr	r0, [pc, #24]	@ (800c170 <err_tcp+0x19c>)
 800c156:	f00c ffb5 	bl	80190c4 <iprintf>
  }
}
 800c15a:	e000      	b.n	800c15e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c15c:	bf00      	nop
}
 800c15e:	bf00      	nop
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	0801bb18 	.word	0x0801bb18
 800c16c:	0801bc70 	.word	0x0801bc70
 800c170:	0801bb5c 	.word	0x0801bb5c
 800c174:	0801bc80 	.word	0x0801bc80
 800c178:	0801bc9c 	.word	0x0801bc9c
 800c17c:	0801bcb8 	.word	0x0801bcb8

0800c180 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f004 fccd 	bl	8010b30 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c196:	490a      	ldr	r1, [pc, #40]	@ (800c1c0 <setup_tcp+0x40>)
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f004 fcdb 	bl	8010b54 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c19e:	4909      	ldr	r1, [pc, #36]	@ (800c1c4 <setup_tcp+0x44>)
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f004 fcf9 	bl	8010b98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	4907      	ldr	r1, [pc, #28]	@ (800c1c8 <setup_tcp+0x48>)
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f004 fd50 	bl	8010c50 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c1b0:	4906      	ldr	r1, [pc, #24]	@ (800c1cc <setup_tcp+0x4c>)
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f004 fd12 	bl	8010bdc <tcp_err>
}
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0800bd59 	.word	0x0800bd59
 800c1c4:	0800bf2d 	.word	0x0800bf2d
 800c1c8:	0800be65 	.word	0x0800be65
 800c1cc:	0800bfd5 	.word	0x0800bfd5

0800c1d0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800c1d0:	b590      	push	{r4, r7, lr}
 800c1d2:	b089      	sub	sp, #36	@ 0x24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <accept_function+0x1e>
    return ERR_VAL;
 800c1e8:	f06f 0305 	mvn.w	r3, #5
 800c1ec:	e0a1      	b.n	800c332 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	3314      	adds	r3, #20
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f00c f906 	bl	8018404 <sys_mbox_valid>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800c1fe:	f06f 0305 	mvn.w	r3, #5
 800c202:	e096      	b.n	800c332 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d11b      	bne.n	800c242 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	f103 0414 	add.w	r4, r3, #20
 800c210:	f06f 000c 	mvn.w	r0, #12
 800c214:	f7ff fcb2 	bl	800bb7c <lwip_netconn_err_to_msg>
 800c218:	4603      	mov	r3, r0
 800c21a:	4619      	mov	r1, r3
 800c21c:	4620      	mov	r0, r4
 800c21e:	f00c f88f 	bl	8018340 <sys_mbox_trypost>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d109      	bne.n	800c23c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <accept_function+0x6c>
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	69f8      	ldr	r0, [r7, #28]
 800c23a:	4798      	blx	r3
    }
    return ERR_VAL;
 800c23c:	f06f 0305 	mvn.w	r3, #5
 800c240:	e077      	b.n	800c332 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800c242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <accept_function+0x88>
 800c24a:	4b3c      	ldr	r3, [pc, #240]	@ (800c33c <accept_function+0x16c>)
 800c24c:	f240 222a 	movw	r2, #554	@ 0x22a
 800c250:	493b      	ldr	r1, [pc, #236]	@ (800c340 <accept_function+0x170>)
 800c252:	483c      	ldr	r0, [pc, #240]	@ (800c344 <accept_function+0x174>)
 800c254:	f00c ff36 	bl	80190c4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	781a      	ldrb	r2, [r3, #0]
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f000 f8f0 	bl	800c448 <netconn_alloc>
 800c268:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d11b      	bne.n	800c2a8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f103 0414 	add.w	r4, r3, #20
 800c276:	f06f 000c 	mvn.w	r0, #12
 800c27a:	f7ff fc7f 	bl	800bb7c <lwip_netconn_err_to_msg>
 800c27e:	4603      	mov	r3, r0
 800c280:	4619      	mov	r1, r3
 800c282:	4620      	mov	r0, r4
 800c284:	f00c f85c 	bl	8018340 <sys_mbox_trypost>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d005      	beq.n	800c2a2 <accept_function+0xd2>
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29a:	2200      	movs	r2, #0
 800c29c:	2100      	movs	r1, #0
 800c29e:	69f8      	ldr	r0, [r7, #28]
 800c2a0:	4798      	blx	r3
    }
    return ERR_MEM;
 800c2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a6:	e044      	b.n	800c332 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800c2ae:	69b8      	ldr	r0, [r7, #24]
 800c2b0:	f7ff ff66 	bl	800c180 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	3314      	adds	r3, #20
 800c2b8:	69b9      	ldr	r1, [r7, #24]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f00c f840 	bl	8018340 <sys_mbox_trypost>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d02a      	beq.n	800c31c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f004 fc2e 	bl	8010b30 <tcp_arg>
    tcp_recv(pcb, NULL);
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	6978      	ldr	r0, [r7, #20]
 800c2d8:	f004 fc3c 	bl	8010b54 <tcp_recv>
    tcp_sent(pcb, NULL);
 800c2dc:	2100      	movs	r1, #0
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	f004 fc5a 	bl	8010b98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	6978      	ldr	r0, [r7, #20]
 800c2ea:	f004 fcb1 	bl	8010c50 <tcp_poll>
    tcp_err(pcb, NULL);
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	6978      	ldr	r0, [r7, #20]
 800c2f2:	f004 fc73 	bl	8010bdc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	3310      	adds	r3, #16
 800c300:	4618      	mov	r0, r3
 800c302:	f00c f80b 	bl	801831c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	3310      	adds	r3, #16
 800c30a:	4618      	mov	r0, r3
 800c30c:	f00c f88b 	bl	8018426 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800c310:	69b8      	ldr	r0, [r7, #24]
 800c312:	f000 f907 	bl	800c524 <netconn_free>
    return ERR_MEM;
 800c316:	f04f 33ff 	mov.w	r3, #4294967295
 800c31a:	e00a      	b.n	800c332 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	d005      	beq.n	800c330 <accept_function+0x160>
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c328:	2200      	movs	r2, #0
 800c32a:	2100      	movs	r1, #0
 800c32c:	69f8      	ldr	r0, [r7, #28]
 800c32e:	4798      	blx	r3
  }

  return ERR_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3724      	adds	r7, #36	@ 0x24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd90      	pop	{r4, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0801bb18 	.word	0x0801bb18
 800c340:	0801bcd4 	.word	0x0801bcd4
 800c344:	0801bb5c 	.word	0x0801bb5c

0800c348 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800c348:	b590      	push	{r4, r7, lr}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d006      	beq.n	800c36c <pcb_new+0x24>
 800c35e:	4b2b      	ldr	r3, [pc, #172]	@ (800c40c <pcb_new+0xc4>)
 800c360:	f240 2265 	movw	r2, #613	@ 0x265
 800c364:	492a      	ldr	r1, [pc, #168]	@ (800c410 <pcb_new+0xc8>)
 800c366:	482b      	ldr	r0, [pc, #172]	@ (800c414 <pcb_new+0xcc>)
 800c368:	f00c feac 	bl	80190c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c376:	2b10      	cmp	r3, #16
 800c378:	d022      	beq.n	800c3c0 <pcb_new+0x78>
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	d133      	bne.n	800c3e6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681c      	ldr	r4, [r3, #0]
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	4618      	mov	r0, r3
 800c386:	f009 fcac 	bl	8015ce2 <udp_new_ip_type>
 800c38a:	4603      	mov	r3, r0
 800c38c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d02a      	beq.n	800c3ee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b22      	cmp	r3, #34	@ 0x22
 800c3a0:	d104      	bne.n	800c3ac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6858      	ldr	r0, [r3, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	4917      	ldr	r1, [pc, #92]	@ (800c418 <pcb_new+0xd0>)
 800c3ba:	f009 fc19 	bl	8015bf0 <udp_recv>
      }
      break;
 800c3be:	e016      	b.n	800c3ee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681c      	ldr	r4, [r3, #0]
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f004 fba4 	bl	8010b14 <tcp_new_ip_type>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00b      	beq.n	800c3f2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fece 	bl	800c180 <setup_tcp>
      }
      break;
 800c3e4:	e005      	b.n	800c3f2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	22fa      	movs	r2, #250	@ 0xfa
 800c3ea:	711a      	strb	r2, [r3, #4]
      return;
 800c3ec:	e00a      	b.n	800c404 <pcb_new+0xbc>
      break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <pcb_new+0xac>
      break;
 800c3f2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	22ff      	movs	r2, #255	@ 0xff
 800c402:	711a      	strb	r2, [r3, #4]
  }
}
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	0801bb18 	.word	0x0801bb18
 800c410:	0801bcfc 	.word	0x0801bcfc
 800c414:	0801bb5c 	.word	0x0801bb5c
 800c418:	0800bc5d 	.word	0x0800bc5d

0800c41c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d102      	bne.n	800c43e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f7ff ff85 	bl	800c348 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800c43e:	bf00      	nop
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	6039      	str	r1, [r7, #0]
 800c452:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c458:	2007      	movs	r0, #7
 800c45a:	f001 fdf3 	bl	800e044 <memp_malloc>
 800c45e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <netconn_alloc+0x22>
    return NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	e052      	b.n	800c510 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	79fa      	ldrb	r2, [r7, #7]
 800c474:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c482:	2b10      	cmp	r3, #16
 800c484:	d004      	beq.n	800c490 <netconn_alloc+0x48>
 800c486:	2b20      	cmp	r3, #32
 800c488:	d105      	bne.n	800c496 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800c48a:	2306      	movs	r3, #6
 800c48c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c48e:	e00a      	b.n	800c4a6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800c490:	2306      	movs	r3, #6
 800c492:	617b      	str	r3, [r7, #20]
      break;
 800c494:	e007      	b.n	800c4a6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c496:	4b20      	ldr	r3, [pc, #128]	@ (800c518 <netconn_alloc+0xd0>)
 800c498:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800c49c:	491f      	ldr	r1, [pc, #124]	@ (800c51c <netconn_alloc+0xd4>)
 800c49e:	4820      	ldr	r0, [pc, #128]	@ (800c520 <netconn_alloc+0xd8>)
 800c4a0:	f00c fe10 	bl	80190c4 <iprintf>
      goto free_and_return;
 800c4a4:	e02f      	b.n	800c506 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3310      	adds	r3, #16
 800c4aa:	6979      	ldr	r1, [r7, #20]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f00b ff1b 	bl	80182e8 <sys_mbox_new>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d125      	bne.n	800c504 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	330c      	adds	r3, #12
 800c4bc:	2100      	movs	r1, #0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f00b ffbe 	bl	8018440 <sys_sem_new>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3310      	adds	r3, #16
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f00b ff24 	bl	801831c <sys_mbox_free>
    goto free_and_return;
 800c4d4:	e017      	b.n	800c506 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3314      	adds	r3, #20
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f00b ffa3 	bl	8018426 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	7cfa      	ldrb	r2, [r7, #19]
 800c4fe:	771a      	strb	r2, [r3, #28]
  return conn;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	e005      	b.n	800c510 <netconn_alloc+0xc8>
    goto free_and_return;
 800c504:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	2007      	movs	r0, #7
 800c50a:	f001 fded 	bl	800e0e8 <memp_free>
  return NULL;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	0801bb18 	.word	0x0801bb18
 800c51c:	0801bd1c 	.word	0x0801bd1c
 800c520:	0801bb5c 	.word	0x0801bb5c

0800c524 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <netconn_free+0x1e>
 800c534:	4b1b      	ldr	r3, [pc, #108]	@ (800c5a4 <netconn_free+0x80>)
 800c536:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c53a:	491b      	ldr	r1, [pc, #108]	@ (800c5a8 <netconn_free+0x84>)
 800c53c:	481b      	ldr	r0, [pc, #108]	@ (800c5ac <netconn_free+0x88>)
 800c53e:	f00c fdc1 	bl	80190c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3310      	adds	r3, #16
 800c546:	4618      	mov	r0, r3
 800c548:	f00b ff5c 	bl	8018404 <sys_mbox_valid>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d006      	beq.n	800c560 <netconn_free+0x3c>
 800c552:	4b14      	ldr	r3, [pc, #80]	@ (800c5a4 <netconn_free+0x80>)
 800c554:	f240 3223 	movw	r2, #803	@ 0x323
 800c558:	4915      	ldr	r1, [pc, #84]	@ (800c5b0 <netconn_free+0x8c>)
 800c55a:	4814      	ldr	r0, [pc, #80]	@ (800c5ac <netconn_free+0x88>)
 800c55c:	f00c fdb2 	bl	80190c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3314      	adds	r3, #20
 800c564:	4618      	mov	r0, r3
 800c566:	f00b ff4d 	bl	8018404 <sys_mbox_valid>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <netconn_free+0x5a>
 800c570:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a4 <netconn_free+0x80>)
 800c572:	f240 3226 	movw	r2, #806	@ 0x326
 800c576:	490f      	ldr	r1, [pc, #60]	@ (800c5b4 <netconn_free+0x90>)
 800c578:	480c      	ldr	r0, [pc, #48]	@ (800c5ac <netconn_free+0x88>)
 800c57a:	f00c fda3 	bl	80190c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	330c      	adds	r3, #12
 800c582:	4618      	mov	r0, r3
 800c584:	f00b ffbf 	bl	8018506 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	330c      	adds	r3, #12
 800c58c:	4618      	mov	r0, r3
 800c58e:	f00b ffd8 	bl	8018542 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	2007      	movs	r0, #7
 800c596:	f001 fda7 	bl	800e0e8 <memp_free>
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0801bb18 	.word	0x0801bb18
 800c5a8:	0801bd44 	.word	0x0801bd44
 800c5ac:	0801bb5c 	.word	0x0801bb5c
 800c5b0:	0801bd74 	.word	0x0801bd74
 800c5b4:	0801bdb0 	.word	0x0801bdb0

0800c5b8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3310      	adds	r3, #16
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f00b ff1d 	bl	8018404 <sys_mbox_valid>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d02f      	beq.n	800c630 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c5d0:	e018      	b.n	800c604 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5da:	2b10      	cmp	r3, #16
 800c5dc:	d10e      	bne.n	800c5fc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f107 020f 	add.w	r2, r7, #15
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff fafe 	bl	800bbe8 <lwip_netconn_is_err_msg>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d108      	bne.n	800c604 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f002 fc1b 	bl	800ee30 <pbuf_free>
 800c5fa:	e003      	b.n	800c604 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fe92 	bl	800d328 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3310      	adds	r3, #16
 800c608:	f107 0210 	add.w	r2, r7, #16
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f00b fee1 	bl	80183d6 <sys_arch_mbox_tryfetch>
 800c614:	4603      	mov	r3, r0
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d1da      	bne.n	800c5d2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3310      	adds	r3, #16
 800c620:	4618      	mov	r0, r3
 800c622:	f00b fe7b 	bl	801831c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3310      	adds	r3, #16
 800c62a:	4618      	mov	r0, r3
 800c62c:	f00b fefb 	bl	8018426 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3314      	adds	r3, #20
 800c634:	4618      	mov	r0, r3
 800c636:	f00b fee5 	bl	8018404 <sys_mbox_valid>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d034      	beq.n	800c6aa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c640:	e01d      	b.n	800c67e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f107 020e 	add.w	r2, r7, #14
 800c648:	4611      	mov	r1, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7ff facc 	bl	800bbe8 <lwip_netconn_is_err_msg>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d113      	bne.n	800c67e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c65a:	6978      	ldr	r0, [r7, #20]
 800c65c:	f7ff ffac 	bl	800c5b8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d007      	beq.n	800c678 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f003 f9cf 	bl	800fa10 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2200      	movs	r2, #0
 800c676:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c678:	6978      	ldr	r0, [r7, #20]
 800c67a:	f7ff ff53 	bl	800c524 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3314      	adds	r3, #20
 800c682:	f107 0210 	add.w	r2, r7, #16
 800c686:	4611      	mov	r1, r2
 800c688:	4618      	mov	r0, r3
 800c68a:	f00b fea4 	bl	80183d6 <sys_arch_mbox_tryfetch>
 800c68e:	4603      	mov	r3, r0
 800c690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c694:	d1d5      	bne.n	800c642 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3314      	adds	r3, #20
 800c69a:	4618      	mov	r0, r3
 800c69c:	f00b fe3e 	bl	801831c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3314      	adds	r3, #20
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f00b febe 	bl	8018426 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c6aa:	bf00      	nop
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d106      	bne.n	800c6d8 <lwip_netconn_do_close_internal+0x24>
 800c6ca:	4b87      	ldr	r3, [pc, #540]	@ (800c8e8 <lwip_netconn_do_close_internal+0x234>)
 800c6cc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800c6d0:	4986      	ldr	r1, [pc, #536]	@ (800c8ec <lwip_netconn_do_close_internal+0x238>)
 800c6d2:	4887      	ldr	r0, [pc, #540]	@ (800c8f0 <lwip_netconn_do_close_internal+0x23c>)
 800c6d4:	f00c fcf6 	bl	80190c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6e0:	2b10      	cmp	r3, #16
 800c6e2:	d006      	beq.n	800c6f2 <lwip_netconn_do_close_internal+0x3e>
 800c6e4:	4b80      	ldr	r3, [pc, #512]	@ (800c8e8 <lwip_netconn_do_close_internal+0x234>)
 800c6e6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800c6ea:	4982      	ldr	r1, [pc, #520]	@ (800c8f4 <lwip_netconn_do_close_internal+0x240>)
 800c6ec:	4880      	ldr	r0, [pc, #512]	@ (800c8f0 <lwip_netconn_do_close_internal+0x23c>)
 800c6ee:	f00c fce9 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	785b      	ldrb	r3, [r3, #1]
 800c6f6:	2b04      	cmp	r3, #4
 800c6f8:	d006      	beq.n	800c708 <lwip_netconn_do_close_internal+0x54>
 800c6fa:	4b7b      	ldr	r3, [pc, #492]	@ (800c8e8 <lwip_netconn_do_close_internal+0x234>)
 800c6fc:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800c700:	497d      	ldr	r1, [pc, #500]	@ (800c8f8 <lwip_netconn_do_close_internal+0x244>)
 800c702:	487b      	ldr	r0, [pc, #492]	@ (800c8f0 <lwip_netconn_do_close_internal+0x23c>)
 800c704:	f00c fcde 	bl	80190c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d106      	bne.n	800c71e <lwip_netconn_do_close_internal+0x6a>
 800c710:	4b75      	ldr	r3, [pc, #468]	@ (800c8e8 <lwip_netconn_do_close_internal+0x234>)
 800c712:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800c716:	4979      	ldr	r1, [pc, #484]	@ (800c8fc <lwip_netconn_do_close_internal+0x248>)
 800c718:	4875      	ldr	r0, [pc, #468]	@ (800c8f0 <lwip_netconn_do_close_internal+0x23c>)
 800c71a:	f00c fcd3 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <lwip_netconn_do_close_internal+0x80>
 800c726:	4b70      	ldr	r3, [pc, #448]	@ (800c8e8 <lwip_netconn_do_close_internal+0x234>)
 800c728:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c72c:	4974      	ldr	r1, [pc, #464]	@ (800c900 <lwip_netconn_do_close_internal+0x24c>)
 800c72e:	4870      	ldr	r0, [pc, #448]	@ (800c8f0 <lwip_netconn_do_close_internal+0x23c>)
 800c730:	f00c fcc8 	bl	80190c4 <iprintf>

  tpcb = conn->pcb.tcp;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	7a1b      	ldrb	r3, [r3, #8]
 800c740:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c752:	7bfb      	ldrb	r3, [r7, #15]
 800c754:	2b03      	cmp	r3, #3
 800c756:	d102      	bne.n	800c75e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c758:	2301      	movs	r3, #1
 800c75a:	75bb      	strb	r3, [r7, #22]
 800c75c:	e01f      	b.n	800c79e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00e      	beq.n	800c782 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c768:	2b05      	cmp	r3, #5
 800c76a:	d007      	beq.n	800c77c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c770:	2b06      	cmp	r3, #6
 800c772:	d003      	beq.n	800c77c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d102      	bne.n	800c782 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c77c:	2301      	movs	r3, #1
 800c77e:	75bb      	strb	r3, [r7, #22]
 800c780:	e00d      	b.n	800c79e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c782:	7b7b      	ldrb	r3, [r7, #13]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <lwip_netconn_do_close_internal+0xe6>
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	8b5b      	ldrh	r3, [r3, #26]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c794:	2301      	movs	r3, #1
 800c796:	75bb      	strb	r3, [r7, #22]
 800c798:	e001      	b.n	800c79e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c79e:	7dbb      	ldrb	r3, [r7, #22]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d003      	beq.n	800c7ac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f004 f9c2 	bl	8010b30 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	7d1b      	ldrb	r3, [r3, #20]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d104      	bne.n	800c7be <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	6938      	ldr	r0, [r7, #16]
 800c7b8:	f004 fa32 	bl	8010c20 <tcp_accept>
 800c7bc:	e01d      	b.n	800c7fa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c7be:	7bbb      	ldrb	r3, [r7, #14]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	6938      	ldr	r0, [r7, #16]
 800c7c8:	f004 f9c4 	bl	8010b54 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6938      	ldr	r0, [r7, #16]
 800c7d0:	f004 fa26 	bl	8010c20 <tcp_accept>
    }
    if (shut_tx) {
 800c7d4:	7b7b      	ldrb	r3, [r7, #13]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6938      	ldr	r0, [r7, #16]
 800c7de:	f004 f9db 	bl	8010b98 <tcp_sent>
    }
    if (shut_close) {
 800c7e2:	7dbb      	ldrb	r3, [r7, #22]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	6938      	ldr	r0, [r7, #16]
 800c7ee:	f004 fa2f 	bl	8010c50 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	6938      	ldr	r0, [r7, #16]
 800c7f6:	f004 f9f1 	bl	8010bdc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c7fa:	7dbb      	ldrb	r3, [r7, #22]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d005      	beq.n	800c80c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c800:	6938      	ldr	r0, [r7, #16]
 800c802:	f002 ffbf 	bl	800f784 <tcp_close>
 800c806:	4603      	mov	r3, r0
 800c808:	75fb      	strb	r3, [r7, #23]
 800c80a:	e007      	b.n	800c81c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
 800c80e:	7b7a      	ldrb	r2, [r7, #13]
 800c810:	4619      	mov	r1, r3
 800c812:	6938      	ldr	r0, [r7, #16]
 800c814:	f002 ffe2 	bl	800f7dc <tcp_shutdown>
 800c818:	4603      	mov	r3, r0
 800c81a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c824:	2301      	movs	r3, #1
 800c826:	757b      	strb	r3, [r7, #21]
 800c828:	e016      	b.n	800c858 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c82a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c832:	d10f      	bne.n	800c854 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	7a5b      	ldrb	r3, [r3, #9]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10c      	bne.n	800c858 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c842:	7dbb      	ldrb	r3, [r7, #22]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d007      	beq.n	800c858 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c848:	6938      	ldr	r0, [r7, #16]
 800c84a:	f003 f8e1 	bl	800fa10 <tcp_abort>
          err = ERR_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	75fb      	strb	r3, [r7, #23]
 800c852:	e001      	b.n	800c858 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c854:	2301      	movs	r3, #1
 800c856:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c858:	7d7b      	ldrb	r3, [r7, #21]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d052      	beq.n	800c904 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	330c      	adds	r3, #12
 800c866:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	7dfa      	ldrb	r2, [r7, #23]
 800c86e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d129      	bne.n	800c8d8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c884:	7dbb      	ldrb	r3, [r7, #22]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00c      	beq.n	800c8a4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <lwip_netconn_do_close_internal+0x1f0>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89c:	2200      	movs	r2, #0
 800c89e:	2104      	movs	r1, #4
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	4798      	blx	r3
      }
      if (shut_rx) {
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d005      	beq.n	800c8be <lwip_netconn_do_close_internal+0x20a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	4798      	blx	r3
      }
      if (shut_tx) {
 800c8be:	7b7b      	ldrb	r3, [r7, #13]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d009      	beq.n	800c8d8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <lwip_netconn_do_close_internal+0x224>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2102      	movs	r1, #2
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c8d8:	78fb      	ldrb	r3, [r7, #3]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d002      	beq.n	800c8e4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c8de:	68b8      	ldr	r0, [r7, #8]
 800c8e0:	f00b fe04 	bl	80184ec <sys_sem_signal>
    }
    return ERR_OK;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e03c      	b.n	800c962 <lwip_netconn_do_close_internal+0x2ae>
 800c8e8:	0801bb18 	.word	0x0801bb18
 800c8ec:	0801bdec 	.word	0x0801bdec
 800c8f0:	0801bb5c 	.word	0x0801bb5c
 800c8f4:	0801bdfc 	.word	0x0801bdfc
 800c8f8:	0801be1c 	.word	0x0801be1c
 800c8fc:	0801be40 	.word	0x0801be40
 800c900:	0801bc80 	.word	0x0801bc80
  }
  if (!close_finished) {
 800c904:	7d7b      	ldrb	r3, [r7, #21]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d11e      	bne.n	800c948 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	7d1b      	ldrb	r3, [r3, #20]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d106      	bne.n	800c920 <lwip_netconn_do_close_internal+0x26c>
 800c912:	4b16      	ldr	r3, [pc, #88]	@ (800c96c <lwip_netconn_do_close_internal+0x2b8>)
 800c914:	f240 4241 	movw	r2, #1089	@ 0x441
 800c918:	4915      	ldr	r1, [pc, #84]	@ (800c970 <lwip_netconn_do_close_internal+0x2bc>)
 800c91a:	4816      	ldr	r0, [pc, #88]	@ (800c974 <lwip_netconn_do_close_internal+0x2c0>)
 800c91c:	f00c fbd2 	bl	80190c4 <iprintf>
    if (shut_tx) {
 800c920:	7b7b      	ldrb	r3, [r7, #13]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d003      	beq.n	800c92e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800c926:	4914      	ldr	r1, [pc, #80]	@ (800c978 <lwip_netconn_do_close_internal+0x2c4>)
 800c928:	6938      	ldr	r0, [r7, #16]
 800c92a:	f004 f935 	bl	8010b98 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c92e:	2201      	movs	r2, #1
 800c930:	4912      	ldr	r1, [pc, #72]	@ (800c97c <lwip_netconn_do_close_internal+0x2c8>)
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f004 f98c 	bl	8010c50 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c938:	4911      	ldr	r1, [pc, #68]	@ (800c980 <lwip_netconn_do_close_internal+0x2cc>)
 800c93a:	6938      	ldr	r0, [r7, #16]
 800c93c:	f004 f94e 	bl	8010bdc <tcp_err>
    tcp_arg(tpcb, conn);
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	6938      	ldr	r0, [r7, #16]
 800c944:	f004 f8f4 	bl	8010b30 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d106      	bne.n	800c95e <lwip_netconn_do_close_internal+0x2aa>
 800c950:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <lwip_netconn_do_close_internal+0x2b8>)
 800c952:	f240 424d 	movw	r2, #1101	@ 0x44d
 800c956:	490b      	ldr	r1, [pc, #44]	@ (800c984 <lwip_netconn_do_close_internal+0x2d0>)
 800c958:	4806      	ldr	r0, [pc, #24]	@ (800c974 <lwip_netconn_do_close_internal+0x2c0>)
 800c95a:	f00c fbb3 	bl	80190c4 <iprintf>
  return err;
 800c95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	0801bb18 	.word	0x0801bb18
 800c970:	0801be54 	.word	0x0801be54
 800c974:	0801bb5c 	.word	0x0801bb5c
 800c978:	0800bf2d 	.word	0x0800bf2d
 800c97c:	0800be65 	.word	0x0800be65
 800c980:	0800bfd5 	.word	0x0800bfd5
 800c984:	0801be78 	.word	0x0801be78

0800c988 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	785b      	ldrb	r3, [r3, #1]
 800c99a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00d      	beq.n	800c9be <lwip_netconn_do_delconn+0x36>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d006      	beq.n	800c9be <lwip_netconn_do_delconn+0x36>
 800c9b0:	4b60      	ldr	r3, [pc, #384]	@ (800cb34 <lwip_netconn_do_delconn+0x1ac>)
 800c9b2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800c9b6:	4960      	ldr	r1, [pc, #384]	@ (800cb38 <lwip_netconn_do_delconn+0x1b0>)
 800c9b8:	4860      	ldr	r0, [pc, #384]	@ (800cb3c <lwip_netconn_do_delconn+0x1b4>)
 800c9ba:	f00c fb83 	bl	80190c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <lwip_netconn_do_delconn+0x48>
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d002      	beq.n	800c9d0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c9ca:	7afb      	ldrb	r3, [r7, #11]
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	d109      	bne.n	800c9e4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c9d0:	7afb      	ldrb	r3, [r7, #11]
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d10a      	bne.n	800c9ec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	7f1b      	ldrb	r3, [r3, #28]
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d103      	bne.n	800c9ec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	22fb      	movs	r2, #251	@ 0xfb
 800c9e8:	711a      	strb	r2, [r3, #4]
 800c9ea:	e097      	b.n	800cb1c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c9ec:	7afb      	ldrb	r3, [r7, #11]
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d10d      	bne.n	800ca0e <lwip_netconn_do_delconn+0x86>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	7f1b      	ldrb	r3, [r3, #28]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d106      	bne.n	800ca0e <lwip_netconn_do_delconn+0x86>
 800ca00:	4b4c      	ldr	r3, [pc, #304]	@ (800cb34 <lwip_netconn_do_delconn+0x1ac>)
 800ca02:	f240 427a 	movw	r2, #1146	@ 0x47a
 800ca06:	494e      	ldr	r1, [pc, #312]	@ (800cb40 <lwip_netconn_do_delconn+0x1b8>)
 800ca08:	484c      	ldr	r0, [pc, #304]	@ (800cb3c <lwip_netconn_do_delconn+0x1b4>)
 800ca0a:	f00c fb5b 	bl	80190c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff fdcd 	bl	800c5b8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d05f      	beq.n	800cae8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca32:	2b10      	cmp	r3, #16
 800ca34:	d00d      	beq.n	800ca52 <lwip_netconn_do_delconn+0xca>
 800ca36:	2b20      	cmp	r3, #32
 800ca38:	d151      	bne.n	800cade <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f009 f8f0 	bl	8015c30 <udp_remove>
          break;
 800ca50:	e046      	b.n	800cae0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6a1b      	ldr	r3, [r3, #32]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d006      	beq.n	800ca6a <lwip_netconn_do_delconn+0xe2>
 800ca5c:	4b35      	ldr	r3, [pc, #212]	@ (800cb34 <lwip_netconn_do_delconn+0x1ac>)
 800ca5e:	f240 4294 	movw	r2, #1172	@ 0x494
 800ca62:	4938      	ldr	r1, [pc, #224]	@ (800cb44 <lwip_netconn_do_delconn+0x1bc>)
 800ca64:	4835      	ldr	r0, [pc, #212]	@ (800cb3c <lwip_netconn_do_delconn+0x1b4>)
 800ca66:	f00c fb2d 	bl	80190c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2204      	movs	r2, #4
 800ca70:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2203      	movs	r2, #3
 800ca76:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff fe14 	bl	800c6b4 <lwip_netconn_do_close_internal>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d04b      	beq.n	800cb2a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d006      	beq.n	800caaa <lwip_netconn_do_delconn+0x122>
 800ca9c:	4b25      	ldr	r3, [pc, #148]	@ (800cb34 <lwip_netconn_do_delconn+0x1ac>)
 800ca9e:	f240 429a 	movw	r2, #1178	@ 0x49a
 800caa2:	4929      	ldr	r1, [pc, #164]	@ (800cb48 <lwip_netconn_do_delconn+0x1c0>)
 800caa4:	4825      	ldr	r0, [pc, #148]	@ (800cb3c <lwip_netconn_do_delconn+0x1b4>)
 800caa6:	f00c fb0d 	bl	80190c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800caaa:	4828      	ldr	r0, [pc, #160]	@ (800cb4c <lwip_netconn_do_delconn+0x1c4>)
 800caac:	f00b fd87 	bl	80185be <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	330c      	adds	r3, #12
 800cab6:	2100      	movs	r1, #0
 800cab8:	4618      	mov	r0, r3
 800caba:	f00b fce6 	bl	801848a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800cabe:	4823      	ldr	r0, [pc, #140]	@ (800cb4c <lwip_netconn_do_delconn+0x1c4>)
 800cac0:	f00b fd6e 	bl	80185a0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d02d      	beq.n	800cb2a <lwip_netconn_do_delconn+0x1a2>
 800cace:	4b19      	ldr	r3, [pc, #100]	@ (800cb34 <lwip_netconn_do_delconn+0x1ac>)
 800cad0:	f240 429e 	movw	r2, #1182	@ 0x49e
 800cad4:	491c      	ldr	r1, [pc, #112]	@ (800cb48 <lwip_netconn_do_delconn+0x1c0>)
 800cad6:	4819      	ldr	r0, [pc, #100]	@ (800cb3c <lwip_netconn_do_delconn+0x1b4>)
 800cad8:	f00c faf4 	bl	80190c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800cadc:	e025      	b.n	800cb2a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800cade:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2200      	movs	r2, #0
 800cae6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d007      	beq.n	800cb02 <lwip_netconn_do_delconn+0x17a>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	6810      	ldr	r0, [r2, #0]
 800cafc:	2200      	movs	r2, #0
 800cafe:	2100      	movs	r1, #0
 800cb00:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d007      	beq.n	800cb1c <lwip_netconn_do_delconn+0x194>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	6810      	ldr	r0, [r2, #0]
 800cb16:	2200      	movs	r2, #0
 800cb18:	2102      	movs	r1, #2
 800cb1a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	330c      	adds	r3, #12
 800cb22:	4618      	mov	r0, r3
 800cb24:	f00b fcfc 	bl	8018520 <sys_sem_valid>
 800cb28:	e000      	b.n	800cb2c <lwip_netconn_do_delconn+0x1a4>
          return;
 800cb2a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	0801bb18 	.word	0x0801bb18
 800cb38:	0801be88 	.word	0x0801be88
 800cb3c:	0801bb5c 	.word	0x0801bb5c
 800cb40:	0801be9c 	.word	0x0801be9c
 800cb44:	0801bebc 	.word	0x0801bebc
 800cb48:	0801bed8 	.word	0x0801bed8
 800cb4c:	20008800 	.word	0x20008800

0800cb50 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d025      	beq.n	800cbb2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb70:	2b10      	cmp	r3, #16
 800cb72:	d00e      	beq.n	800cb92 <lwip_netconn_do_bind+0x42>
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d119      	bne.n	800cbac <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6858      	ldr	r0, [r3, #4]
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6899      	ldr	r1, [r3, #8]
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	899b      	ldrh	r3, [r3, #12]
 800cb86:	461a      	mov	r2, r3
 800cb88:	f008 ffaa 	bl	8015ae0 <udp_bind>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
        break;
 800cb90:	e011      	b.n	800cbb6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6858      	ldr	r0, [r3, #4]
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	6899      	ldr	r1, [r3, #8]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	899b      	ldrh	r3, [r3, #12]
 800cba0:	461a      	mov	r2, r3
 800cba2:	f002 ff41 	bl	800fa28 <tcp_bind>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]
        break;
 800cbaa:	e004      	b.n	800cbb6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800cbac:	23fa      	movs	r3, #250	@ 0xfa
 800cbae:	73fb      	strb	r3, [r7, #15]
        break;
 800cbb0:	e001      	b.n	800cbb6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800cbb2:	23fa      	movs	r3, #250	@ 0xfa
 800cbb4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	7bfa      	ldrb	r2, [r7, #15]
 800cbba:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d07f      	beq.n	800ccda <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cbe4:	2b10      	cmp	r3, #16
 800cbe6:	d175      	bne.n	800ccd4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	785b      	ldrb	r3, [r3, #1]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d165      	bne.n	800ccbe <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	7d1b      	ldrb	r3, [r3, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800cbfe:	23fa      	movs	r3, #250	@ 0xfa
 800cc00:	72fb      	strb	r3, [r7, #11]
 800cc02:	e06c      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800cc04:	23ff      	movs	r3, #255	@ 0xff
 800cc06:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	f107 020b 	add.w	r2, r7, #11
 800cc12:	7cf9      	ldrb	r1, [r7, #19]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f002 ffbf 	bl	800fb98 <tcp_listen_with_backlog_and_err>
 800cc1a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d05d      	beq.n	800ccde <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3310      	adds	r3, #16
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f00b fbeb 	bl	8018404 <sys_mbox_valid>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3310      	adds	r3, #16
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f00b fb6e 	bl	801831c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	3310      	adds	r3, #16
 800cc46:	4618      	mov	r0, r3
 800cc48:	f00b fbed 	bl	8018426 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3314      	adds	r3, #20
 800cc56:	4618      	mov	r0, r3
 800cc58:	f00b fbd4 	bl	8018404 <sys_mbox_valid>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d108      	bne.n	800cc74 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	3314      	adds	r3, #20
 800cc68:	2106      	movs	r1, #6
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f00b fb3c 	bl	80182e8 <sys_mbox_new>
 800cc70:	4603      	mov	r3, r0
 800cc72:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800cc74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d118      	bne.n	800ccae <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2202      	movs	r2, #2
 800cc82:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4619      	mov	r1, r3
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f003 ff49 	bl	8010b30 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4912      	ldr	r1, [pc, #72]	@ (800ccf0 <lwip_netconn_do_listen+0x12c>)
 800cca6:	4618      	mov	r0, r3
 800cca8:	f003 ffba 	bl	8010c20 <tcp_accept>
 800ccac:	e017      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f002 fd68 	bl	800f784 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	605a      	str	r2, [r3, #4]
 800ccbc:	e00f      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	785b      	ldrb	r3, [r3, #1]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d102      	bne.n	800ccce <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	72fb      	strb	r3, [r7, #11]
 800cccc:	e007      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ccce:	23f5      	movs	r3, #245	@ 0xf5
 800ccd0:	72fb      	strb	r3, [r7, #11]
 800ccd2:	e004      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ccd4:	23f0      	movs	r3, #240	@ 0xf0
 800ccd6:	72fb      	strb	r3, [r7, #11]
 800ccd8:	e001      	b.n	800ccde <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ccda:	23f5      	movs	r3, #245	@ 0xf5
 800ccdc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ccde:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800cce6:	bf00      	nop
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	0800c1d1 	.word	0x0800c1d1

0800ccf4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2200      	movs	r2, #0
 800cd04:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d022      	beq.n	800cd56 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cd1a:	2b10      	cmp	r3, #16
 800cd1c:	d11b      	bne.n	800cd56 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd2a:	d202      	bcs.n	800cd32 <lwip_netconn_do_recv+0x3e>
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	e001      	b.n	800cd36 <lwip_netconn_do_recv+0x42>
 800cd32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd36:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	89fa      	ldrh	r2, [r7, #14]
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f003 f82c 	bl	800fda0 <tcp_recved>
        remaining -= recved;
 800cd48:	89fb      	ldrh	r3, [r7, #14]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e6      	bne.n	800cd24 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cd56:	bf00      	nop
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <lwip_netconn_do_writemore+0x24>
 800cd76:	4b96      	ldr	r3, [pc, #600]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cd78:	f240 6273 	movw	r2, #1651	@ 0x673
 800cd7c:	4995      	ldr	r1, [pc, #596]	@ (800cfd4 <lwip_netconn_do_writemore+0x274>)
 800cd7e:	4896      	ldr	r0, [pc, #600]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cd80:	f00c f9a0 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d006      	beq.n	800cd9a <lwip_netconn_do_writemore+0x3a>
 800cd8c:	4b90      	ldr	r3, [pc, #576]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cd8e:	f240 6274 	movw	r2, #1652	@ 0x674
 800cd92:	4992      	ldr	r1, [pc, #584]	@ (800cfdc <lwip_netconn_do_writemore+0x27c>)
 800cd94:	4890      	ldr	r0, [pc, #576]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cd96:	f00c f995 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d106      	bne.n	800cdb0 <lwip_netconn_do_writemore+0x50>
 800cda2:	4b8b      	ldr	r3, [pc, #556]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cda4:	f240 6275 	movw	r2, #1653	@ 0x675
 800cda8:	498d      	ldr	r1, [pc, #564]	@ (800cfe0 <lwip_netconn_do_writemore+0x280>)
 800cdaa:	488b      	ldr	r0, [pc, #556]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cdac:	f00c f98a 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d106      	bne.n	800cdc6 <lwip_netconn_do_writemore+0x66>
 800cdb8:	4b85      	ldr	r3, [pc, #532]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cdba:	f240 6276 	movw	r2, #1654	@ 0x676
 800cdbe:	4989      	ldr	r1, [pc, #548]	@ (800cfe4 <lwip_netconn_do_writemore+0x284>)
 800cdc0:	4885      	ldr	r0, [pc, #532]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cdc2:	f00c f97f 	bl	80190c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	699a      	ldr	r2, [r3, #24]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d306      	bcc.n	800cde4 <lwip_netconn_do_writemore+0x84>
 800cdd6:	4b7e      	ldr	r3, [pc, #504]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cdd8:	f240 6277 	movw	r2, #1655	@ 0x677
 800cddc:	4982      	ldr	r1, [pc, #520]	@ (800cfe8 <lwip_netconn_do_writemore+0x288>)
 800cdde:	487e      	ldr	r0, [pc, #504]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cde0:	f00c f970 	bl	80190c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <lwip_netconn_do_writemore+0x9c>
 800cdee:	4b78      	ldr	r3, [pc, #480]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800cdf0:	f240 6279 	movw	r2, #1657	@ 0x679
 800cdf4:	497d      	ldr	r1, [pc, #500]	@ (800cfec <lwip_netconn_do_writemore+0x28c>)
 800cdf6:	4878      	ldr	r0, [pc, #480]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cdf8:	f00c f964 	bl	80190c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	7f1b      	ldrb	r3, [r3, #28]
 800ce02:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7f1b      	ldrb	r3, [r3, #28]
 800ce08:	f003 0302 	and.w	r3, r3, #2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <lwip_netconn_do_writemore+0xba>
 800ce10:	7ebb      	ldrb	r3, [r7, #26]
 800ce12:	f003 0304 	and.w	r3, r3, #4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <lwip_netconn_do_writemore+0xbe>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e000      	b.n	800ce20 <lwip_netconn_do_writemore+0xc0>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	4413      	add	r3, r2
 800ce32:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce4c:	d307      	bcc.n	800ce5e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ce4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce52:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ce54:	7ebb      	ldrb	r3, [r7, #26]
 800ce56:	f043 0302 	orr.w	r3, r3, #2
 800ce5a:	76bb      	strb	r3, [r7, #26]
 800ce5c:	e001      	b.n	800ce62 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ce6a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ce6c:	89fa      	ldrh	r2, [r7, #14]
 800ce6e:	8bbb      	ldrh	r3, [r7, #28]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d216      	bcs.n	800cea2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ce74:	89fb      	ldrh	r3, [r7, #14]
 800ce76:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ce78:	7e3b      	ldrb	r3, [r7, #24]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00d      	beq.n	800ce9a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ce7e:	8bbb      	ldrh	r3, [r7, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10e      	bne.n	800cea2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d102      	bne.n	800ce94 <lwip_netconn_do_writemore+0x134>
 800ce8e:	f06f 0306 	mvn.w	r3, #6
 800ce92:	e000      	b.n	800ce96 <lwip_netconn_do_writemore+0x136>
 800ce94:	2300      	movs	r3, #0
 800ce96:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ce98:	e07d      	b.n	800cf96 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ce9a:	7ebb      	ldrb	r3, [r7, #26]
 800ce9c:	f043 0302 	orr.w	r3, r3, #2
 800cea0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	8bbb      	ldrh	r3, [r7, #28]
 800ceaa:	441a      	add	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d906      	bls.n	800cec6 <lwip_netconn_do_writemore+0x166>
 800ceb8:	4b45      	ldr	r3, [pc, #276]	@ (800cfd0 <lwip_netconn_do_writemore+0x270>)
 800ceba:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800cebe:	494c      	ldr	r1, [pc, #304]	@ (800cff0 <lwip_netconn_do_writemore+0x290>)
 800cec0:	4845      	ldr	r0, [pc, #276]	@ (800cfd8 <lwip_netconn_do_writemore+0x278>)
 800cec2:	f00c f8ff 	bl	80190c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cec6:	8bbb      	ldrh	r3, [r7, #28]
 800cec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cecc:	4293      	cmp	r3, r2
 800cece:	d103      	bne.n	800ced8 <lwip_netconn_do_writemore+0x178>
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ced6:	d209      	bcs.n	800ceec <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cedc:	8bba      	ldrh	r2, [r7, #28]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d10b      	bne.n	800cefa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d906      	bls.n	800cefa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ceec:	2301      	movs	r3, #1
 800ceee:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800cef0:	7ebb      	ldrb	r3, [r7, #26]
 800cef2:	f043 0302 	orr.w	r3, r3, #2
 800cef6:	76bb      	strb	r3, [r7, #26]
 800cef8:	e001      	b.n	800cefe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6858      	ldr	r0, [r3, #4]
 800cf02:	7ebb      	ldrb	r3, [r7, #26]
 800cf04:	8bba      	ldrh	r2, [r7, #28]
 800cf06:	6979      	ldr	r1, [r7, #20]
 800cf08:	f006 fd4e 	bl	80139a8 <tcp_write>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800cf10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d12c      	bne.n	800cf72 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	6999      	ldr	r1, [r3, #24]
 800cf1e:	8bba      	ldrh	r2, [r7, #28]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	440a      	add	r2, r1
 800cf26:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	6919      	ldr	r1, [r3, #16]
 800cf2e:	8bba      	ldrh	r2, [r7, #28]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	440a      	add	r2, r1
 800cf36:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	691a      	ldr	r2, [r3, #16]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d113      	bne.n	800cf72 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	899a      	ldrh	r2, [r3, #12]
 800cf50:	3a01      	subs	r2, #1
 800cf52:	b292      	uxth	r2, r2
 800cf54:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a1b      	ldr	r3, [r3, #32]
 800cf5a:	899b      	ldrh	r3, [r3, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d008      	beq.n	800cf72 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	3208      	adds	r2, #8
 800cf68:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800cf72:	7e7b      	ldrb	r3, [r7, #25]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d004      	beq.n	800cf82 <lwip_netconn_do_writemore+0x222>
 800cf78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f43f af50 	beq.w	800ce22 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cf82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <lwip_netconn_do_writemore+0x234>
 800cf8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d146      	bne.n	800d022 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cf94:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cf96:	7e3b      	ldrb	r3, [r7, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d02b      	beq.n	800cff4 <lwip_netconn_do_writemore+0x294>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	699a      	ldr	r2, [r3, #24]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	695b      	ldr	r3, [r3, #20]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d223      	bcs.n	800cff4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <lwip_netconn_do_writemore+0x260>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2103      	movs	r1, #3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7f1b      	ldrb	r3, [r3, #28]
 800cfc4:	f043 0310 	orr.w	r3, r3, #16
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	771a      	strb	r2, [r3, #28]
 800cfce:	e028      	b.n	800d022 <lwip_netconn_do_writemore+0x2c2>
 800cfd0:	0801bb18 	.word	0x0801bb18
 800cfd4:	0801bc70 	.word	0x0801bc70
 800cfd8:	0801bb5c 	.word	0x0801bb5c
 800cfdc:	0801bf78 	.word	0x0801bf78
 800cfe0:	0801bc80 	.word	0x0801bc80
 800cfe4:	0801bf98 	.word	0x0801bf98
 800cfe8:	0801bfb0 	.word	0x0801bfb0
 800cfec:	0801bff0 	.word	0x0801bff0
 800cff0:	0801c018 	.word	0x0801c018
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cffc:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d000:	d305      	bcc.n	800d00e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d909      	bls.n	800d022 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d012:	2b00      	cmp	r3, #0
 800d014:	d005      	beq.n	800d022 <lwip_netconn_do_writemore+0x2c2>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01a:	2200      	movs	r2, #0
 800d01c:	2103      	movs	r1, #3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d022:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d11d      	bne.n	800d066 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	699a      	ldr	r2, [r3, #24]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	429a      	cmp	r2, r3
 800d038:	d002      	beq.n	800d040 <lwip_netconn_do_writemore+0x2e0>
 800d03a:	7e3b      	ldrb	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d040:	2301      	movs	r3, #1
 800d042:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	4618      	mov	r0, r3
 800d04a:	f007 fa97 	bl	801457c <tcp_output>
 800d04e:	4603      	mov	r3, r0
 800d050:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d052:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d056:	f113 0f04 	cmn.w	r3, #4
 800d05a:	d12c      	bne.n	800d0b6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d05c:	7b3b      	ldrb	r3, [r7, #12]
 800d05e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d060:	2301      	movs	r3, #1
 800d062:	76fb      	strb	r3, [r7, #27]
 800d064:	e027      	b.n	800d0b6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d066:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06e:	d120      	bne.n	800d0b2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	f007 fa81 	bl	801457c <tcp_output>
 800d07a:	4603      	mov	r3, r0
 800d07c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d07e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d082:	f113 0f04 	cmn.w	r3, #4
 800d086:	d104      	bne.n	800d092 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d088:	7b7b      	ldrb	r3, [r7, #13]
 800d08a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d08c:	2301      	movs	r3, #1
 800d08e:	76fb      	strb	r3, [r7, #27]
 800d090:	e011      	b.n	800d0b6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d092:	7e3b      	ldrb	r3, [r7, #24]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00e      	beq.n	800d0b6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <lwip_netconn_do_writemore+0x348>
 800d0a2:	f06f 0306 	mvn.w	r3, #6
 800d0a6:	e000      	b.n	800d0aa <lwip_netconn_do_writemore+0x34a>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	76fb      	strb	r3, [r7, #27]
 800d0b0:	e001      	b.n	800d0b6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d0b6:	7efb      	ldrb	r3, [r7, #27]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d015      	beq.n	800d0e8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	330c      	adds	r3, #12
 800d0c4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	7ffa      	ldrb	r2, [r7, #31]
 800d0cc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d006      	beq.n	800d0ee <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f00b fa03 	bl	80184ec <sys_sem_signal>
 800d0e6:	e002      	b.n	800d0ee <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ec:	e000      	b.n	800d0f0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3720      	adds	r7, #32
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fe fd1c 	bl	800bb46 <netconn_err>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d166      	bne.n	800d1e8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d124:	2b10      	cmp	r3, #16
 800d126:	d15d      	bne.n	800d1e4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	785b      	ldrb	r3, [r3, #1]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d132:	23fb      	movs	r3, #251	@ 0xfb
 800d134:	73fb      	strb	r3, [r7, #15]
 800d136:	e057      	b.n	800d1e8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d04d      	beq.n	800d1de <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2201      	movs	r2, #1
 800d148:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d006      	beq.n	800d162 <lwip_netconn_do_write+0x6a>
 800d154:	4b28      	ldr	r3, [pc, #160]	@ (800d1f8 <lwip_netconn_do_write+0x100>)
 800d156:	f240 7223 	movw	r2, #1827	@ 0x723
 800d15a:	4928      	ldr	r1, [pc, #160]	@ (800d1fc <lwip_netconn_do_write+0x104>)
 800d15c:	4828      	ldr	r0, [pc, #160]	@ (800d200 <lwip_netconn_do_write+0x108>)
 800d15e:	f00b ffb1 	bl	80190c4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <lwip_netconn_do_write+0x80>
 800d16a:	4b23      	ldr	r3, [pc, #140]	@ (800d1f8 <lwip_netconn_do_write+0x100>)
 800d16c:	f240 7224 	movw	r2, #1828	@ 0x724
 800d170:	4924      	ldr	r1, [pc, #144]	@ (800d204 <lwip_netconn_do_write+0x10c>)
 800d172:	4823      	ldr	r0, [pc, #140]	@ (800d200 <lwip_netconn_do_write+0x108>)
 800d174:	f00b ffa6 	bl	80190c4 <iprintf>
        msg->conn->current_msg = msg;
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2100      	movs	r1, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff fdea 	bl	800cd60 <lwip_netconn_do_writemore>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d02e      	beq.n	800d1f0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	785b      	ldrb	r3, [r3, #1]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d006      	beq.n	800d1aa <lwip_netconn_do_write+0xb2>
 800d19c:	4b16      	ldr	r3, [pc, #88]	@ (800d1f8 <lwip_netconn_do_write+0x100>)
 800d19e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d1a2:	4919      	ldr	r1, [pc, #100]	@ (800d208 <lwip_netconn_do_write+0x110>)
 800d1a4:	4816      	ldr	r0, [pc, #88]	@ (800d200 <lwip_netconn_do_write+0x108>)
 800d1a6:	f00b ff8d 	bl	80190c4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d1aa:	4818      	ldr	r0, [pc, #96]	@ (800d20c <lwip_netconn_do_write+0x114>)
 800d1ac:	f00b fa07 	bl	80185be <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	330c      	adds	r3, #12
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f00b f966 	bl	801848a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d1be:	4813      	ldr	r0, [pc, #76]	@ (800d20c <lwip_netconn_do_write+0x114>)
 800d1c0:	f00b f9ee 	bl	80185a0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	785b      	ldrb	r3, [r3, #1]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d110      	bne.n	800d1f0 <lwip_netconn_do_write+0xf8>
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <lwip_netconn_do_write+0x100>)
 800d1d0:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d1d4:	490c      	ldr	r1, [pc, #48]	@ (800d208 <lwip_netconn_do_write+0x110>)
 800d1d6:	480a      	ldr	r0, [pc, #40]	@ (800d200 <lwip_netconn_do_write+0x108>)
 800d1d8:	f00b ff74 	bl	80190c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d1dc:	e008      	b.n	800d1f0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800d1de:	23f5      	movs	r3, #245	@ 0xf5
 800d1e0:	73fb      	strb	r3, [r7, #15]
 800d1e2:	e001      	b.n	800d1e8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800d1e4:	23fa      	movs	r3, #250	@ 0xfa
 800d1e6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	7bfa      	ldrb	r2, [r7, #15]
 800d1ec:	711a      	strb	r2, [r3, #4]
 800d1ee:	e000      	b.n	800d1f2 <lwip_netconn_do_write+0xfa>
        return;
 800d1f0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	0801bb18 	.word	0x0801bb18
 800d1fc:	0801bebc 	.word	0x0801bebc
 800d200:	0801bb5c 	.word	0x0801bb5c
 800d204:	0801c044 	.word	0x0801c044
 800d208:	0801bed8 	.word	0x0801bed8
 800d20c:	20008800 	.word	0x20008800

0800d210 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d069      	beq.n	800d302 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d238:	2b10      	cmp	r3, #16
 800d23a:	d162      	bne.n	800d302 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d240:	2b03      	cmp	r3, #3
 800d242:	d002      	beq.n	800d24a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d244:	7afb      	ldrb	r3, [r7, #11]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d05b      	beq.n	800d302 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d24a:	7afb      	ldrb	r3, [r7, #11]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	d103      	bne.n	800d258 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	22f5      	movs	r2, #245	@ 0xf5
 800d254:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d256:	e059      	b.n	800d30c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d103      	bne.n	800d266 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	22fb      	movs	r2, #251	@ 0xfb
 800d262:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d264:	e052      	b.n	800d30c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	7a1b      	ldrb	r3, [r3, #8]
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff f99e 	bl	800c5b8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d006      	beq.n	800d294 <lwip_netconn_do_close+0x84>
 800d286:	4b23      	ldr	r3, [pc, #140]	@ (800d314 <lwip_netconn_do_close+0x104>)
 800d288:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800d28c:	4922      	ldr	r1, [pc, #136]	@ (800d318 <lwip_netconn_do_close+0x108>)
 800d28e:	4823      	ldr	r0, [pc, #140]	@ (800d31c <lwip_netconn_do_close+0x10c>)
 800d290:	f00b ff18 	bl	80190c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2204      	movs	r2, #4
 800d29a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fa02 	bl	800c6b4 <lwip_netconn_do_close_internal>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d029      	beq.n	800d30a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d006      	beq.n	800d2ce <lwip_netconn_do_close+0xbe>
 800d2c0:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <lwip_netconn_do_close+0x104>)
 800d2c2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800d2c6:	4916      	ldr	r1, [pc, #88]	@ (800d320 <lwip_netconn_do_close+0x110>)
 800d2c8:	4814      	ldr	r0, [pc, #80]	@ (800d31c <lwip_netconn_do_close+0x10c>)
 800d2ca:	f00b fefb 	bl	80190c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800d2ce:	4815      	ldr	r0, [pc, #84]	@ (800d324 <lwip_netconn_do_close+0x114>)
 800d2d0:	f00b f975 	bl	80185be <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	330c      	adds	r3, #12
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f00b f8d4 	bl	801848a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d2e2:	4810      	ldr	r0, [pc, #64]	@ (800d324 <lwip_netconn_do_close+0x114>)
 800d2e4:	f00b f95c 	bl	80185a0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	785b      	ldrb	r3, [r3, #1]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00b      	beq.n	800d30a <lwip_netconn_do_close+0xfa>
 800d2f2:	4b08      	ldr	r3, [pc, #32]	@ (800d314 <lwip_netconn_do_close+0x104>)
 800d2f4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800d2f8:	4909      	ldr	r1, [pc, #36]	@ (800d320 <lwip_netconn_do_close+0x110>)
 800d2fa:	4808      	ldr	r0, [pc, #32]	@ (800d31c <lwip_netconn_do_close+0x10c>)
 800d2fc:	f00b fee2 	bl	80190c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d300:	e003      	b.n	800d30a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	22f5      	movs	r2, #245	@ 0xf5
 800d306:	711a      	strb	r2, [r3, #4]
 800d308:	e000      	b.n	800d30c <lwip_netconn_do_close+0xfc>
      return;
 800d30a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	0801bb18 	.word	0x0801bb18
 800d318:	0801bebc 	.word	0x0801bebc
 800d31c:	0801bb5c 	.word	0x0801bb5c
 800d320:	0801bed8 	.word	0x0801bed8
 800d324:	20008800 	.word	0x20008800

0800d328 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d013      	beq.n	800d35e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4618      	mov	r0, r3
 800d344:	f001 fd74 	bl	800ee30 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	605a      	str	r2, [r3, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	2006      	movs	r0, #6
 800d35a:	f000 fec5 	bl	800e0e8 <memp_free>
  }
}
 800d35e:	bf00      	nop
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d372:	f008 f9bb 	bl	80156ec <sys_timeouts_sleeptime>
 800d376:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d10b      	bne.n	800d398 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d380:	4813      	ldr	r0, [pc, #76]	@ (800d3d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800d382:	f00b f91c 	bl	80185be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d386:	2200      	movs	r2, #0
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f00a fff2 	bl	8018374 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d390:	480f      	ldr	r0, [pc, #60]	@ (800d3d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800d392:	f00b f905 	bl	80185a0 <sys_mutex_lock>
    return;
 800d396:	e018      	b.n	800d3ca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d39e:	f008 f96b 	bl	8015678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d3a2:	e7e6      	b.n	800d372 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d3a4:	480a      	ldr	r0, [pc, #40]	@ (800d3d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800d3a6:	f00b f90a 	bl	80185be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f00a ffe0 	bl	8018374 <sys_arch_mbox_fetch>
 800d3b4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d3b6:	4806      	ldr	r0, [pc, #24]	@ (800d3d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800d3b8:	f00b f8f2 	bl	80185a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c2:	d102      	bne.n	800d3ca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d3c4:	f008 f958 	bl	8015678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d3c8:	e7d3      	b.n	800d372 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	20008800 	.word	0x20008800

0800d3d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d3dc:	4810      	ldr	r0, [pc, #64]	@ (800d420 <tcpip_thread+0x4c>)
 800d3de:	f00b f8df 	bl	80185a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d3e2:	4b10      	ldr	r3, [pc, #64]	@ (800d424 <tcpip_thread+0x50>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d005      	beq.n	800d3f6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d424 <tcpip_thread+0x50>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a0e      	ldr	r2, [pc, #56]	@ (800d428 <tcpip_thread+0x54>)
 800d3f0:	6812      	ldr	r2, [r2, #0]
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d3f6:	f107 030c 	add.w	r3, r7, #12
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	480b      	ldr	r0, [pc, #44]	@ (800d42c <tcpip_thread+0x58>)
 800d3fe:	f7ff ffb3 	bl	800d368 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d408:	4b09      	ldr	r3, [pc, #36]	@ (800d430 <tcpip_thread+0x5c>)
 800d40a:	2291      	movs	r2, #145	@ 0x91
 800d40c:	4909      	ldr	r1, [pc, #36]	@ (800d434 <tcpip_thread+0x60>)
 800d40e:	480a      	ldr	r0, [pc, #40]	@ (800d438 <tcpip_thread+0x64>)
 800d410:	f00b fe58 	bl	80190c4 <iprintf>
      continue;
 800d414:	e003      	b.n	800d41e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 f80f 	bl	800d43c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d41e:	e7ea      	b.n	800d3f6 <tcpip_thread+0x22>
 800d420:	20008800 	.word	0x20008800
 800d424:	200087f4 	.word	0x200087f4
 800d428:	200087f8 	.word	0x200087f8
 800d42c:	200087fc 	.word	0x200087fc
 800d430:	0801c070 	.word	0x0801c070
 800d434:	0801c0a0 	.word	0x0801c0a0
 800d438:	0801c0c0 	.word	0x0801c0c0

0800d43c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d026      	beq.n	800d49a <tcpip_thread_handle_msg+0x5e>
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	dc2b      	bgt.n	800d4a8 <tcpip_thread_handle_msg+0x6c>
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <tcpip_thread_handle_msg+0x1e>
 800d454:	2b01      	cmp	r3, #1
 800d456:	d015      	beq.n	800d484 <tcpip_thread_handle_msg+0x48>
 800d458:	e026      	b.n	800d4a8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	6850      	ldr	r0, [r2, #4]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	6892      	ldr	r2, [r2, #8]
 800d466:	4611      	mov	r1, r2
 800d468:	4798      	blx	r3
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	f001 fcdb 	bl	800ee30 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	2009      	movs	r0, #9
 800d47e:	f000 fe33 	bl	800e0e8 <memp_free>
      break;
 800d482:	e018      	b.n	800d4b6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	6892      	ldr	r2, [r2, #8]
 800d48c:	4610      	mov	r0, r2
 800d48e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d490:	6879      	ldr	r1, [r7, #4]
 800d492:	2008      	movs	r0, #8
 800d494:	f000 fe28 	bl	800e0e8 <memp_free>
      break;
 800d498:	e00d      	b.n	800d4b6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6892      	ldr	r2, [r2, #8]
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	4798      	blx	r3
      break;
 800d4a6:	e006      	b.n	800d4b6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d4a8:	4b05      	ldr	r3, [pc, #20]	@ (800d4c0 <tcpip_thread_handle_msg+0x84>)
 800d4aa:	22cf      	movs	r2, #207	@ 0xcf
 800d4ac:	4905      	ldr	r1, [pc, #20]	@ (800d4c4 <tcpip_thread_handle_msg+0x88>)
 800d4ae:	4806      	ldr	r0, [pc, #24]	@ (800d4c8 <tcpip_thread_handle_msg+0x8c>)
 800d4b0:	f00b fe08 	bl	80190c4 <iprintf>
      break;
 800d4b4:	bf00      	nop
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	0801c070 	.word	0x0801c070
 800d4c4:	0801c0a0 	.word	0x0801c0a0
 800d4c8:	0801c0c0 	.word	0x0801c0c0

0800d4cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d4d8:	481a      	ldr	r0, [pc, #104]	@ (800d544 <tcpip_inpkt+0x78>)
 800d4da:	f00a ff93 	bl	8018404 <sys_mbox_valid>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d105      	bne.n	800d4f0 <tcpip_inpkt+0x24>
 800d4e4:	4b18      	ldr	r3, [pc, #96]	@ (800d548 <tcpip_inpkt+0x7c>)
 800d4e6:	22fc      	movs	r2, #252	@ 0xfc
 800d4e8:	4918      	ldr	r1, [pc, #96]	@ (800d54c <tcpip_inpkt+0x80>)
 800d4ea:	4819      	ldr	r0, [pc, #100]	@ (800d550 <tcpip_inpkt+0x84>)
 800d4ec:	f00b fdea 	bl	80190c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d4f0:	2009      	movs	r0, #9
 800d4f2:	f000 fda7 	bl	800e044 <memp_malloc>
 800d4f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d102      	bne.n	800d504 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d502:	e01a      	b.n	800d53a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2200      	movs	r2, #0
 800d508:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d51c:	6979      	ldr	r1, [r7, #20]
 800d51e:	4809      	ldr	r0, [pc, #36]	@ (800d544 <tcpip_inpkt+0x78>)
 800d520:	f00a ff0e 	bl	8018340 <sys_mbox_trypost>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d006      	beq.n	800d538 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d52a:	6979      	ldr	r1, [r7, #20]
 800d52c:	2009      	movs	r0, #9
 800d52e:	f000 fddb 	bl	800e0e8 <memp_free>
    return ERR_MEM;
 800d532:	f04f 33ff 	mov.w	r3, #4294967295
 800d536:	e000      	b.n	800d53a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d538:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3718      	adds	r7, #24
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	200087fc 	.word	0x200087fc
 800d548:	0801c070 	.word	0x0801c070
 800d54c:	0801c0e8 	.word	0x0801c0e8
 800d550:	0801c0c0 	.word	0x0801c0c0

0800d554 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d564:	f003 0318 	and.w	r3, r3, #24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d56c:	4a08      	ldr	r2, [pc, #32]	@ (800d590 <tcpip_input+0x3c>)
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff ffab 	bl	800d4cc <tcpip_inpkt>
 800d576:	4603      	mov	r3, r0
 800d578:	e005      	b.n	800d586 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d57a:	4a06      	ldr	r2, [pc, #24]	@ (800d594 <tcpip_input+0x40>)
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7ff ffa4 	bl	800d4cc <tcpip_inpkt>
 800d584:	4603      	mov	r3, r0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	0801813d 	.word	0x0801813d
 800d594:	08017045 	.word	0x08017045

0800d598 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d5a2:	4819      	ldr	r0, [pc, #100]	@ (800d608 <tcpip_try_callback+0x70>)
 800d5a4:	f00a ff2e 	bl	8018404 <sys_mbox_valid>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <tcpip_try_callback+0x24>
 800d5ae:	4b17      	ldr	r3, [pc, #92]	@ (800d60c <tcpip_try_callback+0x74>)
 800d5b0:	f240 125d 	movw	r2, #349	@ 0x15d
 800d5b4:	4916      	ldr	r1, [pc, #88]	@ (800d610 <tcpip_try_callback+0x78>)
 800d5b6:	4817      	ldr	r0, [pc, #92]	@ (800d614 <tcpip_try_callback+0x7c>)
 800d5b8:	f00b fd84 	bl	80190c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d5bc:	2008      	movs	r0, #8
 800d5be:	f000 fd41 	bl	800e044 <memp_malloc>
 800d5c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ce:	e017      	b.n	800d600 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	4808      	ldr	r0, [pc, #32]	@ (800d608 <tcpip_try_callback+0x70>)
 800d5e6:	f00a feab 	bl	8018340 <sys_mbox_trypost>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d006      	beq.n	800d5fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d5f0:	68f9      	ldr	r1, [r7, #12]
 800d5f2:	2008      	movs	r0, #8
 800d5f4:	f000 fd78 	bl	800e0e8 <memp_free>
    return ERR_MEM;
 800d5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fc:	e000      	b.n	800d600 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	200087fc 	.word	0x200087fc
 800d60c:	0801c070 	.word	0x0801c070
 800d610:	0801c0e8 	.word	0x0801c0e8
 800d614:	0801c0c0 	.word	0x0801c0c0

0800d618 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d624:	4806      	ldr	r0, [pc, #24]	@ (800d640 <tcpip_send_msg_wait_sem+0x28>)
 800d626:	f00a ffbb 	bl	80185a0 <sys_mutex_lock>
  fn(apimsg);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	68b8      	ldr	r0, [r7, #8]
 800d62e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d630:	4803      	ldr	r0, [pc, #12]	@ (800d640 <tcpip_send_msg_wait_sem+0x28>)
 800d632:	f00a ffc4 	bl	80185be <sys_mutex_unlock>
  return ERR_OK;
 800d636:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20008800 	.word	0x20008800

0800d644 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af02      	add	r7, sp, #8
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d64e:	f000 f871 	bl	800d734 <lwip_init>

  tcpip_init_done = initfunc;
 800d652:	4a17      	ldr	r2, [pc, #92]	@ (800d6b0 <tcpip_init+0x6c>)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d658:	4a16      	ldr	r2, [pc, #88]	@ (800d6b4 <tcpip_init+0x70>)
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d65e:	2106      	movs	r1, #6
 800d660:	4815      	ldr	r0, [pc, #84]	@ (800d6b8 <tcpip_init+0x74>)
 800d662:	f00a fe41 	bl	80182e8 <sys_mbox_new>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d66c:	4b13      	ldr	r3, [pc, #76]	@ (800d6bc <tcpip_init+0x78>)
 800d66e:	f240 2261 	movw	r2, #609	@ 0x261
 800d672:	4913      	ldr	r1, [pc, #76]	@ (800d6c0 <tcpip_init+0x7c>)
 800d674:	4813      	ldr	r0, [pc, #76]	@ (800d6c4 <tcpip_init+0x80>)
 800d676:	f00b fd25 	bl	80190c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d67a:	4813      	ldr	r0, [pc, #76]	@ (800d6c8 <tcpip_init+0x84>)
 800d67c:	f00a ff7a 	bl	8018574 <sys_mutex_new>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d686:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <tcpip_init+0x78>)
 800d688:	f240 2265 	movw	r2, #613	@ 0x265
 800d68c:	490f      	ldr	r1, [pc, #60]	@ (800d6cc <tcpip_init+0x88>)
 800d68e:	480d      	ldr	r0, [pc, #52]	@ (800d6c4 <tcpip_init+0x80>)
 800d690:	f00b fd18 	bl	80190c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d694:	2318      	movs	r3, #24
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d69c:	2200      	movs	r2, #0
 800d69e:	490c      	ldr	r1, [pc, #48]	@ (800d6d0 <tcpip_init+0x8c>)
 800d6a0:	480c      	ldr	r0, [pc, #48]	@ (800d6d4 <tcpip_init+0x90>)
 800d6a2:	f00a ff99 	bl	80185d8 <sys_thread_new>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	200087f4 	.word	0x200087f4
 800d6b4:	200087f8 	.word	0x200087f8
 800d6b8:	200087fc 	.word	0x200087fc
 800d6bc:	0801c070 	.word	0x0801c070
 800d6c0:	0801c0f8 	.word	0x0801c0f8
 800d6c4:	0801c0c0 	.word	0x0801c0c0
 800d6c8:	20008800 	.word	0x20008800
 800d6cc:	0801c11c 	.word	0x0801c11c
 800d6d0:	0800d3d5 	.word	0x0800d3d5
 800d6d4:	0801c140 	.word	0x0801c140

0800d6d8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d6e2:	88fb      	ldrh	r3, [r7, #6]
 800d6e4:	021b      	lsls	r3, r3, #8
 800d6e6:	b21a      	sxth	r2, r3
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	0a1b      	lsrs	r3, r3, #8
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	b21b      	sxth	r3, r3
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b21b      	sxth	r3, r3
 800d6f4:	b29b      	uxth	r3, r3
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	061a      	lsls	r2, r3, #24
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	021b      	lsls	r3, r3, #8
 800d712:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d716:	431a      	orrs	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	0a1b      	lsrs	r3, r3, #8
 800d71c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	0e1b      	lsrs	r3, r3, #24
 800d726:	4313      	orrs	r3, r2
}
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d73e:	f00a ff0d 	bl	801855c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d742:	f000 f8d5 	bl	800d8f0 <mem_init>
  memp_init();
 800d746:	f000 fc31 	bl	800dfac <memp_init>
  pbuf_init();
  netif_init();
 800d74a:	f000 fcf7 	bl	800e13c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d74e:	f008 f805 	bl	801575c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d752:	f001 fe07 	bl	800f364 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d756:	f007 ff47 	bl	80155e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
	...

0800d764 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d76e:	4b05      	ldr	r3, [pc, #20]	@ (800d784 <ptr_to_mem+0x20>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	4413      	add	r3, r2
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000b030 	.word	0x2000b030

0800d788 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d790:	4b05      	ldr	r3, [pc, #20]	@ (800d7a8 <mem_to_ptr+0x20>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	b29b      	uxth	r3, r3
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	2000b030 	.word	0x2000b030

0800d7ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d7ac:	b590      	push	{r4, r7, lr}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d7b4:	4b45      	ldr	r3, [pc, #276]	@ (800d8cc <plug_holes+0x120>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d206      	bcs.n	800d7cc <plug_holes+0x20>
 800d7be:	4b44      	ldr	r3, [pc, #272]	@ (800d8d0 <plug_holes+0x124>)
 800d7c0:	f240 12df 	movw	r2, #479	@ 0x1df
 800d7c4:	4943      	ldr	r1, [pc, #268]	@ (800d8d4 <plug_holes+0x128>)
 800d7c6:	4844      	ldr	r0, [pc, #272]	@ (800d8d8 <plug_holes+0x12c>)
 800d7c8:	f00b fc7c 	bl	80190c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d7cc:	4b43      	ldr	r3, [pc, #268]	@ (800d8dc <plug_holes+0x130>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d306      	bcc.n	800d7e4 <plug_holes+0x38>
 800d7d6:	4b3e      	ldr	r3, [pc, #248]	@ (800d8d0 <plug_holes+0x124>)
 800d7d8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d7dc:	4940      	ldr	r1, [pc, #256]	@ (800d8e0 <plug_holes+0x134>)
 800d7de:	483e      	ldr	r0, [pc, #248]	@ (800d8d8 <plug_holes+0x12c>)
 800d7e0:	f00b fc70 	bl	80190c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	791b      	ldrb	r3, [r3, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d006      	beq.n	800d7fa <plug_holes+0x4e>
 800d7ec:	4b38      	ldr	r3, [pc, #224]	@ (800d8d0 <plug_holes+0x124>)
 800d7ee:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d7f2:	493c      	ldr	r1, [pc, #240]	@ (800d8e4 <plug_holes+0x138>)
 800d7f4:	4838      	ldr	r0, [pc, #224]	@ (800d8d8 <plug_holes+0x12c>)
 800d7f6:	f00b fc65 	bl	80190c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d802:	d906      	bls.n	800d812 <plug_holes+0x66>
 800d804:	4b32      	ldr	r3, [pc, #200]	@ (800d8d0 <plug_holes+0x124>)
 800d806:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d80a:	4937      	ldr	r1, [pc, #220]	@ (800d8e8 <plug_holes+0x13c>)
 800d80c:	4832      	ldr	r0, [pc, #200]	@ (800d8d8 <plug_holes+0x12c>)
 800d80e:	f00b fc59 	bl	80190c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff ffa4 	bl	800d764 <ptr_to_mem>
 800d81c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	429a      	cmp	r2, r3
 800d824:	d024      	beq.n	800d870 <plug_holes+0xc4>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	791b      	ldrb	r3, [r3, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d120      	bne.n	800d870 <plug_holes+0xc4>
 800d82e:	4b2b      	ldr	r3, [pc, #172]	@ (800d8dc <plug_holes+0x130>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	429a      	cmp	r2, r3
 800d836:	d01b      	beq.n	800d870 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d838:	4b2c      	ldr	r3, [pc, #176]	@ (800d8ec <plug_holes+0x140>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d102      	bne.n	800d848 <plug_holes+0x9c>
      lfree = mem;
 800d842:	4a2a      	ldr	r2, [pc, #168]	@ (800d8ec <plug_holes+0x140>)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	881a      	ldrh	r2, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	881b      	ldrh	r3, [r3, #0]
 800d854:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d858:	d00a      	beq.n	800d870 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff ff80 	bl	800d764 <ptr_to_mem>
 800d864:	4604      	mov	r4, r0
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ff8e 	bl	800d788 <mem_to_ptr>
 800d86c:	4603      	mov	r3, r0
 800d86e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	885b      	ldrh	r3, [r3, #2]
 800d874:	4618      	mov	r0, r3
 800d876:	f7ff ff75 	bl	800d764 <ptr_to_mem>
 800d87a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d01f      	beq.n	800d8c4 <plug_holes+0x118>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	791b      	ldrb	r3, [r3, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d11b      	bne.n	800d8c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d88c:	4b17      	ldr	r3, [pc, #92]	@ (800d8ec <plug_holes+0x140>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	429a      	cmp	r2, r3
 800d894:	d102      	bne.n	800d89c <plug_holes+0xf0>
      lfree = pmem;
 800d896:	4a15      	ldr	r2, [pc, #84]	@ (800d8ec <plug_holes+0x140>)
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	881a      	ldrh	r2, [r3, #0]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d8ac:	d00a      	beq.n	800d8c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	881b      	ldrh	r3, [r3, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff ff56 	bl	800d764 <ptr_to_mem>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	68b8      	ldr	r0, [r7, #8]
 800d8bc:	f7ff ff64 	bl	800d788 <mem_to_ptr>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d8c4:	bf00      	nop
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	2000b030 	.word	0x2000b030
 800d8d0:	0801c150 	.word	0x0801c150
 800d8d4:	0801c180 	.word	0x0801c180
 800d8d8:	0801c198 	.word	0x0801c198
 800d8dc:	2000b034 	.word	0x2000b034
 800d8e0:	0801c1c0 	.word	0x0801c1c0
 800d8e4:	0801c1dc 	.word	0x0801c1dc
 800d8e8:	0801c1f8 	.word	0x0801c1f8
 800d8ec:	2000b03c 	.word	0x2000b03c

0800d8f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d8f6:	4b1f      	ldr	r3, [pc, #124]	@ (800d974 <mem_init+0x84>)
 800d8f8:	3303      	adds	r3, #3
 800d8fa:	f023 0303 	bic.w	r3, r3, #3
 800d8fe:	461a      	mov	r2, r3
 800d900:	4b1d      	ldr	r3, [pc, #116]	@ (800d978 <mem_init+0x88>)
 800d902:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d904:	4b1c      	ldr	r3, [pc, #112]	@ (800d978 <mem_init+0x88>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d910:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d91e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800d922:	f7ff ff1f 	bl	800d764 <ptr_to_mem>
 800d926:	4603      	mov	r3, r0
 800d928:	4a14      	ldr	r2, [pc, #80]	@ (800d97c <mem_init+0x8c>)
 800d92a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d92c:	4b13      	ldr	r3, [pc, #76]	@ (800d97c <mem_init+0x8c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2201      	movs	r2, #1
 800d932:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d934:	4b11      	ldr	r3, [pc, #68]	@ (800d97c <mem_init+0x8c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d93c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d93e:	4b0f      	ldr	r3, [pc, #60]	@ (800d97c <mem_init+0x8c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d946:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d948:	4b0b      	ldr	r3, [pc, #44]	@ (800d978 <mem_init+0x88>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a0c      	ldr	r2, [pc, #48]	@ (800d980 <mem_init+0x90>)
 800d94e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d950:	480c      	ldr	r0, [pc, #48]	@ (800d984 <mem_init+0x94>)
 800d952:	f00a fe0f 	bl	8018574 <sys_mutex_new>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d006      	beq.n	800d96a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d95c:	4b0a      	ldr	r3, [pc, #40]	@ (800d988 <mem_init+0x98>)
 800d95e:	f240 221f 	movw	r2, #543	@ 0x21f
 800d962:	490a      	ldr	r1, [pc, #40]	@ (800d98c <mem_init+0x9c>)
 800d964:	480a      	ldr	r0, [pc, #40]	@ (800d990 <mem_init+0xa0>)
 800d966:	f00b fbad 	bl	80190c4 <iprintf>
  }
}
 800d96a:	bf00      	nop
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	2000881c 	.word	0x2000881c
 800d978:	2000b030 	.word	0x2000b030
 800d97c:	2000b034 	.word	0x2000b034
 800d980:	2000b03c 	.word	0x2000b03c
 800d984:	2000b038 	.word	0x2000b038
 800d988:	0801c150 	.word	0x0801c150
 800d98c:	0801c224 	.word	0x0801c224
 800d990:	0801c198 	.word	0x0801c198

0800d994 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fef3 	bl	800d788 <mem_to_ptr>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff feda 	bl	800d764 <ptr_to_mem>
 800d9b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	885b      	ldrh	r3, [r3, #2]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fed4 	bl	800d764 <ptr_to_mem>
 800d9bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d9c6:	d818      	bhi.n	800d9fa <mem_link_valid+0x66>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	885b      	ldrh	r3, [r3, #2]
 800d9cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d9d0:	d813      	bhi.n	800d9fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d9d6:	8afa      	ldrh	r2, [r7, #22]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d004      	beq.n	800d9e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	8afa      	ldrh	r2, [r7, #22]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d109      	bne.n	800d9fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d9e6:	4b08      	ldr	r3, [pc, #32]	@ (800da08 <mem_link_valid+0x74>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d006      	beq.n	800d9fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	885b      	ldrh	r3, [r3, #2]
 800d9f4:	8afa      	ldrh	r2, [r7, #22]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d001      	beq.n	800d9fe <mem_link_valid+0x6a>
    return 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e000      	b.n	800da00 <mem_link_valid+0x6c>
  }
  return 1;
 800d9fe:	2301      	movs	r3, #1
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	2000b034 	.word	0x2000b034

0800da0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d070      	beq.n	800dafc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f003 0303 	and.w	r3, r3, #3
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00d      	beq.n	800da40 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800da24:	4b37      	ldr	r3, [pc, #220]	@ (800db04 <mem_free+0xf8>)
 800da26:	f240 2273 	movw	r2, #627	@ 0x273
 800da2a:	4937      	ldr	r1, [pc, #220]	@ (800db08 <mem_free+0xfc>)
 800da2c:	4837      	ldr	r0, [pc, #220]	@ (800db0c <mem_free+0x100>)
 800da2e:	f00b fb49 	bl	80190c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da32:	f00a fdf1 	bl	8018618 <sys_arch_protect>
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f00a fdfb 	bl	8018634 <sys_arch_unprotect>
    return;
 800da3e:	e05e      	b.n	800dafe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3b08      	subs	r3, #8
 800da44:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800da46:	4b32      	ldr	r3, [pc, #200]	@ (800db10 <mem_free+0x104>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	69fa      	ldr	r2, [r7, #28]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d306      	bcc.n	800da5e <mem_free+0x52>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f103 020c 	add.w	r2, r3, #12
 800da56:	4b2f      	ldr	r3, [pc, #188]	@ (800db14 <mem_free+0x108>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d90d      	bls.n	800da7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800da5e:	4b29      	ldr	r3, [pc, #164]	@ (800db04 <mem_free+0xf8>)
 800da60:	f240 227f 	movw	r2, #639	@ 0x27f
 800da64:	492c      	ldr	r1, [pc, #176]	@ (800db18 <mem_free+0x10c>)
 800da66:	4829      	ldr	r0, [pc, #164]	@ (800db0c <mem_free+0x100>)
 800da68:	f00b fb2c 	bl	80190c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da6c:	f00a fdd4 	bl	8018618 <sys_arch_protect>
 800da70:	6138      	str	r0, [r7, #16]
 800da72:	6938      	ldr	r0, [r7, #16]
 800da74:	f00a fdde 	bl	8018634 <sys_arch_unprotect>
    return;
 800da78:	e041      	b.n	800dafe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800da7a:	4828      	ldr	r0, [pc, #160]	@ (800db1c <mem_free+0x110>)
 800da7c:	f00a fd90 	bl	80185a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	791b      	ldrb	r3, [r3, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d110      	bne.n	800daaa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800da88:	4b1e      	ldr	r3, [pc, #120]	@ (800db04 <mem_free+0xf8>)
 800da8a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800da8e:	4924      	ldr	r1, [pc, #144]	@ (800db20 <mem_free+0x114>)
 800da90:	481e      	ldr	r0, [pc, #120]	@ (800db0c <mem_free+0x100>)
 800da92:	f00b fb17 	bl	80190c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800da96:	4821      	ldr	r0, [pc, #132]	@ (800db1c <mem_free+0x110>)
 800da98:	f00a fd91 	bl	80185be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da9c:	f00a fdbc 	bl	8018618 <sys_arch_protect>
 800daa0:	6178      	str	r0, [r7, #20]
 800daa2:	6978      	ldr	r0, [r7, #20]
 800daa4:	f00a fdc6 	bl	8018634 <sys_arch_unprotect>
    return;
 800daa8:	e029      	b.n	800dafe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800daaa:	69f8      	ldr	r0, [r7, #28]
 800daac:	f7ff ff72 	bl	800d994 <mem_link_valid>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d110      	bne.n	800dad8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dab6:	4b13      	ldr	r3, [pc, #76]	@ (800db04 <mem_free+0xf8>)
 800dab8:	f240 2295 	movw	r2, #661	@ 0x295
 800dabc:	4919      	ldr	r1, [pc, #100]	@ (800db24 <mem_free+0x118>)
 800dabe:	4813      	ldr	r0, [pc, #76]	@ (800db0c <mem_free+0x100>)
 800dac0:	f00b fb00 	bl	80190c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dac4:	4815      	ldr	r0, [pc, #84]	@ (800db1c <mem_free+0x110>)
 800dac6:	f00a fd7a 	bl	80185be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800daca:	f00a fda5 	bl	8018618 <sys_arch_protect>
 800dace:	61b8      	str	r0, [r7, #24]
 800dad0:	69b8      	ldr	r0, [r7, #24]
 800dad2:	f00a fdaf 	bl	8018634 <sys_arch_unprotect>
    return;
 800dad6:	e012      	b.n	800dafe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2200      	movs	r2, #0
 800dadc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dade:	4b12      	ldr	r3, [pc, #72]	@ (800db28 <mem_free+0x11c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69fa      	ldr	r2, [r7, #28]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d202      	bcs.n	800daee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dae8:	4a0f      	ldr	r2, [pc, #60]	@ (800db28 <mem_free+0x11c>)
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800daee:	69f8      	ldr	r0, [r7, #28]
 800daf0:	f7ff fe5c 	bl	800d7ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800daf4:	4809      	ldr	r0, [pc, #36]	@ (800db1c <mem_free+0x110>)
 800daf6:	f00a fd62 	bl	80185be <sys_mutex_unlock>
 800dafa:	e000      	b.n	800dafe <mem_free+0xf2>
    return;
 800dafc:	bf00      	nop
}
 800dafe:	3720      	adds	r7, #32
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	0801c150 	.word	0x0801c150
 800db08:	0801c240 	.word	0x0801c240
 800db0c:	0801c198 	.word	0x0801c198
 800db10:	2000b030 	.word	0x2000b030
 800db14:	2000b034 	.word	0x2000b034
 800db18:	0801c264 	.word	0x0801c264
 800db1c:	2000b038 	.word	0x2000b038
 800db20:	0801c280 	.word	0x0801c280
 800db24:	0801c2a8 	.word	0x0801c2a8
 800db28:	2000b03c 	.word	0x2000b03c

0800db2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800db38:	887b      	ldrh	r3, [r7, #2]
 800db3a:	3303      	adds	r3, #3
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f023 0303 	bic.w	r3, r3, #3
 800db42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800db44:	8bfb      	ldrh	r3, [r7, #30]
 800db46:	2b0b      	cmp	r3, #11
 800db48:	d801      	bhi.n	800db4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800db4a:	230c      	movs	r3, #12
 800db4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800db4e:	8bfb      	ldrh	r3, [r7, #30]
 800db50:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800db54:	d803      	bhi.n	800db5e <mem_trim+0x32>
 800db56:	8bfa      	ldrh	r2, [r7, #30]
 800db58:	887b      	ldrh	r3, [r7, #2]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d201      	bcs.n	800db62 <mem_trim+0x36>
    return NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	e0d8      	b.n	800dd14 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800db62:	4b6e      	ldr	r3, [pc, #440]	@ (800dd1c <mem_trim+0x1f0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d304      	bcc.n	800db76 <mem_trim+0x4a>
 800db6c:	4b6c      	ldr	r3, [pc, #432]	@ (800dd20 <mem_trim+0x1f4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d306      	bcc.n	800db84 <mem_trim+0x58>
 800db76:	4b6b      	ldr	r3, [pc, #428]	@ (800dd24 <mem_trim+0x1f8>)
 800db78:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800db7c:	496a      	ldr	r1, [pc, #424]	@ (800dd28 <mem_trim+0x1fc>)
 800db7e:	486b      	ldr	r0, [pc, #428]	@ (800dd2c <mem_trim+0x200>)
 800db80:	f00b faa0 	bl	80190c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800db84:	4b65      	ldr	r3, [pc, #404]	@ (800dd1c <mem_trim+0x1f0>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d304      	bcc.n	800db98 <mem_trim+0x6c>
 800db8e:	4b64      	ldr	r3, [pc, #400]	@ (800dd20 <mem_trim+0x1f4>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d307      	bcc.n	800dba8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800db98:	f00a fd3e 	bl	8018618 <sys_arch_protect>
 800db9c:	60b8      	str	r0, [r7, #8]
 800db9e:	68b8      	ldr	r0, [r7, #8]
 800dba0:	f00a fd48 	bl	8018634 <sys_arch_unprotect>
    return rmem;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	e0b5      	b.n	800dd14 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3b08      	subs	r3, #8
 800dbac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dbae:	69b8      	ldr	r0, [r7, #24]
 800dbb0:	f7ff fdea 	bl	800d788 <mem_to_ptr>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	881a      	ldrh	r2, [r3, #0]
 800dbbc:	8afb      	ldrh	r3, [r7, #22]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	3b08      	subs	r3, #8
 800dbc4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dbc6:	8bfa      	ldrh	r2, [r7, #30]
 800dbc8:	8abb      	ldrh	r3, [r7, #20]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d906      	bls.n	800dbdc <mem_trim+0xb0>
 800dbce:	4b55      	ldr	r3, [pc, #340]	@ (800dd24 <mem_trim+0x1f8>)
 800dbd0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800dbd4:	4956      	ldr	r1, [pc, #344]	@ (800dd30 <mem_trim+0x204>)
 800dbd6:	4855      	ldr	r0, [pc, #340]	@ (800dd2c <mem_trim+0x200>)
 800dbd8:	f00b fa74 	bl	80190c4 <iprintf>
  if (newsize > size) {
 800dbdc:	8bfa      	ldrh	r2, [r7, #30]
 800dbde:	8abb      	ldrh	r3, [r7, #20]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d901      	bls.n	800dbe8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e095      	b.n	800dd14 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800dbe8:	8bfa      	ldrh	r2, [r7, #30]
 800dbea:	8abb      	ldrh	r3, [r7, #20]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d101      	bne.n	800dbf4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	e08f      	b.n	800dd14 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dbf4:	484f      	ldr	r0, [pc, #316]	@ (800dd34 <mem_trim+0x208>)
 800dbf6:	f00a fcd3 	bl	80185a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	881b      	ldrh	r3, [r3, #0]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fdb0 	bl	800d764 <ptr_to_mem>
 800dc04:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	791b      	ldrb	r3, [r3, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d13f      	bne.n	800dc8e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dc16:	d106      	bne.n	800dc26 <mem_trim+0xfa>
 800dc18:	4b42      	ldr	r3, [pc, #264]	@ (800dd24 <mem_trim+0x1f8>)
 800dc1a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800dc1e:	4946      	ldr	r1, [pc, #280]	@ (800dd38 <mem_trim+0x20c>)
 800dc20:	4842      	ldr	r0, [pc, #264]	@ (800dd2c <mem_trim+0x200>)
 800dc22:	f00b fa4f 	bl	80190c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dc2c:	8afa      	ldrh	r2, [r7, #22]
 800dc2e:	8bfb      	ldrh	r3, [r7, #30]
 800dc30:	4413      	add	r3, r2
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	3308      	adds	r3, #8
 800dc36:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dc38:	4b40      	ldr	r3, [pc, #256]	@ (800dd3c <mem_trim+0x210>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d106      	bne.n	800dc50 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800dc42:	89fb      	ldrh	r3, [r7, #14]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fd8d 	bl	800d764 <ptr_to_mem>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	4a3b      	ldr	r2, [pc, #236]	@ (800dd3c <mem_trim+0x210>)
 800dc4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dc50:	89fb      	ldrh	r3, [r7, #14]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff fd86 	bl	800d764 <ptr_to_mem>
 800dc58:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	89ba      	ldrh	r2, [r7, #12]
 800dc64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	8afa      	ldrh	r2, [r7, #22]
 800dc6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	89fa      	ldrh	r2, [r7, #14]
 800dc70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dc7a:	d047      	beq.n	800dd0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff fd6f 	bl	800d764 <ptr_to_mem>
 800dc86:	4602      	mov	r2, r0
 800dc88:	89fb      	ldrh	r3, [r7, #14]
 800dc8a:	8053      	strh	r3, [r2, #2]
 800dc8c:	e03e      	b.n	800dd0c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dc8e:	8bfb      	ldrh	r3, [r7, #30]
 800dc90:	f103 0214 	add.w	r2, r3, #20
 800dc94:	8abb      	ldrh	r3, [r7, #20]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d838      	bhi.n	800dd0c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dc9a:	8afa      	ldrh	r2, [r7, #22]
 800dc9c:	8bfb      	ldrh	r3, [r7, #30]
 800dc9e:	4413      	add	r3, r2
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3308      	adds	r3, #8
 800dca4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dcae:	d106      	bne.n	800dcbe <mem_trim+0x192>
 800dcb0:	4b1c      	ldr	r3, [pc, #112]	@ (800dd24 <mem_trim+0x1f8>)
 800dcb2:	f240 3216 	movw	r2, #790	@ 0x316
 800dcb6:	4920      	ldr	r1, [pc, #128]	@ (800dd38 <mem_trim+0x20c>)
 800dcb8:	481c      	ldr	r0, [pc, #112]	@ (800dd2c <mem_trim+0x200>)
 800dcba:	f00b fa03 	bl	80190c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800dcbe:	89fb      	ldrh	r3, [r7, #14]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fd4f 	bl	800d764 <ptr_to_mem>
 800dcc6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800dcc8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd3c <mem_trim+0x210>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d202      	bcs.n	800dcd8 <mem_trim+0x1ac>
      lfree = mem2;
 800dcd2:	4a1a      	ldr	r2, [pc, #104]	@ (800dd3c <mem_trim+0x210>)
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	881a      	ldrh	r2, [r3, #0]
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	8afa      	ldrh	r2, [r7, #22]
 800dcea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	89fa      	ldrh	r2, [r7, #14]
 800dcf0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dcfa:	d007      	beq.n	800dd0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	881b      	ldrh	r3, [r3, #0]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7ff fd2f 	bl	800d764 <ptr_to_mem>
 800dd06:	4602      	mov	r2, r0
 800dd08:	89fb      	ldrh	r3, [r7, #14]
 800dd0a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dd0c:	4809      	ldr	r0, [pc, #36]	@ (800dd34 <mem_trim+0x208>)
 800dd0e:	f00a fc56 	bl	80185be <sys_mutex_unlock>
  return rmem;
 800dd12:	687b      	ldr	r3, [r7, #4]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3720      	adds	r7, #32
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	2000b030 	.word	0x2000b030
 800dd20:	2000b034 	.word	0x2000b034
 800dd24:	0801c150 	.word	0x0801c150
 800dd28:	0801c2dc 	.word	0x0801c2dc
 800dd2c:	0801c198 	.word	0x0801c198
 800dd30:	0801c2f4 	.word	0x0801c2f4
 800dd34:	2000b038 	.word	0x2000b038
 800dd38:	0801c314 	.word	0x0801c314
 800dd3c:	2000b03c 	.word	0x2000b03c

0800dd40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <mem_malloc+0x14>
    return NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e0e2      	b.n	800df1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dd54:	88fb      	ldrh	r3, [r7, #6]
 800dd56:	3303      	adds	r3, #3
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f023 0303 	bic.w	r3, r3, #3
 800dd5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dd60:	8bbb      	ldrh	r3, [r7, #28]
 800dd62:	2b0b      	cmp	r3, #11
 800dd64:	d801      	bhi.n	800dd6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dd66:	230c      	movs	r3, #12
 800dd68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dd6a:	8bbb      	ldrh	r3, [r7, #28]
 800dd6c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dd70:	d803      	bhi.n	800dd7a <mem_malloc+0x3a>
 800dd72:	8bba      	ldrh	r2, [r7, #28]
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d201      	bcs.n	800dd7e <mem_malloc+0x3e>
    return NULL;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e0cd      	b.n	800df1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dd7e:	4869      	ldr	r0, [pc, #420]	@ (800df24 <mem_malloc+0x1e4>)
 800dd80:	f00a fc0e 	bl	80185a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd84:	4b68      	ldr	r3, [pc, #416]	@ (800df28 <mem_malloc+0x1e8>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fcfd 	bl	800d788 <mem_to_ptr>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	83fb      	strh	r3, [r7, #30]
 800dd92:	e0b7      	b.n	800df04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dd94:	8bfb      	ldrh	r3, [r7, #30]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff fce4 	bl	800d764 <ptr_to_mem>
 800dd9c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f040 80a7 	bne.w	800def6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	461a      	mov	r2, r3
 800ddae:	8bfb      	ldrh	r3, [r7, #30]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	f1a3 0208 	sub.w	r2, r3, #8
 800ddb6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	f0c0 809c 	bcc.w	800def6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	8bfb      	ldrh	r3, [r7, #30]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	f1a3 0208 	sub.w	r2, r3, #8
 800ddcc:	8bbb      	ldrh	r3, [r7, #28]
 800ddce:	3314      	adds	r3, #20
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d333      	bcc.n	800de3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ddd4:	8bfa      	ldrh	r2, [r7, #30]
 800ddd6:	8bbb      	ldrh	r3, [r7, #28]
 800ddd8:	4413      	add	r3, r2
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	3308      	adds	r3, #8
 800ddde:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dde0:	8a7b      	ldrh	r3, [r7, #18]
 800dde2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dde6:	d106      	bne.n	800ddf6 <mem_malloc+0xb6>
 800dde8:	4b50      	ldr	r3, [pc, #320]	@ (800df2c <mem_malloc+0x1ec>)
 800ddea:	f240 3287 	movw	r2, #903	@ 0x387
 800ddee:	4950      	ldr	r1, [pc, #320]	@ (800df30 <mem_malloc+0x1f0>)
 800ddf0:	4850      	ldr	r0, [pc, #320]	@ (800df34 <mem_malloc+0x1f4>)
 800ddf2:	f00b f967 	bl	80190c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ddf6:	8a7b      	ldrh	r3, [r7, #18]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff fcb3 	bl	800d764 <ptr_to_mem>
 800ddfe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	881a      	ldrh	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8bfa      	ldrh	r2, [r7, #30]
 800de12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	8a7a      	ldrh	r2, [r7, #18]
 800de18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2201      	movs	r2, #1
 800de1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800de28:	d00b      	beq.n	800de42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fc98 	bl	800d764 <ptr_to_mem>
 800de34:	4602      	mov	r2, r0
 800de36:	8a7b      	ldrh	r3, [r7, #18]
 800de38:	8053      	strh	r3, [r2, #2]
 800de3a:	e002      	b.n	800de42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2201      	movs	r2, #1
 800de40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800de42:	4b39      	ldr	r3, [pc, #228]	@ (800df28 <mem_malloc+0x1e8>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d127      	bne.n	800de9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800de4c:	4b36      	ldr	r3, [pc, #216]	@ (800df28 <mem_malloc+0x1e8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800de52:	e005      	b.n	800de60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fc83 	bl	800d764 <ptr_to_mem>
 800de5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	791b      	ldrb	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <mem_malloc+0x132>
 800de68:	4b33      	ldr	r3, [pc, #204]	@ (800df38 <mem_malloc+0x1f8>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	69ba      	ldr	r2, [r7, #24]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d1f0      	bne.n	800de54 <mem_malloc+0x114>
          }
          lfree = cur;
 800de72:	4a2d      	ldr	r2, [pc, #180]	@ (800df28 <mem_malloc+0x1e8>)
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800de78:	4b2b      	ldr	r3, [pc, #172]	@ (800df28 <mem_malloc+0x1e8>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	4b2e      	ldr	r3, [pc, #184]	@ (800df38 <mem_malloc+0x1f8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	429a      	cmp	r2, r3
 800de82:	d00b      	beq.n	800de9c <mem_malloc+0x15c>
 800de84:	4b28      	ldr	r3, [pc, #160]	@ (800df28 <mem_malloc+0x1e8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	791b      	ldrb	r3, [r3, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d006      	beq.n	800de9c <mem_malloc+0x15c>
 800de8e:	4b27      	ldr	r3, [pc, #156]	@ (800df2c <mem_malloc+0x1ec>)
 800de90:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800de94:	4929      	ldr	r1, [pc, #164]	@ (800df3c <mem_malloc+0x1fc>)
 800de96:	4827      	ldr	r0, [pc, #156]	@ (800df34 <mem_malloc+0x1f4>)
 800de98:	f00b f914 	bl	80190c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800de9c:	4821      	ldr	r0, [pc, #132]	@ (800df24 <mem_malloc+0x1e4>)
 800de9e:	f00a fb8e 	bl	80185be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dea2:	8bba      	ldrh	r2, [r7, #28]
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	4413      	add	r3, r2
 800dea8:	3308      	adds	r3, #8
 800deaa:	4a23      	ldr	r2, [pc, #140]	@ (800df38 <mem_malloc+0x1f8>)
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	4293      	cmp	r3, r2
 800deb0:	d906      	bls.n	800dec0 <mem_malloc+0x180>
 800deb2:	4b1e      	ldr	r3, [pc, #120]	@ (800df2c <mem_malloc+0x1ec>)
 800deb4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800deb8:	4921      	ldr	r1, [pc, #132]	@ (800df40 <mem_malloc+0x200>)
 800deba:	481e      	ldr	r0, [pc, #120]	@ (800df34 <mem_malloc+0x1f4>)
 800debc:	f00b f902 	bl	80190c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f003 0303 	and.w	r3, r3, #3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d006      	beq.n	800ded8 <mem_malloc+0x198>
 800deca:	4b18      	ldr	r3, [pc, #96]	@ (800df2c <mem_malloc+0x1ec>)
 800decc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ded0:	491c      	ldr	r1, [pc, #112]	@ (800df44 <mem_malloc+0x204>)
 800ded2:	4818      	ldr	r0, [pc, #96]	@ (800df34 <mem_malloc+0x1f4>)
 800ded4:	f00b f8f6 	bl	80190c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d006      	beq.n	800def0 <mem_malloc+0x1b0>
 800dee2:	4b12      	ldr	r3, [pc, #72]	@ (800df2c <mem_malloc+0x1ec>)
 800dee4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800dee8:	4917      	ldr	r1, [pc, #92]	@ (800df48 <mem_malloc+0x208>)
 800deea:	4812      	ldr	r0, [pc, #72]	@ (800df34 <mem_malloc+0x1f4>)
 800deec:	f00b f8ea 	bl	80190c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	3308      	adds	r3, #8
 800def4:	e011      	b.n	800df1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800def6:	8bfb      	ldrh	r3, [r7, #30]
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff fc33 	bl	800d764 <ptr_to_mem>
 800defe:	4603      	mov	r3, r0
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df04:	8bfa      	ldrh	r2, [r7, #30]
 800df06:	8bbb      	ldrh	r3, [r7, #28]
 800df08:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800df0c:	429a      	cmp	r2, r3
 800df0e:	f4ff af41 	bcc.w	800dd94 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800df12:	4804      	ldr	r0, [pc, #16]	@ (800df24 <mem_malloc+0x1e4>)
 800df14:	f00a fb53 	bl	80185be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	2000b038 	.word	0x2000b038
 800df28:	2000b03c 	.word	0x2000b03c
 800df2c:	0801c150 	.word	0x0801c150
 800df30:	0801c314 	.word	0x0801c314
 800df34:	0801c198 	.word	0x0801c198
 800df38:	2000b034 	.word	0x2000b034
 800df3c:	0801c328 	.word	0x0801c328
 800df40:	0801c344 	.word	0x0801c344
 800df44:	0801c374 	.word	0x0801c374
 800df48:	0801c3a4 	.word	0x0801c3a4

0800df4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	3303      	adds	r3, #3
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800df68:	2300      	movs	r3, #0
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	e011      	b.n	800df92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	4413      	add	r3, r2
 800df8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	3301      	adds	r3, #1
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	885b      	ldrh	r3, [r3, #2]
 800df96:	461a      	mov	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4293      	cmp	r3, r2
 800df9c:	dbe7      	blt.n	800df6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800df9e:	bf00      	nop
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	80fb      	strh	r3, [r7, #6]
 800dfb6:	e009      	b.n	800dfcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dfb8:	88fb      	ldrh	r3, [r7, #6]
 800dfba:	4a08      	ldr	r2, [pc, #32]	@ (800dfdc <memp_init+0x30>)
 800dfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7ff ffc3 	bl	800df4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	80fb      	strh	r3, [r7, #6]
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	2b0c      	cmp	r3, #12
 800dfd0:	d9f2      	bls.n	800dfb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0801ebd4 	.word	0x0801ebd4

0800dfe0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800dfe8:	f00a fb16 	bl	8018618 <sys_arch_protect>
 800dfec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d015      	beq.n	800e028 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	6812      	ldr	r2, [r2, #0]
 800e004:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	f003 0303 	and.w	r3, r3, #3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d006      	beq.n	800e01e <do_memp_malloc_pool+0x3e>
 800e010:	4b09      	ldr	r3, [pc, #36]	@ (800e038 <do_memp_malloc_pool+0x58>)
 800e012:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e016:	4909      	ldr	r1, [pc, #36]	@ (800e03c <do_memp_malloc_pool+0x5c>)
 800e018:	4809      	ldr	r0, [pc, #36]	@ (800e040 <do_memp_malloc_pool+0x60>)
 800e01a:	f00b f853 	bl	80190c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f00a fb08 	bl	8018634 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	e003      	b.n	800e030 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f00a fb03 	bl	8018634 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	0801c3c8 	.word	0x0801c3c8
 800e03c:	0801c3f8 	.word	0x0801c3f8
 800e040:	0801c41c 	.word	0x0801c41c

0800e044 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	2b0c      	cmp	r3, #12
 800e052:	d908      	bls.n	800e066 <memp_malloc+0x22>
 800e054:	4b0a      	ldr	r3, [pc, #40]	@ (800e080 <memp_malloc+0x3c>)
 800e056:	f240 1257 	movw	r2, #343	@ 0x157
 800e05a:	490a      	ldr	r1, [pc, #40]	@ (800e084 <memp_malloc+0x40>)
 800e05c:	480a      	ldr	r0, [pc, #40]	@ (800e088 <memp_malloc+0x44>)
 800e05e:	f00b f831 	bl	80190c4 <iprintf>
 800e062:	2300      	movs	r3, #0
 800e064:	e008      	b.n	800e078 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	4a08      	ldr	r2, [pc, #32]	@ (800e08c <memp_malloc+0x48>)
 800e06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff ffb6 	bl	800dfe0 <do_memp_malloc_pool>
 800e074:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e076:	68fb      	ldr	r3, [r7, #12]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	0801c3c8 	.word	0x0801c3c8
 800e084:	0801c458 	.word	0x0801c458
 800e088:	0801c41c 	.word	0x0801c41c
 800e08c:	0801ebd4 	.word	0x0801ebd4

0800e090 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	f003 0303 	and.w	r3, r3, #3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d006      	beq.n	800e0b2 <do_memp_free_pool+0x22>
 800e0a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e0dc <do_memp_free_pool+0x4c>)
 800e0a6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e0aa:	490d      	ldr	r1, [pc, #52]	@ (800e0e0 <do_memp_free_pool+0x50>)
 800e0ac:	480d      	ldr	r0, [pc, #52]	@ (800e0e4 <do_memp_free_pool+0x54>)
 800e0ae:	f00b f809 	bl	80190c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e0b6:	f00a faaf 	bl	8018618 <sys_arch_protect>
 800e0ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e0ce:	68b8      	ldr	r0, [r7, #8]
 800e0d0:	f00a fab0 	bl	8018634 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e0d4:	bf00      	nop
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	0801c3c8 	.word	0x0801c3c8
 800e0e0:	0801c478 	.word	0x0801c478
 800e0e4:	0801c41c 	.word	0x0801c41c

0800e0e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	6039      	str	r1, [r7, #0]
 800e0f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	2b0c      	cmp	r3, #12
 800e0f8:	d907      	bls.n	800e10a <memp_free+0x22>
 800e0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <memp_free+0x44>)
 800e0fc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e100:	490b      	ldr	r1, [pc, #44]	@ (800e130 <memp_free+0x48>)
 800e102:	480c      	ldr	r0, [pc, #48]	@ (800e134 <memp_free+0x4c>)
 800e104:	f00a ffde 	bl	80190c4 <iprintf>
 800e108:	e00c      	b.n	800e124 <memp_free+0x3c>

  if (mem == NULL) {
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d008      	beq.n	800e122 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e110:	79fb      	ldrb	r3, [r7, #7]
 800e112:	4a09      	ldr	r2, [pc, #36]	@ (800e138 <memp_free+0x50>)
 800e114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff ffb8 	bl	800e090 <do_memp_free_pool>
 800e120:	e000      	b.n	800e124 <memp_free+0x3c>
    return;
 800e122:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e124:	3708      	adds	r7, #8
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	0801c3c8 	.word	0x0801c3c8
 800e130:	0801c498 	.word	0x0801c498
 800e134:	0801c41c 	.word	0x0801c41c
 800e138:	0801ebd4 	.word	0x0801ebd4

0800e13c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e13c:	b480      	push	{r7}
 800e13e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e140:	bf00      	nop
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
	...

0800e14c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d108      	bne.n	800e172 <netif_add+0x26>
 800e160:	4b57      	ldr	r3, [pc, #348]	@ (800e2c0 <netif_add+0x174>)
 800e162:	f240 1227 	movw	r2, #295	@ 0x127
 800e166:	4957      	ldr	r1, [pc, #348]	@ (800e2c4 <netif_add+0x178>)
 800e168:	4857      	ldr	r0, [pc, #348]	@ (800e2c8 <netif_add+0x17c>)
 800e16a:	f00a ffab 	bl	80190c4 <iprintf>
 800e16e:	2300      	movs	r3, #0
 800e170:	e0a2      	b.n	800e2b8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	d108      	bne.n	800e18a <netif_add+0x3e>
 800e178:	4b51      	ldr	r3, [pc, #324]	@ (800e2c0 <netif_add+0x174>)
 800e17a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e17e:	4953      	ldr	r1, [pc, #332]	@ (800e2cc <netif_add+0x180>)
 800e180:	4851      	ldr	r0, [pc, #324]	@ (800e2c8 <netif_add+0x17c>)
 800e182:	f00a ff9f 	bl	80190c4 <iprintf>
 800e186:	2300      	movs	r3, #0
 800e188:	e096      	b.n	800e2b8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e190:	4b4f      	ldr	r3, [pc, #316]	@ (800e2d0 <netif_add+0x184>)
 800e192:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e19a:	4b4d      	ldr	r3, [pc, #308]	@ (800e2d0 <netif_add+0x184>)
 800e19c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e1a4:	4b4a      	ldr	r3, [pc, #296]	@ (800e2d0 <netif_add+0x184>)
 800e1a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	4a45      	ldr	r2, [pc, #276]	@ (800e2d4 <netif_add+0x188>)
 800e1be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a3a      	ldr	r2, [r7, #32]
 800e1d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e1da:	4b3f      	ldr	r3, [pc, #252]	@ (800e2d8 <netif_add+0x18c>)
 800e1dc:	781a      	ldrb	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	68b9      	ldr	r1, [r7, #8]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f913 	bl	800e41c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	4798      	blx	r3
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <netif_add+0xba>
    return NULL;
 800e202:	2300      	movs	r3, #0
 800e204:	e058      	b.n	800e2b8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e20c:	2bff      	cmp	r3, #255	@ 0xff
 800e20e:	d103      	bne.n	800e218 <netif_add+0xcc>
        netif->num = 0;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e21c:	4b2f      	ldr	r3, [pc, #188]	@ (800e2dc <netif_add+0x190>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	617b      	str	r3, [r7, #20]
 800e222:	e02b      	b.n	800e27c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d106      	bne.n	800e23a <netif_add+0xee>
 800e22c:	4b24      	ldr	r3, [pc, #144]	@ (800e2c0 <netif_add+0x174>)
 800e22e:	f240 128b 	movw	r2, #395	@ 0x18b
 800e232:	492b      	ldr	r1, [pc, #172]	@ (800e2e0 <netif_add+0x194>)
 800e234:	4824      	ldr	r0, [pc, #144]	@ (800e2c8 <netif_add+0x17c>)
 800e236:	f00a ff45 	bl	80190c4 <iprintf>
        num_netifs++;
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	3301      	adds	r3, #1
 800e23e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2bff      	cmp	r3, #255	@ 0xff
 800e244:	dd06      	ble.n	800e254 <netif_add+0x108>
 800e246:	4b1e      	ldr	r3, [pc, #120]	@ (800e2c0 <netif_add+0x174>)
 800e248:	f240 128d 	movw	r2, #397	@ 0x18d
 800e24c:	4925      	ldr	r1, [pc, #148]	@ (800e2e4 <netif_add+0x198>)
 800e24e:	481e      	ldr	r0, [pc, #120]	@ (800e2c8 <netif_add+0x17c>)
 800e250:	f00a ff38 	bl	80190c4 <iprintf>
        if (netif2->num == netif->num) {
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e260:	429a      	cmp	r2, r3
 800e262:	d108      	bne.n	800e276 <netif_add+0x12a>
          netif->num++;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e26a:	3301      	adds	r3, #1
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e274:	e005      	b.n	800e282 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1d0      	bne.n	800e224 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1be      	bne.n	800e206 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e28e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e290:	d103      	bne.n	800e29a <netif_add+0x14e>
    netif_num = 0;
 800e292:	4b11      	ldr	r3, [pc, #68]	@ (800e2d8 <netif_add+0x18c>)
 800e294:	2200      	movs	r2, #0
 800e296:	701a      	strb	r2, [r3, #0]
 800e298:	e006      	b.n	800e2a8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e2d8 <netif_add+0x18c>)
 800e2a6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2dc <netif_add+0x190>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e2b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e2dc <netif_add+0x190>)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	0801c4b4 	.word	0x0801c4b4
 800e2c4:	0801c548 	.word	0x0801c548
 800e2c8:	0801c504 	.word	0x0801c504
 800e2cc:	0801c564 	.word	0x0801c564
 800e2d0:	0801ec48 	.word	0x0801ec48
 800e2d4:	0800e6f7 	.word	0x0800e6f7
 800e2d8:	2000e114 	.word	0x2000e114
 800e2dc:	2000e10c 	.word	0x2000e10c
 800e2e0:	0801c588 	.word	0x0801c588
 800e2e4:	0801c59c 	.word	0x0801c59c

0800e2e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f002 fe51 	bl	8010f9c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f007 fcfd 	bl	8015cfc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e302:	bf00      	nop
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d106      	bne.n	800e32c <netif_do_set_ipaddr+0x20>
 800e31e:	4b1d      	ldr	r3, [pc, #116]	@ (800e394 <netif_do_set_ipaddr+0x88>)
 800e320:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e324:	491c      	ldr	r1, [pc, #112]	@ (800e398 <netif_do_set_ipaddr+0x8c>)
 800e326:	481d      	ldr	r0, [pc, #116]	@ (800e39c <netif_do_set_ipaddr+0x90>)
 800e328:	f00a fecc 	bl	80190c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <netif_do_set_ipaddr+0x34>
 800e332:	4b18      	ldr	r3, [pc, #96]	@ (800e394 <netif_do_set_ipaddr+0x88>)
 800e334:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e338:	4917      	ldr	r1, [pc, #92]	@ (800e398 <netif_do_set_ipaddr+0x8c>)
 800e33a:	4818      	ldr	r0, [pc, #96]	@ (800e39c <netif_do_set_ipaddr+0x90>)
 800e33c:	f00a fec2 	bl	80190c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3304      	adds	r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d01c      	beq.n	800e388 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3304      	adds	r3, #4
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e35e:	f107 0314 	add.w	r3, r7, #20
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff ffbf 	bl	800e2e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <netif_do_set_ipaddr+0x6a>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	e000      	b.n	800e378 <netif_do_set_ipaddr+0x6c>
 800e376:	2300      	movs	r3, #0
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e37c:	2101      	movs	r1, #1
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f000 f8d2 	bl	800e528 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e384:	2301      	movs	r3, #1
 800e386:	e000      	b.n	800e38a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0801c4b4 	.word	0x0801c4b4
 800e398:	0801c5cc 	.word	0x0801c5cc
 800e39c:	0801c504 	.word	0x0801c504

0800e3a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3308      	adds	r3, #8
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d00a      	beq.n	800e3d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <netif_do_set_netmask+0x26>
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	e000      	b.n	800e3c8 <netif_do_set_netmask+0x28>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60f8      	str	r0, [r7, #12]
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	330c      	adds	r3, #12
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d00a      	beq.n	800e40e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <netif_do_set_gw+0x26>
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	e000      	b.n	800e406 <netif_do_set_gw+0x28>
 800e404:	2300      	movs	r3, #0
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e40a:	2301      	movs	r3, #1
 800e40c:	e000      	b.n	800e410 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b088      	sub	sp, #32
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
 800e428:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e42a:	2300      	movs	r3, #0
 800e42c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d101      	bne.n	800e43c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e438:	4b1c      	ldr	r3, [pc, #112]	@ (800e4ac <netif_set_addr+0x90>)
 800e43a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e442:	4b1a      	ldr	r3, [pc, #104]	@ (800e4ac <netif_set_addr+0x90>)
 800e444:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e44c:	4b17      	ldr	r3, [pc, #92]	@ (800e4ac <netif_set_addr+0x90>)
 800e44e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <netif_set_addr+0x42>
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <netif_set_addr+0x46>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <netif_set_addr+0x48>
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d006      	beq.n	800e47a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e46c:	f107 0310 	add.w	r3, r7, #16
 800e470:	461a      	mov	r2, r3
 800e472:	68b9      	ldr	r1, [r7, #8]
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f7ff ff49 	bl	800e30c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e47a:	69fa      	ldr	r2, [r7, #28]
 800e47c:	6879      	ldr	r1, [r7, #4]
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7ff ff8e 	bl	800e3a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7ff ffa8 	bl	800e3de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e494:	f107 0310 	add.w	r3, r7, #16
 800e498:	461a      	mov	r2, r3
 800e49a:	68b9      	ldr	r1, [r7, #8]
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7ff ff35 	bl	800e30c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e4a2:	bf00      	nop
 800e4a4:	3720      	adds	r7, #32
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0801ec48 	.word	0x0801ec48

0800e4b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e4b8:	4a04      	ldr	r2, [pc, #16]	@ (800e4cc <netif_set_default+0x1c>)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e4be:	bf00      	nop
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	2000e110 	.word	0x2000e110

0800e4d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d107      	bne.n	800e4ee <netif_set_up+0x1e>
 800e4de:	4b0f      	ldr	r3, [pc, #60]	@ (800e51c <netif_set_up+0x4c>)
 800e4e0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e4e4:	490e      	ldr	r1, [pc, #56]	@ (800e520 <netif_set_up+0x50>)
 800e4e6:	480f      	ldr	r0, [pc, #60]	@ (800e524 <netif_set_up+0x54>)
 800e4e8:	f00a fdec 	bl	80190c4 <iprintf>
 800e4ec:	e013      	b.n	800e516 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e4f4:	f003 0301 	and.w	r3, r3, #1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10c      	bne.n	800e516 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	b2da      	uxtb	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e50e:	2103      	movs	r1, #3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f809 	bl	800e528 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	0801c4b4 	.word	0x0801c4b4
 800e520:	0801c63c 	.word	0x0801c63c
 800e524:	0801c504 	.word	0x0801c504

0800e528 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <netif_issue_reports+0x20>
 800e53a:	4b18      	ldr	r3, [pc, #96]	@ (800e59c <netif_issue_reports+0x74>)
 800e53c:	f240 326d 	movw	r2, #877	@ 0x36d
 800e540:	4917      	ldr	r1, [pc, #92]	@ (800e5a0 <netif_issue_reports+0x78>)
 800e542:	4818      	ldr	r0, [pc, #96]	@ (800e5a4 <netif_issue_reports+0x7c>)
 800e544:	f00a fdbe 	bl	80190c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e54e:	f003 0304 	and.w	r3, r3, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	d01e      	beq.n	800e594 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e55c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e560:	2b00      	cmp	r3, #0
 800e562:	d017      	beq.n	800e594 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	f003 0301 	and.w	r3, r3, #1
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d013      	beq.n	800e596 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	3304      	adds	r3, #4
 800e572:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00e      	beq.n	800e596 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e57e:	f003 0308 	and.w	r3, r3, #8
 800e582:	2b00      	cmp	r3, #0
 800e584:	d007      	beq.n	800e596 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	3304      	adds	r3, #4
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f008 fb1f 	bl	8016bd0 <etharp_request>
 800e592:	e000      	b.n	800e596 <netif_issue_reports+0x6e>
    return;
 800e594:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	0801c4b4 	.word	0x0801c4b4
 800e5a0:	0801c658 	.word	0x0801c658
 800e5a4:	0801c504 	.word	0x0801c504

0800e5a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d107      	bne.n	800e5c6 <netif_set_down+0x1e>
 800e5b6:	4b12      	ldr	r3, [pc, #72]	@ (800e600 <netif_set_down+0x58>)
 800e5b8:	f240 329b 	movw	r2, #923	@ 0x39b
 800e5bc:	4911      	ldr	r1, [pc, #68]	@ (800e604 <netif_set_down+0x5c>)
 800e5be:	4812      	ldr	r0, [pc, #72]	@ (800e608 <netif_set_down+0x60>)
 800e5c0:	f00a fd80 	bl	80190c4 <iprintf>
 800e5c4:	e019      	b.n	800e5fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d012      	beq.n	800e5fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e5da:	f023 0301 	bic.w	r3, r3, #1
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e5ec:	f003 0308 	and.w	r3, r3, #8
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f007 fea9 	bl	801634c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	0801c4b4 	.word	0x0801c4b4
 800e604:	0801c67c 	.word	0x0801c67c
 800e608:	0801c504 	.word	0x0801c504

0800e60c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d107      	bne.n	800e62a <netif_set_link_up+0x1e>
 800e61a:	4b13      	ldr	r3, [pc, #76]	@ (800e668 <netif_set_link_up+0x5c>)
 800e61c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e620:	4912      	ldr	r1, [pc, #72]	@ (800e66c <netif_set_link_up+0x60>)
 800e622:	4813      	ldr	r0, [pc, #76]	@ (800e670 <netif_set_link_up+0x64>)
 800e624:	f00a fd4e 	bl	80190c4 <iprintf>
 800e628:	e01b      	b.n	800e662 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e630:	f003 0304 	and.w	r3, r3, #4
 800e634:	2b00      	cmp	r3, #0
 800e636:	d114      	bne.n	800e662 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e63e:	f043 0304 	orr.w	r3, r3, #4
 800e642:	b2da      	uxtb	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e64a:	2103      	movs	r1, #3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff ff6b 	bl	800e528 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <netif_set_link_up+0x56>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	69db      	ldr	r3, [r3, #28]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	0801c4b4 	.word	0x0801c4b4
 800e66c:	0801c69c 	.word	0x0801c69c
 800e670:	0801c504 	.word	0x0801c504

0800e674 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d107      	bne.n	800e692 <netif_set_link_down+0x1e>
 800e682:	4b11      	ldr	r3, [pc, #68]	@ (800e6c8 <netif_set_link_down+0x54>)
 800e684:	f240 4206 	movw	r2, #1030	@ 0x406
 800e688:	4910      	ldr	r1, [pc, #64]	@ (800e6cc <netif_set_link_down+0x58>)
 800e68a:	4811      	ldr	r0, [pc, #68]	@ (800e6d0 <netif_set_link_down+0x5c>)
 800e68c:	f00a fd1a 	bl	80190c4 <iprintf>
 800e690:	e017      	b.n	800e6c2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d010      	beq.n	800e6c2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6a6:	f023 0304 	bic.w	r3, r3, #4
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d003      	beq.n	800e6c2 <netif_set_link_down+0x4e>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	69db      	ldr	r3, [r3, #28]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	0801c4b4 	.word	0x0801c4b4
 800e6cc:	0801c6c0 	.word	0x0801c6c0
 800e6d0:	0801c504 	.word	0x0801c504

0800e6d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	61da      	str	r2, [r3, #28]
  }
}
 800e6ea:	bf00      	nop
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e6f6:	b480      	push	{r7}
 800e6f8:	b085      	sub	sp, #20
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	60f8      	str	r0, [r7, #12]
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e702:	f06f 030b 	mvn.w	r3, #11
}
 800e706:	4618      	mov	r0, r3
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
	...

0800e714 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	4603      	mov	r3, r0
 800e71c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e71e:	79fb      	ldrb	r3, [r7, #7]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d013      	beq.n	800e74c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e724:	4b0d      	ldr	r3, [pc, #52]	@ (800e75c <netif_get_by_index+0x48>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	60fb      	str	r3, [r7, #12]
 800e72a:	e00c      	b.n	800e746 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e732:	3301      	adds	r3, #1
 800e734:	b2db      	uxtb	r3, r3
 800e736:	79fa      	ldrb	r2, [r7, #7]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d101      	bne.n	800e740 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	e006      	b.n	800e74e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1ef      	bne.n	800e72c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	2000e10c 	.word	0x2000e10c

0800e760 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e766:	f009 ff57 	bl	8018618 <sys_arch_protect>
 800e76a:	6038      	str	r0, [r7, #0]
 800e76c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a4 <pbuf_free_ooseq+0x44>)
 800e76e:	2200      	movs	r2, #0
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	6838      	ldr	r0, [r7, #0]
 800e774:	f009 ff5e 	bl	8018634 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e778:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a8 <pbuf_free_ooseq+0x48>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	607b      	str	r3, [r7, #4]
 800e77e:	e00a      	b.n	800e796 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e784:	2b00      	cmp	r3, #0
 800e786:	d003      	beq.n	800e790 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f002 fc45 	bl	8011018 <tcp_free_ooseq>
      return;
 800e78e:	e005      	b.n	800e79c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	607b      	str	r3, [r7, #4]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1f1      	bne.n	800e780 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	2000e115 	.word	0x2000e115
 800e7a8:	2000e124 	.word	0x2000e124

0800e7ac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e7b4:	f7ff ffd4 	bl	800e760 <pbuf_free_ooseq>
}
 800e7b8:	bf00      	nop
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e7c6:	f009 ff27 	bl	8018618 <sys_arch_protect>
 800e7ca:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e7cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e80c <pbuf_pool_is_empty+0x4c>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e7d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e80c <pbuf_pool_is_empty+0x4c>)
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f009 ff2b 	bl	8018634 <sys_arch_unprotect>

  if (!queued) {
 800e7de:	78fb      	ldrb	r3, [r7, #3]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10f      	bne.n	800e804 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	480a      	ldr	r0, [pc, #40]	@ (800e810 <pbuf_pool_is_empty+0x50>)
 800e7e8:	f7fe fed6 	bl	800d598 <tcpip_try_callback>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d008      	beq.n	800e804 <pbuf_pool_is_empty+0x44>
 800e7f2:	f009 ff11 	bl	8018618 <sys_arch_protect>
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	4b04      	ldr	r3, [pc, #16]	@ (800e80c <pbuf_pool_is_empty+0x4c>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	701a      	strb	r2, [r3, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f009 ff18 	bl	8018634 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	2000e115 	.word	0x2000e115
 800e810:	0800e7ad 	.word	0x0800e7ad

0800e814 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	4611      	mov	r1, r2
 800e820:	461a      	mov	r2, r3
 800e822:	460b      	mov	r3, r1
 800e824:	80fb      	strh	r3, [r7, #6]
 800e826:	4613      	mov	r3, r2
 800e828:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	88fa      	ldrh	r2, [r7, #6]
 800e83a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	88ba      	ldrh	r2, [r7, #4]
 800e840:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e842:	8b3b      	ldrh	r3, [r7, #24]
 800e844:	b2da      	uxtb	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	7f3a      	ldrb	r2, [r7, #28]
 800e84e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2201      	movs	r2, #1
 800e854:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	73da      	strb	r2, [r3, #15]
}
 800e85c:	bf00      	nop
 800e85e:	3714      	adds	r7, #20
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	@ 0x30
 800e86c:	af02      	add	r7, sp, #8
 800e86e:	4603      	mov	r3, r0
 800e870:	71fb      	strb	r3, [r7, #7]
 800e872:	460b      	mov	r3, r1
 800e874:	80bb      	strh	r3, [r7, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e87e:	887b      	ldrh	r3, [r7, #2]
 800e880:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e884:	d07f      	beq.n	800e986 <pbuf_alloc+0x11e>
 800e886:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e88a:	f300 80c8 	bgt.w	800ea1e <pbuf_alloc+0x1b6>
 800e88e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e892:	d010      	beq.n	800e8b6 <pbuf_alloc+0x4e>
 800e894:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e898:	f300 80c1 	bgt.w	800ea1e <pbuf_alloc+0x1b6>
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d002      	beq.n	800e8a6 <pbuf_alloc+0x3e>
 800e8a0:	2b41      	cmp	r3, #65	@ 0x41
 800e8a2:	f040 80bc 	bne.w	800ea1e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e8a6:	887a      	ldrh	r2, [r7, #2]
 800e8a8:	88bb      	ldrh	r3, [r7, #4]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f000 f8d1 	bl	800ea54 <pbuf_alloc_reference>
 800e8b2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800e8b4:	e0bd      	b.n	800ea32 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e8be:	88bb      	ldrh	r3, [r7, #4]
 800e8c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e8c2:	200c      	movs	r0, #12
 800e8c4:	f7ff fbbe 	bl	800e044 <memp_malloc>
 800e8c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d109      	bne.n	800e8e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e8d0:	f7ff ff76 	bl	800e7c0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e8da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8dc:	f000 faa8 	bl	800ee30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e0a7      	b.n	800ea34 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e8e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e8e6:	3303      	adds	r3, #3
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	8b7a      	ldrh	r2, [r7, #26]
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	bf28      	it	cs
 800e8fc:	4613      	movcs	r3, r2
 800e8fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e900:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e902:	3310      	adds	r3, #16
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	4413      	add	r3, r2
 800e908:	3303      	adds	r3, #3
 800e90a:	f023 0303 	bic.w	r3, r3, #3
 800e90e:	4618      	mov	r0, r3
 800e910:	89f9      	ldrh	r1, [r7, #14]
 800e912:	8b7a      	ldrh	r2, [r7, #26]
 800e914:	2300      	movs	r3, #0
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	887b      	ldrh	r3, [r7, #2]
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	460b      	mov	r3, r1
 800e91e:	4601      	mov	r1, r0
 800e920:	6938      	ldr	r0, [r7, #16]
 800e922:	f7ff ff77 	bl	800e814 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	f003 0303 	and.w	r3, r3, #3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d006      	beq.n	800e940 <pbuf_alloc+0xd8>
 800e932:	4b42      	ldr	r3, [pc, #264]	@ (800ea3c <pbuf_alloc+0x1d4>)
 800e934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e938:	4941      	ldr	r1, [pc, #260]	@ (800ea40 <pbuf_alloc+0x1d8>)
 800e93a:	4842      	ldr	r0, [pc, #264]	@ (800ea44 <pbuf_alloc+0x1dc>)
 800e93c:	f00a fbc2 	bl	80190c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e940:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e942:	3303      	adds	r3, #3
 800e944:	f023 0303 	bic.w	r3, r3, #3
 800e948:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800e94c:	d106      	bne.n	800e95c <pbuf_alloc+0xf4>
 800e94e:	4b3b      	ldr	r3, [pc, #236]	@ (800ea3c <pbuf_alloc+0x1d4>)
 800e950:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e954:	493c      	ldr	r1, [pc, #240]	@ (800ea48 <pbuf_alloc+0x1e0>)
 800e956:	483b      	ldr	r0, [pc, #236]	@ (800ea44 <pbuf_alloc+0x1dc>)
 800e958:	f00a fbb4 	bl	80190c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d102      	bne.n	800e968 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24
 800e966:	e002      	b.n	800e96e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e972:	8b7a      	ldrh	r2, [r7, #26]
 800e974:	89fb      	ldrh	r3, [r7, #14]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e97e:	8b7b      	ldrh	r3, [r7, #26]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d19e      	bne.n	800e8c2 <pbuf_alloc+0x5a>
      break;
 800e984:	e055      	b.n	800ea32 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e988:	3303      	adds	r3, #3
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	f023 0303 	bic.w	r3, r3, #3
 800e990:	b29a      	uxth	r2, r3
 800e992:	88bb      	ldrh	r3, [r7, #4]
 800e994:	3303      	adds	r3, #3
 800e996:	b29b      	uxth	r3, r3
 800e998:	f023 0303 	bic.w	r3, r3, #3
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	4413      	add	r3, r2
 800e9a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e9a2:	8b3b      	ldrh	r3, [r7, #24]
 800e9a4:	3310      	adds	r3, #16
 800e9a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e9a8:	8b3a      	ldrh	r2, [r7, #24]
 800e9aa:	88bb      	ldrh	r3, [r7, #4]
 800e9ac:	3303      	adds	r3, #3
 800e9ae:	f023 0303 	bic.w	r3, r3, #3
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d306      	bcc.n	800e9c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e9b6:	8afa      	ldrh	r2, [r7, #22]
 800e9b8:	88bb      	ldrh	r3, [r7, #4]
 800e9ba:	3303      	adds	r3, #3
 800e9bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d201      	bcs.n	800e9c8 <pbuf_alloc+0x160>
        return NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	e035      	b.n	800ea34 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e9c8:	8afb      	ldrh	r3, [r7, #22]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff f9b8 	bl	800dd40 <mem_malloc>
 800e9d0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <pbuf_alloc+0x174>
        return NULL;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	e02b      	b.n	800ea34 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e9dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e9de:	3310      	adds	r3, #16
 800e9e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3303      	adds	r3, #3
 800e9e6:	f023 0303 	bic.w	r3, r3, #3
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	88b9      	ldrh	r1, [r7, #4]
 800e9ee:	88ba      	ldrh	r2, [r7, #4]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	887b      	ldrh	r3, [r7, #2]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e9fe:	f7ff ff09 	bl	800e814 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ea02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f003 0303 	and.w	r3, r3, #3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d010      	beq.n	800ea30 <pbuf_alloc+0x1c8>
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea3c <pbuf_alloc+0x1d4>)
 800ea10:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ea14:	490d      	ldr	r1, [pc, #52]	@ (800ea4c <pbuf_alloc+0x1e4>)
 800ea16:	480b      	ldr	r0, [pc, #44]	@ (800ea44 <pbuf_alloc+0x1dc>)
 800ea18:	f00a fb54 	bl	80190c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ea1c:	e008      	b.n	800ea30 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ea1e:	4b07      	ldr	r3, [pc, #28]	@ (800ea3c <pbuf_alloc+0x1d4>)
 800ea20:	f240 1227 	movw	r2, #295	@ 0x127
 800ea24:	490a      	ldr	r1, [pc, #40]	@ (800ea50 <pbuf_alloc+0x1e8>)
 800ea26:	4807      	ldr	r0, [pc, #28]	@ (800ea44 <pbuf_alloc+0x1dc>)
 800ea28:	f00a fb4c 	bl	80190c4 <iprintf>
      return NULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	e001      	b.n	800ea34 <pbuf_alloc+0x1cc>
      break;
 800ea30:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3728      	adds	r7, #40	@ 0x28
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0801c6e4 	.word	0x0801c6e4
 800ea40:	0801c714 	.word	0x0801c714
 800ea44:	0801c744 	.word	0x0801c744
 800ea48:	0801c76c 	.word	0x0801c76c
 800ea4c:	0801c7a0 	.word	0x0801c7a0
 800ea50:	0801c7cc 	.word	0x0801c7cc

0800ea54 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af02      	add	r7, sp, #8
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	807b      	strh	r3, [r7, #2]
 800ea60:	4613      	mov	r3, r2
 800ea62:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ea64:	883b      	ldrh	r3, [r7, #0]
 800ea66:	2b41      	cmp	r3, #65	@ 0x41
 800ea68:	d009      	beq.n	800ea7e <pbuf_alloc_reference+0x2a>
 800ea6a:	883b      	ldrh	r3, [r7, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d006      	beq.n	800ea7e <pbuf_alloc_reference+0x2a>
 800ea70:	4b0f      	ldr	r3, [pc, #60]	@ (800eab0 <pbuf_alloc_reference+0x5c>)
 800ea72:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ea76:	490f      	ldr	r1, [pc, #60]	@ (800eab4 <pbuf_alloc_reference+0x60>)
 800ea78:	480f      	ldr	r0, [pc, #60]	@ (800eab8 <pbuf_alloc_reference+0x64>)
 800ea7a:	f00a fb23 	bl	80190c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ea7e:	200b      	movs	r0, #11
 800ea80:	f7ff fae0 	bl	800e044 <memp_malloc>
 800ea84:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e00b      	b.n	800eaa8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ea90:	8879      	ldrh	r1, [r7, #2]
 800ea92:	887a      	ldrh	r2, [r7, #2]
 800ea94:	2300      	movs	r3, #0
 800ea96:	9301      	str	r3, [sp, #4]
 800ea98:	883b      	ldrh	r3, [r7, #0]
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	6879      	ldr	r1, [r7, #4]
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7ff feb7 	bl	800e814 <pbuf_init_alloced_pbuf>
  return p;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	0801c6e4 	.word	0x0801c6e4
 800eab4:	0801c7e8 	.word	0x0801c7e8
 800eab8:	0801c744 	.word	0x0801c744

0800eabc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
 800eac8:	460b      	mov	r3, r1
 800eaca:	81bb      	strh	r3, [r7, #12]
 800eacc:	4613      	mov	r3, r2
 800eace:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ead4:	8a7b      	ldrh	r3, [r7, #18]
 800ead6:	3303      	adds	r3, #3
 800ead8:	f023 0203 	bic.w	r2, r3, #3
 800eadc:	89bb      	ldrh	r3, [r7, #12]
 800eade:	441a      	add	r2, r3
 800eae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d901      	bls.n	800eaea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	e018      	b.n	800eb1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d007      	beq.n	800eb00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800eaf0:	8a7b      	ldrh	r3, [r7, #18]
 800eaf2:	3303      	adds	r3, #3
 800eaf4:	f023 0303 	bic.w	r3, r3, #3
 800eaf8:	6a3a      	ldr	r2, [r7, #32]
 800eafa:	4413      	add	r3, r2
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	e001      	b.n	800eb04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800eb00:	2300      	movs	r3, #0
 800eb02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	89b9      	ldrh	r1, [r7, #12]
 800eb08:	89ba      	ldrh	r2, [r7, #12]
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	897b      	ldrh	r3, [r7, #10]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	460b      	mov	r3, r1
 800eb14:	6979      	ldr	r1, [r7, #20]
 800eb16:	f7ff fe7d 	bl	800e814 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800eb1a:	687b      	ldr	r3, [r7, #4]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d106      	bne.n	800eb44 <pbuf_realloc+0x20>
 800eb36:	4b3a      	ldr	r3, [pc, #232]	@ (800ec20 <pbuf_realloc+0xfc>)
 800eb38:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800eb3c:	4939      	ldr	r1, [pc, #228]	@ (800ec24 <pbuf_realloc+0x100>)
 800eb3e:	483a      	ldr	r0, [pc, #232]	@ (800ec28 <pbuf_realloc+0x104>)
 800eb40:	f00a fac0 	bl	80190c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	891b      	ldrh	r3, [r3, #8]
 800eb48:	887a      	ldrh	r2, [r7, #2]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d263      	bcs.n	800ec16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	891a      	ldrh	r2, [r3, #8]
 800eb52:	887b      	ldrh	r3, [r7, #2]
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eb58:	887b      	ldrh	r3, [r7, #2]
 800eb5a:	817b      	strh	r3, [r7, #10]
  q = p;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800eb60:	e018      	b.n	800eb94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	895b      	ldrh	r3, [r3, #10]
 800eb66:	897a      	ldrh	r2, [r7, #10]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	891a      	ldrh	r2, [r3, #8]
 800eb70:	893b      	ldrh	r3, [r7, #8]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d106      	bne.n	800eb94 <pbuf_realloc+0x70>
 800eb86:	4b26      	ldr	r3, [pc, #152]	@ (800ec20 <pbuf_realloc+0xfc>)
 800eb88:	f240 12af 	movw	r2, #431	@ 0x1af
 800eb8c:	4927      	ldr	r1, [pc, #156]	@ (800ec2c <pbuf_realloc+0x108>)
 800eb8e:	4826      	ldr	r0, [pc, #152]	@ (800ec28 <pbuf_realloc+0x104>)
 800eb90:	f00a fa98 	bl	80190c4 <iprintf>
  while (rem_len > q->len) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	895b      	ldrh	r3, [r3, #10]
 800eb98:	897a      	ldrh	r2, [r7, #10]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d8e1      	bhi.n	800eb62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	7b1b      	ldrb	r3, [r3, #12]
 800eba2:	f003 030f 	and.w	r3, r3, #15
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d121      	bne.n	800ebee <pbuf_realloc+0xca>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	895b      	ldrh	r3, [r3, #10]
 800ebae:	897a      	ldrh	r2, [r7, #10]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d01c      	beq.n	800ebee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	7b5b      	ldrb	r3, [r3, #13]
 800ebb8:	f003 0302 	and.w	r3, r3, #2
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d116      	bne.n	800ebee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	897b      	ldrh	r3, [r7, #10]
 800ebcc:	4413      	add	r3, r2
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f7fe ffaa 	bl	800db2c <mem_trim>
 800ebd8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d106      	bne.n	800ebee <pbuf_realloc+0xca>
 800ebe0:	4b0f      	ldr	r3, [pc, #60]	@ (800ec20 <pbuf_realloc+0xfc>)
 800ebe2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ebe6:	4912      	ldr	r1, [pc, #72]	@ (800ec30 <pbuf_realloc+0x10c>)
 800ebe8:	480f      	ldr	r0, [pc, #60]	@ (800ec28 <pbuf_realloc+0x104>)
 800ebea:	f00a fa6b 	bl	80190c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	897a      	ldrh	r2, [r7, #10]
 800ebf2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	895a      	ldrh	r2, [r3, #10]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d004      	beq.n	800ec0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f911 	bl	800ee30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	e000      	b.n	800ec18 <pbuf_realloc+0xf4>
    return;
 800ec16:	bf00      	nop

}
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	0801c6e4 	.word	0x0801c6e4
 800ec24:	0801c7fc 	.word	0x0801c7fc
 800ec28:	0801c744 	.word	0x0801c744
 800ec2c:	0801c814 	.word	0x0801c814
 800ec30:	0801c82c 	.word	0x0801c82c

0800ec34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d106      	bne.n	800ec56 <pbuf_add_header_impl+0x22>
 800ec48:	4b2b      	ldr	r3, [pc, #172]	@ (800ecf8 <pbuf_add_header_impl+0xc4>)
 800ec4a:	f240 12df 	movw	r2, #479	@ 0x1df
 800ec4e:	492b      	ldr	r1, [pc, #172]	@ (800ecfc <pbuf_add_header_impl+0xc8>)
 800ec50:	482b      	ldr	r0, [pc, #172]	@ (800ed00 <pbuf_add_header_impl+0xcc>)
 800ec52:	f00a fa37 	bl	80190c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <pbuf_add_header_impl+0x30>
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec62:	d301      	bcc.n	800ec68 <pbuf_add_header_impl+0x34>
    return 1;
 800ec64:	2301      	movs	r3, #1
 800ec66:	e043      	b.n	800ecf0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <pbuf_add_header_impl+0x3e>
    return 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e03e      	b.n	800ecf0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	891a      	ldrh	r2, [r3, #8]
 800ec7a:	8a7b      	ldrh	r3, [r7, #18]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	8a7a      	ldrh	r2, [r7, #18]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d901      	bls.n	800ec8a <pbuf_add_header_impl+0x56>
    return 1;
 800ec86:	2301      	movs	r3, #1
 800ec88:	e032      	b.n	800ecf0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	7b1b      	ldrb	r3, [r3, #12]
 800ec8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ec90:	8a3b      	ldrh	r3, [r7, #16]
 800ec92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00c      	beq.n	800ecb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	425b      	negs	r3, r3
 800eca2:	4413      	add	r3, r2
 800eca4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3310      	adds	r3, #16
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d20d      	bcs.n	800eccc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e01d      	b.n	800ecf0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d006      	beq.n	800ecc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	425b      	negs	r3, r3
 800ecc2:	4413      	add	r3, r2
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	e001      	b.n	800eccc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e011      	b.n	800ecf0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	895a      	ldrh	r2, [r3, #10]
 800ecd6:	8a7b      	ldrh	r3, [r7, #18]
 800ecd8:	4413      	add	r3, r2
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	891a      	ldrh	r2, [r3, #8]
 800ece4:	8a7b      	ldrh	r3, [r7, #18]
 800ece6:	4413      	add	r3, r2
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	811a      	strh	r2, [r3, #8]


  return 0;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3718      	adds	r7, #24
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	0801c6e4 	.word	0x0801c6e4
 800ecfc:	0801c848 	.word	0x0801c848
 800ed00:	0801c744 	.word	0x0801c744

0800ed04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ed0e:	2200      	movs	r2, #0
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff ff8e 	bl	800ec34 <pbuf_add_header_impl>
 800ed18:	4603      	mov	r3, r0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d106      	bne.n	800ed42 <pbuf_remove_header+0x1e>
 800ed34:	4b20      	ldr	r3, [pc, #128]	@ (800edb8 <pbuf_remove_header+0x94>)
 800ed36:	f240 224b 	movw	r2, #587	@ 0x24b
 800ed3a:	4920      	ldr	r1, [pc, #128]	@ (800edbc <pbuf_remove_header+0x98>)
 800ed3c:	4820      	ldr	r0, [pc, #128]	@ (800edc0 <pbuf_remove_header+0x9c>)
 800ed3e:	f00a f9c1 	bl	80190c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d003      	beq.n	800ed50 <pbuf_remove_header+0x2c>
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed4e:	d301      	bcc.n	800ed54 <pbuf_remove_header+0x30>
    return 1;
 800ed50:	2301      	movs	r3, #1
 800ed52:	e02c      	b.n	800edae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <pbuf_remove_header+0x3a>
    return 0;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	e027      	b.n	800edae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	895b      	ldrh	r3, [r3, #10]
 800ed66:	89fa      	ldrh	r2, [r7, #14]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d908      	bls.n	800ed7e <pbuf_remove_header+0x5a>
 800ed6c:	4b12      	ldr	r3, [pc, #72]	@ (800edb8 <pbuf_remove_header+0x94>)
 800ed6e:	f240 2255 	movw	r2, #597	@ 0x255
 800ed72:	4914      	ldr	r1, [pc, #80]	@ (800edc4 <pbuf_remove_header+0xa0>)
 800ed74:	4812      	ldr	r0, [pc, #72]	@ (800edc0 <pbuf_remove_header+0x9c>)
 800ed76:	f00a f9a5 	bl	80190c4 <iprintf>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e017      	b.n	800edae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	685a      	ldr	r2, [r3, #4]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	441a      	add	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	895a      	ldrh	r2, [r3, #10]
 800ed94:	89fb      	ldrh	r3, [r7, #14]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	891a      	ldrh	r2, [r3, #8]
 800eda2:	89fb      	ldrh	r3, [r7, #14]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	0801c6e4 	.word	0x0801c6e4
 800edbc:	0801c848 	.word	0x0801c848
 800edc0:	0801c744 	.word	0x0801c744
 800edc4:	0801c854 	.word	0x0801c854

0800edc8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	460b      	mov	r3, r1
 800edd2:	807b      	strh	r3, [r7, #2]
 800edd4:	4613      	mov	r3, r2
 800edd6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800edd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	da08      	bge.n	800edf2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ede0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ede4:	425b      	negs	r3, r3
 800ede6:	4619      	mov	r1, r3
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff ff9b 	bl	800ed24 <pbuf_remove_header>
 800edee:	4603      	mov	r3, r0
 800edf0:	e007      	b.n	800ee02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800edf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edf6:	787a      	ldrb	r2, [r7, #1]
 800edf8:	4619      	mov	r1, r3
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7ff ff1a 	bl	800ec34 <pbuf_add_header_impl>
 800ee00:	4603      	mov	r3, r0
  }
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b082      	sub	sp, #8
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	460b      	mov	r3, r1
 800ee14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ee16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff ffd2 	bl	800edc8 <pbuf_header_impl>
 800ee24:	4603      	mov	r3, r0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
	...

0800ee30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10b      	bne.n	800ee56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d106      	bne.n	800ee52 <pbuf_free+0x22>
 800ee44:	4b3b      	ldr	r3, [pc, #236]	@ (800ef34 <pbuf_free+0x104>)
 800ee46:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ee4a:	493b      	ldr	r1, [pc, #236]	@ (800ef38 <pbuf_free+0x108>)
 800ee4c:	483b      	ldr	r0, [pc, #236]	@ (800ef3c <pbuf_free+0x10c>)
 800ee4e:	f00a f939 	bl	80190c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	e069      	b.n	800ef2a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ee56:	2300      	movs	r3, #0
 800ee58:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ee5a:	e062      	b.n	800ef22 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ee5c:	f009 fbdc 	bl	8018618 <sys_arch_protect>
 800ee60:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	7b9b      	ldrb	r3, [r3, #14]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <pbuf_free+0x48>
 800ee6a:	4b32      	ldr	r3, [pc, #200]	@ (800ef34 <pbuf_free+0x104>)
 800ee6c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ee70:	4933      	ldr	r1, [pc, #204]	@ (800ef40 <pbuf_free+0x110>)
 800ee72:	4832      	ldr	r0, [pc, #200]	@ (800ef3c <pbuf_free+0x10c>)
 800ee74:	f00a f926 	bl	80190c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7b9b      	ldrb	r3, [r3, #14]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	b2da      	uxtb	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	739a      	strb	r2, [r3, #14]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7b9b      	ldrb	r3, [r3, #14]
 800ee88:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ee8a:	69b8      	ldr	r0, [r7, #24]
 800ee8c:	f009 fbd2 	bl	8018634 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d143      	bne.n	800ef1e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	7b1b      	ldrb	r3, [r3, #12]
 800eea0:	f003 030f 	and.w	r3, r3, #15
 800eea4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7b5b      	ldrb	r3, [r3, #13]
 800eeaa:	f003 0302 	and.w	r3, r3, #2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d011      	beq.n	800eed6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d106      	bne.n	800eecc <pbuf_free+0x9c>
 800eebe:	4b1d      	ldr	r3, [pc, #116]	@ (800ef34 <pbuf_free+0x104>)
 800eec0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800eec4:	491f      	ldr	r1, [pc, #124]	@ (800ef44 <pbuf_free+0x114>)
 800eec6:	481d      	ldr	r0, [pc, #116]	@ (800ef3c <pbuf_free+0x10c>)
 800eec8:	f00a f8fc 	bl	80190c4 <iprintf>
        pc->custom_free_function(p);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	691b      	ldr	r3, [r3, #16]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	4798      	blx	r3
 800eed4:	e01d      	b.n	800ef12 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d104      	bne.n	800eee6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	200c      	movs	r0, #12
 800eee0:	f7ff f902 	bl	800e0e8 <memp_free>
 800eee4:	e015      	b.n	800ef12 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d104      	bne.n	800eef6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800eeec:	6879      	ldr	r1, [r7, #4]
 800eeee:	200b      	movs	r0, #11
 800eef0:	f7ff f8fa 	bl	800e0e8 <memp_free>
 800eef4:	e00d      	b.n	800ef12 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eef6:	7bfb      	ldrb	r3, [r7, #15]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <pbuf_free+0xd4>
          mem_free(p);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7fe fd85 	bl	800da0c <mem_free>
 800ef02:	e006      	b.n	800ef12 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ef04:	4b0b      	ldr	r3, [pc, #44]	@ (800ef34 <pbuf_free+0x104>)
 800ef06:	f240 320f 	movw	r2, #783	@ 0x30f
 800ef0a:	490f      	ldr	r1, [pc, #60]	@ (800ef48 <pbuf_free+0x118>)
 800ef0c:	480b      	ldr	r0, [pc, #44]	@ (800ef3c <pbuf_free+0x10c>)
 800ef0e:	f00a f8d9 	bl	80190c4 <iprintf>
        }
      }
      count++;
 800ef12:	7ffb      	ldrb	r3, [r7, #31]
 800ef14:	3301      	adds	r3, #1
 800ef16:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	607b      	str	r3, [r7, #4]
 800ef1c:	e001      	b.n	800ef22 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d199      	bne.n	800ee5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ef28:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	0801c6e4 	.word	0x0801c6e4
 800ef38:	0801c848 	.word	0x0801c848
 800ef3c:	0801c744 	.word	0x0801c744
 800ef40:	0801c874 	.word	0x0801c874
 800ef44:	0801c88c 	.word	0x0801c88c
 800ef48:	0801c8b0 	.word	0x0801c8b0

0800ef4c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ef54:	2300      	movs	r3, #0
 800ef56:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ef58:	e005      	b.n	800ef66 <pbuf_clen+0x1a>
    ++len;
 800ef5a:	89fb      	ldrh	r3, [r7, #14]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1f6      	bne.n	800ef5a <pbuf_clen+0xe>
  }
  return len;
 800ef6c:	89fb      	ldrh	r3, [r7, #14]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3714      	adds	r7, #20
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr
	...

0800ef7c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d016      	beq.n	800efb8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ef8a:	f009 fb45 	bl	8018618 <sys_arch_protect>
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	7b9b      	ldrb	r3, [r3, #14]
 800ef94:	3301      	adds	r3, #1
 800ef96:	b2da      	uxtb	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	739a      	strb	r2, [r3, #14]
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f009 fb49 	bl	8018634 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	7b9b      	ldrb	r3, [r3, #14]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <pbuf_ref+0x3c>
 800efaa:	4b05      	ldr	r3, [pc, #20]	@ (800efc0 <pbuf_ref+0x44>)
 800efac:	f240 3242 	movw	r2, #834	@ 0x342
 800efb0:	4904      	ldr	r1, [pc, #16]	@ (800efc4 <pbuf_ref+0x48>)
 800efb2:	4805      	ldr	r0, [pc, #20]	@ (800efc8 <pbuf_ref+0x4c>)
 800efb4:	f00a f886 	bl	80190c4 <iprintf>
  }
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	0801c6e4 	.word	0x0801c6e4
 800efc4:	0801c8c4 	.word	0x0801c8c4
 800efc8:	0801c744 	.word	0x0801c744

0800efcc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <pbuf_cat+0x16>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d107      	bne.n	800eff2 <pbuf_cat+0x26>
 800efe2:	4b20      	ldr	r3, [pc, #128]	@ (800f064 <pbuf_cat+0x98>)
 800efe4:	f240 3259 	movw	r2, #857	@ 0x359
 800efe8:	491f      	ldr	r1, [pc, #124]	@ (800f068 <pbuf_cat+0x9c>)
 800efea:	4820      	ldr	r0, [pc, #128]	@ (800f06c <pbuf_cat+0xa0>)
 800efec:	f00a f86a 	bl	80190c4 <iprintf>
 800eff0:	e034      	b.n	800f05c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	e00a      	b.n	800f00e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	891a      	ldrh	r2, [r3, #8]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	891b      	ldrh	r3, [r3, #8]
 800f000:	4413      	add	r3, r2
 800f002:	b29a      	uxth	r2, r3
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	60fb      	str	r3, [r7, #12]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1f0      	bne.n	800eff8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	891a      	ldrh	r2, [r3, #8]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	895b      	ldrh	r3, [r3, #10]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d006      	beq.n	800f030 <pbuf_cat+0x64>
 800f022:	4b10      	ldr	r3, [pc, #64]	@ (800f064 <pbuf_cat+0x98>)
 800f024:	f240 3262 	movw	r2, #866	@ 0x362
 800f028:	4911      	ldr	r1, [pc, #68]	@ (800f070 <pbuf_cat+0xa4>)
 800f02a:	4810      	ldr	r0, [pc, #64]	@ (800f06c <pbuf_cat+0xa0>)
 800f02c:	f00a f84a 	bl	80190c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d006      	beq.n	800f046 <pbuf_cat+0x7a>
 800f038:	4b0a      	ldr	r3, [pc, #40]	@ (800f064 <pbuf_cat+0x98>)
 800f03a:	f240 3263 	movw	r2, #867	@ 0x363
 800f03e:	490d      	ldr	r1, [pc, #52]	@ (800f074 <pbuf_cat+0xa8>)
 800f040:	480a      	ldr	r0, [pc, #40]	@ (800f06c <pbuf_cat+0xa0>)
 800f042:	f00a f83f 	bl	80190c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	891a      	ldrh	r2, [r3, #8]
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	891b      	ldrh	r3, [r3, #8]
 800f04e:	4413      	add	r3, r2
 800f050:	b29a      	uxth	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	0801c6e4 	.word	0x0801c6e4
 800f068:	0801c8d8 	.word	0x0801c8d8
 800f06c:	0801c744 	.word	0x0801c744
 800f070:	0801c910 	.word	0x0801c910
 800f074:	0801c940 	.word	0x0801c940

0800f078 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f082:	2300      	movs	r3, #0
 800f084:	617b      	str	r3, [r7, #20]
 800f086:	2300      	movs	r3, #0
 800f088:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d008      	beq.n	800f0a2 <pbuf_copy+0x2a>
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d005      	beq.n	800f0a2 <pbuf_copy+0x2a>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	891a      	ldrh	r2, [r3, #8]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	891b      	ldrh	r3, [r3, #8]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d209      	bcs.n	800f0b6 <pbuf_copy+0x3e>
 800f0a2:	4b57      	ldr	r3, [pc, #348]	@ (800f200 <pbuf_copy+0x188>)
 800f0a4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f0a8:	4956      	ldr	r1, [pc, #344]	@ (800f204 <pbuf_copy+0x18c>)
 800f0aa:	4857      	ldr	r0, [pc, #348]	@ (800f208 <pbuf_copy+0x190>)
 800f0ac:	f00a f80a 	bl	80190c4 <iprintf>
 800f0b0:	f06f 030f 	mvn.w	r3, #15
 800f0b4:	e09f      	b.n	800f1f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	895b      	ldrh	r3, [r3, #10]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	1ad2      	subs	r2, r2, r3
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	895b      	ldrh	r3, [r3, #10]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	1acb      	subs	r3, r1, r3
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d306      	bcc.n	800f0dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	895b      	ldrh	r3, [r3, #10]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	60fb      	str	r3, [r7, #12]
 800f0da:	e005      	b.n	800f0e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	895b      	ldrh	r3, [r3, #10]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	18d0      	adds	r0, r2, r3
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	f00a fa61 	bl	80195c2 <memcpy>
    offset_to += len;
 800f100:	697a      	ldr	r2, [r7, #20]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	4413      	add	r3, r2
 800f106:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	4413      	add	r3, r2
 800f10e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	895b      	ldrh	r3, [r3, #10]
 800f114:	461a      	mov	r2, r3
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	4293      	cmp	r3, r2
 800f11a:	d906      	bls.n	800f12a <pbuf_copy+0xb2>
 800f11c:	4b38      	ldr	r3, [pc, #224]	@ (800f200 <pbuf_copy+0x188>)
 800f11e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f122:	493a      	ldr	r1, [pc, #232]	@ (800f20c <pbuf_copy+0x194>)
 800f124:	4838      	ldr	r0, [pc, #224]	@ (800f208 <pbuf_copy+0x190>)
 800f126:	f009 ffcd 	bl	80190c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	895b      	ldrh	r3, [r3, #10]
 800f12e:	461a      	mov	r2, r3
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	4293      	cmp	r3, r2
 800f134:	d906      	bls.n	800f144 <pbuf_copy+0xcc>
 800f136:	4b32      	ldr	r3, [pc, #200]	@ (800f200 <pbuf_copy+0x188>)
 800f138:	f240 32da 	movw	r2, #986	@ 0x3da
 800f13c:	4934      	ldr	r1, [pc, #208]	@ (800f210 <pbuf_copy+0x198>)
 800f13e:	4832      	ldr	r0, [pc, #200]	@ (800f208 <pbuf_copy+0x190>)
 800f140:	f009 ffc0 	bl	80190c4 <iprintf>
    if (offset_from >= p_from->len) {
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	895b      	ldrh	r3, [r3, #10]
 800f148:	461a      	mov	r2, r3
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d304      	bcc.n	800f15a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	895b      	ldrh	r3, [r3, #10]
 800f15e:	461a      	mov	r2, r3
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	4293      	cmp	r3, r2
 800f164:	d114      	bne.n	800f190 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10c      	bne.n	800f190 <pbuf_copy+0x118>
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d009      	beq.n	800f190 <pbuf_copy+0x118>
 800f17c:	4b20      	ldr	r3, [pc, #128]	@ (800f200 <pbuf_copy+0x188>)
 800f17e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f182:	4924      	ldr	r1, [pc, #144]	@ (800f214 <pbuf_copy+0x19c>)
 800f184:	4820      	ldr	r0, [pc, #128]	@ (800f208 <pbuf_copy+0x190>)
 800f186:	f009 ff9d 	bl	80190c4 <iprintf>
 800f18a:	f06f 030f 	mvn.w	r3, #15
 800f18e:	e032      	b.n	800f1f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d013      	beq.n	800f1be <pbuf_copy+0x146>
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	895a      	ldrh	r2, [r3, #10]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	891b      	ldrh	r3, [r3, #8]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d10d      	bne.n	800f1be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d009      	beq.n	800f1be <pbuf_copy+0x146>
 800f1aa:	4b15      	ldr	r3, [pc, #84]	@ (800f200 <pbuf_copy+0x188>)
 800f1ac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f1b0:	4919      	ldr	r1, [pc, #100]	@ (800f218 <pbuf_copy+0x1a0>)
 800f1b2:	4815      	ldr	r0, [pc, #84]	@ (800f208 <pbuf_copy+0x190>)
 800f1b4:	f009 ff86 	bl	80190c4 <iprintf>
 800f1b8:	f06f 0305 	mvn.w	r3, #5
 800f1bc:	e01b      	b.n	800f1f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d013      	beq.n	800f1ec <pbuf_copy+0x174>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	895a      	ldrh	r2, [r3, #10]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	891b      	ldrh	r3, [r3, #8]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d10d      	bne.n	800f1ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d009      	beq.n	800f1ec <pbuf_copy+0x174>
 800f1d8:	4b09      	ldr	r3, [pc, #36]	@ (800f200 <pbuf_copy+0x188>)
 800f1da:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f1de:	490e      	ldr	r1, [pc, #56]	@ (800f218 <pbuf_copy+0x1a0>)
 800f1e0:	4809      	ldr	r0, [pc, #36]	@ (800f208 <pbuf_copy+0x190>)
 800f1e2:	f009 ff6f 	bl	80190c4 <iprintf>
 800f1e6:	f06f 0305 	mvn.w	r3, #5
 800f1ea:	e004      	b.n	800f1f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f47f af61 	bne.w	800f0b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3718      	adds	r7, #24
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	0801c6e4 	.word	0x0801c6e4
 800f204:	0801c98c 	.word	0x0801c98c
 800f208:	0801c744 	.word	0x0801c744
 800f20c:	0801c9bc 	.word	0x0801c9bc
 800f210:	0801c9d4 	.word	0x0801c9d4
 800f214:	0801c9f0 	.word	0x0801c9f0
 800f218:	0801ca00 	.word	0x0801ca00

0800f21c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b088      	sub	sp, #32
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4611      	mov	r1, r2
 800f228:	461a      	mov	r2, r3
 800f22a:	460b      	mov	r3, r1
 800f22c:	80fb      	strh	r3, [r7, #6]
 800f22e:	4613      	mov	r3, r2
 800f230:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d108      	bne.n	800f252 <pbuf_copy_partial+0x36>
 800f240:	4b2b      	ldr	r3, [pc, #172]	@ (800f2f0 <pbuf_copy_partial+0xd4>)
 800f242:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f246:	492b      	ldr	r1, [pc, #172]	@ (800f2f4 <pbuf_copy_partial+0xd8>)
 800f248:	482b      	ldr	r0, [pc, #172]	@ (800f2f8 <pbuf_copy_partial+0xdc>)
 800f24a:	f009 ff3b 	bl	80190c4 <iprintf>
 800f24e:	2300      	movs	r3, #0
 800f250:	e04a      	b.n	800f2e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d108      	bne.n	800f26a <pbuf_copy_partial+0x4e>
 800f258:	4b25      	ldr	r3, [pc, #148]	@ (800f2f0 <pbuf_copy_partial+0xd4>)
 800f25a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f25e:	4927      	ldr	r1, [pc, #156]	@ (800f2fc <pbuf_copy_partial+0xe0>)
 800f260:	4825      	ldr	r0, [pc, #148]	@ (800f2f8 <pbuf_copy_partial+0xdc>)
 800f262:	f009 ff2f 	bl	80190c4 <iprintf>
 800f266:	2300      	movs	r3, #0
 800f268:	e03e      	b.n	800f2e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	61fb      	str	r3, [r7, #28]
 800f26e:	e034      	b.n	800f2da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f270:	88bb      	ldrh	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00a      	beq.n	800f28c <pbuf_copy_partial+0x70>
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	895b      	ldrh	r3, [r3, #10]
 800f27a:	88ba      	ldrh	r2, [r7, #4]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d305      	bcc.n	800f28c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	895b      	ldrh	r3, [r3, #10]
 800f284:	88ba      	ldrh	r2, [r7, #4]
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	80bb      	strh	r3, [r7, #4]
 800f28a:	e023      	b.n	800f2d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	895a      	ldrh	r2, [r3, #10]
 800f290:	88bb      	ldrh	r3, [r7, #4]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f296:	8b3a      	ldrh	r2, [r7, #24]
 800f298:	88fb      	ldrh	r3, [r7, #6]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d901      	bls.n	800f2a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f29e:	88fb      	ldrh	r3, [r7, #6]
 800f2a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f2a2:	8b7b      	ldrh	r3, [r7, #26]
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	18d0      	adds	r0, r2, r3
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	685a      	ldr	r2, [r3, #4]
 800f2ac:	88bb      	ldrh	r3, [r7, #4]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	8b3a      	ldrh	r2, [r7, #24]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	f00a f985 	bl	80195c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f2b8:	8afa      	ldrh	r2, [r7, #22]
 800f2ba:	8b3b      	ldrh	r3, [r7, #24]
 800f2bc:	4413      	add	r3, r2
 800f2be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f2c0:	8b7a      	ldrh	r2, [r7, #26]
 800f2c2:	8b3b      	ldrh	r3, [r7, #24]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f2c8:	88fa      	ldrh	r2, [r7, #6]
 800f2ca:	8b3b      	ldrh	r3, [r7, #24]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	61fb      	str	r3, [r7, #28]
 800f2da:	88fb      	ldrh	r3, [r7, #6]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <pbuf_copy_partial+0xca>
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1c4      	bne.n	800f270 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f2e6:	8afb      	ldrh	r3, [r7, #22]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3720      	adds	r7, #32
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	0801c6e4 	.word	0x0801c6e4
 800f2f4:	0801ca2c 	.word	0x0801ca2c
 800f2f8:	0801c744 	.word	0x0801c744
 800f2fc:	0801ca4c 	.word	0x0801ca4c

0800f300 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	603a      	str	r2, [r7, #0]
 800f30a:	71fb      	strb	r3, [r7, #7]
 800f30c:	460b      	mov	r3, r1
 800f30e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	8919      	ldrh	r1, [r3, #8]
 800f314:	88ba      	ldrh	r2, [r7, #4]
 800f316:	79fb      	ldrb	r3, [r7, #7]
 800f318:	4618      	mov	r0, r3
 800f31a:	f7ff faa5 	bl	800e868 <pbuf_alloc>
 800f31e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <pbuf_clone+0x2a>
    return NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	e011      	b.n	800f34e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fea3 	bl	800f078 <pbuf_copy>
 800f332:	4603      	mov	r3, r0
 800f334:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f336:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d006      	beq.n	800f34c <pbuf_clone+0x4c>
 800f33e:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <pbuf_clone+0x58>)
 800f340:	f240 5224 	movw	r2, #1316	@ 0x524
 800f344:	4905      	ldr	r1, [pc, #20]	@ (800f35c <pbuf_clone+0x5c>)
 800f346:	4806      	ldr	r0, [pc, #24]	@ (800f360 <pbuf_clone+0x60>)
 800f348:	f009 febc 	bl	80190c4 <iprintf>
  return q;
 800f34c:	68fb      	ldr	r3, [r7, #12]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	0801c6e4 	.word	0x0801c6e4
 800f35c:	0801cb58 	.word	0x0801cb58
 800f360:	0801c744 	.word	0x0801c744

0800f364 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f368:	f009 f974 	bl	8018654 <rand>
 800f36c:	4603      	mov	r3, r0
 800f36e:	b29b      	uxth	r3, r3
 800f370:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f374:	b29b      	uxth	r3, r3
 800f376:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	4b01      	ldr	r3, [pc, #4]	@ (800f384 <tcp_init+0x20>)
 800f37e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f380:	bf00      	nop
 800f382:	bd80      	pop	{r7, pc}
 800f384:	20000010 	.word	0x20000010

0800f388 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d105      	bne.n	800f3a4 <tcp_free+0x1c>
 800f398:	4b06      	ldr	r3, [pc, #24]	@ (800f3b4 <tcp_free+0x2c>)
 800f39a:	22d4      	movs	r2, #212	@ 0xd4
 800f39c:	4906      	ldr	r1, [pc, #24]	@ (800f3b8 <tcp_free+0x30>)
 800f39e:	4807      	ldr	r0, [pc, #28]	@ (800f3bc <tcp_free+0x34>)
 800f3a0:	f009 fe90 	bl	80190c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f3a4:	6879      	ldr	r1, [r7, #4]
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	f7fe fe9e 	bl	800e0e8 <memp_free>
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	0801cbe4 	.word	0x0801cbe4
 800f3b8:	0801cc14 	.word	0x0801cc14
 800f3bc:	0801cc28 	.word	0x0801cc28

0800f3c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	7d1b      	ldrb	r3, [r3, #20]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d105      	bne.n	800f3dc <tcp_free_listen+0x1c>
 800f3d0:	4b06      	ldr	r3, [pc, #24]	@ (800f3ec <tcp_free_listen+0x2c>)
 800f3d2:	22df      	movs	r2, #223	@ 0xdf
 800f3d4:	4906      	ldr	r1, [pc, #24]	@ (800f3f0 <tcp_free_listen+0x30>)
 800f3d6:	4807      	ldr	r0, [pc, #28]	@ (800f3f4 <tcp_free_listen+0x34>)
 800f3d8:	f009 fe74 	bl	80190c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f3dc:	6879      	ldr	r1, [r7, #4]
 800f3de:	2002      	movs	r0, #2
 800f3e0:	f7fe fe82 	bl	800e0e8 <memp_free>
}
 800f3e4:	bf00      	nop
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0801cbe4 	.word	0x0801cbe4
 800f3f0:	0801cc50 	.word	0x0801cc50
 800f3f4:	0801cc28 	.word	0x0801cc28

0800f3f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f3fc:	f001 f8a8 	bl	8010550 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f400:	4b07      	ldr	r3, [pc, #28]	@ (800f420 <tcp_tmr+0x28>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	3301      	adds	r3, #1
 800f406:	b2da      	uxtb	r2, r3
 800f408:	4b05      	ldr	r3, [pc, #20]	@ (800f420 <tcp_tmr+0x28>)
 800f40a:	701a      	strb	r2, [r3, #0]
 800f40c:	4b04      	ldr	r3, [pc, #16]	@ (800f420 <tcp_tmr+0x28>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f418:	f000 fd58 	bl	800fecc <tcp_slowtmr>
  }
}
 800f41c:	bf00      	nop
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	2000e12d 	.word	0x2000e12d

0800f424 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <tcp_remove_listener+0x1c>
 800f434:	4b0d      	ldr	r3, [pc, #52]	@ (800f46c <tcp_remove_listener+0x48>)
 800f436:	22ff      	movs	r2, #255	@ 0xff
 800f438:	490d      	ldr	r1, [pc, #52]	@ (800f470 <tcp_remove_listener+0x4c>)
 800f43a:	480e      	ldr	r0, [pc, #56]	@ (800f474 <tcp_remove_listener+0x50>)
 800f43c:	f009 fe42 	bl	80190c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	60fb      	str	r3, [r7, #12]
 800f444:	e00a      	b.n	800f45c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d102      	bne.n	800f456 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2200      	movs	r2, #0
 800f454:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1f1      	bne.n	800f446 <tcp_remove_listener+0x22>
    }
  }
}
 800f462:	bf00      	nop
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	0801cbe4 	.word	0x0801cbe4
 800f470:	0801cc6c 	.word	0x0801cc6c
 800f474:	0801cc28 	.word	0x0801cc28

0800f478 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d106      	bne.n	800f494 <tcp_listen_closed+0x1c>
 800f486:	4b14      	ldr	r3, [pc, #80]	@ (800f4d8 <tcp_listen_closed+0x60>)
 800f488:	f240 1211 	movw	r2, #273	@ 0x111
 800f48c:	4913      	ldr	r1, [pc, #76]	@ (800f4dc <tcp_listen_closed+0x64>)
 800f48e:	4814      	ldr	r0, [pc, #80]	@ (800f4e0 <tcp_listen_closed+0x68>)
 800f490:	f009 fe18 	bl	80190c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	7d1b      	ldrb	r3, [r3, #20]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d006      	beq.n	800f4aa <tcp_listen_closed+0x32>
 800f49c:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d8 <tcp_listen_closed+0x60>)
 800f49e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f4a2:	4910      	ldr	r1, [pc, #64]	@ (800f4e4 <tcp_listen_closed+0x6c>)
 800f4a4:	480e      	ldr	r0, [pc, #56]	@ (800f4e0 <tcp_listen_closed+0x68>)
 800f4a6:	f009 fe0d 	bl	80190c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	60fb      	str	r3, [r7, #12]
 800f4ae:	e00b      	b.n	800f4c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f4b0:	4a0d      	ldr	r2, [pc, #52]	@ (800f4e8 <tcp_listen_closed+0x70>)
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	6879      	ldr	r1, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff ffb1 	bl	800f424 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d9f0      	bls.n	800f4b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f4ce:	bf00      	nop
 800f4d0:	bf00      	nop
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	0801cbe4 	.word	0x0801cbe4
 800f4dc:	0801cc94 	.word	0x0801cc94
 800f4e0:	0801cc28 	.word	0x0801cc28
 800f4e4:	0801cca0 	.word	0x0801cca0
 800f4e8:	0801ec20 	.word	0x0801ec20

0800f4ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f4ec:	b5b0      	push	{r4, r5, r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af04      	add	r7, sp, #16
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d106      	bne.n	800f50c <tcp_close_shutdown+0x20>
 800f4fe:	4b63      	ldr	r3, [pc, #396]	@ (800f68c <tcp_close_shutdown+0x1a0>)
 800f500:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f504:	4962      	ldr	r1, [pc, #392]	@ (800f690 <tcp_close_shutdown+0x1a4>)
 800f506:	4863      	ldr	r0, [pc, #396]	@ (800f694 <tcp_close_shutdown+0x1a8>)
 800f508:	f009 fddc 	bl	80190c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f50c:	78fb      	ldrb	r3, [r7, #3]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d066      	beq.n	800f5e0 <tcp_close_shutdown+0xf4>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	7d1b      	ldrb	r3, [r3, #20]
 800f516:	2b04      	cmp	r3, #4
 800f518:	d003      	beq.n	800f522 <tcp_close_shutdown+0x36>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	7d1b      	ldrb	r3, [r3, #20]
 800f51e:	2b07      	cmp	r3, #7
 800f520:	d15e      	bne.n	800f5e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f526:	2b00      	cmp	r3, #0
 800f528:	d104      	bne.n	800f534 <tcp_close_shutdown+0x48>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f52e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f532:	d055      	beq.n	800f5e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8b5b      	ldrh	r3, [r3, #26]
 800f538:	f003 0310 	and.w	r3, r3, #16
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d106      	bne.n	800f54e <tcp_close_shutdown+0x62>
 800f540:	4b52      	ldr	r3, [pc, #328]	@ (800f68c <tcp_close_shutdown+0x1a0>)
 800f542:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f546:	4954      	ldr	r1, [pc, #336]	@ (800f698 <tcp_close_shutdown+0x1ac>)
 800f548:	4852      	ldr	r0, [pc, #328]	@ (800f694 <tcp_close_shutdown+0x1a8>)
 800f54a:	f009 fdbb 	bl	80190c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f556:	687d      	ldr	r5, [r7, #4]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	3304      	adds	r3, #4
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	8ad2      	ldrh	r2, [r2, #22]
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	8b09      	ldrh	r1, [r1, #24]
 800f564:	9102      	str	r1, [sp, #8]
 800f566:	9201      	str	r2, [sp, #4]
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	462b      	mov	r3, r5
 800f56c:	4622      	mov	r2, r4
 800f56e:	4601      	mov	r1, r0
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f005 fdb7 	bl	80150e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f001 fb9a 	bl	8010cb0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f57c:	4b47      	ldr	r3, [pc, #284]	@ (800f69c <tcp_close_shutdown+0x1b0>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d105      	bne.n	800f592 <tcp_close_shutdown+0xa6>
 800f586:	4b45      	ldr	r3, [pc, #276]	@ (800f69c <tcp_close_shutdown+0x1b0>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	4a43      	ldr	r2, [pc, #268]	@ (800f69c <tcp_close_shutdown+0x1b0>)
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	e013      	b.n	800f5ba <tcp_close_shutdown+0xce>
 800f592:	4b42      	ldr	r3, [pc, #264]	@ (800f69c <tcp_close_shutdown+0x1b0>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e00c      	b.n	800f5b4 <tcp_close_shutdown+0xc8>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d104      	bne.n	800f5ae <tcp_close_shutdown+0xc2>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	68da      	ldr	r2, [r3, #12]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	60da      	str	r2, [r3, #12]
 800f5ac:	e005      	b.n	800f5ba <tcp_close_shutdown+0xce>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1ef      	bne.n	800f59a <tcp_close_shutdown+0xae>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	60da      	str	r2, [r3, #12]
 800f5c0:	4b37      	ldr	r3, [pc, #220]	@ (800f6a0 <tcp_close_shutdown+0x1b4>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f5c6:	4b37      	ldr	r3, [pc, #220]	@ (800f6a4 <tcp_close_shutdown+0x1b8>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d102      	bne.n	800f5d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f5d0:	f004 f82e 	bl	8013630 <tcp_trigger_input_pcb_close>
 800f5d4:	e002      	b.n	800f5dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fed6 	bl	800f388 <tcp_free>
      }
      return ERR_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e050      	b.n	800f682 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	7d1b      	ldrb	r3, [r3, #20]
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d03b      	beq.n	800f660 <tcp_close_shutdown+0x174>
 800f5e8:	2b02      	cmp	r3, #2
 800f5ea:	dc44      	bgt.n	800f676 <tcp_close_shutdown+0x18a>
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <tcp_close_shutdown+0x10a>
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d02a      	beq.n	800f64a <tcp_close_shutdown+0x15e>
 800f5f4:	e03f      	b.n	800f676 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	8adb      	ldrh	r3, [r3, #22]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d021      	beq.n	800f642 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f5fe:	4b2a      	ldr	r3, [pc, #168]	@ (800f6a8 <tcp_close_shutdown+0x1bc>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	429a      	cmp	r2, r3
 800f606:	d105      	bne.n	800f614 <tcp_close_shutdown+0x128>
 800f608:	4b27      	ldr	r3, [pc, #156]	@ (800f6a8 <tcp_close_shutdown+0x1bc>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	4a26      	ldr	r2, [pc, #152]	@ (800f6a8 <tcp_close_shutdown+0x1bc>)
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	e013      	b.n	800f63c <tcp_close_shutdown+0x150>
 800f614:	4b24      	ldr	r3, [pc, #144]	@ (800f6a8 <tcp_close_shutdown+0x1bc>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	60bb      	str	r3, [r7, #8]
 800f61a:	e00c      	b.n	800f636 <tcp_close_shutdown+0x14a>
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	429a      	cmp	r2, r3
 800f624:	d104      	bne.n	800f630 <tcp_close_shutdown+0x144>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68da      	ldr	r2, [r3, #12]
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	60da      	str	r2, [r3, #12]
 800f62e:	e005      	b.n	800f63c <tcp_close_shutdown+0x150>
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	60bb      	str	r3, [r7, #8]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1ef      	bne.n	800f61c <tcp_close_shutdown+0x130>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff fea0 	bl	800f388 <tcp_free>
      break;
 800f648:	e01a      	b.n	800f680 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff ff14 	bl	800f478 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	4816      	ldr	r0, [pc, #88]	@ (800f6ac <tcp_close_shutdown+0x1c0>)
 800f654:	f001 fb7c 	bl	8010d50 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7ff feb1 	bl	800f3c0 <tcp_free_listen>
      break;
 800f65e:	e00f      	b.n	800f680 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	480e      	ldr	r0, [pc, #56]	@ (800f69c <tcp_close_shutdown+0x1b0>)
 800f664:	f001 fb74 	bl	8010d50 <tcp_pcb_remove>
 800f668:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a0 <tcp_close_shutdown+0x1b4>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff fe8a 	bl	800f388 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f674:	e004      	b.n	800f680 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f81a 	bl	800f6b0 <tcp_close_shutdown_fin>
 800f67c:	4603      	mov	r3, r0
 800f67e:	e000      	b.n	800f682 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bdb0      	pop	{r4, r5, r7, pc}
 800f68a:	bf00      	nop
 800f68c:	0801cbe4 	.word	0x0801cbe4
 800f690:	0801ccb8 	.word	0x0801ccb8
 800f694:	0801cc28 	.word	0x0801cc28
 800f698:	0801ccd8 	.word	0x0801ccd8
 800f69c:	2000e124 	.word	0x2000e124
 800f6a0:	2000e12c 	.word	0x2000e12c
 800f6a4:	2000e164 	.word	0x2000e164
 800f6a8:	2000e11c 	.word	0x2000e11c
 800f6ac:	2000e120 	.word	0x2000e120

0800f6b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d106      	bne.n	800f6cc <tcp_close_shutdown_fin+0x1c>
 800f6be:	4b2e      	ldr	r3, [pc, #184]	@ (800f778 <tcp_close_shutdown_fin+0xc8>)
 800f6c0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800f6c4:	492d      	ldr	r1, [pc, #180]	@ (800f77c <tcp_close_shutdown_fin+0xcc>)
 800f6c6:	482e      	ldr	r0, [pc, #184]	@ (800f780 <tcp_close_shutdown_fin+0xd0>)
 800f6c8:	f009 fcfc 	bl	80190c4 <iprintf>

  switch (pcb->state) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7d1b      	ldrb	r3, [r3, #20]
 800f6d0:	2b07      	cmp	r3, #7
 800f6d2:	d020      	beq.n	800f716 <tcp_close_shutdown_fin+0x66>
 800f6d4:	2b07      	cmp	r3, #7
 800f6d6:	dc2b      	bgt.n	800f730 <tcp_close_shutdown_fin+0x80>
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	d002      	beq.n	800f6e2 <tcp_close_shutdown_fin+0x32>
 800f6dc:	2b04      	cmp	r3, #4
 800f6de:	d00d      	beq.n	800f6fc <tcp_close_shutdown_fin+0x4c>
 800f6e0:	e026      	b.n	800f730 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f004 fe0c 	bl	8014300 <tcp_send_fin>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d11f      	bne.n	800f734 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2205      	movs	r2, #5
 800f6f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f6fa:	e01b      	b.n	800f734 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f004 fdff 	bl	8014300 <tcp_send_fin>
 800f702:	4603      	mov	r3, r0
 800f704:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d114      	bne.n	800f738 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2205      	movs	r2, #5
 800f712:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f714:	e010      	b.n	800f738 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f004 fdf2 	bl	8014300 <tcp_send_fin>
 800f71c:	4603      	mov	r3, r0
 800f71e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d109      	bne.n	800f73c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2209      	movs	r2, #9
 800f72c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f72e:	e005      	b.n	800f73c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	e01c      	b.n	800f76e <tcp_close_shutdown_fin+0xbe>
      break;
 800f734:	bf00      	nop
 800f736:	e002      	b.n	800f73e <tcp_close_shutdown_fin+0x8e>
      break;
 800f738:	bf00      	nop
 800f73a:	e000      	b.n	800f73e <tcp_close_shutdown_fin+0x8e>
      break;
 800f73c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d103      	bne.n	800f74e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f004 ff18 	bl	801457c <tcp_output>
 800f74c:	e00d      	b.n	800f76a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f74e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f756:	d108      	bne.n	800f76a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	8b5b      	ldrh	r3, [r3, #26]
 800f75c:	f043 0308 	orr.w	r3, r3, #8
 800f760:	b29a      	uxth	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f766:	2300      	movs	r3, #0
 800f768:	e001      	b.n	800f76e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	0801cbe4 	.word	0x0801cbe4
 800f77c:	0801cc94 	.word	0x0801cc94
 800f780:	0801cc28 	.word	0x0801cc28

0800f784 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d109      	bne.n	800f7a6 <tcp_close+0x22>
 800f792:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d0 <tcp_close+0x4c>)
 800f794:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800f798:	490e      	ldr	r1, [pc, #56]	@ (800f7d4 <tcp_close+0x50>)
 800f79a:	480f      	ldr	r0, [pc, #60]	@ (800f7d8 <tcp_close+0x54>)
 800f79c:	f009 fc92 	bl	80190c4 <iprintf>
 800f7a0:	f06f 030f 	mvn.w	r3, #15
 800f7a4:	e00f      	b.n	800f7c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	7d1b      	ldrb	r3, [r3, #20]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d006      	beq.n	800f7bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8b5b      	ldrh	r3, [r3, #26]
 800f7b2:	f043 0310 	orr.w	r3, r3, #16
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f7bc:	2101      	movs	r1, #1
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff fe94 	bl	800f4ec <tcp_close_shutdown>
 800f7c4:	4603      	mov	r3, r0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	0801cbe4 	.word	0x0801cbe4
 800f7d4:	0801ccf4 	.word	0x0801ccf4
 800f7d8:	0801cc28 	.word	0x0801cc28

0800f7dc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d109      	bne.n	800f802 <tcp_shutdown+0x26>
 800f7ee:	4b26      	ldr	r3, [pc, #152]	@ (800f888 <tcp_shutdown+0xac>)
 800f7f0:	f240 2207 	movw	r2, #519	@ 0x207
 800f7f4:	4925      	ldr	r1, [pc, #148]	@ (800f88c <tcp_shutdown+0xb0>)
 800f7f6:	4826      	ldr	r0, [pc, #152]	@ (800f890 <tcp_shutdown+0xb4>)
 800f7f8:	f009 fc64 	bl	80190c4 <iprintf>
 800f7fc:	f06f 030f 	mvn.w	r3, #15
 800f800:	e03d      	b.n	800f87e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	7d1b      	ldrb	r3, [r3, #20]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d102      	bne.n	800f810 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f80a:	f06f 030a 	mvn.w	r3, #10
 800f80e:	e036      	b.n	800f87e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d01b      	beq.n	800f84e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	8b5b      	ldrh	r3, [r3, #26]
 800f81a:	f043 0310 	orr.w	r3, r3, #16
 800f81e:	b29a      	uxth	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d005      	beq.n	800f836 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f82a:	2101      	movs	r1, #1
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f7ff fe5d 	bl	800f4ec <tcp_close_shutdown>
 800f832:	4603      	mov	r3, r0
 800f834:	e023      	b.n	800f87e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d007      	beq.n	800f84e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f842:	4618      	mov	r0, r3
 800f844:	f7ff faf4 	bl	800ee30 <pbuf_free>
      pcb->refused_data = NULL;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2200      	movs	r2, #0
 800f84c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d013      	beq.n	800f87c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	2b04      	cmp	r3, #4
 800f85a:	dc02      	bgt.n	800f862 <tcp_shutdown+0x86>
 800f85c:	2b03      	cmp	r3, #3
 800f85e:	da02      	bge.n	800f866 <tcp_shutdown+0x8a>
 800f860:	e009      	b.n	800f876 <tcp_shutdown+0x9a>
 800f862:	2b07      	cmp	r3, #7
 800f864:	d107      	bne.n	800f876 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	4619      	mov	r1, r3
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f7ff fe3d 	bl	800f4ec <tcp_close_shutdown>
 800f872:	4603      	mov	r3, r0
 800f874:	e003      	b.n	800f87e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f876:	f06f 030a 	mvn.w	r3, #10
 800f87a:	e000      	b.n	800f87e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	0801cbe4 	.word	0x0801cbe4
 800f88c:	0801cd0c 	.word	0x0801cd0c
 800f890:	0801cc28 	.word	0x0801cc28

0800f894 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b08e      	sub	sp, #56	@ 0x38
 800f898:	af04      	add	r7, sp, #16
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d107      	bne.n	800f8b4 <tcp_abandon+0x20>
 800f8a4:	4b52      	ldr	r3, [pc, #328]	@ (800f9f0 <tcp_abandon+0x15c>)
 800f8a6:	f240 223d 	movw	r2, #573	@ 0x23d
 800f8aa:	4952      	ldr	r1, [pc, #328]	@ (800f9f4 <tcp_abandon+0x160>)
 800f8ac:	4852      	ldr	r0, [pc, #328]	@ (800f9f8 <tcp_abandon+0x164>)
 800f8ae:	f009 fc09 	bl	80190c4 <iprintf>
 800f8b2:	e099      	b.n	800f9e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	7d1b      	ldrb	r3, [r3, #20]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d106      	bne.n	800f8ca <tcp_abandon+0x36>
 800f8bc:	4b4c      	ldr	r3, [pc, #304]	@ (800f9f0 <tcp_abandon+0x15c>)
 800f8be:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f8c2:	494e      	ldr	r1, [pc, #312]	@ (800f9fc <tcp_abandon+0x168>)
 800f8c4:	484c      	ldr	r0, [pc, #304]	@ (800f9f8 <tcp_abandon+0x164>)
 800f8c6:	f009 fbfd 	bl	80190c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7d1b      	ldrb	r3, [r3, #20]
 800f8ce:	2b0a      	cmp	r3, #10
 800f8d0:	d107      	bne.n	800f8e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f8d2:	6879      	ldr	r1, [r7, #4]
 800f8d4:	484a      	ldr	r0, [pc, #296]	@ (800fa00 <tcp_abandon+0x16c>)
 800f8d6:	f001 fa3b 	bl	8010d50 <tcp_pcb_remove>
    tcp_free(pcb);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fd54 	bl	800f388 <tcp_free>
 800f8e0:	e082      	b.n	800f9e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	691b      	ldr	r3, [r3, #16]
 800f902:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	7d1b      	ldrb	r3, [r3, #20]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d126      	bne.n	800f95a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	8adb      	ldrh	r3, [r3, #22]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d02e      	beq.n	800f972 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f914:	4b3b      	ldr	r3, [pc, #236]	@ (800fa04 <tcp_abandon+0x170>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d105      	bne.n	800f92a <tcp_abandon+0x96>
 800f91e:	4b39      	ldr	r3, [pc, #228]	@ (800fa04 <tcp_abandon+0x170>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	4a37      	ldr	r2, [pc, #220]	@ (800fa04 <tcp_abandon+0x170>)
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	e013      	b.n	800f952 <tcp_abandon+0xbe>
 800f92a:	4b36      	ldr	r3, [pc, #216]	@ (800fa04 <tcp_abandon+0x170>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	e00c      	b.n	800f94c <tcp_abandon+0xb8>
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d104      	bne.n	800f946 <tcp_abandon+0xb2>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	68da      	ldr	r2, [r3, #12]
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	60da      	str	r2, [r3, #12]
 800f944:	e005      	b.n	800f952 <tcp_abandon+0xbe>
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	61fb      	str	r3, [r7, #28]
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1ef      	bne.n	800f932 <tcp_abandon+0x9e>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	60da      	str	r2, [r3, #12]
 800f958:	e00b      	b.n	800f972 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	8adb      	ldrh	r3, [r3, #22]
 800f962:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f964:	6879      	ldr	r1, [r7, #4]
 800f966:	4828      	ldr	r0, [pc, #160]	@ (800fa08 <tcp_abandon+0x174>)
 800f968:	f001 f9f2 	bl	8010d50 <tcp_pcb_remove>
 800f96c:	4b27      	ldr	r3, [pc, #156]	@ (800fa0c <tcp_abandon+0x178>)
 800f96e:	2201      	movs	r2, #1
 800f970:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f976:	2b00      	cmp	r3, #0
 800f978:	d004      	beq.n	800f984 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f97e:	4618      	mov	r0, r3
 800f980:	f000 fec6 	bl	8010710 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d004      	beq.n	800f996 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f990:	4618      	mov	r0, r3
 800f992:	f000 febd 	bl	8010710 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 feb4 	bl	8010710 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00e      	beq.n	800f9cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	8b12      	ldrh	r2, [r2, #24]
 800f9b8:	9202      	str	r2, [sp, #8]
 800f9ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f9bc:	9201      	str	r2, [sp, #4]
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	69b9      	ldr	r1, [r7, #24]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f005 fb8c 	bl	80150e4 <tcp_rst>
    }
    last_state = pcb->state;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	7d1b      	ldrb	r3, [r3, #20]
 800f9d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7ff fcd8 	bl	800f388 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d004      	beq.n	800f9e8 <tcp_abandon+0x154>
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	f06f 010c 	mvn.w	r1, #12
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	4798      	blx	r3
  }
}
 800f9e8:	3728      	adds	r7, #40	@ 0x28
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	0801cbe4 	.word	0x0801cbe4
 800f9f4:	0801cd28 	.word	0x0801cd28
 800f9f8:	0801cc28 	.word	0x0801cc28
 800f9fc:	0801cd44 	.word	0x0801cd44
 800fa00:	2000e128 	.word	0x2000e128
 800fa04:	2000e11c 	.word	0x2000e11c
 800fa08:	2000e124 	.word	0x2000e124
 800fa0c:	2000e12c 	.word	0x2000e12c

0800fa10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fa18:	2101      	movs	r1, #1
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff ff3a 	bl	800f894 <tcp_abandon>
}
 800fa20:	bf00      	nop
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	4613      	mov	r3, r2
 800fa34:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800fa36:	2304      	movs	r3, #4
 800fa38:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800fa40:	4b3e      	ldr	r3, [pc, #248]	@ (800fb3c <tcp_bind+0x114>)
 800fa42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d109      	bne.n	800fa5e <tcp_bind+0x36>
 800fa4a:	4b3d      	ldr	r3, [pc, #244]	@ (800fb40 <tcp_bind+0x118>)
 800fa4c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800fa50:	493c      	ldr	r1, [pc, #240]	@ (800fb44 <tcp_bind+0x11c>)
 800fa52:	483d      	ldr	r0, [pc, #244]	@ (800fb48 <tcp_bind+0x120>)
 800fa54:	f009 fb36 	bl	80190c4 <iprintf>
 800fa58:	f06f 030f 	mvn.w	r3, #15
 800fa5c:	e06a      	b.n	800fb34 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	7d1b      	ldrb	r3, [r3, #20]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d009      	beq.n	800fa7a <tcp_bind+0x52>
 800fa66:	4b36      	ldr	r3, [pc, #216]	@ (800fb40 <tcp_bind+0x118>)
 800fa68:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fa6c:	4937      	ldr	r1, [pc, #220]	@ (800fb4c <tcp_bind+0x124>)
 800fa6e:	4836      	ldr	r0, [pc, #216]	@ (800fb48 <tcp_bind+0x120>)
 800fa70:	f009 fb28 	bl	80190c4 <iprintf>
 800fa74:	f06f 0305 	mvn.w	r3, #5
 800fa78:	e05c      	b.n	800fb34 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800fa7a:	88fb      	ldrh	r3, [r7, #6]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d109      	bne.n	800fa94 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fa80:	f000 f9de 	bl	800fe40 <tcp_new_port>
 800fa84:	4603      	mov	r3, r0
 800fa86:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fa88:	88fb      	ldrh	r3, [r7, #6]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d135      	bne.n	800fafa <tcp_bind+0xd2>
      return ERR_BUF;
 800fa8e:	f06f 0301 	mvn.w	r3, #1
 800fa92:	e04f      	b.n	800fb34 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800fa94:	2300      	movs	r3, #0
 800fa96:	61fb      	str	r3, [r7, #28]
 800fa98:	e02b      	b.n	800faf2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fa9a:	4a2d      	ldr	r2, [pc, #180]	@ (800fb50 <tcp_bind+0x128>)
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	61bb      	str	r3, [r7, #24]
 800faa6:	e01e      	b.n	800fae6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	8adb      	ldrh	r3, [r3, #22]
 800faac:	88fa      	ldrh	r2, [r7, #6]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d116      	bne.n	800fae0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800fab2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d010      	beq.n	800fada <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00c      	beq.n	800fada <tcp_bind+0xb2>
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d009      	beq.n	800fada <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d005      	beq.n	800fada <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d102      	bne.n	800fae0 <tcp_bind+0xb8>
              return ERR_USE;
 800fada:	f06f 0307 	mvn.w	r3, #7
 800fade:	e029      	b.n	800fb34 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	61bb      	str	r3, [r7, #24]
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1dd      	bne.n	800faa8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	3301      	adds	r3, #1
 800faf0:	61fb      	str	r3, [r7, #28]
 800faf2:	69fa      	ldr	r2, [r7, #28]
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	dbcf      	blt.n	800fa9a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00c      	beq.n	800fb1a <tcp_bind+0xf2>
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d008      	beq.n	800fb1a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d002      	beq.n	800fb14 <tcp_bind+0xec>
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	e000      	b.n	800fb16 <tcp_bind+0xee>
 800fb14:	2300      	movs	r3, #0
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	88fa      	ldrh	r2, [r7, #6]
 800fb1e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fb20:	4b0c      	ldr	r3, [pc, #48]	@ (800fb54 <tcp_bind+0x12c>)
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	60da      	str	r2, [r3, #12]
 800fb28:	4a0a      	ldr	r2, [pc, #40]	@ (800fb54 <tcp_bind+0x12c>)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	f005 fc9b 	bl	8015468 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3720      	adds	r7, #32
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	0801ec48 	.word	0x0801ec48
 800fb40:	0801cbe4 	.word	0x0801cbe4
 800fb44:	0801cd78 	.word	0x0801cd78
 800fb48:	0801cc28 	.word	0x0801cc28
 800fb4c:	0801cd90 	.word	0x0801cd90
 800fb50:	0801ec20 	.word	0x0801ec20
 800fb54:	2000e11c 	.word	0x2000e11c

0800fb58 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	4613      	mov	r3, r2
 800fb64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d106      	bne.n	800fb7a <tcp_accept_null+0x22>
 800fb6c:	4b07      	ldr	r3, [pc, #28]	@ (800fb8c <tcp_accept_null+0x34>)
 800fb6e:	f240 320f 	movw	r2, #783	@ 0x30f
 800fb72:	4907      	ldr	r1, [pc, #28]	@ (800fb90 <tcp_accept_null+0x38>)
 800fb74:	4807      	ldr	r0, [pc, #28]	@ (800fb94 <tcp_accept_null+0x3c>)
 800fb76:	f009 faa5 	bl	80190c4 <iprintf>

  tcp_abort(pcb);
 800fb7a:	68b8      	ldr	r0, [r7, #8]
 800fb7c:	f7ff ff48 	bl	800fa10 <tcp_abort>

  return ERR_ABRT;
 800fb80:	f06f 030c 	mvn.w	r3, #12
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	0801cbe4 	.word	0x0801cbe4
 800fb90:	0801cdb8 	.word	0x0801cdb8
 800fb94:	0801cc28 	.word	0x0801cc28

0800fb98 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	460b      	mov	r3, r1
 800fba2:	607a      	str	r2, [r7, #4]
 800fba4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d109      	bne.n	800fbc4 <tcp_listen_with_backlog_and_err+0x2c>
 800fbb0:	4b47      	ldr	r3, [pc, #284]	@ (800fcd0 <tcp_listen_with_backlog_and_err+0x138>)
 800fbb2:	f240 3259 	movw	r2, #857	@ 0x359
 800fbb6:	4947      	ldr	r1, [pc, #284]	@ (800fcd4 <tcp_listen_with_backlog_and_err+0x13c>)
 800fbb8:	4847      	ldr	r0, [pc, #284]	@ (800fcd8 <tcp_listen_with_backlog_and_err+0x140>)
 800fbba:	f009 fa83 	bl	80190c4 <iprintf>
 800fbbe:	23f0      	movs	r3, #240	@ 0xf0
 800fbc0:	76fb      	strb	r3, [r7, #27]
 800fbc2:	e079      	b.n	800fcb8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	7d1b      	ldrb	r3, [r3, #20]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d009      	beq.n	800fbe0 <tcp_listen_with_backlog_and_err+0x48>
 800fbcc:	4b40      	ldr	r3, [pc, #256]	@ (800fcd0 <tcp_listen_with_backlog_and_err+0x138>)
 800fbce:	f240 325a 	movw	r2, #858	@ 0x35a
 800fbd2:	4942      	ldr	r1, [pc, #264]	@ (800fcdc <tcp_listen_with_backlog_and_err+0x144>)
 800fbd4:	4840      	ldr	r0, [pc, #256]	@ (800fcd8 <tcp_listen_with_backlog_and_err+0x140>)
 800fbd6:	f009 fa75 	bl	80190c4 <iprintf>
 800fbda:	23f1      	movs	r3, #241	@ 0xf1
 800fbdc:	76fb      	strb	r3, [r7, #27]
 800fbde:	e06b      	b.n	800fcb8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	7d1b      	ldrb	r3, [r3, #20]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d104      	bne.n	800fbf2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800fbec:	23f7      	movs	r3, #247	@ 0xf7
 800fbee:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fbf0:	e062      	b.n	800fcb8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fbf2:	2002      	movs	r0, #2
 800fbf4:	f7fe fa26 	bl	800e044 <memp_malloc>
 800fbf8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800fc00:	23ff      	movs	r3, #255	@ 0xff
 800fc02:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fc04:	e058      	b.n	800fcb8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	691a      	ldr	r2, [r3, #16]
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	8ada      	ldrh	r2, [r3, #22]
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	2201      	movs	r2, #1
 800fc1a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	7d5a      	ldrb	r2, [r3, #21]
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	7a5a      	ldrb	r2, [r3, #9]
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	7ada      	ldrb	r2, [r3, #11]
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	7a9a      	ldrb	r2, [r3, #10]
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	8adb      	ldrh	r3, [r3, #22]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d021      	beq.n	800fc96 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fc52:	4b23      	ldr	r3, [pc, #140]	@ (800fce0 <tcp_listen_with_backlog_and_err+0x148>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d105      	bne.n	800fc68 <tcp_listen_with_backlog_and_err+0xd0>
 800fc5c:	4b20      	ldr	r3, [pc, #128]	@ (800fce0 <tcp_listen_with_backlog_and_err+0x148>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	4a1f      	ldr	r2, [pc, #124]	@ (800fce0 <tcp_listen_with_backlog_and_err+0x148>)
 800fc64:	6013      	str	r3, [r2, #0]
 800fc66:	e013      	b.n	800fc90 <tcp_listen_with_backlog_and_err+0xf8>
 800fc68:	4b1d      	ldr	r3, [pc, #116]	@ (800fce0 <tcp_listen_with_backlog_and_err+0x148>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	617b      	str	r3, [r7, #20]
 800fc6e:	e00c      	b.n	800fc8a <tcp_listen_with_backlog_and_err+0xf2>
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d104      	bne.n	800fc84 <tcp_listen_with_backlog_and_err+0xec>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	68da      	ldr	r2, [r3, #12]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	60da      	str	r2, [r3, #12]
 800fc82:	e005      	b.n	800fc90 <tcp_listen_with_backlog_and_err+0xf8>
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	617b      	str	r3, [r7, #20]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1ef      	bne.n	800fc70 <tcp_listen_with_backlog_and_err+0xd8>
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7ff fb76 	bl	800f388 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	4a11      	ldr	r2, [pc, #68]	@ (800fce4 <tcp_listen_with_backlog_and_err+0x14c>)
 800fca0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fca2:	4b11      	ldr	r3, [pc, #68]	@ (800fce8 <tcp_listen_with_backlog_and_err+0x150>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	60da      	str	r2, [r3, #12]
 800fcaa:	4a0f      	ldr	r2, [pc, #60]	@ (800fce8 <tcp_listen_with_backlog_and_err+0x150>)
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	f005 fbda 	bl	8015468 <tcp_timer_needed>
  res = ERR_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	7efa      	ldrb	r2, [r7, #27]
 800fcc2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800fcc4:	69fb      	ldr	r3, [r7, #28]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3720      	adds	r7, #32
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	0801cbe4 	.word	0x0801cbe4
 800fcd4:	0801cdd8 	.word	0x0801cdd8
 800fcd8:	0801cc28 	.word	0x0801cc28
 800fcdc:	0801ce08 	.word	0x0801ce08
 800fce0:	2000e11c 	.word	0x2000e11c
 800fce4:	0800fb59 	.word	0x0800fb59
 800fce8:	2000e120 	.word	0x2000e120

0800fcec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d106      	bne.n	800fd08 <tcp_update_rcv_ann_wnd+0x1c>
 800fcfa:	4b25      	ldr	r3, [pc, #148]	@ (800fd90 <tcp_update_rcv_ann_wnd+0xa4>)
 800fcfc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800fd00:	4924      	ldr	r1, [pc, #144]	@ (800fd94 <tcp_update_rcv_ann_wnd+0xa8>)
 800fd02:	4825      	ldr	r0, [pc, #148]	@ (800fd98 <tcp_update_rcv_ann_wnd+0xac>)
 800fd04:	f009 f9de 	bl	80190c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800fd10:	4413      	add	r3, r2
 800fd12:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800fd1c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800fd20:	bf28      	it	cs
 800fd22:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800fd26:	b292      	uxth	r2, r2
 800fd28:	4413      	add	r3, r2
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	db08      	blt.n	800fd44 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	e020      	b.n	800fd86 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	dd03      	ble.n	800fd5a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fd58:	e014      	b.n	800fd84 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd6c:	d306      	bcc.n	800fd7c <tcp_update_rcv_ann_wnd+0x90>
 800fd6e:	4b08      	ldr	r3, [pc, #32]	@ (800fd90 <tcp_update_rcv_ann_wnd+0xa4>)
 800fd70:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800fd74:	4909      	ldr	r1, [pc, #36]	@ (800fd9c <tcp_update_rcv_ann_wnd+0xb0>)
 800fd76:	4808      	ldr	r0, [pc, #32]	@ (800fd98 <tcp_update_rcv_ann_wnd+0xac>)
 800fd78:	f009 f9a4 	bl	80190c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800fd84:	2300      	movs	r3, #0
  }
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	0801cbe4 	.word	0x0801cbe4
 800fd94:	0801ce40 	.word	0x0801ce40
 800fd98:	0801cc28 	.word	0x0801cc28
 800fd9c:	0801ce64 	.word	0x0801ce64

0800fda0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d107      	bne.n	800fdc2 <tcp_recved+0x22>
 800fdb2:	4b1f      	ldr	r3, [pc, #124]	@ (800fe30 <tcp_recved+0x90>)
 800fdb4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800fdb8:	491e      	ldr	r1, [pc, #120]	@ (800fe34 <tcp_recved+0x94>)
 800fdba:	481f      	ldr	r0, [pc, #124]	@ (800fe38 <tcp_recved+0x98>)
 800fdbc:	f009 f982 	bl	80190c4 <iprintf>
 800fdc0:	e032      	b.n	800fe28 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d106      	bne.n	800fdd8 <tcp_recved+0x38>
 800fdca:	4b19      	ldr	r3, [pc, #100]	@ (800fe30 <tcp_recved+0x90>)
 800fdcc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800fdd0:	491a      	ldr	r1, [pc, #104]	@ (800fe3c <tcp_recved+0x9c>)
 800fdd2:	4819      	ldr	r0, [pc, #100]	@ (800fe38 <tcp_recved+0x98>)
 800fdd4:	f009 f976 	bl	80190c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fddc:	887b      	ldrh	r3, [r7, #2]
 800fdde:	4413      	add	r3, r2
 800fde0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fde2:	89fb      	ldrh	r3, [r7, #14]
 800fde4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fde8:	d804      	bhi.n	800fdf4 <tcp_recved+0x54>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdee:	89fa      	ldrh	r2, [r7, #14]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d204      	bcs.n	800fdfe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fdfa:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fdfc:	e002      	b.n	800fe04 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	89fa      	ldrh	r2, [r7, #14]
 800fe02:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff ff71 	bl	800fcec <tcp_update_rcv_ann_wnd>
 800fe0a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fe12:	d309      	bcc.n	800fe28 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	8b5b      	ldrh	r3, [r3, #26]
 800fe18:	f043 0302 	orr.w	r3, r3, #2
 800fe1c:	b29a      	uxth	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f004 fbaa 	bl	801457c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	0801cbe4 	.word	0x0801cbe4
 800fe34:	0801ce80 	.word	0x0801ce80
 800fe38:	0801cc28 	.word	0x0801cc28
 800fe3c:	0801ce98 	.word	0x0801ce98

0800fe40 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fe4a:	4b1e      	ldr	r3, [pc, #120]	@ (800fec4 <tcp_new_port+0x84>)
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	4b1c      	ldr	r3, [pc, #112]	@ (800fec4 <tcp_new_port+0x84>)
 800fe54:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fe56:	4b1b      	ldr	r3, [pc, #108]	@ (800fec4 <tcp_new_port+0x84>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d103      	bne.n	800fe6a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fe62:	4b18      	ldr	r3, [pc, #96]	@ (800fec4 <tcp_new_port+0x84>)
 800fe64:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800fe68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	71fb      	strb	r3, [r7, #7]
 800fe6e:	e01e      	b.n	800feae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	4a15      	ldr	r2, [pc, #84]	@ (800fec8 <tcp_new_port+0x88>)
 800fe74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	603b      	str	r3, [r7, #0]
 800fe7c:	e011      	b.n	800fea2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	8ada      	ldrh	r2, [r3, #22]
 800fe82:	4b10      	ldr	r3, [pc, #64]	@ (800fec4 <tcp_new_port+0x84>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d108      	bne.n	800fe9c <tcp_new_port+0x5c>
        n++;
 800fe8a:	88bb      	ldrh	r3, [r7, #4]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fe90:	88bb      	ldrh	r3, [r7, #4]
 800fe92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fe96:	d3d8      	bcc.n	800fe4a <tcp_new_port+0xa>
          return 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e00d      	b.n	800feb8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	603b      	str	r3, [r7, #0]
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1ea      	bne.n	800fe7e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fea8:	79fb      	ldrb	r3, [r7, #7]
 800feaa:	3301      	adds	r3, #1
 800feac:	71fb      	strb	r3, [r7, #7]
 800feae:	79fb      	ldrb	r3, [r7, #7]
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d9dd      	bls.n	800fe70 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800feb4:	4b03      	ldr	r3, [pc, #12]	@ (800fec4 <tcp_new_port+0x84>)
 800feb6:	881b      	ldrh	r3, [r3, #0]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	20000010 	.word	0x20000010
 800fec8:	0801ec20 	.word	0x0801ec20

0800fecc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fecc:	b5b0      	push	{r4, r5, r7, lr}
 800fece:	b090      	sub	sp, #64	@ 0x40
 800fed0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800fed8:	4b95      	ldr	r3, [pc, #596]	@ (8010130 <tcp_slowtmr+0x264>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	3301      	adds	r3, #1
 800fede:	4a94      	ldr	r2, [pc, #592]	@ (8010130 <tcp_slowtmr+0x264>)
 800fee0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fee2:	4b94      	ldr	r3, [pc, #592]	@ (8010134 <tcp_slowtmr+0x268>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	3301      	adds	r3, #1
 800fee8:	b2da      	uxtb	r2, r3
 800feea:	4b92      	ldr	r3, [pc, #584]	@ (8010134 <tcp_slowtmr+0x268>)
 800feec:	701a      	strb	r2, [r3, #0]
 800feee:	e000      	b.n	800fef2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800fef0:	bf00      	nop
  prev = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800fef6:	4b90      	ldr	r3, [pc, #576]	@ (8010138 <tcp_slowtmr+0x26c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fefc:	e29d      	b.n	801043a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff00:	7d1b      	ldrb	r3, [r3, #20]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <tcp_slowtmr+0x48>
 800ff06:	4b8d      	ldr	r3, [pc, #564]	@ (801013c <tcp_slowtmr+0x270>)
 800ff08:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ff0c:	498c      	ldr	r1, [pc, #560]	@ (8010140 <tcp_slowtmr+0x274>)
 800ff0e:	488d      	ldr	r0, [pc, #564]	@ (8010144 <tcp_slowtmr+0x278>)
 800ff10:	f009 f8d8 	bl	80190c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ff14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff16:	7d1b      	ldrb	r3, [r3, #20]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d106      	bne.n	800ff2a <tcp_slowtmr+0x5e>
 800ff1c:	4b87      	ldr	r3, [pc, #540]	@ (801013c <tcp_slowtmr+0x270>)
 800ff1e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ff22:	4989      	ldr	r1, [pc, #548]	@ (8010148 <tcp_slowtmr+0x27c>)
 800ff24:	4887      	ldr	r0, [pc, #540]	@ (8010144 <tcp_slowtmr+0x278>)
 800ff26:	f009 f8cd 	bl	80190c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ff2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2c:	7d1b      	ldrb	r3, [r3, #20]
 800ff2e:	2b0a      	cmp	r3, #10
 800ff30:	d106      	bne.n	800ff40 <tcp_slowtmr+0x74>
 800ff32:	4b82      	ldr	r3, [pc, #520]	@ (801013c <tcp_slowtmr+0x270>)
 800ff34:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ff38:	4984      	ldr	r1, [pc, #528]	@ (801014c <tcp_slowtmr+0x280>)
 800ff3a:	4882      	ldr	r0, [pc, #520]	@ (8010144 <tcp_slowtmr+0x278>)
 800ff3c:	f009 f8c2 	bl	80190c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ff40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff42:	7f9a      	ldrb	r2, [r3, #30]
 800ff44:	4b7b      	ldr	r3, [pc, #492]	@ (8010134 <tcp_slowtmr+0x268>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d105      	bne.n	800ff58 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ff4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ff50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ff56:	e270      	b.n	801043a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800ff58:	4b76      	ldr	r3, [pc, #472]	@ (8010134 <tcp_slowtmr+0x268>)
 800ff5a:	781a      	ldrb	r2, [r3, #0]
 800ff5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ff6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6e:	7d1b      	ldrb	r3, [r3, #20]
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d10a      	bne.n	800ff8a <tcp_slowtmr+0xbe>
 800ff74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff7a:	2b05      	cmp	r3, #5
 800ff7c:	d905      	bls.n	800ff8a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ff7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff82:	3301      	adds	r3, #1
 800ff84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff88:	e11e      	b.n	80101c8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ff8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff90:	2b0b      	cmp	r3, #11
 800ff92:	d905      	bls.n	800ffa0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ff94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff98:	3301      	adds	r3, #1
 800ff9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff9e:	e113      	b.n	80101c8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d075      	beq.n	8010096 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ffaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d006      	beq.n	800ffc0 <tcp_slowtmr+0xf4>
 800ffb2:	4b62      	ldr	r3, [pc, #392]	@ (801013c <tcp_slowtmr+0x270>)
 800ffb4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ffb8:	4965      	ldr	r1, [pc, #404]	@ (8010150 <tcp_slowtmr+0x284>)
 800ffba:	4862      	ldr	r0, [pc, #392]	@ (8010144 <tcp_slowtmr+0x278>)
 800ffbc:	f009 f882 	bl	80190c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ffc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d106      	bne.n	800ffd6 <tcp_slowtmr+0x10a>
 800ffc8:	4b5c      	ldr	r3, [pc, #368]	@ (801013c <tcp_slowtmr+0x270>)
 800ffca:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ffce:	4961      	ldr	r1, [pc, #388]	@ (8010154 <tcp_slowtmr+0x288>)
 800ffd0:	485c      	ldr	r0, [pc, #368]	@ (8010144 <tcp_slowtmr+0x278>)
 800ffd2:	f009 f877 	bl	80190c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ffd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ffdc:	2b0b      	cmp	r3, #11
 800ffde:	d905      	bls.n	800ffec <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ffe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ffea:	e0ed      	b.n	80101c8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ffec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fff2:	3b01      	subs	r3, #1
 800fff4:	4a58      	ldr	r2, [pc, #352]	@ (8010158 <tcp_slowtmr+0x28c>)
 800fff6:	5cd3      	ldrb	r3, [r2, r3]
 800fff8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010000:	7c7a      	ldrb	r2, [r7, #17]
 8010002:	429a      	cmp	r2, r3
 8010004:	d907      	bls.n	8010016 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010008:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801000c:	3301      	adds	r3, #1
 801000e:	b2da      	uxtb	r2, r3
 8010010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010012:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010018:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801001c:	7c7a      	ldrb	r2, [r7, #17]
 801001e:	429a      	cmp	r2, r3
 8010020:	f200 80d2 	bhi.w	80101c8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010024:	2301      	movs	r3, #1
 8010026:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801002e:	2b00      	cmp	r3, #0
 8010030:	d108      	bne.n	8010044 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010034:	f005 f94a 	bl	80152cc <tcp_zero_window_probe>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d014      	beq.n	8010068 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801003e:	2300      	movs	r3, #0
 8010040:	623b      	str	r3, [r7, #32]
 8010042:	e011      	b.n	8010068 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801004a:	4619      	mov	r1, r3
 801004c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801004e:	f004 f80f 	bl	8014070 <tcp_split_unsent_seg>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d107      	bne.n	8010068 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010058:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801005a:	f004 fa8f 	bl	801457c <tcp_output>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d101      	bne.n	8010068 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010064:	2300      	movs	r3, #0
 8010066:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	2b00      	cmp	r3, #0
 801006c:	f000 80ac 	beq.w	80101c8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010072:	2200      	movs	r2, #0
 8010074:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801007a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801007e:	2b06      	cmp	r3, #6
 8010080:	f200 80a2 	bhi.w	80101c8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010086:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801008a:	3301      	adds	r3, #1
 801008c:	b2da      	uxtb	r2, r3
 801008e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010090:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010094:	e098      	b.n	80101c8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010098:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801009c:	2b00      	cmp	r3, #0
 801009e:	db0f      	blt.n	80100c0 <tcp_slowtmr+0x1f4>
 80100a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80100a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d008      	beq.n	80100c0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80100ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	3301      	adds	r3, #1
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	b21a      	sxth	r2, r3
 80100bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100be:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80100c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80100c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80100cc:	429a      	cmp	r2, r3
 80100ce:	db7b      	blt.n	80101c8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80100d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100d2:	f004 fd47 	bl	8014b64 <tcp_rexmit_rto_prepare>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d007      	beq.n	80100ec <tcp_slowtmr+0x220>
 80100dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d171      	bne.n	80101c8 <tcp_slowtmr+0x2fc>
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d06d      	beq.n	80101c8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80100ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ee:	7d1b      	ldrb	r3, [r3, #20]
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d03a      	beq.n	801016a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80100f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80100fa:	2b0c      	cmp	r3, #12
 80100fc:	bf28      	it	cs
 80100fe:	230c      	movcs	r3, #12
 8010100:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010108:	10db      	asrs	r3, r3, #3
 801010a:	b21b      	sxth	r3, r3
 801010c:	461a      	mov	r2, r3
 801010e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010110:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010114:	4413      	add	r3, r2
 8010116:	7efa      	ldrb	r2, [r7, #27]
 8010118:	4910      	ldr	r1, [pc, #64]	@ (801015c <tcp_slowtmr+0x290>)
 801011a:	5c8a      	ldrb	r2, [r1, r2]
 801011c:	4093      	lsls	r3, r2
 801011e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010126:	4293      	cmp	r3, r2
 8010128:	dc1a      	bgt.n	8010160 <tcp_slowtmr+0x294>
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	b21a      	sxth	r2, r3
 801012e:	e019      	b.n	8010164 <tcp_slowtmr+0x298>
 8010130:	2000e118 	.word	0x2000e118
 8010134:	2000e12e 	.word	0x2000e12e
 8010138:	2000e124 	.word	0x2000e124
 801013c:	0801cbe4 	.word	0x0801cbe4
 8010140:	0801cf28 	.word	0x0801cf28
 8010144:	0801cc28 	.word	0x0801cc28
 8010148:	0801cf54 	.word	0x0801cf54
 801014c:	0801cf80 	.word	0x0801cf80
 8010150:	0801cfb0 	.word	0x0801cfb0
 8010154:	0801cfe4 	.word	0x0801cfe4
 8010158:	0801ec18 	.word	0x0801ec18
 801015c:	0801ec08 	.word	0x0801ec08
 8010160:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010166:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801016a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801016c:	2200      	movs	r2, #0
 801016e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010178:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801017c:	4293      	cmp	r3, r2
 801017e:	bf28      	it	cs
 8010180:	4613      	movcs	r3, r2
 8010182:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010184:	8a7b      	ldrh	r3, [r7, #18]
 8010186:	085b      	lsrs	r3, r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010192:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	b29b      	uxth	r3, r3
 801019e:	429a      	cmp	r2, r3
 80101a0:	d206      	bcs.n	80101b0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80101a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	b29a      	uxth	r2, r3
 80101aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80101b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80101ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101bc:	2200      	movs	r2, #0
 80101be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80101c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101c4:	f004 fd3e 	bl	8014c44 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80101c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ca:	7d1b      	ldrb	r3, [r3, #20]
 80101cc:	2b06      	cmp	r3, #6
 80101ce:	d111      	bne.n	80101f4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80101d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f003 0310 	and.w	r3, r3, #16
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101dc:	4b9c      	ldr	r3, [pc, #624]	@ (8010450 <tcp_slowtmr+0x584>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b28      	cmp	r3, #40	@ 0x28
 80101e8:	d904      	bls.n	80101f4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80101ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101ee:	3301      	adds	r3, #1
 80101f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80101f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f6:	7a5b      	ldrb	r3, [r3, #9]
 80101f8:	f003 0308 	and.w	r3, r3, #8
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d04a      	beq.n	8010296 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010202:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010204:	2b04      	cmp	r3, #4
 8010206:	d003      	beq.n	8010210 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801020c:	2b07      	cmp	r3, #7
 801020e:	d142      	bne.n	8010296 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010210:	4b8f      	ldr	r3, [pc, #572]	@ (8010450 <tcp_slowtmr+0x584>)
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	6a1b      	ldr	r3, [r3, #32]
 8010218:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801021a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801021c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010220:	4b8c      	ldr	r3, [pc, #560]	@ (8010454 <tcp_slowtmr+0x588>)
 8010222:	440b      	add	r3, r1
 8010224:	498c      	ldr	r1, [pc, #560]	@ (8010458 <tcp_slowtmr+0x58c>)
 8010226:	fba1 1303 	umull	r1, r3, r1, r3
 801022a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801022c:	429a      	cmp	r2, r3
 801022e:	d90a      	bls.n	8010246 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010234:	3301      	adds	r3, #1
 8010236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801023a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801023e:	3301      	adds	r3, #1
 8010240:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010244:	e027      	b.n	8010296 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010246:	4b82      	ldr	r3, [pc, #520]	@ (8010450 <tcp_slowtmr+0x584>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024c:	6a1b      	ldr	r3, [r3, #32]
 801024e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010252:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010258:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801025c:	4618      	mov	r0, r3
 801025e:	4b7f      	ldr	r3, [pc, #508]	@ (801045c <tcp_slowtmr+0x590>)
 8010260:	fb00 f303 	mul.w	r3, r0, r3
 8010264:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010266:	497c      	ldr	r1, [pc, #496]	@ (8010458 <tcp_slowtmr+0x58c>)
 8010268:	fba1 1303 	umull	r1, r3, r1, r3
 801026c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801026e:	429a      	cmp	r2, r3
 8010270:	d911      	bls.n	8010296 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010272:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010274:	f004 ffea 	bl	801524c <tcp_keepalive>
 8010278:	4603      	mov	r3, r0
 801027a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801027e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010282:	2b00      	cmp	r3, #0
 8010284:	d107      	bne.n	8010296 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801028c:	3301      	adds	r3, #1
 801028e:	b2da      	uxtb	r2, r3
 8010290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010292:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801029a:	2b00      	cmp	r3, #0
 801029c:	d011      	beq.n	80102c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801029e:	4b6c      	ldr	r3, [pc, #432]	@ (8010450 <tcp_slowtmr+0x584>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	1ad2      	subs	r2, r2, r3
 80102a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80102ae:	4619      	mov	r1, r3
 80102b0:	460b      	mov	r3, r1
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	440b      	add	r3, r1
 80102b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d302      	bcc.n	80102c2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80102bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102be:	f000 feab 	bl	8011018 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80102c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	2b03      	cmp	r3, #3
 80102c8:	d10b      	bne.n	80102e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80102ca:	4b61      	ldr	r3, [pc, #388]	@ (8010450 <tcp_slowtmr+0x584>)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d0:	6a1b      	ldr	r3, [r3, #32]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	2b28      	cmp	r3, #40	@ 0x28
 80102d6:	d904      	bls.n	80102e2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80102d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102dc:	3301      	adds	r3, #1
 80102de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80102e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e4:	7d1b      	ldrb	r3, [r3, #20]
 80102e6:	2b09      	cmp	r3, #9
 80102e8:	d10b      	bne.n	8010302 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80102ea:	4b59      	ldr	r3, [pc, #356]	@ (8010450 <tcp_slowtmr+0x584>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80102f6:	d904      	bls.n	8010302 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80102f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102fc:	3301      	adds	r3, #1
 80102fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010306:	2b00      	cmp	r3, #0
 8010308:	d060      	beq.n	80103cc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801030a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010310:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010314:	f000 fccc 	bl	8010cb0 <tcp_pcb_purge>
      if (prev != NULL) {
 8010318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031a:	2b00      	cmp	r3, #0
 801031c:	d010      	beq.n	8010340 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801031e:	4b50      	ldr	r3, [pc, #320]	@ (8010460 <tcp_slowtmr+0x594>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010324:	429a      	cmp	r2, r3
 8010326:	d106      	bne.n	8010336 <tcp_slowtmr+0x46a>
 8010328:	4b4e      	ldr	r3, [pc, #312]	@ (8010464 <tcp_slowtmr+0x598>)
 801032a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801032e:	494e      	ldr	r1, [pc, #312]	@ (8010468 <tcp_slowtmr+0x59c>)
 8010330:	484e      	ldr	r0, [pc, #312]	@ (801046c <tcp_slowtmr+0x5a0>)
 8010332:	f008 fec7 	bl	80190c4 <iprintf>
        prev->next = pcb->next;
 8010336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010338:	68da      	ldr	r2, [r3, #12]
 801033a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033c:	60da      	str	r2, [r3, #12]
 801033e:	e00f      	b.n	8010360 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010340:	4b47      	ldr	r3, [pc, #284]	@ (8010460 <tcp_slowtmr+0x594>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010346:	429a      	cmp	r2, r3
 8010348:	d006      	beq.n	8010358 <tcp_slowtmr+0x48c>
 801034a:	4b46      	ldr	r3, [pc, #280]	@ (8010464 <tcp_slowtmr+0x598>)
 801034c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010350:	4947      	ldr	r1, [pc, #284]	@ (8010470 <tcp_slowtmr+0x5a4>)
 8010352:	4846      	ldr	r0, [pc, #280]	@ (801046c <tcp_slowtmr+0x5a0>)
 8010354:	f008 feb6 	bl	80190c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	4a40      	ldr	r2, [pc, #256]	@ (8010460 <tcp_slowtmr+0x594>)
 801035e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010364:	2b00      	cmp	r3, #0
 8010366:	d013      	beq.n	8010390 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801036a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801036c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801036e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010370:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010374:	3304      	adds	r3, #4
 8010376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010378:	8ad2      	ldrh	r2, [r2, #22]
 801037a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801037c:	8b09      	ldrh	r1, [r1, #24]
 801037e:	9102      	str	r1, [sp, #8]
 8010380:	9201      	str	r2, [sp, #4]
 8010382:	9300      	str	r3, [sp, #0]
 8010384:	462b      	mov	r3, r5
 8010386:	4622      	mov	r2, r4
 8010388:	4601      	mov	r1, r0
 801038a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801038c:	f004 feaa 	bl	80150e4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010398:	7d1b      	ldrb	r3, [r3, #20]
 801039a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80103a6:	6838      	ldr	r0, [r7, #0]
 80103a8:	f7fe ffee 	bl	800f388 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80103ac:	4b31      	ldr	r3, [pc, #196]	@ (8010474 <tcp_slowtmr+0x5a8>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <tcp_slowtmr+0x4f6>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f06f 010c 	mvn.w	r1, #12
 80103be:	68b8      	ldr	r0, [r7, #8]
 80103c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80103c2:	4b2c      	ldr	r3, [pc, #176]	@ (8010474 <tcp_slowtmr+0x5a8>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d037      	beq.n	801043a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80103ca:	e592      	b.n	800fef2 <tcp_slowtmr+0x26>
      prev = pcb;
 80103cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80103d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80103d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d8:	7f1b      	ldrb	r3, [r3, #28]
 80103da:	3301      	adds	r3, #1
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80103e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e4:	7f1a      	ldrb	r2, [r3, #28]
 80103e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e8:	7f5b      	ldrb	r3, [r3, #29]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d325      	bcc.n	801043a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80103ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f0:	2200      	movs	r2, #0
 80103f2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80103f4:	4b1f      	ldr	r3, [pc, #124]	@ (8010474 <tcp_slowtmr+0x5a8>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80103fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00b      	beq.n	801041c <tcp_slowtmr+0x550>
 8010404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801040a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801040c:	6912      	ldr	r2, [r2, #16]
 801040e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010410:	4610      	mov	r0, r2
 8010412:	4798      	blx	r3
 8010414:	4603      	mov	r3, r0
 8010416:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801041a:	e002      	b.n	8010422 <tcp_slowtmr+0x556>
 801041c:	2300      	movs	r3, #0
 801041e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010422:	4b14      	ldr	r3, [pc, #80]	@ (8010474 <tcp_slowtmr+0x5a8>)
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	f47f ad62 	bne.w	800fef0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801042c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010430:	2b00      	cmp	r3, #0
 8010432:	d102      	bne.n	801043a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010436:	f004 f8a1 	bl	801457c <tcp_output>
  while (pcb != NULL) {
 801043a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043c:	2b00      	cmp	r3, #0
 801043e:	f47f ad5e 	bne.w	800fefe <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010442:	2300      	movs	r3, #0
 8010444:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010446:	4b0c      	ldr	r3, [pc, #48]	@ (8010478 <tcp_slowtmr+0x5ac>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801044c:	e069      	b.n	8010522 <tcp_slowtmr+0x656>
 801044e:	bf00      	nop
 8010450:	2000e118 	.word	0x2000e118
 8010454:	000a4cb8 	.word	0x000a4cb8
 8010458:	10624dd3 	.word	0x10624dd3
 801045c:	000124f8 	.word	0x000124f8
 8010460:	2000e124 	.word	0x2000e124
 8010464:	0801cbe4 	.word	0x0801cbe4
 8010468:	0801d01c 	.word	0x0801d01c
 801046c:	0801cc28 	.word	0x0801cc28
 8010470:	0801d048 	.word	0x0801d048
 8010474:	2000e12c 	.word	0x2000e12c
 8010478:	2000e128 	.word	0x2000e128
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801047c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047e:	7d1b      	ldrb	r3, [r3, #20]
 8010480:	2b0a      	cmp	r3, #10
 8010482:	d006      	beq.n	8010492 <tcp_slowtmr+0x5c6>
 8010484:	4b2b      	ldr	r3, [pc, #172]	@ (8010534 <tcp_slowtmr+0x668>)
 8010486:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801048a:	492b      	ldr	r1, [pc, #172]	@ (8010538 <tcp_slowtmr+0x66c>)
 801048c:	482b      	ldr	r0, [pc, #172]	@ (801053c <tcp_slowtmr+0x670>)
 801048e:	f008 fe19 	bl	80190c4 <iprintf>
    pcb_remove = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010498:	4b29      	ldr	r3, [pc, #164]	@ (8010540 <tcp_slowtmr+0x674>)
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049e:	6a1b      	ldr	r3, [r3, #32]
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	2bf0      	cmp	r3, #240	@ 0xf0
 80104a4:	d904      	bls.n	80104b0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80104a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104aa:	3301      	adds	r3, #1
 80104ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80104b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d02f      	beq.n	8010518 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80104b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104ba:	f000 fbf9 	bl	8010cb0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80104be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d010      	beq.n	80104e6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80104c4:	4b1f      	ldr	r3, [pc, #124]	@ (8010544 <tcp_slowtmr+0x678>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d106      	bne.n	80104dc <tcp_slowtmr+0x610>
 80104ce:	4b19      	ldr	r3, [pc, #100]	@ (8010534 <tcp_slowtmr+0x668>)
 80104d0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80104d4:	491c      	ldr	r1, [pc, #112]	@ (8010548 <tcp_slowtmr+0x67c>)
 80104d6:	4819      	ldr	r0, [pc, #100]	@ (801053c <tcp_slowtmr+0x670>)
 80104d8:	f008 fdf4 	bl	80190c4 <iprintf>
        prev->next = pcb->next;
 80104dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104de:	68da      	ldr	r2, [r3, #12]
 80104e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e2:	60da      	str	r2, [r3, #12]
 80104e4:	e00f      	b.n	8010506 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80104e6:	4b17      	ldr	r3, [pc, #92]	@ (8010544 <tcp_slowtmr+0x678>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d006      	beq.n	80104fe <tcp_slowtmr+0x632>
 80104f0:	4b10      	ldr	r3, [pc, #64]	@ (8010534 <tcp_slowtmr+0x668>)
 80104f2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80104f6:	4915      	ldr	r1, [pc, #84]	@ (801054c <tcp_slowtmr+0x680>)
 80104f8:	4810      	ldr	r0, [pc, #64]	@ (801053c <tcp_slowtmr+0x670>)
 80104fa:	f008 fde3 	bl	80190c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80104fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	4a10      	ldr	r2, [pc, #64]	@ (8010544 <tcp_slowtmr+0x678>)
 8010504:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010508:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010510:	69f8      	ldr	r0, [r7, #28]
 8010512:	f7fe ff39 	bl	800f388 <tcp_free>
 8010516:	e004      	b.n	8010522 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1a9      	bne.n	801047c <tcp_slowtmr+0x5b0>
    }
  }
}
 8010528:	bf00      	nop
 801052a:	bf00      	nop
 801052c:	3730      	adds	r7, #48	@ 0x30
 801052e:	46bd      	mov	sp, r7
 8010530:	bdb0      	pop	{r4, r5, r7, pc}
 8010532:	bf00      	nop
 8010534:	0801cbe4 	.word	0x0801cbe4
 8010538:	0801d074 	.word	0x0801d074
 801053c:	0801cc28 	.word	0x0801cc28
 8010540:	2000e118 	.word	0x2000e118
 8010544:	2000e128 	.word	0x2000e128
 8010548:	0801d0a4 	.word	0x0801d0a4
 801054c:	0801d0cc 	.word	0x0801d0cc

08010550 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010556:	4b2d      	ldr	r3, [pc, #180]	@ (801060c <tcp_fasttmr+0xbc>)
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	3301      	adds	r3, #1
 801055c:	b2da      	uxtb	r2, r3
 801055e:	4b2b      	ldr	r3, [pc, #172]	@ (801060c <tcp_fasttmr+0xbc>)
 8010560:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010562:	4b2b      	ldr	r3, [pc, #172]	@ (8010610 <tcp_fasttmr+0xc0>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010568:	e048      	b.n	80105fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	7f9a      	ldrb	r2, [r3, #30]
 801056e:	4b27      	ldr	r3, [pc, #156]	@ (801060c <tcp_fasttmr+0xbc>)
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	429a      	cmp	r2, r3
 8010574:	d03f      	beq.n	80105f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010576:	4b25      	ldr	r3, [pc, #148]	@ (801060c <tcp_fasttmr+0xbc>)
 8010578:	781a      	ldrb	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	8b5b      	ldrh	r3, [r3, #26]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d010      	beq.n	80105ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8b5b      	ldrh	r3, [r3, #26]
 801058e:	f043 0302 	orr.w	r3, r3, #2
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f003 ffef 	bl	801457c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	8b5b      	ldrh	r3, [r3, #26]
 80105a2:	f023 0303 	bic.w	r3, r3, #3
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	8b5b      	ldrh	r3, [r3, #26]
 80105b0:	f003 0308 	and.w	r3, r3, #8
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d009      	beq.n	80105cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	8b5b      	ldrh	r3, [r3, #26]
 80105bc:	f023 0308 	bic.w	r3, r3, #8
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff f872 	bl	800f6b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00a      	beq.n	80105f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80105da:	4b0e      	ldr	r3, [pc, #56]	@ (8010614 <tcp_fasttmr+0xc4>)
 80105dc:	2200      	movs	r2, #0
 80105de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 f819 	bl	8010618 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80105e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010614 <tcp_fasttmr+0xc4>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d000      	beq.n	80105f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80105ee:	e7b8      	b.n	8010562 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	607b      	str	r3, [r7, #4]
 80105f4:	e002      	b.n	80105fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1b3      	bne.n	801056a <tcp_fasttmr+0x1a>
    }
  }
}
 8010602:	bf00      	nop
 8010604:	bf00      	nop
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	2000e12e 	.word	0x2000e12e
 8010610:	2000e124 	.word	0x2000e124
 8010614:	2000e12c 	.word	0x2000e12c

08010618 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010618:	b590      	push	{r4, r7, lr}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d109      	bne.n	801063a <tcp_process_refused_data+0x22>
 8010626:	4b37      	ldr	r3, [pc, #220]	@ (8010704 <tcp_process_refused_data+0xec>)
 8010628:	f240 6209 	movw	r2, #1545	@ 0x609
 801062c:	4936      	ldr	r1, [pc, #216]	@ (8010708 <tcp_process_refused_data+0xf0>)
 801062e:	4837      	ldr	r0, [pc, #220]	@ (801070c <tcp_process_refused_data+0xf4>)
 8010630:	f008 fd48 	bl	80190c4 <iprintf>
 8010634:	f06f 030f 	mvn.w	r3, #15
 8010638:	e060      	b.n	80106fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801063e:	7b5b      	ldrb	r3, [r3, #13]
 8010640:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010646:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00b      	beq.n	8010670 <tcp_process_refused_data+0x58>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6918      	ldr	r0, [r3, #16]
 8010662:	2300      	movs	r3, #0
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	6879      	ldr	r1, [r7, #4]
 8010668:	47a0      	blx	r4
 801066a:	4603      	mov	r3, r0
 801066c:	73fb      	strb	r3, [r7, #15]
 801066e:	e007      	b.n	8010680 <tcp_process_refused_data+0x68>
 8010670:	2300      	movs	r3, #0
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	2000      	movs	r0, #0
 8010678:	f000 f8a4 	bl	80107c4 <tcp_recv_null>
 801067c:	4603      	mov	r3, r0
 801067e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d12a      	bne.n	80106de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	f003 0320 	and.w	r3, r3, #32
 801068e:	2b00      	cmp	r3, #0
 8010690:	d033      	beq.n	80106fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010696:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801069a:	d005      	beq.n	80106a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106a0:	3301      	adds	r3, #1
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00b      	beq.n	80106ca <tcp_process_refused_data+0xb2>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6918      	ldr	r0, [r3, #16]
 80106bc:	2300      	movs	r3, #0
 80106be:	2200      	movs	r2, #0
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	47a0      	blx	r4
 80106c4:	4603      	mov	r3, r0
 80106c6:	73fb      	strb	r3, [r7, #15]
 80106c8:	e001      	b.n	80106ce <tcp_process_refused_data+0xb6>
 80106ca:	2300      	movs	r3, #0
 80106cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80106ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106d2:	f113 0f0d 	cmn.w	r3, #13
 80106d6:	d110      	bne.n	80106fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80106d8:	f06f 030c 	mvn.w	r3, #12
 80106dc:	e00e      	b.n	80106fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80106de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106e2:	f113 0f0d 	cmn.w	r3, #13
 80106e6:	d102      	bne.n	80106ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80106e8:	f06f 030c 	mvn.w	r3, #12
 80106ec:	e006      	b.n	80106fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80106f4:	f06f 0304 	mvn.w	r3, #4
 80106f8:	e000      	b.n	80106fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3714      	adds	r7, #20
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	0801cbe4 	.word	0x0801cbe4
 8010708:	0801d0f4 	.word	0x0801d0f4
 801070c:	0801cc28 	.word	0x0801cc28

08010710 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010718:	e007      	b.n	801072a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 f80a 	bl	801073a <tcp_seg_free>
    seg = next;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1f4      	bne.n	801071a <tcp_segs_free+0xa>
  }
}
 8010730:	bf00      	nop
 8010732:	bf00      	nop
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b082      	sub	sp, #8
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00c      	beq.n	8010762 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d004      	beq.n	801075a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fb6b 	bl	800ee30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801075a:	6879      	ldr	r1, [r7, #4]
 801075c:	2003      	movs	r0, #3
 801075e:	f7fd fcc3 	bl	800e0e8 <memp_free>
  }
}
 8010762:	bf00      	nop
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d106      	bne.n	8010788 <tcp_seg_copy+0x1c>
 801077a:	4b0f      	ldr	r3, [pc, #60]	@ (80107b8 <tcp_seg_copy+0x4c>)
 801077c:	f240 6282 	movw	r2, #1666	@ 0x682
 8010780:	490e      	ldr	r1, [pc, #56]	@ (80107bc <tcp_seg_copy+0x50>)
 8010782:	480f      	ldr	r0, [pc, #60]	@ (80107c0 <tcp_seg_copy+0x54>)
 8010784:	f008 fc9e 	bl	80190c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010788:	2003      	movs	r0, #3
 801078a:	f7fd fc5b 	bl	800e044 <memp_malloc>
 801078e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d101      	bne.n	801079a <tcp_seg_copy+0x2e>
    return NULL;
 8010796:	2300      	movs	r3, #0
 8010798:	e00a      	b.n	80107b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801079a:	2210      	movs	r2, #16
 801079c:	6879      	ldr	r1, [r7, #4]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f008 ff0f 	bl	80195c2 <memcpy>
  pbuf_ref(cseg->p);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe fbe7 	bl	800ef7c <pbuf_ref>
  return cseg;
 80107ae:	68fb      	ldr	r3, [r7, #12]
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	0801cbe4 	.word	0x0801cbe4
 80107bc:	0801d138 	.word	0x0801d138
 80107c0:	0801cc28 	.word	0x0801cc28

080107c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
 80107d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d109      	bne.n	80107ec <tcp_recv_null+0x28>
 80107d8:	4b12      	ldr	r3, [pc, #72]	@ (8010824 <tcp_recv_null+0x60>)
 80107da:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80107de:	4912      	ldr	r1, [pc, #72]	@ (8010828 <tcp_recv_null+0x64>)
 80107e0:	4812      	ldr	r0, [pc, #72]	@ (801082c <tcp_recv_null+0x68>)
 80107e2:	f008 fc6f 	bl	80190c4 <iprintf>
 80107e6:	f06f 030f 	mvn.w	r3, #15
 80107ea:	e016      	b.n	801081a <tcp_recv_null+0x56>

  if (p != NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d009      	beq.n	8010806 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	891b      	ldrh	r3, [r3, #8]
 80107f6:	4619      	mov	r1, r3
 80107f8:	68b8      	ldr	r0, [r7, #8]
 80107fa:	f7ff fad1 	bl	800fda0 <tcp_recved>
    pbuf_free(p);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7fe fb16 	bl	800ee30 <pbuf_free>
 8010804:	e008      	b.n	8010818 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d104      	bne.n	8010818 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801080e:	68b8      	ldr	r0, [r7, #8]
 8010810:	f7fe ffb8 	bl	800f784 <tcp_close>
 8010814:	4603      	mov	r3, r0
 8010816:	e000      	b.n	801081a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	0801cbe4 	.word	0x0801cbe4
 8010828:	0801d154 	.word	0x0801d154
 801082c:	0801cc28 	.word	0x0801cc28

08010830 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801083e:	2b00      	cmp	r3, #0
 8010840:	db01      	blt.n	8010846 <tcp_kill_prio+0x16>
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	e000      	b.n	8010848 <tcp_kill_prio+0x18>
 8010846:	237f      	movs	r3, #127	@ 0x7f
 8010848:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801084a:	7afb      	ldrb	r3, [r7, #11]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d034      	beq.n	80108ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010850:	7afb      	ldrb	r3, [r7, #11]
 8010852:	3b01      	subs	r3, #1
 8010854:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801085e:	4b19      	ldr	r3, [pc, #100]	@ (80108c4 <tcp_kill_prio+0x94>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	617b      	str	r3, [r7, #20]
 8010864:	e01f      	b.n	80108a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	7d5b      	ldrb	r3, [r3, #21]
 801086a:	7afa      	ldrb	r2, [r7, #11]
 801086c:	429a      	cmp	r2, r3
 801086e:	d80c      	bhi.n	801088a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010874:	7afa      	ldrb	r2, [r7, #11]
 8010876:	429a      	cmp	r2, r3
 8010878:	d112      	bne.n	80108a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801087a:	4b13      	ldr	r3, [pc, #76]	@ (80108c8 <tcp_kill_prio+0x98>)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	429a      	cmp	r2, r3
 8010888:	d80a      	bhi.n	80108a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801088a:	4b0f      	ldr	r3, [pc, #60]	@ (80108c8 <tcp_kill_prio+0x98>)
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	7d5b      	ldrb	r3, [r3, #21]
 801089e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	617b      	str	r3, [r7, #20]
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1dc      	bne.n	8010866 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d004      	beq.n	80108bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80108b2:	6938      	ldr	r0, [r7, #16]
 80108b4:	f7ff f8ac 	bl	800fa10 <tcp_abort>
 80108b8:	e000      	b.n	80108bc <tcp_kill_prio+0x8c>
    return;
 80108ba:	bf00      	nop
  }
}
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	2000e124 	.word	0x2000e124
 80108c8:	2000e118 	.word	0x2000e118

080108cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	4603      	mov	r3, r0
 80108d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80108d6:	79fb      	ldrb	r3, [r7, #7]
 80108d8:	2b08      	cmp	r3, #8
 80108da:	d009      	beq.n	80108f0 <tcp_kill_state+0x24>
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	2b09      	cmp	r3, #9
 80108e0:	d006      	beq.n	80108f0 <tcp_kill_state+0x24>
 80108e2:	4b1a      	ldr	r3, [pc, #104]	@ (801094c <tcp_kill_state+0x80>)
 80108e4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80108e8:	4919      	ldr	r1, [pc, #100]	@ (8010950 <tcp_kill_state+0x84>)
 80108ea:	481a      	ldr	r0, [pc, #104]	@ (8010954 <tcp_kill_state+0x88>)
 80108ec:	f008 fbea 	bl	80190c4 <iprintf>

  inactivity = 0;
 80108f0:	2300      	movs	r3, #0
 80108f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80108f4:	2300      	movs	r3, #0
 80108f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108f8:	4b17      	ldr	r3, [pc, #92]	@ (8010958 <tcp_kill_state+0x8c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	617b      	str	r3, [r7, #20]
 80108fe:	e017      	b.n	8010930 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	7d1b      	ldrb	r3, [r3, #20]
 8010904:	79fa      	ldrb	r2, [r7, #7]
 8010906:	429a      	cmp	r2, r3
 8010908:	d10f      	bne.n	801092a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801090a:	4b14      	ldr	r3, [pc, #80]	@ (801095c <tcp_kill_state+0x90>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	6a1b      	ldr	r3, [r3, #32]
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	429a      	cmp	r2, r3
 8010918:	d807      	bhi.n	801092a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801091a:	4b10      	ldr	r3, [pc, #64]	@ (801095c <tcp_kill_state+0x90>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	6a1b      	ldr	r3, [r3, #32]
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	617b      	str	r3, [r7, #20]
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1e4      	bne.n	8010900 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d003      	beq.n	8010944 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801093c:	2100      	movs	r1, #0
 801093e:	6938      	ldr	r0, [r7, #16]
 8010940:	f7fe ffa8 	bl	800f894 <tcp_abandon>
  }
}
 8010944:	bf00      	nop
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	0801cbe4 	.word	0x0801cbe4
 8010950:	0801d170 	.word	0x0801d170
 8010954:	0801cc28 	.word	0x0801cc28
 8010958:	2000e124 	.word	0x2000e124
 801095c:	2000e118 	.word	0x2000e118

08010960 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801096a:	2300      	movs	r3, #0
 801096c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801096e:	4b12      	ldr	r3, [pc, #72]	@ (80109b8 <tcp_kill_timewait+0x58>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e012      	b.n	801099c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010976:	4b11      	ldr	r3, [pc, #68]	@ (80109bc <tcp_kill_timewait+0x5c>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6a1b      	ldr	r3, [r3, #32]
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	429a      	cmp	r2, r3
 8010984:	d807      	bhi.n	8010996 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010986:	4b0d      	ldr	r3, [pc, #52]	@ (80109bc <tcp_kill_timewait+0x5c>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6a1b      	ldr	r3, [r3, #32]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	60fb      	str	r3, [r7, #12]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1e9      	bne.n	8010976 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d002      	beq.n	80109ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80109a8:	68b8      	ldr	r0, [r7, #8]
 80109aa:	f7ff f831 	bl	800fa10 <tcp_abort>
  }
}
 80109ae:	bf00      	nop
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	2000e128 	.word	0x2000e128
 80109bc:	2000e118 	.word	0x2000e118

080109c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80109c6:	4b10      	ldr	r3, [pc, #64]	@ (8010a08 <tcp_handle_closepend+0x48>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80109cc:	e014      	b.n	80109f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	8b5b      	ldrh	r3, [r3, #26]
 80109d8:	f003 0308 	and.w	r3, r3, #8
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d009      	beq.n	80109f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8b5b      	ldrh	r3, [r3, #26]
 80109e4:	f023 0308 	bic.w	r3, r3, #8
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f7fe fe5e 	bl	800f6b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e7      	bne.n	80109ce <tcp_handle_closepend+0xe>
  }
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	2000e124 	.word	0x2000e124

08010a0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a16:	2001      	movs	r0, #1
 8010a18:	f7fd fb14 	bl	800e044 <memp_malloc>
 8010a1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d126      	bne.n	8010a72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010a24:	f7ff ffcc 	bl	80109c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010a28:	f7ff ff9a 	bl	8010960 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	f7fd fb09 	bl	800e044 <memp_malloc>
 8010a32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d11b      	bne.n	8010a72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010a3a:	2009      	movs	r0, #9
 8010a3c:	f7ff ff46 	bl	80108cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a40:	2001      	movs	r0, #1
 8010a42:	f7fd faff 	bl	800e044 <memp_malloc>
 8010a46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d111      	bne.n	8010a72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010a4e:	2008      	movs	r0, #8
 8010a50:	f7ff ff3c 	bl	80108cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a54:	2001      	movs	r0, #1
 8010a56:	f7fd faf5 	bl	800e044 <memp_malloc>
 8010a5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d107      	bne.n	8010a72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7ff fee3 	bl	8010830 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f7fd faea 	bl	800e044 <memp_malloc>
 8010a70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d03f      	beq.n	8010af8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010a78:	229c      	movs	r2, #156	@ 0x9c
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f008 fce7 	bl	8019450 <memset>
    pcb->prio = prio;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	79fa      	ldrb	r2, [r7, #7]
 8010a86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010a8e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	22ff      	movs	r2, #255	@ 0xff
 8010aa6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010aae:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2206      	movs	r2, #6
 8010ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2206      	movs	r2, #6
 8010abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ac4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010ace:	4b0d      	ldr	r3, [pc, #52]	@ (8010b04 <tcp_alloc+0xf8>)
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8010b08 <tcp_alloc+0xfc>)
 8010ad8:	781a      	ldrb	r2, [r3, #0]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010ae4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	4a08      	ldr	r2, [pc, #32]	@ (8010b0c <tcp_alloc+0x100>)
 8010aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	4a07      	ldr	r2, [pc, #28]	@ (8010b10 <tcp_alloc+0x104>)
 8010af4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010af8:	68fb      	ldr	r3, [r7, #12]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	2000e118 	.word	0x2000e118
 8010b08:	2000e12e 	.word	0x2000e12e
 8010b0c:	080107c5 	.word	0x080107c5
 8010b10:	006ddd00 	.word	0x006ddd00

08010b14 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010b1e:	2040      	movs	r0, #64	@ 0x40
 8010b20:	f7ff ff74 	bl	8010a0c <tcp_alloc>
 8010b24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010b26:	68fb      	ldr	r3, [r7, #12]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	611a      	str	r2, [r3, #16]
  }
}
 8010b46:	bf00      	nop
 8010b48:	370c      	adds	r7, #12
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
	...

08010b54 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00e      	beq.n	8010b82 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	7d1b      	ldrb	r3, [r3, #20]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d106      	bne.n	8010b7a <tcp_recv+0x26>
 8010b6c:	4b07      	ldr	r3, [pc, #28]	@ (8010b8c <tcp_recv+0x38>)
 8010b6e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8010b72:	4907      	ldr	r1, [pc, #28]	@ (8010b90 <tcp_recv+0x3c>)
 8010b74:	4807      	ldr	r0, [pc, #28]	@ (8010b94 <tcp_recv+0x40>)
 8010b76:	f008 faa5 	bl	80190c4 <iprintf>
    pcb->recv = recv;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8010b82:	bf00      	nop
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	0801cbe4 	.word	0x0801cbe4
 8010b90:	0801d180 	.word	0x0801d180
 8010b94:	0801cc28 	.word	0x0801cc28

08010b98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00e      	beq.n	8010bc6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7d1b      	ldrb	r3, [r3, #20]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d106      	bne.n	8010bbe <tcp_sent+0x26>
 8010bb0:	4b07      	ldr	r3, [pc, #28]	@ (8010bd0 <tcp_sent+0x38>)
 8010bb2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8010bb6:	4907      	ldr	r1, [pc, #28]	@ (8010bd4 <tcp_sent+0x3c>)
 8010bb8:	4807      	ldr	r0, [pc, #28]	@ (8010bd8 <tcp_sent+0x40>)
 8010bba:	f008 fa83 	bl	80190c4 <iprintf>
    pcb->sent = sent;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	0801cbe4 	.word	0x0801cbe4
 8010bd4:	0801d1a8 	.word	0x0801d1a8
 8010bd8:	0801cc28 	.word	0x0801cc28

08010bdc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00e      	beq.n	8010c0a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	7d1b      	ldrb	r3, [r3, #20]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d106      	bne.n	8010c02 <tcp_err+0x26>
 8010bf4:	4b07      	ldr	r3, [pc, #28]	@ (8010c14 <tcp_err+0x38>)
 8010bf6:	f640 020d 	movw	r2, #2061	@ 0x80d
 8010bfa:	4907      	ldr	r1, [pc, #28]	@ (8010c18 <tcp_err+0x3c>)
 8010bfc:	4807      	ldr	r0, [pc, #28]	@ (8010c1c <tcp_err+0x40>)
 8010bfe:	f008 fa61 	bl	80190c4 <iprintf>
    pcb->errf = err;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	683a      	ldr	r2, [r7, #0]
 8010c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8010c0a:	bf00      	nop
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	0801cbe4 	.word	0x0801cbe4
 8010c18:	0801d1d0 	.word	0x0801d1d0
 8010c1c:	0801cc28 	.word	0x0801cc28

08010c20 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b085      	sub	sp, #20
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d008      	beq.n	8010c42 <tcp_accept+0x22>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	7d1b      	ldrb	r3, [r3, #20]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d104      	bne.n	8010c42 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	619a      	str	r2, [r3, #24]
  }
}
 8010c42:	bf00      	nop
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
	...

08010c50 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d107      	bne.n	8010c74 <tcp_poll+0x24>
 8010c64:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca0 <tcp_poll+0x50>)
 8010c66:	f640 023d 	movw	r2, #2109	@ 0x83d
 8010c6a:	490e      	ldr	r1, [pc, #56]	@ (8010ca4 <tcp_poll+0x54>)
 8010c6c:	480e      	ldr	r0, [pc, #56]	@ (8010ca8 <tcp_poll+0x58>)
 8010c6e:	f008 fa29 	bl	80190c4 <iprintf>
 8010c72:	e011      	b.n	8010c98 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	7d1b      	ldrb	r3, [r3, #20]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d106      	bne.n	8010c8a <tcp_poll+0x3a>
 8010c7c:	4b08      	ldr	r3, [pc, #32]	@ (8010ca0 <tcp_poll+0x50>)
 8010c7e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8010c82:	490a      	ldr	r1, [pc, #40]	@ (8010cac <tcp_poll+0x5c>)
 8010c84:	4808      	ldr	r0, [pc, #32]	@ (8010ca8 <tcp_poll+0x58>)
 8010c86:	f008 fa1d 	bl	80190c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	79fa      	ldrb	r2, [r7, #7]
 8010c96:	775a      	strb	r2, [r3, #29]
}
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	0801cbe4 	.word	0x0801cbe4
 8010ca4:	0801d1f8 	.word	0x0801d1f8
 8010ca8:	0801cc28 	.word	0x0801cc28
 8010cac:	0801d210 	.word	0x0801d210

08010cb0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d107      	bne.n	8010cce <tcp_pcb_purge+0x1e>
 8010cbe:	4b21      	ldr	r3, [pc, #132]	@ (8010d44 <tcp_pcb_purge+0x94>)
 8010cc0:	f640 0251 	movw	r2, #2129	@ 0x851
 8010cc4:	4920      	ldr	r1, [pc, #128]	@ (8010d48 <tcp_pcb_purge+0x98>)
 8010cc6:	4821      	ldr	r0, [pc, #132]	@ (8010d4c <tcp_pcb_purge+0x9c>)
 8010cc8:	f008 f9fc 	bl	80190c4 <iprintf>
 8010ccc:	e037      	b.n	8010d3e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	7d1b      	ldrb	r3, [r3, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d033      	beq.n	8010d3e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010cda:	2b0a      	cmp	r3, #10
 8010cdc:	d02f      	beq.n	8010d3e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d02b      	beq.n	8010d3e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d007      	beq.n	8010cfe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fe f89c 	bl	800ee30 <pbuf_free>
      pcb->refused_data = NULL;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d002      	beq.n	8010d0c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 f986 	bl	8011018 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d12:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fcf9 	bl	8010710 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff fcf4 	bl	8010710 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	0801cbe4 	.word	0x0801cbe4
 8010d48:	0801d230 	.word	0x0801d230
 8010d4c:	0801cc28 	.word	0x0801cc28

08010d50 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <tcp_pcb_remove+0x1e>
 8010d60:	4b3e      	ldr	r3, [pc, #248]	@ (8010e5c <tcp_pcb_remove+0x10c>)
 8010d62:	f640 0283 	movw	r2, #2179	@ 0x883
 8010d66:	493e      	ldr	r1, [pc, #248]	@ (8010e60 <tcp_pcb_remove+0x110>)
 8010d68:	483e      	ldr	r0, [pc, #248]	@ (8010e64 <tcp_pcb_remove+0x114>)
 8010d6a:	f008 f9ab 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d106      	bne.n	8010d82 <tcp_pcb_remove+0x32>
 8010d74:	4b39      	ldr	r3, [pc, #228]	@ (8010e5c <tcp_pcb_remove+0x10c>)
 8010d76:	f640 0284 	movw	r2, #2180	@ 0x884
 8010d7a:	493b      	ldr	r1, [pc, #236]	@ (8010e68 <tcp_pcb_remove+0x118>)
 8010d7c:	4839      	ldr	r0, [pc, #228]	@ (8010e64 <tcp_pcb_remove+0x114>)
 8010d7e:	f008 f9a1 	bl	80190c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	683a      	ldr	r2, [r7, #0]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d105      	bne.n	8010d98 <tcp_pcb_remove+0x48>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68da      	ldr	r2, [r3, #12]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	e013      	b.n	8010dc0 <tcp_pcb_remove+0x70>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	60fb      	str	r3, [r7, #12]
 8010d9e:	e00c      	b.n	8010dba <tcp_pcb_remove+0x6a>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	683a      	ldr	r2, [r7, #0]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d104      	bne.n	8010db4 <tcp_pcb_remove+0x64>
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	68da      	ldr	r2, [r3, #12]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	60da      	str	r2, [r3, #12]
 8010db2:	e005      	b.n	8010dc0 <tcp_pcb_remove+0x70>
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d1ef      	bne.n	8010da0 <tcp_pcb_remove+0x50>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010dc6:	6838      	ldr	r0, [r7, #0]
 8010dc8:	f7ff ff72 	bl	8010cb0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	7d1b      	ldrb	r3, [r3, #20]
 8010dd0:	2b0a      	cmp	r3, #10
 8010dd2:	d013      	beq.n	8010dfc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d00f      	beq.n	8010dfc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d009      	beq.n	8010dfc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	8b5b      	ldrh	r3, [r3, #26]
 8010dec:	f043 0302 	orr.w	r3, r3, #2
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010df6:	6838      	ldr	r0, [r7, #0]
 8010df8:	f003 fbc0 	bl	801457c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	7d1b      	ldrb	r3, [r3, #20]
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d020      	beq.n	8010e46 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d006      	beq.n	8010e1a <tcp_pcb_remove+0xca>
 8010e0c:	4b13      	ldr	r3, [pc, #76]	@ (8010e5c <tcp_pcb_remove+0x10c>)
 8010e0e:	f640 0293 	movw	r2, #2195	@ 0x893
 8010e12:	4916      	ldr	r1, [pc, #88]	@ (8010e6c <tcp_pcb_remove+0x11c>)
 8010e14:	4813      	ldr	r0, [pc, #76]	@ (8010e64 <tcp_pcb_remove+0x114>)
 8010e16:	f008 f955 	bl	80190c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d006      	beq.n	8010e30 <tcp_pcb_remove+0xe0>
 8010e22:	4b0e      	ldr	r3, [pc, #56]	@ (8010e5c <tcp_pcb_remove+0x10c>)
 8010e24:	f640 0294 	movw	r2, #2196	@ 0x894
 8010e28:	4911      	ldr	r1, [pc, #68]	@ (8010e70 <tcp_pcb_remove+0x120>)
 8010e2a:	480e      	ldr	r0, [pc, #56]	@ (8010e64 <tcp_pcb_remove+0x114>)
 8010e2c:	f008 f94a 	bl	80190c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d006      	beq.n	8010e46 <tcp_pcb_remove+0xf6>
 8010e38:	4b08      	ldr	r3, [pc, #32]	@ (8010e5c <tcp_pcb_remove+0x10c>)
 8010e3a:	f640 0296 	movw	r2, #2198	@ 0x896
 8010e3e:	490d      	ldr	r1, [pc, #52]	@ (8010e74 <tcp_pcb_remove+0x124>)
 8010e40:	4808      	ldr	r0, [pc, #32]	@ (8010e64 <tcp_pcb_remove+0x114>)
 8010e42:	f008 f93f 	bl	80190c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010e52:	bf00      	nop
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	0801cbe4 	.word	0x0801cbe4
 8010e60:	0801d24c 	.word	0x0801d24c
 8010e64:	0801cc28 	.word	0x0801cc28
 8010e68:	0801d268 	.word	0x0801d268
 8010e6c:	0801d288 	.word	0x0801d288
 8010e70:	0801d2a0 	.word	0x0801d2a0
 8010e74:	0801d2bc 	.word	0x0801d2bc

08010e78 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d106      	bne.n	8010e94 <tcp_next_iss+0x1c>
 8010e86:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb0 <tcp_next_iss+0x38>)
 8010e88:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010e8c:	4909      	ldr	r1, [pc, #36]	@ (8010eb4 <tcp_next_iss+0x3c>)
 8010e8e:	480a      	ldr	r0, [pc, #40]	@ (8010eb8 <tcp_next_iss+0x40>)
 8010e90:	f008 f918 	bl	80190c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010e94:	4b09      	ldr	r3, [pc, #36]	@ (8010ebc <tcp_next_iss+0x44>)
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	4b09      	ldr	r3, [pc, #36]	@ (8010ec0 <tcp_next_iss+0x48>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	4a07      	ldr	r2, [pc, #28]	@ (8010ebc <tcp_next_iss+0x44>)
 8010ea0:	6013      	str	r3, [r2, #0]
  return iss;
 8010ea2:	4b06      	ldr	r3, [pc, #24]	@ (8010ebc <tcp_next_iss+0x44>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	0801cbe4 	.word	0x0801cbe4
 8010eb4:	0801d2d4 	.word	0x0801d2d4
 8010eb8:	0801cc28 	.word	0x0801cc28
 8010ebc:	20000014 	.word	0x20000014
 8010ec0:	2000e118 	.word	0x2000e118

08010ec4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d106      	bne.n	8010ee6 <tcp_eff_send_mss_netif+0x22>
 8010ed8:	4b14      	ldr	r3, [pc, #80]	@ (8010f2c <tcp_eff_send_mss_netif+0x68>)
 8010eda:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010ede:	4914      	ldr	r1, [pc, #80]	@ (8010f30 <tcp_eff_send_mss_netif+0x6c>)
 8010ee0:	4814      	ldr	r0, [pc, #80]	@ (8010f34 <tcp_eff_send_mss_netif+0x70>)
 8010ee2:	f008 f8ef 	bl	80190c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d101      	bne.n	8010ef0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010eec:	89fb      	ldrh	r3, [r7, #14]
 8010eee:	e019      	b.n	8010f24 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010ef4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010ef6:	8afb      	ldrh	r3, [r7, #22]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d012      	beq.n	8010f22 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010efc:	2328      	movs	r3, #40	@ 0x28
 8010efe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010f00:	8afa      	ldrh	r2, [r7, #22]
 8010f02:	8abb      	ldrh	r3, [r7, #20]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d904      	bls.n	8010f12 <tcp_eff_send_mss_netif+0x4e>
 8010f08:	8afa      	ldrh	r2, [r7, #22]
 8010f0a:	8abb      	ldrh	r3, [r7, #20]
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	e000      	b.n	8010f14 <tcp_eff_send_mss_netif+0x50>
 8010f12:	2300      	movs	r3, #0
 8010f14:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010f16:	8a7a      	ldrh	r2, [r7, #18]
 8010f18:	89fb      	ldrh	r3, [r7, #14]
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	bf28      	it	cs
 8010f1e:	4613      	movcs	r3, r2
 8010f20:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010f22:	89fb      	ldrh	r3, [r7, #14]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3718      	adds	r7, #24
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	0801cbe4 	.word	0x0801cbe4
 8010f30:	0801d2f0 	.word	0x0801d2f0
 8010f34:	0801cc28 	.word	0x0801cc28

08010f38 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d119      	bne.n	8010f80 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010f4c:	4b10      	ldr	r3, [pc, #64]	@ (8010f90 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010f4e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010f52:	4910      	ldr	r1, [pc, #64]	@ (8010f94 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010f54:	4810      	ldr	r0, [pc, #64]	@ (8010f98 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010f56:	f008 f8b5 	bl	80190c4 <iprintf>

  while (pcb != NULL) {
 8010f5a:	e011      	b.n	8010f80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d108      	bne.n	8010f7a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f7fe fd4e 	bl	800fa10 <tcp_abort>
      pcb = next;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	e002      	b.n	8010f80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d1ea      	bne.n	8010f5c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010f86:	bf00      	nop
 8010f88:	bf00      	nop
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	0801cbe4 	.word	0x0801cbe4
 8010f94:	0801d318 	.word	0x0801d318
 8010f98:	0801cc28 	.word	0x0801cc28

08010f9c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d02a      	beq.n	8011002 <tcp_netif_ip_addr_changed+0x66>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d026      	beq.n	8011002 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010fb4:	4b15      	ldr	r3, [pc, #84]	@ (801100c <tcp_netif_ip_addr_changed+0x70>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ff ffbc 	bl	8010f38 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010fc0:	4b13      	ldr	r3, [pc, #76]	@ (8011010 <tcp_netif_ip_addr_changed+0x74>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff ffb6 	bl	8010f38 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d017      	beq.n	8011002 <tcp_netif_ip_addr_changed+0x66>
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d013      	beq.n	8011002 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fda:	4b0e      	ldr	r3, [pc, #56]	@ (8011014 <tcp_netif_ip_addr_changed+0x78>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	60fb      	str	r3, [r7, #12]
 8010fe0:	e00c      	b.n	8010ffc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d103      	bne.n	8010ff6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	60fb      	str	r3, [r7, #12]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1ef      	bne.n	8010fe2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011002:	bf00      	nop
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	2000e124 	.word	0x2000e124
 8011010:	2000e11c 	.word	0x2000e11c
 8011014:	2000e120 	.word	0x2000e120

08011018 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011024:	2b00      	cmp	r3, #0
 8011026:	d007      	beq.n	8011038 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff fb6f 	bl	8010710 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011040:	b590      	push	{r4, r7, lr}
 8011042:	b08d      	sub	sp, #52	@ 0x34
 8011044:	af04      	add	r7, sp, #16
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d105      	bne.n	801105c <tcp_input+0x1c>
 8011050:	4b9b      	ldr	r3, [pc, #620]	@ (80112c0 <tcp_input+0x280>)
 8011052:	2283      	movs	r2, #131	@ 0x83
 8011054:	499b      	ldr	r1, [pc, #620]	@ (80112c4 <tcp_input+0x284>)
 8011056:	489c      	ldr	r0, [pc, #624]	@ (80112c8 <tcp_input+0x288>)
 8011058:	f008 f834 	bl	80190c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	4a9a      	ldr	r2, [pc, #616]	@ (80112cc <tcp_input+0x28c>)
 8011062:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	895b      	ldrh	r3, [r3, #10]
 8011068:	2b13      	cmp	r3, #19
 801106a:	f240 83d1 	bls.w	8011810 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801106e:	4b98      	ldr	r3, [pc, #608]	@ (80112d0 <tcp_input+0x290>)
 8011070:	695b      	ldr	r3, [r3, #20]
 8011072:	4a97      	ldr	r2, [pc, #604]	@ (80112d0 <tcp_input+0x290>)
 8011074:	6812      	ldr	r2, [r2, #0]
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f006 f9df 	bl	801743c <ip4_addr_isbroadcast_u32>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	f040 83c7 	bne.w	8011814 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011086:	4b92      	ldr	r3, [pc, #584]	@ (80112d0 <tcp_input+0x290>)
 8011088:	695b      	ldr	r3, [r3, #20]
 801108a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801108e:	2be0      	cmp	r3, #224	@ 0xe0
 8011090:	f000 83c0 	beq.w	8011814 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011094:	4b8d      	ldr	r3, [pc, #564]	@ (80112cc <tcp_input+0x28c>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	899b      	ldrh	r3, [r3, #12]
 801109a:	b29b      	uxth	r3, r3
 801109c:	4618      	mov	r0, r3
 801109e:	f7fc fb1b 	bl	800d6d8 <lwip_htons>
 80110a2:	4603      	mov	r3, r0
 80110a4:	0b1b      	lsrs	r3, r3, #12
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80110ae:	7cbb      	ldrb	r3, [r7, #18]
 80110b0:	2b13      	cmp	r3, #19
 80110b2:	f240 83b1 	bls.w	8011818 <tcp_input+0x7d8>
 80110b6:	7cbb      	ldrb	r3, [r7, #18]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	891b      	ldrh	r3, [r3, #8]
 80110be:	429a      	cmp	r2, r3
 80110c0:	f200 83aa 	bhi.w	8011818 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80110c4:	7cbb      	ldrb	r3, [r7, #18]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	3b14      	subs	r3, #20
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	4b81      	ldr	r3, [pc, #516]	@ (80112d4 <tcp_input+0x294>)
 80110ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80110d0:	4b81      	ldr	r3, [pc, #516]	@ (80112d8 <tcp_input+0x298>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	895a      	ldrh	r2, [r3, #10]
 80110da:	7cbb      	ldrb	r3, [r7, #18]
 80110dc:	b29b      	uxth	r3, r3
 80110de:	429a      	cmp	r2, r3
 80110e0:	d309      	bcc.n	80110f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80110e2:	4b7c      	ldr	r3, [pc, #496]	@ (80112d4 <tcp_input+0x294>)
 80110e4:	881a      	ldrh	r2, [r3, #0]
 80110e6:	4b7d      	ldr	r3, [pc, #500]	@ (80112dc <tcp_input+0x29c>)
 80110e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80110ea:	7cbb      	ldrb	r3, [r7, #18]
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7fd fe18 	bl	800ed24 <pbuf_remove_header>
 80110f4:	e04e      	b.n	8011194 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d105      	bne.n	801110a <tcp_input+0xca>
 80110fe:	4b70      	ldr	r3, [pc, #448]	@ (80112c0 <tcp_input+0x280>)
 8011100:	22c2      	movs	r2, #194	@ 0xc2
 8011102:	4977      	ldr	r1, [pc, #476]	@ (80112e0 <tcp_input+0x2a0>)
 8011104:	4870      	ldr	r0, [pc, #448]	@ (80112c8 <tcp_input+0x288>)
 8011106:	f007 ffdd 	bl	80190c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801110a:	2114      	movs	r1, #20
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f7fd fe09 	bl	800ed24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	895a      	ldrh	r2, [r3, #10]
 8011116:	4b71      	ldr	r3, [pc, #452]	@ (80112dc <tcp_input+0x29c>)
 8011118:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801111a:	4b6e      	ldr	r3, [pc, #440]	@ (80112d4 <tcp_input+0x294>)
 801111c:	881a      	ldrh	r2, [r3, #0]
 801111e:	4b6f      	ldr	r3, [pc, #444]	@ (80112dc <tcp_input+0x29c>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011126:	4b6d      	ldr	r3, [pc, #436]	@ (80112dc <tcp_input+0x29c>)
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	4619      	mov	r1, r3
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7fd fdf9 	bl	800ed24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	895b      	ldrh	r3, [r3, #10]
 8011138:	8a3a      	ldrh	r2, [r7, #16]
 801113a:	429a      	cmp	r2, r3
 801113c:	f200 836e 	bhi.w	801181c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	4a64      	ldr	r2, [pc, #400]	@ (80112d8 <tcp_input+0x298>)
 8011148:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	8a3a      	ldrh	r2, [r7, #16]
 8011150:	4611      	mov	r1, r2
 8011152:	4618      	mov	r0, r3
 8011154:	f7fd fde6 	bl	800ed24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	891a      	ldrh	r2, [r3, #8]
 801115c:	8a3b      	ldrh	r3, [r7, #16]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	b29a      	uxth	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	895b      	ldrh	r3, [r3, #10]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d005      	beq.n	801117a <tcp_input+0x13a>
 801116e:	4b54      	ldr	r3, [pc, #336]	@ (80112c0 <tcp_input+0x280>)
 8011170:	22df      	movs	r2, #223	@ 0xdf
 8011172:	495c      	ldr	r1, [pc, #368]	@ (80112e4 <tcp_input+0x2a4>)
 8011174:	4854      	ldr	r0, [pc, #336]	@ (80112c8 <tcp_input+0x288>)
 8011176:	f007 ffa5 	bl	80190c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	891a      	ldrh	r2, [r3, #8]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	891b      	ldrh	r3, [r3, #8]
 8011184:	429a      	cmp	r2, r3
 8011186:	d005      	beq.n	8011194 <tcp_input+0x154>
 8011188:	4b4d      	ldr	r3, [pc, #308]	@ (80112c0 <tcp_input+0x280>)
 801118a:	22e0      	movs	r2, #224	@ 0xe0
 801118c:	4956      	ldr	r1, [pc, #344]	@ (80112e8 <tcp_input+0x2a8>)
 801118e:	484e      	ldr	r0, [pc, #312]	@ (80112c8 <tcp_input+0x288>)
 8011190:	f007 ff98 	bl	80190c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011194:	4b4d      	ldr	r3, [pc, #308]	@ (80112cc <tcp_input+0x28c>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	b29b      	uxth	r3, r3
 801119c:	4a4b      	ldr	r2, [pc, #300]	@ (80112cc <tcp_input+0x28c>)
 801119e:	6814      	ldr	r4, [r2, #0]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fc fa99 	bl	800d6d8 <lwip_htons>
 80111a6:	4603      	mov	r3, r0
 80111a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80111aa:	4b48      	ldr	r3, [pc, #288]	@ (80112cc <tcp_input+0x28c>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	885b      	ldrh	r3, [r3, #2]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	4a46      	ldr	r2, [pc, #280]	@ (80112cc <tcp_input+0x28c>)
 80111b4:	6814      	ldr	r4, [r2, #0]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fc fa8e 	bl	800d6d8 <lwip_htons>
 80111bc:	4603      	mov	r3, r0
 80111be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80111c0:	4b42      	ldr	r3, [pc, #264]	@ (80112cc <tcp_input+0x28c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4a41      	ldr	r2, [pc, #260]	@ (80112cc <tcp_input+0x28c>)
 80111c8:	6814      	ldr	r4, [r2, #0]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fc fa99 	bl	800d702 <lwip_htonl>
 80111d0:	4603      	mov	r3, r0
 80111d2:	6063      	str	r3, [r4, #4]
 80111d4:	6863      	ldr	r3, [r4, #4]
 80111d6:	4a45      	ldr	r2, [pc, #276]	@ (80112ec <tcp_input+0x2ac>)
 80111d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80111da:	4b3c      	ldr	r3, [pc, #240]	@ (80112cc <tcp_input+0x28c>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	4a3a      	ldr	r2, [pc, #232]	@ (80112cc <tcp_input+0x28c>)
 80111e2:	6814      	ldr	r4, [r2, #0]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fc fa8c 	bl	800d702 <lwip_htonl>
 80111ea:	4603      	mov	r3, r0
 80111ec:	60a3      	str	r3, [r4, #8]
 80111ee:	68a3      	ldr	r3, [r4, #8]
 80111f0:	4a3f      	ldr	r2, [pc, #252]	@ (80112f0 <tcp_input+0x2b0>)
 80111f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80111f4:	4b35      	ldr	r3, [pc, #212]	@ (80112cc <tcp_input+0x28c>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	89db      	ldrh	r3, [r3, #14]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	4a33      	ldr	r2, [pc, #204]	@ (80112cc <tcp_input+0x28c>)
 80111fe:	6814      	ldr	r4, [r2, #0]
 8011200:	4618      	mov	r0, r3
 8011202:	f7fc fa69 	bl	800d6d8 <lwip_htons>
 8011206:	4603      	mov	r3, r0
 8011208:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801120a:	4b30      	ldr	r3, [pc, #192]	@ (80112cc <tcp_input+0x28c>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fc fa60 	bl	800d6d8 <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011220:	b2da      	uxtb	r2, r3
 8011222:	4b34      	ldr	r3, [pc, #208]	@ (80112f4 <tcp_input+0x2b4>)
 8011224:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	891a      	ldrh	r2, [r3, #8]
 801122a:	4b33      	ldr	r3, [pc, #204]	@ (80112f8 <tcp_input+0x2b8>)
 801122c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801122e:	4b31      	ldr	r3, [pc, #196]	@ (80112f4 <tcp_input+0x2b4>)
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	f003 0303 	and.w	r3, r3, #3
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00c      	beq.n	8011254 <tcp_input+0x214>
    tcplen++;
 801123a:	4b2f      	ldr	r3, [pc, #188]	@ (80112f8 <tcp_input+0x2b8>)
 801123c:	881b      	ldrh	r3, [r3, #0]
 801123e:	3301      	adds	r3, #1
 8011240:	b29a      	uxth	r2, r3
 8011242:	4b2d      	ldr	r3, [pc, #180]	@ (80112f8 <tcp_input+0x2b8>)
 8011244:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	4b2b      	ldr	r3, [pc, #172]	@ (80112f8 <tcp_input+0x2b8>)
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	429a      	cmp	r2, r3
 8011250:	f200 82e6 	bhi.w	8011820 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011254:	2300      	movs	r3, #0
 8011256:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011258:	4b28      	ldr	r3, [pc, #160]	@ (80112fc <tcp_input+0x2bc>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	e09d      	b.n	801139c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	7d1b      	ldrb	r3, [r3, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d105      	bne.n	8011274 <tcp_input+0x234>
 8011268:	4b15      	ldr	r3, [pc, #84]	@ (80112c0 <tcp_input+0x280>)
 801126a:	22fb      	movs	r2, #251	@ 0xfb
 801126c:	4924      	ldr	r1, [pc, #144]	@ (8011300 <tcp_input+0x2c0>)
 801126e:	4816      	ldr	r0, [pc, #88]	@ (80112c8 <tcp_input+0x288>)
 8011270:	f007 ff28 	bl	80190c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	7d1b      	ldrb	r3, [r3, #20]
 8011278:	2b0a      	cmp	r3, #10
 801127a:	d105      	bne.n	8011288 <tcp_input+0x248>
 801127c:	4b10      	ldr	r3, [pc, #64]	@ (80112c0 <tcp_input+0x280>)
 801127e:	22fc      	movs	r2, #252	@ 0xfc
 8011280:	4920      	ldr	r1, [pc, #128]	@ (8011304 <tcp_input+0x2c4>)
 8011282:	4811      	ldr	r0, [pc, #68]	@ (80112c8 <tcp_input+0x288>)
 8011284:	f007 ff1e 	bl	80190c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011288:	69fb      	ldr	r3, [r7, #28]
 801128a:	7d1b      	ldrb	r3, [r3, #20]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d105      	bne.n	801129c <tcp_input+0x25c>
 8011290:	4b0b      	ldr	r3, [pc, #44]	@ (80112c0 <tcp_input+0x280>)
 8011292:	22fd      	movs	r2, #253	@ 0xfd
 8011294:	491c      	ldr	r1, [pc, #112]	@ (8011308 <tcp_input+0x2c8>)
 8011296:	480c      	ldr	r0, [pc, #48]	@ (80112c8 <tcp_input+0x288>)
 8011298:	f007 ff14 	bl	80190c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	7a1b      	ldrb	r3, [r3, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d033      	beq.n	801130c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	7a1a      	ldrb	r2, [r3, #8]
 80112a8:	4b09      	ldr	r3, [pc, #36]	@ (80112d0 <tcp_input+0x290>)
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80112b0:	3301      	adds	r3, #1
 80112b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d029      	beq.n	801130c <tcp_input+0x2cc>
      prev = pcb;
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	61bb      	str	r3, [r7, #24]
      continue;
 80112bc:	e06b      	b.n	8011396 <tcp_input+0x356>
 80112be:	bf00      	nop
 80112c0:	0801d34c 	.word	0x0801d34c
 80112c4:	0801d380 	.word	0x0801d380
 80112c8:	0801d398 	.word	0x0801d398
 80112cc:	2000e140 	.word	0x2000e140
 80112d0:	20008804 	.word	0x20008804
 80112d4:	2000e144 	.word	0x2000e144
 80112d8:	2000e148 	.word	0x2000e148
 80112dc:	2000e146 	.word	0x2000e146
 80112e0:	0801d3c0 	.word	0x0801d3c0
 80112e4:	0801d3d0 	.word	0x0801d3d0
 80112e8:	0801d3dc 	.word	0x0801d3dc
 80112ec:	2000e150 	.word	0x2000e150
 80112f0:	2000e154 	.word	0x2000e154
 80112f4:	2000e15c 	.word	0x2000e15c
 80112f8:	2000e15a 	.word	0x2000e15a
 80112fc:	2000e124 	.word	0x2000e124
 8011300:	0801d3fc 	.word	0x0801d3fc
 8011304:	0801d424 	.word	0x0801d424
 8011308:	0801d450 	.word	0x0801d450
    }

    if (pcb->remote_port == tcphdr->src &&
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	8b1a      	ldrh	r2, [r3, #24]
 8011310:	4b72      	ldr	r3, [pc, #456]	@ (80114dc <tcp_input+0x49c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	b29b      	uxth	r3, r3
 8011318:	429a      	cmp	r2, r3
 801131a:	d13a      	bne.n	8011392 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	8ada      	ldrh	r2, [r3, #22]
 8011320:	4b6e      	ldr	r3, [pc, #440]	@ (80114dc <tcp_input+0x49c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	885b      	ldrh	r3, [r3, #2]
 8011326:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011328:	429a      	cmp	r2, r3
 801132a:	d132      	bne.n	8011392 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	685a      	ldr	r2, [r3, #4]
 8011330:	4b6b      	ldr	r3, [pc, #428]	@ (80114e0 <tcp_input+0x4a0>)
 8011332:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011334:	429a      	cmp	r2, r3
 8011336:	d12c      	bne.n	8011392 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	4b68      	ldr	r3, [pc, #416]	@ (80114e0 <tcp_input+0x4a0>)
 801133e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011340:	429a      	cmp	r2, r3
 8011342:	d126      	bne.n	8011392 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	69fa      	ldr	r2, [r7, #28]
 801134a:	429a      	cmp	r2, r3
 801134c:	d106      	bne.n	801135c <tcp_input+0x31c>
 801134e:	4b65      	ldr	r3, [pc, #404]	@ (80114e4 <tcp_input+0x4a4>)
 8011350:	f240 120d 	movw	r2, #269	@ 0x10d
 8011354:	4964      	ldr	r1, [pc, #400]	@ (80114e8 <tcp_input+0x4a8>)
 8011356:	4865      	ldr	r0, [pc, #404]	@ (80114ec <tcp_input+0x4ac>)
 8011358:	f007 feb4 	bl	80190c4 <iprintf>
      if (prev != NULL) {
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00a      	beq.n	8011378 <tcp_input+0x338>
        prev->next = pcb->next;
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	68da      	ldr	r2, [r3, #12]
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801136a:	4b61      	ldr	r3, [pc, #388]	@ (80114f0 <tcp_input+0x4b0>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011372:	4a5f      	ldr	r2, [pc, #380]	@ (80114f0 <tcp_input+0x4b0>)
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	69fa      	ldr	r2, [r7, #28]
 801137e:	429a      	cmp	r2, r3
 8011380:	d111      	bne.n	80113a6 <tcp_input+0x366>
 8011382:	4b58      	ldr	r3, [pc, #352]	@ (80114e4 <tcp_input+0x4a4>)
 8011384:	f240 1215 	movw	r2, #277	@ 0x115
 8011388:	495a      	ldr	r1, [pc, #360]	@ (80114f4 <tcp_input+0x4b4>)
 801138a:	4858      	ldr	r0, [pc, #352]	@ (80114ec <tcp_input+0x4ac>)
 801138c:	f007 fe9a 	bl	80190c4 <iprintf>
      break;
 8011390:	e009      	b.n	80113a6 <tcp_input+0x366>
    }
    prev = pcb;
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	61fb      	str	r3, [r7, #28]
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f47f af5e 	bne.w	8011260 <tcp_input+0x220>
 80113a4:	e000      	b.n	80113a8 <tcp_input+0x368>
      break;
 80113a6:	bf00      	nop
  }

  if (pcb == NULL) {
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f040 80aa 	bne.w	8011504 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113b0:	4b51      	ldr	r3, [pc, #324]	@ (80114f8 <tcp_input+0x4b8>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	61fb      	str	r3, [r7, #28]
 80113b6:	e03f      	b.n	8011438 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	7d1b      	ldrb	r3, [r3, #20]
 80113bc:	2b0a      	cmp	r3, #10
 80113be:	d006      	beq.n	80113ce <tcp_input+0x38e>
 80113c0:	4b48      	ldr	r3, [pc, #288]	@ (80114e4 <tcp_input+0x4a4>)
 80113c2:	f240 121f 	movw	r2, #287	@ 0x11f
 80113c6:	494d      	ldr	r1, [pc, #308]	@ (80114fc <tcp_input+0x4bc>)
 80113c8:	4848      	ldr	r0, [pc, #288]	@ (80114ec <tcp_input+0x4ac>)
 80113ca:	f007 fe7b 	bl	80190c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113ce:	69fb      	ldr	r3, [r7, #28]
 80113d0:	7a1b      	ldrb	r3, [r3, #8]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d009      	beq.n	80113ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80113d6:	69fb      	ldr	r3, [r7, #28]
 80113d8:	7a1a      	ldrb	r2, [r3, #8]
 80113da:	4b41      	ldr	r3, [pc, #260]	@ (80114e0 <tcp_input+0x4a0>)
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80113e2:	3301      	adds	r3, #1
 80113e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d122      	bne.n	8011430 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	8b1a      	ldrh	r2, [r3, #24]
 80113ee:	4b3b      	ldr	r3, [pc, #236]	@ (80114dc <tcp_input+0x49c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d11b      	bne.n	8011432 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	8ada      	ldrh	r2, [r3, #22]
 80113fe:	4b37      	ldr	r3, [pc, #220]	@ (80114dc <tcp_input+0x49c>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	885b      	ldrh	r3, [r3, #2]
 8011404:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011406:	429a      	cmp	r2, r3
 8011408:	d113      	bne.n	8011432 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	4b34      	ldr	r3, [pc, #208]	@ (80114e0 <tcp_input+0x4a0>)
 8011410:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011412:	429a      	cmp	r2, r3
 8011414:	d10d      	bne.n	8011432 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	4b31      	ldr	r3, [pc, #196]	@ (80114e0 <tcp_input+0x4a0>)
 801141c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801141e:	429a      	cmp	r2, r3
 8011420:	d107      	bne.n	8011432 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011422:	69f8      	ldr	r0, [r7, #28]
 8011424:	f000 fb56 	bl	8011ad4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7fd fd01 	bl	800ee30 <pbuf_free>
        return;
 801142e:	e1fd      	b.n	801182c <tcp_input+0x7ec>
        continue;
 8011430:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	61fb      	str	r3, [r7, #28]
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d1bc      	bne.n	80113b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801143e:	2300      	movs	r3, #0
 8011440:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011442:	4b2f      	ldr	r3, [pc, #188]	@ (8011500 <tcp_input+0x4c0>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	e02a      	b.n	80114a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	7a1b      	ldrb	r3, [r3, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00c      	beq.n	801146c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	7a1a      	ldrb	r2, [r3, #8]
 8011456:	4b22      	ldr	r3, [pc, #136]	@ (80114e0 <tcp_input+0x4a0>)
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801145e:	3301      	adds	r3, #1
 8011460:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011462:	429a      	cmp	r2, r3
 8011464:	d002      	beq.n	801146c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	61bb      	str	r3, [r7, #24]
        continue;
 801146a:	e016      	b.n	801149a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	8ada      	ldrh	r2, [r3, #22]
 8011470:	4b1a      	ldr	r3, [pc, #104]	@ (80114dc <tcp_input+0x49c>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	885b      	ldrh	r3, [r3, #2]
 8011476:	b29b      	uxth	r3, r3
 8011478:	429a      	cmp	r2, r3
 801147a:	d10c      	bne.n	8011496 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	4b17      	ldr	r3, [pc, #92]	@ (80114e0 <tcp_input+0x4a0>)
 8011482:	695b      	ldr	r3, [r3, #20]
 8011484:	429a      	cmp	r2, r3
 8011486:	d00f      	beq.n	80114a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00d      	beq.n	80114aa <tcp_input+0x46a>
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d009      	beq.n	80114aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	617b      	str	r3, [r7, #20]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1d1      	bne.n	801144a <tcp_input+0x40a>
 80114a6:	e000      	b.n	80114aa <tcp_input+0x46a>
            break;
 80114a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d029      	beq.n	8011504 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00a      	beq.n	80114cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	68da      	ldr	r2, [r3, #12]
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80114be:	4b10      	ldr	r3, [pc, #64]	@ (8011500 <tcp_input+0x4c0>)
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80114c6:	4a0e      	ldr	r2, [pc, #56]	@ (8011500 <tcp_input+0x4c0>)
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80114cc:	6978      	ldr	r0, [r7, #20]
 80114ce:	f000 fa03 	bl	80118d8 <tcp_listen_input>
      }
      pbuf_free(p);
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7fd fcac 	bl	800ee30 <pbuf_free>
      return;
 80114d8:	e1a8      	b.n	801182c <tcp_input+0x7ec>
 80114da:	bf00      	nop
 80114dc:	2000e140 	.word	0x2000e140
 80114e0:	20008804 	.word	0x20008804
 80114e4:	0801d34c 	.word	0x0801d34c
 80114e8:	0801d478 	.word	0x0801d478
 80114ec:	0801d398 	.word	0x0801d398
 80114f0:	2000e124 	.word	0x2000e124
 80114f4:	0801d4a4 	.word	0x0801d4a4
 80114f8:	2000e128 	.word	0x2000e128
 80114fc:	0801d4d0 	.word	0x0801d4d0
 8011500:	2000e120 	.word	0x2000e120
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	2b00      	cmp	r3, #0
 8011508:	f000 8158 	beq.w	80117bc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801150c:	4b95      	ldr	r3, [pc, #596]	@ (8011764 <tcp_input+0x724>)
 801150e:	2200      	movs	r2, #0
 8011510:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	891a      	ldrh	r2, [r3, #8]
 8011516:	4b93      	ldr	r3, [pc, #588]	@ (8011764 <tcp_input+0x724>)
 8011518:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801151a:	4a92      	ldr	r2, [pc, #584]	@ (8011764 <tcp_input+0x724>)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011520:	4b91      	ldr	r3, [pc, #580]	@ (8011768 <tcp_input+0x728>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4a8f      	ldr	r2, [pc, #572]	@ (8011764 <tcp_input+0x724>)
 8011526:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011528:	4b90      	ldr	r3, [pc, #576]	@ (801176c <tcp_input+0x72c>)
 801152a:	2200      	movs	r2, #0
 801152c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801152e:	4b90      	ldr	r3, [pc, #576]	@ (8011770 <tcp_input+0x730>)
 8011530:	2200      	movs	r2, #0
 8011532:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011534:	4b8f      	ldr	r3, [pc, #572]	@ (8011774 <tcp_input+0x734>)
 8011536:	2200      	movs	r2, #0
 8011538:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801153a:	4b8f      	ldr	r3, [pc, #572]	@ (8011778 <tcp_input+0x738>)
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	f003 0308 	and.w	r3, r3, #8
 8011542:	2b00      	cmp	r3, #0
 8011544:	d006      	beq.n	8011554 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7b5b      	ldrb	r3, [r3, #13]
 801154a:	f043 0301 	orr.w	r3, r3, #1
 801154e:	b2da      	uxtb	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011558:	2b00      	cmp	r3, #0
 801155a:	d017      	beq.n	801158c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801155c:	69f8      	ldr	r0, [r7, #28]
 801155e:	f7ff f85b 	bl	8010618 <tcp_process_refused_data>
 8011562:	4603      	mov	r3, r0
 8011564:	f113 0f0d 	cmn.w	r3, #13
 8011568:	d007      	beq.n	801157a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00c      	beq.n	801158c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011572:	4b82      	ldr	r3, [pc, #520]	@ (801177c <tcp_input+0x73c>)
 8011574:	881b      	ldrh	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d008      	beq.n	801158c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801157e:	2b00      	cmp	r3, #0
 8011580:	f040 80e3 	bne.w	801174a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011584:	69f8      	ldr	r0, [r7, #28]
 8011586:	f003 fdff 	bl	8015188 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801158a:	e0de      	b.n	801174a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801158c:	4a7c      	ldr	r2, [pc, #496]	@ (8011780 <tcp_input+0x740>)
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011592:	69f8      	ldr	r0, [r7, #28]
 8011594:	f000 fb18 	bl	8011bc8 <tcp_process>
 8011598:	4603      	mov	r3, r0
 801159a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801159c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115a0:	f113 0f0d 	cmn.w	r3, #13
 80115a4:	f000 80d3 	beq.w	801174e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80115a8:	4b71      	ldr	r3, [pc, #452]	@ (8011770 <tcp_input+0x730>)
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	f003 0308 	and.w	r3, r3, #8
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d015      	beq.n	80115e0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d008      	beq.n	80115d0 <tcp_input+0x590>
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80115c4:	69fa      	ldr	r2, [r7, #28]
 80115c6:	6912      	ldr	r2, [r2, #16]
 80115c8:	f06f 010d 	mvn.w	r1, #13
 80115cc:	4610      	mov	r0, r2
 80115ce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80115d0:	69f9      	ldr	r1, [r7, #28]
 80115d2:	486c      	ldr	r0, [pc, #432]	@ (8011784 <tcp_input+0x744>)
 80115d4:	f7ff fbbc 	bl	8010d50 <tcp_pcb_remove>
        tcp_free(pcb);
 80115d8:	69f8      	ldr	r0, [r7, #28]
 80115da:	f7fd fed5 	bl	800f388 <tcp_free>
 80115de:	e0da      	b.n	8011796 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80115e0:	2300      	movs	r3, #0
 80115e2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80115e4:	4b63      	ldr	r3, [pc, #396]	@ (8011774 <tcp_input+0x734>)
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d01d      	beq.n	8011628 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80115ec:	4b61      	ldr	r3, [pc, #388]	@ (8011774 <tcp_input+0x734>)
 80115ee:	881b      	ldrh	r3, [r3, #0]
 80115f0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00a      	beq.n	8011612 <tcp_input+0x5d2>
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011602:	69fa      	ldr	r2, [r7, #28]
 8011604:	6910      	ldr	r0, [r2, #16]
 8011606:	89fa      	ldrh	r2, [r7, #14]
 8011608:	69f9      	ldr	r1, [r7, #28]
 801160a:	4798      	blx	r3
 801160c:	4603      	mov	r3, r0
 801160e:	74fb      	strb	r3, [r7, #19]
 8011610:	e001      	b.n	8011616 <tcp_input+0x5d6>
 8011612:	2300      	movs	r3, #0
 8011614:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011616:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801161a:	f113 0f0d 	cmn.w	r3, #13
 801161e:	f000 8098 	beq.w	8011752 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011622:	4b54      	ldr	r3, [pc, #336]	@ (8011774 <tcp_input+0x734>)
 8011624:	2200      	movs	r2, #0
 8011626:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011628:	69f8      	ldr	r0, [r7, #28]
 801162a:	f000 f915 	bl	8011858 <tcp_input_delayed_close>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	f040 8090 	bne.w	8011756 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011636:	4b4d      	ldr	r3, [pc, #308]	@ (801176c <tcp_input+0x72c>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d041      	beq.n	80116c2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011642:	2b00      	cmp	r3, #0
 8011644:	d006      	beq.n	8011654 <tcp_input+0x614>
 8011646:	4b50      	ldr	r3, [pc, #320]	@ (8011788 <tcp_input+0x748>)
 8011648:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801164c:	494f      	ldr	r1, [pc, #316]	@ (801178c <tcp_input+0x74c>)
 801164e:	4850      	ldr	r0, [pc, #320]	@ (8011790 <tcp_input+0x750>)
 8011650:	f007 fd38 	bl	80190c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	8b5b      	ldrh	r3, [r3, #26]
 8011658:	f003 0310 	and.w	r3, r3, #16
 801165c:	2b00      	cmp	r3, #0
 801165e:	d008      	beq.n	8011672 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011660:	4b42      	ldr	r3, [pc, #264]	@ (801176c <tcp_input+0x72c>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4618      	mov	r0, r3
 8011666:	f7fd fbe3 	bl	800ee30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801166a:	69f8      	ldr	r0, [r7, #28]
 801166c:	f7fe f9d0 	bl	800fa10 <tcp_abort>
            goto aborted;
 8011670:	e091      	b.n	8011796 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00c      	beq.n	8011696 <tcp_input+0x656>
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	6918      	ldr	r0, [r3, #16]
 8011686:	4b39      	ldr	r3, [pc, #228]	@ (801176c <tcp_input+0x72c>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	2300      	movs	r3, #0
 801168c:	69f9      	ldr	r1, [r7, #28]
 801168e:	47a0      	blx	r4
 8011690:	4603      	mov	r3, r0
 8011692:	74fb      	strb	r3, [r7, #19]
 8011694:	e008      	b.n	80116a8 <tcp_input+0x668>
 8011696:	4b35      	ldr	r3, [pc, #212]	@ (801176c <tcp_input+0x72c>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	2300      	movs	r3, #0
 801169c:	69f9      	ldr	r1, [r7, #28]
 801169e:	2000      	movs	r0, #0
 80116a0:	f7ff f890 	bl	80107c4 <tcp_recv_null>
 80116a4:	4603      	mov	r3, r0
 80116a6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80116a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116ac:	f113 0f0d 	cmn.w	r3, #13
 80116b0:	d053      	beq.n	801175a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80116b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d003      	beq.n	80116c2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80116ba:	4b2c      	ldr	r3, [pc, #176]	@ (801176c <tcp_input+0x72c>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80116c2:	4b2b      	ldr	r3, [pc, #172]	@ (8011770 <tcp_input+0x730>)
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	f003 0320 	and.w	r3, r3, #32
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d030      	beq.n	8011730 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d009      	beq.n	80116ea <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116da:	7b5a      	ldrb	r2, [r3, #13]
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116e0:	f042 0220 	orr.w	r2, r2, #32
 80116e4:	b2d2      	uxtb	r2, r2
 80116e6:	735a      	strb	r2, [r3, #13]
 80116e8:	e022      	b.n	8011730 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80116ea:	69fb      	ldr	r3, [r7, #28]
 80116ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80116f2:	d005      	beq.n	8011700 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116f8:	3301      	adds	r3, #1
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <tcp_input+0x6e2>
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	6918      	ldr	r0, [r3, #16]
 8011714:	2300      	movs	r3, #0
 8011716:	2200      	movs	r2, #0
 8011718:	69f9      	ldr	r1, [r7, #28]
 801171a:	47a0      	blx	r4
 801171c:	4603      	mov	r3, r0
 801171e:	74fb      	strb	r3, [r7, #19]
 8011720:	e001      	b.n	8011726 <tcp_input+0x6e6>
 8011722:	2300      	movs	r3, #0
 8011724:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801172a:	f113 0f0d 	cmn.w	r3, #13
 801172e:	d016      	beq.n	801175e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011730:	4b13      	ldr	r3, [pc, #76]	@ (8011780 <tcp_input+0x740>)
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011736:	69f8      	ldr	r0, [r7, #28]
 8011738:	f000 f88e 	bl	8011858 <tcp_input_delayed_close>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d128      	bne.n	8011794 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011742:	69f8      	ldr	r0, [r7, #28]
 8011744:	f002 ff1a 	bl	801457c <tcp_output>
 8011748:	e025      	b.n	8011796 <tcp_input+0x756>
        goto aborted;
 801174a:	bf00      	nop
 801174c:	e023      	b.n	8011796 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801174e:	bf00      	nop
 8011750:	e021      	b.n	8011796 <tcp_input+0x756>
              goto aborted;
 8011752:	bf00      	nop
 8011754:	e01f      	b.n	8011796 <tcp_input+0x756>
          goto aborted;
 8011756:	bf00      	nop
 8011758:	e01d      	b.n	8011796 <tcp_input+0x756>
            goto aborted;
 801175a:	bf00      	nop
 801175c:	e01b      	b.n	8011796 <tcp_input+0x756>
              goto aborted;
 801175e:	bf00      	nop
 8011760:	e019      	b.n	8011796 <tcp_input+0x756>
 8011762:	bf00      	nop
 8011764:	2000e130 	.word	0x2000e130
 8011768:	2000e140 	.word	0x2000e140
 801176c:	2000e160 	.word	0x2000e160
 8011770:	2000e15d 	.word	0x2000e15d
 8011774:	2000e158 	.word	0x2000e158
 8011778:	2000e15c 	.word	0x2000e15c
 801177c:	2000e15a 	.word	0x2000e15a
 8011780:	2000e164 	.word	0x2000e164
 8011784:	2000e124 	.word	0x2000e124
 8011788:	0801d34c 	.word	0x0801d34c
 801178c:	0801d500 	.word	0x0801d500
 8011790:	0801d398 	.word	0x0801d398
          goto aborted;
 8011794:	bf00      	nop
    tcp_input_pcb = NULL;
 8011796:	4b27      	ldr	r3, [pc, #156]	@ (8011834 <tcp_input+0x7f4>)
 8011798:	2200      	movs	r2, #0
 801179a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801179c:	4b26      	ldr	r3, [pc, #152]	@ (8011838 <tcp_input+0x7f8>)
 801179e:	2200      	movs	r2, #0
 80117a0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80117a2:	4b26      	ldr	r3, [pc, #152]	@ (801183c <tcp_input+0x7fc>)
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d03f      	beq.n	801182a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80117aa:	4b24      	ldr	r3, [pc, #144]	@ (801183c <tcp_input+0x7fc>)
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fd fb3e 	bl	800ee30 <pbuf_free>
      inseg.p = NULL;
 80117b4:	4b21      	ldr	r3, [pc, #132]	@ (801183c <tcp_input+0x7fc>)
 80117b6:	2200      	movs	r2, #0
 80117b8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80117ba:	e036      	b.n	801182a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80117bc:	4b20      	ldr	r3, [pc, #128]	@ (8011840 <tcp_input+0x800>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	899b      	ldrh	r3, [r3, #12]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fb ff87 	bl	800d6d8 <lwip_htons>
 80117ca:	4603      	mov	r3, r0
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	f003 0304 	and.w	r3, r3, #4
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d118      	bne.n	8011808 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117d6:	4b1b      	ldr	r3, [pc, #108]	@ (8011844 <tcp_input+0x804>)
 80117d8:	6819      	ldr	r1, [r3, #0]
 80117da:	4b1b      	ldr	r3, [pc, #108]	@ (8011848 <tcp_input+0x808>)
 80117dc:	881b      	ldrh	r3, [r3, #0]
 80117de:	461a      	mov	r2, r3
 80117e0:	4b1a      	ldr	r3, [pc, #104]	@ (801184c <tcp_input+0x80c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117e6:	4b16      	ldr	r3, [pc, #88]	@ (8011840 <tcp_input+0x800>)
 80117e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ea:	885b      	ldrh	r3, [r3, #2]
 80117ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ee:	4a14      	ldr	r2, [pc, #80]	@ (8011840 <tcp_input+0x800>)
 80117f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117f2:	8812      	ldrh	r2, [r2, #0]
 80117f4:	b292      	uxth	r2, r2
 80117f6:	9202      	str	r2, [sp, #8]
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	4b15      	ldr	r3, [pc, #84]	@ (8011850 <tcp_input+0x810>)
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	4b15      	ldr	r3, [pc, #84]	@ (8011854 <tcp_input+0x814>)
 8011800:	4602      	mov	r2, r0
 8011802:	2000      	movs	r0, #0
 8011804:	f003 fc6e 	bl	80150e4 <tcp_rst>
    pbuf_free(p);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7fd fb11 	bl	800ee30 <pbuf_free>
  return;
 801180e:	e00c      	b.n	801182a <tcp_input+0x7ea>
    goto dropped;
 8011810:	bf00      	nop
 8011812:	e006      	b.n	8011822 <tcp_input+0x7e2>
    goto dropped;
 8011814:	bf00      	nop
 8011816:	e004      	b.n	8011822 <tcp_input+0x7e2>
    goto dropped;
 8011818:	bf00      	nop
 801181a:	e002      	b.n	8011822 <tcp_input+0x7e2>
      goto dropped;
 801181c:	bf00      	nop
 801181e:	e000      	b.n	8011822 <tcp_input+0x7e2>
      goto dropped;
 8011820:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7fd fb04 	bl	800ee30 <pbuf_free>
 8011828:	e000      	b.n	801182c <tcp_input+0x7ec>
  return;
 801182a:	bf00      	nop
}
 801182c:	3724      	adds	r7, #36	@ 0x24
 801182e:	46bd      	mov	sp, r7
 8011830:	bd90      	pop	{r4, r7, pc}
 8011832:	bf00      	nop
 8011834:	2000e164 	.word	0x2000e164
 8011838:	2000e160 	.word	0x2000e160
 801183c:	2000e130 	.word	0x2000e130
 8011840:	2000e140 	.word	0x2000e140
 8011844:	2000e154 	.word	0x2000e154
 8011848:	2000e15a 	.word	0x2000e15a
 801184c:	2000e150 	.word	0x2000e150
 8011850:	20008814 	.word	0x20008814
 8011854:	20008818 	.word	0x20008818

08011858 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d106      	bne.n	8011874 <tcp_input_delayed_close+0x1c>
 8011866:	4b17      	ldr	r3, [pc, #92]	@ (80118c4 <tcp_input_delayed_close+0x6c>)
 8011868:	f240 225a 	movw	r2, #602	@ 0x25a
 801186c:	4916      	ldr	r1, [pc, #88]	@ (80118c8 <tcp_input_delayed_close+0x70>)
 801186e:	4817      	ldr	r0, [pc, #92]	@ (80118cc <tcp_input_delayed_close+0x74>)
 8011870:	f007 fc28 	bl	80190c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011874:	4b16      	ldr	r3, [pc, #88]	@ (80118d0 <tcp_input_delayed_close+0x78>)
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b00      	cmp	r3, #0
 801187e:	d01c      	beq.n	80118ba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	8b5b      	ldrh	r3, [r3, #26]
 8011884:	f003 0310 	and.w	r3, r3, #16
 8011888:	2b00      	cmp	r3, #0
 801188a:	d10d      	bne.n	80118a8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011892:	2b00      	cmp	r3, #0
 8011894:	d008      	beq.n	80118a8 <tcp_input_delayed_close+0x50>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	6912      	ldr	r2, [r2, #16]
 80118a0:	f06f 010e 	mvn.w	r1, #14
 80118a4:	4610      	mov	r0, r2
 80118a6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118a8:	6879      	ldr	r1, [r7, #4]
 80118aa:	480a      	ldr	r0, [pc, #40]	@ (80118d4 <tcp_input_delayed_close+0x7c>)
 80118ac:	f7ff fa50 	bl	8010d50 <tcp_pcb_remove>
    tcp_free(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7fd fd69 	bl	800f388 <tcp_free>
    return 1;
 80118b6:	2301      	movs	r3, #1
 80118b8:	e000      	b.n	80118bc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80118ba:	2300      	movs	r3, #0
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3708      	adds	r7, #8
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	0801d34c 	.word	0x0801d34c
 80118c8:	0801d51c 	.word	0x0801d51c
 80118cc:	0801d398 	.word	0x0801d398
 80118d0:	2000e15d 	.word	0x2000e15d
 80118d4:	2000e124 	.word	0x2000e124

080118d8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80118d8:	b590      	push	{r4, r7, lr}
 80118da:	b08b      	sub	sp, #44	@ 0x2c
 80118dc:	af04      	add	r7, sp, #16
 80118de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80118e0:	4b6f      	ldr	r3, [pc, #444]	@ (8011aa0 <tcp_listen_input+0x1c8>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	f003 0304 	and.w	r3, r3, #4
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f040 80d2 	bne.w	8011a92 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d106      	bne.n	8011902 <tcp_listen_input+0x2a>
 80118f4:	4b6b      	ldr	r3, [pc, #428]	@ (8011aa4 <tcp_listen_input+0x1cc>)
 80118f6:	f240 2281 	movw	r2, #641	@ 0x281
 80118fa:	496b      	ldr	r1, [pc, #428]	@ (8011aa8 <tcp_listen_input+0x1d0>)
 80118fc:	486b      	ldr	r0, [pc, #428]	@ (8011aac <tcp_listen_input+0x1d4>)
 80118fe:	f007 fbe1 	bl	80190c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011902:	4b67      	ldr	r3, [pc, #412]	@ (8011aa0 <tcp_listen_input+0x1c8>)
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	f003 0310 	and.w	r3, r3, #16
 801190a:	2b00      	cmp	r3, #0
 801190c:	d019      	beq.n	8011942 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801190e:	4b68      	ldr	r3, [pc, #416]	@ (8011ab0 <tcp_listen_input+0x1d8>)
 8011910:	6819      	ldr	r1, [r3, #0]
 8011912:	4b68      	ldr	r3, [pc, #416]	@ (8011ab4 <tcp_listen_input+0x1dc>)
 8011914:	881b      	ldrh	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	4b67      	ldr	r3, [pc, #412]	@ (8011ab8 <tcp_listen_input+0x1e0>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801191e:	4b67      	ldr	r3, [pc, #412]	@ (8011abc <tcp_listen_input+0x1e4>)
 8011920:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011922:	885b      	ldrh	r3, [r3, #2]
 8011924:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011926:	4a65      	ldr	r2, [pc, #404]	@ (8011abc <tcp_listen_input+0x1e4>)
 8011928:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801192a:	8812      	ldrh	r2, [r2, #0]
 801192c:	b292      	uxth	r2, r2
 801192e:	9202      	str	r2, [sp, #8]
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	4b63      	ldr	r3, [pc, #396]	@ (8011ac0 <tcp_listen_input+0x1e8>)
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	4b63      	ldr	r3, [pc, #396]	@ (8011ac4 <tcp_listen_input+0x1ec>)
 8011938:	4602      	mov	r2, r0
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f003 fbd2 	bl	80150e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011940:	e0a9      	b.n	8011a96 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011942:	4b57      	ldr	r3, [pc, #348]	@ (8011aa0 <tcp_listen_input+0x1c8>)
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	f003 0302 	and.w	r3, r3, #2
 801194a:	2b00      	cmp	r3, #0
 801194c:	f000 80a3 	beq.w	8011a96 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7d5b      	ldrb	r3, [r3, #21]
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff f859 	bl	8010a0c <tcp_alloc>
 801195a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d111      	bne.n	8011986 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	699b      	ldr	r3, [r3, #24]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <tcp_listen_input+0xa8>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	699b      	ldr	r3, [r3, #24]
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	6910      	ldr	r0, [r2, #16]
 8011972:	f04f 32ff 	mov.w	r2, #4294967295
 8011976:	2100      	movs	r1, #0
 8011978:	4798      	blx	r3
 801197a:	4603      	mov	r3, r0
 801197c:	73bb      	strb	r3, [r7, #14]
      return;
 801197e:	e08b      	b.n	8011a98 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011980:	23f0      	movs	r3, #240	@ 0xf0
 8011982:	73bb      	strb	r3, [r7, #14]
      return;
 8011984:	e088      	b.n	8011a98 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011986:	4b50      	ldr	r3, [pc, #320]	@ (8011ac8 <tcp_listen_input+0x1f0>)
 8011988:	695a      	ldr	r2, [r3, #20]
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801198e:	4b4e      	ldr	r3, [pc, #312]	@ (8011ac8 <tcp_listen_input+0x1f0>)
 8011990:	691a      	ldr	r2, [r3, #16]
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	8ada      	ldrh	r2, [r3, #22]
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801199e:	4b47      	ldr	r3, [pc, #284]	@ (8011abc <tcp_listen_input+0x1e4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2203      	movs	r2, #3
 80119ae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80119b0:	4b41      	ldr	r3, [pc, #260]	@ (8011ab8 <tcp_listen_input+0x1e0>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	1c5a      	adds	r2, r3, #1
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80119c2:	6978      	ldr	r0, [r7, #20]
 80119c4:	f7ff fa58 	bl	8010e78 <tcp_next_iss>
 80119c8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	693a      	ldr	r2, [r7, #16]
 80119ce:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	693a      	ldr	r2, [r7, #16]
 80119da:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	693a      	ldr	r2, [r7, #16]
 80119e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80119e2:	4b35      	ldr	r3, [pc, #212]	@ (8011ab8 <tcp_listen_input+0x1e0>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	1e5a      	subs	r2, r3, #1
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	691a      	ldr	r2, [r3, #16]
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	7a5b      	ldrb	r3, [r3, #9]
 80119fe:	f003 030c 	and.w	r3, r3, #12
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7a1a      	ldrb	r2, [r3, #8]
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011a10:	4b2e      	ldr	r3, [pc, #184]	@ (8011acc <tcp_listen_input+0x1f4>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	60da      	str	r2, [r3, #12]
 8011a18:	4a2c      	ldr	r2, [pc, #176]	@ (8011acc <tcp_listen_input+0x1f4>)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	6013      	str	r3, [r2, #0]
 8011a1e:	f003 fd23 	bl	8015468 <tcp_timer_needed>
 8011a22:	4b2b      	ldr	r3, [pc, #172]	@ (8011ad0 <tcp_listen_input+0x1f8>)
 8011a24:	2201      	movs	r2, #1
 8011a26:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011a28:	6978      	ldr	r0, [r7, #20]
 8011a2a:	f001 fd8b 	bl	8013544 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011a2e:	4b23      	ldr	r3, [pc, #140]	@ (8011abc <tcp_listen_input+0x1e4>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	89db      	ldrh	r3, [r3, #14]
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	3304      	adds	r3, #4
 8011a50:	4618      	mov	r0, r3
 8011a52:	f005 fa5d 	bl	8016f10 <ip4_route>
 8011a56:	4601      	mov	r1, r0
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	3304      	adds	r3, #4
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f7ff fa30 	bl	8010ec4 <tcp_eff_send_mss_netif>
 8011a64:	4603      	mov	r3, r0
 8011a66:	461a      	mov	r2, r3
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011a6c:	2112      	movs	r1, #18
 8011a6e:	6978      	ldr	r0, [r7, #20]
 8011a70:	f002 fc96 	bl	80143a0 <tcp_enqueue_flags>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011a80:	2100      	movs	r1, #0
 8011a82:	6978      	ldr	r0, [r7, #20]
 8011a84:	f7fd ff06 	bl	800f894 <tcp_abandon>
      return;
 8011a88:	e006      	b.n	8011a98 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011a8a:	6978      	ldr	r0, [r7, #20]
 8011a8c:	f002 fd76 	bl	801457c <tcp_output>
  return;
 8011a90:	e001      	b.n	8011a96 <tcp_listen_input+0x1be>
    return;
 8011a92:	bf00      	nop
 8011a94:	e000      	b.n	8011a98 <tcp_listen_input+0x1c0>
  return;
 8011a96:	bf00      	nop
}
 8011a98:	371c      	adds	r7, #28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd90      	pop	{r4, r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	2000e15c 	.word	0x2000e15c
 8011aa4:	0801d34c 	.word	0x0801d34c
 8011aa8:	0801d544 	.word	0x0801d544
 8011aac:	0801d398 	.word	0x0801d398
 8011ab0:	2000e154 	.word	0x2000e154
 8011ab4:	2000e15a 	.word	0x2000e15a
 8011ab8:	2000e150 	.word	0x2000e150
 8011abc:	2000e140 	.word	0x2000e140
 8011ac0:	20008814 	.word	0x20008814
 8011ac4:	20008818 	.word	0x20008818
 8011ac8:	20008804 	.word	0x20008804
 8011acc:	2000e124 	.word	0x2000e124
 8011ad0:	2000e12c 	.word	0x2000e12c

08011ad4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af04      	add	r7, sp, #16
 8011ada:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011adc:	4b2f      	ldr	r3, [pc, #188]	@ (8011b9c <tcp_timewait_input+0xc8>)
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d153      	bne.n	8011b90 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d106      	bne.n	8011afc <tcp_timewait_input+0x28>
 8011aee:	4b2c      	ldr	r3, [pc, #176]	@ (8011ba0 <tcp_timewait_input+0xcc>)
 8011af0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011af4:	492b      	ldr	r1, [pc, #172]	@ (8011ba4 <tcp_timewait_input+0xd0>)
 8011af6:	482c      	ldr	r0, [pc, #176]	@ (8011ba8 <tcp_timewait_input+0xd4>)
 8011af8:	f007 fae4 	bl	80190c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011afc:	4b27      	ldr	r3, [pc, #156]	@ (8011b9c <tcp_timewait_input+0xc8>)
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	f003 0302 	and.w	r3, r3, #2
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d02a      	beq.n	8011b5e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011b08:	4b28      	ldr	r3, [pc, #160]	@ (8011bac <tcp_timewait_input+0xd8>)
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	db2d      	blt.n	8011b72 <tcp_timewait_input+0x9e>
 8011b16:	4b25      	ldr	r3, [pc, #148]	@ (8011bac <tcp_timewait_input+0xd8>)
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b22:	440b      	add	r3, r1
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	dc23      	bgt.n	8011b72 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b2a:	4b21      	ldr	r3, [pc, #132]	@ (8011bb0 <tcp_timewait_input+0xdc>)
 8011b2c:	6819      	ldr	r1, [r3, #0]
 8011b2e:	4b21      	ldr	r3, [pc, #132]	@ (8011bb4 <tcp_timewait_input+0xe0>)
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	4b1d      	ldr	r3, [pc, #116]	@ (8011bac <tcp_timewait_input+0xd8>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8011bb8 <tcp_timewait_input+0xe4>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b3e:	885b      	ldrh	r3, [r3, #2]
 8011b40:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b42:	4a1d      	ldr	r2, [pc, #116]	@ (8011bb8 <tcp_timewait_input+0xe4>)
 8011b44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b46:	8812      	ldrh	r2, [r2, #0]
 8011b48:	b292      	uxth	r2, r2
 8011b4a:	9202      	str	r2, [sp, #8]
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8011bbc <tcp_timewait_input+0xe8>)
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	4b1b      	ldr	r3, [pc, #108]	@ (8011bc0 <tcp_timewait_input+0xec>)
 8011b54:	4602      	mov	r2, r0
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f003 fac4 	bl	80150e4 <tcp_rst>
      return;
 8011b5c:	e01b      	b.n	8011b96 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8011b9c <tcp_timewait_input+0xc8>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f003 0301 	and.w	r3, r3, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d003      	beq.n	8011b72 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011b6a:	4b16      	ldr	r3, [pc, #88]	@ (8011bc4 <tcp_timewait_input+0xf0>)
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011b72:	4b10      	ldr	r3, [pc, #64]	@ (8011bb4 <tcp_timewait_input+0xe0>)
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00c      	beq.n	8011b94 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	8b5b      	ldrh	r3, [r3, #26]
 8011b7e:	f043 0302 	orr.w	r3, r3, #2
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f002 fcf7 	bl	801457c <tcp_output>
  }
  return;
 8011b8e:	e001      	b.n	8011b94 <tcp_timewait_input+0xc0>
    return;
 8011b90:	bf00      	nop
 8011b92:	e000      	b.n	8011b96 <tcp_timewait_input+0xc2>
  return;
 8011b94:	bf00      	nop
}
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	2000e15c 	.word	0x2000e15c
 8011ba0:	0801d34c 	.word	0x0801d34c
 8011ba4:	0801d564 	.word	0x0801d564
 8011ba8:	0801d398 	.word	0x0801d398
 8011bac:	2000e150 	.word	0x2000e150
 8011bb0:	2000e154 	.word	0x2000e154
 8011bb4:	2000e15a 	.word	0x2000e15a
 8011bb8:	2000e140 	.word	0x2000e140
 8011bbc:	20008814 	.word	0x20008814
 8011bc0:	20008818 	.word	0x20008818
 8011bc4:	2000e118 	.word	0x2000e118

08011bc8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011bc8:	b590      	push	{r4, r7, lr}
 8011bca:	b08d      	sub	sp, #52	@ 0x34
 8011bcc:	af04      	add	r7, sp, #16
 8011bce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d106      	bne.n	8011bec <tcp_process+0x24>
 8011bde:	4b9d      	ldr	r3, [pc, #628]	@ (8011e54 <tcp_process+0x28c>)
 8011be0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011be4:	499c      	ldr	r1, [pc, #624]	@ (8011e58 <tcp_process+0x290>)
 8011be6:	489d      	ldr	r0, [pc, #628]	@ (8011e5c <tcp_process+0x294>)
 8011be8:	f007 fa6c 	bl	80190c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011bec:	4b9c      	ldr	r3, [pc, #624]	@ (8011e60 <tcp_process+0x298>)
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	f003 0304 	and.w	r3, r3, #4
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d04e      	beq.n	8011c96 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	7d1b      	ldrb	r3, [r3, #20]
 8011bfc:	2b02      	cmp	r3, #2
 8011bfe:	d108      	bne.n	8011c12 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c04:	4b97      	ldr	r3, [pc, #604]	@ (8011e64 <tcp_process+0x29c>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d123      	bne.n	8011c54 <tcp_process+0x8c>
        acceptable = 1;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	76fb      	strb	r3, [r7, #27]
 8011c10:	e020      	b.n	8011c54 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c16:	4b94      	ldr	r3, [pc, #592]	@ (8011e68 <tcp_process+0x2a0>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d102      	bne.n	8011c24 <tcp_process+0x5c>
        acceptable = 1;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	76fb      	strb	r3, [r7, #27]
 8011c22:	e017      	b.n	8011c54 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c24:	4b90      	ldr	r3, [pc, #576]	@ (8011e68 <tcp_process+0x2a0>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	db10      	blt.n	8011c54 <tcp_process+0x8c>
 8011c32:	4b8d      	ldr	r3, [pc, #564]	@ (8011e68 <tcp_process+0x2a0>)
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011c3e:	440b      	add	r3, r1
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	dc06      	bgt.n	8011c54 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	8b5b      	ldrh	r3, [r3, #26]
 8011c4a:	f043 0302 	orr.w	r3, r3, #2
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011c54:	7efb      	ldrb	r3, [r7, #27]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d01b      	beq.n	8011c92 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	7d1b      	ldrb	r3, [r3, #20]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d106      	bne.n	8011c70 <tcp_process+0xa8>
 8011c62:	4b7c      	ldr	r3, [pc, #496]	@ (8011e54 <tcp_process+0x28c>)
 8011c64:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011c68:	4980      	ldr	r1, [pc, #512]	@ (8011e6c <tcp_process+0x2a4>)
 8011c6a:	487c      	ldr	r0, [pc, #496]	@ (8011e5c <tcp_process+0x294>)
 8011c6c:	f007 fa2a 	bl	80190c4 <iprintf>
      recv_flags |= TF_RESET;
 8011c70:	4b7f      	ldr	r3, [pc, #508]	@ (8011e70 <tcp_process+0x2a8>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	f043 0308 	orr.w	r3, r3, #8
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8011e70 <tcp_process+0x2a8>)
 8011c7c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8b5b      	ldrh	r3, [r3, #26]
 8011c82:	f023 0301 	bic.w	r3, r3, #1
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011c8c:	f06f 030d 	mvn.w	r3, #13
 8011c90:	e37a      	b.n	8012388 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011c92:	2300      	movs	r3, #0
 8011c94:	e378      	b.n	8012388 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011c96:	4b72      	ldr	r3, [pc, #456]	@ (8011e60 <tcp_process+0x298>)
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	f003 0302 	and.w	r3, r3, #2
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d010      	beq.n	8011cc4 <tcp_process+0xfc>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	7d1b      	ldrb	r3, [r3, #20]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d00c      	beq.n	8011cc4 <tcp_process+0xfc>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d008      	beq.n	8011cc4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	8b5b      	ldrh	r3, [r3, #26]
 8011cb6:	f043 0302 	orr.w	r3, r3, #2
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	e361      	b.n	8012388 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	8b5b      	ldrh	r3, [r3, #26]
 8011cc8:	f003 0310 	and.w	r3, r3, #16
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d103      	bne.n	8011cd8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011cd0:	4b68      	ldr	r3, [pc, #416]	@ (8011e74 <tcp_process+0x2ac>)
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f001 fc2b 	bl	8013544 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	7d1b      	ldrb	r3, [r3, #20]
 8011cf2:	3b02      	subs	r3, #2
 8011cf4:	2b07      	cmp	r3, #7
 8011cf6:	f200 8337 	bhi.w	8012368 <tcp_process+0x7a0>
 8011cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8011d00 <tcp_process+0x138>)
 8011cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d00:	08011d21 	.word	0x08011d21
 8011d04:	08011f51 	.word	0x08011f51
 8011d08:	080120c9 	.word	0x080120c9
 8011d0c:	080120f3 	.word	0x080120f3
 8011d10:	08012217 	.word	0x08012217
 8011d14:	080120c9 	.word	0x080120c9
 8011d18:	080122a3 	.word	0x080122a3
 8011d1c:	08012333 	.word	0x08012333
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011d20:	4b4f      	ldr	r3, [pc, #316]	@ (8011e60 <tcp_process+0x298>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	f003 0310 	and.w	r3, r3, #16
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80e4 	beq.w	8011ef6 <tcp_process+0x32e>
 8011d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8011e60 <tcp_process+0x298>)
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	f003 0302 	and.w	r3, r3, #2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 80dd 	beq.w	8011ef6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d40:	1c5a      	adds	r2, r3, #1
 8011d42:	4b48      	ldr	r3, [pc, #288]	@ (8011e64 <tcp_process+0x29c>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	f040 80d5 	bne.w	8011ef6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011d4c:	4b46      	ldr	r3, [pc, #280]	@ (8011e68 <tcp_process+0x2a0>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	1c5a      	adds	r2, r3, #1
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011d5e:	4b41      	ldr	r3, [pc, #260]	@ (8011e64 <tcp_process+0x29c>)
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011d66:	4b44      	ldr	r3, [pc, #272]	@ (8011e78 <tcp_process+0x2b0>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	89db      	ldrh	r3, [r3, #14]
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011d80:	4b39      	ldr	r3, [pc, #228]	@ (8011e68 <tcp_process+0x2a0>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	1e5a      	subs	r2, r3, #1
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2204      	movs	r2, #4
 8011d8e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	3304      	adds	r3, #4
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f005 f8b9 	bl	8016f10 <ip4_route>
 8011d9e:	4601      	mov	r1, r0
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3304      	adds	r3, #4
 8011da4:	461a      	mov	r2, r3
 8011da6:	4620      	mov	r0, r4
 8011da8:	f7ff f88c 	bl	8010ec4 <tcp_eff_send_mss_netif>
 8011dac:	4603      	mov	r3, r0
 8011dae:	461a      	mov	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011db8:	009a      	lsls	r2, r3, #2
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011dc4:	428b      	cmp	r3, r1
 8011dc6:	bf38      	it	cc
 8011dc8:	460b      	movcc	r3, r1
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d204      	bcs.n	8011dd8 <tcp_process+0x210>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	e00d      	b.n	8011df4 <tcp_process+0x22c>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ddc:	005b      	lsls	r3, r3, #1
 8011dde:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011de2:	4293      	cmp	r3, r2
 8011de4:	d904      	bls.n	8011df0 <tcp_process+0x228>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	e001      	b.n	8011df4 <tcp_process+0x22c>
 8011df0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d106      	bne.n	8011e12 <tcp_process+0x24a>
 8011e04:	4b13      	ldr	r3, [pc, #76]	@ (8011e54 <tcp_process+0x28c>)
 8011e06:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011e0a:	491c      	ldr	r1, [pc, #112]	@ (8011e7c <tcp_process+0x2b4>)
 8011e0c:	4813      	ldr	r0, [pc, #76]	@ (8011e5c <tcp_process+0x294>)
 8011e0e:	f007 f959 	bl	80190c4 <iprintf>
        --pcb->snd_queuelen;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e26:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d12a      	bne.n	8011e84 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e32:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d106      	bne.n	8011e48 <tcp_process+0x280>
 8011e3a:	4b06      	ldr	r3, [pc, #24]	@ (8011e54 <tcp_process+0x28c>)
 8011e3c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011e40:	490f      	ldr	r1, [pc, #60]	@ (8011e80 <tcp_process+0x2b8>)
 8011e42:	4806      	ldr	r0, [pc, #24]	@ (8011e5c <tcp_process+0x294>)
 8011e44:	f007 f93e 	bl	80190c4 <iprintf>
          pcb->unsent = rseg->next;
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011e50:	e01c      	b.n	8011e8c <tcp_process+0x2c4>
 8011e52:	bf00      	nop
 8011e54:	0801d34c 	.word	0x0801d34c
 8011e58:	0801d584 	.word	0x0801d584
 8011e5c:	0801d398 	.word	0x0801d398
 8011e60:	2000e15c 	.word	0x2000e15c
 8011e64:	2000e154 	.word	0x2000e154
 8011e68:	2000e150 	.word	0x2000e150
 8011e6c:	0801d5a0 	.word	0x0801d5a0
 8011e70:	2000e15d 	.word	0x2000e15d
 8011e74:	2000e118 	.word	0x2000e118
 8011e78:	2000e140 	.word	0x2000e140
 8011e7c:	0801d5c0 	.word	0x0801d5c0
 8011e80:	0801d5d8 	.word	0x0801d5d8
        } else {
          pcb->unacked = rseg->next;
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011e8c:	69f8      	ldr	r0, [r7, #28]
 8011e8e:	f7fe fc54 	bl	801073a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d104      	bne.n	8011ea4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011ea0:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011ea2:	e006      	b.n	8011eb2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d00a      	beq.n	8011ed2 <tcp_process+0x30a>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	6910      	ldr	r0, [r2, #16]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	6879      	ldr	r1, [r7, #4]
 8011eca:	4798      	blx	r3
 8011ecc:	4603      	mov	r3, r0
 8011ece:	76bb      	strb	r3, [r7, #26]
 8011ed0:	e001      	b.n	8011ed6 <tcp_process+0x30e>
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011ed6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011eda:	f113 0f0d 	cmn.w	r3, #13
 8011ede:	d102      	bne.n	8011ee6 <tcp_process+0x31e>
          return ERR_ABRT;
 8011ee0:	f06f 030c 	mvn.w	r3, #12
 8011ee4:	e250      	b.n	8012388 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8b5b      	ldrh	r3, [r3, #26]
 8011eea:	f043 0302 	orr.w	r3, r3, #2
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011ef4:	e23a      	b.n	801236c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011ef6:	4b98      	ldr	r3, [pc, #608]	@ (8012158 <tcp_process+0x590>)
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	f003 0310 	and.w	r3, r3, #16
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f000 8234 	beq.w	801236c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f04:	4b95      	ldr	r3, [pc, #596]	@ (801215c <tcp_process+0x594>)
 8011f06:	6819      	ldr	r1, [r3, #0]
 8011f08:	4b95      	ldr	r3, [pc, #596]	@ (8012160 <tcp_process+0x598>)
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	4b95      	ldr	r3, [pc, #596]	@ (8012164 <tcp_process+0x59c>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f14:	4b94      	ldr	r3, [pc, #592]	@ (8012168 <tcp_process+0x5a0>)
 8011f16:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f18:	885b      	ldrh	r3, [r3, #2]
 8011f1a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f1c:	4a92      	ldr	r2, [pc, #584]	@ (8012168 <tcp_process+0x5a0>)
 8011f1e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f20:	8812      	ldrh	r2, [r2, #0]
 8011f22:	b292      	uxth	r2, r2
 8011f24:	9202      	str	r2, [sp, #8]
 8011f26:	9301      	str	r3, [sp, #4]
 8011f28:	4b90      	ldr	r3, [pc, #576]	@ (801216c <tcp_process+0x5a4>)
 8011f2a:	9300      	str	r3, [sp, #0]
 8011f2c:	4b90      	ldr	r3, [pc, #576]	@ (8012170 <tcp_process+0x5a8>)
 8011f2e:	4602      	mov	r2, r0
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f003 f8d7 	bl	80150e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011f3c:	2b05      	cmp	r3, #5
 8011f3e:	f200 8215 	bhi.w	801236c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2200      	movs	r2, #0
 8011f46:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f002 fea3 	bl	8014c94 <tcp_rexmit_rto>
      break;
 8011f4e:	e20d      	b.n	801236c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011f50:	4b81      	ldr	r3, [pc, #516]	@ (8012158 <tcp_process+0x590>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	f003 0310 	and.w	r3, r3, #16
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 80a1 	beq.w	80120a0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f5e:	4b7f      	ldr	r3, [pc, #508]	@ (801215c <tcp_process+0x594>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	db7e      	blt.n	801206c <tcp_process+0x4a4>
 8011f6e:	4b7b      	ldr	r3, [pc, #492]	@ (801215c <tcp_process+0x594>)
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f76:	1ad3      	subs	r3, r2, r3
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	dc77      	bgt.n	801206c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2204      	movs	r2, #4
 8011f80:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d102      	bne.n	8011f90 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011f8a:	23fa      	movs	r3, #250	@ 0xfa
 8011f8c:	76bb      	strb	r3, [r7, #26]
 8011f8e:	e01d      	b.n	8011fcc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f94:	699b      	ldr	r3, [r3, #24]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <tcp_process+0x3e0>
 8011f9a:	4b76      	ldr	r3, [pc, #472]	@ (8012174 <tcp_process+0x5ac>)
 8011f9c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011fa0:	4975      	ldr	r1, [pc, #468]	@ (8012178 <tcp_process+0x5b0>)
 8011fa2:	4876      	ldr	r0, [pc, #472]	@ (801217c <tcp_process+0x5b4>)
 8011fa4:	f007 f88e 	bl	80190c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fac:	699b      	ldr	r3, [r3, #24]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00a      	beq.n	8011fc8 <tcp_process+0x400>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fb6:	699b      	ldr	r3, [r3, #24]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	6910      	ldr	r0, [r2, #16]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	6879      	ldr	r1, [r7, #4]
 8011fc0:	4798      	blx	r3
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	76bb      	strb	r3, [r7, #26]
 8011fc6:	e001      	b.n	8011fcc <tcp_process+0x404>
 8011fc8:	23f0      	movs	r3, #240	@ 0xf0
 8011fca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011fcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00a      	beq.n	8011fea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011fd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011fd8:	f113 0f0d 	cmn.w	r3, #13
 8011fdc:	d002      	beq.n	8011fe4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f7fd fd16 	bl	800fa10 <tcp_abort>
            }
            return ERR_ABRT;
 8011fe4:	f06f 030c 	mvn.w	r3, #12
 8011fe8:	e1ce      	b.n	8012388 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f000 fae0 	bl	80125b0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011ff0:	4b63      	ldr	r3, [pc, #396]	@ (8012180 <tcp_process+0x5b8>)
 8011ff2:	881b      	ldrh	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d005      	beq.n	8012004 <tcp_process+0x43c>
            recv_acked--;
 8011ff8:	4b61      	ldr	r3, [pc, #388]	@ (8012180 <tcp_process+0x5b8>)
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	4b5f      	ldr	r3, [pc, #380]	@ (8012180 <tcp_process+0x5b8>)
 8012002:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012008:	009a      	lsls	r2, r3, #2
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801200e:	005b      	lsls	r3, r3, #1
 8012010:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012014:	428b      	cmp	r3, r1
 8012016:	bf38      	it	cc
 8012018:	460b      	movcc	r3, r1
 801201a:	429a      	cmp	r2, r3
 801201c:	d204      	bcs.n	8012028 <tcp_process+0x460>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	b29b      	uxth	r3, r3
 8012026:	e00d      	b.n	8012044 <tcp_process+0x47c>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801202c:	005b      	lsls	r3, r3, #1
 801202e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012032:	4293      	cmp	r3, r2
 8012034:	d904      	bls.n	8012040 <tcp_process+0x478>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	b29b      	uxth	r3, r3
 801203e:	e001      	b.n	8012044 <tcp_process+0x47c>
 8012040:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801204a:	4b4e      	ldr	r3, [pc, #312]	@ (8012184 <tcp_process+0x5bc>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f003 0320 	and.w	r3, r3, #32
 8012052:	2b00      	cmp	r3, #0
 8012054:	d037      	beq.n	80120c6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	8b5b      	ldrh	r3, [r3, #26]
 801205a:	f043 0302 	orr.w	r3, r3, #2
 801205e:	b29a      	uxth	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2207      	movs	r2, #7
 8012068:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801206a:	e02c      	b.n	80120c6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801206c:	4b3b      	ldr	r3, [pc, #236]	@ (801215c <tcp_process+0x594>)
 801206e:	6819      	ldr	r1, [r3, #0]
 8012070:	4b3b      	ldr	r3, [pc, #236]	@ (8012160 <tcp_process+0x598>)
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	461a      	mov	r2, r3
 8012076:	4b3b      	ldr	r3, [pc, #236]	@ (8012164 <tcp_process+0x59c>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801207c:	4b3a      	ldr	r3, [pc, #232]	@ (8012168 <tcp_process+0x5a0>)
 801207e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012084:	4a38      	ldr	r2, [pc, #224]	@ (8012168 <tcp_process+0x5a0>)
 8012086:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012088:	8812      	ldrh	r2, [r2, #0]
 801208a:	b292      	uxth	r2, r2
 801208c:	9202      	str	r2, [sp, #8]
 801208e:	9301      	str	r3, [sp, #4]
 8012090:	4b36      	ldr	r3, [pc, #216]	@ (801216c <tcp_process+0x5a4>)
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	4b36      	ldr	r3, [pc, #216]	@ (8012170 <tcp_process+0x5a8>)
 8012096:	4602      	mov	r2, r0
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f003 f823 	bl	80150e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801209e:	e167      	b.n	8012370 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80120a0:	4b2d      	ldr	r3, [pc, #180]	@ (8012158 <tcp_process+0x590>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	f003 0302 	and.w	r3, r3, #2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 8161 	beq.w	8012370 <tcp_process+0x7a8>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b2:	1e5a      	subs	r2, r3, #1
 80120b4:	4b2b      	ldr	r3, [pc, #172]	@ (8012164 <tcp_process+0x59c>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	f040 8159 	bne.w	8012370 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f002 fe0a 	bl	8014cd8 <tcp_rexmit>
      break;
 80120c4:	e154      	b.n	8012370 <tcp_process+0x7a8>
 80120c6:	e153      	b.n	8012370 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fa71 	bl	80125b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80120ce:	4b2d      	ldr	r3, [pc, #180]	@ (8012184 <tcp_process+0x5bc>)
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	f003 0320 	and.w	r3, r3, #32
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	f000 814c 	beq.w	8012374 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	8b5b      	ldrh	r3, [r3, #26]
 80120e0:	f043 0302 	orr.w	r3, r3, #2
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2207      	movs	r2, #7
 80120ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80120f0:	e140      	b.n	8012374 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fa5c 	bl	80125b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80120f8:	4b22      	ldr	r3, [pc, #136]	@ (8012184 <tcp_process+0x5bc>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f003 0320 	and.w	r3, r3, #32
 8012100:	2b00      	cmp	r3, #0
 8012102:	d071      	beq.n	80121e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012104:	4b14      	ldr	r3, [pc, #80]	@ (8012158 <tcp_process+0x590>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	f003 0310 	and.w	r3, r3, #16
 801210c:	2b00      	cmp	r3, #0
 801210e:	d060      	beq.n	80121d2 <tcp_process+0x60a>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012114:	4b11      	ldr	r3, [pc, #68]	@ (801215c <tcp_process+0x594>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	429a      	cmp	r2, r3
 801211a:	d15a      	bne.n	80121d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012120:	2b00      	cmp	r3, #0
 8012122:	d156      	bne.n	80121d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	8b5b      	ldrh	r3, [r3, #26]
 8012128:	f043 0302 	orr.w	r3, r3, #2
 801212c:	b29a      	uxth	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7fe fdbc 	bl	8010cb0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012138:	4b13      	ldr	r3, [pc, #76]	@ (8012188 <tcp_process+0x5c0>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	429a      	cmp	r2, r3
 8012140:	d105      	bne.n	801214e <tcp_process+0x586>
 8012142:	4b11      	ldr	r3, [pc, #68]	@ (8012188 <tcp_process+0x5c0>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	4a0f      	ldr	r2, [pc, #60]	@ (8012188 <tcp_process+0x5c0>)
 801214a:	6013      	str	r3, [r2, #0]
 801214c:	e02e      	b.n	80121ac <tcp_process+0x5e4>
 801214e:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <tcp_process+0x5c0>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	617b      	str	r3, [r7, #20]
 8012154:	e027      	b.n	80121a6 <tcp_process+0x5de>
 8012156:	bf00      	nop
 8012158:	2000e15c 	.word	0x2000e15c
 801215c:	2000e154 	.word	0x2000e154
 8012160:	2000e15a 	.word	0x2000e15a
 8012164:	2000e150 	.word	0x2000e150
 8012168:	2000e140 	.word	0x2000e140
 801216c:	20008814 	.word	0x20008814
 8012170:	20008818 	.word	0x20008818
 8012174:	0801d34c 	.word	0x0801d34c
 8012178:	0801d5ec 	.word	0x0801d5ec
 801217c:	0801d398 	.word	0x0801d398
 8012180:	2000e158 	.word	0x2000e158
 8012184:	2000e15d 	.word	0x2000e15d
 8012188:	2000e124 	.word	0x2000e124
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	429a      	cmp	r2, r3
 8012194:	d104      	bne.n	80121a0 <tcp_process+0x5d8>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	68da      	ldr	r2, [r3, #12]
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	60da      	str	r2, [r3, #12]
 801219e:	e005      	b.n	80121ac <tcp_process+0x5e4>
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	68db      	ldr	r3, [r3, #12]
 80121a4:	617b      	str	r3, [r7, #20]
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1ef      	bne.n	801218c <tcp_process+0x5c4>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	60da      	str	r2, [r3, #12]
 80121b2:	4b77      	ldr	r3, [pc, #476]	@ (8012390 <tcp_process+0x7c8>)
 80121b4:	2201      	movs	r2, #1
 80121b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	220a      	movs	r2, #10
 80121bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80121be:	4b75      	ldr	r3, [pc, #468]	@ (8012394 <tcp_process+0x7cc>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	60da      	str	r2, [r3, #12]
 80121c6:	4a73      	ldr	r2, [pc, #460]	@ (8012394 <tcp_process+0x7cc>)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6013      	str	r3, [r2, #0]
 80121cc:	f003 f94c 	bl	8015468 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80121d0:	e0d2      	b.n	8012378 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	8b5b      	ldrh	r3, [r3, #26]
 80121d6:	f043 0302 	orr.w	r3, r3, #2
 80121da:	b29a      	uxth	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2208      	movs	r2, #8
 80121e4:	751a      	strb	r2, [r3, #20]
      break;
 80121e6:	e0c7      	b.n	8012378 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80121e8:	4b6b      	ldr	r3, [pc, #428]	@ (8012398 <tcp_process+0x7d0>)
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	f003 0310 	and.w	r3, r3, #16
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 80c1 	beq.w	8012378 <tcp_process+0x7b0>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80121fa:	4b68      	ldr	r3, [pc, #416]	@ (801239c <tcp_process+0x7d4>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	429a      	cmp	r2, r3
 8012200:	f040 80ba 	bne.w	8012378 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012208:	2b00      	cmp	r3, #0
 801220a:	f040 80b5 	bne.w	8012378 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2206      	movs	r2, #6
 8012212:	751a      	strb	r2, [r3, #20]
      break;
 8012214:	e0b0      	b.n	8012378 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f9ca 	bl	80125b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801221c:	4b60      	ldr	r3, [pc, #384]	@ (80123a0 <tcp_process+0x7d8>)
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	f003 0320 	and.w	r3, r3, #32
 8012224:	2b00      	cmp	r3, #0
 8012226:	f000 80a9 	beq.w	801237c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8b5b      	ldrh	r3, [r3, #26]
 801222e:	f043 0302 	orr.w	r3, r3, #2
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7fe fd39 	bl	8010cb0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801223e:	4b59      	ldr	r3, [pc, #356]	@ (80123a4 <tcp_process+0x7dc>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	429a      	cmp	r2, r3
 8012246:	d105      	bne.n	8012254 <tcp_process+0x68c>
 8012248:	4b56      	ldr	r3, [pc, #344]	@ (80123a4 <tcp_process+0x7dc>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	4a55      	ldr	r2, [pc, #340]	@ (80123a4 <tcp_process+0x7dc>)
 8012250:	6013      	str	r3, [r2, #0]
 8012252:	e013      	b.n	801227c <tcp_process+0x6b4>
 8012254:	4b53      	ldr	r3, [pc, #332]	@ (80123a4 <tcp_process+0x7dc>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	613b      	str	r3, [r7, #16]
 801225a:	e00c      	b.n	8012276 <tcp_process+0x6ae>
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	429a      	cmp	r2, r3
 8012264:	d104      	bne.n	8012270 <tcp_process+0x6a8>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	68da      	ldr	r2, [r3, #12]
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	60da      	str	r2, [r3, #12]
 801226e:	e005      	b.n	801227c <tcp_process+0x6b4>
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	613b      	str	r3, [r7, #16]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1ef      	bne.n	801225c <tcp_process+0x694>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	60da      	str	r2, [r3, #12]
 8012282:	4b43      	ldr	r3, [pc, #268]	@ (8012390 <tcp_process+0x7c8>)
 8012284:	2201      	movs	r2, #1
 8012286:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	220a      	movs	r2, #10
 801228c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801228e:	4b41      	ldr	r3, [pc, #260]	@ (8012394 <tcp_process+0x7cc>)
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	60da      	str	r2, [r3, #12]
 8012296:	4a3f      	ldr	r2, [pc, #252]	@ (8012394 <tcp_process+0x7cc>)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6013      	str	r3, [r2, #0]
 801229c:	f003 f8e4 	bl	8015468 <tcp_timer_needed>
      }
      break;
 80122a0:	e06c      	b.n	801237c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f984 	bl	80125b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80122a8:	4b3b      	ldr	r3, [pc, #236]	@ (8012398 <tcp_process+0x7d0>)
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	f003 0310 	and.w	r3, r3, #16
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d065      	beq.n	8012380 <tcp_process+0x7b8>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80122b8:	4b38      	ldr	r3, [pc, #224]	@ (801239c <tcp_process+0x7d4>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d15f      	bne.n	8012380 <tcp_process+0x7b8>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d15b      	bne.n	8012380 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7fe fcf1 	bl	8010cb0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80122ce:	4b35      	ldr	r3, [pc, #212]	@ (80123a4 <tcp_process+0x7dc>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d105      	bne.n	80122e4 <tcp_process+0x71c>
 80122d8:	4b32      	ldr	r3, [pc, #200]	@ (80123a4 <tcp_process+0x7dc>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	4a31      	ldr	r2, [pc, #196]	@ (80123a4 <tcp_process+0x7dc>)
 80122e0:	6013      	str	r3, [r2, #0]
 80122e2:	e013      	b.n	801230c <tcp_process+0x744>
 80122e4:	4b2f      	ldr	r3, [pc, #188]	@ (80123a4 <tcp_process+0x7dc>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	60fb      	str	r3, [r7, #12]
 80122ea:	e00c      	b.n	8012306 <tcp_process+0x73e>
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d104      	bne.n	8012300 <tcp_process+0x738>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	68da      	ldr	r2, [r3, #12]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	60da      	str	r2, [r3, #12]
 80122fe:	e005      	b.n	801230c <tcp_process+0x744>
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	60fb      	str	r3, [r7, #12]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1ef      	bne.n	80122ec <tcp_process+0x724>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	60da      	str	r2, [r3, #12]
 8012312:	4b1f      	ldr	r3, [pc, #124]	@ (8012390 <tcp_process+0x7c8>)
 8012314:	2201      	movs	r2, #1
 8012316:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	220a      	movs	r2, #10
 801231c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801231e:	4b1d      	ldr	r3, [pc, #116]	@ (8012394 <tcp_process+0x7cc>)
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	60da      	str	r2, [r3, #12]
 8012326:	4a1b      	ldr	r2, [pc, #108]	@ (8012394 <tcp_process+0x7cc>)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6013      	str	r3, [r2, #0]
 801232c:	f003 f89c 	bl	8015468 <tcp_timer_needed>
      }
      break;
 8012330:	e026      	b.n	8012380 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f93c 	bl	80125b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012338:	4b17      	ldr	r3, [pc, #92]	@ (8012398 <tcp_process+0x7d0>)
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	f003 0310 	and.w	r3, r3, #16
 8012340:	2b00      	cmp	r3, #0
 8012342:	d01f      	beq.n	8012384 <tcp_process+0x7bc>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012348:	4b14      	ldr	r3, [pc, #80]	@ (801239c <tcp_process+0x7d4>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	429a      	cmp	r2, r3
 801234e:	d119      	bne.n	8012384 <tcp_process+0x7bc>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012354:	2b00      	cmp	r3, #0
 8012356:	d115      	bne.n	8012384 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012358:	4b11      	ldr	r3, [pc, #68]	@ (80123a0 <tcp_process+0x7d8>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f043 0310 	orr.w	r3, r3, #16
 8012360:	b2da      	uxtb	r2, r3
 8012362:	4b0f      	ldr	r3, [pc, #60]	@ (80123a0 <tcp_process+0x7d8>)
 8012364:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012366:	e00d      	b.n	8012384 <tcp_process+0x7bc>
    default:
      break;
 8012368:	bf00      	nop
 801236a:	e00c      	b.n	8012386 <tcp_process+0x7be>
      break;
 801236c:	bf00      	nop
 801236e:	e00a      	b.n	8012386 <tcp_process+0x7be>
      break;
 8012370:	bf00      	nop
 8012372:	e008      	b.n	8012386 <tcp_process+0x7be>
      break;
 8012374:	bf00      	nop
 8012376:	e006      	b.n	8012386 <tcp_process+0x7be>
      break;
 8012378:	bf00      	nop
 801237a:	e004      	b.n	8012386 <tcp_process+0x7be>
      break;
 801237c:	bf00      	nop
 801237e:	e002      	b.n	8012386 <tcp_process+0x7be>
      break;
 8012380:	bf00      	nop
 8012382:	e000      	b.n	8012386 <tcp_process+0x7be>
      break;
 8012384:	bf00      	nop
  }
  return ERR_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3724      	adds	r7, #36	@ 0x24
 801238c:	46bd      	mov	sp, r7
 801238e:	bd90      	pop	{r4, r7, pc}
 8012390:	2000e12c 	.word	0x2000e12c
 8012394:	2000e128 	.word	0x2000e128
 8012398:	2000e15c 	.word	0x2000e15c
 801239c:	2000e154 	.word	0x2000e154
 80123a0:	2000e15d 	.word	0x2000e15d
 80123a4:	2000e124 	.word	0x2000e124

080123a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80123a8:	b590      	push	{r4, r7, lr}
 80123aa:	b085      	sub	sp, #20
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d106      	bne.n	80123c6 <tcp_oos_insert_segment+0x1e>
 80123b8:	4b3b      	ldr	r3, [pc, #236]	@ (80124a8 <tcp_oos_insert_segment+0x100>)
 80123ba:	f240 421f 	movw	r2, #1055	@ 0x41f
 80123be:	493b      	ldr	r1, [pc, #236]	@ (80124ac <tcp_oos_insert_segment+0x104>)
 80123c0:	483b      	ldr	r0, [pc, #236]	@ (80124b0 <tcp_oos_insert_segment+0x108>)
 80123c2:	f006 fe7f 	bl	80190c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	899b      	ldrh	r3, [r3, #12]
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fb f982 	bl	800d6d8 <lwip_htons>
 80123d4:	4603      	mov	r3, r0
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	f003 0301 	and.w	r3, r3, #1
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d028      	beq.n	8012432 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80123e0:	6838      	ldr	r0, [r7, #0]
 80123e2:	f7fe f995 	bl	8010710 <tcp_segs_free>
    next = NULL;
 80123e6:	2300      	movs	r3, #0
 80123e8:	603b      	str	r3, [r7, #0]
 80123ea:	e056      	b.n	801249a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	899b      	ldrh	r3, [r3, #12]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fb f96f 	bl	800d6d8 <lwip_htons>
 80123fa:	4603      	mov	r3, r0
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	f003 0301 	and.w	r3, r3, #1
 8012402:	2b00      	cmp	r3, #0
 8012404:	d00d      	beq.n	8012422 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	899b      	ldrh	r3, [r3, #12]
 801240c:	b29c      	uxth	r4, r3
 801240e:	2001      	movs	r0, #1
 8012410:	f7fb f962 	bl	800d6d8 <lwip_htons>
 8012414:	4603      	mov	r3, r0
 8012416:	461a      	mov	r2, r3
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	4322      	orrs	r2, r4
 801241e:	b292      	uxth	r2, r2
 8012420:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7fe f984 	bl	801073a <tcp_seg_free>
    while (next &&
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00e      	beq.n	8012456 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	891b      	ldrh	r3, [r3, #8]
 801243c:	461a      	mov	r2, r3
 801243e:	4b1d      	ldr	r3, [pc, #116]	@ (80124b4 <tcp_oos_insert_segment+0x10c>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	441a      	add	r2, r3
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	8909      	ldrh	r1, [r1, #8]
 801244e:	440b      	add	r3, r1
 8012450:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012452:	2b00      	cmp	r3, #0
 8012454:	daca      	bge.n	80123ec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01e      	beq.n	801249a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	891b      	ldrh	r3, [r3, #8]
 8012460:	461a      	mov	r2, r3
 8012462:	4b14      	ldr	r3, [pc, #80]	@ (80124b4 <tcp_oos_insert_segment+0x10c>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	441a      	add	r2, r3
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012470:	2b00      	cmp	r3, #0
 8012472:	dd12      	ble.n	801249a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	b29a      	uxth	r2, r3
 801247c:	4b0d      	ldr	r3, [pc, #52]	@ (80124b4 <tcp_oos_insert_segment+0x10c>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	b29b      	uxth	r3, r3
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	b29a      	uxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	891b      	ldrh	r3, [r3, #8]
 8012492:	4619      	mov	r1, r3
 8012494:	4610      	mov	r0, r2
 8012496:	f7fc fb45 	bl	800eb24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	601a      	str	r2, [r3, #0]
}
 80124a0:	bf00      	nop
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd90      	pop	{r4, r7, pc}
 80124a8:	0801d34c 	.word	0x0801d34c
 80124ac:	0801d60c 	.word	0x0801d60c
 80124b0:	0801d398 	.word	0x0801d398
 80124b4:	2000e150 	.word	0x2000e150

080124b8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80124b8:	b5b0      	push	{r4, r5, r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80124c6:	e03e      	b.n	8012546 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7fc fd38 	bl	800ef4c <pbuf_clen>
 80124dc:	4603      	mov	r3, r0
 80124de:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124e6:	8a7a      	ldrh	r2, [r7, #18]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d906      	bls.n	80124fa <tcp_free_acked_segments+0x42>
 80124ec:	4b2a      	ldr	r3, [pc, #168]	@ (8012598 <tcp_free_acked_segments+0xe0>)
 80124ee:	f240 4257 	movw	r2, #1111	@ 0x457
 80124f2:	492a      	ldr	r1, [pc, #168]	@ (801259c <tcp_free_acked_segments+0xe4>)
 80124f4:	482a      	ldr	r0, [pc, #168]	@ (80125a0 <tcp_free_acked_segments+0xe8>)
 80124f6:	f006 fde5 	bl	80190c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012500:	8a7b      	ldrh	r3, [r7, #18]
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	b29a      	uxth	r2, r3
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	891a      	ldrh	r2, [r3, #8]
 8012510:	4b24      	ldr	r3, [pc, #144]	@ (80125a4 <tcp_free_acked_segments+0xec>)
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	4413      	add	r3, r2
 8012516:	b29a      	uxth	r2, r3
 8012518:	4b22      	ldr	r3, [pc, #136]	@ (80125a4 <tcp_free_acked_segments+0xec>)
 801251a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801251c:	6978      	ldr	r0, [r7, #20]
 801251e:	f7fe f90c 	bl	801073a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00c      	beq.n	8012546 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <tcp_free_acked_segments+0x8e>
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d106      	bne.n	8012546 <tcp_free_acked_segments+0x8e>
 8012538:	4b17      	ldr	r3, [pc, #92]	@ (8012598 <tcp_free_acked_segments+0xe0>)
 801253a:	f240 4261 	movw	r2, #1121	@ 0x461
 801253e:	491a      	ldr	r1, [pc, #104]	@ (80125a8 <tcp_free_acked_segments+0xf0>)
 8012540:	4817      	ldr	r0, [pc, #92]	@ (80125a0 <tcp_free_acked_segments+0xe8>)
 8012542:	f006 fdbf 	bl	80190c4 <iprintf>
  while (seg_list != NULL &&
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d020      	beq.n	801258e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	4618      	mov	r0, r3
 8012554:	f7fb f8d5 	bl	800d702 <lwip_htonl>
 8012558:	4604      	mov	r4, r0
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	891b      	ldrh	r3, [r3, #8]
 801255e:	461d      	mov	r5, r3
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	899b      	ldrh	r3, [r3, #12]
 8012566:	b29b      	uxth	r3, r3
 8012568:	4618      	mov	r0, r3
 801256a:	f7fb f8b5 	bl	800d6d8 <lwip_htons>
 801256e:	4603      	mov	r3, r0
 8012570:	b2db      	uxtb	r3, r3
 8012572:	f003 0303 	and.w	r3, r3, #3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <tcp_free_acked_segments+0xc6>
 801257a:	2301      	movs	r3, #1
 801257c:	e000      	b.n	8012580 <tcp_free_acked_segments+0xc8>
 801257e:	2300      	movs	r3, #0
 8012580:	442b      	add	r3, r5
 8012582:	18e2      	adds	r2, r4, r3
 8012584:	4b09      	ldr	r3, [pc, #36]	@ (80125ac <tcp_free_acked_segments+0xf4>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801258a:	2b00      	cmp	r3, #0
 801258c:	dd9c      	ble.n	80124c8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801258e:	68bb      	ldr	r3, [r7, #8]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bdb0      	pop	{r4, r5, r7, pc}
 8012598:	0801d34c 	.word	0x0801d34c
 801259c:	0801d634 	.word	0x0801d634
 80125a0:	0801d398 	.word	0x0801d398
 80125a4:	2000e158 	.word	0x2000e158
 80125a8:	0801d65c 	.word	0x0801d65c
 80125ac:	2000e154 	.word	0x2000e154

080125b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80125b0:	b5b0      	push	{r4, r5, r7, lr}
 80125b2:	b094      	sub	sp, #80	@ 0x50
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d106      	bne.n	80125d0 <tcp_receive+0x20>
 80125c2:	4b91      	ldr	r3, [pc, #580]	@ (8012808 <tcp_receive+0x258>)
 80125c4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80125c8:	4990      	ldr	r1, [pc, #576]	@ (801280c <tcp_receive+0x25c>)
 80125ca:	4891      	ldr	r0, [pc, #580]	@ (8012810 <tcp_receive+0x260>)
 80125cc:	f006 fd7a 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	7d1b      	ldrb	r3, [r3, #20]
 80125d4:	2b03      	cmp	r3, #3
 80125d6:	d806      	bhi.n	80125e6 <tcp_receive+0x36>
 80125d8:	4b8b      	ldr	r3, [pc, #556]	@ (8012808 <tcp_receive+0x258>)
 80125da:	f240 427c 	movw	r2, #1148	@ 0x47c
 80125de:	498d      	ldr	r1, [pc, #564]	@ (8012814 <tcp_receive+0x264>)
 80125e0:	488b      	ldr	r0, [pc, #556]	@ (8012810 <tcp_receive+0x260>)
 80125e2:	f006 fd6f 	bl	80190c4 <iprintf>

  if (flags & TCP_ACK) {
 80125e6:	4b8c      	ldr	r3, [pc, #560]	@ (8012818 <tcp_receive+0x268>)
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	f003 0310 	and.w	r3, r3, #16
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f000 8264 	beq.w	8012abc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80125fa:	461a      	mov	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012600:	4413      	add	r3, r2
 8012602:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012608:	4b84      	ldr	r3, [pc, #528]	@ (801281c <tcp_receive+0x26c>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	2b00      	cmp	r3, #0
 8012610:	db1b      	blt.n	801264a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012616:	4b81      	ldr	r3, [pc, #516]	@ (801281c <tcp_receive+0x26c>)
 8012618:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801261a:	429a      	cmp	r2, r3
 801261c:	d106      	bne.n	801262c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012622:	4b7f      	ldr	r3, [pc, #508]	@ (8012820 <tcp_receive+0x270>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	2b00      	cmp	r3, #0
 801262a:	db0e      	blt.n	801264a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012630:	4b7b      	ldr	r3, [pc, #492]	@ (8012820 <tcp_receive+0x270>)
 8012632:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012634:	429a      	cmp	r2, r3
 8012636:	d125      	bne.n	8012684 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012638:	4b7a      	ldr	r3, [pc, #488]	@ (8012824 <tcp_receive+0x274>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	89db      	ldrh	r3, [r3, #14]
 801263e:	b29a      	uxth	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012646:	429a      	cmp	r2, r3
 8012648:	d91c      	bls.n	8012684 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801264a:	4b76      	ldr	r3, [pc, #472]	@ (8012824 <tcp_receive+0x274>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	89db      	ldrh	r3, [r3, #14]
 8012650:	b29a      	uxth	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012664:	429a      	cmp	r2, r3
 8012666:	d205      	bcs.n	8012674 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012674:	4b69      	ldr	r3, [pc, #420]	@ (801281c <tcp_receive+0x26c>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801267c:	4b68      	ldr	r3, [pc, #416]	@ (8012820 <tcp_receive+0x270>)
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012684:	4b66      	ldr	r3, [pc, #408]	@ (8012820 <tcp_receive+0x270>)
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	2b00      	cmp	r3, #0
 8012690:	dc58      	bgt.n	8012744 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012692:	4b65      	ldr	r3, [pc, #404]	@ (8012828 <tcp_receive+0x278>)
 8012694:	881b      	ldrh	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d14b      	bne.n	8012732 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80126a4:	4413      	add	r3, r2
 80126a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d142      	bne.n	8012732 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	db3d      	blt.n	8012732 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126ba:	4b59      	ldr	r3, [pc, #356]	@ (8012820 <tcp_receive+0x270>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d137      	bne.n	8012732 <tcp_receive+0x182>
              found_dupack = 1;
 80126c2:	2301      	movs	r3, #1
 80126c4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80126cc:	2bff      	cmp	r3, #255	@ 0xff
 80126ce:	d007      	beq.n	80126e0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80126d6:	3301      	adds	r3, #1
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d91b      	bls.n	8012722 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126f4:	4413      	add	r3, r2
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80126fe:	429a      	cmp	r2, r3
 8012700:	d30a      	bcc.n	8012718 <tcp_receive+0x168>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801270c:	4413      	add	r3, r2
 801270e:	b29a      	uxth	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012716:	e004      	b.n	8012722 <tcp_receive+0x172>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801271e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012728:	2b02      	cmp	r3, #2
 801272a:	d902      	bls.n	8012732 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f002 fb3f 	bl	8014db0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012734:	2b00      	cmp	r3, #0
 8012736:	f040 8161 	bne.w	80129fc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012742:	e15b      	b.n	80129fc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012744:	4b36      	ldr	r3, [pc, #216]	@ (8012820 <tcp_receive+0x270>)
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801274c:	1ad3      	subs	r3, r2, r3
 801274e:	3b01      	subs	r3, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	f2c0 814e 	blt.w	80129f2 <tcp_receive+0x442>
 8012756:	4b32      	ldr	r3, [pc, #200]	@ (8012820 <tcp_receive+0x270>)
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	f300 8146 	bgt.w	80129f2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	8b5b      	ldrh	r3, [r3, #26]
 801276a:	f003 0304 	and.w	r3, r3, #4
 801276e:	2b00      	cmp	r3, #0
 8012770:	d010      	beq.n	8012794 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	8b5b      	ldrh	r3, [r3, #26]
 8012776:	f023 0304 	bic.w	r3, r3, #4
 801277a:	b29a      	uxth	r2, r3
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2200      	movs	r2, #0
 8012798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80127a2:	10db      	asrs	r3, r3, #3
 80127a4:	b21b      	sxth	r3, r3
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	4413      	add	r3, r2
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	b21a      	sxth	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80127bc:	4b18      	ldr	r3, [pc, #96]	@ (8012820 <tcp_receive+0x270>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2200      	movs	r2, #0
 80127d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80127d4:	4b12      	ldr	r3, [pc, #72]	@ (8012820 <tcp_receive+0x270>)
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	7d1b      	ldrb	r3, [r3, #20]
 80127e0:	2b03      	cmp	r3, #3
 80127e2:	f240 8097 	bls.w	8012914 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d245      	bcs.n	8012882 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	8b5b      	ldrh	r3, [r3, #26]
 80127fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d014      	beq.n	801282c <tcp_receive+0x27c>
 8012802:	2301      	movs	r3, #1
 8012804:	e013      	b.n	801282e <tcp_receive+0x27e>
 8012806:	bf00      	nop
 8012808:	0801d34c 	.word	0x0801d34c
 801280c:	0801d67c 	.word	0x0801d67c
 8012810:	0801d398 	.word	0x0801d398
 8012814:	0801d698 	.word	0x0801d698
 8012818:	2000e15c 	.word	0x2000e15c
 801281c:	2000e150 	.word	0x2000e150
 8012820:	2000e154 	.word	0x2000e154
 8012824:	2000e140 	.word	0x2000e140
 8012828:	2000e15a 	.word	0x2000e15a
 801282c:	2302      	movs	r3, #2
 801282e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012832:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012836:	b29a      	uxth	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801283c:	fb12 f303 	smulbb	r3, r2, r3
 8012840:	b29b      	uxth	r3, r3
 8012842:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012844:	4293      	cmp	r3, r2
 8012846:	bf28      	it	cs
 8012848:	4613      	movcs	r3, r2
 801284a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012852:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012854:	4413      	add	r3, r2
 8012856:	b29a      	uxth	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801285e:	429a      	cmp	r2, r3
 8012860:	d309      	bcc.n	8012876 <tcp_receive+0x2c6>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012868:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801286a:	4413      	add	r3, r2
 801286c:	b29a      	uxth	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012874:	e04e      	b.n	8012914 <tcp_receive+0x364>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801287c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012880:	e048      	b.n	8012914 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012888:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801288a:	4413      	add	r3, r2
 801288c:	b29a      	uxth	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012894:	429a      	cmp	r2, r3
 8012896:	d309      	bcc.n	80128ac <tcp_receive+0x2fc>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801289e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80128a0:	4413      	add	r3, r2
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80128aa:	e004      	b.n	80128b6 <tcp_receive+0x306>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d326      	bcc.n	8012914 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80128e6:	4413      	add	r3, r2
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d30a      	bcc.n	801290a <tcp_receive+0x35a>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80128fe:	4413      	add	r3, r2
 8012900:	b29a      	uxth	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012908:	e004      	b.n	8012914 <tcp_receive+0x364>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012910:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801291c:	4a98      	ldr	r2, [pc, #608]	@ (8012b80 <tcp_receive+0x5d0>)
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff fdca 	bl	80124b8 <tcp_free_acked_segments>
 8012924:	4602      	mov	r2, r0
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012932:	4a94      	ldr	r2, [pc, #592]	@ (8012b84 <tcp_receive+0x5d4>)
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff fdbf 	bl	80124b8 <tcp_free_acked_segments>
 801293a:	4602      	mov	r2, r0
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012944:	2b00      	cmp	r3, #0
 8012946:	d104      	bne.n	8012952 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801294e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012950:	e002      	b.n	8012958 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2200      	movs	r2, #0
 8012956:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2200      	movs	r2, #0
 801295c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012962:	2b00      	cmp	r3, #0
 8012964:	d103      	bne.n	801296e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2200      	movs	r2, #0
 801296a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012974:	4b84      	ldr	r3, [pc, #528]	@ (8012b88 <tcp_receive+0x5d8>)
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	4413      	add	r3, r2
 801297a:	b29a      	uxth	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8b5b      	ldrh	r3, [r3, #26]
 8012986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801298a:	2b00      	cmp	r3, #0
 801298c:	d035      	beq.n	80129fa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012992:	2b00      	cmp	r3, #0
 8012994:	d118      	bne.n	80129c8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00c      	beq.n	80129b8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fa fea9 	bl	800d702 <lwip_htonl>
 80129b0:	4603      	mov	r3, r0
 80129b2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	dc20      	bgt.n	80129fa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	8b5b      	ldrh	r3, [r3, #26]
 80129bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80129c6:	e018      	b.n	80129fa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129d0:	68db      	ldr	r3, [r3, #12]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fa fe94 	bl	800d702 <lwip_htonl>
 80129da:	4603      	mov	r3, r0
 80129dc:	1ae3      	subs	r3, r4, r3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	dc0b      	bgt.n	80129fa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8b5b      	ldrh	r3, [r3, #26]
 80129e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80129ea:	b29a      	uxth	r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80129f0:	e003      	b.n	80129fa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f002 fbc8 	bl	8015188 <tcp_send_empty_ack>
 80129f8:	e000      	b.n	80129fc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80129fa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d05b      	beq.n	8012abc <tcp_receive+0x50c>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a08:	4b60      	ldr	r3, [pc, #384]	@ (8012b8c <tcp_receive+0x5dc>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	1ad3      	subs	r3, r2, r3
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	da54      	bge.n	8012abc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012a12:	4b5f      	ldr	r3, [pc, #380]	@ (8012b90 <tcp_receive+0x5e0>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012a26:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012a30:	10db      	asrs	r3, r3, #3
 8012a32:	b21b      	sxth	r3, r3
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	1ad3      	subs	r3, r2, r3
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012a4a:	4413      	add	r3, r2
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	b21a      	sxth	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012a54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	da05      	bge.n	8012a68 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012a60:	425b      	negs	r3, r3
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012a68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012a72:	109b      	asrs	r3, r3, #2
 8012a74:	b21b      	sxth	r3, r3
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012a8c:	4413      	add	r3, r2
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	b21a      	sxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012a9c:	10db      	asrs	r3, r3, #3
 8012a9e:	b21b      	sxth	r3, r3
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	4413      	add	r3, r2
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	b21a      	sxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012abc:	4b35      	ldr	r3, [pc, #212]	@ (8012b94 <tcp_receive+0x5e4>)
 8012abe:	881b      	ldrh	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f000 84df 	beq.w	8013484 <tcp_receive+0xed4>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	7d1b      	ldrb	r3, [r3, #20]
 8012aca:	2b06      	cmp	r3, #6
 8012acc:	f200 84da 	bhi.w	8013484 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ad4:	4b30      	ldr	r3, [pc, #192]	@ (8012b98 <tcp_receive+0x5e8>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	3b01      	subs	r3, #1
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f2c0 808f 	blt.w	8012c00 <tcp_receive+0x650>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8012b94 <tcp_receive+0x5e4>)
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	4b2a      	ldr	r3, [pc, #168]	@ (8012b98 <tcp_receive+0x5e8>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	440b      	add	r3, r1
 8012af2:	1ad3      	subs	r3, r2, r3
 8012af4:	3301      	adds	r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f300 8082 	bgt.w	8012c00 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012afc:	4b27      	ldr	r3, [pc, #156]	@ (8012b9c <tcp_receive+0x5ec>)
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b06:	4b24      	ldr	r3, [pc, #144]	@ (8012b98 <tcp_receive+0x5e8>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	1ad3      	subs	r3, r2, r3
 8012b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012b0e:	4b23      	ldr	r3, [pc, #140]	@ (8012b9c <tcp_receive+0x5ec>)
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d106      	bne.n	8012b24 <tcp_receive+0x574>
 8012b16:	4b22      	ldr	r3, [pc, #136]	@ (8012ba0 <tcp_receive+0x5f0>)
 8012b18:	f240 5294 	movw	r2, #1428	@ 0x594
 8012b1c:	4921      	ldr	r1, [pc, #132]	@ (8012ba4 <tcp_receive+0x5f4>)
 8012b1e:	4822      	ldr	r0, [pc, #136]	@ (8012ba8 <tcp_receive+0x5f8>)
 8012b20:	f006 fad0 	bl	80190c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d906      	bls.n	8012b3c <tcp_receive+0x58c>
 8012b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8012ba0 <tcp_receive+0x5f0>)
 8012b30:	f240 5295 	movw	r2, #1429	@ 0x595
 8012b34:	491d      	ldr	r1, [pc, #116]	@ (8012bac <tcp_receive+0x5fc>)
 8012b36:	481c      	ldr	r0, [pc, #112]	@ (8012ba8 <tcp_receive+0x5f8>)
 8012b38:	f006 fac4 	bl	80190c4 <iprintf>
      off = (u16_t)off32;
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012b42:	4b16      	ldr	r3, [pc, #88]	@ (8012b9c <tcp_receive+0x5ec>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	891b      	ldrh	r3, [r3, #8]
 8012b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d906      	bls.n	8012b5e <tcp_receive+0x5ae>
 8012b50:	4b13      	ldr	r3, [pc, #76]	@ (8012ba0 <tcp_receive+0x5f0>)
 8012b52:	f240 5297 	movw	r2, #1431	@ 0x597
 8012b56:	4916      	ldr	r1, [pc, #88]	@ (8012bb0 <tcp_receive+0x600>)
 8012b58:	4813      	ldr	r0, [pc, #76]	@ (8012ba8 <tcp_receive+0x5f8>)
 8012b5a:	f006 fab3 	bl	80190c4 <iprintf>
      inseg.len -= off;
 8012b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8012b9c <tcp_receive+0x5ec>)
 8012b60:	891a      	ldrh	r2, [r3, #8]
 8012b62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012b66:	1ad3      	subs	r3, r2, r3
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8012b9c <tcp_receive+0x5ec>)
 8012b6c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8012b9c <tcp_receive+0x5ec>)
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	891a      	ldrh	r2, [r3, #8]
 8012b74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012b7c:	e02a      	b.n	8012bd4 <tcp_receive+0x624>
 8012b7e:	bf00      	nop
 8012b80:	0801d6b4 	.word	0x0801d6b4
 8012b84:	0801d6bc 	.word	0x0801d6bc
 8012b88:	2000e158 	.word	0x2000e158
 8012b8c:	2000e154 	.word	0x2000e154
 8012b90:	2000e118 	.word	0x2000e118
 8012b94:	2000e15a 	.word	0x2000e15a
 8012b98:	2000e150 	.word	0x2000e150
 8012b9c:	2000e130 	.word	0x2000e130
 8012ba0:	0801d34c 	.word	0x0801d34c
 8012ba4:	0801d6c4 	.word	0x0801d6c4
 8012ba8:	0801d398 	.word	0x0801d398
 8012bac:	0801d6d4 	.word	0x0801d6d4
 8012bb0:	0801d6e4 	.word	0x0801d6e4
        off -= p->len;
 8012bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bb6:	895b      	ldrh	r3, [r3, #10]
 8012bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bc4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012bc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bca:	2200      	movs	r2, #0
 8012bcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bd6:	895b      	ldrh	r3, [r3, #10]
 8012bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d8e9      	bhi.n	8012bb4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012be4:	4619      	mov	r1, r3
 8012be6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012be8:	f7fc f89c 	bl	800ed24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bf0:	4a90      	ldr	r2, [pc, #576]	@ (8012e34 <tcp_receive+0x884>)
 8012bf2:	6013      	str	r3, [r2, #0]
 8012bf4:	4b90      	ldr	r3, [pc, #576]	@ (8012e38 <tcp_receive+0x888>)
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8012e34 <tcp_receive+0x884>)
 8012bfa:	6812      	ldr	r2, [r2, #0]
 8012bfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012bfe:	e00d      	b.n	8012c1c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012c00:	4b8c      	ldr	r3, [pc, #560]	@ (8012e34 <tcp_receive+0x884>)
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c08:	1ad3      	subs	r3, r2, r3
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	da06      	bge.n	8012c1c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	8b5b      	ldrh	r3, [r3, #26]
 8012c12:	f043 0302 	orr.w	r3, r3, #2
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c1c:	4b85      	ldr	r3, [pc, #532]	@ (8012e34 <tcp_receive+0x884>)
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f2c0 8427 	blt.w	801347a <tcp_receive+0xeca>
 8012c2c:	4b81      	ldr	r3, [pc, #516]	@ (8012e34 <tcp_receive+0x884>)
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c34:	6879      	ldr	r1, [r7, #4]
 8012c36:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c38:	440b      	add	r3, r1
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f300 841b 	bgt.w	801347a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c48:	4b7a      	ldr	r3, [pc, #488]	@ (8012e34 <tcp_receive+0x884>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	f040 8298 	bne.w	8013182 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012c52:	4b79      	ldr	r3, [pc, #484]	@ (8012e38 <tcp_receive+0x888>)
 8012c54:	891c      	ldrh	r4, [r3, #8]
 8012c56:	4b78      	ldr	r3, [pc, #480]	@ (8012e38 <tcp_receive+0x888>)
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	899b      	ldrh	r3, [r3, #12]
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fa fd3a 	bl	800d6d8 <lwip_htons>
 8012c64:	4603      	mov	r3, r0
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	f003 0303 	and.w	r3, r3, #3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d001      	beq.n	8012c74 <tcp_receive+0x6c4>
 8012c70:	2301      	movs	r3, #1
 8012c72:	e000      	b.n	8012c76 <tcp_receive+0x6c6>
 8012c74:	2300      	movs	r3, #0
 8012c76:	4423      	add	r3, r4
 8012c78:	b29a      	uxth	r2, r3
 8012c7a:	4b70      	ldr	r3, [pc, #448]	@ (8012e3c <tcp_receive+0x88c>)
 8012c7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012c82:	4b6e      	ldr	r3, [pc, #440]	@ (8012e3c <tcp_receive+0x88c>)
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d274      	bcs.n	8012d74 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8012e38 <tcp_receive+0x888>)
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	899b      	ldrh	r3, [r3, #12]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fa fd20 	bl	800d6d8 <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0301 	and.w	r3, r3, #1
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d01e      	beq.n	8012ce2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012ca4:	4b64      	ldr	r3, [pc, #400]	@ (8012e38 <tcp_receive+0x888>)
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	899b      	ldrh	r3, [r3, #12]
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	b21b      	sxth	r3, r3
 8012cae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012cb2:	b21c      	sxth	r4, r3
 8012cb4:	4b60      	ldr	r3, [pc, #384]	@ (8012e38 <tcp_receive+0x888>)
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fa fd0b 	bl	800d6d8 <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fa fd03 	bl	800d6d8 <lwip_htons>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	b21b      	sxth	r3, r3
 8012cd6:	4323      	orrs	r3, r4
 8012cd8:	b21a      	sxth	r2, r3
 8012cda:	4b57      	ldr	r3, [pc, #348]	@ (8012e38 <tcp_receive+0x888>)
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	b292      	uxth	r2, r2
 8012ce0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012ce6:	4b54      	ldr	r3, [pc, #336]	@ (8012e38 <tcp_receive+0x888>)
 8012ce8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012cea:	4b53      	ldr	r3, [pc, #332]	@ (8012e38 <tcp_receive+0x888>)
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	899b      	ldrh	r3, [r3, #12]
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7fa fcf0 	bl	800d6d8 <lwip_htons>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	f003 0302 	and.w	r3, r3, #2
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d005      	beq.n	8012d10 <tcp_receive+0x760>
            inseg.len -= 1;
 8012d04:	4b4c      	ldr	r3, [pc, #304]	@ (8012e38 <tcp_receive+0x888>)
 8012d06:	891b      	ldrh	r3, [r3, #8]
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8012e38 <tcp_receive+0x888>)
 8012d0e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012d10:	4b49      	ldr	r3, [pc, #292]	@ (8012e38 <tcp_receive+0x888>)
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	4a48      	ldr	r2, [pc, #288]	@ (8012e38 <tcp_receive+0x888>)
 8012d16:	8912      	ldrh	r2, [r2, #8]
 8012d18:	4611      	mov	r1, r2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fb ff02 	bl	800eb24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012d20:	4b45      	ldr	r3, [pc, #276]	@ (8012e38 <tcp_receive+0x888>)
 8012d22:	891c      	ldrh	r4, [r3, #8]
 8012d24:	4b44      	ldr	r3, [pc, #272]	@ (8012e38 <tcp_receive+0x888>)
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	899b      	ldrh	r3, [r3, #12]
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fa fcd3 	bl	800d6d8 <lwip_htons>
 8012d32:	4603      	mov	r3, r0
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	f003 0303 	and.w	r3, r3, #3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d001      	beq.n	8012d42 <tcp_receive+0x792>
 8012d3e:	2301      	movs	r3, #1
 8012d40:	e000      	b.n	8012d44 <tcp_receive+0x794>
 8012d42:	2300      	movs	r3, #0
 8012d44:	4423      	add	r3, r4
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	4b3c      	ldr	r3, [pc, #240]	@ (8012e3c <tcp_receive+0x88c>)
 8012d4a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8012e3c <tcp_receive+0x88c>)
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b38      	ldr	r3, [pc, #224]	@ (8012e34 <tcp_receive+0x884>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	441a      	add	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d5c:	6879      	ldr	r1, [r7, #4]
 8012d5e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012d60:	440b      	add	r3, r1
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d006      	beq.n	8012d74 <tcp_receive+0x7c4>
 8012d66:	4b36      	ldr	r3, [pc, #216]	@ (8012e40 <tcp_receive+0x890>)
 8012d68:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012d6c:	4935      	ldr	r1, [pc, #212]	@ (8012e44 <tcp_receive+0x894>)
 8012d6e:	4836      	ldr	r0, [pc, #216]	@ (8012e48 <tcp_receive+0x898>)
 8012d70:	f006 f9a8 	bl	80190c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	f000 80e6 	beq.w	8012f4a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8012e38 <tcp_receive+0x888>)
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	899b      	ldrh	r3, [r3, #12]
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fa fca6 	bl	800d6d8 <lwip_htons>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	f003 0301 	and.w	r3, r3, #1
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d010      	beq.n	8012dba <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012d98:	e00a      	b.n	8012db0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d9e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f7fd fcc5 	bl	801073a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1f0      	bne.n	8012d9a <tcp_receive+0x7ea>
 8012db8:	e0c7      	b.n	8012f4a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012dc0:	e051      	b.n	8012e66 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	899b      	ldrh	r3, [r3, #12]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fa fc84 	bl	800d6d8 <lwip_htons>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	f003 0301 	and.w	r3, r3, #1
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d03c      	beq.n	8012e56 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012ddc:	4b16      	ldr	r3, [pc, #88]	@ (8012e38 <tcp_receive+0x888>)
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	899b      	ldrh	r3, [r3, #12]
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fa fc77 	bl	800d6d8 <lwip_htons>
 8012dea:	4603      	mov	r3, r0
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d12f      	bne.n	8012e56 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012df6:	4b10      	ldr	r3, [pc, #64]	@ (8012e38 <tcp_receive+0x888>)
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	899b      	ldrh	r3, [r3, #12]
 8012dfc:	b29c      	uxth	r4, r3
 8012dfe:	2001      	movs	r0, #1
 8012e00:	f7fa fc6a 	bl	800d6d8 <lwip_htons>
 8012e04:	4603      	mov	r3, r0
 8012e06:	461a      	mov	r2, r3
 8012e08:	4b0b      	ldr	r3, [pc, #44]	@ (8012e38 <tcp_receive+0x888>)
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	4322      	orrs	r2, r4
 8012e0e:	b292      	uxth	r2, r2
 8012e10:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012e12:	4b09      	ldr	r3, [pc, #36]	@ (8012e38 <tcp_receive+0x888>)
 8012e14:	891c      	ldrh	r4, [r3, #8]
 8012e16:	4b08      	ldr	r3, [pc, #32]	@ (8012e38 <tcp_receive+0x888>)
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	899b      	ldrh	r3, [r3, #12]
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fa fc5a 	bl	800d6d8 <lwip_htons>
 8012e24:	4603      	mov	r3, r0
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	f003 0303 	and.w	r3, r3, #3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d00d      	beq.n	8012e4c <tcp_receive+0x89c>
 8012e30:	2301      	movs	r3, #1
 8012e32:	e00c      	b.n	8012e4e <tcp_receive+0x89e>
 8012e34:	2000e150 	.word	0x2000e150
 8012e38:	2000e130 	.word	0x2000e130
 8012e3c:	2000e15a 	.word	0x2000e15a
 8012e40:	0801d34c 	.word	0x0801d34c
 8012e44:	0801d6f4 	.word	0x0801d6f4
 8012e48:	0801d398 	.word	0x0801d398
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4423      	add	r3, r4
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	4b98      	ldr	r3, [pc, #608]	@ (80130b4 <tcp_receive+0xb04>)
 8012e54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e58:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012e60:	6938      	ldr	r0, [r7, #16]
 8012e62:	f7fd fc6a 	bl	801073a <tcp_seg_free>
            while (next &&
 8012e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00e      	beq.n	8012e8a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012e6c:	4b91      	ldr	r3, [pc, #580]	@ (80130b4 <tcp_receive+0xb04>)
 8012e6e:	881b      	ldrh	r3, [r3, #0]
 8012e70:	461a      	mov	r2, r3
 8012e72:	4b91      	ldr	r3, [pc, #580]	@ (80130b8 <tcp_receive+0xb08>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	441a      	add	r2, r3
 8012e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012e80:	8909      	ldrh	r1, [r1, #8]
 8012e82:	440b      	add	r3, r1
 8012e84:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	da9b      	bge.n	8012dc2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d059      	beq.n	8012f44 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012e90:	4b88      	ldr	r3, [pc, #544]	@ (80130b4 <tcp_receive+0xb04>)
 8012e92:	881b      	ldrh	r3, [r3, #0]
 8012e94:	461a      	mov	r2, r3
 8012e96:	4b88      	ldr	r3, [pc, #544]	@ (80130b8 <tcp_receive+0xb08>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	441a      	add	r2, r3
 8012e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	dd4d      	ble.n	8012f44 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b81      	ldr	r3, [pc, #516]	@ (80130b8 <tcp_receive+0xb08>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	1ad3      	subs	r3, r2, r3
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	4b80      	ldr	r3, [pc, #512]	@ (80130bc <tcp_receive+0xb0c>)
 8012ebc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80130bc <tcp_receive+0xb0c>)
 8012ec0:	68db      	ldr	r3, [r3, #12]
 8012ec2:	899b      	ldrh	r3, [r3, #12]
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7fa fc06 	bl	800d6d8 <lwip_htons>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	f003 0302 	and.w	r3, r3, #2
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d005      	beq.n	8012ee4 <tcp_receive+0x934>
                inseg.len -= 1;
 8012ed8:	4b78      	ldr	r3, [pc, #480]	@ (80130bc <tcp_receive+0xb0c>)
 8012eda:	891b      	ldrh	r3, [r3, #8]
 8012edc:	3b01      	subs	r3, #1
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	4b76      	ldr	r3, [pc, #472]	@ (80130bc <tcp_receive+0xb0c>)
 8012ee2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012ee4:	4b75      	ldr	r3, [pc, #468]	@ (80130bc <tcp_receive+0xb0c>)
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	4a74      	ldr	r2, [pc, #464]	@ (80130bc <tcp_receive+0xb0c>)
 8012eea:	8912      	ldrh	r2, [r2, #8]
 8012eec:	4611      	mov	r1, r2
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fb fe18 	bl	800eb24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012ef4:	4b71      	ldr	r3, [pc, #452]	@ (80130bc <tcp_receive+0xb0c>)
 8012ef6:	891c      	ldrh	r4, [r3, #8]
 8012ef8:	4b70      	ldr	r3, [pc, #448]	@ (80130bc <tcp_receive+0xb0c>)
 8012efa:	68db      	ldr	r3, [r3, #12]
 8012efc:	899b      	ldrh	r3, [r3, #12]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7fa fbe9 	bl	800d6d8 <lwip_htons>
 8012f06:	4603      	mov	r3, r0
 8012f08:	b2db      	uxtb	r3, r3
 8012f0a:	f003 0303 	and.w	r3, r3, #3
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <tcp_receive+0x966>
 8012f12:	2301      	movs	r3, #1
 8012f14:	e000      	b.n	8012f18 <tcp_receive+0x968>
 8012f16:	2300      	movs	r3, #0
 8012f18:	4423      	add	r3, r4
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	4b65      	ldr	r3, [pc, #404]	@ (80130b4 <tcp_receive+0xb04>)
 8012f1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012f20:	4b64      	ldr	r3, [pc, #400]	@ (80130b4 <tcp_receive+0xb04>)
 8012f22:	881b      	ldrh	r3, [r3, #0]
 8012f24:	461a      	mov	r2, r3
 8012f26:	4b64      	ldr	r3, [pc, #400]	@ (80130b8 <tcp_receive+0xb08>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	441a      	add	r2, r3
 8012f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d006      	beq.n	8012f44 <tcp_receive+0x994>
 8012f36:	4b62      	ldr	r3, [pc, #392]	@ (80130c0 <tcp_receive+0xb10>)
 8012f38:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012f3c:	4961      	ldr	r1, [pc, #388]	@ (80130c4 <tcp_receive+0xb14>)
 8012f3e:	4862      	ldr	r0, [pc, #392]	@ (80130c8 <tcp_receive+0xb18>)
 8012f40:	f006 f8c0 	bl	80190c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f48:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80130b4 <tcp_receive+0xb04>)
 8012f4c:	881b      	ldrh	r3, [r3, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	4b59      	ldr	r3, [pc, #356]	@ (80130b8 <tcp_receive+0xb08>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	441a      	add	r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f5e:	4b55      	ldr	r3, [pc, #340]	@ (80130b4 <tcp_receive+0xb04>)
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d206      	bcs.n	8012f74 <tcp_receive+0x9c4>
 8012f66:	4b56      	ldr	r3, [pc, #344]	@ (80130c0 <tcp_receive+0xb10>)
 8012f68:	f240 6207 	movw	r2, #1543	@ 0x607
 8012f6c:	4957      	ldr	r1, [pc, #348]	@ (80130cc <tcp_receive+0xb1c>)
 8012f6e:	4856      	ldr	r0, [pc, #344]	@ (80130c8 <tcp_receive+0xb18>)
 8012f70:	f006 f8a8 	bl	80190c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f78:	4b4e      	ldr	r3, [pc, #312]	@ (80130b4 <tcp_receive+0xb04>)
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7fc feb1 	bl	800fcec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80130bc <tcp_receive+0xb0c>)
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	891b      	ldrh	r3, [r3, #8]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d006      	beq.n	8012fa2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012f94:	4b49      	ldr	r3, [pc, #292]	@ (80130bc <tcp_receive+0xb0c>)
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	4a4d      	ldr	r2, [pc, #308]	@ (80130d0 <tcp_receive+0xb20>)
 8012f9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012f9c:	4b47      	ldr	r3, [pc, #284]	@ (80130bc <tcp_receive+0xb0c>)
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012fa2:	4b46      	ldr	r3, [pc, #280]	@ (80130bc <tcp_receive+0xb0c>)
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	899b      	ldrh	r3, [r3, #12]
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fa fb94 	bl	800d6d8 <lwip_htons>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	f003 0301 	and.w	r3, r3, #1
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	f000 80b8 	beq.w	801312e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012fbe:	4b45      	ldr	r3, [pc, #276]	@ (80130d4 <tcp_receive+0xb24>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	f043 0320 	orr.w	r3, r3, #32
 8012fc6:	b2da      	uxtb	r2, r3
 8012fc8:	4b42      	ldr	r3, [pc, #264]	@ (80130d4 <tcp_receive+0xb24>)
 8012fca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012fcc:	e0af      	b.n	801312e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fd2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	4a36      	ldr	r2, [pc, #216]	@ (80130b8 <tcp_receive+0xb08>)
 8012fde:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	891b      	ldrh	r3, [r3, #8]
 8012fe4:	461c      	mov	r4, r3
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	899b      	ldrh	r3, [r3, #12]
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fa fb72 	bl	800d6d8 <lwip_htons>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	f003 0303 	and.w	r3, r3, #3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <tcp_receive+0xa54>
 8013000:	2301      	movs	r3, #1
 8013002:	e000      	b.n	8013006 <tcp_receive+0xa56>
 8013004:	2300      	movs	r3, #0
 8013006:	191a      	adds	r2, r3, r4
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801300c:	441a      	add	r2, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013016:	461c      	mov	r4, r3
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	891b      	ldrh	r3, [r3, #8]
 801301c:	461d      	mov	r5, r3
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	68db      	ldr	r3, [r3, #12]
 8013022:	899b      	ldrh	r3, [r3, #12]
 8013024:	b29b      	uxth	r3, r3
 8013026:	4618      	mov	r0, r3
 8013028:	f7fa fb56 	bl	800d6d8 <lwip_htons>
 801302c:	4603      	mov	r3, r0
 801302e:	b2db      	uxtb	r3, r3
 8013030:	f003 0303 	and.w	r3, r3, #3
 8013034:	2b00      	cmp	r3, #0
 8013036:	d001      	beq.n	801303c <tcp_receive+0xa8c>
 8013038:	2301      	movs	r3, #1
 801303a:	e000      	b.n	801303e <tcp_receive+0xa8e>
 801303c:	2300      	movs	r3, #0
 801303e:	442b      	add	r3, r5
 8013040:	429c      	cmp	r4, r3
 8013042:	d206      	bcs.n	8013052 <tcp_receive+0xaa2>
 8013044:	4b1e      	ldr	r3, [pc, #120]	@ (80130c0 <tcp_receive+0xb10>)
 8013046:	f240 622b 	movw	r2, #1579	@ 0x62b
 801304a:	4923      	ldr	r1, [pc, #140]	@ (80130d8 <tcp_receive+0xb28>)
 801304c:	481e      	ldr	r0, [pc, #120]	@ (80130c8 <tcp_receive+0xb18>)
 801304e:	f006 f839 	bl	80190c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	891b      	ldrh	r3, [r3, #8]
 8013056:	461c      	mov	r4, r3
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	899b      	ldrh	r3, [r3, #12]
 801305e:	b29b      	uxth	r3, r3
 8013060:	4618      	mov	r0, r3
 8013062:	f7fa fb39 	bl	800d6d8 <lwip_htons>
 8013066:	4603      	mov	r3, r0
 8013068:	b2db      	uxtb	r3, r3
 801306a:	f003 0303 	and.w	r3, r3, #3
 801306e:	2b00      	cmp	r3, #0
 8013070:	d001      	beq.n	8013076 <tcp_receive+0xac6>
 8013072:	2301      	movs	r3, #1
 8013074:	e000      	b.n	8013078 <tcp_receive+0xac8>
 8013076:	2300      	movs	r3, #0
 8013078:	1919      	adds	r1, r3, r4
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801307e:	b28b      	uxth	r3, r1
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7fc fe2f 	bl	800fcec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	891b      	ldrh	r3, [r3, #8]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d028      	beq.n	80130ea <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013098:	4b0d      	ldr	r3, [pc, #52]	@ (80130d0 <tcp_receive+0xb20>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01d      	beq.n	80130dc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80130a0:	4b0b      	ldr	r3, [pc, #44]	@ (80130d0 <tcp_receive+0xb20>)
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	4619      	mov	r1, r3
 80130aa:	4610      	mov	r0, r2
 80130ac:	f7fb ff8e 	bl	800efcc <pbuf_cat>
 80130b0:	e018      	b.n	80130e4 <tcp_receive+0xb34>
 80130b2:	bf00      	nop
 80130b4:	2000e15a 	.word	0x2000e15a
 80130b8:	2000e150 	.word	0x2000e150
 80130bc:	2000e130 	.word	0x2000e130
 80130c0:	0801d34c 	.word	0x0801d34c
 80130c4:	0801d72c 	.word	0x0801d72c
 80130c8:	0801d398 	.word	0x0801d398
 80130cc:	0801d768 	.word	0x0801d768
 80130d0:	2000e160 	.word	0x2000e160
 80130d4:	2000e15d 	.word	0x2000e15d
 80130d8:	0801d788 	.word	0x0801d788
            } else {
              recv_data = cseg->p;
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	4a70      	ldr	r2, [pc, #448]	@ (80132a4 <tcp_receive+0xcf4>)
 80130e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	2200      	movs	r2, #0
 80130e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	899b      	ldrh	r3, [r3, #12]
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fa faf0 	bl	800d6d8 <lwip_htons>
 80130f8:	4603      	mov	r3, r0
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	f003 0301 	and.w	r3, r3, #1
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00d      	beq.n	8013120 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013104:	4b68      	ldr	r3, [pc, #416]	@ (80132a8 <tcp_receive+0xcf8>)
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	f043 0320 	orr.w	r3, r3, #32
 801310c:	b2da      	uxtb	r2, r3
 801310e:	4b66      	ldr	r3, [pc, #408]	@ (80132a8 <tcp_receive+0xcf8>)
 8013110:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	7d1b      	ldrb	r3, [r3, #20]
 8013116:	2b04      	cmp	r3, #4
 8013118:	d102      	bne.n	8013120 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2207      	movs	r2, #7
 801311e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013128:	68b8      	ldr	r0, [r7, #8]
 801312a:	f7fd fb06 	bl	801073a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013132:	2b00      	cmp	r3, #0
 8013134:	d008      	beq.n	8013148 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	685a      	ldr	r2, [r3, #4]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013142:	429a      	cmp	r2, r3
 8013144:	f43f af43 	beq.w	8012fce <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	8b5b      	ldrh	r3, [r3, #26]
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00e      	beq.n	8013172 <tcp_receive+0xbc2>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	8b5b      	ldrh	r3, [r3, #26]
 8013158:	f023 0301 	bic.w	r3, r3, #1
 801315c:	b29a      	uxth	r2, r3
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	835a      	strh	r2, [r3, #26]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	8b5b      	ldrh	r3, [r3, #26]
 8013166:	f043 0302 	orr.w	r3, r3, #2
 801316a:	b29a      	uxth	r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013170:	e187      	b.n	8013482 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	8b5b      	ldrh	r3, [r3, #26]
 8013176:	f043 0301 	orr.w	r3, r3, #1
 801317a:	b29a      	uxth	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013180:	e17f      	b.n	8013482 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013186:	2b00      	cmp	r3, #0
 8013188:	d106      	bne.n	8013198 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801318a:	4848      	ldr	r0, [pc, #288]	@ (80132ac <tcp_receive+0xcfc>)
 801318c:	f7fd faee 	bl	801076c <tcp_seg_copy>
 8013190:	4602      	mov	r2, r0
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	675a      	str	r2, [r3, #116]	@ 0x74
 8013196:	e16c      	b.n	8013472 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013198:	2300      	movs	r3, #0
 801319a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80131a2:	e156      	b.n	8013452 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80131a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	4b41      	ldr	r3, [pc, #260]	@ (80132b0 <tcp_receive+0xd00>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d11d      	bne.n	80131ee <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80131b2:	4b3e      	ldr	r3, [pc, #248]	@ (80132ac <tcp_receive+0xcfc>)
 80131b4:	891a      	ldrh	r2, [r3, #8]
 80131b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b8:	891b      	ldrh	r3, [r3, #8]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	f240 814e 	bls.w	801345c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80131c0:	483a      	ldr	r0, [pc, #232]	@ (80132ac <tcp_receive+0xcfc>)
 80131c2:	f7fd fad3 	bl	801076c <tcp_seg_copy>
 80131c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f000 8148 	beq.w	8013460 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80131d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d003      	beq.n	80131de <tcp_receive+0xc2e>
                    prev->next = cseg;
 80131d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131d8:	697a      	ldr	r2, [r7, #20]
 80131da:	601a      	str	r2, [r3, #0]
 80131dc:	e002      	b.n	80131e4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	697a      	ldr	r2, [r7, #20]
 80131e2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80131e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80131e6:	6978      	ldr	r0, [r7, #20]
 80131e8:	f7ff f8de 	bl	80123a8 <tcp_oos_insert_segment>
                }
                break;
 80131ec:	e138      	b.n	8013460 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80131ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d117      	bne.n	8013224 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80131f4:	4b2e      	ldr	r3, [pc, #184]	@ (80132b0 <tcp_receive+0xd00>)
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	1ad3      	subs	r3, r2, r3
 8013200:	2b00      	cmp	r3, #0
 8013202:	da57      	bge.n	80132b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013204:	4829      	ldr	r0, [pc, #164]	@ (80132ac <tcp_receive+0xcfc>)
 8013206:	f7fd fab1 	bl	801076c <tcp_seg_copy>
 801320a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	2b00      	cmp	r3, #0
 8013210:	f000 8128 	beq.w	8013464 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	69ba      	ldr	r2, [r7, #24]
 8013218:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801321a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801321c:	69b8      	ldr	r0, [r7, #24]
 801321e:	f7ff f8c3 	bl	80123a8 <tcp_oos_insert_segment>
                  }
                  break;
 8013222:	e11f      	b.n	8013464 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013224:	4b22      	ldr	r3, [pc, #136]	@ (80132b0 <tcp_receive+0xd00>)
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	3b01      	subs	r3, #1
 8013232:	2b00      	cmp	r3, #0
 8013234:	db3e      	blt.n	80132b4 <tcp_receive+0xd04>
 8013236:	4b1e      	ldr	r3, [pc, #120]	@ (80132b0 <tcp_receive+0xd00>)
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	3301      	adds	r3, #1
 8013244:	2b00      	cmp	r3, #0
 8013246:	dc35      	bgt.n	80132b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013248:	4818      	ldr	r0, [pc, #96]	@ (80132ac <tcp_receive+0xcfc>)
 801324a:	f7fd fa8f 	bl	801076c <tcp_seg_copy>
 801324e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f000 8108 	beq.w	8013468 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013260:	8912      	ldrh	r2, [r2, #8]
 8013262:	441a      	add	r2, r3
 8013264:	4b12      	ldr	r3, [pc, #72]	@ (80132b0 <tcp_receive+0xd00>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	1ad3      	subs	r3, r2, r3
 801326a:	2b00      	cmp	r3, #0
 801326c:	dd12      	ble.n	8013294 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801326e:	4b10      	ldr	r3, [pc, #64]	@ (80132b0 <tcp_receive+0xd00>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	b29a      	uxth	r2, r3
 8013274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	b29b      	uxth	r3, r3
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	b29a      	uxth	r2, r3
 8013280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013282:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013286:	685a      	ldr	r2, [r3, #4]
 8013288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801328a:	891b      	ldrh	r3, [r3, #8]
 801328c:	4619      	mov	r1, r3
 801328e:	4610      	mov	r0, r2
 8013290:	f7fb fc48 	bl	800eb24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013296:	69fa      	ldr	r2, [r7, #28]
 8013298:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801329a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801329c:	69f8      	ldr	r0, [r7, #28]
 801329e:	f7ff f883 	bl	80123a8 <tcp_oos_insert_segment>
                  }
                  break;
 80132a2:	e0e1      	b.n	8013468 <tcp_receive+0xeb8>
 80132a4:	2000e160 	.word	0x2000e160
 80132a8:	2000e15d 	.word	0x2000e15d
 80132ac:	2000e130 	.word	0x2000e130
 80132b0:	2000e150 	.word	0x2000e150
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80132b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132b6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80132b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f040 80c5 	bne.w	801344c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80132c2:	4b7f      	ldr	r3, [pc, #508]	@ (80134c0 <tcp_receive+0xf10>)
 80132c4:	681a      	ldr	r2, [r3, #0]
 80132c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	f340 80bc 	ble.w	801344c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80132d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	899b      	ldrh	r3, [r3, #12]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fa f9fb 	bl	800d6d8 <lwip_htons>
 80132e2:	4603      	mov	r3, r0
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	f003 0301 	and.w	r3, r3, #1
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	f040 80be 	bne.w	801346c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80132f0:	4874      	ldr	r0, [pc, #464]	@ (80134c4 <tcp_receive+0xf14>)
 80132f2:	f7fd fa3b 	bl	801076c <tcp_seg_copy>
 80132f6:	4602      	mov	r2, r0
 80132f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80132fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	f000 80b5 	beq.w	8013470 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801330e:	8912      	ldrh	r2, [r2, #8]
 8013310:	441a      	add	r2, r3
 8013312:	4b6b      	ldr	r3, [pc, #428]	@ (80134c0 <tcp_receive+0xf10>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	2b00      	cmp	r3, #0
 801331a:	dd12      	ble.n	8013342 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801331c:	4b68      	ldr	r3, [pc, #416]	@ (80134c0 <tcp_receive+0xf10>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	b29a      	uxth	r2, r3
 8013322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	b29b      	uxth	r3, r3
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	b29a      	uxth	r2, r3
 801332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013330:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013338:	891b      	ldrh	r3, [r3, #8]
 801333a:	4619      	mov	r1, r3
 801333c:	4610      	mov	r0, r2
 801333e:	f7fb fbf1 	bl	800eb24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013342:	4b61      	ldr	r3, [pc, #388]	@ (80134c8 <tcp_receive+0xf18>)
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	461a      	mov	r2, r3
 8013348:	4b5d      	ldr	r3, [pc, #372]	@ (80134c0 <tcp_receive+0xf10>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	441a      	add	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013352:	6879      	ldr	r1, [r7, #4]
 8013354:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013356:	440b      	add	r3, r1
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	2b00      	cmp	r3, #0
 801335c:	f340 8088 	ble.w	8013470 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	68db      	ldr	r3, [r3, #12]
 8013366:	899b      	ldrh	r3, [r3, #12]
 8013368:	b29b      	uxth	r3, r3
 801336a:	4618      	mov	r0, r3
 801336c:	f7fa f9b4 	bl	800d6d8 <lwip_htons>
 8013370:	4603      	mov	r3, r0
 8013372:	b2db      	uxtb	r3, r3
 8013374:	f003 0301 	and.w	r3, r3, #1
 8013378:	2b00      	cmp	r3, #0
 801337a:	d021      	beq.n	80133c0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	899b      	ldrh	r3, [r3, #12]
 8013384:	b29b      	uxth	r3, r3
 8013386:	b21b      	sxth	r3, r3
 8013388:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801338c:	b21c      	sxth	r4, r3
 801338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	899b      	ldrh	r3, [r3, #12]
 8013396:	b29b      	uxth	r3, r3
 8013398:	4618      	mov	r0, r3
 801339a:	f7fa f99d 	bl	800d6d8 <lwip_htons>
 801339e:	4603      	mov	r3, r0
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fa f995 	bl	800d6d8 <lwip_htons>
 80133ae:	4603      	mov	r3, r0
 80133b0:	b21b      	sxth	r3, r3
 80133b2:	4323      	orrs	r3, r4
 80133b4:	b21a      	sxth	r2, r3
 80133b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	b292      	uxth	r2, r2
 80133be:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133ca:	4413      	add	r3, r2
 80133cc:	b299      	uxth	r1, r3
 80133ce:	4b3c      	ldr	r3, [pc, #240]	@ (80134c0 <tcp_receive+0xf10>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	1a8a      	subs	r2, r1, r2
 80133da:	b292      	uxth	r2, r2
 80133dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80133de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	685a      	ldr	r2, [r3, #4]
 80133e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	891b      	ldrh	r3, [r3, #8]
 80133ea:	4619      	mov	r1, r3
 80133ec:	4610      	mov	r0, r2
 80133ee:	f7fb fb99 	bl	800eb24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80133f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	891c      	ldrh	r4, [r3, #8]
 80133f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68db      	ldr	r3, [r3, #12]
 80133fe:	899b      	ldrh	r3, [r3, #12]
 8013400:	b29b      	uxth	r3, r3
 8013402:	4618      	mov	r0, r3
 8013404:	f7fa f968 	bl	800d6d8 <lwip_htons>
 8013408:	4603      	mov	r3, r0
 801340a:	b2db      	uxtb	r3, r3
 801340c:	f003 0303 	and.w	r3, r3, #3
 8013410:	2b00      	cmp	r3, #0
 8013412:	d001      	beq.n	8013418 <tcp_receive+0xe68>
 8013414:	2301      	movs	r3, #1
 8013416:	e000      	b.n	801341a <tcp_receive+0xe6a>
 8013418:	2300      	movs	r3, #0
 801341a:	4423      	add	r3, r4
 801341c:	b29a      	uxth	r2, r3
 801341e:	4b2a      	ldr	r3, [pc, #168]	@ (80134c8 <tcp_receive+0xf18>)
 8013420:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013422:	4b29      	ldr	r3, [pc, #164]	@ (80134c8 <tcp_receive+0xf18>)
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	461a      	mov	r2, r3
 8013428:	4b25      	ldr	r3, [pc, #148]	@ (80134c0 <tcp_receive+0xf10>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	441a      	add	r2, r3
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013436:	440b      	add	r3, r1
 8013438:	429a      	cmp	r2, r3
 801343a:	d019      	beq.n	8013470 <tcp_receive+0xec0>
 801343c:	4b23      	ldr	r3, [pc, #140]	@ (80134cc <tcp_receive+0xf1c>)
 801343e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013442:	4923      	ldr	r1, [pc, #140]	@ (80134d0 <tcp_receive+0xf20>)
 8013444:	4823      	ldr	r0, [pc, #140]	@ (80134d4 <tcp_receive+0xf24>)
 8013446:	f005 fe3d 	bl	80190c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801344a:	e011      	b.n	8013470 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013454:	2b00      	cmp	r3, #0
 8013456:	f47f aea5 	bne.w	80131a4 <tcp_receive+0xbf4>
 801345a:	e00a      	b.n	8013472 <tcp_receive+0xec2>
                break;
 801345c:	bf00      	nop
 801345e:	e008      	b.n	8013472 <tcp_receive+0xec2>
                break;
 8013460:	bf00      	nop
 8013462:	e006      	b.n	8013472 <tcp_receive+0xec2>
                  break;
 8013464:	bf00      	nop
 8013466:	e004      	b.n	8013472 <tcp_receive+0xec2>
                  break;
 8013468:	bf00      	nop
 801346a:	e002      	b.n	8013472 <tcp_receive+0xec2>
                  break;
 801346c:	bf00      	nop
 801346e:	e000      	b.n	8013472 <tcp_receive+0xec2>
                break;
 8013470:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f001 fe88 	bl	8015188 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013478:	e003      	b.n	8013482 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f001 fe84 	bl	8015188 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013480:	e01a      	b.n	80134b8 <tcp_receive+0xf08>
 8013482:	e019      	b.n	80134b8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013484:	4b0e      	ldr	r3, [pc, #56]	@ (80134c0 <tcp_receive+0xf10>)
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801348c:	1ad3      	subs	r3, r2, r3
 801348e:	2b00      	cmp	r3, #0
 8013490:	db0a      	blt.n	80134a8 <tcp_receive+0xef8>
 8013492:	4b0b      	ldr	r3, [pc, #44]	@ (80134c0 <tcp_receive+0xf10>)
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801349a:	6879      	ldr	r1, [r7, #4]
 801349c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801349e:	440b      	add	r3, r1
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	3301      	adds	r3, #1
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	dd07      	ble.n	80134b8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	8b5b      	ldrh	r3, [r3, #26]
 80134ac:	f043 0302 	orr.w	r3, r3, #2
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80134b6:	e7ff      	b.n	80134b8 <tcp_receive+0xf08>
 80134b8:	bf00      	nop
 80134ba:	3750      	adds	r7, #80	@ 0x50
 80134bc:	46bd      	mov	sp, r7
 80134be:	bdb0      	pop	{r4, r5, r7, pc}
 80134c0:	2000e150 	.word	0x2000e150
 80134c4:	2000e130 	.word	0x2000e130
 80134c8:	2000e15a 	.word	0x2000e15a
 80134cc:	0801d34c 	.word	0x0801d34c
 80134d0:	0801d6f4 	.word	0x0801d6f4
 80134d4:	0801d398 	.word	0x0801d398

080134d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80134de:	4b15      	ldr	r3, [pc, #84]	@ (8013534 <tcp_get_next_optbyte+0x5c>)
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	1c5a      	adds	r2, r3, #1
 80134e4:	b291      	uxth	r1, r2
 80134e6:	4a13      	ldr	r2, [pc, #76]	@ (8013534 <tcp_get_next_optbyte+0x5c>)
 80134e8:	8011      	strh	r1, [r2, #0]
 80134ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80134ec:	4b12      	ldr	r3, [pc, #72]	@ (8013538 <tcp_get_next_optbyte+0x60>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d004      	beq.n	80134fe <tcp_get_next_optbyte+0x26>
 80134f4:	4b11      	ldr	r3, [pc, #68]	@ (801353c <tcp_get_next_optbyte+0x64>)
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	88fa      	ldrh	r2, [r7, #6]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d208      	bcs.n	8013510 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80134fe:	4b10      	ldr	r3, [pc, #64]	@ (8013540 <tcp_get_next_optbyte+0x68>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	3314      	adds	r3, #20
 8013504:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013506:	88fb      	ldrh	r3, [r7, #6]
 8013508:	683a      	ldr	r2, [r7, #0]
 801350a:	4413      	add	r3, r2
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	e00b      	b.n	8013528 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013510:	88fb      	ldrh	r3, [r7, #6]
 8013512:	b2da      	uxtb	r2, r3
 8013514:	4b09      	ldr	r3, [pc, #36]	@ (801353c <tcp_get_next_optbyte+0x64>)
 8013516:	881b      	ldrh	r3, [r3, #0]
 8013518:	b2db      	uxtb	r3, r3
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801351e:	4b06      	ldr	r3, [pc, #24]	@ (8013538 <tcp_get_next_optbyte+0x60>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	797b      	ldrb	r3, [r7, #5]
 8013524:	4413      	add	r3, r2
 8013526:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013528:	4618      	mov	r0, r3
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr
 8013534:	2000e14c 	.word	0x2000e14c
 8013538:	2000e148 	.word	0x2000e148
 801353c:	2000e146 	.word	0x2000e146
 8013540:	2000e140 	.word	0x2000e140

08013544 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d106      	bne.n	8013560 <tcp_parseopt+0x1c>
 8013552:	4b32      	ldr	r3, [pc, #200]	@ (801361c <tcp_parseopt+0xd8>)
 8013554:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013558:	4931      	ldr	r1, [pc, #196]	@ (8013620 <tcp_parseopt+0xdc>)
 801355a:	4832      	ldr	r0, [pc, #200]	@ (8013624 <tcp_parseopt+0xe0>)
 801355c:	f005 fdb2 	bl	80190c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013560:	4b31      	ldr	r3, [pc, #196]	@ (8013628 <tcp_parseopt+0xe4>)
 8013562:	881b      	ldrh	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d056      	beq.n	8013616 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013568:	4b30      	ldr	r3, [pc, #192]	@ (801362c <tcp_parseopt+0xe8>)
 801356a:	2200      	movs	r2, #0
 801356c:	801a      	strh	r2, [r3, #0]
 801356e:	e046      	b.n	80135fe <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013570:	f7ff ffb2 	bl	80134d8 <tcp_get_next_optbyte>
 8013574:	4603      	mov	r3, r0
 8013576:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013578:	7bfb      	ldrb	r3, [r7, #15]
 801357a:	2b02      	cmp	r3, #2
 801357c:	d006      	beq.n	801358c <tcp_parseopt+0x48>
 801357e:	2b02      	cmp	r3, #2
 8013580:	dc2a      	bgt.n	80135d8 <tcp_parseopt+0x94>
 8013582:	2b00      	cmp	r3, #0
 8013584:	d042      	beq.n	801360c <tcp_parseopt+0xc8>
 8013586:	2b01      	cmp	r3, #1
 8013588:	d038      	beq.n	80135fc <tcp_parseopt+0xb8>
 801358a:	e025      	b.n	80135d8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801358c:	f7ff ffa4 	bl	80134d8 <tcp_get_next_optbyte>
 8013590:	4603      	mov	r3, r0
 8013592:	2b04      	cmp	r3, #4
 8013594:	d13c      	bne.n	8013610 <tcp_parseopt+0xcc>
 8013596:	4b25      	ldr	r3, [pc, #148]	@ (801362c <tcp_parseopt+0xe8>)
 8013598:	881b      	ldrh	r3, [r3, #0]
 801359a:	3301      	adds	r3, #1
 801359c:	4a22      	ldr	r2, [pc, #136]	@ (8013628 <tcp_parseopt+0xe4>)
 801359e:	8812      	ldrh	r2, [r2, #0]
 80135a0:	4293      	cmp	r3, r2
 80135a2:	da35      	bge.n	8013610 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80135a4:	f7ff ff98 	bl	80134d8 <tcp_get_next_optbyte>
 80135a8:	4603      	mov	r3, r0
 80135aa:	021b      	lsls	r3, r3, #8
 80135ac:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80135ae:	f7ff ff93 	bl	80134d8 <tcp_get_next_optbyte>
 80135b2:	4603      	mov	r3, r0
 80135b4:	461a      	mov	r2, r3
 80135b6:	89bb      	ldrh	r3, [r7, #12]
 80135b8:	4313      	orrs	r3, r2
 80135ba:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80135bc:	89bb      	ldrh	r3, [r7, #12]
 80135be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80135c2:	d804      	bhi.n	80135ce <tcp_parseopt+0x8a>
 80135c4:	89bb      	ldrh	r3, [r7, #12]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d001      	beq.n	80135ce <tcp_parseopt+0x8a>
 80135ca:	89ba      	ldrh	r2, [r7, #12]
 80135cc:	e001      	b.n	80135d2 <tcp_parseopt+0x8e>
 80135ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80135d6:	e012      	b.n	80135fe <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80135d8:	f7ff ff7e 	bl	80134d8 <tcp_get_next_optbyte>
 80135dc:	4603      	mov	r3, r0
 80135de:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80135e0:	7afb      	ldrb	r3, [r7, #11]
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d916      	bls.n	8013614 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80135e6:	7afb      	ldrb	r3, [r7, #11]
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	4b10      	ldr	r3, [pc, #64]	@ (801362c <tcp_parseopt+0xe8>)
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	4413      	add	r3, r2
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	3b02      	subs	r3, #2
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	4b0d      	ldr	r3, [pc, #52]	@ (801362c <tcp_parseopt+0xe8>)
 80135f8:	801a      	strh	r2, [r3, #0]
 80135fa:	e000      	b.n	80135fe <tcp_parseopt+0xba>
          break;
 80135fc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80135fe:	4b0b      	ldr	r3, [pc, #44]	@ (801362c <tcp_parseopt+0xe8>)
 8013600:	881a      	ldrh	r2, [r3, #0]
 8013602:	4b09      	ldr	r3, [pc, #36]	@ (8013628 <tcp_parseopt+0xe4>)
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	429a      	cmp	r2, r3
 8013608:	d3b2      	bcc.n	8013570 <tcp_parseopt+0x2c>
 801360a:	e004      	b.n	8013616 <tcp_parseopt+0xd2>
          return;
 801360c:	bf00      	nop
 801360e:	e002      	b.n	8013616 <tcp_parseopt+0xd2>
            return;
 8013610:	bf00      	nop
 8013612:	e000      	b.n	8013616 <tcp_parseopt+0xd2>
            return;
 8013614:	bf00      	nop
      }
    }
  }
}
 8013616:	3710      	adds	r7, #16
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	0801d34c 	.word	0x0801d34c
 8013620:	0801d7b0 	.word	0x0801d7b0
 8013624:	0801d398 	.word	0x0801d398
 8013628:	2000e144 	.word	0x2000e144
 801362c:	2000e14c 	.word	0x2000e14c

08013630 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013630:	b480      	push	{r7}
 8013632:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013634:	4b05      	ldr	r3, [pc, #20]	@ (801364c <tcp_trigger_input_pcb_close+0x1c>)
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	f043 0310 	orr.w	r3, r3, #16
 801363c:	b2da      	uxtb	r2, r3
 801363e:	4b03      	ldr	r3, [pc, #12]	@ (801364c <tcp_trigger_input_pcb_close+0x1c>)
 8013640:	701a      	strb	r2, [r3, #0]
}
 8013642:	bf00      	nop
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr
 801364c:	2000e15d 	.word	0x2000e15d

08013650 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d00a      	beq.n	8013678 <tcp_route+0x28>
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	7a1b      	ldrb	r3, [r3, #8]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d006      	beq.n	8013678 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	7a1b      	ldrb	r3, [r3, #8]
 801366e:	4618      	mov	r0, r3
 8013670:	f7fb f850 	bl	800e714 <netif_get_by_index>
 8013674:	4603      	mov	r3, r0
 8013676:	e003      	b.n	8013680 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f003 fc49 	bl	8016f10 <ip4_route>
 801367e:	4603      	mov	r3, r0
  }
}
 8013680:	4618      	mov	r0, r3
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b087      	sub	sp, #28
 801368c:	af00      	add	r7, sp, #0
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	60b9      	str	r1, [r7, #8]
 8013692:	603b      	str	r3, [r7, #0]
 8013694:	4613      	mov	r3, r2
 8013696:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d105      	bne.n	80136aa <tcp_create_segment+0x22>
 801369e:	4b43      	ldr	r3, [pc, #268]	@ (80137ac <tcp_create_segment+0x124>)
 80136a0:	22a3      	movs	r2, #163	@ 0xa3
 80136a2:	4943      	ldr	r1, [pc, #268]	@ (80137b0 <tcp_create_segment+0x128>)
 80136a4:	4843      	ldr	r0, [pc, #268]	@ (80137b4 <tcp_create_segment+0x12c>)
 80136a6:	f005 fd0d 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d105      	bne.n	80136bc <tcp_create_segment+0x34>
 80136b0:	4b3e      	ldr	r3, [pc, #248]	@ (80137ac <tcp_create_segment+0x124>)
 80136b2:	22a4      	movs	r2, #164	@ 0xa4
 80136b4:	4940      	ldr	r1, [pc, #256]	@ (80137b8 <tcp_create_segment+0x130>)
 80136b6:	483f      	ldr	r0, [pc, #252]	@ (80137b4 <tcp_create_segment+0x12c>)
 80136b8:	f005 fd04 	bl	80190c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	f003 0304 	and.w	r3, r3, #4
 80136c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80136ca:	2003      	movs	r0, #3
 80136cc:	f7fa fcba 	bl	800e044 <memp_malloc>
 80136d0:	6138      	str	r0, [r7, #16]
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d104      	bne.n	80136e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80136d8:	68b8      	ldr	r0, [r7, #8]
 80136da:	f7fb fba9 	bl	800ee30 <pbuf_free>
    return NULL;
 80136de:	2300      	movs	r3, #0
 80136e0:	e060      	b.n	80137a4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80136e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	2200      	movs	r2, #0
 80136ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	68ba      	ldr	r2, [r7, #8]
 80136f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	891a      	ldrh	r2, [r3, #8]
 80136fa:	7dfb      	ldrb	r3, [r7, #23]
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	429a      	cmp	r2, r3
 8013700:	d205      	bcs.n	801370e <tcp_create_segment+0x86>
 8013702:	4b2a      	ldr	r3, [pc, #168]	@ (80137ac <tcp_create_segment+0x124>)
 8013704:	22b0      	movs	r2, #176	@ 0xb0
 8013706:	492d      	ldr	r1, [pc, #180]	@ (80137bc <tcp_create_segment+0x134>)
 8013708:	482a      	ldr	r0, [pc, #168]	@ (80137b4 <tcp_create_segment+0x12c>)
 801370a:	f005 fcdb 	bl	80190c4 <iprintf>
  seg->len = p->tot_len - optlen;
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	891a      	ldrh	r2, [r3, #8]
 8013712:	7dfb      	ldrb	r3, [r7, #23]
 8013714:	b29b      	uxth	r3, r3
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	b29a      	uxth	r2, r3
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801371e:	2114      	movs	r1, #20
 8013720:	68b8      	ldr	r0, [r7, #8]
 8013722:	f7fb faef 	bl	800ed04 <pbuf_add_header>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	d004      	beq.n	8013736 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801372c:	6938      	ldr	r0, [r7, #16]
 801372e:	f7fd f804 	bl	801073a <tcp_seg_free>
    return NULL;
 8013732:	2300      	movs	r3, #0
 8013734:	e036      	b.n	80137a4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	685a      	ldr	r2, [r3, #4]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	8ada      	ldrh	r2, [r3, #22]
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	68dc      	ldr	r4, [r3, #12]
 8013748:	4610      	mov	r0, r2
 801374a:	f7f9 ffc5 	bl	800d6d8 <lwip_htons>
 801374e:	4603      	mov	r3, r0
 8013750:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	8b1a      	ldrh	r2, [r3, #24]
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	68dc      	ldr	r4, [r3, #12]
 801375a:	4610      	mov	r0, r2
 801375c:	f7f9 ffbc 	bl	800d6d8 <lwip_htons>
 8013760:	4603      	mov	r3, r0
 8013762:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	68dc      	ldr	r4, [r3, #12]
 8013768:	6838      	ldr	r0, [r7, #0]
 801376a:	f7f9 ffca 	bl	800d702 <lwip_htonl>
 801376e:	4603      	mov	r3, r0
 8013770:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013772:	7dfb      	ldrb	r3, [r7, #23]
 8013774:	089b      	lsrs	r3, r3, #2
 8013776:	b2db      	uxtb	r3, r3
 8013778:	3305      	adds	r3, #5
 801377a:	b29b      	uxth	r3, r3
 801377c:	031b      	lsls	r3, r3, #12
 801377e:	b29a      	uxth	r2, r3
 8013780:	79fb      	ldrb	r3, [r7, #7]
 8013782:	b29b      	uxth	r3, r3
 8013784:	4313      	orrs	r3, r2
 8013786:	b29a      	uxth	r2, r3
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	68dc      	ldr	r4, [r3, #12]
 801378c:	4610      	mov	r0, r2
 801378e:	f7f9 ffa3 	bl	800d6d8 <lwip_htons>
 8013792:	4603      	mov	r3, r0
 8013794:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	2200      	movs	r2, #0
 801379c:	749a      	strb	r2, [r3, #18]
 801379e:	2200      	movs	r2, #0
 80137a0:	74da      	strb	r2, [r3, #19]
  return seg;
 80137a2:	693b      	ldr	r3, [r7, #16]
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	371c      	adds	r7, #28
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd90      	pop	{r4, r7, pc}
 80137ac:	0801d7cc 	.word	0x0801d7cc
 80137b0:	0801d800 	.word	0x0801d800
 80137b4:	0801d820 	.word	0x0801d820
 80137b8:	0801d848 	.word	0x0801d848
 80137bc:	0801d86c 	.word	0x0801d86c

080137c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	607b      	str	r3, [r7, #4]
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]
 80137cc:	460b      	mov	r3, r1
 80137ce:	81bb      	strh	r3, [r7, #12]
 80137d0:	4613      	mov	r3, r2
 80137d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80137d4:	89bb      	ldrh	r3, [r7, #12]
 80137d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d105      	bne.n	80137ea <tcp_pbuf_prealloc+0x2a>
 80137de:	4b30      	ldr	r3, [pc, #192]	@ (80138a0 <tcp_pbuf_prealloc+0xe0>)
 80137e0:	22e8      	movs	r2, #232	@ 0xe8
 80137e2:	4930      	ldr	r1, [pc, #192]	@ (80138a4 <tcp_pbuf_prealloc+0xe4>)
 80137e4:	4830      	ldr	r0, [pc, #192]	@ (80138a8 <tcp_pbuf_prealloc+0xe8>)
 80137e6:	f005 fc6d 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d105      	bne.n	80137fc <tcp_pbuf_prealloc+0x3c>
 80137f0:	4b2b      	ldr	r3, [pc, #172]	@ (80138a0 <tcp_pbuf_prealloc+0xe0>)
 80137f2:	22e9      	movs	r2, #233	@ 0xe9
 80137f4:	492d      	ldr	r1, [pc, #180]	@ (80138ac <tcp_pbuf_prealloc+0xec>)
 80137f6:	482c      	ldr	r0, [pc, #176]	@ (80138a8 <tcp_pbuf_prealloc+0xe8>)
 80137f8:	f005 fc64 	bl	80190c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80137fc:	89ba      	ldrh	r2, [r7, #12]
 80137fe:	897b      	ldrh	r3, [r7, #10]
 8013800:	429a      	cmp	r2, r3
 8013802:	d221      	bcs.n	8013848 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013808:	f003 0302 	and.w	r3, r3, #2
 801380c:	2b00      	cmp	r3, #0
 801380e:	d111      	bne.n	8013834 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013810:	6a3b      	ldr	r3, [r7, #32]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013818:	2b00      	cmp	r3, #0
 801381a:	d115      	bne.n	8013848 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801381c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013820:	2b00      	cmp	r3, #0
 8013822:	d007      	beq.n	8013834 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013824:	6a3b      	ldr	r3, [r7, #32]
 8013826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013828:	2b00      	cmp	r3, #0
 801382a:	d103      	bne.n	8013834 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801382c:	6a3b      	ldr	r3, [r7, #32]
 801382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013830:	2b00      	cmp	r3, #0
 8013832:	d009      	beq.n	8013848 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013834:	89bb      	ldrh	r3, [r7, #12]
 8013836:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801383a:	f023 0203 	bic.w	r2, r3, #3
 801383e:	897b      	ldrh	r3, [r7, #10]
 8013840:	4293      	cmp	r3, r2
 8013842:	bf28      	it	cs
 8013844:	4613      	movcs	r3, r2
 8013846:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013848:	8af9      	ldrh	r1, [r7, #22]
 801384a:	7bfb      	ldrb	r3, [r7, #15]
 801384c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013850:	4618      	mov	r0, r3
 8013852:	f7fb f809 	bl	800e868 <pbuf_alloc>
 8013856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801385e:	2300      	movs	r3, #0
 8013860:	e019      	b.n	8013896 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d006      	beq.n	8013878 <tcp_pbuf_prealloc+0xb8>
 801386a:	4b0d      	ldr	r3, [pc, #52]	@ (80138a0 <tcp_pbuf_prealloc+0xe0>)
 801386c:	f240 120b 	movw	r2, #267	@ 0x10b
 8013870:	490f      	ldr	r1, [pc, #60]	@ (80138b0 <tcp_pbuf_prealloc+0xf0>)
 8013872:	480d      	ldr	r0, [pc, #52]	@ (80138a8 <tcp_pbuf_prealloc+0xe8>)
 8013874:	f005 fc26 	bl	80190c4 <iprintf>
  *oversize = p->len - length;
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	895a      	ldrh	r2, [r3, #10]
 801387c:	89bb      	ldrh	r3, [r7, #12]
 801387e:	1ad3      	subs	r3, r2, r3
 8013880:	b29a      	uxth	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	89ba      	ldrh	r2, [r7, #12]
 801388a:	811a      	strh	r2, [r3, #8]
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	891a      	ldrh	r2, [r3, #8]
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	815a      	strh	r2, [r3, #10]
  return p;
 8013894:	693b      	ldr	r3, [r7, #16]
}
 8013896:	4618      	mov	r0, r3
 8013898:	3718      	adds	r7, #24
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	0801d7cc 	.word	0x0801d7cc
 80138a4:	0801d884 	.word	0x0801d884
 80138a8:	0801d820 	.word	0x0801d820
 80138ac:	0801d8a8 	.word	0x0801d8a8
 80138b0:	0801d8c8 	.word	0x0801d8c8

080138b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	460b      	mov	r3, r1
 80138be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d106      	bne.n	80138d4 <tcp_write_checks+0x20>
 80138c6:	4b33      	ldr	r3, [pc, #204]	@ (8013994 <tcp_write_checks+0xe0>)
 80138c8:	f240 1233 	movw	r2, #307	@ 0x133
 80138cc:	4932      	ldr	r1, [pc, #200]	@ (8013998 <tcp_write_checks+0xe4>)
 80138ce:	4833      	ldr	r0, [pc, #204]	@ (801399c <tcp_write_checks+0xe8>)
 80138d0:	f005 fbf8 	bl	80190c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	7d1b      	ldrb	r3, [r3, #20]
 80138d8:	2b04      	cmp	r3, #4
 80138da:	d00e      	beq.n	80138fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80138e0:	2b07      	cmp	r3, #7
 80138e2:	d00a      	beq.n	80138fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80138e8:	2b02      	cmp	r3, #2
 80138ea:	d006      	beq.n	80138fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80138f0:	2b03      	cmp	r3, #3
 80138f2:	d002      	beq.n	80138fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80138f4:	f06f 030a 	mvn.w	r3, #10
 80138f8:	e048      	b.n	801398c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80138fa:	887b      	ldrh	r3, [r7, #2]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d101      	bne.n	8013904 <tcp_write_checks+0x50>
    return ERR_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	e043      	b.n	801398c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801390a:	887a      	ldrh	r2, [r7, #2]
 801390c:	429a      	cmp	r2, r3
 801390e:	d909      	bls.n	8013924 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	8b5b      	ldrh	r3, [r3, #26]
 8013914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013918:	b29a      	uxth	r2, r3
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801391e:	f04f 33ff 	mov.w	r3, #4294967295
 8013922:	e033      	b.n	801398c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801392a:	2b08      	cmp	r3, #8
 801392c:	d909      	bls.n	8013942 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	8b5b      	ldrh	r3, [r3, #26]
 8013932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013936:	b29a      	uxth	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801393c:	f04f 33ff 	mov.w	r3, #4294967295
 8013940:	e024      	b.n	801398c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013948:	2b00      	cmp	r3, #0
 801394a:	d00f      	beq.n	801396c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013950:	2b00      	cmp	r3, #0
 8013952:	d11a      	bne.n	801398a <tcp_write_checks+0xd6>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013958:	2b00      	cmp	r3, #0
 801395a:	d116      	bne.n	801398a <tcp_write_checks+0xd6>
 801395c:	4b0d      	ldr	r3, [pc, #52]	@ (8013994 <tcp_write_checks+0xe0>)
 801395e:	f240 1255 	movw	r2, #341	@ 0x155
 8013962:	490f      	ldr	r1, [pc, #60]	@ (80139a0 <tcp_write_checks+0xec>)
 8013964:	480d      	ldr	r0, [pc, #52]	@ (801399c <tcp_write_checks+0xe8>)
 8013966:	f005 fbad 	bl	80190c4 <iprintf>
 801396a:	e00e      	b.n	801398a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013970:	2b00      	cmp	r3, #0
 8013972:	d103      	bne.n	801397c <tcp_write_checks+0xc8>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013978:	2b00      	cmp	r3, #0
 801397a:	d006      	beq.n	801398a <tcp_write_checks+0xd6>
 801397c:	4b05      	ldr	r3, [pc, #20]	@ (8013994 <tcp_write_checks+0xe0>)
 801397e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013982:	4908      	ldr	r1, [pc, #32]	@ (80139a4 <tcp_write_checks+0xf0>)
 8013984:	4805      	ldr	r0, [pc, #20]	@ (801399c <tcp_write_checks+0xe8>)
 8013986:	f005 fb9d 	bl	80190c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801398a:	2300      	movs	r3, #0
}
 801398c:	4618      	mov	r0, r3
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	0801d7cc 	.word	0x0801d7cc
 8013998:	0801d8dc 	.word	0x0801d8dc
 801399c:	0801d820 	.word	0x0801d820
 80139a0:	0801d8fc 	.word	0x0801d8fc
 80139a4:	0801d938 	.word	0x0801d938

080139a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80139a8:	b590      	push	{r4, r7, lr}
 80139aa:	b09b      	sub	sp, #108	@ 0x6c
 80139ac:	af04      	add	r7, sp, #16
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	4611      	mov	r1, r2
 80139b4:	461a      	mov	r2, r3
 80139b6:	460b      	mov	r3, r1
 80139b8:	80fb      	strh	r3, [r7, #6]
 80139ba:	4613      	mov	r3, r2
 80139bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80139be:	2300      	movs	r3, #0
 80139c0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80139c2:	2300      	movs	r3, #0
 80139c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80139c6:	2300      	movs	r3, #0
 80139c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139ca:	2300      	movs	r3, #0
 80139cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139ce:	2300      	movs	r3, #0
 80139d0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80139d2:	2300      	movs	r3, #0
 80139d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80139d8:	2300      	movs	r3, #0
 80139da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80139de:	2300      	movs	r3, #0
 80139e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80139e2:	2300      	movs	r3, #0
 80139e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d109      	bne.n	8013a04 <tcp_write+0x5c>
 80139f0:	4ba4      	ldr	r3, [pc, #656]	@ (8013c84 <tcp_write+0x2dc>)
 80139f2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80139f6:	49a4      	ldr	r1, [pc, #656]	@ (8013c88 <tcp_write+0x2e0>)
 80139f8:	48a4      	ldr	r0, [pc, #656]	@ (8013c8c <tcp_write+0x2e4>)
 80139fa:	f005 fb63 	bl	80190c4 <iprintf>
 80139fe:	f06f 030f 	mvn.w	r3, #15
 8013a02:	e32a      	b.n	801405a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013a0a:	085b      	lsrs	r3, r3, #1
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a12:	4293      	cmp	r3, r2
 8013a14:	bf28      	it	cs
 8013a16:	4613      	movcs	r3, r2
 8013a18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d102      	bne.n	8013a26 <tcp_write+0x7e>
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a24:	e000      	b.n	8013a28 <tcp_write+0x80>
 8013a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a28:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d109      	bne.n	8013a44 <tcp_write+0x9c>
 8013a30:	4b94      	ldr	r3, [pc, #592]	@ (8013c84 <tcp_write+0x2dc>)
 8013a32:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8013a36:	4996      	ldr	r1, [pc, #600]	@ (8013c90 <tcp_write+0x2e8>)
 8013a38:	4894      	ldr	r0, [pc, #592]	@ (8013c8c <tcp_write+0x2e4>)
 8013a3a:	f005 fb43 	bl	80190c4 <iprintf>
 8013a3e:	f06f 030f 	mvn.w	r3, #15
 8013a42:	e30a      	b.n	801405a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013a44:	88fb      	ldrh	r3, [r7, #6]
 8013a46:	4619      	mov	r1, r3
 8013a48:	68f8      	ldr	r0, [r7, #12]
 8013a4a:	f7ff ff33 	bl	80138b4 <tcp_write_checks>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8013a54:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d002      	beq.n	8013a62 <tcp_write+0xba>
    return err;
 8013a5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013a60:	e2fb      	b.n	801405a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a68:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f000 80f6 	beq.w	8013c68 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a82:	e002      	b.n	8013a8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d1f8      	bne.n	8013a84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a94:	7a9b      	ldrb	r3, [r3, #10]
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	f003 0304 	and.w	r3, r3, #4
 8013a9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013aa0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013aa4:	891b      	ldrh	r3, [r3, #8]
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	8c3b      	ldrh	r3, [r7, #32]
 8013aaa:	440b      	add	r3, r1
 8013aac:	429a      	cmp	r2, r3
 8013aae:	da06      	bge.n	8013abe <tcp_write+0x116>
 8013ab0:	4b74      	ldr	r3, [pc, #464]	@ (8013c84 <tcp_write+0x2dc>)
 8013ab2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013ab6:	4977      	ldr	r1, [pc, #476]	@ (8013c94 <tcp_write+0x2ec>)
 8013ab8:	4874      	ldr	r0, [pc, #464]	@ (8013c8c <tcp_write+0x2e4>)
 8013aba:	f005 fb03 	bl	80190c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ac0:	891a      	ldrh	r2, [r3, #8]
 8013ac2:	8c3b      	ldrh	r3, [r7, #32]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013aca:	1ad3      	subs	r3, r2, r3
 8013acc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013ad4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013ad6:	8a7b      	ldrh	r3, [r7, #18]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d026      	beq.n	8013b2a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013adc:	8a7b      	ldrh	r3, [r7, #18]
 8013ade:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d206      	bcs.n	8013af2 <tcp_write+0x14a>
 8013ae4:	4b67      	ldr	r3, [pc, #412]	@ (8013c84 <tcp_write+0x2dc>)
 8013ae6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8013aea:	496b      	ldr	r1, [pc, #428]	@ (8013c98 <tcp_write+0x2f0>)
 8013aec:	4867      	ldr	r0, [pc, #412]	@ (8013c8c <tcp_write+0x2e4>)
 8013aee:	f005 fae9 	bl	80190c4 <iprintf>
      seg = last_unsent;
 8013af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013af6:	8a7b      	ldrh	r3, [r7, #18]
 8013af8:	88fa      	ldrh	r2, [r7, #6]
 8013afa:	4293      	cmp	r3, r2
 8013afc:	bf28      	it	cs
 8013afe:	4613      	movcs	r3, r2
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013b04:	4293      	cmp	r3, r2
 8013b06:	bf28      	it	cs
 8013b08:	4613      	movcs	r3, r2
 8013b0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8013b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013b10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b12:	4413      	add	r3, r2
 8013b14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8013b18:	8a7a      	ldrh	r2, [r7, #18]
 8013b1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013b22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013b24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013b2a:	8a7b      	ldrh	r3, [r7, #18]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d00b      	beq.n	8013b48 <tcp_write+0x1a0>
 8013b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013b34:	88fb      	ldrh	r3, [r7, #6]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d006      	beq.n	8013b48 <tcp_write+0x1a0>
 8013b3a:	4b52      	ldr	r3, [pc, #328]	@ (8013c84 <tcp_write+0x2dc>)
 8013b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b40:	4956      	ldr	r1, [pc, #344]	@ (8013c9c <tcp_write+0x2f4>)
 8013b42:	4852      	ldr	r0, [pc, #328]	@ (8013c8c <tcp_write+0x2e4>)
 8013b44:	f005 fabe 	bl	80190c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013b4c:	88fb      	ldrh	r3, [r7, #6]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	f080 8167 	bcs.w	8013e22 <tcp_write+0x47a>
 8013b54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 8163 	beq.w	8013e22 <tcp_write+0x47a>
 8013b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b5e:	891b      	ldrh	r3, [r3, #8]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 815e 	beq.w	8013e22 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013b66:	88fa      	ldrh	r2, [r7, #6]
 8013b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013b6c:	1ad2      	subs	r2, r2, r3
 8013b6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013b70:	4293      	cmp	r3, r2
 8013b72:	bfa8      	it	ge
 8013b74:	4613      	movge	r3, r2
 8013b76:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013b7c:	797b      	ldrb	r3, [r7, #5]
 8013b7e:	f003 0301 	and.w	r3, r3, #1
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d027      	beq.n	8013bd6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013b86:	f107 0012 	add.w	r0, r7, #18
 8013b8a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013b8c:	8bf9      	ldrh	r1, [r7, #30]
 8013b8e:	2301      	movs	r3, #1
 8013b90:	9302      	str	r3, [sp, #8]
 8013b92:	797b      	ldrb	r3, [r7, #5]
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	9300      	str	r3, [sp, #0]
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	f7ff fe0f 	bl	80137c0 <tcp_pbuf_prealloc>
 8013ba2:	6578      	str	r0, [r7, #84]	@ 0x54
 8013ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 8225 	beq.w	8013ff6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bae:	6858      	ldr	r0, [r3, #4]
 8013bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013bb4:	68ba      	ldr	r2, [r7, #8]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	8bfa      	ldrh	r2, [r7, #30]
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f005 fd01 	bl	80195c2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013bc0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013bc2:	f7fb f9c3 	bl	800ef4c <pbuf_clen>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	461a      	mov	r2, r3
 8013bca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013bce:	4413      	add	r3, r2
 8013bd0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8013bd4:	e041      	b.n	8013c5a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bdc:	e002      	b.n	8013be4 <tcp_write+0x23c>
 8013bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1f8      	bne.n	8013bde <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bee:	7b1b      	ldrb	r3, [r3, #12]
 8013bf0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d115      	bne.n	8013c24 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bfe:	8952      	ldrh	r2, [r2, #10]
 8013c00:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013c02:	68ba      	ldr	r2, [r7, #8]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d10d      	bne.n	8013c24 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013c08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d006      	beq.n	8013c1e <tcp_write+0x276>
 8013c10:	4b1c      	ldr	r3, [pc, #112]	@ (8013c84 <tcp_write+0x2dc>)
 8013c12:	f240 2231 	movw	r2, #561	@ 0x231
 8013c16:	4922      	ldr	r1, [pc, #136]	@ (8013ca0 <tcp_write+0x2f8>)
 8013c18:	481c      	ldr	r0, [pc, #112]	@ (8013c8c <tcp_write+0x2e4>)
 8013c1a:	f005 fa53 	bl	80190c4 <iprintf>
          extendlen = seglen;
 8013c1e:	8bfb      	ldrh	r3, [r7, #30]
 8013c20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8013c22:	e01a      	b.n	8013c5a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013c24:	8bfb      	ldrh	r3, [r7, #30]
 8013c26:	2201      	movs	r2, #1
 8013c28:	4619      	mov	r1, r3
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	f7fa fe1c 	bl	800e868 <pbuf_alloc>
 8013c30:	6578      	str	r0, [r7, #84]	@ 0x54
 8013c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	f000 81e0 	beq.w	8013ffa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013c3e:	68ba      	ldr	r2, [r7, #8]
 8013c40:	441a      	add	r2, r3
 8013c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013c46:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013c48:	f7fb f980 	bl	800ef4c <pbuf_clen>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013c54:	4413      	add	r3, r2
 8013c56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013c5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013c5e:	8bfb      	ldrh	r3, [r7, #30]
 8013c60:	4413      	add	r3, r2
 8013c62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013c66:	e0dc      	b.n	8013e22 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f000 80d7 	beq.w	8013e22 <tcp_write+0x47a>
 8013c74:	4b03      	ldr	r3, [pc, #12]	@ (8013c84 <tcp_write+0x2dc>)
 8013c76:	f240 224a 	movw	r2, #586	@ 0x24a
 8013c7a:	490a      	ldr	r1, [pc, #40]	@ (8013ca4 <tcp_write+0x2fc>)
 8013c7c:	4803      	ldr	r0, [pc, #12]	@ (8013c8c <tcp_write+0x2e4>)
 8013c7e:	f005 fa21 	bl	80190c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013c82:	e0ce      	b.n	8013e22 <tcp_write+0x47a>
 8013c84:	0801d7cc 	.word	0x0801d7cc
 8013c88:	0801d96c 	.word	0x0801d96c
 8013c8c:	0801d820 	.word	0x0801d820
 8013c90:	0801d984 	.word	0x0801d984
 8013c94:	0801d9b8 	.word	0x0801d9b8
 8013c98:	0801d9d0 	.word	0x0801d9d0
 8013c9c:	0801d9f0 	.word	0x0801d9f0
 8013ca0:	0801da10 	.word	0x0801da10
 8013ca4:	0801da3c 	.word	0x0801da3c
    struct pbuf *p;
    u16_t left = len - pos;
 8013ca8:	88fa      	ldrh	r2, [r7, #6]
 8013caa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013cb2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013cbe:	8b7a      	ldrh	r2, [r7, #26]
 8013cc0:	8bbb      	ldrh	r3, [r7, #28]
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	bf28      	it	cs
 8013cc6:	4613      	movcs	r3, r2
 8013cc8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013cca:	797b      	ldrb	r3, [r7, #5]
 8013ccc:	f003 0301 	and.w	r3, r3, #1
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d036      	beq.n	8013d42 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	8b3b      	ldrh	r3, [r7, #24]
 8013cdc:	4413      	add	r3, r2
 8013cde:	b299      	uxth	r1, r3
 8013ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bf0c      	ite	eq
 8013ce6:	2301      	moveq	r3, #1
 8013ce8:	2300      	movne	r3, #0
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	f107 0012 	add.w	r0, r7, #18
 8013cf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013cf2:	9302      	str	r3, [sp, #8]
 8013cf4:	797b      	ldrb	r3, [r7, #5]
 8013cf6:	9301      	str	r3, [sp, #4]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2036      	movs	r0, #54	@ 0x36
 8013d00:	f7ff fd5e 	bl	80137c0 <tcp_pbuf_prealloc>
 8013d04:	6338      	str	r0, [r7, #48]	@ 0x30
 8013d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f000 8178 	beq.w	8013ffe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d10:	895b      	ldrh	r3, [r3, #10]
 8013d12:	8b3a      	ldrh	r2, [r7, #24]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d906      	bls.n	8013d26 <tcp_write+0x37e>
 8013d18:	4b8c      	ldr	r3, [pc, #560]	@ (8013f4c <tcp_write+0x5a4>)
 8013d1a:	f240 2266 	movw	r2, #614	@ 0x266
 8013d1e:	498c      	ldr	r1, [pc, #560]	@ (8013f50 <tcp_write+0x5a8>)
 8013d20:	488c      	ldr	r0, [pc, #560]	@ (8013f54 <tcp_write+0x5ac>)
 8013d22:	f005 f9cf 	bl	80190c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d28:	685a      	ldr	r2, [r3, #4]
 8013d2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013d2e:	18d0      	adds	r0, r2, r3
 8013d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	4413      	add	r3, r2
 8013d38:	8b3a      	ldrh	r2, [r7, #24]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	f005 fc41 	bl	80195c2 <memcpy>
 8013d40:	e02f      	b.n	8013da2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013d42:	8a7b      	ldrh	r3, [r7, #18]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d006      	beq.n	8013d56 <tcp_write+0x3ae>
 8013d48:	4b80      	ldr	r3, [pc, #512]	@ (8013f4c <tcp_write+0x5a4>)
 8013d4a:	f240 2271 	movw	r2, #625	@ 0x271
 8013d4e:	4982      	ldr	r1, [pc, #520]	@ (8013f58 <tcp_write+0x5b0>)
 8013d50:	4880      	ldr	r0, [pc, #512]	@ (8013f54 <tcp_write+0x5ac>)
 8013d52:	f005 f9b7 	bl	80190c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013d56:	8b3b      	ldrh	r3, [r7, #24]
 8013d58:	2201      	movs	r2, #1
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	2036      	movs	r0, #54	@ 0x36
 8013d5e:	f7fa fd83 	bl	800e868 <pbuf_alloc>
 8013d62:	6178      	str	r0, [r7, #20]
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f000 814b 	beq.w	8014002 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d70:	68ba      	ldr	r2, [r7, #8]
 8013d72:	441a      	add	r2, r3
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013d78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013d82:	4619      	mov	r1, r3
 8013d84:	2036      	movs	r0, #54	@ 0x36
 8013d86:	f7fa fd6f 	bl	800e868 <pbuf_alloc>
 8013d8a:	6338      	str	r0, [r7, #48]	@ 0x30
 8013d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d103      	bne.n	8013d9a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013d92:	6978      	ldr	r0, [r7, #20]
 8013d94:	f7fb f84c 	bl	800ee30 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013d98:	e136      	b.n	8014008 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013d9a:	6979      	ldr	r1, [r7, #20]
 8013d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d9e:	f7fb f915 	bl	800efcc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013da4:	f7fb f8d2 	bl	800ef4c <pbuf_clen>
 8013da8:	4603      	mov	r3, r0
 8013daa:	461a      	mov	r2, r3
 8013dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013db0:	4413      	add	r3, r2
 8013db2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013dba:	2b09      	cmp	r3, #9
 8013dbc:	d903      	bls.n	8013dc6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dc0:	f7fb f836 	bl	800ee30 <pbuf_free>
      goto memerr;
 8013dc4:	e120      	b.n	8014008 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013dca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013dce:	441a      	add	r2, r3
 8013dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dd4:	9300      	str	r3, [sp, #0]
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	2200      	movs	r2, #0
 8013dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7ff fc53 	bl	8013688 <tcp_create_segment>
 8013de2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	f000 810d 	beq.w	8014006 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d102      	bne.n	8013df8 <tcp_write+0x450>
      queue = seg;
 8013df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8013df6:	e00c      	b.n	8013e12 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d106      	bne.n	8013e0c <tcp_write+0x464>
 8013dfe:	4b53      	ldr	r3, [pc, #332]	@ (8013f4c <tcp_write+0x5a4>)
 8013e00:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013e04:	4955      	ldr	r1, [pc, #340]	@ (8013f5c <tcp_write+0x5b4>)
 8013e06:	4853      	ldr	r0, [pc, #332]	@ (8013f54 <tcp_write+0x5ac>)
 8013e08:	f005 f95c 	bl	80190c4 <iprintf>
      prev_seg->next = seg;
 8013e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e14:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013e16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e1a:	8b3b      	ldrh	r3, [r7, #24]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8013e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e26:	88fb      	ldrh	r3, [r7, #6]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	f4ff af3d 	bcc.w	8013ca8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013e2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d02c      	beq.n	8013e8e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013e3a:	e01e      	b.n	8013e7a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e3e:	891a      	ldrh	r2, [r3, #8]
 8013e40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013e42:	4413      	add	r3, r2
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d110      	bne.n	8013e74 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e58:	8952      	ldrh	r2, [r2, #10]
 8013e5a:	4413      	add	r3, r2
 8013e5c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013e5e:	68b9      	ldr	r1, [r7, #8]
 8013e60:	4618      	mov	r0, r3
 8013e62:	f005 fbae 	bl	80195c2 <memcpy>
        p->len += oversize_used;
 8013e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e68:	895a      	ldrh	r2, [r3, #10]
 8013e6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013e6c:	4413      	add	r3, r2
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1dd      	bne.n	8013e3c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e82:	891a      	ldrh	r2, [r3, #8]
 8013e84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013e86:	4413      	add	r3, r2
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013e8e:	8a7a      	ldrh	r2, [r7, #18]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d018      	beq.n	8013ece <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <tcp_write+0x508>
 8013ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8013f4c <tcp_write+0x5a4>)
 8013ea4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8013ea8:	492d      	ldr	r1, [pc, #180]	@ (8013f60 <tcp_write+0x5b8>)
 8013eaa:	482a      	ldr	r0, [pc, #168]	@ (8013f54 <tcp_write+0x5ac>)
 8013eac:	f005 f90a 	bl	80190c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fb f888 	bl	800efcc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ebe:	891a      	ldrh	r2, [r3, #8]
 8013ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ec2:	891b      	ldrh	r3, [r3, #8]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eca:	811a      	strh	r2, [r3, #8]
 8013ecc:	e037      	b.n	8013f3e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013ece:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d034      	beq.n	8013f3e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d003      	beq.n	8013ee2 <tcp_write+0x53a>
 8013eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d106      	bne.n	8013ef0 <tcp_write+0x548>
 8013ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8013f4c <tcp_write+0x5a4>)
 8013ee4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8013ee8:	491e      	ldr	r1, [pc, #120]	@ (8013f64 <tcp_write+0x5bc>)
 8013eea:	481a      	ldr	r0, [pc, #104]	@ (8013f54 <tcp_write+0x5ac>)
 8013eec:	f005 f8ea 	bl	80190c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ef6:	e009      	b.n	8013f0c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013efa:	891a      	ldrh	r2, [r3, #8]
 8013efc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013efe:	4413      	add	r3, r2
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f04:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1f1      	bne.n	8013ef8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f16:	891a      	ldrh	r2, [r3, #8]
 8013f18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f1a:	4413      	add	r3, r2
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f20:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f24:	895a      	ldrh	r2, [r3, #10]
 8013f26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f28:	4413      	add	r3, r2
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f2e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f32:	891a      	ldrh	r2, [r3, #8]
 8013f34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f36:	4413      	add	r3, r2
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f3c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d111      	bne.n	8013f68 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013f4a:	e010      	b.n	8013f6e <tcp_write+0x5c6>
 8013f4c:	0801d7cc 	.word	0x0801d7cc
 8013f50:	0801da6c 	.word	0x0801da6c
 8013f54:	0801d820 	.word	0x0801d820
 8013f58:	0801daac 	.word	0x0801daac
 8013f5c:	0801dabc 	.word	0x0801dabc
 8013f60:	0801dad0 	.word	0x0801dad0
 8013f64:	0801db08 	.word	0x0801db08
  } else {
    last_unsent->next = queue;
 8013f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f6c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013f72:	88fb      	ldrh	r3, [r7, #6]
 8013f74:	441a      	add	r2, r3
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013f80:	88fb      	ldrh	r3, [r7, #6]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013f92:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00e      	beq.n	8013fbe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d10a      	bne.n	8013fbe <tcp_write+0x616>
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d106      	bne.n	8013fbe <tcp_write+0x616>
 8013fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8014064 <tcp_write+0x6bc>)
 8013fb2:	f240 3212 	movw	r2, #786	@ 0x312
 8013fb6:	492c      	ldr	r1, [pc, #176]	@ (8014068 <tcp_write+0x6c0>)
 8013fb8:	482c      	ldr	r0, [pc, #176]	@ (801406c <tcp_write+0x6c4>)
 8013fba:	f005 f883 	bl	80190c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d016      	beq.n	8013ff2 <tcp_write+0x64a>
 8013fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d012      	beq.n	8013ff2 <tcp_write+0x64a>
 8013fcc:	797b      	ldrb	r3, [r7, #5]
 8013fce:	f003 0302 	and.w	r3, r3, #2
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d10d      	bne.n	8013ff2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	899b      	ldrh	r3, [r3, #12]
 8013fdc:	b29c      	uxth	r4, r3
 8013fde:	2008      	movs	r0, #8
 8013fe0:	f7f9 fb7a 	bl	800d6d8 <lwip_htons>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	4322      	orrs	r2, r4
 8013fee:	b292      	uxth	r2, r2
 8013ff0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	e031      	b.n	801405a <tcp_write+0x6b2>
          goto memerr;
 8013ff6:	bf00      	nop
 8013ff8:	e006      	b.n	8014008 <tcp_write+0x660>
            goto memerr;
 8013ffa:	bf00      	nop
 8013ffc:	e004      	b.n	8014008 <tcp_write+0x660>
        goto memerr;
 8013ffe:	bf00      	nop
 8014000:	e002      	b.n	8014008 <tcp_write+0x660>
        goto memerr;
 8014002:	bf00      	nop
 8014004:	e000      	b.n	8014008 <tcp_write+0x660>
      goto memerr;
 8014006:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	8b5b      	ldrh	r3, [r3, #26]
 801400c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014010:	b29a      	uxth	r2, r3
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014018:	2b00      	cmp	r3, #0
 801401a:	d002      	beq.n	8014022 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801401c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801401e:	f7fa ff07 	bl	800ee30 <pbuf_free>
  }
  if (queue != NULL) {
 8014022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014024:	2b00      	cmp	r3, #0
 8014026:	d002      	beq.n	801402e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014028:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801402a:	f7fc fb71 	bl	8010710 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00e      	beq.n	8014056 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801403c:	2b00      	cmp	r3, #0
 801403e:	d10a      	bne.n	8014056 <tcp_write+0x6ae>
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <tcp_write+0x6ae>
 8014048:	4b06      	ldr	r3, [pc, #24]	@ (8014064 <tcp_write+0x6bc>)
 801404a:	f240 3227 	movw	r2, #807	@ 0x327
 801404e:	4906      	ldr	r1, [pc, #24]	@ (8014068 <tcp_write+0x6c0>)
 8014050:	4806      	ldr	r0, [pc, #24]	@ (801406c <tcp_write+0x6c4>)
 8014052:	f005 f837 	bl	80190c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014056:	f04f 33ff 	mov.w	r3, #4294967295
}
 801405a:	4618      	mov	r0, r3
 801405c:	375c      	adds	r7, #92	@ 0x5c
 801405e:	46bd      	mov	sp, r7
 8014060:	bd90      	pop	{r4, r7, pc}
 8014062:	bf00      	nop
 8014064:	0801d7cc 	.word	0x0801d7cc
 8014068:	0801db40 	.word	0x0801db40
 801406c:	0801d820 	.word	0x0801d820

08014070 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b08b      	sub	sp, #44	@ 0x2c
 8014074:	af02      	add	r7, sp, #8
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	460b      	mov	r3, r1
 801407a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801407c:	2300      	movs	r3, #0
 801407e:	61fb      	str	r3, [r7, #28]
 8014080:	2300      	movs	r3, #0
 8014082:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014084:	2300      	movs	r3, #0
 8014086:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d106      	bne.n	801409c <tcp_split_unsent_seg+0x2c>
 801408e:	4b95      	ldr	r3, [pc, #596]	@ (80142e4 <tcp_split_unsent_seg+0x274>)
 8014090:	f240 324b 	movw	r2, #843	@ 0x34b
 8014094:	4994      	ldr	r1, [pc, #592]	@ (80142e8 <tcp_split_unsent_seg+0x278>)
 8014096:	4895      	ldr	r0, [pc, #596]	@ (80142ec <tcp_split_unsent_seg+0x27c>)
 8014098:	f005 f814 	bl	80190c4 <iprintf>

  useg = pcb->unsent;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d102      	bne.n	80140ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80140a8:	f04f 33ff 	mov.w	r3, #4294967295
 80140ac:	e116      	b.n	80142dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80140ae:	887b      	ldrh	r3, [r7, #2]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d109      	bne.n	80140c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80140b4:	4b8b      	ldr	r3, [pc, #556]	@ (80142e4 <tcp_split_unsent_seg+0x274>)
 80140b6:	f240 3253 	movw	r2, #851	@ 0x353
 80140ba:	498d      	ldr	r1, [pc, #564]	@ (80142f0 <tcp_split_unsent_seg+0x280>)
 80140bc:	488b      	ldr	r0, [pc, #556]	@ (80142ec <tcp_split_unsent_seg+0x27c>)
 80140be:	f005 f801 	bl	80190c4 <iprintf>
    return ERR_VAL;
 80140c2:	f06f 0305 	mvn.w	r3, #5
 80140c6:	e109      	b.n	80142dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	891b      	ldrh	r3, [r3, #8]
 80140cc:	887a      	ldrh	r2, [r7, #2]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d301      	bcc.n	80140d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80140d2:	2300      	movs	r3, #0
 80140d4:	e102      	b.n	80142dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80140da:	887a      	ldrh	r2, [r7, #2]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d906      	bls.n	80140ee <tcp_split_unsent_seg+0x7e>
 80140e0:	4b80      	ldr	r3, [pc, #512]	@ (80142e4 <tcp_split_unsent_seg+0x274>)
 80140e2:	f240 325b 	movw	r2, #859	@ 0x35b
 80140e6:	4983      	ldr	r1, [pc, #524]	@ (80142f4 <tcp_split_unsent_seg+0x284>)
 80140e8:	4880      	ldr	r0, [pc, #512]	@ (80142ec <tcp_split_unsent_seg+0x27c>)
 80140ea:	f004 ffeb 	bl	80190c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	891b      	ldrh	r3, [r3, #8]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <tcp_split_unsent_seg+0x94>
 80140f6:	4b7b      	ldr	r3, [pc, #492]	@ (80142e4 <tcp_split_unsent_seg+0x274>)
 80140f8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80140fc:	497e      	ldr	r1, [pc, #504]	@ (80142f8 <tcp_split_unsent_seg+0x288>)
 80140fe:	487b      	ldr	r0, [pc, #492]	@ (80142ec <tcp_split_unsent_seg+0x27c>)
 8014100:	f004 ffe0 	bl	80190c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	7a9b      	ldrb	r3, [r3, #10]
 8014108:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801410a:	7bfb      	ldrb	r3, [r7, #15]
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	b2db      	uxtb	r3, r3
 8014110:	f003 0304 	and.w	r3, r3, #4
 8014114:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	891a      	ldrh	r2, [r3, #8]
 801411a:	887b      	ldrh	r3, [r7, #2]
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014120:	7bbb      	ldrb	r3, [r7, #14]
 8014122:	b29a      	uxth	r2, r3
 8014124:	89bb      	ldrh	r3, [r7, #12]
 8014126:	4413      	add	r3, r2
 8014128:	b29b      	uxth	r3, r3
 801412a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801412e:	4619      	mov	r1, r3
 8014130:	2036      	movs	r0, #54	@ 0x36
 8014132:	f7fa fb99 	bl	800e868 <pbuf_alloc>
 8014136:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	2b00      	cmp	r3, #0
 801413c:	f000 80b7 	beq.w	80142ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	891a      	ldrh	r2, [r3, #8]
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	891b      	ldrh	r3, [r3, #8]
 801414a:	1ad3      	subs	r3, r2, r3
 801414c:	b29a      	uxth	r2, r3
 801414e:	887b      	ldrh	r3, [r7, #2]
 8014150:	4413      	add	r3, r2
 8014152:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	6858      	ldr	r0, [r3, #4]
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	685a      	ldr	r2, [r3, #4]
 801415c:	7bbb      	ldrb	r3, [r7, #14]
 801415e:	18d1      	adds	r1, r2, r3
 8014160:	897b      	ldrh	r3, [r7, #10]
 8014162:	89ba      	ldrh	r2, [r7, #12]
 8014164:	f7fb f85a 	bl	800f21c <pbuf_copy_partial>
 8014168:	4603      	mov	r3, r0
 801416a:	461a      	mov	r2, r3
 801416c:	89bb      	ldrh	r3, [r7, #12]
 801416e:	4293      	cmp	r3, r2
 8014170:	f040 809f 	bne.w	80142b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	899b      	ldrh	r3, [r3, #12]
 801417a:	b29b      	uxth	r3, r3
 801417c:	4618      	mov	r0, r3
 801417e:	f7f9 faab 	bl	800d6d8 <lwip_htons>
 8014182:	4603      	mov	r3, r0
 8014184:	b2db      	uxtb	r3, r3
 8014186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801418a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801418c:	2300      	movs	r3, #0
 801418e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014190:	7efb      	ldrb	r3, [r7, #27]
 8014192:	f003 0308 	and.w	r3, r3, #8
 8014196:	2b00      	cmp	r3, #0
 8014198:	d007      	beq.n	80141aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801419a:	7efb      	ldrb	r3, [r7, #27]
 801419c:	f023 0308 	bic.w	r3, r3, #8
 80141a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80141a2:	7ebb      	ldrb	r3, [r7, #26]
 80141a4:	f043 0308 	orr.w	r3, r3, #8
 80141a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80141aa:	7efb      	ldrb	r3, [r7, #27]
 80141ac:	f003 0301 	and.w	r3, r3, #1
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d007      	beq.n	80141c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80141b4:	7efb      	ldrb	r3, [r7, #27]
 80141b6:	f023 0301 	bic.w	r3, r3, #1
 80141ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80141bc:	7ebb      	ldrb	r3, [r7, #26]
 80141be:	f043 0301 	orr.w	r3, r3, #1
 80141c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7f9 fa99 	bl	800d702 <lwip_htonl>
 80141d0:	4602      	mov	r2, r0
 80141d2:	887b      	ldrh	r3, [r7, #2]
 80141d4:	18d1      	adds	r1, r2, r3
 80141d6:	7eba      	ldrb	r2, [r7, #26]
 80141d8:	7bfb      	ldrb	r3, [r7, #15]
 80141da:	9300      	str	r3, [sp, #0]
 80141dc:	460b      	mov	r3, r1
 80141de:	6939      	ldr	r1, [r7, #16]
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7ff fa51 	bl	8013688 <tcp_create_segment>
 80141e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d063      	beq.n	80142b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7fa feaa 	bl	800ef4c <pbuf_clen>
 80141f8:	4603      	mov	r3, r0
 80141fa:	461a      	mov	r2, r3
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014202:	1a9b      	subs	r3, r3, r2
 8014204:	b29a      	uxth	r2, r3
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	6858      	ldr	r0, [r3, #4]
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	891a      	ldrh	r2, [r3, #8]
 8014216:	89bb      	ldrh	r3, [r7, #12]
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	b29b      	uxth	r3, r3
 801421c:	4619      	mov	r1, r3
 801421e:	f7fa fc81 	bl	800eb24 <pbuf_realloc>
  useg->len -= remainder;
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	891a      	ldrh	r2, [r3, #8]
 8014226:	89bb      	ldrh	r3, [r7, #12]
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	b29a      	uxth	r2, r3
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	899b      	ldrh	r3, [r3, #12]
 8014236:	b29c      	uxth	r4, r3
 8014238:	7efb      	ldrb	r3, [r7, #27]
 801423a:	b29b      	uxth	r3, r3
 801423c:	4618      	mov	r0, r3
 801423e:	f7f9 fa4b 	bl	800d6d8 <lwip_htons>
 8014242:	4603      	mov	r3, r0
 8014244:	461a      	mov	r2, r3
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	4322      	orrs	r2, r4
 801424c:	b292      	uxth	r2, r2
 801424e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	4618      	mov	r0, r3
 8014256:	f7fa fe79 	bl	800ef4c <pbuf_clen>
 801425a:	4603      	mov	r3, r0
 801425c:	461a      	mov	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014264:	4413      	add	r3, r2
 8014266:	b29a      	uxth	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	4618      	mov	r0, r3
 8014274:	f7fa fe6a 	bl	800ef4c <pbuf_clen>
 8014278:	4603      	mov	r3, r0
 801427a:	461a      	mov	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014282:	4413      	add	r3, r2
 8014284:	b29a      	uxth	r2, r3
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	69fa      	ldr	r2, [r7, #28]
 8014298:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d103      	bne.n	80142aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2200      	movs	r2, #0
 80142a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e016      	b.n	80142dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80142ae:	bf00      	nop
 80142b0:	e002      	b.n	80142b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80142b2:	bf00      	nop
 80142b4:	e000      	b.n	80142b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80142b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d006      	beq.n	80142cc <tcp_split_unsent_seg+0x25c>
 80142be:	4b09      	ldr	r3, [pc, #36]	@ (80142e4 <tcp_split_unsent_seg+0x274>)
 80142c0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80142c4:	490d      	ldr	r1, [pc, #52]	@ (80142fc <tcp_split_unsent_seg+0x28c>)
 80142c6:	4809      	ldr	r0, [pc, #36]	@ (80142ec <tcp_split_unsent_seg+0x27c>)
 80142c8:	f004 fefc 	bl	80190c4 <iprintf>
  if (p != NULL) {
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80142d2:	6938      	ldr	r0, [r7, #16]
 80142d4:	f7fa fdac 	bl	800ee30 <pbuf_free>
  }

  return ERR_MEM;
 80142d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3724      	adds	r7, #36	@ 0x24
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd90      	pop	{r4, r7, pc}
 80142e4:	0801d7cc 	.word	0x0801d7cc
 80142e8:	0801db60 	.word	0x0801db60
 80142ec:	0801d820 	.word	0x0801d820
 80142f0:	0801db84 	.word	0x0801db84
 80142f4:	0801dba8 	.word	0x0801dba8
 80142f8:	0801dbb8 	.word	0x0801dbb8
 80142fc:	0801dbc8 	.word	0x0801dbc8

08014300 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014300:	b590      	push	{r4, r7, lr}
 8014302:	b085      	sub	sp, #20
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d106      	bne.n	801431c <tcp_send_fin+0x1c>
 801430e:	4b21      	ldr	r3, [pc, #132]	@ (8014394 <tcp_send_fin+0x94>)
 8014310:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014314:	4920      	ldr	r1, [pc, #128]	@ (8014398 <tcp_send_fin+0x98>)
 8014316:	4821      	ldr	r0, [pc, #132]	@ (801439c <tcp_send_fin+0x9c>)
 8014318:	f004 fed4 	bl	80190c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014320:	2b00      	cmp	r3, #0
 8014322:	d02e      	beq.n	8014382 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014328:	60fb      	str	r3, [r7, #12]
 801432a:	e002      	b.n	8014332 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d1f8      	bne.n	801432c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	899b      	ldrh	r3, [r3, #12]
 8014340:	b29b      	uxth	r3, r3
 8014342:	4618      	mov	r0, r3
 8014344:	f7f9 f9c8 	bl	800d6d8 <lwip_htons>
 8014348:	4603      	mov	r3, r0
 801434a:	b2db      	uxtb	r3, r3
 801434c:	f003 0307 	and.w	r3, r3, #7
 8014350:	2b00      	cmp	r3, #0
 8014352:	d116      	bne.n	8014382 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	899b      	ldrh	r3, [r3, #12]
 801435a:	b29c      	uxth	r4, r3
 801435c:	2001      	movs	r0, #1
 801435e:	f7f9 f9bb 	bl	800d6d8 <lwip_htons>
 8014362:	4603      	mov	r3, r0
 8014364:	461a      	mov	r2, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	4322      	orrs	r2, r4
 801436c:	b292      	uxth	r2, r2
 801436e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	8b5b      	ldrh	r3, [r3, #26]
 8014374:	f043 0320 	orr.w	r3, r3, #32
 8014378:	b29a      	uxth	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	e004      	b.n	801438c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014382:	2101      	movs	r1, #1
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f000 f80b 	bl	80143a0 <tcp_enqueue_flags>
 801438a:	4603      	mov	r3, r0
}
 801438c:	4618      	mov	r0, r3
 801438e:	3714      	adds	r7, #20
 8014390:	46bd      	mov	sp, r7
 8014392:	bd90      	pop	{r4, r7, pc}
 8014394:	0801d7cc 	.word	0x0801d7cc
 8014398:	0801dbd4 	.word	0x0801dbd4
 801439c:	0801d820 	.word	0x0801d820

080143a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08a      	sub	sp, #40	@ 0x28
 80143a4:	af02      	add	r7, sp, #8
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	460b      	mov	r3, r1
 80143aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80143ac:	2300      	movs	r3, #0
 80143ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80143b0:	2300      	movs	r3, #0
 80143b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80143b4:	78fb      	ldrb	r3, [r7, #3]
 80143b6:	f003 0303 	and.w	r3, r3, #3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d106      	bne.n	80143cc <tcp_enqueue_flags+0x2c>
 80143be:	4b67      	ldr	r3, [pc, #412]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 80143c0:	f240 4211 	movw	r2, #1041	@ 0x411
 80143c4:	4966      	ldr	r1, [pc, #408]	@ (8014560 <tcp_enqueue_flags+0x1c0>)
 80143c6:	4867      	ldr	r0, [pc, #412]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 80143c8:	f004 fe7c 	bl	80190c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <tcp_enqueue_flags+0x40>
 80143d2:	4b62      	ldr	r3, [pc, #392]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 80143d4:	f240 4213 	movw	r2, #1043	@ 0x413
 80143d8:	4963      	ldr	r1, [pc, #396]	@ (8014568 <tcp_enqueue_flags+0x1c8>)
 80143da:	4862      	ldr	r0, [pc, #392]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 80143dc:	f004 fe72 	bl	80190c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80143e0:	78fb      	ldrb	r3, [r7, #3]
 80143e2:	f003 0302 	and.w	r3, r3, #2
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d001      	beq.n	80143ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80143ea:	2301      	movs	r3, #1
 80143ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80143ee:	7ffb      	ldrb	r3, [r7, #31]
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	b2db      	uxtb	r3, r3
 80143f4:	f003 0304 	and.w	r3, r3, #4
 80143f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80143fa:	7dfb      	ldrb	r3, [r7, #23]
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014402:	4619      	mov	r1, r3
 8014404:	2036      	movs	r0, #54	@ 0x36
 8014406:	f7fa fa2f 	bl	800e868 <pbuf_alloc>
 801440a:	6138      	str	r0, [r7, #16]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d109      	bne.n	8014426 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	8b5b      	ldrh	r3, [r3, #26]
 8014416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801441a:	b29a      	uxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014420:	f04f 33ff 	mov.w	r3, #4294967295
 8014424:	e095      	b.n	8014552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	895a      	ldrh	r2, [r3, #10]
 801442a:	7dfb      	ldrb	r3, [r7, #23]
 801442c:	b29b      	uxth	r3, r3
 801442e:	429a      	cmp	r2, r3
 8014430:	d206      	bcs.n	8014440 <tcp_enqueue_flags+0xa0>
 8014432:	4b4a      	ldr	r3, [pc, #296]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 8014434:	f240 4239 	movw	r2, #1081	@ 0x439
 8014438:	494c      	ldr	r1, [pc, #304]	@ (801456c <tcp_enqueue_flags+0x1cc>)
 801443a:	484a      	ldr	r0, [pc, #296]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 801443c:	f004 fe42 	bl	80190c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014444:	78fa      	ldrb	r2, [r7, #3]
 8014446:	7ffb      	ldrb	r3, [r7, #31]
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	460b      	mov	r3, r1
 801444c:	6939      	ldr	r1, [r7, #16]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7ff f91a 	bl	8013688 <tcp_create_segment>
 8014454:	60f8      	str	r0, [r7, #12]
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d109      	bne.n	8014470 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	8b5b      	ldrh	r3, [r3, #26]
 8014460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014464:	b29a      	uxth	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801446a:	f04f 33ff 	mov.w	r3, #4294967295
 801446e:	e070      	b.n	8014552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	f003 0303 	and.w	r3, r3, #3
 8014478:	2b00      	cmp	r3, #0
 801447a:	d006      	beq.n	801448a <tcp_enqueue_flags+0xea>
 801447c:	4b37      	ldr	r3, [pc, #220]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 801447e:	f240 4242 	movw	r2, #1090	@ 0x442
 8014482:	493b      	ldr	r1, [pc, #236]	@ (8014570 <tcp_enqueue_flags+0x1d0>)
 8014484:	4837      	ldr	r0, [pc, #220]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 8014486:	f004 fe1d 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	891b      	ldrh	r3, [r3, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d006      	beq.n	80144a0 <tcp_enqueue_flags+0x100>
 8014492:	4b32      	ldr	r3, [pc, #200]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 8014494:	f240 4243 	movw	r2, #1091	@ 0x443
 8014498:	4936      	ldr	r1, [pc, #216]	@ (8014574 <tcp_enqueue_flags+0x1d4>)
 801449a:	4832      	ldr	r0, [pc, #200]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 801449c:	f004 fe12 	bl	80190c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d103      	bne.n	80144b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	68fa      	ldr	r2, [r7, #12]
 80144ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80144ae:	e00d      	b.n	80144cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144b4:	61bb      	str	r3, [r7, #24]
 80144b6:	e002      	b.n	80144be <tcp_enqueue_flags+0x11e>
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	61bb      	str	r3, [r7, #24]
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d1f8      	bne.n	80144b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	68fa      	ldr	r2, [r7, #12]
 80144ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2200      	movs	r2, #0
 80144d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80144d4:	78fb      	ldrb	r3, [r7, #3]
 80144d6:	f003 0302 	and.w	r3, r3, #2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d104      	bne.n	80144e8 <tcp_enqueue_flags+0x148>
 80144de:	78fb      	ldrb	r3, [r7, #3]
 80144e0:	f003 0301 	and.w	r3, r3, #1
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d004      	beq.n	80144f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80144ec:	1c5a      	adds	r2, r3, #1
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80144f2:	78fb      	ldrb	r3, [r7, #3]
 80144f4:	f003 0301 	and.w	r3, r3, #1
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d006      	beq.n	801450a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	8b5b      	ldrh	r3, [r3, #26]
 8014500:	f043 0320 	orr.w	r3, r3, #32
 8014504:	b29a      	uxth	r2, r3
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	4618      	mov	r0, r3
 8014510:	f7fa fd1c 	bl	800ef4c <pbuf_clen>
 8014514:	4603      	mov	r3, r0
 8014516:	461a      	mov	r2, r3
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801451e:	4413      	add	r3, r2
 8014520:	b29a      	uxth	r2, r3
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801452e:	2b00      	cmp	r3, #0
 8014530:	d00e      	beq.n	8014550 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014536:	2b00      	cmp	r3, #0
 8014538:	d10a      	bne.n	8014550 <tcp_enqueue_flags+0x1b0>
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <tcp_enqueue_flags+0x1b0>
 8014542:	4b06      	ldr	r3, [pc, #24]	@ (801455c <tcp_enqueue_flags+0x1bc>)
 8014544:	f240 4265 	movw	r2, #1125	@ 0x465
 8014548:	490b      	ldr	r1, [pc, #44]	@ (8014578 <tcp_enqueue_flags+0x1d8>)
 801454a:	4806      	ldr	r0, [pc, #24]	@ (8014564 <tcp_enqueue_flags+0x1c4>)
 801454c:	f004 fdba 	bl	80190c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014550:	2300      	movs	r3, #0
}
 8014552:	4618      	mov	r0, r3
 8014554:	3720      	adds	r7, #32
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	0801d7cc 	.word	0x0801d7cc
 8014560:	0801dbf0 	.word	0x0801dbf0
 8014564:	0801d820 	.word	0x0801d820
 8014568:	0801dc48 	.word	0x0801dc48
 801456c:	0801dc68 	.word	0x0801dc68
 8014570:	0801dca4 	.word	0x0801dca4
 8014574:	0801dcbc 	.word	0x0801dcbc
 8014578:	0801dce8 	.word	0x0801dce8

0801457c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801457c:	b5b0      	push	{r4, r5, r7, lr}
 801457e:	b08a      	sub	sp, #40	@ 0x28
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <tcp_output+0x1c>
 801458a:	4b8a      	ldr	r3, [pc, #552]	@ (80147b4 <tcp_output+0x238>)
 801458c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014590:	4989      	ldr	r1, [pc, #548]	@ (80147b8 <tcp_output+0x23c>)
 8014592:	488a      	ldr	r0, [pc, #552]	@ (80147bc <tcp_output+0x240>)
 8014594:	f004 fd96 	bl	80190c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	7d1b      	ldrb	r3, [r3, #20]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d106      	bne.n	80145ae <tcp_output+0x32>
 80145a0:	4b84      	ldr	r3, [pc, #528]	@ (80147b4 <tcp_output+0x238>)
 80145a2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80145a6:	4986      	ldr	r1, [pc, #536]	@ (80147c0 <tcp_output+0x244>)
 80145a8:	4884      	ldr	r0, [pc, #528]	@ (80147bc <tcp_output+0x240>)
 80145aa:	f004 fd8b 	bl	80190c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80145ae:	4b85      	ldr	r3, [pc, #532]	@ (80147c4 <tcp_output+0x248>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	687a      	ldr	r2, [r7, #4]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d101      	bne.n	80145bc <tcp_output+0x40>
    return ERR_OK;
 80145b8:	2300      	movs	r3, #0
 80145ba:	e1ce      	b.n	801495a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80145c8:	4293      	cmp	r3, r2
 80145ca:	bf28      	it	cs
 80145cc:	4613      	movcs	r3, r2
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80145d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10b      	bne.n	80145f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	8b5b      	ldrh	r3, [r3, #26]
 80145e2:	f003 0302 	and.w	r3, r3, #2
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f000 81aa 	beq.w	8014940 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f000 fdcb 	bl	8015188 <tcp_send_empty_ack>
 80145f2:	4603      	mov	r3, r0
 80145f4:	e1b1      	b.n	801495a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80145f6:	6879      	ldr	r1, [r7, #4]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3304      	adds	r3, #4
 80145fc:	461a      	mov	r2, r3
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7ff f826 	bl	8013650 <tcp_route>
 8014604:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d102      	bne.n	8014612 <tcp_output+0x96>
    return ERR_RTE;
 801460c:	f06f 0303 	mvn.w	r3, #3
 8014610:	e1a3      	b.n	801495a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d003      	beq.n	8014620 <tcp_output+0xa4>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d111      	bne.n	8014644 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d002      	beq.n	801462c <tcp_output+0xb0>
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	3304      	adds	r3, #4
 801462a:	e000      	b.n	801462e <tcp_output+0xb2>
 801462c:	2300      	movs	r3, #0
 801462e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d102      	bne.n	801463c <tcp_output+0xc0>
      return ERR_RTE;
 8014636:	f06f 0303 	mvn.w	r3, #3
 801463a:	e18e      	b.n	801495a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	685b      	ldr	r3, [r3, #4]
 801464a:	4618      	mov	r0, r3
 801464c:	f7f9 f859 	bl	800d702 <lwip_htonl>
 8014650:	4602      	mov	r2, r0
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014656:	1ad3      	subs	r3, r2, r3
 8014658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801465a:	8912      	ldrh	r2, [r2, #8]
 801465c:	4413      	add	r3, r2
 801465e:	69ba      	ldr	r2, [r7, #24]
 8014660:	429a      	cmp	r2, r3
 8014662:	d227      	bcs.n	80146b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801466a:	461a      	mov	r2, r3
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	4293      	cmp	r3, r2
 8014670:	d114      	bne.n	801469c <tcp_output+0x120>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014676:	2b00      	cmp	r3, #0
 8014678:	d110      	bne.n	801469c <tcp_output+0x120>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014680:	2b00      	cmp	r3, #0
 8014682:	d10b      	bne.n	801469c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2200      	movs	r2, #0
 8014688:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2201      	movs	r2, #1
 8014690:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	8b5b      	ldrh	r3, [r3, #26]
 80146a0:	f003 0302 	and.w	r3, r3, #2
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f000 814d 	beq.w	8014944 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f000 fd6c 	bl	8015188 <tcp_send_empty_ack>
 80146b0:	4603      	mov	r3, r0
 80146b2:	e152      	b.n	801495a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2200      	movs	r2, #0
 80146b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80146c2:	6a3b      	ldr	r3, [r7, #32]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	f000 811c 	beq.w	8014902 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80146ca:	e002      	b.n	80146d2 <tcp_output+0x156>
 80146cc:	6a3b      	ldr	r3, [r7, #32]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	623b      	str	r3, [r7, #32]
 80146d2:	6a3b      	ldr	r3, [r7, #32]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d1f8      	bne.n	80146cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80146da:	e112      	b.n	8014902 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80146dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	899b      	ldrh	r3, [r3, #12]
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f8 fff7 	bl	800d6d8 <lwip_htons>
 80146ea:	4603      	mov	r3, r0
 80146ec:	b2db      	uxtb	r3, r3
 80146ee:	f003 0304 	and.w	r3, r3, #4
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d006      	beq.n	8014704 <tcp_output+0x188>
 80146f6:	4b2f      	ldr	r3, [pc, #188]	@ (80147b4 <tcp_output+0x238>)
 80146f8:	f240 5236 	movw	r2, #1334	@ 0x536
 80146fc:	4932      	ldr	r1, [pc, #200]	@ (80147c8 <tcp_output+0x24c>)
 80146fe:	482f      	ldr	r0, [pc, #188]	@ (80147bc <tcp_output+0x240>)
 8014700:	f004 fce0 	bl	80190c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014708:	2b00      	cmp	r3, #0
 801470a:	d01f      	beq.n	801474c <tcp_output+0x1d0>
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	8b5b      	ldrh	r3, [r3, #26]
 8014710:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014714:	2b00      	cmp	r3, #0
 8014716:	d119      	bne.n	801474c <tcp_output+0x1d0>
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801471c:	2b00      	cmp	r3, #0
 801471e:	d00b      	beq.n	8014738 <tcp_output+0x1bc>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d110      	bne.n	801474c <tcp_output+0x1d0>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801472e:	891a      	ldrh	r2, [r3, #8]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014734:	429a      	cmp	r2, r3
 8014736:	d209      	bcs.n	801474c <tcp_output+0x1d0>
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801473e:	2b00      	cmp	r3, #0
 8014740:	d004      	beq.n	801474c <tcp_output+0x1d0>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014748:	2b08      	cmp	r3, #8
 801474a:	d901      	bls.n	8014750 <tcp_output+0x1d4>
 801474c:	2301      	movs	r3, #1
 801474e:	e000      	b.n	8014752 <tcp_output+0x1d6>
 8014750:	2300      	movs	r3, #0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d106      	bne.n	8014764 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	8b5b      	ldrh	r3, [r3, #26]
 801475a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 80e4 	beq.w	801492c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	7d1b      	ldrb	r3, [r3, #20]
 8014768:	2b02      	cmp	r3, #2
 801476a:	d00d      	beq.n	8014788 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	899b      	ldrh	r3, [r3, #12]
 8014772:	b29c      	uxth	r4, r3
 8014774:	2010      	movs	r0, #16
 8014776:	f7f8 ffaf 	bl	800d6d8 <lwip_htons>
 801477a:	4603      	mov	r3, r0
 801477c:	461a      	mov	r2, r3
 801477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	4322      	orrs	r2, r4
 8014784:	b292      	uxth	r2, r2
 8014786:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014788:	697a      	ldr	r2, [r7, #20]
 801478a:	6879      	ldr	r1, [r7, #4]
 801478c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801478e:	f000 f909 	bl	80149a4 <tcp_output_segment>
 8014792:	4603      	mov	r3, r0
 8014794:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d016      	beq.n	80147cc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	8b5b      	ldrh	r3, [r3, #26]
 80147a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147a6:	b29a      	uxth	r2, r3
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	835a      	strh	r2, [r3, #26]
      return err;
 80147ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147b0:	e0d3      	b.n	801495a <tcp_output+0x3de>
 80147b2:	bf00      	nop
 80147b4:	0801d7cc 	.word	0x0801d7cc
 80147b8:	0801dd10 	.word	0x0801dd10
 80147bc:	0801d820 	.word	0x0801d820
 80147c0:	0801dd28 	.word	0x0801dd28
 80147c4:	2000e164 	.word	0x2000e164
 80147c8:	0801dd50 	.word	0x0801dd50
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80147cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ce:	681a      	ldr	r2, [r3, #0]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	7d1b      	ldrb	r3, [r3, #20]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d006      	beq.n	80147ea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8b5b      	ldrh	r3, [r3, #26]
 80147e0:	f023 0303 	bic.w	r3, r3, #3
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80147ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7f8 ff86 	bl	800d702 <lwip_htonl>
 80147f6:	4604      	mov	r4, r0
 80147f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fa:	891b      	ldrh	r3, [r3, #8]
 80147fc:	461d      	mov	r5, r3
 80147fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	899b      	ldrh	r3, [r3, #12]
 8014804:	b29b      	uxth	r3, r3
 8014806:	4618      	mov	r0, r3
 8014808:	f7f8 ff66 	bl	800d6d8 <lwip_htons>
 801480c:	4603      	mov	r3, r0
 801480e:	b2db      	uxtb	r3, r3
 8014810:	f003 0303 	and.w	r3, r3, #3
 8014814:	2b00      	cmp	r3, #0
 8014816:	d001      	beq.n	801481c <tcp_output+0x2a0>
 8014818:	2301      	movs	r3, #1
 801481a:	e000      	b.n	801481e <tcp_output+0x2a2>
 801481c:	2300      	movs	r3, #0
 801481e:	442b      	add	r3, r5
 8014820:	4423      	add	r3, r4
 8014822:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	2b00      	cmp	r3, #0
 801482e:	da02      	bge.n	8014836 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	68ba      	ldr	r2, [r7, #8]
 8014834:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014838:	891b      	ldrh	r3, [r3, #8]
 801483a:	461c      	mov	r4, r3
 801483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	899b      	ldrh	r3, [r3, #12]
 8014842:	b29b      	uxth	r3, r3
 8014844:	4618      	mov	r0, r3
 8014846:	f7f8 ff47 	bl	800d6d8 <lwip_htons>
 801484a:	4603      	mov	r3, r0
 801484c:	b2db      	uxtb	r3, r3
 801484e:	f003 0303 	and.w	r3, r3, #3
 8014852:	2b00      	cmp	r3, #0
 8014854:	d001      	beq.n	801485a <tcp_output+0x2de>
 8014856:	2301      	movs	r3, #1
 8014858:	e000      	b.n	801485c <tcp_output+0x2e0>
 801485a:	2300      	movs	r3, #0
 801485c:	4423      	add	r3, r4
 801485e:	2b00      	cmp	r3, #0
 8014860:	d049      	beq.n	80148f6 <tcp_output+0x37a>
      seg->next = NULL;
 8014862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014864:	2200      	movs	r2, #0
 8014866:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801486c:	2b00      	cmp	r3, #0
 801486e:	d105      	bne.n	801487c <tcp_output+0x300>
        pcb->unacked = seg;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014874:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014878:	623b      	str	r3, [r7, #32]
 801487a:	e03f      	b.n	80148fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	4618      	mov	r0, r3
 8014884:	f7f8 ff3d 	bl	800d702 <lwip_htonl>
 8014888:	4604      	mov	r4, r0
 801488a:	6a3b      	ldr	r3, [r7, #32]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	685b      	ldr	r3, [r3, #4]
 8014890:	4618      	mov	r0, r3
 8014892:	f7f8 ff36 	bl	800d702 <lwip_htonl>
 8014896:	4603      	mov	r3, r0
 8014898:	1ae3      	subs	r3, r4, r3
 801489a:	2b00      	cmp	r3, #0
 801489c:	da24      	bge.n	80148e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	3370      	adds	r3, #112	@ 0x70
 80148a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80148a4:	e002      	b.n	80148ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d011      	beq.n	80148d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	68db      	ldr	r3, [r3, #12]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	4618      	mov	r0, r3
 80148be:	f7f8 ff20 	bl	800d702 <lwip_htonl>
 80148c2:	4604      	mov	r4, r0
 80148c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7f8 ff19 	bl	800d702 <lwip_htonl>
 80148d0:	4603      	mov	r3, r0
 80148d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	dbe6      	blt.n	80148a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80148d8:	69fb      	ldr	r3, [r7, #28]
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	e009      	b.n	80148fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80148ee:	6a3b      	ldr	r3, [r7, #32]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	623b      	str	r3, [r7, #32]
 80148f4:	e002      	b.n	80148fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80148f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148f8:	f7fb ff1f 	bl	801073a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014900:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014904:	2b00      	cmp	r3, #0
 8014906:	d012      	beq.n	801492e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	4618      	mov	r0, r3
 8014910:	f7f8 fef7 	bl	800d702 <lwip_htonl>
 8014914:	4602      	mov	r2, r0
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801491e:	8912      	ldrh	r2, [r2, #8]
 8014920:	4413      	add	r3, r2
  while (seg != NULL &&
 8014922:	69ba      	ldr	r2, [r7, #24]
 8014924:	429a      	cmp	r2, r3
 8014926:	f4bf aed9 	bcs.w	80146dc <tcp_output+0x160>
 801492a:	e000      	b.n	801492e <tcp_output+0x3b2>
      break;
 801492c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014932:	2b00      	cmp	r3, #0
 8014934:	d108      	bne.n	8014948 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801493e:	e004      	b.n	801494a <tcp_output+0x3ce>
    goto output_done;
 8014940:	bf00      	nop
 8014942:	e002      	b.n	801494a <tcp_output+0x3ce>
    goto output_done;
 8014944:	bf00      	nop
 8014946:	e000      	b.n	801494a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014948:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	8b5b      	ldrh	r3, [r3, #26]
 801494e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014952:	b29a      	uxth	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014958:	2300      	movs	r3, #0
}
 801495a:	4618      	mov	r0, r3
 801495c:	3728      	adds	r7, #40	@ 0x28
 801495e:	46bd      	mov	sp, r7
 8014960:	bdb0      	pop	{r4, r5, r7, pc}
 8014962:	bf00      	nop

08014964 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d106      	bne.n	8014980 <tcp_output_segment_busy+0x1c>
 8014972:	4b09      	ldr	r3, [pc, #36]	@ (8014998 <tcp_output_segment_busy+0x34>)
 8014974:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014978:	4908      	ldr	r1, [pc, #32]	@ (801499c <tcp_output_segment_busy+0x38>)
 801497a:	4809      	ldr	r0, [pc, #36]	@ (80149a0 <tcp_output_segment_busy+0x3c>)
 801497c:	f004 fba2 	bl	80190c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	7b9b      	ldrb	r3, [r3, #14]
 8014986:	2b01      	cmp	r3, #1
 8014988:	d001      	beq.n	801498e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801498a:	2301      	movs	r3, #1
 801498c:	e000      	b.n	8014990 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801498e:	2300      	movs	r3, #0
}
 8014990:	4618      	mov	r0, r3
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	0801d7cc 	.word	0x0801d7cc
 801499c:	0801dd68 	.word	0x0801dd68
 80149a0:	0801d820 	.word	0x0801d820

080149a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80149a4:	b5b0      	push	{r4, r5, r7, lr}
 80149a6:	b08c      	sub	sp, #48	@ 0x30
 80149a8:	af04      	add	r7, sp, #16
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d106      	bne.n	80149c4 <tcp_output_segment+0x20>
 80149b6:	4b64      	ldr	r3, [pc, #400]	@ (8014b48 <tcp_output_segment+0x1a4>)
 80149b8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80149bc:	4963      	ldr	r1, [pc, #396]	@ (8014b4c <tcp_output_segment+0x1a8>)
 80149be:	4864      	ldr	r0, [pc, #400]	@ (8014b50 <tcp_output_segment+0x1ac>)
 80149c0:	f004 fb80 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d106      	bne.n	80149d8 <tcp_output_segment+0x34>
 80149ca:	4b5f      	ldr	r3, [pc, #380]	@ (8014b48 <tcp_output_segment+0x1a4>)
 80149cc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80149d0:	4960      	ldr	r1, [pc, #384]	@ (8014b54 <tcp_output_segment+0x1b0>)
 80149d2:	485f      	ldr	r0, [pc, #380]	@ (8014b50 <tcp_output_segment+0x1ac>)
 80149d4:	f004 fb76 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <tcp_output_segment+0x48>
 80149de:	4b5a      	ldr	r3, [pc, #360]	@ (8014b48 <tcp_output_segment+0x1a4>)
 80149e0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80149e4:	495c      	ldr	r1, [pc, #368]	@ (8014b58 <tcp_output_segment+0x1b4>)
 80149e6:	485a      	ldr	r0, [pc, #360]	@ (8014b50 <tcp_output_segment+0x1ac>)
 80149e8:	f004 fb6c 	bl	80190c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f7ff ffb9 	bl	8014964 <tcp_output_segment_busy>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d001      	beq.n	80149fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80149f8:	2300      	movs	r3, #0
 80149fa:	e0a1      	b.n	8014b40 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	68dc      	ldr	r4, [r3, #12]
 8014a04:	4610      	mov	r0, r2
 8014a06:	f7f8 fe7c 	bl	800d702 <lwip_htonl>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	68dc      	ldr	r4, [r3, #12]
 8014a16:	4610      	mov	r0, r2
 8014a18:	f7f8 fe5e 	bl	800d6d8 <lwip_htons>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a24:	68ba      	ldr	r2, [r7, #8]
 8014a26:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014a28:	441a      	add	r2, r3
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	3314      	adds	r3, #20
 8014a34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	7a9b      	ldrb	r3, [r3, #10]
 8014a3a:	f003 0301 	and.w	r3, r3, #1
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d015      	beq.n	8014a6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	3304      	adds	r3, #4
 8014a46:	461a      	mov	r2, r3
 8014a48:	6879      	ldr	r1, [r7, #4]
 8014a4a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014a4e:	f7fc fa39 	bl	8010ec4 <tcp_eff_send_mss_netif>
 8014a52:	4603      	mov	r3, r0
 8014a54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014a56:	8b7b      	ldrh	r3, [r7, #26]
 8014a58:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f8 fe50 	bl	800d702 <lwip_htonl>
 8014a62:	4602      	mov	r2, r0
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	3304      	adds	r3, #4
 8014a6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	da02      	bge.n	8014a7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d10c      	bne.n	8014aa0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014a86:	4b35      	ldr	r3, [pc, #212]	@ (8014b5c <tcp_output_segment+0x1b8>)
 8014a88:	681a      	ldr	r2, [r3, #0]
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7f8 fe34 	bl	800d702 <lwip_htonl>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	68da      	ldr	r2, [r3, #12]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	1ad3      	subs	r3, r2, r3
 8014aac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	8959      	ldrh	r1, [r3, #10]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	8b3a      	ldrh	r2, [r7, #24]
 8014aba:	1a8a      	subs	r2, r1, r2
 8014abc:	b292      	uxth	r2, r2
 8014abe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	8919      	ldrh	r1, [r3, #8]
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	8b3a      	ldrh	r2, [r7, #24]
 8014acc:	1a8a      	subs	r2, r1, r2
 8014ace:	b292      	uxth	r2, r2
 8014ad0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	68d2      	ldr	r2, [r2, #12]
 8014ada:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	741a      	strb	r2, [r3, #16]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	68da      	ldr	r2, [r3, #12]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	7a9b      	ldrb	r3, [r3, #10]
 8014af0:	f003 0301 	and.w	r3, r3, #1
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d001      	beq.n	8014afc <tcp_output_segment+0x158>
 8014af8:	2318      	movs	r3, #24
 8014afa:	e000      	b.n	8014afe <tcp_output_segment+0x15a>
 8014afc:	2314      	movs	r3, #20
 8014afe:	4413      	add	r3, r2
 8014b00:	69fa      	ldr	r2, [r7, #28]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d006      	beq.n	8014b14 <tcp_output_segment+0x170>
 8014b06:	4b10      	ldr	r3, [pc, #64]	@ (8014b48 <tcp_output_segment+0x1a4>)
 8014b08:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014b0c:	4914      	ldr	r1, [pc, #80]	@ (8014b60 <tcp_output_segment+0x1bc>)
 8014b0e:	4810      	ldr	r0, [pc, #64]	@ (8014b50 <tcp_output_segment+0x1ac>)
 8014b10:	f004 fad8 	bl	80190c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	6858      	ldr	r0, [r3, #4]
 8014b18:	68b9      	ldr	r1, [r7, #8]
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	1d1c      	adds	r4, r3, #4
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	7add      	ldrb	r5, [r3, #11]
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	7a9b      	ldrb	r3, [r3, #10]
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	9202      	str	r2, [sp, #8]
 8014b2a:	2206      	movs	r2, #6
 8014b2c:	9201      	str	r2, [sp, #4]
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	462b      	mov	r3, r5
 8014b32:	4622      	mov	r2, r4
 8014b34:	f002 fbaa 	bl	801728c <ip4_output_if>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3720      	adds	r7, #32
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bdb0      	pop	{r4, r5, r7, pc}
 8014b48:	0801d7cc 	.word	0x0801d7cc
 8014b4c:	0801dd90 	.word	0x0801dd90
 8014b50:	0801d820 	.word	0x0801d820
 8014b54:	0801ddb0 	.word	0x0801ddb0
 8014b58:	0801ddd0 	.word	0x0801ddd0
 8014b5c:	2000e118 	.word	0x2000e118
 8014b60:	0801ddf4 	.word	0x0801ddf4

08014b64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014b64:	b5b0      	push	{r4, r5, r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <tcp_rexmit_rto_prepare+0x1c>
 8014b72:	4b31      	ldr	r3, [pc, #196]	@ (8014c38 <tcp_rexmit_rto_prepare+0xd4>)
 8014b74:	f240 6263 	movw	r2, #1635	@ 0x663
 8014b78:	4930      	ldr	r1, [pc, #192]	@ (8014c3c <tcp_rexmit_rto_prepare+0xd8>)
 8014b7a:	4831      	ldr	r0, [pc, #196]	@ (8014c40 <tcp_rexmit_rto_prepare+0xdc>)
 8014b7c:	f004 faa2 	bl	80190c4 <iprintf>

  if (pcb->unacked == NULL) {
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d102      	bne.n	8014b8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014b88:	f06f 0305 	mvn.w	r3, #5
 8014b8c:	e050      	b.n	8014c30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b92:	60fb      	str	r3, [r7, #12]
 8014b94:	e00b      	b.n	8014bae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f7ff fee4 	bl	8014964 <tcp_output_segment_busy>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d002      	beq.n	8014ba8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014ba2:	f06f 0305 	mvn.w	r3, #5
 8014ba6:	e043      	b.n	8014c30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	60fb      	str	r3, [r7, #12]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d1ef      	bne.n	8014b96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f7ff fed4 	bl	8014964 <tcp_output_segment_busy>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d002      	beq.n	8014bc8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014bc2:	f06f 0305 	mvn.w	r3, #5
 8014bc6:	e033      	b.n	8014c30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8b5b      	ldrh	r3, [r3, #26]
 8014be2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7f8 fd85 	bl	800d702 <lwip_htonl>
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	891b      	ldrh	r3, [r3, #8]
 8014bfe:	461d      	mov	r5, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	899b      	ldrh	r3, [r3, #12]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f8 fd65 	bl	800d6d8 <lwip_htons>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	f003 0303 	and.w	r3, r3, #3
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <tcp_rexmit_rto_prepare+0xba>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e000      	b.n	8014c20 <tcp_rexmit_rto_prepare+0xbc>
 8014c1e:	2300      	movs	r3, #0
 8014c20:	442b      	add	r3, r5
 8014c22:	18e2      	adds	r2, r4, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bdb0      	pop	{r4, r5, r7, pc}
 8014c38:	0801d7cc 	.word	0x0801d7cc
 8014c3c:	0801de08 	.word	0x0801de08
 8014c40:	0801d820 	.word	0x0801d820

08014c44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d106      	bne.n	8014c60 <tcp_rexmit_rto_commit+0x1c>
 8014c52:	4b0d      	ldr	r3, [pc, #52]	@ (8014c88 <tcp_rexmit_rto_commit+0x44>)
 8014c54:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014c58:	490c      	ldr	r1, [pc, #48]	@ (8014c8c <tcp_rexmit_rto_commit+0x48>)
 8014c5a:	480d      	ldr	r0, [pc, #52]	@ (8014c90 <tcp_rexmit_rto_commit+0x4c>)
 8014c5c:	f004 fa32 	bl	80190c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c66:	2bff      	cmp	r3, #255	@ 0xff
 8014c68:	d007      	beq.n	8014c7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c70:	3301      	adds	r3, #1
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f7ff fc7e 	bl	801457c <tcp_output>
}
 8014c80:	bf00      	nop
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	0801d7cc 	.word	0x0801d7cc
 8014c8c:	0801de2c 	.word	0x0801de2c
 8014c90:	0801d820 	.word	0x0801d820

08014c94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d106      	bne.n	8014cb0 <tcp_rexmit_rto+0x1c>
 8014ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8014ccc <tcp_rexmit_rto+0x38>)
 8014ca4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014ca8:	4909      	ldr	r1, [pc, #36]	@ (8014cd0 <tcp_rexmit_rto+0x3c>)
 8014caa:	480a      	ldr	r0, [pc, #40]	@ (8014cd4 <tcp_rexmit_rto+0x40>)
 8014cac:	f004 fa0a 	bl	80190c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7ff ff57 	bl	8014b64 <tcp_rexmit_rto_prepare>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d102      	bne.n	8014cc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7ff ffc1 	bl	8014c44 <tcp_rexmit_rto_commit>
  }
}
 8014cc2:	bf00      	nop
 8014cc4:	3708      	adds	r7, #8
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	0801d7cc 	.word	0x0801d7cc
 8014cd0:	0801de50 	.word	0x0801de50
 8014cd4:	0801d820 	.word	0x0801d820

08014cd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014cd8:	b590      	push	{r4, r7, lr}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d106      	bne.n	8014cf4 <tcp_rexmit+0x1c>
 8014ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8014da4 <tcp_rexmit+0xcc>)
 8014ce8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8014cec:	492e      	ldr	r1, [pc, #184]	@ (8014da8 <tcp_rexmit+0xd0>)
 8014cee:	482f      	ldr	r0, [pc, #188]	@ (8014dac <tcp_rexmit+0xd4>)
 8014cf0:	f004 f9e8 	bl	80190c4 <iprintf>

  if (pcb->unacked == NULL) {
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d102      	bne.n	8014d02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014cfc:	f06f 0305 	mvn.w	r3, #5
 8014d00:	e04c      	b.n	8014d9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014d08:	68b8      	ldr	r0, [r7, #8]
 8014d0a:	f7ff fe2b 	bl	8014964 <tcp_output_segment_busy>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d002      	beq.n	8014d1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014d14:	f06f 0305 	mvn.w	r3, #5
 8014d18:	e040      	b.n	8014d9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	336c      	adds	r3, #108	@ 0x6c
 8014d26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d28:	e002      	b.n	8014d30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d011      	beq.n	8014d5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	685b      	ldr	r3, [r3, #4]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f8 fcde 	bl	800d702 <lwip_htonl>
 8014d46:	4604      	mov	r4, r0
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f8 fcd7 	bl	800d702 <lwip_htonl>
 8014d54:	4603      	mov	r3, r0
 8014d56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	dbe6      	blt.n	8014d2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d103      	bne.n	8014d7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2200      	movs	r2, #0
 8014d76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014d80:	2bff      	cmp	r3, #255	@ 0xff
 8014d82:	d007      	beq.n	8014d94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2200      	movs	r2, #0
 8014d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014d9a:	2300      	movs	r3, #0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3714      	adds	r7, #20
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd90      	pop	{r4, r7, pc}
 8014da4:	0801d7cc 	.word	0x0801d7cc
 8014da8:	0801de6c 	.word	0x0801de6c
 8014dac:	0801d820 	.word	0x0801d820

08014db0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d106      	bne.n	8014dcc <tcp_rexmit_fast+0x1c>
 8014dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8014e68 <tcp_rexmit_fast+0xb8>)
 8014dc0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014dc4:	4929      	ldr	r1, [pc, #164]	@ (8014e6c <tcp_rexmit_fast+0xbc>)
 8014dc6:	482a      	ldr	r0, [pc, #168]	@ (8014e70 <tcp_rexmit_fast+0xc0>)
 8014dc8:	f004 f97c 	bl	80190c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d045      	beq.n	8014e60 <tcp_rexmit_fast+0xb0>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8b5b      	ldrh	r3, [r3, #26]
 8014dd8:	f003 0304 	and.w	r3, r3, #4
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d13f      	bne.n	8014e60 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7ff ff79 	bl	8014cd8 <tcp_rexmit>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d139      	bne.n	8014e60 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	bf28      	it	cs
 8014dfc:	4613      	movcs	r3, r2
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	da00      	bge.n	8014e06 <tcp_rexmit_fast+0x56>
 8014e04:	3301      	adds	r3, #1
 8014e06:	105b      	asrs	r3, r3, #1
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014e16:	461a      	mov	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d206      	bcs.n	8014e30 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e26:	005b      	lsls	r3, r3, #1
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	0049      	lsls	r1, r1, #1
 8014e3e:	440b      	add	r3, r1
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	4413      	add	r3, r2
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	8b5b      	ldrh	r3, [r3, #26]
 8014e50:	f043 0304 	orr.w	r3, r3, #4
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014e60:	bf00      	nop
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	0801d7cc 	.word	0x0801d7cc
 8014e6c:	0801de84 	.word	0x0801de84
 8014e70:	0801d820 	.word	0x0801d820

08014e74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	607b      	str	r3, [r7, #4]
 8014e7e:	460b      	mov	r3, r1
 8014e80:	817b      	strh	r3, [r7, #10]
 8014e82:	4613      	mov	r3, r2
 8014e84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014e86:	897a      	ldrh	r2, [r7, #10]
 8014e88:	893b      	ldrh	r3, [r7, #8]
 8014e8a:	4413      	add	r3, r2
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	3314      	adds	r3, #20
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e96:	4619      	mov	r1, r3
 8014e98:	2022      	movs	r0, #34	@ 0x22
 8014e9a:	f7f9 fce5 	bl	800e868 <pbuf_alloc>
 8014e9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d04d      	beq.n	8014f42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014ea6:	897b      	ldrh	r3, [r7, #10]
 8014ea8:	3313      	adds	r3, #19
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	8952      	ldrh	r2, [r2, #10]
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	db06      	blt.n	8014ec0 <tcp_output_alloc_header_common+0x4c>
 8014eb2:	4b26      	ldr	r3, [pc, #152]	@ (8014f4c <tcp_output_alloc_header_common+0xd8>)
 8014eb4:	f240 7223 	movw	r2, #1827	@ 0x723
 8014eb8:	4925      	ldr	r1, [pc, #148]	@ (8014f50 <tcp_output_alloc_header_common+0xdc>)
 8014eba:	4826      	ldr	r0, [pc, #152]	@ (8014f54 <tcp_output_alloc_header_common+0xe0>)
 8014ebc:	f004 f902 	bl	80190c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014ec6:	8c3b      	ldrh	r3, [r7, #32]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7f8 fc05 	bl	800d6d8 <lwip_htons>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014ed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7f8 fbfd 	bl	800d6d8 <lwip_htons>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f7f8 fc08 	bl	800d702 <lwip_htonl>
 8014ef2:	4602      	mov	r2, r0
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014ef8:	897b      	ldrh	r3, [r7, #10]
 8014efa:	089b      	lsrs	r3, r3, #2
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	3305      	adds	r3, #5
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	031b      	lsls	r3, r3, #12
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	4313      	orrs	r3, r2
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7f8 fbe1 	bl	800d6d8 <lwip_htons>
 8014f16:	4603      	mov	r3, r0
 8014f18:	461a      	mov	r2, r3
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014f1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f8 fbd9 	bl	800d6d8 <lwip_htons>
 8014f26:	4603      	mov	r3, r0
 8014f28:	461a      	mov	r2, r3
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	2200      	movs	r2, #0
 8014f32:	741a      	strb	r2, [r3, #16]
 8014f34:	2200      	movs	r2, #0
 8014f36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	749a      	strb	r2, [r3, #18]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014f42:	697b      	ldr	r3, [r7, #20]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3718      	adds	r7, #24
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	0801d7cc 	.word	0x0801d7cc
 8014f50:	0801dea4 	.word	0x0801dea4
 8014f54:	0801d820 	.word	0x0801d820

08014f58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014f58:	b5b0      	push	{r4, r5, r7, lr}
 8014f5a:	b08a      	sub	sp, #40	@ 0x28
 8014f5c:	af04      	add	r7, sp, #16
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	607b      	str	r3, [r7, #4]
 8014f62:	460b      	mov	r3, r1
 8014f64:	817b      	strh	r3, [r7, #10]
 8014f66:	4613      	mov	r3, r2
 8014f68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d106      	bne.n	8014f7e <tcp_output_alloc_header+0x26>
 8014f70:	4b15      	ldr	r3, [pc, #84]	@ (8014fc8 <tcp_output_alloc_header+0x70>)
 8014f72:	f240 7242 	movw	r2, #1858	@ 0x742
 8014f76:	4915      	ldr	r1, [pc, #84]	@ (8014fcc <tcp_output_alloc_header+0x74>)
 8014f78:	4815      	ldr	r0, [pc, #84]	@ (8014fd0 <tcp_output_alloc_header+0x78>)
 8014f7a:	f004 f8a3 	bl	80190c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	8adb      	ldrh	r3, [r3, #22]
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	8b12      	ldrh	r2, [r2, #24]
 8014f8a:	68f9      	ldr	r1, [r7, #12]
 8014f8c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014f8e:	893d      	ldrh	r5, [r7, #8]
 8014f90:	897c      	ldrh	r4, [r7, #10]
 8014f92:	9103      	str	r1, [sp, #12]
 8014f94:	2110      	movs	r1, #16
 8014f96:	9102      	str	r1, [sp, #8]
 8014f98:	9201      	str	r2, [sp, #4]
 8014f9a:	9300      	str	r3, [sp, #0]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	462a      	mov	r2, r5
 8014fa0:	4621      	mov	r1, r4
 8014fa2:	f7ff ff67 	bl	8014e74 <tcp_output_alloc_header_common>
 8014fa6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d006      	beq.n	8014fbc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fb2:	68fa      	ldr	r2, [r7, #12]
 8014fb4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014fb6:	441a      	add	r2, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014fbc:	697b      	ldr	r3, [r7, #20]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3718      	adds	r7, #24
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	0801d7cc 	.word	0x0801d7cc
 8014fcc:	0801ded4 	.word	0x0801ded4
 8014fd0:	0801d820 	.word	0x0801d820

08014fd4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	4611      	mov	r1, r2
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	71fb      	strb	r3, [r7, #7]
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014fea:	2300      	movs	r3, #0
 8014fec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d106      	bne.n	8015002 <tcp_output_fill_options+0x2e>
 8014ff4:	4b12      	ldr	r3, [pc, #72]	@ (8015040 <tcp_output_fill_options+0x6c>)
 8014ff6:	f240 7256 	movw	r2, #1878	@ 0x756
 8014ffa:	4912      	ldr	r1, [pc, #72]	@ (8015044 <tcp_output_fill_options+0x70>)
 8014ffc:	4812      	ldr	r0, [pc, #72]	@ (8015048 <tcp_output_fill_options+0x74>)
 8014ffe:	f004 f861 	bl	80190c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	3314      	adds	r3, #20
 801500c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801500e:	8bfb      	ldrh	r3, [r7, #30]
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	461a      	mov	r2, r3
 8015014:	79fb      	ldrb	r3, [r7, #7]
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	f003 0304 	and.w	r3, r3, #4
 801501c:	4413      	add	r3, r2
 801501e:	3314      	adds	r3, #20
 8015020:	69ba      	ldr	r2, [r7, #24]
 8015022:	4413      	add	r3, r2
 8015024:	697a      	ldr	r2, [r7, #20]
 8015026:	429a      	cmp	r2, r3
 8015028:	d006      	beq.n	8015038 <tcp_output_fill_options+0x64>
 801502a:	4b05      	ldr	r3, [pc, #20]	@ (8015040 <tcp_output_fill_options+0x6c>)
 801502c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015030:	4906      	ldr	r1, [pc, #24]	@ (801504c <tcp_output_fill_options+0x78>)
 8015032:	4805      	ldr	r0, [pc, #20]	@ (8015048 <tcp_output_fill_options+0x74>)
 8015034:	f004 f846 	bl	80190c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015038:	bf00      	nop
 801503a:	3720      	adds	r7, #32
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	0801d7cc 	.word	0x0801d7cc
 8015044:	0801defc 	.word	0x0801defc
 8015048:	0801d820 	.word	0x0801d820
 801504c:	0801ddf4 	.word	0x0801ddf4

08015050 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	@ 0x28
 8015054:	af04      	add	r7, sp, #16
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
 801505c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d106      	bne.n	8015072 <tcp_output_control_segment+0x22>
 8015064:	4b1c      	ldr	r3, [pc, #112]	@ (80150d8 <tcp_output_control_segment+0x88>)
 8015066:	f240 7287 	movw	r2, #1927	@ 0x787
 801506a:	491c      	ldr	r1, [pc, #112]	@ (80150dc <tcp_output_control_segment+0x8c>)
 801506c:	481c      	ldr	r0, [pc, #112]	@ (80150e0 <tcp_output_control_segment+0x90>)
 801506e:	f004 f829 	bl	80190c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015072:	683a      	ldr	r2, [r7, #0]
 8015074:	6879      	ldr	r1, [r7, #4]
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f7fe faea 	bl	8013650 <tcp_route>
 801507c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d102      	bne.n	801508a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015084:	23fc      	movs	r3, #252	@ 0xfc
 8015086:	75fb      	strb	r3, [r7, #23]
 8015088:	e01c      	b.n	80150c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d006      	beq.n	801509e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	7adb      	ldrb	r3, [r3, #11]
 8015094:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	7a9b      	ldrb	r3, [r3, #10]
 801509a:	757b      	strb	r3, [r7, #21]
 801509c:	e003      	b.n	80150a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801509e:	23ff      	movs	r3, #255	@ 0xff
 80150a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80150a6:	7dba      	ldrb	r2, [r7, #22]
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	9302      	str	r3, [sp, #8]
 80150ac:	2306      	movs	r3, #6
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	7d7b      	ldrb	r3, [r7, #21]
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	4613      	mov	r3, r2
 80150b6:	683a      	ldr	r2, [r7, #0]
 80150b8:	6879      	ldr	r1, [r7, #4]
 80150ba:	68b8      	ldr	r0, [r7, #8]
 80150bc:	f002 f8e6 	bl	801728c <ip4_output_if>
 80150c0:	4603      	mov	r3, r0
 80150c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80150c4:	68b8      	ldr	r0, [r7, #8]
 80150c6:	f7f9 feb3 	bl	800ee30 <pbuf_free>
  return err;
 80150ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3718      	adds	r7, #24
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	0801d7cc 	.word	0x0801d7cc
 80150dc:	0801df24 	.word	0x0801df24
 80150e0:	0801d820 	.word	0x0801d820

080150e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80150e4:	b590      	push	{r4, r7, lr}
 80150e6:	b08b      	sub	sp, #44	@ 0x2c
 80150e8:	af04      	add	r7, sp, #16
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
 80150f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d106      	bne.n	8015106 <tcp_rst+0x22>
 80150f8:	4b1f      	ldr	r3, [pc, #124]	@ (8015178 <tcp_rst+0x94>)
 80150fa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80150fe:	491f      	ldr	r1, [pc, #124]	@ (801517c <tcp_rst+0x98>)
 8015100:	481f      	ldr	r0, [pc, #124]	@ (8015180 <tcp_rst+0x9c>)
 8015102:	f003 ffdf 	bl	80190c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015108:	2b00      	cmp	r3, #0
 801510a:	d106      	bne.n	801511a <tcp_rst+0x36>
 801510c:	4b1a      	ldr	r3, [pc, #104]	@ (8015178 <tcp_rst+0x94>)
 801510e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015112:	491c      	ldr	r1, [pc, #112]	@ (8015184 <tcp_rst+0xa0>)
 8015114:	481a      	ldr	r0, [pc, #104]	@ (8015180 <tcp_rst+0x9c>)
 8015116:	f003 ffd5 	bl	80190c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801511a:	2300      	movs	r3, #0
 801511c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801511e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015122:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015124:	7dfb      	ldrb	r3, [r7, #23]
 8015126:	b29c      	uxth	r4, r3
 8015128:	68b8      	ldr	r0, [r7, #8]
 801512a:	f7f8 faea 	bl	800d702 <lwip_htonl>
 801512e:	4602      	mov	r2, r0
 8015130:	8abb      	ldrh	r3, [r7, #20]
 8015132:	9303      	str	r3, [sp, #12]
 8015134:	2314      	movs	r3, #20
 8015136:	9302      	str	r3, [sp, #8]
 8015138:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801513a:	9301      	str	r3, [sp, #4]
 801513c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	4613      	mov	r3, r2
 8015142:	2200      	movs	r2, #0
 8015144:	4621      	mov	r1, r4
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7ff fe94 	bl	8014e74 <tcp_output_alloc_header_common>
 801514c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d00c      	beq.n	801516e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015154:	7dfb      	ldrb	r3, [r7, #23]
 8015156:	2200      	movs	r2, #0
 8015158:	6939      	ldr	r1, [r7, #16]
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f7ff ff3a 	bl	8014fd4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015162:	683a      	ldr	r2, [r7, #0]
 8015164:	6939      	ldr	r1, [r7, #16]
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f7ff ff72 	bl	8015050 <tcp_output_control_segment>
 801516c:	e000      	b.n	8015170 <tcp_rst+0x8c>
    return;
 801516e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015170:	371c      	adds	r7, #28
 8015172:	46bd      	mov	sp, r7
 8015174:	bd90      	pop	{r4, r7, pc}
 8015176:	bf00      	nop
 8015178:	0801d7cc 	.word	0x0801d7cc
 801517c:	0801df50 	.word	0x0801df50
 8015180:	0801d820 	.word	0x0801d820
 8015184:	0801df6c 	.word	0x0801df6c

08015188 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015188:	b590      	push	{r4, r7, lr}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015190:	2300      	movs	r3, #0
 8015192:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d106      	bne.n	80151ac <tcp_send_empty_ack+0x24>
 801519e:	4b28      	ldr	r3, [pc, #160]	@ (8015240 <tcp_send_empty_ack+0xb8>)
 80151a0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80151a4:	4927      	ldr	r1, [pc, #156]	@ (8015244 <tcp_send_empty_ack+0xbc>)
 80151a6:	4828      	ldr	r0, [pc, #160]	@ (8015248 <tcp_send_empty_ack+0xc0>)
 80151a8:	f003 ff8c 	bl	80190c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151ac:	7dfb      	ldrb	r3, [r7, #23]
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	f003 0304 	and.w	r3, r3, #4
 80151b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80151b8:	7d7b      	ldrb	r3, [r7, #21]
 80151ba:	b29c      	uxth	r4, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f8 fa9e 	bl	800d702 <lwip_htonl>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2200      	movs	r2, #0
 80151ca:	4621      	mov	r1, r4
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7ff fec3 	bl	8014f58 <tcp_output_alloc_header>
 80151d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d109      	bne.n	80151ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	8b5b      	ldrh	r3, [r3, #26]
 80151de:	f043 0303 	orr.w	r3, r3, #3
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80151e8:	f06f 0301 	mvn.w	r3, #1
 80151ec:	e023      	b.n	8015236 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80151ee:	7dbb      	ldrb	r3, [r7, #22]
 80151f0:	7dfa      	ldrb	r2, [r7, #23]
 80151f2:	6939      	ldr	r1, [r7, #16]
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff feed 	bl	8014fd4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	3304      	adds	r3, #4
 8015200:	6939      	ldr	r1, [r7, #16]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7ff ff24 	bl	8015050 <tcp_output_control_segment>
 8015208:	4603      	mov	r3, r0
 801520a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801520c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d007      	beq.n	8015224 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	8b5b      	ldrh	r3, [r3, #26]
 8015218:	f043 0303 	orr.w	r3, r3, #3
 801521c:	b29a      	uxth	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	835a      	strh	r2, [r3, #26]
 8015222:	e006      	b.n	8015232 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	8b5b      	ldrh	r3, [r3, #26]
 8015228:	f023 0303 	bic.w	r3, r3, #3
 801522c:	b29a      	uxth	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015236:	4618      	mov	r0, r3
 8015238:	371c      	adds	r7, #28
 801523a:	46bd      	mov	sp, r7
 801523c:	bd90      	pop	{r4, r7, pc}
 801523e:	bf00      	nop
 8015240:	0801d7cc 	.word	0x0801d7cc
 8015244:	0801df88 	.word	0x0801df88
 8015248:	0801d820 	.word	0x0801d820

0801524c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801524c:	b590      	push	{r4, r7, lr}
 801524e:	b087      	sub	sp, #28
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015254:	2300      	movs	r3, #0
 8015256:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d106      	bne.n	801526c <tcp_keepalive+0x20>
 801525e:	4b18      	ldr	r3, [pc, #96]	@ (80152c0 <tcp_keepalive+0x74>)
 8015260:	f640 0224 	movw	r2, #2084	@ 0x824
 8015264:	4917      	ldr	r1, [pc, #92]	@ (80152c4 <tcp_keepalive+0x78>)
 8015266:	4818      	ldr	r0, [pc, #96]	@ (80152c8 <tcp_keepalive+0x7c>)
 8015268:	f003 ff2c 	bl	80190c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801526c:	7dfb      	ldrb	r3, [r7, #23]
 801526e:	b29c      	uxth	r4, r3
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015274:	3b01      	subs	r3, #1
 8015276:	4618      	mov	r0, r3
 8015278:	f7f8 fa43 	bl	800d702 <lwip_htonl>
 801527c:	4603      	mov	r3, r0
 801527e:	2200      	movs	r2, #0
 8015280:	4621      	mov	r1, r4
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f7ff fe68 	bl	8014f58 <tcp_output_alloc_header>
 8015288:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d102      	bne.n	8015296 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015290:	f04f 33ff 	mov.w	r3, #4294967295
 8015294:	e010      	b.n	80152b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015296:	7dfb      	ldrb	r3, [r7, #23]
 8015298:	2200      	movs	r2, #0
 801529a:	6939      	ldr	r1, [r7, #16]
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7ff fe99 	bl	8014fd4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	3304      	adds	r3, #4
 80152a8:	6939      	ldr	r1, [r7, #16]
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7ff fed0 	bl	8015050 <tcp_output_control_segment>
 80152b0:	4603      	mov	r3, r0
 80152b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80152b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	371c      	adds	r7, #28
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}
 80152c0:	0801d7cc 	.word	0x0801d7cc
 80152c4:	0801dfa8 	.word	0x0801dfa8
 80152c8:	0801d820 	.word	0x0801d820

080152cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80152cc:	b590      	push	{r4, r7, lr}
 80152ce:	b08b      	sub	sp, #44	@ 0x2c
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152d4:	2300      	movs	r3, #0
 80152d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d106      	bne.n	80152ee <tcp_zero_window_probe+0x22>
 80152e0:	4b4c      	ldr	r3, [pc, #304]	@ (8015414 <tcp_zero_window_probe+0x148>)
 80152e2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80152e6:	494c      	ldr	r1, [pc, #304]	@ (8015418 <tcp_zero_window_probe+0x14c>)
 80152e8:	484c      	ldr	r0, [pc, #304]	@ (801541c <tcp_zero_window_probe+0x150>)
 80152ea:	f003 feeb 	bl	80190c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80152f4:	6a3b      	ldr	r3, [r7, #32]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d101      	bne.n	80152fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80152fa:	2300      	movs	r3, #0
 80152fc:	e086      	b.n	801540c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015304:	2bff      	cmp	r3, #255	@ 0xff
 8015306:	d007      	beq.n	8015318 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801530e:	3301      	adds	r3, #1
 8015310:	b2da      	uxtb	r2, r3
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015318:	6a3b      	ldr	r3, [r7, #32]
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	899b      	ldrh	r3, [r3, #12]
 801531e:	b29b      	uxth	r3, r3
 8015320:	4618      	mov	r0, r3
 8015322:	f7f8 f9d9 	bl	800d6d8 <lwip_htons>
 8015326:	4603      	mov	r3, r0
 8015328:	b2db      	uxtb	r3, r3
 801532a:	f003 0301 	and.w	r3, r3, #1
 801532e:	2b00      	cmp	r3, #0
 8015330:	d005      	beq.n	801533e <tcp_zero_window_probe+0x72>
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	891b      	ldrh	r3, [r3, #8]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d101      	bne.n	801533e <tcp_zero_window_probe+0x72>
 801533a:	2301      	movs	r3, #1
 801533c:	e000      	b.n	8015340 <tcp_zero_window_probe+0x74>
 801533e:	2300      	movs	r3, #0
 8015340:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015342:	7ffb      	ldrb	r3, [r7, #31]
 8015344:	2b00      	cmp	r3, #0
 8015346:	bf0c      	ite	eq
 8015348:	2301      	moveq	r3, #1
 801534a:	2300      	movne	r3, #0
 801534c:	b2db      	uxtb	r3, r3
 801534e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015354:	b299      	uxth	r1, r3
 8015356:	6a3b      	ldr	r3, [r7, #32]
 8015358:	68db      	ldr	r3, [r3, #12]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	8bba      	ldrh	r2, [r7, #28]
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7ff fdfa 	bl	8014f58 <tcp_output_alloc_header>
 8015364:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d102      	bne.n	8015372 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801536c:	f04f 33ff 	mov.w	r3, #4294967295
 8015370:	e04c      	b.n	801540c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015378:	7ffb      	ldrb	r3, [r7, #31]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d011      	beq.n	80153a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	899b      	ldrh	r3, [r3, #12]
 8015382:	b29b      	uxth	r3, r3
 8015384:	b21b      	sxth	r3, r3
 8015386:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801538a:	b21c      	sxth	r4, r3
 801538c:	2011      	movs	r0, #17
 801538e:	f7f8 f9a3 	bl	800d6d8 <lwip_htons>
 8015392:	4603      	mov	r3, r0
 8015394:	b21b      	sxth	r3, r3
 8015396:	4323      	orrs	r3, r4
 8015398:	b21b      	sxth	r3, r3
 801539a:	b29a      	uxth	r2, r3
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	819a      	strh	r2, [r3, #12]
 80153a0:	e010      	b.n	80153c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	3314      	adds	r3, #20
 80153a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80153aa:	6a3b      	ldr	r3, [r7, #32]
 80153ac:	6858      	ldr	r0, [r3, #4]
 80153ae:	6a3b      	ldr	r3, [r7, #32]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	891a      	ldrh	r2, [r3, #8]
 80153b4:	6a3b      	ldr	r3, [r7, #32]
 80153b6:	891b      	ldrh	r3, [r3, #8]
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	2201      	movs	r2, #1
 80153be:	6939      	ldr	r1, [r7, #16]
 80153c0:	f7f9 ff2c 	bl	800f21c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80153c4:	6a3b      	ldr	r3, [r7, #32]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7f8 f999 	bl	800d702 <lwip_htonl>
 80153d0:	4603      	mov	r3, r0
 80153d2:	3301      	adds	r3, #1
 80153d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	1ad3      	subs	r3, r2, r3
 80153de:	2b00      	cmp	r3, #0
 80153e0:	da02      	bge.n	80153e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	68fa      	ldr	r2, [r7, #12]
 80153e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80153e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153ec:	2200      	movs	r2, #0
 80153ee:	69b9      	ldr	r1, [r7, #24]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff fdef 	bl	8014fd4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	3304      	adds	r3, #4
 80153fc:	69b9      	ldr	r1, [r7, #24]
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f7ff fe26 	bl	8015050 <tcp_output_control_segment>
 8015404:	4603      	mov	r3, r0
 8015406:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015408:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801540c:	4618      	mov	r0, r3
 801540e:	372c      	adds	r7, #44	@ 0x2c
 8015410:	46bd      	mov	sp, r7
 8015412:	bd90      	pop	{r4, r7, pc}
 8015414:	0801d7cc 	.word	0x0801d7cc
 8015418:	0801dfc4 	.word	0x0801dfc4
 801541c:	0801d820 	.word	0x0801d820

08015420 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015428:	f7f9 ffe6 	bl	800f3f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801542c:	4b0a      	ldr	r3, [pc, #40]	@ (8015458 <tcpip_tcp_timer+0x38>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d103      	bne.n	801543c <tcpip_tcp_timer+0x1c>
 8015434:	4b09      	ldr	r3, [pc, #36]	@ (801545c <tcpip_tcp_timer+0x3c>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d005      	beq.n	8015448 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801543c:	2200      	movs	r2, #0
 801543e:	4908      	ldr	r1, [pc, #32]	@ (8015460 <tcpip_tcp_timer+0x40>)
 8015440:	20fa      	movs	r0, #250	@ 0xfa
 8015442:	f000 f8f3 	bl	801562c <sys_timeout>
 8015446:	e003      	b.n	8015450 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015448:	4b06      	ldr	r3, [pc, #24]	@ (8015464 <tcpip_tcp_timer+0x44>)
 801544a:	2200      	movs	r2, #0
 801544c:	601a      	str	r2, [r3, #0]
  }
}
 801544e:	bf00      	nop
 8015450:	bf00      	nop
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	2000e124 	.word	0x2000e124
 801545c:	2000e128 	.word	0x2000e128
 8015460:	08015421 	.word	0x08015421
 8015464:	2000e170 	.word	0x2000e170

08015468 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801546c:	4b0a      	ldr	r3, [pc, #40]	@ (8015498 <tcp_timer_needed+0x30>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d10f      	bne.n	8015494 <tcp_timer_needed+0x2c>
 8015474:	4b09      	ldr	r3, [pc, #36]	@ (801549c <tcp_timer_needed+0x34>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d103      	bne.n	8015484 <tcp_timer_needed+0x1c>
 801547c:	4b08      	ldr	r3, [pc, #32]	@ (80154a0 <tcp_timer_needed+0x38>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d007      	beq.n	8015494 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015484:	4b04      	ldr	r3, [pc, #16]	@ (8015498 <tcp_timer_needed+0x30>)
 8015486:	2201      	movs	r2, #1
 8015488:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801548a:	2200      	movs	r2, #0
 801548c:	4905      	ldr	r1, [pc, #20]	@ (80154a4 <tcp_timer_needed+0x3c>)
 801548e:	20fa      	movs	r0, #250	@ 0xfa
 8015490:	f000 f8cc 	bl	801562c <sys_timeout>
  }
}
 8015494:	bf00      	nop
 8015496:	bd80      	pop	{r7, pc}
 8015498:	2000e170 	.word	0x2000e170
 801549c:	2000e124 	.word	0x2000e124
 80154a0:	2000e128 	.word	0x2000e128
 80154a4:	08015421 	.word	0x08015421

080154a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b086      	sub	sp, #24
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	60f8      	str	r0, [r7, #12]
 80154b0:	60b9      	str	r1, [r7, #8]
 80154b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80154b4:	200a      	movs	r0, #10
 80154b6:	f7f8 fdc5 	bl	800e044 <memp_malloc>
 80154ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d109      	bne.n	80154d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d151      	bne.n	801556c <sys_timeout_abs+0xc4>
 80154c8:	4b2a      	ldr	r3, [pc, #168]	@ (8015574 <sys_timeout_abs+0xcc>)
 80154ca:	22be      	movs	r2, #190	@ 0xbe
 80154cc:	492a      	ldr	r1, [pc, #168]	@ (8015578 <sys_timeout_abs+0xd0>)
 80154ce:	482b      	ldr	r0, [pc, #172]	@ (801557c <sys_timeout_abs+0xd4>)
 80154d0:	f003 fdf8 	bl	80190c4 <iprintf>
    return;
 80154d4:	e04a      	b.n	801556c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	2200      	movs	r2, #0
 80154da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	68fa      	ldr	r2, [r7, #12]
 80154ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80154ee:	4b24      	ldr	r3, [pc, #144]	@ (8015580 <sys_timeout_abs+0xd8>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d103      	bne.n	80154fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80154f6:	4a22      	ldr	r2, [pc, #136]	@ (8015580 <sys_timeout_abs+0xd8>)
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	6013      	str	r3, [r2, #0]
    return;
 80154fc:	e037      	b.n	801556e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	685a      	ldr	r2, [r3, #4]
 8015502:	4b1f      	ldr	r3, [pc, #124]	@ (8015580 <sys_timeout_abs+0xd8>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	1ad3      	subs	r3, r2, r3
 801550a:	0fdb      	lsrs	r3, r3, #31
 801550c:	f003 0301 	and.w	r3, r3, #1
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	d007      	beq.n	8015526 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015516:	4b1a      	ldr	r3, [pc, #104]	@ (8015580 <sys_timeout_abs+0xd8>)
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801551e:	4a18      	ldr	r2, [pc, #96]	@ (8015580 <sys_timeout_abs+0xd8>)
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	6013      	str	r3, [r2, #0]
 8015524:	e023      	b.n	801556e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015526:	4b16      	ldr	r3, [pc, #88]	@ (8015580 <sys_timeout_abs+0xd8>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	617b      	str	r3, [r7, #20]
 801552c:	e01a      	b.n	8015564 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d00b      	beq.n	801554e <sys_timeout_abs+0xa6>
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	685a      	ldr	r2, [r3, #4]
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	1ad3      	subs	r3, r2, r3
 8015542:	0fdb      	lsrs	r3, r3, #31
 8015544:	f003 0301 	and.w	r3, r3, #1
 8015548:	b2db      	uxtb	r3, r3
 801554a:	2b00      	cmp	r3, #0
 801554c:	d007      	beq.n	801555e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	693a      	ldr	r2, [r7, #16]
 801555a:	601a      	str	r2, [r3, #0]
        break;
 801555c:	e007      	b.n	801556e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	617b      	str	r3, [r7, #20]
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d1e1      	bne.n	801552e <sys_timeout_abs+0x86>
 801556a:	e000      	b.n	801556e <sys_timeout_abs+0xc6>
    return;
 801556c:	bf00      	nop
      }
    }
  }
}
 801556e:	3718      	adds	r7, #24
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}
 8015574:	0801dfe8 	.word	0x0801dfe8
 8015578:	0801e01c 	.word	0x0801e01c
 801557c:	0801e05c 	.word	0x0801e05c
 8015580:	2000e168 	.word	0x2000e168

08015584 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b086      	sub	sp, #24
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	4798      	blx	r3

  now = sys_now();
 8015596:	f7f1 fbff 	bl	8006d98 <sys_now>
 801559a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	4b0f      	ldr	r3, [pc, #60]	@ (80155e0 <lwip_cyclic_timer+0x5c>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	4413      	add	r3, r2
 80155a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80155a8:	68fa      	ldr	r2, [r7, #12]
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	1ad3      	subs	r3, r2, r3
 80155ae:	0fdb      	lsrs	r3, r3, #31
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d009      	beq.n	80155ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	4413      	add	r3, r2
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	4907      	ldr	r1, [pc, #28]	@ (80155e4 <lwip_cyclic_timer+0x60>)
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7ff ff6e 	bl	80154a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80155cc:	e004      	b.n	80155d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	4904      	ldr	r1, [pc, #16]	@ (80155e4 <lwip_cyclic_timer+0x60>)
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	f7ff ff68 	bl	80154a8 <sys_timeout_abs>
}
 80155d8:	bf00      	nop
 80155da:	3718      	adds	r7, #24
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	2000e16c 	.word	0x2000e16c
 80155e4:	08015585 	.word	0x08015585

080155e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80155ee:	2301      	movs	r3, #1
 80155f0:	607b      	str	r3, [r7, #4]
 80155f2:	e00e      	b.n	8015612 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80155f4:	4a0b      	ldr	r2, [pc, #44]	@ (8015624 <sys_timeouts_init+0x3c>)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	00db      	lsls	r3, r3, #3
 8015600:	4a08      	ldr	r2, [pc, #32]	@ (8015624 <sys_timeouts_init+0x3c>)
 8015602:	4413      	add	r3, r2
 8015604:	461a      	mov	r2, r3
 8015606:	4908      	ldr	r1, [pc, #32]	@ (8015628 <sys_timeouts_init+0x40>)
 8015608:	f000 f810 	bl	801562c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	3301      	adds	r3, #1
 8015610:	607b      	str	r3, [r7, #4]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b02      	cmp	r3, #2
 8015616:	d9ed      	bls.n	80155f4 <sys_timeouts_init+0xc>
  }
}
 8015618:	bf00      	nop
 801561a:	bf00      	nop
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	0801ec30 	.word	0x0801ec30
 8015628:	08015585 	.word	0x08015585

0801562c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	60f8      	str	r0, [r7, #12]
 8015634:	60b9      	str	r1, [r7, #8]
 8015636:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801563e:	d306      	bcc.n	801564e <sys_timeout+0x22>
 8015640:	4b0a      	ldr	r3, [pc, #40]	@ (801566c <sys_timeout+0x40>)
 8015642:	f240 1229 	movw	r2, #297	@ 0x129
 8015646:	490a      	ldr	r1, [pc, #40]	@ (8015670 <sys_timeout+0x44>)
 8015648:	480a      	ldr	r0, [pc, #40]	@ (8015674 <sys_timeout+0x48>)
 801564a:	f003 fd3b 	bl	80190c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801564e:	f7f1 fba3 	bl	8006d98 <sys_now>
 8015652:	4602      	mov	r2, r0
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	4413      	add	r3, r2
 8015658:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	68b9      	ldr	r1, [r7, #8]
 801565e:	6978      	ldr	r0, [r7, #20]
 8015660:	f7ff ff22 	bl	80154a8 <sys_timeout_abs>
#endif
}
 8015664:	bf00      	nop
 8015666:	3718      	adds	r7, #24
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	0801dfe8 	.word	0x0801dfe8
 8015670:	0801e084 	.word	0x0801e084
 8015674:	0801e05c 	.word	0x0801e05c

08015678 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801567e:	f7f1 fb8b 	bl	8006d98 <sys_now>
 8015682:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015684:	4b17      	ldr	r3, [pc, #92]	@ (80156e4 <sys_check_timeouts+0x6c>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d022      	beq.n	80156d6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	68fa      	ldr	r2, [r7, #12]
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	0fdb      	lsrs	r3, r3, #31
 801569a:	f003 0301 	and.w	r3, r3, #1
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d11a      	bne.n	80156da <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4a0e      	ldr	r2, [pc, #56]	@ (80156e4 <sys_check_timeouts+0x6c>)
 80156aa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	689b      	ldr	r3, [r3, #8]
 80156b0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	4a0a      	ldr	r2, [pc, #40]	@ (80156e8 <sys_check_timeouts+0x70>)
 80156be:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80156c0:	68b9      	ldr	r1, [r7, #8]
 80156c2:	200a      	movs	r0, #10
 80156c4:	f7f8 fd10 	bl	800e0e8 <memp_free>
    if (handler != NULL) {
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d0da      	beq.n	8015684 <sys_check_timeouts+0xc>
      handler(arg);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6838      	ldr	r0, [r7, #0]
 80156d2:	4798      	blx	r3
  do {
 80156d4:	e7d6      	b.n	8015684 <sys_check_timeouts+0xc>
      return;
 80156d6:	bf00      	nop
 80156d8:	e000      	b.n	80156dc <sys_check_timeouts+0x64>
      return;
 80156da:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	2000e168 	.word	0x2000e168
 80156e8:	2000e16c 	.word	0x2000e16c

080156ec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80156f2:	4b16      	ldr	r3, [pc, #88]	@ (801574c <sys_timeouts_sleeptime+0x60>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d102      	bne.n	8015700 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80156fa:	f04f 33ff 	mov.w	r3, #4294967295
 80156fe:	e020      	b.n	8015742 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015700:	f7f1 fb4a 	bl	8006d98 <sys_now>
 8015704:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015706:	4b11      	ldr	r3, [pc, #68]	@ (801574c <sys_timeouts_sleeptime+0x60>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	685a      	ldr	r2, [r3, #4]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	0fdb      	lsrs	r3, r3, #31
 8015712:	f003 0301 	and.w	r3, r3, #1
 8015716:	b2db      	uxtb	r3, r3
 8015718:	2b00      	cmp	r3, #0
 801571a:	d001      	beq.n	8015720 <sys_timeouts_sleeptime+0x34>
    return 0;
 801571c:	2300      	movs	r3, #0
 801571e:	e010      	b.n	8015742 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015720:	4b0a      	ldr	r3, [pc, #40]	@ (801574c <sys_timeouts_sleeptime+0x60>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	da06      	bge.n	8015740 <sys_timeouts_sleeptime+0x54>
 8015732:	4b07      	ldr	r3, [pc, #28]	@ (8015750 <sys_timeouts_sleeptime+0x64>)
 8015734:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015738:	4906      	ldr	r1, [pc, #24]	@ (8015754 <sys_timeouts_sleeptime+0x68>)
 801573a:	4807      	ldr	r0, [pc, #28]	@ (8015758 <sys_timeouts_sleeptime+0x6c>)
 801573c:	f003 fcc2 	bl	80190c4 <iprintf>
    return ret;
 8015740:	683b      	ldr	r3, [r7, #0]
  }
}
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	2000e168 	.word	0x2000e168
 8015750:	0801dfe8 	.word	0x0801dfe8
 8015754:	0801e0bc 	.word	0x0801e0bc
 8015758:	0801e05c 	.word	0x0801e05c

0801575c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015760:	f002 ff78 	bl	8018654 <rand>
 8015764:	4603      	mov	r3, r0
 8015766:	b29b      	uxth	r3, r3
 8015768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801576c:	b29b      	uxth	r3, r3
 801576e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015772:	b29a      	uxth	r2, r3
 8015774:	4b01      	ldr	r3, [pc, #4]	@ (801577c <udp_init+0x20>)
 8015776:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015778:	bf00      	nop
 801577a:	bd80      	pop	{r7, pc}
 801577c:	20000018 	.word	0x20000018

08015780 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015780:	b480      	push	{r7}
 8015782:	b083      	sub	sp, #12
 8015784:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015786:	2300      	movs	r3, #0
 8015788:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801578a:	4b17      	ldr	r3, [pc, #92]	@ (80157e8 <udp_new_port+0x68>)
 801578c:	881b      	ldrh	r3, [r3, #0]
 801578e:	1c5a      	adds	r2, r3, #1
 8015790:	b291      	uxth	r1, r2
 8015792:	4a15      	ldr	r2, [pc, #84]	@ (80157e8 <udp_new_port+0x68>)
 8015794:	8011      	strh	r1, [r2, #0]
 8015796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801579a:	4293      	cmp	r3, r2
 801579c:	d103      	bne.n	80157a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801579e:	4b12      	ldr	r3, [pc, #72]	@ (80157e8 <udp_new_port+0x68>)
 80157a0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80157a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80157a6:	4b11      	ldr	r3, [pc, #68]	@ (80157ec <udp_new_port+0x6c>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	603b      	str	r3, [r7, #0]
 80157ac:	e011      	b.n	80157d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	8a5a      	ldrh	r2, [r3, #18]
 80157b2:	4b0d      	ldr	r3, [pc, #52]	@ (80157e8 <udp_new_port+0x68>)
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	429a      	cmp	r2, r3
 80157b8:	d108      	bne.n	80157cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80157ba:	88fb      	ldrh	r3, [r7, #6]
 80157bc:	3301      	adds	r3, #1
 80157be:	80fb      	strh	r3, [r7, #6]
 80157c0:	88fb      	ldrh	r3, [r7, #6]
 80157c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157c6:	d3e0      	bcc.n	801578a <udp_new_port+0xa>
        return 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	e007      	b.n	80157dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	603b      	str	r3, [r7, #0]
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d1ea      	bne.n	80157ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80157d8:	4b03      	ldr	r3, [pc, #12]	@ (80157e8 <udp_new_port+0x68>)
 80157da:	881b      	ldrh	r3, [r3, #0]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	20000018 	.word	0x20000018
 80157ec:	2000e174 	.word	0x2000e174

080157f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b084      	sub	sp, #16
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	4613      	mov	r3, r2
 80157fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d105      	bne.n	8015810 <udp_input_local_match+0x20>
 8015804:	4b27      	ldr	r3, [pc, #156]	@ (80158a4 <udp_input_local_match+0xb4>)
 8015806:	2287      	movs	r2, #135	@ 0x87
 8015808:	4927      	ldr	r1, [pc, #156]	@ (80158a8 <udp_input_local_match+0xb8>)
 801580a:	4828      	ldr	r0, [pc, #160]	@ (80158ac <udp_input_local_match+0xbc>)
 801580c:	f003 fc5a 	bl	80190c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d105      	bne.n	8015822 <udp_input_local_match+0x32>
 8015816:	4b23      	ldr	r3, [pc, #140]	@ (80158a4 <udp_input_local_match+0xb4>)
 8015818:	2288      	movs	r2, #136	@ 0x88
 801581a:	4925      	ldr	r1, [pc, #148]	@ (80158b0 <udp_input_local_match+0xc0>)
 801581c:	4823      	ldr	r0, [pc, #140]	@ (80158ac <udp_input_local_match+0xbc>)
 801581e:	f003 fc51 	bl	80190c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	7a1b      	ldrb	r3, [r3, #8]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00b      	beq.n	8015842 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	7a1a      	ldrb	r2, [r3, #8]
 801582e:	4b21      	ldr	r3, [pc, #132]	@ (80158b4 <udp_input_local_match+0xc4>)
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015836:	3301      	adds	r3, #1
 8015838:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801583a:	429a      	cmp	r2, r3
 801583c:	d001      	beq.n	8015842 <udp_input_local_match+0x52>
    return 0;
 801583e:	2300      	movs	r3, #0
 8015840:	e02b      	b.n	801589a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015842:	79fb      	ldrb	r3, [r7, #7]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d018      	beq.n	801587a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d013      	beq.n	8015876 <udp_input_local_match+0x86>
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d00f      	beq.n	8015876 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015856:	4b17      	ldr	r3, [pc, #92]	@ (80158b4 <udp_input_local_match+0xc4>)
 8015858:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801585e:	d00a      	beq.n	8015876 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	4b13      	ldr	r3, [pc, #76]	@ (80158b4 <udp_input_local_match+0xc4>)
 8015866:	695b      	ldr	r3, [r3, #20]
 8015868:	405a      	eors	r2, r3
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	3308      	adds	r3, #8
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015872:	2b00      	cmp	r3, #0
 8015874:	d110      	bne.n	8015898 <udp_input_local_match+0xa8>
          return 1;
 8015876:	2301      	movs	r3, #1
 8015878:	e00f      	b.n	801589a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d009      	beq.n	8015894 <udp_input_local_match+0xa4>
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d005      	beq.n	8015894 <udp_input_local_match+0xa4>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	4b09      	ldr	r3, [pc, #36]	@ (80158b4 <udp_input_local_match+0xc4>)
 801588e:	695b      	ldr	r3, [r3, #20]
 8015890:	429a      	cmp	r2, r3
 8015892:	d101      	bne.n	8015898 <udp_input_local_match+0xa8>
        return 1;
 8015894:	2301      	movs	r3, #1
 8015896:	e000      	b.n	801589a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015898:	2300      	movs	r3, #0
}
 801589a:	4618      	mov	r0, r3
 801589c:	3710      	adds	r7, #16
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}
 80158a2:	bf00      	nop
 80158a4:	0801e0d0 	.word	0x0801e0d0
 80158a8:	0801e100 	.word	0x0801e100
 80158ac:	0801e124 	.word	0x0801e124
 80158b0:	0801e14c 	.word	0x0801e14c
 80158b4:	20008804 	.word	0x20008804

080158b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80158b8:	b590      	push	{r4, r7, lr}
 80158ba:	b08d      	sub	sp, #52	@ 0x34
 80158bc:	af02      	add	r7, sp, #8
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80158c2:	2300      	movs	r3, #0
 80158c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d105      	bne.n	80158d8 <udp_input+0x20>
 80158cc:	4b7c      	ldr	r3, [pc, #496]	@ (8015ac0 <udp_input+0x208>)
 80158ce:	22cf      	movs	r2, #207	@ 0xcf
 80158d0:	497c      	ldr	r1, [pc, #496]	@ (8015ac4 <udp_input+0x20c>)
 80158d2:	487d      	ldr	r0, [pc, #500]	@ (8015ac8 <udp_input+0x210>)
 80158d4:	f003 fbf6 	bl	80190c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d105      	bne.n	80158ea <udp_input+0x32>
 80158de:	4b78      	ldr	r3, [pc, #480]	@ (8015ac0 <udp_input+0x208>)
 80158e0:	22d0      	movs	r2, #208	@ 0xd0
 80158e2:	497a      	ldr	r1, [pc, #488]	@ (8015acc <udp_input+0x214>)
 80158e4:	4878      	ldr	r0, [pc, #480]	@ (8015ac8 <udp_input+0x210>)
 80158e6:	f003 fbed 	bl	80190c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	895b      	ldrh	r3, [r3, #10]
 80158ee:	2b07      	cmp	r3, #7
 80158f0:	d803      	bhi.n	80158fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7f9 fa9c 	bl	800ee30 <pbuf_free>
    goto end;
 80158f8:	e0de      	b.n	8015ab8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015900:	4b73      	ldr	r3, [pc, #460]	@ (8015ad0 <udp_input+0x218>)
 8015902:	695b      	ldr	r3, [r3, #20]
 8015904:	4a72      	ldr	r2, [pc, #456]	@ (8015ad0 <udp_input+0x218>)
 8015906:	6812      	ldr	r2, [r2, #0]
 8015908:	4611      	mov	r1, r2
 801590a:	4618      	mov	r0, r3
 801590c:	f001 fd96 	bl	801743c <ip4_addr_isbroadcast_u32>
 8015910:	4603      	mov	r3, r0
 8015912:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	881b      	ldrh	r3, [r3, #0]
 8015918:	b29b      	uxth	r3, r3
 801591a:	4618      	mov	r0, r3
 801591c:	f7f7 fedc 	bl	800d6d8 <lwip_htons>
 8015920:	4603      	mov	r3, r0
 8015922:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	885b      	ldrh	r3, [r3, #2]
 8015928:	b29b      	uxth	r3, r3
 801592a:	4618      	mov	r0, r3
 801592c:	f7f7 fed4 	bl	800d6d8 <lwip_htons>
 8015930:	4603      	mov	r3, r0
 8015932:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015934:	2300      	movs	r3, #0
 8015936:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015938:	2300      	movs	r3, #0
 801593a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801593c:	2300      	movs	r3, #0
 801593e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015940:	4b64      	ldr	r3, [pc, #400]	@ (8015ad4 <udp_input+0x21c>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	627b      	str	r3, [r7, #36]	@ 0x24
 8015946:	e054      	b.n	80159f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801594a:	8a5b      	ldrh	r3, [r3, #18]
 801594c:	89fa      	ldrh	r2, [r7, #14]
 801594e:	429a      	cmp	r2, r3
 8015950:	d14a      	bne.n	80159e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015952:	7cfb      	ldrb	r3, [r7, #19]
 8015954:	461a      	mov	r2, r3
 8015956:	6839      	ldr	r1, [r7, #0]
 8015958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801595a:	f7ff ff49 	bl	80157f0 <udp_input_local_match>
 801595e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015960:	2b00      	cmp	r3, #0
 8015962:	d041      	beq.n	80159e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015966:	7c1b      	ldrb	r3, [r3, #16]
 8015968:	f003 0304 	and.w	r3, r3, #4
 801596c:	2b00      	cmp	r3, #0
 801596e:	d11d      	bne.n	80159ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d102      	bne.n	801597c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015978:	61fb      	str	r3, [r7, #28]
 801597a:	e017      	b.n	80159ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801597c:	7cfb      	ldrb	r3, [r7, #19]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d014      	beq.n	80159ac <udp_input+0xf4>
 8015982:	4b53      	ldr	r3, [pc, #332]	@ (8015ad0 <udp_input+0x218>)
 8015984:	695b      	ldr	r3, [r3, #20]
 8015986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801598a:	d10f      	bne.n	80159ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	681a      	ldr	r2, [r3, #0]
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	3304      	adds	r3, #4
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	429a      	cmp	r2, r3
 8015998:	d008      	beq.n	80159ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	3304      	adds	r3, #4
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d101      	bne.n	80159ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80159a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80159ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ae:	8a9b      	ldrh	r3, [r3, #20]
 80159b0:	8a3a      	ldrh	r2, [r7, #16]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d118      	bne.n	80159e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80159b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d005      	beq.n	80159ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80159be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c0:	685a      	ldr	r2, [r3, #4]
 80159c2:	4b43      	ldr	r3, [pc, #268]	@ (8015ad0 <udp_input+0x218>)
 80159c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d10e      	bne.n	80159e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80159ca:	6a3b      	ldr	r3, [r7, #32]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d014      	beq.n	80159fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80159d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d2:	68da      	ldr	r2, [r3, #12]
 80159d4:	6a3b      	ldr	r3, [r7, #32]
 80159d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80159d8:	4b3e      	ldr	r3, [pc, #248]	@ (8015ad4 <udp_input+0x21c>)
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80159e0:	4a3c      	ldr	r2, [pc, #240]	@ (8015ad4 <udp_input+0x21c>)
 80159e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80159e6:	e008      	b.n	80159fa <udp_input+0x142>
      }
    }

    prev = pcb;
 80159e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80159f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d1a7      	bne.n	8015948 <udp_input+0x90>
 80159f8:	e000      	b.n	80159fc <udp_input+0x144>
        break;
 80159fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80159fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d101      	bne.n	8015a06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d002      	beq.n	8015a12 <udp_input+0x15a>
    for_us = 1;
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	76fb      	strb	r3, [r7, #27]
 8015a10:	e00a      	b.n	8015a28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	3304      	adds	r3, #4
 8015a16:	681a      	ldr	r2, [r3, #0]
 8015a18:	4b2d      	ldr	r3, [pc, #180]	@ (8015ad0 <udp_input+0x218>)
 8015a1a:	695b      	ldr	r3, [r3, #20]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	bf0c      	ite	eq
 8015a20:	2301      	moveq	r3, #1
 8015a22:	2300      	movne	r3, #0
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015a28:	7efb      	ldrb	r3, [r7, #27]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d041      	beq.n	8015ab2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015a2e:	2108      	movs	r1, #8
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f7f9 f977 	bl	800ed24 <pbuf_remove_header>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d00a      	beq.n	8015a52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015a3c:	4b20      	ldr	r3, [pc, #128]	@ (8015ac0 <udp_input+0x208>)
 8015a3e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015a42:	4925      	ldr	r1, [pc, #148]	@ (8015ad8 <udp_input+0x220>)
 8015a44:	4820      	ldr	r0, [pc, #128]	@ (8015ac8 <udp_input+0x210>)
 8015a46:	f003 fb3d 	bl	80190c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f7f9 f9f0 	bl	800ee30 <pbuf_free>
      goto end;
 8015a50:	e032      	b.n	8015ab8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d012      	beq.n	8015a7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a5a:	699b      	ldr	r3, [r3, #24]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00a      	beq.n	8015a76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a62:	699c      	ldr	r4, [r3, #24]
 8015a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a66:	69d8      	ldr	r0, [r3, #28]
 8015a68:	8a3b      	ldrh	r3, [r7, #16]
 8015a6a:	9300      	str	r3, [sp, #0]
 8015a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8015adc <udp_input+0x224>)
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015a74:	e021      	b.n	8015aba <udp_input+0x202>
        pbuf_free(p);
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f7f9 f9da 	bl	800ee30 <pbuf_free>
        goto end;
 8015a7c:	e01c      	b.n	8015ab8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015a7e:	7cfb      	ldrb	r3, [r7, #19]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d112      	bne.n	8015aaa <udp_input+0x1f2>
 8015a84:	4b12      	ldr	r3, [pc, #72]	@ (8015ad0 <udp_input+0x218>)
 8015a86:	695b      	ldr	r3, [r3, #20]
 8015a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a8c:	2be0      	cmp	r3, #224	@ 0xe0
 8015a8e:	d00c      	beq.n	8015aaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015a90:	4b0f      	ldr	r3, [pc, #60]	@ (8015ad0 <udp_input+0x218>)
 8015a92:	899b      	ldrh	r3, [r3, #12]
 8015a94:	3308      	adds	r3, #8
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	b21b      	sxth	r3, r3
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7f9 f9b4 	bl	800ee0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015aa2:	2103      	movs	r1, #3
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f001 f9a9 	bl	8016dfc <icmp_dest_unreach>
      pbuf_free(p);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f7f9 f9c0 	bl	800ee30 <pbuf_free>
  return;
 8015ab0:	e003      	b.n	8015aba <udp_input+0x202>
    pbuf_free(p);
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7f9 f9bc 	bl	800ee30 <pbuf_free>
  return;
 8015ab8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015aba:	372c      	adds	r7, #44	@ 0x2c
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd90      	pop	{r4, r7, pc}
 8015ac0:	0801e0d0 	.word	0x0801e0d0
 8015ac4:	0801e174 	.word	0x0801e174
 8015ac8:	0801e124 	.word	0x0801e124
 8015acc:	0801e18c 	.word	0x0801e18c
 8015ad0:	20008804 	.word	0x20008804
 8015ad4:	2000e174 	.word	0x2000e174
 8015ad8:	0801e1a8 	.word	0x0801e1a8
 8015adc:	20008814 	.word	0x20008814

08015ae0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b086      	sub	sp, #24
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	4613      	mov	r3, r2
 8015aec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d101      	bne.n	8015af8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015af4:	4b39      	ldr	r3, [pc, #228]	@ (8015bdc <udp_bind+0xfc>)
 8015af6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d109      	bne.n	8015b12 <udp_bind+0x32>
 8015afe:	4b38      	ldr	r3, [pc, #224]	@ (8015be0 <udp_bind+0x100>)
 8015b00:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8015b04:	4937      	ldr	r1, [pc, #220]	@ (8015be4 <udp_bind+0x104>)
 8015b06:	4838      	ldr	r0, [pc, #224]	@ (8015be8 <udp_bind+0x108>)
 8015b08:	f003 fadc 	bl	80190c4 <iprintf>
 8015b0c:	f06f 030f 	mvn.w	r3, #15
 8015b10:	e060      	b.n	8015bd4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015b12:	2300      	movs	r3, #0
 8015b14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b16:	4b35      	ldr	r3, [pc, #212]	@ (8015bec <udp_bind+0x10c>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	617b      	str	r3, [r7, #20]
 8015b1c:	e009      	b.n	8015b32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015b1e:	68fa      	ldr	r2, [r7, #12]
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d102      	bne.n	8015b2c <udp_bind+0x4c>
      rebind = 1;
 8015b26:	2301      	movs	r3, #1
 8015b28:	74fb      	strb	r3, [r7, #19]
      break;
 8015b2a:	e005      	b.n	8015b38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	617b      	str	r3, [r7, #20]
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1f2      	bne.n	8015b1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015b38:	88fb      	ldrh	r3, [r7, #6]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d109      	bne.n	8015b52 <udp_bind+0x72>
    port = udp_new_port();
 8015b3e:	f7ff fe1f 	bl	8015780 <udp_new_port>
 8015b42:	4603      	mov	r3, r0
 8015b44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015b46:	88fb      	ldrh	r3, [r7, #6]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d12c      	bne.n	8015ba6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015b4c:	f06f 0307 	mvn.w	r3, #7
 8015b50:	e040      	b.n	8015bd4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b52:	4b26      	ldr	r3, [pc, #152]	@ (8015bec <udp_bind+0x10c>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	617b      	str	r3, [r7, #20]
 8015b58:	e022      	b.n	8015ba0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015b5a:	68fa      	ldr	r2, [r7, #12]
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d01b      	beq.n	8015b9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	8a5b      	ldrh	r3, [r3, #18]
 8015b66:	88fa      	ldrh	r2, [r7, #6]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d116      	bne.n	8015b9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d00d      	beq.n	8015b94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00a      	beq.n	8015b94 <udp_bind+0xb4>
 8015b7e:	68bb      	ldr	r3, [r7, #8]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d006      	beq.n	8015b94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015b86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d003      	beq.n	8015b94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d102      	bne.n	8015b9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015b94:	f06f 0307 	mvn.w	r3, #7
 8015b98:	e01c      	b.n	8015bd4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	617b      	str	r3, [r7, #20]
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1d9      	bne.n	8015b5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d002      	beq.n	8015bb2 <udp_bind+0xd2>
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	e000      	b.n	8015bb4 <udp_bind+0xd4>
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	88fa      	ldrh	r2, [r7, #6]
 8015bbc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015bbe:	7cfb      	ldrb	r3, [r7, #19]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d106      	bne.n	8015bd2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015bc4:	4b09      	ldr	r3, [pc, #36]	@ (8015bec <udp_bind+0x10c>)
 8015bc6:	681a      	ldr	r2, [r3, #0]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015bcc:	4a07      	ldr	r2, [pc, #28]	@ (8015bec <udp_bind+0x10c>)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0801ec48 	.word	0x0801ec48
 8015be0:	0801e0d0 	.word	0x0801e0d0
 8015be4:	0801e398 	.word	0x0801e398
 8015be8:	0801e124 	.word	0x0801e124
 8015bec:	2000e174 	.word	0x2000e174

08015bf0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d107      	bne.n	8015c12 <udp_recv+0x22>
 8015c02:	4b08      	ldr	r3, [pc, #32]	@ (8015c24 <udp_recv+0x34>)
 8015c04:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015c08:	4907      	ldr	r1, [pc, #28]	@ (8015c28 <udp_recv+0x38>)
 8015c0a:	4808      	ldr	r0, [pc, #32]	@ (8015c2c <udp_recv+0x3c>)
 8015c0c:	f003 fa5a 	bl	80190c4 <iprintf>
 8015c10:	e005      	b.n	8015c1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	61da      	str	r2, [r3, #28]
}
 8015c1e:	3710      	adds	r7, #16
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	0801e0d0 	.word	0x0801e0d0
 8015c28:	0801e404 	.word	0x0801e404
 8015c2c:	0801e124 	.word	0x0801e124

08015c30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b084      	sub	sp, #16
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d107      	bne.n	8015c4e <udp_remove+0x1e>
 8015c3e:	4b19      	ldr	r3, [pc, #100]	@ (8015ca4 <udp_remove+0x74>)
 8015c40:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8015c44:	4918      	ldr	r1, [pc, #96]	@ (8015ca8 <udp_remove+0x78>)
 8015c46:	4819      	ldr	r0, [pc, #100]	@ (8015cac <udp_remove+0x7c>)
 8015c48:	f003 fa3c 	bl	80190c4 <iprintf>
 8015c4c:	e026      	b.n	8015c9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015c4e:	4b18      	ldr	r3, [pc, #96]	@ (8015cb0 <udp_remove+0x80>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	429a      	cmp	r2, r3
 8015c56:	d105      	bne.n	8015c64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015c58:	4b15      	ldr	r3, [pc, #84]	@ (8015cb0 <udp_remove+0x80>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	4a14      	ldr	r2, [pc, #80]	@ (8015cb0 <udp_remove+0x80>)
 8015c60:	6013      	str	r3, [r2, #0]
 8015c62:	e017      	b.n	8015c94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015c64:	4b12      	ldr	r3, [pc, #72]	@ (8015cb0 <udp_remove+0x80>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	60fb      	str	r3, [r7, #12]
 8015c6a:	e010      	b.n	8015c8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	68db      	ldr	r3, [r3, #12]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d009      	beq.n	8015c88 <udp_remove+0x58>
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d104      	bne.n	8015c88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	68da      	ldr	r2, [r3, #12]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	60da      	str	r2, [r3, #12]
        break;
 8015c86:	e005      	b.n	8015c94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	68db      	ldr	r3, [r3, #12]
 8015c8c:	60fb      	str	r3, [r7, #12]
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d1eb      	bne.n	8015c6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015c94:	6879      	ldr	r1, [r7, #4]
 8015c96:	2000      	movs	r0, #0
 8015c98:	f7f8 fa26 	bl	800e0e8 <memp_free>
}
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	0801e0d0 	.word	0x0801e0d0
 8015ca8:	0801e41c 	.word	0x0801e41c
 8015cac:	0801e124 	.word	0x0801e124
 8015cb0:	2000e174 	.word	0x2000e174

08015cb4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b082      	sub	sp, #8
 8015cb8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015cba:	2000      	movs	r0, #0
 8015cbc:	f7f8 f9c2 	bl	800e044 <memp_malloc>
 8015cc0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d007      	beq.n	8015cd8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015cc8:	2220      	movs	r2, #32
 8015cca:	2100      	movs	r1, #0
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f003 fbbf 	bl	8019450 <memset>
    pcb->ttl = UDP_TTL;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	22ff      	movs	r2, #255	@ 0xff
 8015cd6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015cd8:	687b      	ldr	r3, [r7, #4]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b084      	sub	sp, #16
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	4603      	mov	r3, r0
 8015cea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015cec:	f7ff ffe2 	bl	8015cb4 <udp_new>
 8015cf0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3710      	adds	r7, #16
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b085      	sub	sp, #20
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d01e      	beq.n	8015d4a <udp_netif_ip_addr_changed+0x4e>
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d01a      	beq.n	8015d4a <udp_netif_ip_addr_changed+0x4e>
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d017      	beq.n	8015d4a <udp_netif_ip_addr_changed+0x4e>
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d013      	beq.n	8015d4a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015d22:	4b0d      	ldr	r3, [pc, #52]	@ (8015d58 <udp_netif_ip_addr_changed+0x5c>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	60fb      	str	r3, [r7, #12]
 8015d28:	e00c      	b.n	8015d44 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681a      	ldr	r2, [r3, #0]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d103      	bne.n	8015d3e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	60fb      	str	r3, [r7, #12]
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d1ef      	bne.n	8015d2a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015d4a:	bf00      	nop
 8015d4c:	3714      	adds	r7, #20
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop
 8015d58:	2000e174 	.word	0x2000e174

08015d5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015d64:	4915      	ldr	r1, [pc, #84]	@ (8015dbc <etharp_free_entry+0x60>)
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	4613      	mov	r3, r2
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	4413      	add	r3, r2
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	440b      	add	r3, r1
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d013      	beq.n	8015da0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015d78:	4910      	ldr	r1, [pc, #64]	@ (8015dbc <etharp_free_entry+0x60>)
 8015d7a:	687a      	ldr	r2, [r7, #4]
 8015d7c:	4613      	mov	r3, r2
 8015d7e:	005b      	lsls	r3, r3, #1
 8015d80:	4413      	add	r3, r2
 8015d82:	00db      	lsls	r3, r3, #3
 8015d84:	440b      	add	r3, r1
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7f9 f851 	bl	800ee30 <pbuf_free>
    arp_table[i].q = NULL;
 8015d8e:	490b      	ldr	r1, [pc, #44]	@ (8015dbc <etharp_free_entry+0x60>)
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	4613      	mov	r3, r2
 8015d94:	005b      	lsls	r3, r3, #1
 8015d96:	4413      	add	r3, r2
 8015d98:	00db      	lsls	r3, r3, #3
 8015d9a:	440b      	add	r3, r1
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015da0:	4906      	ldr	r1, [pc, #24]	@ (8015dbc <etharp_free_entry+0x60>)
 8015da2:	687a      	ldr	r2, [r7, #4]
 8015da4:	4613      	mov	r3, r2
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	4413      	add	r3, r2
 8015daa:	00db      	lsls	r3, r3, #3
 8015dac:	440b      	add	r3, r1
 8015dae:	3314      	adds	r3, #20
 8015db0:	2200      	movs	r2, #0
 8015db2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015db4:	bf00      	nop
 8015db6:	3708      	adds	r7, #8
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	2000e178 	.word	0x2000e178

08015dc0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	607b      	str	r3, [r7, #4]
 8015dca:	e096      	b.n	8015efa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015dcc:	494f      	ldr	r1, [pc, #316]	@ (8015f0c <etharp_tmr+0x14c>)
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	4613      	mov	r3, r2
 8015dd2:	005b      	lsls	r3, r3, #1
 8015dd4:	4413      	add	r3, r2
 8015dd6:	00db      	lsls	r3, r3, #3
 8015dd8:	440b      	add	r3, r1
 8015dda:	3314      	adds	r3, #20
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015de0:	78fb      	ldrb	r3, [r7, #3]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f000 8086 	beq.w	8015ef4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015de8:	4948      	ldr	r1, [pc, #288]	@ (8015f0c <etharp_tmr+0x14c>)
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	4613      	mov	r3, r2
 8015dee:	005b      	lsls	r3, r3, #1
 8015df0:	4413      	add	r3, r2
 8015df2:	00db      	lsls	r3, r3, #3
 8015df4:	440b      	add	r3, r1
 8015df6:	3312      	adds	r3, #18
 8015df8:	881b      	ldrh	r3, [r3, #0]
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	b298      	uxth	r0, r3
 8015dfe:	4943      	ldr	r1, [pc, #268]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	4613      	mov	r3, r2
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	4413      	add	r3, r2
 8015e08:	00db      	lsls	r3, r3, #3
 8015e0a:	440b      	add	r3, r1
 8015e0c:	3312      	adds	r3, #18
 8015e0e:	4602      	mov	r2, r0
 8015e10:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015e12:	493e      	ldr	r1, [pc, #248]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e14:	687a      	ldr	r2, [r7, #4]
 8015e16:	4613      	mov	r3, r2
 8015e18:	005b      	lsls	r3, r3, #1
 8015e1a:	4413      	add	r3, r2
 8015e1c:	00db      	lsls	r3, r3, #3
 8015e1e:	440b      	add	r3, r1
 8015e20:	3312      	adds	r3, #18
 8015e22:	881b      	ldrh	r3, [r3, #0]
 8015e24:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015e28:	d215      	bcs.n	8015e56 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015e2a:	4938      	ldr	r1, [pc, #224]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	4613      	mov	r3, r2
 8015e30:	005b      	lsls	r3, r3, #1
 8015e32:	4413      	add	r3, r2
 8015e34:	00db      	lsls	r3, r3, #3
 8015e36:	440b      	add	r3, r1
 8015e38:	3314      	adds	r3, #20
 8015e3a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	d10e      	bne.n	8015e5e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015e40:	4932      	ldr	r1, [pc, #200]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	440b      	add	r3, r1
 8015e4e:	3312      	adds	r3, #18
 8015e50:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015e52:	2b04      	cmp	r3, #4
 8015e54:	d903      	bls.n	8015e5e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7ff ff80 	bl	8015d5c <etharp_free_entry>
 8015e5c:	e04a      	b.n	8015ef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015e5e:	492b      	ldr	r1, [pc, #172]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e60:	687a      	ldr	r2, [r7, #4]
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3314      	adds	r3, #20
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2b03      	cmp	r3, #3
 8015e72:	d10a      	bne.n	8015e8a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015e74:	4925      	ldr	r1, [pc, #148]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	4613      	mov	r3, r2
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	4413      	add	r3, r2
 8015e7e:	00db      	lsls	r3, r3, #3
 8015e80:	440b      	add	r3, r1
 8015e82:	3314      	adds	r3, #20
 8015e84:	2204      	movs	r2, #4
 8015e86:	701a      	strb	r2, [r3, #0]
 8015e88:	e034      	b.n	8015ef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015e8a:	4920      	ldr	r1, [pc, #128]	@ (8015f0c <etharp_tmr+0x14c>)
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	4613      	mov	r3, r2
 8015e90:	005b      	lsls	r3, r3, #1
 8015e92:	4413      	add	r3, r2
 8015e94:	00db      	lsls	r3, r3, #3
 8015e96:	440b      	add	r3, r1
 8015e98:	3314      	adds	r3, #20
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	2b04      	cmp	r3, #4
 8015e9e:	d10a      	bne.n	8015eb6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015ea0:	491a      	ldr	r1, [pc, #104]	@ (8015f0c <etharp_tmr+0x14c>)
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4413      	add	r3, r2
 8015eaa:	00db      	lsls	r3, r3, #3
 8015eac:	440b      	add	r3, r1
 8015eae:	3314      	adds	r3, #20
 8015eb0:	2202      	movs	r2, #2
 8015eb2:	701a      	strb	r2, [r3, #0]
 8015eb4:	e01e      	b.n	8015ef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015eb6:	4915      	ldr	r1, [pc, #84]	@ (8015f0c <etharp_tmr+0x14c>)
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	3314      	adds	r3, #20
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d113      	bne.n	8015ef4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015ecc:	490f      	ldr	r1, [pc, #60]	@ (8015f0c <etharp_tmr+0x14c>)
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	4413      	add	r3, r2
 8015ed6:	00db      	lsls	r3, r3, #3
 8015ed8:	440b      	add	r3, r1
 8015eda:	3308      	adds	r3, #8
 8015edc:	6818      	ldr	r0, [r3, #0]
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	4413      	add	r3, r2
 8015ee6:	00db      	lsls	r3, r3, #3
 8015ee8:	4a08      	ldr	r2, [pc, #32]	@ (8015f0c <etharp_tmr+0x14c>)
 8015eea:	4413      	add	r3, r2
 8015eec:	3304      	adds	r3, #4
 8015eee:	4619      	mov	r1, r3
 8015ef0:	f000 fe6e 	bl	8016bd0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	607b      	str	r3, [r7, #4]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2b09      	cmp	r3, #9
 8015efe:	f77f af65 	ble.w	8015dcc <etharp_tmr+0xc>
      }
    }
  }
}
 8015f02:	bf00      	nop
 8015f04:	bf00      	nop
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	2000e178 	.word	0x2000e178

08015f10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b08a      	sub	sp, #40	@ 0x28
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	460b      	mov	r3, r1
 8015f1a:	607a      	str	r2, [r7, #4]
 8015f1c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015f1e:	230a      	movs	r3, #10
 8015f20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015f22:	230a      	movs	r3, #10
 8015f24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015f26:	230a      	movs	r3, #10
 8015f28:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015f2e:	230a      	movs	r3, #10
 8015f30:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	83bb      	strh	r3, [r7, #28]
 8015f36:	2300      	movs	r3, #0
 8015f38:	837b      	strh	r3, [r7, #26]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f3e:	2300      	movs	r3, #0
 8015f40:	843b      	strh	r3, [r7, #32]
 8015f42:	e0ae      	b.n	80160a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015f44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015f48:	49a6      	ldr	r1, [pc, #664]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	440b      	add	r3, r1
 8015f54:	3314      	adds	r3, #20
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015f5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015f5e:	2b0a      	cmp	r3, #10
 8015f60:	d105      	bne.n	8015f6e <etharp_find_entry+0x5e>
 8015f62:	7dfb      	ldrb	r3, [r7, #23]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d102      	bne.n	8015f6e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015f68:	8c3b      	ldrh	r3, [r7, #32]
 8015f6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015f6c:	e095      	b.n	801609a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015f6e:	7dfb      	ldrb	r3, [r7, #23]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	f000 8092 	beq.w	801609a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015f76:	7dfb      	ldrb	r3, [r7, #23]
 8015f78:	2b01      	cmp	r3, #1
 8015f7a:	d009      	beq.n	8015f90 <etharp_find_entry+0x80>
 8015f7c:	7dfb      	ldrb	r3, [r7, #23]
 8015f7e:	2b01      	cmp	r3, #1
 8015f80:	d806      	bhi.n	8015f90 <etharp_find_entry+0x80>
 8015f82:	4b99      	ldr	r3, [pc, #612]	@ (80161e8 <etharp_find_entry+0x2d8>)
 8015f84:	f240 1223 	movw	r2, #291	@ 0x123
 8015f88:	4998      	ldr	r1, [pc, #608]	@ (80161ec <etharp_find_entry+0x2dc>)
 8015f8a:	4899      	ldr	r0, [pc, #612]	@ (80161f0 <etharp_find_entry+0x2e0>)
 8015f8c:	f003 f89a 	bl	80190c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d020      	beq.n	8015fd8 <etharp_find_entry+0xc8>
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	6819      	ldr	r1, [r3, #0]
 8015f9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015f9e:	4891      	ldr	r0, [pc, #580]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	005b      	lsls	r3, r3, #1
 8015fa4:	4413      	add	r3, r2
 8015fa6:	00db      	lsls	r3, r3, #3
 8015fa8:	4403      	add	r3, r0
 8015faa:	3304      	adds	r3, #4
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	4299      	cmp	r1, r3
 8015fb0:	d112      	bne.n	8015fd8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d00c      	beq.n	8015fd2 <etharp_find_entry+0xc2>
 8015fb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fbc:	4989      	ldr	r1, [pc, #548]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8015fbe:	4613      	mov	r3, r2
 8015fc0:	005b      	lsls	r3, r3, #1
 8015fc2:	4413      	add	r3, r2
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	3308      	adds	r3, #8
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	687a      	ldr	r2, [r7, #4]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d102      	bne.n	8015fd8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015fd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015fd6:	e100      	b.n	80161da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015fd8:	7dfb      	ldrb	r3, [r7, #23]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d140      	bne.n	8016060 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015fde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fe2:	4980      	ldr	r1, [pc, #512]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	005b      	lsls	r3, r3, #1
 8015fe8:	4413      	add	r3, r2
 8015fea:	00db      	lsls	r3, r3, #3
 8015fec:	440b      	add	r3, r1
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d01a      	beq.n	801602a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015ff4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ff8:	497a      	ldr	r1, [pc, #488]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	3312      	adds	r3, #18
 8016006:	881b      	ldrh	r3, [r3, #0]
 8016008:	8bba      	ldrh	r2, [r7, #28]
 801600a:	429a      	cmp	r2, r3
 801600c:	d845      	bhi.n	801609a <etharp_find_entry+0x18a>
            old_queue = i;
 801600e:	8c3b      	ldrh	r3, [r7, #32]
 8016010:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016016:	4973      	ldr	r1, [pc, #460]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8016018:	4613      	mov	r3, r2
 801601a:	005b      	lsls	r3, r3, #1
 801601c:	4413      	add	r3, r2
 801601e:	00db      	lsls	r3, r3, #3
 8016020:	440b      	add	r3, r1
 8016022:	3312      	adds	r3, #18
 8016024:	881b      	ldrh	r3, [r3, #0]
 8016026:	83bb      	strh	r3, [r7, #28]
 8016028:	e037      	b.n	801609a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801602a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801602e:	496d      	ldr	r1, [pc, #436]	@ (80161e4 <etharp_find_entry+0x2d4>)
 8016030:	4613      	mov	r3, r2
 8016032:	005b      	lsls	r3, r3, #1
 8016034:	4413      	add	r3, r2
 8016036:	00db      	lsls	r3, r3, #3
 8016038:	440b      	add	r3, r1
 801603a:	3312      	adds	r3, #18
 801603c:	881b      	ldrh	r3, [r3, #0]
 801603e:	8b7a      	ldrh	r2, [r7, #26]
 8016040:	429a      	cmp	r2, r3
 8016042:	d82a      	bhi.n	801609a <etharp_find_entry+0x18a>
            old_pending = i;
 8016044:	8c3b      	ldrh	r3, [r7, #32]
 8016046:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801604c:	4965      	ldr	r1, [pc, #404]	@ (80161e4 <etharp_find_entry+0x2d4>)
 801604e:	4613      	mov	r3, r2
 8016050:	005b      	lsls	r3, r3, #1
 8016052:	4413      	add	r3, r2
 8016054:	00db      	lsls	r3, r3, #3
 8016056:	440b      	add	r3, r1
 8016058:	3312      	adds	r3, #18
 801605a:	881b      	ldrh	r3, [r3, #0]
 801605c:	837b      	strh	r3, [r7, #26]
 801605e:	e01c      	b.n	801609a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016060:	7dfb      	ldrb	r3, [r7, #23]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d919      	bls.n	801609a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801606a:	495e      	ldr	r1, [pc, #376]	@ (80161e4 <etharp_find_entry+0x2d4>)
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	440b      	add	r3, r1
 8016076:	3312      	adds	r3, #18
 8016078:	881b      	ldrh	r3, [r3, #0]
 801607a:	8b3a      	ldrh	r2, [r7, #24]
 801607c:	429a      	cmp	r2, r3
 801607e:	d80c      	bhi.n	801609a <etharp_find_entry+0x18a>
            old_stable = i;
 8016080:	8c3b      	ldrh	r3, [r7, #32]
 8016082:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016088:	4956      	ldr	r1, [pc, #344]	@ (80161e4 <etharp_find_entry+0x2d4>)
 801608a:	4613      	mov	r3, r2
 801608c:	005b      	lsls	r3, r3, #1
 801608e:	4413      	add	r3, r2
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	440b      	add	r3, r1
 8016094:	3312      	adds	r3, #18
 8016096:	881b      	ldrh	r3, [r3, #0]
 8016098:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801609a:	8c3b      	ldrh	r3, [r7, #32]
 801609c:	3301      	adds	r3, #1
 801609e:	b29b      	uxth	r3, r3
 80160a0:	843b      	strh	r3, [r7, #32]
 80160a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80160a6:	2b09      	cmp	r3, #9
 80160a8:	f77f af4c 	ble.w	8015f44 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80160ac:	7afb      	ldrb	r3, [r7, #11]
 80160ae:	f003 0302 	and.w	r3, r3, #2
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d108      	bne.n	80160c8 <etharp_find_entry+0x1b8>
 80160b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80160ba:	2b0a      	cmp	r3, #10
 80160bc:	d107      	bne.n	80160ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80160be:	7afb      	ldrb	r3, [r7, #11]
 80160c0:	f003 0301 	and.w	r3, r3, #1
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d102      	bne.n	80160ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80160c8:	f04f 33ff 	mov.w	r3, #4294967295
 80160cc:	e085      	b.n	80161da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80160ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80160d2:	2b09      	cmp	r3, #9
 80160d4:	dc02      	bgt.n	80160dc <etharp_find_entry+0x1cc>
    i = empty;
 80160d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80160d8:	843b      	strh	r3, [r7, #32]
 80160da:	e039      	b.n	8016150 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80160dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80160e0:	2b09      	cmp	r3, #9
 80160e2:	dc14      	bgt.n	801610e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80160e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80160e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160ec:	493d      	ldr	r1, [pc, #244]	@ (80161e4 <etharp_find_entry+0x2d4>)
 80160ee:	4613      	mov	r3, r2
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4413      	add	r3, r2
 80160f4:	00db      	lsls	r3, r3, #3
 80160f6:	440b      	add	r3, r1
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d018      	beq.n	8016130 <etharp_find_entry+0x220>
 80160fe:	4b3a      	ldr	r3, [pc, #232]	@ (80161e8 <etharp_find_entry+0x2d8>)
 8016100:	f240 126d 	movw	r2, #365	@ 0x16d
 8016104:	493b      	ldr	r1, [pc, #236]	@ (80161f4 <etharp_find_entry+0x2e4>)
 8016106:	483a      	ldr	r0, [pc, #232]	@ (80161f0 <etharp_find_entry+0x2e0>)
 8016108:	f002 ffdc 	bl	80190c4 <iprintf>
 801610c:	e010      	b.n	8016130 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801610e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016112:	2b09      	cmp	r3, #9
 8016114:	dc02      	bgt.n	801611c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016118:	843b      	strh	r3, [r7, #32]
 801611a:	e009      	b.n	8016130 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801611c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016120:	2b09      	cmp	r3, #9
 8016122:	dc02      	bgt.n	801612a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016124:	8bfb      	ldrh	r3, [r7, #30]
 8016126:	843b      	strh	r3, [r7, #32]
 8016128:	e002      	b.n	8016130 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801612a:	f04f 33ff 	mov.w	r3, #4294967295
 801612e:	e054      	b.n	80161da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016130:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016134:	2b09      	cmp	r3, #9
 8016136:	dd06      	ble.n	8016146 <etharp_find_entry+0x236>
 8016138:	4b2b      	ldr	r3, [pc, #172]	@ (80161e8 <etharp_find_entry+0x2d8>)
 801613a:	f240 127f 	movw	r2, #383	@ 0x17f
 801613e:	492e      	ldr	r1, [pc, #184]	@ (80161f8 <etharp_find_entry+0x2e8>)
 8016140:	482b      	ldr	r0, [pc, #172]	@ (80161f0 <etharp_find_entry+0x2e0>)
 8016142:	f002 ffbf 	bl	80190c4 <iprintf>
    etharp_free_entry(i);
 8016146:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801614a:	4618      	mov	r0, r3
 801614c:	f7ff fe06 	bl	8015d5c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016150:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016154:	2b09      	cmp	r3, #9
 8016156:	dd06      	ble.n	8016166 <etharp_find_entry+0x256>
 8016158:	4b23      	ldr	r3, [pc, #140]	@ (80161e8 <etharp_find_entry+0x2d8>)
 801615a:	f240 1283 	movw	r2, #387	@ 0x183
 801615e:	4926      	ldr	r1, [pc, #152]	@ (80161f8 <etharp_find_entry+0x2e8>)
 8016160:	4823      	ldr	r0, [pc, #140]	@ (80161f0 <etharp_find_entry+0x2e0>)
 8016162:	f002 ffaf 	bl	80190c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801616a:	491e      	ldr	r1, [pc, #120]	@ (80161e4 <etharp_find_entry+0x2d4>)
 801616c:	4613      	mov	r3, r2
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	4413      	add	r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	440b      	add	r3, r1
 8016176:	3314      	adds	r3, #20
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d006      	beq.n	801618c <etharp_find_entry+0x27c>
 801617e:	4b1a      	ldr	r3, [pc, #104]	@ (80161e8 <etharp_find_entry+0x2d8>)
 8016180:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016184:	491d      	ldr	r1, [pc, #116]	@ (80161fc <etharp_find_entry+0x2ec>)
 8016186:	481a      	ldr	r0, [pc, #104]	@ (80161f0 <etharp_find_entry+0x2e0>)
 8016188:	f002 ff9c 	bl	80190c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d00b      	beq.n	80161aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	6819      	ldr	r1, [r3, #0]
 801619a:	4812      	ldr	r0, [pc, #72]	@ (80161e4 <etharp_find_entry+0x2d4>)
 801619c:	4613      	mov	r3, r2
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	4413      	add	r3, r2
 80161a2:	00db      	lsls	r3, r3, #3
 80161a4:	4403      	add	r3, r0
 80161a6:	3304      	adds	r3, #4
 80161a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80161aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161ae:	490d      	ldr	r1, [pc, #52]	@ (80161e4 <etharp_find_entry+0x2d4>)
 80161b0:	4613      	mov	r3, r2
 80161b2:	005b      	lsls	r3, r3, #1
 80161b4:	4413      	add	r3, r2
 80161b6:	00db      	lsls	r3, r3, #3
 80161b8:	440b      	add	r3, r1
 80161ba:	3312      	adds	r3, #18
 80161bc:	2200      	movs	r2, #0
 80161be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80161c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161c4:	4907      	ldr	r1, [pc, #28]	@ (80161e4 <etharp_find_entry+0x2d4>)
 80161c6:	4613      	mov	r3, r2
 80161c8:	005b      	lsls	r3, r3, #1
 80161ca:	4413      	add	r3, r2
 80161cc:	00db      	lsls	r3, r3, #3
 80161ce:	440b      	add	r3, r1
 80161d0:	3308      	adds	r3, #8
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80161d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3728      	adds	r7, #40	@ 0x28
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
 80161e2:	bf00      	nop
 80161e4:	2000e178 	.word	0x2000e178
 80161e8:	0801e434 	.word	0x0801e434
 80161ec:	0801e46c 	.word	0x0801e46c
 80161f0:	0801e4ac 	.word	0x0801e4ac
 80161f4:	0801e4d4 	.word	0x0801e4d4
 80161f8:	0801e4ec 	.word	0x0801e4ec
 80161fc:	0801e500 	.word	0x0801e500

08016200 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b088      	sub	sp, #32
 8016204:	af02      	add	r7, sp, #8
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	607a      	str	r2, [r7, #4]
 801620c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016214:	2b06      	cmp	r3, #6
 8016216:	d006      	beq.n	8016226 <etharp_update_arp_entry+0x26>
 8016218:	4b48      	ldr	r3, [pc, #288]	@ (801633c <etharp_update_arp_entry+0x13c>)
 801621a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801621e:	4948      	ldr	r1, [pc, #288]	@ (8016340 <etharp_update_arp_entry+0x140>)
 8016220:	4848      	ldr	r0, [pc, #288]	@ (8016344 <etharp_update_arp_entry+0x144>)
 8016222:	f002 ff4f 	bl	80190c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d012      	beq.n	8016252 <etharp_update_arp_entry+0x52>
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d00e      	beq.n	8016252 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	68f9      	ldr	r1, [r7, #12]
 801623a:	4618      	mov	r0, r3
 801623c:	f001 f8fe 	bl	801743c <ip4_addr_isbroadcast_u32>
 8016240:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016242:	2b00      	cmp	r3, #0
 8016244:	d105      	bne.n	8016252 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801624e:	2be0      	cmp	r3, #224	@ 0xe0
 8016250:	d102      	bne.n	8016258 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016252:	f06f 030f 	mvn.w	r3, #15
 8016256:	e06c      	b.n	8016332 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016258:	78fb      	ldrb	r3, [r7, #3]
 801625a:	68fa      	ldr	r2, [r7, #12]
 801625c:	4619      	mov	r1, r3
 801625e:	68b8      	ldr	r0, [r7, #8]
 8016260:	f7ff fe56 	bl	8015f10 <etharp_find_entry>
 8016264:	4603      	mov	r3, r0
 8016266:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801626c:	2b00      	cmp	r3, #0
 801626e:	da02      	bge.n	8016276 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016270:	8afb      	ldrh	r3, [r7, #22]
 8016272:	b25b      	sxtb	r3, r3
 8016274:	e05d      	b.n	8016332 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016276:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801627a:	4933      	ldr	r1, [pc, #204]	@ (8016348 <etharp_update_arp_entry+0x148>)
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	440b      	add	r3, r1
 8016286:	3314      	adds	r3, #20
 8016288:	2202      	movs	r2, #2
 801628a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801628c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016290:	492d      	ldr	r1, [pc, #180]	@ (8016348 <etharp_update_arp_entry+0x148>)
 8016292:	4613      	mov	r3, r2
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	4413      	add	r3, r2
 8016298:	00db      	lsls	r3, r3, #3
 801629a:	440b      	add	r3, r1
 801629c:	3308      	adds	r3, #8
 801629e:	68fa      	ldr	r2, [r7, #12]
 80162a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80162a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	00db      	lsls	r3, r3, #3
 80162ae:	3308      	adds	r3, #8
 80162b0:	4a25      	ldr	r2, [pc, #148]	@ (8016348 <etharp_update_arp_entry+0x148>)
 80162b2:	4413      	add	r3, r2
 80162b4:	3304      	adds	r3, #4
 80162b6:	2206      	movs	r2, #6
 80162b8:	6879      	ldr	r1, [r7, #4]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f003 f981 	bl	80195c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80162c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162c4:	4920      	ldr	r1, [pc, #128]	@ (8016348 <etharp_update_arp_entry+0x148>)
 80162c6:	4613      	mov	r3, r2
 80162c8:	005b      	lsls	r3, r3, #1
 80162ca:	4413      	add	r3, r2
 80162cc:	00db      	lsls	r3, r3, #3
 80162ce:	440b      	add	r3, r1
 80162d0:	3312      	adds	r3, #18
 80162d2:	2200      	movs	r2, #0
 80162d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80162d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162da:	491b      	ldr	r1, [pc, #108]	@ (8016348 <etharp_update_arp_entry+0x148>)
 80162dc:	4613      	mov	r3, r2
 80162de:	005b      	lsls	r3, r3, #1
 80162e0:	4413      	add	r3, r2
 80162e2:	00db      	lsls	r3, r3, #3
 80162e4:	440b      	add	r3, r1
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d021      	beq.n	8016330 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80162ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162f0:	4915      	ldr	r1, [pc, #84]	@ (8016348 <etharp_update_arp_entry+0x148>)
 80162f2:	4613      	mov	r3, r2
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	4413      	add	r3, r2
 80162f8:	00db      	lsls	r3, r3, #3
 80162fa:	440b      	add	r3, r1
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016304:	4910      	ldr	r1, [pc, #64]	@ (8016348 <etharp_update_arp_entry+0x148>)
 8016306:	4613      	mov	r3, r2
 8016308:	005b      	lsls	r3, r3, #1
 801630a:	4413      	add	r3, r2
 801630c:	00db      	lsls	r3, r3, #3
 801630e:	440b      	add	r3, r1
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801631a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6939      	ldr	r1, [r7, #16]
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f001 ff97 	bl	8018258 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801632a:	6938      	ldr	r0, [r7, #16]
 801632c:	f7f8 fd80 	bl	800ee30 <pbuf_free>
  }
  return ERR_OK;
 8016330:	2300      	movs	r3, #0
}
 8016332:	4618      	mov	r0, r3
 8016334:	3718      	adds	r7, #24
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	0801e434 	.word	0x0801e434
 8016340:	0801e52c 	.word	0x0801e52c
 8016344:	0801e4ac 	.word	0x0801e4ac
 8016348:	2000e178 	.word	0x2000e178

0801634c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016354:	2300      	movs	r3, #0
 8016356:	60fb      	str	r3, [r7, #12]
 8016358:	e01e      	b.n	8016398 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801635a:	4913      	ldr	r1, [pc, #76]	@ (80163a8 <etharp_cleanup_netif+0x5c>)
 801635c:	68fa      	ldr	r2, [r7, #12]
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	3314      	adds	r3, #20
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801636e:	7afb      	ldrb	r3, [r7, #11]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d00e      	beq.n	8016392 <etharp_cleanup_netif+0x46>
 8016374:	490c      	ldr	r1, [pc, #48]	@ (80163a8 <etharp_cleanup_netif+0x5c>)
 8016376:	68fa      	ldr	r2, [r7, #12]
 8016378:	4613      	mov	r3, r2
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	4413      	add	r3, r2
 801637e:	00db      	lsls	r3, r3, #3
 8016380:	440b      	add	r3, r1
 8016382:	3308      	adds	r3, #8
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	429a      	cmp	r2, r3
 801638a:	d102      	bne.n	8016392 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f7ff fce5 	bl	8015d5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	3301      	adds	r3, #1
 8016396:	60fb      	str	r3, [r7, #12]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2b09      	cmp	r3, #9
 801639c:	dddd      	ble.n	801635a <etharp_cleanup_netif+0xe>
    }
  }
}
 801639e:	bf00      	nop
 80163a0:	bf00      	nop
 80163a2:	3710      	adds	r7, #16
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	2000e178 	.word	0x2000e178

080163ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80163ac:	b5b0      	push	{r4, r5, r7, lr}
 80163ae:	b08a      	sub	sp, #40	@ 0x28
 80163b0:	af04      	add	r7, sp, #16
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d107      	bne.n	80163cc <etharp_input+0x20>
 80163bc:	4b3d      	ldr	r3, [pc, #244]	@ (80164b4 <etharp_input+0x108>)
 80163be:	f240 228a 	movw	r2, #650	@ 0x28a
 80163c2:	493d      	ldr	r1, [pc, #244]	@ (80164b8 <etharp_input+0x10c>)
 80163c4:	483d      	ldr	r0, [pc, #244]	@ (80164bc <etharp_input+0x110>)
 80163c6:	f002 fe7d 	bl	80190c4 <iprintf>
 80163ca:	e06f      	b.n	80164ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80163dc:	d10c      	bne.n	80163f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80163e2:	2b06      	cmp	r3, #6
 80163e4:	d108      	bne.n	80163f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80163ea:	2b04      	cmp	r3, #4
 80163ec:	d104      	bne.n	80163f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	885b      	ldrh	r3, [r3, #2]
 80163f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80163f4:	2b08      	cmp	r3, #8
 80163f6:	d003      	beq.n	8016400 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7f8 fd19 	bl	800ee30 <pbuf_free>
    return;
 80163fe:	e055      	b.n	80164ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016400:	693b      	ldr	r3, [r7, #16]
 8016402:	330e      	adds	r3, #14
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	3318      	adds	r3, #24
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	3304      	adds	r3, #4
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d102      	bne.n	8016420 <etharp_input+0x74>
    for_us = 0;
 801641a:	2300      	movs	r3, #0
 801641c:	75fb      	strb	r3, [r7, #23]
 801641e:	e009      	b.n	8016434 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	3304      	adds	r3, #4
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	429a      	cmp	r2, r3
 801642a:	bf0c      	ite	eq
 801642c:	2301      	moveq	r3, #1
 801642e:	2300      	movne	r3, #0
 8016430:	b2db      	uxtb	r3, r3
 8016432:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	f103 0208 	add.w	r2, r3, #8
 801643a:	7dfb      	ldrb	r3, [r7, #23]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d001      	beq.n	8016444 <etharp_input+0x98>
 8016440:	2301      	movs	r3, #1
 8016442:	e000      	b.n	8016446 <etharp_input+0x9a>
 8016444:	2302      	movs	r3, #2
 8016446:	f107 010c 	add.w	r1, r7, #12
 801644a:	6838      	ldr	r0, [r7, #0]
 801644c:	f7ff fed8 	bl	8016200 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	88db      	ldrh	r3, [r3, #6]
 8016454:	b29b      	uxth	r3, r3
 8016456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801645a:	d003      	beq.n	8016464 <etharp_input+0xb8>
 801645c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016460:	d01e      	beq.n	80164a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016462:	e020      	b.n	80164a6 <etharp_input+0xfa>
      if (for_us) {
 8016464:	7dfb      	ldrb	r3, [r7, #23]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d01c      	beq.n	80164a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016480:	693a      	ldr	r2, [r7, #16]
 8016482:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016484:	2102      	movs	r1, #2
 8016486:	9103      	str	r1, [sp, #12]
 8016488:	f107 010c 	add.w	r1, r7, #12
 801648c:	9102      	str	r1, [sp, #8]
 801648e:	9201      	str	r2, [sp, #4]
 8016490:	9300      	str	r3, [sp, #0]
 8016492:	462b      	mov	r3, r5
 8016494:	4622      	mov	r2, r4
 8016496:	4601      	mov	r1, r0
 8016498:	6838      	ldr	r0, [r7, #0]
 801649a:	f000 faeb 	bl	8016a74 <etharp_raw>
      break;
 801649e:	e001      	b.n	80164a4 <etharp_input+0xf8>
      break;
 80164a0:	bf00      	nop
 80164a2:	e000      	b.n	80164a6 <etharp_input+0xfa>
      break;
 80164a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f7f8 fcc2 	bl	800ee30 <pbuf_free>
}
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bdb0      	pop	{r4, r5, r7, pc}
 80164b2:	bf00      	nop
 80164b4:	0801e434 	.word	0x0801e434
 80164b8:	0801e584 	.word	0x0801e584
 80164bc:	0801e4ac 	.word	0x0801e4ac

080164c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af02      	add	r7, sp, #8
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	4613      	mov	r3, r2
 80164cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80164ce:	79fa      	ldrb	r2, [r7, #7]
 80164d0:	4944      	ldr	r1, [pc, #272]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	00db      	lsls	r3, r3, #3
 80164da:	440b      	add	r3, r1
 80164dc:	3314      	adds	r3, #20
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d806      	bhi.n	80164f2 <etharp_output_to_arp_index+0x32>
 80164e4:	4b40      	ldr	r3, [pc, #256]	@ (80165e8 <etharp_output_to_arp_index+0x128>)
 80164e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80164ea:	4940      	ldr	r1, [pc, #256]	@ (80165ec <etharp_output_to_arp_index+0x12c>)
 80164ec:	4840      	ldr	r0, [pc, #256]	@ (80165f0 <etharp_output_to_arp_index+0x130>)
 80164ee:	f002 fde9 	bl	80190c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80164f2:	79fa      	ldrb	r2, [r7, #7]
 80164f4:	493b      	ldr	r1, [pc, #236]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 80164f6:	4613      	mov	r3, r2
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	4413      	add	r3, r2
 80164fc:	00db      	lsls	r3, r3, #3
 80164fe:	440b      	add	r3, r1
 8016500:	3314      	adds	r3, #20
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	2b02      	cmp	r3, #2
 8016506:	d153      	bne.n	80165b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016508:	79fa      	ldrb	r2, [r7, #7]
 801650a:	4936      	ldr	r1, [pc, #216]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 801650c:	4613      	mov	r3, r2
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	4413      	add	r3, r2
 8016512:	00db      	lsls	r3, r3, #3
 8016514:	440b      	add	r3, r1
 8016516:	3312      	adds	r3, #18
 8016518:	881b      	ldrh	r3, [r3, #0]
 801651a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801651e:	d919      	bls.n	8016554 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016520:	79fa      	ldrb	r2, [r7, #7]
 8016522:	4613      	mov	r3, r2
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	4a2e      	ldr	r2, [pc, #184]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 801652c:	4413      	add	r3, r2
 801652e:	3304      	adds	r3, #4
 8016530:	4619      	mov	r1, r3
 8016532:	68f8      	ldr	r0, [r7, #12]
 8016534:	f000 fb4c 	bl	8016bd0 <etharp_request>
 8016538:	4603      	mov	r3, r0
 801653a:	2b00      	cmp	r3, #0
 801653c:	d138      	bne.n	80165b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801653e:	79fa      	ldrb	r2, [r7, #7]
 8016540:	4928      	ldr	r1, [pc, #160]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 8016542:	4613      	mov	r3, r2
 8016544:	005b      	lsls	r3, r3, #1
 8016546:	4413      	add	r3, r2
 8016548:	00db      	lsls	r3, r3, #3
 801654a:	440b      	add	r3, r1
 801654c:	3314      	adds	r3, #20
 801654e:	2203      	movs	r2, #3
 8016550:	701a      	strb	r2, [r3, #0]
 8016552:	e02d      	b.n	80165b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016554:	79fa      	ldrb	r2, [r7, #7]
 8016556:	4923      	ldr	r1, [pc, #140]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 8016558:	4613      	mov	r3, r2
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	4413      	add	r3, r2
 801655e:	00db      	lsls	r3, r3, #3
 8016560:	440b      	add	r3, r1
 8016562:	3312      	adds	r3, #18
 8016564:	881b      	ldrh	r3, [r3, #0]
 8016566:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801656a:	d321      	bcc.n	80165b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801656c:	79fa      	ldrb	r2, [r7, #7]
 801656e:	4613      	mov	r3, r2
 8016570:	005b      	lsls	r3, r3, #1
 8016572:	4413      	add	r3, r2
 8016574:	00db      	lsls	r3, r3, #3
 8016576:	4a1b      	ldr	r2, [pc, #108]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 8016578:	4413      	add	r3, r2
 801657a:	1d19      	adds	r1, r3, #4
 801657c:	79fa      	ldrb	r2, [r7, #7]
 801657e:	4613      	mov	r3, r2
 8016580:	005b      	lsls	r3, r3, #1
 8016582:	4413      	add	r3, r2
 8016584:	00db      	lsls	r3, r3, #3
 8016586:	3308      	adds	r3, #8
 8016588:	4a16      	ldr	r2, [pc, #88]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 801658a:	4413      	add	r3, r2
 801658c:	3304      	adds	r3, #4
 801658e:	461a      	mov	r2, r3
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f000 fafb 	bl	8016b8c <etharp_request_dst>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d109      	bne.n	80165b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801659c:	79fa      	ldrb	r2, [r7, #7]
 801659e:	4911      	ldr	r1, [pc, #68]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 80165a0:	4613      	mov	r3, r2
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	4413      	add	r3, r2
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	440b      	add	r3, r1
 80165aa:	3314      	adds	r3, #20
 80165ac:	2203      	movs	r2, #3
 80165ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80165b6:	79fa      	ldrb	r2, [r7, #7]
 80165b8:	4613      	mov	r3, r2
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	4413      	add	r3, r2
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	3308      	adds	r3, #8
 80165c2:	4a08      	ldr	r2, [pc, #32]	@ (80165e4 <etharp_output_to_arp_index+0x124>)
 80165c4:	4413      	add	r3, r2
 80165c6:	3304      	adds	r3, #4
 80165c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80165cc:	9200      	str	r2, [sp, #0]
 80165ce:	460a      	mov	r2, r1
 80165d0:	68b9      	ldr	r1, [r7, #8]
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f001 fe40 	bl	8018258 <ethernet_output>
 80165d8:	4603      	mov	r3, r0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	2000e178 	.word	0x2000e178
 80165e8:	0801e434 	.word	0x0801e434
 80165ec:	0801e5a4 	.word	0x0801e5a4
 80165f0:	0801e4ac 	.word	0x0801e4ac

080165f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b08a      	sub	sp, #40	@ 0x28
 80165f8:	af02      	add	r7, sp, #8
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <etharp_output+0x24>
 801660a:	4b73      	ldr	r3, [pc, #460]	@ (80167d8 <etharp_output+0x1e4>)
 801660c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016610:	4972      	ldr	r1, [pc, #456]	@ (80167dc <etharp_output+0x1e8>)
 8016612:	4873      	ldr	r0, [pc, #460]	@ (80167e0 <etharp_output+0x1ec>)
 8016614:	f002 fd56 	bl	80190c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d106      	bne.n	801662c <etharp_output+0x38>
 801661e:	4b6e      	ldr	r3, [pc, #440]	@ (80167d8 <etharp_output+0x1e4>)
 8016620:	f240 321f 	movw	r2, #799	@ 0x31f
 8016624:	496f      	ldr	r1, [pc, #444]	@ (80167e4 <etharp_output+0x1f0>)
 8016626:	486e      	ldr	r0, [pc, #440]	@ (80167e0 <etharp_output+0x1ec>)
 8016628:	f002 fd4c 	bl	80190c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d106      	bne.n	8016640 <etharp_output+0x4c>
 8016632:	4b69      	ldr	r3, [pc, #420]	@ (80167d8 <etharp_output+0x1e4>)
 8016634:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016638:	496b      	ldr	r1, [pc, #428]	@ (80167e8 <etharp_output+0x1f4>)
 801663a:	4869      	ldr	r0, [pc, #420]	@ (80167e0 <etharp_output+0x1ec>)
 801663c:	f002 fd42 	bl	80190c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	68f9      	ldr	r1, [r7, #12]
 8016646:	4618      	mov	r0, r3
 8016648:	f000 fef8 	bl	801743c <ip4_addr_isbroadcast_u32>
 801664c:	4603      	mov	r3, r0
 801664e:	2b00      	cmp	r3, #0
 8016650:	d002      	beq.n	8016658 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016652:	4b66      	ldr	r3, [pc, #408]	@ (80167ec <etharp_output+0x1f8>)
 8016654:	61fb      	str	r3, [r7, #28]
 8016656:	e0af      	b.n	80167b8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016660:	2be0      	cmp	r3, #224	@ 0xe0
 8016662:	d118      	bne.n	8016696 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016664:	2301      	movs	r3, #1
 8016666:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016668:	2300      	movs	r3, #0
 801666a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801666c:	235e      	movs	r3, #94	@ 0x5e
 801666e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	3301      	adds	r3, #1
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801667a:	b2db      	uxtb	r3, r3
 801667c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	3302      	adds	r3, #2
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	3303      	adds	r3, #3
 801668a:	781b      	ldrb	r3, [r3, #0]
 801668c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801668e:	f107 0310 	add.w	r3, r7, #16
 8016692:	61fb      	str	r3, [r7, #28]
 8016694:	e090      	b.n	80167b8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	3304      	adds	r3, #4
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	405a      	eors	r2, r3
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	3308      	adds	r3, #8
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4013      	ands	r3, r2
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d012      	beq.n	80166d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80166b4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80166b8:	4293      	cmp	r3, r2
 80166ba:	d00b      	beq.n	80166d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	330c      	adds	r3, #12
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d003      	beq.n	80166ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	330c      	adds	r3, #12
 80166ca:	61bb      	str	r3, [r7, #24]
 80166cc:	e002      	b.n	80166d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80166ce:	f06f 0303 	mvn.w	r3, #3
 80166d2:	e07d      	b.n	80167d0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80166d4:	4b46      	ldr	r3, [pc, #280]	@ (80167f0 <etharp_output+0x1fc>)
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	4619      	mov	r1, r3
 80166da:	4a46      	ldr	r2, [pc, #280]	@ (80167f4 <etharp_output+0x200>)
 80166dc:	460b      	mov	r3, r1
 80166de:	005b      	lsls	r3, r3, #1
 80166e0:	440b      	add	r3, r1
 80166e2:	00db      	lsls	r3, r3, #3
 80166e4:	4413      	add	r3, r2
 80166e6:	3314      	adds	r3, #20
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d925      	bls.n	801673a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80166ee:	4b40      	ldr	r3, [pc, #256]	@ (80167f0 <etharp_output+0x1fc>)
 80166f0:	781b      	ldrb	r3, [r3, #0]
 80166f2:	4619      	mov	r1, r3
 80166f4:	4a3f      	ldr	r2, [pc, #252]	@ (80167f4 <etharp_output+0x200>)
 80166f6:	460b      	mov	r3, r1
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	440b      	add	r3, r1
 80166fc:	00db      	lsls	r3, r3, #3
 80166fe:	4413      	add	r3, r2
 8016700:	3308      	adds	r3, #8
 8016702:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016704:	68fa      	ldr	r2, [r7, #12]
 8016706:	429a      	cmp	r2, r3
 8016708:	d117      	bne.n	801673a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	4b38      	ldr	r3, [pc, #224]	@ (80167f0 <etharp_output+0x1fc>)
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	4618      	mov	r0, r3
 8016714:	4937      	ldr	r1, [pc, #220]	@ (80167f4 <etharp_output+0x200>)
 8016716:	4603      	mov	r3, r0
 8016718:	005b      	lsls	r3, r3, #1
 801671a:	4403      	add	r3, r0
 801671c:	00db      	lsls	r3, r3, #3
 801671e:	440b      	add	r3, r1
 8016720:	3304      	adds	r3, #4
 8016722:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016724:	429a      	cmp	r2, r3
 8016726:	d108      	bne.n	801673a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016728:	4b31      	ldr	r3, [pc, #196]	@ (80167f0 <etharp_output+0x1fc>)
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	461a      	mov	r2, r3
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f7ff fec5 	bl	80164c0 <etharp_output_to_arp_index>
 8016736:	4603      	mov	r3, r0
 8016738:	e04a      	b.n	80167d0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801673a:	2300      	movs	r3, #0
 801673c:	75fb      	strb	r3, [r7, #23]
 801673e:	e031      	b.n	80167a4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016740:	7dfa      	ldrb	r2, [r7, #23]
 8016742:	492c      	ldr	r1, [pc, #176]	@ (80167f4 <etharp_output+0x200>)
 8016744:	4613      	mov	r3, r2
 8016746:	005b      	lsls	r3, r3, #1
 8016748:	4413      	add	r3, r2
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	440b      	add	r3, r1
 801674e:	3314      	adds	r3, #20
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	2b01      	cmp	r3, #1
 8016754:	d923      	bls.n	801679e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016756:	7dfa      	ldrb	r2, [r7, #23]
 8016758:	4926      	ldr	r1, [pc, #152]	@ (80167f4 <etharp_output+0x200>)
 801675a:	4613      	mov	r3, r2
 801675c:	005b      	lsls	r3, r3, #1
 801675e:	4413      	add	r3, r2
 8016760:	00db      	lsls	r3, r3, #3
 8016762:	440b      	add	r3, r1
 8016764:	3308      	adds	r3, #8
 8016766:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016768:	68fa      	ldr	r2, [r7, #12]
 801676a:	429a      	cmp	r2, r3
 801676c:	d117      	bne.n	801679e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801676e:	69bb      	ldr	r3, [r7, #24]
 8016770:	6819      	ldr	r1, [r3, #0]
 8016772:	7dfa      	ldrb	r2, [r7, #23]
 8016774:	481f      	ldr	r0, [pc, #124]	@ (80167f4 <etharp_output+0x200>)
 8016776:	4613      	mov	r3, r2
 8016778:	005b      	lsls	r3, r3, #1
 801677a:	4413      	add	r3, r2
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	4403      	add	r3, r0
 8016780:	3304      	adds	r3, #4
 8016782:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016784:	4299      	cmp	r1, r3
 8016786:	d10a      	bne.n	801679e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016788:	4a19      	ldr	r2, [pc, #100]	@ (80167f0 <etharp_output+0x1fc>)
 801678a:	7dfb      	ldrb	r3, [r7, #23]
 801678c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801678e:	7dfb      	ldrb	r3, [r7, #23]
 8016790:	461a      	mov	r2, r3
 8016792:	68b9      	ldr	r1, [r7, #8]
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	f7ff fe93 	bl	80164c0 <etharp_output_to_arp_index>
 801679a:	4603      	mov	r3, r0
 801679c:	e018      	b.n	80167d0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801679e:	7dfb      	ldrb	r3, [r7, #23]
 80167a0:	3301      	adds	r3, #1
 80167a2:	75fb      	strb	r3, [r7, #23]
 80167a4:	7dfb      	ldrb	r3, [r7, #23]
 80167a6:	2b09      	cmp	r3, #9
 80167a8:	d9ca      	bls.n	8016740 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80167aa:	68ba      	ldr	r2, [r7, #8]
 80167ac:	69b9      	ldr	r1, [r7, #24]
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	f000 f822 	bl	80167f8 <etharp_query>
 80167b4:	4603      	mov	r3, r0
 80167b6:	e00b      	b.n	80167d0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80167be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80167c2:	9300      	str	r3, [sp, #0]
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	68b9      	ldr	r1, [r7, #8]
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f001 fd45 	bl	8018258 <ethernet_output>
 80167ce:	4603      	mov	r3, r0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3720      	adds	r7, #32
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	0801e434 	.word	0x0801e434
 80167dc:	0801e584 	.word	0x0801e584
 80167e0:	0801e4ac 	.word	0x0801e4ac
 80167e4:	0801e5d4 	.word	0x0801e5d4
 80167e8:	0801e574 	.word	0x0801e574
 80167ec:	0801ec4c 	.word	0x0801ec4c
 80167f0:	2000e268 	.word	0x2000e268
 80167f4:	2000e178 	.word	0x2000e178

080167f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b08c      	sub	sp, #48	@ 0x30
 80167fc:	af02      	add	r7, sp, #8
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3326      	adds	r3, #38	@ 0x26
 8016808:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801680a:	23ff      	movs	r3, #255	@ 0xff
 801680c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016810:	2300      	movs	r3, #0
 8016812:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	68f9      	ldr	r1, [r7, #12]
 801681a:	4618      	mov	r0, r3
 801681c:	f000 fe0e 	bl	801743c <ip4_addr_isbroadcast_u32>
 8016820:	4603      	mov	r3, r0
 8016822:	2b00      	cmp	r3, #0
 8016824:	d10c      	bne.n	8016840 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801682e:	2be0      	cmp	r3, #224	@ 0xe0
 8016830:	d006      	beq.n	8016840 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d003      	beq.n	8016840 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d102      	bne.n	8016846 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016840:	f06f 030f 	mvn.w	r3, #15
 8016844:	e101      	b.n	8016a4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016846:	68fa      	ldr	r2, [r7, #12]
 8016848:	2101      	movs	r1, #1
 801684a:	68b8      	ldr	r0, [r7, #8]
 801684c:	f7ff fb60 	bl	8015f10 <etharp_find_entry>
 8016850:	4603      	mov	r3, r0
 8016852:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016854:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016858:	2b00      	cmp	r3, #0
 801685a:	da02      	bge.n	8016862 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801685c:	8a7b      	ldrh	r3, [r7, #18]
 801685e:	b25b      	sxtb	r3, r3
 8016860:	e0f3      	b.n	8016a4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016862:	8a7b      	ldrh	r3, [r7, #18]
 8016864:	2b7e      	cmp	r3, #126	@ 0x7e
 8016866:	d906      	bls.n	8016876 <etharp_query+0x7e>
 8016868:	4b7a      	ldr	r3, [pc, #488]	@ (8016a54 <etharp_query+0x25c>)
 801686a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801686e:	497a      	ldr	r1, [pc, #488]	@ (8016a58 <etharp_query+0x260>)
 8016870:	487a      	ldr	r0, [pc, #488]	@ (8016a5c <etharp_query+0x264>)
 8016872:	f002 fc27 	bl	80190c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016876:	8a7b      	ldrh	r3, [r7, #18]
 8016878:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801687a:	7c7a      	ldrb	r2, [r7, #17]
 801687c:	4978      	ldr	r1, [pc, #480]	@ (8016a60 <etharp_query+0x268>)
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	440b      	add	r3, r1
 8016888:	3314      	adds	r3, #20
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d115      	bne.n	80168bc <etharp_query+0xc4>
    is_new_entry = 1;
 8016890:	2301      	movs	r3, #1
 8016892:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016894:	7c7a      	ldrb	r2, [r7, #17]
 8016896:	4972      	ldr	r1, [pc, #456]	@ (8016a60 <etharp_query+0x268>)
 8016898:	4613      	mov	r3, r2
 801689a:	005b      	lsls	r3, r3, #1
 801689c:	4413      	add	r3, r2
 801689e:	00db      	lsls	r3, r3, #3
 80168a0:	440b      	add	r3, r1
 80168a2:	3314      	adds	r3, #20
 80168a4:	2201      	movs	r2, #1
 80168a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80168a8:	7c7a      	ldrb	r2, [r7, #17]
 80168aa:	496d      	ldr	r1, [pc, #436]	@ (8016a60 <etharp_query+0x268>)
 80168ac:	4613      	mov	r3, r2
 80168ae:	005b      	lsls	r3, r3, #1
 80168b0:	4413      	add	r3, r2
 80168b2:	00db      	lsls	r3, r3, #3
 80168b4:	440b      	add	r3, r1
 80168b6:	3308      	adds	r3, #8
 80168b8:	68fa      	ldr	r2, [r7, #12]
 80168ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80168bc:	7c7a      	ldrb	r2, [r7, #17]
 80168be:	4968      	ldr	r1, [pc, #416]	@ (8016a60 <etharp_query+0x268>)
 80168c0:	4613      	mov	r3, r2
 80168c2:	005b      	lsls	r3, r3, #1
 80168c4:	4413      	add	r3, r2
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	440b      	add	r3, r1
 80168ca:	3314      	adds	r3, #20
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	2b01      	cmp	r3, #1
 80168d0:	d011      	beq.n	80168f6 <etharp_query+0xfe>
 80168d2:	7c7a      	ldrb	r2, [r7, #17]
 80168d4:	4962      	ldr	r1, [pc, #392]	@ (8016a60 <etharp_query+0x268>)
 80168d6:	4613      	mov	r3, r2
 80168d8:	005b      	lsls	r3, r3, #1
 80168da:	4413      	add	r3, r2
 80168dc:	00db      	lsls	r3, r3, #3
 80168de:	440b      	add	r3, r1
 80168e0:	3314      	adds	r3, #20
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	d806      	bhi.n	80168f6 <etharp_query+0xfe>
 80168e8:	4b5a      	ldr	r3, [pc, #360]	@ (8016a54 <etharp_query+0x25c>)
 80168ea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80168ee:	495d      	ldr	r1, [pc, #372]	@ (8016a64 <etharp_query+0x26c>)
 80168f0:	485a      	ldr	r0, [pc, #360]	@ (8016a5c <etharp_query+0x264>)
 80168f2:	f002 fbe7 	bl	80190c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80168f6:	6a3b      	ldr	r3, [r7, #32]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d102      	bne.n	8016902 <etharp_query+0x10a>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d10c      	bne.n	801691c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016902:	68b9      	ldr	r1, [r7, #8]
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f000 f963 	bl	8016bd0 <etharp_request>
 801690a:	4603      	mov	r3, r0
 801690c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d102      	bne.n	801691c <etharp_query+0x124>
      return result;
 8016916:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801691a:	e096      	b.n	8016a4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d106      	bne.n	8016930 <etharp_query+0x138>
 8016922:	4b4c      	ldr	r3, [pc, #304]	@ (8016a54 <etharp_query+0x25c>)
 8016924:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016928:	494f      	ldr	r1, [pc, #316]	@ (8016a68 <etharp_query+0x270>)
 801692a:	484c      	ldr	r0, [pc, #304]	@ (8016a5c <etharp_query+0x264>)
 801692c:	f002 fbca 	bl	80190c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016930:	7c7a      	ldrb	r2, [r7, #17]
 8016932:	494b      	ldr	r1, [pc, #300]	@ (8016a60 <etharp_query+0x268>)
 8016934:	4613      	mov	r3, r2
 8016936:	005b      	lsls	r3, r3, #1
 8016938:	4413      	add	r3, r2
 801693a:	00db      	lsls	r3, r3, #3
 801693c:	440b      	add	r3, r1
 801693e:	3314      	adds	r3, #20
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	2b01      	cmp	r3, #1
 8016944:	d917      	bls.n	8016976 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016946:	4a49      	ldr	r2, [pc, #292]	@ (8016a6c <etharp_query+0x274>)
 8016948:	7c7b      	ldrb	r3, [r7, #17]
 801694a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801694c:	7c7a      	ldrb	r2, [r7, #17]
 801694e:	4613      	mov	r3, r2
 8016950:	005b      	lsls	r3, r3, #1
 8016952:	4413      	add	r3, r2
 8016954:	00db      	lsls	r3, r3, #3
 8016956:	3308      	adds	r3, #8
 8016958:	4a41      	ldr	r2, [pc, #260]	@ (8016a60 <etharp_query+0x268>)
 801695a:	4413      	add	r3, r2
 801695c:	3304      	adds	r3, #4
 801695e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016962:	9200      	str	r2, [sp, #0]
 8016964:	697a      	ldr	r2, [r7, #20]
 8016966:	6879      	ldr	r1, [r7, #4]
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f001 fc75 	bl	8018258 <ethernet_output>
 801696e:	4603      	mov	r3, r0
 8016970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016974:	e067      	b.n	8016a46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016976:	7c7a      	ldrb	r2, [r7, #17]
 8016978:	4939      	ldr	r1, [pc, #228]	@ (8016a60 <etharp_query+0x268>)
 801697a:	4613      	mov	r3, r2
 801697c:	005b      	lsls	r3, r3, #1
 801697e:	4413      	add	r3, r2
 8016980:	00db      	lsls	r3, r3, #3
 8016982:	440b      	add	r3, r1
 8016984:	3314      	adds	r3, #20
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	2b01      	cmp	r3, #1
 801698a:	d15c      	bne.n	8016a46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801698c:	2300      	movs	r3, #0
 801698e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016994:	e01c      	b.n	80169d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	895a      	ldrh	r2, [r3, #10]
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	891b      	ldrh	r3, [r3, #8]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d10a      	bne.n	80169b8 <etharp_query+0x1c0>
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d006      	beq.n	80169b8 <etharp_query+0x1c0>
 80169aa:	4b2a      	ldr	r3, [pc, #168]	@ (8016a54 <etharp_query+0x25c>)
 80169ac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80169b0:	492f      	ldr	r1, [pc, #188]	@ (8016a70 <etharp_query+0x278>)
 80169b2:	482a      	ldr	r0, [pc, #168]	@ (8016a5c <etharp_query+0x264>)
 80169b4:	f002 fb86 	bl	80190c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	7b1b      	ldrb	r3, [r3, #12]
 80169bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <etharp_query+0x1d2>
        copy_needed = 1;
 80169c4:	2301      	movs	r3, #1
 80169c6:	61bb      	str	r3, [r7, #24]
        break;
 80169c8:	e005      	b.n	80169d6 <etharp_query+0x1de>
      }
      p = p->next;
 80169ca:	69fb      	ldr	r3, [r7, #28]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d1df      	bne.n	8016996 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d007      	beq.n	80169ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80169dc:	687a      	ldr	r2, [r7, #4]
 80169de:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80169e2:	200e      	movs	r0, #14
 80169e4:	f7f8 fc8c 	bl	800f300 <pbuf_clone>
 80169e8:	61f8      	str	r0, [r7, #28]
 80169ea:	e004      	b.n	80169f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80169f0:	69f8      	ldr	r0, [r7, #28]
 80169f2:	f7f8 fac3 	bl	800ef7c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80169f6:	69fb      	ldr	r3, [r7, #28]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d021      	beq.n	8016a40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80169fc:	7c7a      	ldrb	r2, [r7, #17]
 80169fe:	4918      	ldr	r1, [pc, #96]	@ (8016a60 <etharp_query+0x268>)
 8016a00:	4613      	mov	r3, r2
 8016a02:	005b      	lsls	r3, r3, #1
 8016a04:	4413      	add	r3, r2
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	440b      	add	r3, r1
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016a10:	7c7a      	ldrb	r2, [r7, #17]
 8016a12:	4913      	ldr	r1, [pc, #76]	@ (8016a60 <etharp_query+0x268>)
 8016a14:	4613      	mov	r3, r2
 8016a16:	005b      	lsls	r3, r3, #1
 8016a18:	4413      	add	r3, r2
 8016a1a:	00db      	lsls	r3, r3, #3
 8016a1c:	440b      	add	r3, r1
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f8 fa05 	bl	800ee30 <pbuf_free>
      }
      arp_table[i].q = p;
 8016a26:	7c7a      	ldrb	r2, [r7, #17]
 8016a28:	490d      	ldr	r1, [pc, #52]	@ (8016a60 <etharp_query+0x268>)
 8016a2a:	4613      	mov	r3, r2
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4413      	add	r3, r2
 8016a30:	00db      	lsls	r3, r3, #3
 8016a32:	440b      	add	r3, r1
 8016a34:	69fa      	ldr	r2, [r7, #28]
 8016a36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016a3e:	e002      	b.n	8016a46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016a40:	23ff      	movs	r3, #255	@ 0xff
 8016a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016a46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3728      	adds	r7, #40	@ 0x28
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	0801e434 	.word	0x0801e434
 8016a58:	0801e5e0 	.word	0x0801e5e0
 8016a5c:	0801e4ac 	.word	0x0801e4ac
 8016a60:	2000e178 	.word	0x2000e178
 8016a64:	0801e5f0 	.word	0x0801e5f0
 8016a68:	0801e5d4 	.word	0x0801e5d4
 8016a6c:	2000e268 	.word	0x2000e268
 8016a70:	0801e618 	.word	0x0801e618

08016a74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b08a      	sub	sp, #40	@ 0x28
 8016a78:	af02      	add	r7, sp, #8
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	607a      	str	r2, [r7, #4]
 8016a80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016a82:	2300      	movs	r3, #0
 8016a84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d106      	bne.n	8016a9a <etharp_raw+0x26>
 8016a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8016b78 <etharp_raw+0x104>)
 8016a8e:	f240 4257 	movw	r2, #1111	@ 0x457
 8016a92:	493a      	ldr	r1, [pc, #232]	@ (8016b7c <etharp_raw+0x108>)
 8016a94:	483a      	ldr	r0, [pc, #232]	@ (8016b80 <etharp_raw+0x10c>)
 8016a96:	f002 fb15 	bl	80190c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016a9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a9e:	211c      	movs	r1, #28
 8016aa0:	200e      	movs	r0, #14
 8016aa2:	f7f7 fee1 	bl	800e868 <pbuf_alloc>
 8016aa6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d102      	bne.n	8016ab4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016aae:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab2:	e05d      	b.n	8016b70 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	895b      	ldrh	r3, [r3, #10]
 8016ab8:	2b1b      	cmp	r3, #27
 8016aba:	d806      	bhi.n	8016aca <etharp_raw+0x56>
 8016abc:	4b2e      	ldr	r3, [pc, #184]	@ (8016b78 <etharp_raw+0x104>)
 8016abe:	f240 4262 	movw	r2, #1122	@ 0x462
 8016ac2:	4930      	ldr	r1, [pc, #192]	@ (8016b84 <etharp_raw+0x110>)
 8016ac4:	482e      	ldr	r0, [pc, #184]	@ (8016b80 <etharp_raw+0x10c>)
 8016ac6:	f002 fafd 	bl	80190c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016aca:	69bb      	ldr	r3, [r7, #24]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016ad0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f6 fe00 	bl	800d6d8 <lwip_htons>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	461a      	mov	r2, r3
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016ae6:	2b06      	cmp	r3, #6
 8016ae8:	d006      	beq.n	8016af8 <etharp_raw+0x84>
 8016aea:	4b23      	ldr	r3, [pc, #140]	@ (8016b78 <etharp_raw+0x104>)
 8016aec:	f240 4269 	movw	r2, #1129	@ 0x469
 8016af0:	4925      	ldr	r1, [pc, #148]	@ (8016b88 <etharp_raw+0x114>)
 8016af2:	4823      	ldr	r0, [pc, #140]	@ (8016b80 <etharp_raw+0x10c>)
 8016af4:	f002 fae6 	bl	80190c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	3308      	adds	r3, #8
 8016afc:	2206      	movs	r2, #6
 8016afe:	6839      	ldr	r1, [r7, #0]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f002 fd5e 	bl	80195c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	3312      	adds	r3, #18
 8016b0a:	2206      	movs	r2, #6
 8016b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f002 fd57 	bl	80195c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	330e      	adds	r3, #14
 8016b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b1a:	6812      	ldr	r2, [r2, #0]
 8016b1c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	3318      	adds	r3, #24
 8016b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b24:	6812      	ldr	r2, [r2, #0]
 8016b26:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	701a      	strb	r2, [r3, #0]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f042 0201 	orr.w	r2, r2, #1
 8016b34:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	f042 0208 	orr.w	r2, r2, #8
 8016b3e:	709a      	strb	r2, [r3, #2]
 8016b40:	2200      	movs	r2, #0
 8016b42:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	2206      	movs	r2, #6
 8016b48:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	2204      	movs	r2, #4
 8016b4e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016b50:	f640 0306 	movw	r3, #2054	@ 0x806
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	68ba      	ldr	r2, [r7, #8]
 8016b5a:	69b9      	ldr	r1, [r7, #24]
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f001 fb7b 	bl	8018258 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016b62:	69b8      	ldr	r0, [r7, #24]
 8016b64:	f7f8 f964 	bl	800ee30 <pbuf_free>
  p = NULL;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3720      	adds	r7, #32
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	0801e434 	.word	0x0801e434
 8016b7c:	0801e584 	.word	0x0801e584
 8016b80:	0801e4ac 	.word	0x0801e4ac
 8016b84:	0801e634 	.word	0x0801e634
 8016b88:	0801e668 	.word	0x0801e668

08016b8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b088      	sub	sp, #32
 8016b90:	af04      	add	r7, sp, #16
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016ba8:	2201      	movs	r2, #1
 8016baa:	9203      	str	r2, [sp, #12]
 8016bac:	68ba      	ldr	r2, [r7, #8]
 8016bae:	9202      	str	r2, [sp, #8]
 8016bb0:	4a06      	ldr	r2, [pc, #24]	@ (8016bcc <etharp_request_dst+0x40>)
 8016bb2:	9201      	str	r2, [sp, #4]
 8016bb4:	9300      	str	r3, [sp, #0]
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	687a      	ldr	r2, [r7, #4]
 8016bba:	68f8      	ldr	r0, [r7, #12]
 8016bbc:	f7ff ff5a 	bl	8016a74 <etharp_raw>
 8016bc0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	0801ec54 	.word	0x0801ec54

08016bd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b082      	sub	sp, #8
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
 8016bd8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016bda:	4a05      	ldr	r2, [pc, #20]	@ (8016bf0 <etharp_request+0x20>)
 8016bdc:	6839      	ldr	r1, [r7, #0]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7ff ffd4 	bl	8016b8c <etharp_request_dst>
 8016be4:	4603      	mov	r3, r0
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3708      	adds	r7, #8
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	0801ec4c 	.word	0x0801ec4c

08016bf4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08e      	sub	sp, #56	@ 0x38
 8016bf8:	af04      	add	r7, sp, #16
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016bfe:	4b79      	ldr	r3, [pc, #484]	@ (8016de4 <icmp_input+0x1f0>)
 8016c00:	689b      	ldr	r3, [r3, #8]
 8016c02:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	f003 030f 	and.w	r3, r3, #15
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016c14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016c16:	2b13      	cmp	r3, #19
 8016c18:	f240 80cd 	bls.w	8016db6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	895b      	ldrh	r3, [r3, #10]
 8016c20:	2b03      	cmp	r3, #3
 8016c22:	f240 80ca 	bls.w	8016dba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016c30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	f000 80b7 	beq.w	8016da8 <icmp_input+0x1b4>
 8016c3a:	2b08      	cmp	r3, #8
 8016c3c:	f040 80b7 	bne.w	8016dae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016c40:	4b69      	ldr	r3, [pc, #420]	@ (8016de8 <icmp_input+0x1f4>)
 8016c42:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c44:	4b67      	ldr	r3, [pc, #412]	@ (8016de4 <icmp_input+0x1f0>)
 8016c46:	695b      	ldr	r3, [r3, #20]
 8016c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016c4c:	2be0      	cmp	r3, #224	@ 0xe0
 8016c4e:	f000 80bb 	beq.w	8016dc8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016c52:	4b64      	ldr	r3, [pc, #400]	@ (8016de4 <icmp_input+0x1f0>)
 8016c54:	695b      	ldr	r3, [r3, #20]
 8016c56:	4a63      	ldr	r2, [pc, #396]	@ (8016de4 <icmp_input+0x1f0>)
 8016c58:	6812      	ldr	r2, [r2, #0]
 8016c5a:	4611      	mov	r1, r2
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 fbed 	bl	801743c <ip4_addr_isbroadcast_u32>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f040 80b1 	bne.w	8016dcc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	891b      	ldrh	r3, [r3, #8]
 8016c6e:	2b07      	cmp	r3, #7
 8016c70:	f240 80a5 	bls.w	8016dbe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016c74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016c76:	330e      	adds	r3, #14
 8016c78:	4619      	mov	r1, r3
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7f8 f842 	bl	800ed04 <pbuf_add_header>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d04b      	beq.n	8016d1e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	891a      	ldrh	r2, [r3, #8]
 8016c8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016c8c:	4413      	add	r3, r2
 8016c8e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	891b      	ldrh	r3, [r3, #8]
 8016c94:	8b7a      	ldrh	r2, [r7, #26]
 8016c96:	429a      	cmp	r2, r3
 8016c98:	f0c0 809a 	bcc.w	8016dd0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016c9c:	8b7b      	ldrh	r3, [r7, #26]
 8016c9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	200e      	movs	r0, #14
 8016ca6:	f7f7 fddf 	bl	800e868 <pbuf_alloc>
 8016caa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	f000 8090 	beq.w	8016dd4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	895b      	ldrh	r3, [r3, #10]
 8016cb8:	461a      	mov	r2, r3
 8016cba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016cbc:	3308      	adds	r3, #8
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d203      	bcs.n	8016cca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016cc2:	6978      	ldr	r0, [r7, #20]
 8016cc4:	f7f8 f8b4 	bl	800ee30 <pbuf_free>
          goto icmperr;
 8016cc8:	e085      	b.n	8016dd6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f002 fc75 	bl	80195c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016cd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016cda:	4619      	mov	r1, r3
 8016cdc:	6978      	ldr	r0, [r7, #20]
 8016cde:	f7f8 f821 	bl	800ed24 <pbuf_remove_header>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d009      	beq.n	8016cfc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016ce8:	4b40      	ldr	r3, [pc, #256]	@ (8016dec <icmp_input+0x1f8>)
 8016cea:	22b6      	movs	r2, #182	@ 0xb6
 8016cec:	4940      	ldr	r1, [pc, #256]	@ (8016df0 <icmp_input+0x1fc>)
 8016cee:	4841      	ldr	r0, [pc, #260]	@ (8016df4 <icmp_input+0x200>)
 8016cf0:	f002 f9e8 	bl	80190c4 <iprintf>
          pbuf_free(r);
 8016cf4:	6978      	ldr	r0, [r7, #20]
 8016cf6:	f7f8 f89b 	bl	800ee30 <pbuf_free>
          goto icmperr;
 8016cfa:	e06c      	b.n	8016dd6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016cfc:	6879      	ldr	r1, [r7, #4]
 8016cfe:	6978      	ldr	r0, [r7, #20]
 8016d00:	f7f8 f9ba 	bl	800f078 <pbuf_copy>
 8016d04:	4603      	mov	r3, r0
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d003      	beq.n	8016d12 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016d0a:	6978      	ldr	r0, [r7, #20]
 8016d0c:	f7f8 f890 	bl	800ee30 <pbuf_free>
          goto icmperr;
 8016d10:	e061      	b.n	8016dd6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f7f8 f88c 	bl	800ee30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	607b      	str	r3, [r7, #4]
 8016d1c:	e00f      	b.n	8016d3e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016d20:	330e      	adds	r3, #14
 8016d22:	4619      	mov	r1, r3
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7f7 fffd 	bl	800ed24 <pbuf_remove_header>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d006      	beq.n	8016d3e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016d30:	4b2e      	ldr	r3, [pc, #184]	@ (8016dec <icmp_input+0x1f8>)
 8016d32:	22c7      	movs	r2, #199	@ 0xc7
 8016d34:	4930      	ldr	r1, [pc, #192]	@ (8016df8 <icmp_input+0x204>)
 8016d36:	482f      	ldr	r0, [pc, #188]	@ (8016df4 <icmp_input+0x200>)
 8016d38:	f002 f9c4 	bl	80190c4 <iprintf>
          goto icmperr;
 8016d3c:	e04b      	b.n	8016dd6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	685b      	ldr	r3, [r3, #4]
 8016d42:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016d44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016d46:	4619      	mov	r1, r3
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7f7 ffdb 	bl	800ed04 <pbuf_add_header>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d12b      	bne.n	8016dac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	685b      	ldr	r3, [r3, #4]
 8016d58:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016d62:	4b20      	ldr	r3, [pc, #128]	@ (8016de4 <icmp_input+0x1f0>)
 8016d64:	691a      	ldr	r2, [r3, #16]
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	2200      	movs	r2, #0
 8016d74:	709a      	strb	r2, [r3, #2]
 8016d76:	2200      	movs	r2, #0
 8016d78:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	22ff      	movs	r2, #255	@ 0xff
 8016d7e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	2200      	movs	r2, #0
 8016d84:	729a      	strb	r2, [r3, #10]
 8016d86:	2200      	movs	r2, #0
 8016d88:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	9302      	str	r3, [sp, #8]
 8016d8e:	2301      	movs	r3, #1
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	2300      	movs	r3, #0
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	23ff      	movs	r3, #255	@ 0xff
 8016d98:	2200      	movs	r2, #0
 8016d9a:	69f9      	ldr	r1, [r7, #28]
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f000 fa75 	bl	801728c <ip4_output_if>
 8016da2:	4603      	mov	r3, r0
 8016da4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016da6:	e001      	b.n	8016dac <icmp_input+0x1b8>
      break;
 8016da8:	bf00      	nop
 8016daa:	e000      	b.n	8016dae <icmp_input+0x1ba>
      break;
 8016dac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f7f8 f83e 	bl	800ee30 <pbuf_free>
  return;
 8016db4:	e013      	b.n	8016dde <icmp_input+0x1ea>
    goto lenerr;
 8016db6:	bf00      	nop
 8016db8:	e002      	b.n	8016dc0 <icmp_input+0x1cc>
    goto lenerr;
 8016dba:	bf00      	nop
 8016dbc:	e000      	b.n	8016dc0 <icmp_input+0x1cc>
        goto lenerr;
 8016dbe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016dc0:	6878      	ldr	r0, [r7, #4]
 8016dc2:	f7f8 f835 	bl	800ee30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016dc6:	e00a      	b.n	8016dde <icmp_input+0x1ea>
        goto icmperr;
 8016dc8:	bf00      	nop
 8016dca:	e004      	b.n	8016dd6 <icmp_input+0x1e2>
        goto icmperr;
 8016dcc:	bf00      	nop
 8016dce:	e002      	b.n	8016dd6 <icmp_input+0x1e2>
          goto icmperr;
 8016dd0:	bf00      	nop
 8016dd2:	e000      	b.n	8016dd6 <icmp_input+0x1e2>
          goto icmperr;
 8016dd4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f7f8 f82a 	bl	800ee30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ddc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016dde:	3728      	adds	r7, #40	@ 0x28
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}
 8016de4:	20008804 	.word	0x20008804
 8016de8:	20008818 	.word	0x20008818
 8016dec:	0801e6ac 	.word	0x0801e6ac
 8016df0:	0801e6e4 	.word	0x0801e6e4
 8016df4:	0801e71c 	.word	0x0801e71c
 8016df8:	0801e744 	.word	0x0801e744

08016dfc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
 8016e04:	460b      	mov	r3, r1
 8016e06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016e08:	78fb      	ldrb	r3, [r7, #3]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	2103      	movs	r1, #3
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f000 f814 	bl	8016e3c <icmp_send_response>
}
 8016e14:	bf00      	nop
 8016e16:	3708      	adds	r7, #8
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}

08016e1c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	460b      	mov	r3, r1
 8016e26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016e28:	78fb      	ldrb	r3, [r7, #3]
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	210b      	movs	r1, #11
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f000 f804 	bl	8016e3c <icmp_send_response>
}
 8016e34:	bf00      	nop
 8016e36:	3708      	adds	r7, #8
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b08c      	sub	sp, #48	@ 0x30
 8016e40:	af04      	add	r7, sp, #16
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	460b      	mov	r3, r1
 8016e46:	70fb      	strb	r3, [r7, #3]
 8016e48:	4613      	mov	r3, r2
 8016e4a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016e4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e50:	2124      	movs	r1, #36	@ 0x24
 8016e52:	2022      	movs	r0, #34	@ 0x22
 8016e54:	f7f7 fd08 	bl	800e868 <pbuf_alloc>
 8016e58:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d04c      	beq.n	8016efa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	895b      	ldrh	r3, [r3, #10]
 8016e64:	2b23      	cmp	r3, #35	@ 0x23
 8016e66:	d806      	bhi.n	8016e76 <icmp_send_response+0x3a>
 8016e68:	4b26      	ldr	r3, [pc, #152]	@ (8016f04 <icmp_send_response+0xc8>)
 8016e6a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016e6e:	4926      	ldr	r1, [pc, #152]	@ (8016f08 <icmp_send_response+0xcc>)
 8016e70:	4826      	ldr	r0, [pc, #152]	@ (8016f0c <icmp_send_response+0xd0>)
 8016e72:	f002 f927 	bl	80190c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	78fa      	ldrb	r2, [r7, #3]
 8016e86:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	78ba      	ldrb	r2, [r7, #2]
 8016e8c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	2200      	movs	r2, #0
 8016e92:	711a      	strb	r2, [r3, #4]
 8016e94:	2200      	movs	r2, #0
 8016e96:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	719a      	strb	r2, [r3, #6]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016ea2:	69fb      	ldr	r3, [r7, #28]
 8016ea4:	685b      	ldr	r3, [r3, #4]
 8016ea6:	f103 0008 	add.w	r0, r3, #8
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	685b      	ldr	r3, [r3, #4]
 8016eae:	221c      	movs	r2, #28
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	f002 fb86 	bl	80195c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016eb6:	69bb      	ldr	r3, [r7, #24]
 8016eb8:	68db      	ldr	r3, [r3, #12]
 8016eba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016ebc:	f107 030c 	add.w	r3, r7, #12
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f000 f825 	bl	8016f10 <ip4_route>
 8016ec6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d011      	beq.n	8016ef2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	709a      	strb	r2, [r3, #2]
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016ed8:	f107 020c 	add.w	r2, r7, #12
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	9302      	str	r3, [sp, #8]
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	9301      	str	r3, [sp, #4]
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	9300      	str	r3, [sp, #0]
 8016ee8:	23ff      	movs	r3, #255	@ 0xff
 8016eea:	2100      	movs	r1, #0
 8016eec:	69f8      	ldr	r0, [r7, #28]
 8016eee:	f000 f9cd 	bl	801728c <ip4_output_if>
  }
  pbuf_free(q);
 8016ef2:	69f8      	ldr	r0, [r7, #28]
 8016ef4:	f7f7 ff9c 	bl	800ee30 <pbuf_free>
 8016ef8:	e000      	b.n	8016efc <icmp_send_response+0xc0>
    return;
 8016efa:	bf00      	nop
}
 8016efc:	3720      	adds	r7, #32
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}
 8016f02:	bf00      	nop
 8016f04:	0801e6ac 	.word	0x0801e6ac
 8016f08:	0801e778 	.word	0x0801e778
 8016f0c:	0801e71c 	.word	0x0801e71c

08016f10 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016f10:	b480      	push	{r7}
 8016f12:	b085      	sub	sp, #20
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016f18:	4b33      	ldr	r3, [pc, #204]	@ (8016fe8 <ip4_route+0xd8>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	60fb      	str	r3, [r7, #12]
 8016f1e:	e036      	b.n	8016f8e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016f26:	f003 0301 	and.w	r3, r3, #1
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d02b      	beq.n	8016f88 <ip4_route+0x78>
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016f36:	089b      	lsrs	r3, r3, #2
 8016f38:	f003 0301 	and.w	r3, r3, #1
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d022      	beq.n	8016f88 <ip4_route+0x78>
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	3304      	adds	r3, #4
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d01d      	beq.n	8016f88 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681a      	ldr	r2, [r3, #0]
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	3304      	adds	r3, #4
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	405a      	eors	r2, r3
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	3308      	adds	r3, #8
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	4013      	ands	r3, r2
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d101      	bne.n	8016f68 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	e038      	b.n	8016fda <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016f6e:	f003 0302 	and.w	r3, r3, #2
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d108      	bne.n	8016f88 <ip4_route+0x78>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	330c      	adds	r3, #12
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d101      	bne.n	8016f88 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	e028      	b.n	8016fda <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	60fb      	str	r3, [r7, #12]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d1c5      	bne.n	8016f20 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016f94:	4b15      	ldr	r3, [pc, #84]	@ (8016fec <ip4_route+0xdc>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d01a      	beq.n	8016fd2 <ip4_route+0xc2>
 8016f9c:	4b13      	ldr	r3, [pc, #76]	@ (8016fec <ip4_route+0xdc>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016fa4:	f003 0301 	and.w	r3, r3, #1
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d012      	beq.n	8016fd2 <ip4_route+0xc2>
 8016fac:	4b0f      	ldr	r3, [pc, #60]	@ (8016fec <ip4_route+0xdc>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016fb4:	f003 0304 	and.w	r3, r3, #4
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d00a      	beq.n	8016fd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8016fec <ip4_route+0xdc>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	3304      	adds	r3, #4
 8016fc2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d004      	beq.n	8016fd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8016fd0:	d101      	bne.n	8016fd6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	e001      	b.n	8016fda <ip4_route+0xca>
  }

  return netif_default;
 8016fd6:	4b05      	ldr	r3, [pc, #20]	@ (8016fec <ip4_route+0xdc>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3714      	adds	r7, #20
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr
 8016fe6:	bf00      	nop
 8016fe8:	2000e10c 	.word	0x2000e10c
 8016fec:	2000e110 	.word	0x2000e110

08016ff0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016ffe:	f003 0301 	and.w	r3, r3, #1
 8017002:	b2db      	uxtb	r3, r3
 8017004:	2b00      	cmp	r3, #0
 8017006:	d016      	beq.n	8017036 <ip4_input_accept+0x46>
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	3304      	adds	r3, #4
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d011      	beq.n	8017036 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017012:	4b0b      	ldr	r3, [pc, #44]	@ (8017040 <ip4_input_accept+0x50>)
 8017014:	695a      	ldr	r2, [r3, #20]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	3304      	adds	r3, #4
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	429a      	cmp	r2, r3
 801701e:	d008      	beq.n	8017032 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017020:	4b07      	ldr	r3, [pc, #28]	@ (8017040 <ip4_input_accept+0x50>)
 8017022:	695b      	ldr	r3, [r3, #20]
 8017024:	6879      	ldr	r1, [r7, #4]
 8017026:	4618      	mov	r0, r3
 8017028:	f000 fa08 	bl	801743c <ip4_addr_isbroadcast_u32>
 801702c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801702e:	2b00      	cmp	r3, #0
 8017030:	d001      	beq.n	8017036 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017032:	2301      	movs	r3, #1
 8017034:	e000      	b.n	8017038 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017036:	2300      	movs	r3, #0
}
 8017038:	4618      	mov	r0, r3
 801703a:	3708      	adds	r7, #8
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	20008804 	.word	0x20008804

08017044 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b086      	sub	sp, #24
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	091b      	lsrs	r3, r3, #4
 801705a:	b2db      	uxtb	r3, r3
 801705c:	2b04      	cmp	r3, #4
 801705e:	d004      	beq.n	801706a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f7f7 fee5 	bl	800ee30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017066:	2300      	movs	r3, #0
 8017068:	e107      	b.n	801727a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	f003 030f 	and.w	r3, r3, #15
 8017072:	b2db      	uxtb	r3, r3
 8017074:	009b      	lsls	r3, r3, #2
 8017076:	b2db      	uxtb	r3, r3
 8017078:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	885b      	ldrh	r3, [r3, #2]
 801707e:	b29b      	uxth	r3, r3
 8017080:	4618      	mov	r0, r3
 8017082:	f7f6 fb29 	bl	800d6d8 <lwip_htons>
 8017086:	4603      	mov	r3, r0
 8017088:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	891b      	ldrh	r3, [r3, #8]
 801708e:	89ba      	ldrh	r2, [r7, #12]
 8017090:	429a      	cmp	r2, r3
 8017092:	d204      	bcs.n	801709e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017094:	89bb      	ldrh	r3, [r7, #12]
 8017096:	4619      	mov	r1, r3
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7f7 fd43 	bl	800eb24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	895b      	ldrh	r3, [r3, #10]
 80170a2:	89fa      	ldrh	r2, [r7, #14]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d807      	bhi.n	80170b8 <ip4_input+0x74>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	891b      	ldrh	r3, [r3, #8]
 80170ac:	89ba      	ldrh	r2, [r7, #12]
 80170ae:	429a      	cmp	r2, r3
 80170b0:	d802      	bhi.n	80170b8 <ip4_input+0x74>
 80170b2:	89fb      	ldrh	r3, [r7, #14]
 80170b4:	2b13      	cmp	r3, #19
 80170b6:	d804      	bhi.n	80170c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7f7 feb9 	bl	800ee30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80170be:	2300      	movs	r3, #0
 80170c0:	e0db      	b.n	801727a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	691b      	ldr	r3, [r3, #16]
 80170c6:	4a6f      	ldr	r2, [pc, #444]	@ (8017284 <ip4_input+0x240>)
 80170c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	68db      	ldr	r3, [r3, #12]
 80170ce:	4a6d      	ldr	r2, [pc, #436]	@ (8017284 <ip4_input+0x240>)
 80170d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170d2:	4b6c      	ldr	r3, [pc, #432]	@ (8017284 <ip4_input+0x240>)
 80170d4:	695b      	ldr	r3, [r3, #20]
 80170d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80170da:	2be0      	cmp	r3, #224	@ 0xe0
 80170dc:	d112      	bne.n	8017104 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80170e4:	f003 0301 	and.w	r3, r3, #1
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d007      	beq.n	80170fe <ip4_input+0xba>
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	3304      	adds	r3, #4
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d002      	beq.n	80170fe <ip4_input+0xba>
      netif = inp;
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	613b      	str	r3, [r7, #16]
 80170fc:	e02a      	b.n	8017154 <ip4_input+0x110>
    } else {
      netif = NULL;
 80170fe:	2300      	movs	r3, #0
 8017100:	613b      	str	r3, [r7, #16]
 8017102:	e027      	b.n	8017154 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017104:	6838      	ldr	r0, [r7, #0]
 8017106:	f7ff ff73 	bl	8016ff0 <ip4_input_accept>
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d002      	beq.n	8017116 <ip4_input+0xd2>
      netif = inp;
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	613b      	str	r3, [r7, #16]
 8017114:	e01e      	b.n	8017154 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017116:	2300      	movs	r3, #0
 8017118:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801711a:	4b5a      	ldr	r3, [pc, #360]	@ (8017284 <ip4_input+0x240>)
 801711c:	695b      	ldr	r3, [r3, #20]
 801711e:	b2db      	uxtb	r3, r3
 8017120:	2b7f      	cmp	r3, #127	@ 0x7f
 8017122:	d017      	beq.n	8017154 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017124:	4b58      	ldr	r3, [pc, #352]	@ (8017288 <ip4_input+0x244>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	613b      	str	r3, [r7, #16]
 801712a:	e00e      	b.n	801714a <ip4_input+0x106>
          if (netif == inp) {
 801712c:	693a      	ldr	r2, [r7, #16]
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	429a      	cmp	r2, r3
 8017132:	d006      	beq.n	8017142 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017134:	6938      	ldr	r0, [r7, #16]
 8017136:	f7ff ff5b 	bl	8016ff0 <ip4_input_accept>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	d108      	bne.n	8017152 <ip4_input+0x10e>
 8017140:	e000      	b.n	8017144 <ip4_input+0x100>
            continue;
 8017142:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017144:	693b      	ldr	r3, [r7, #16]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	613b      	str	r3, [r7, #16]
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1ed      	bne.n	801712c <ip4_input+0xe8>
 8017150:	e000      	b.n	8017154 <ip4_input+0x110>
            break;
 8017152:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017154:	4b4b      	ldr	r3, [pc, #300]	@ (8017284 <ip4_input+0x240>)
 8017156:	691b      	ldr	r3, [r3, #16]
 8017158:	6839      	ldr	r1, [r7, #0]
 801715a:	4618      	mov	r0, r3
 801715c:	f000 f96e 	bl	801743c <ip4_addr_isbroadcast_u32>
 8017160:	4603      	mov	r3, r0
 8017162:	2b00      	cmp	r3, #0
 8017164:	d105      	bne.n	8017172 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017166:	4b47      	ldr	r3, [pc, #284]	@ (8017284 <ip4_input+0x240>)
 8017168:	691b      	ldr	r3, [r3, #16]
 801716a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801716e:	2be0      	cmp	r3, #224	@ 0xe0
 8017170:	d104      	bne.n	801717c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f7f7 fe5c 	bl	800ee30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017178:	2300      	movs	r3, #0
 801717a:	e07e      	b.n	801727a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801717c:	693b      	ldr	r3, [r7, #16]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d104      	bne.n	801718c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f7f7 fe54 	bl	800ee30 <pbuf_free>
    return ERR_OK;
 8017188:	2300      	movs	r3, #0
 801718a:	e076      	b.n	801727a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	88db      	ldrh	r3, [r3, #6]
 8017190:	b29b      	uxth	r3, r3
 8017192:	461a      	mov	r2, r3
 8017194:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017198:	4013      	ands	r3, r2
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00b      	beq.n	80171b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f000 fc92 	bl	8017ac8 <ip4_reass>
 80171a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d101      	bne.n	80171b0 <ip4_input+0x16c>
      return ERR_OK;
 80171ac:	2300      	movs	r3, #0
 80171ae:	e064      	b.n	801727a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80171b6:	4a33      	ldr	r2, [pc, #204]	@ (8017284 <ip4_input+0x240>)
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80171bc:	4a31      	ldr	r2, [pc, #196]	@ (8017284 <ip4_input+0x240>)
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80171c2:	4a30      	ldr	r2, [pc, #192]	@ (8017284 <ip4_input+0x240>)
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	f003 030f 	and.w	r3, r3, #15
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	461a      	mov	r2, r3
 80171d8:	4b2a      	ldr	r3, [pc, #168]	@ (8017284 <ip4_input+0x240>)
 80171da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80171dc:	89fb      	ldrh	r3, [r7, #14]
 80171de:	4619      	mov	r1, r3
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f7f7 fd9f 	bl	800ed24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	7a5b      	ldrb	r3, [r3, #9]
 80171ea:	2b11      	cmp	r3, #17
 80171ec:	d006      	beq.n	80171fc <ip4_input+0x1b8>
 80171ee:	2b11      	cmp	r3, #17
 80171f0:	dc13      	bgt.n	801721a <ip4_input+0x1d6>
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d00c      	beq.n	8017210 <ip4_input+0x1cc>
 80171f6:	2b06      	cmp	r3, #6
 80171f8:	d005      	beq.n	8017206 <ip4_input+0x1c2>
 80171fa:	e00e      	b.n	801721a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80171fc:	6839      	ldr	r1, [r7, #0]
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7fe fb5a 	bl	80158b8 <udp_input>
        break;
 8017204:	e026      	b.n	8017254 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017206:	6839      	ldr	r1, [r7, #0]
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f7f9 ff19 	bl	8011040 <tcp_input>
        break;
 801720e:	e021      	b.n	8017254 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017210:	6839      	ldr	r1, [r7, #0]
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f7ff fcee 	bl	8016bf4 <icmp_input>
        break;
 8017218:	e01c      	b.n	8017254 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801721a:	4b1a      	ldr	r3, [pc, #104]	@ (8017284 <ip4_input+0x240>)
 801721c:	695b      	ldr	r3, [r3, #20]
 801721e:	6939      	ldr	r1, [r7, #16]
 8017220:	4618      	mov	r0, r3
 8017222:	f000 f90b 	bl	801743c <ip4_addr_isbroadcast_u32>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10f      	bne.n	801724c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801722c:	4b15      	ldr	r3, [pc, #84]	@ (8017284 <ip4_input+0x240>)
 801722e:	695b      	ldr	r3, [r3, #20]
 8017230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017234:	2be0      	cmp	r3, #224	@ 0xe0
 8017236:	d009      	beq.n	801724c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801723c:	4619      	mov	r1, r3
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7f7 fde3 	bl	800ee0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017244:	2102      	movs	r1, #2
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f7ff fdd8 	bl	8016dfc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f7f7 fdef 	bl	800ee30 <pbuf_free>
        break;
 8017252:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017254:	4b0b      	ldr	r3, [pc, #44]	@ (8017284 <ip4_input+0x240>)
 8017256:	2200      	movs	r2, #0
 8017258:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801725a:	4b0a      	ldr	r3, [pc, #40]	@ (8017284 <ip4_input+0x240>)
 801725c:	2200      	movs	r2, #0
 801725e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017260:	4b08      	ldr	r3, [pc, #32]	@ (8017284 <ip4_input+0x240>)
 8017262:	2200      	movs	r2, #0
 8017264:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017266:	4b07      	ldr	r3, [pc, #28]	@ (8017284 <ip4_input+0x240>)
 8017268:	2200      	movs	r2, #0
 801726a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801726c:	4b05      	ldr	r3, [pc, #20]	@ (8017284 <ip4_input+0x240>)
 801726e:	2200      	movs	r2, #0
 8017270:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017272:	4b04      	ldr	r3, [pc, #16]	@ (8017284 <ip4_input+0x240>)
 8017274:	2200      	movs	r2, #0
 8017276:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017278:	2300      	movs	r3, #0
}
 801727a:	4618      	mov	r0, r3
 801727c:	3718      	adds	r7, #24
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	20008804 	.word	0x20008804
 8017288:	2000e10c 	.word	0x2000e10c

0801728c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b08a      	sub	sp, #40	@ 0x28
 8017290:	af04      	add	r7, sp, #16
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	60b9      	str	r1, [r7, #8]
 8017296:	607a      	str	r2, [r7, #4]
 8017298:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d009      	beq.n	80172b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d003      	beq.n	80172b2 <ip4_output_if+0x26>
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d102      	bne.n	80172b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80172b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172b4:	3304      	adds	r3, #4
 80172b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80172b8:	78fa      	ldrb	r2, [r7, #3]
 80172ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172bc:	9302      	str	r3, [sp, #8]
 80172be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80172c2:	9301      	str	r3, [sp, #4]
 80172c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80172c8:	9300      	str	r3, [sp, #0]
 80172ca:	4613      	mov	r3, r2
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	6979      	ldr	r1, [r7, #20]
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	f000 f805 	bl	80172e0 <ip4_output_if_src>
 80172d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3718      	adds	r7, #24
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}

080172e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b088      	sub	sp, #32
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
 80172ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	7b9b      	ldrb	r3, [r3, #14]
 80172f2:	2b01      	cmp	r3, #1
 80172f4:	d006      	beq.n	8017304 <ip4_output_if_src+0x24>
 80172f6:	4b4b      	ldr	r3, [pc, #300]	@ (8017424 <ip4_output_if_src+0x144>)
 80172f8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80172fc:	494a      	ldr	r1, [pc, #296]	@ (8017428 <ip4_output_if_src+0x148>)
 80172fe:	484b      	ldr	r0, [pc, #300]	@ (801742c <ip4_output_if_src+0x14c>)
 8017300:	f001 fee0 	bl	80190c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d060      	beq.n	80173cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801730a:	2314      	movs	r3, #20
 801730c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801730e:	2114      	movs	r1, #20
 8017310:	68f8      	ldr	r0, [r7, #12]
 8017312:	f7f7 fcf7 	bl	800ed04 <pbuf_add_header>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d002      	beq.n	8017322 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801731c:	f06f 0301 	mvn.w	r3, #1
 8017320:	e07c      	b.n	801741c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	895b      	ldrh	r3, [r3, #10]
 801732c:	2b13      	cmp	r3, #19
 801732e:	d806      	bhi.n	801733e <ip4_output_if_src+0x5e>
 8017330:	4b3c      	ldr	r3, [pc, #240]	@ (8017424 <ip4_output_if_src+0x144>)
 8017332:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017336:	493e      	ldr	r1, [pc, #248]	@ (8017430 <ip4_output_if_src+0x150>)
 8017338:	483c      	ldr	r0, [pc, #240]	@ (801742c <ip4_output_if_src+0x14c>)
 801733a:	f001 fec3 	bl	80190c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	78fa      	ldrb	r2, [r7, #3]
 8017342:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017344:	69fb      	ldr	r3, [r7, #28]
 8017346:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801734a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	69fb      	ldr	r3, [r7, #28]
 8017352:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017354:	8b7b      	ldrh	r3, [r7, #26]
 8017356:	089b      	lsrs	r3, r3, #2
 8017358:	b29b      	uxth	r3, r3
 801735a:	b2db      	uxtb	r3, r3
 801735c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017360:	b2da      	uxtb	r2, r3
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801736c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	891b      	ldrh	r3, [r3, #8]
 8017372:	4618      	mov	r0, r3
 8017374:	f7f6 f9b0 	bl	800d6d8 <lwip_htons>
 8017378:	4603      	mov	r3, r0
 801737a:	461a      	mov	r2, r3
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	2200      	movs	r2, #0
 8017384:	719a      	strb	r2, [r3, #6]
 8017386:	2200      	movs	r2, #0
 8017388:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801738a:	4b2a      	ldr	r3, [pc, #168]	@ (8017434 <ip4_output_if_src+0x154>)
 801738c:	881b      	ldrh	r3, [r3, #0]
 801738e:	4618      	mov	r0, r3
 8017390:	f7f6 f9a2 	bl	800d6d8 <lwip_htons>
 8017394:	4603      	mov	r3, r0
 8017396:	461a      	mov	r2, r3
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801739c:	4b25      	ldr	r3, [pc, #148]	@ (8017434 <ip4_output_if_src+0x154>)
 801739e:	881b      	ldrh	r3, [r3, #0]
 80173a0:	3301      	adds	r3, #1
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	4b23      	ldr	r3, [pc, #140]	@ (8017434 <ip4_output_if_src+0x154>)
 80173a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d104      	bne.n	80173b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80173ae:	4b22      	ldr	r3, [pc, #136]	@ (8017438 <ip4_output_if_src+0x158>)
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	69fb      	ldr	r3, [r7, #28]
 80173b4:	60da      	str	r2, [r3, #12]
 80173b6:	e003      	b.n	80173c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	69fb      	ldr	r3, [r7, #28]
 80173be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80173c0:	69fb      	ldr	r3, [r7, #28]
 80173c2:	2200      	movs	r2, #0
 80173c4:	729a      	strb	r2, [r3, #10]
 80173c6:	2200      	movs	r2, #0
 80173c8:	72da      	strb	r2, [r3, #11]
 80173ca:	e00f      	b.n	80173ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	895b      	ldrh	r3, [r3, #10]
 80173d0:	2b13      	cmp	r3, #19
 80173d2:	d802      	bhi.n	80173da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80173d4:	f06f 0301 	mvn.w	r3, #1
 80173d8:	e020      	b.n	801741c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	691b      	ldr	r3, [r3, #16]
 80173e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80173e6:	f107 0314 	add.w	r3, r7, #20
 80173ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80173ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d00c      	beq.n	801740e <ip4_output_if_src+0x12e>
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	891a      	ldrh	r2, [r3, #8]
 80173f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d906      	bls.n	801740e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017404:	68f8      	ldr	r0, [r7, #12]
 8017406:	f000 fd53 	bl	8017eb0 <ip4_frag>
 801740a:	4603      	mov	r3, r0
 801740c:	e006      	b.n	801741c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017410:	695b      	ldr	r3, [r3, #20]
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	68f9      	ldr	r1, [r7, #12]
 8017416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017418:	4798      	blx	r3
 801741a:	4603      	mov	r3, r0
}
 801741c:	4618      	mov	r0, r3
 801741e:	3720      	adds	r7, #32
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}
 8017424:	0801e7a4 	.word	0x0801e7a4
 8017428:	0801e7d8 	.word	0x0801e7d8
 801742c:	0801e7e4 	.word	0x0801e7e4
 8017430:	0801e80c 	.word	0x0801e80c
 8017434:	2000e26a 	.word	0x2000e26a
 8017438:	0801ec48 	.word	0x0801ec48

0801743c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801743c:	b480      	push	{r7}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017450:	d002      	beq.n	8017458 <ip4_addr_isbroadcast_u32+0x1c>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d101      	bne.n	801745c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017458:	2301      	movs	r3, #1
 801745a:	e02a      	b.n	80174b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017462:	f003 0302 	and.w	r3, r3, #2
 8017466:	2b00      	cmp	r3, #0
 8017468:	d101      	bne.n	801746e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801746a:	2300      	movs	r3, #0
 801746c:	e021      	b.n	80174b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	3304      	adds	r3, #4
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	687a      	ldr	r2, [r7, #4]
 8017476:	429a      	cmp	r2, r3
 8017478:	d101      	bne.n	801747e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801747a:	2300      	movs	r3, #0
 801747c:	e019      	b.n	80174b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801747e:	68fa      	ldr	r2, [r7, #12]
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	3304      	adds	r3, #4
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	405a      	eors	r2, r3
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	3308      	adds	r3, #8
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4013      	ands	r3, r2
 8017490:	2b00      	cmp	r3, #0
 8017492:	d10d      	bne.n	80174b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	3308      	adds	r3, #8
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	43da      	mvns	r2, r3
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	3308      	adds	r3, #8
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d101      	bne.n	80174b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80174ac:	2301      	movs	r3, #1
 80174ae:	e000      	b.n	80174b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80174b0:	2300      	movs	r3, #0
  }
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3714      	adds	r7, #20
 80174b6:	46bd      	mov	sp, r7
 80174b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174bc:	4770      	bx	lr
	...

080174c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80174c6:	2300      	movs	r3, #0
 80174c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80174ca:	4b12      	ldr	r3, [pc, #72]	@ (8017514 <ip_reass_tmr+0x54>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80174d0:	e018      	b.n	8017504 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	7fdb      	ldrb	r3, [r3, #31]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00b      	beq.n	80174f2 <ip_reass_tmr+0x32>
      r->timer--;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	7fdb      	ldrb	r3, [r3, #31]
 80174de:	3b01      	subs	r3, #1
 80174e0:	b2da      	uxtb	r2, r3
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	60fb      	str	r3, [r7, #12]
 80174f0:	e008      	b.n	8017504 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80174fc:	68b9      	ldr	r1, [r7, #8]
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f000 f80a 	bl	8017518 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d1e3      	bne.n	80174d2 <ip_reass_tmr+0x12>
    }
  }
}
 801750a:	bf00      	nop
 801750c:	bf00      	nop
 801750e:	3710      	adds	r7, #16
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}
 8017514:	2000e26c 	.word	0x2000e26c

08017518 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b088      	sub	sp, #32
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017522:	2300      	movs	r3, #0
 8017524:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017526:	683a      	ldr	r2, [r7, #0]
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	429a      	cmp	r2, r3
 801752c:	d105      	bne.n	801753a <ip_reass_free_complete_datagram+0x22>
 801752e:	4b45      	ldr	r3, [pc, #276]	@ (8017644 <ip_reass_free_complete_datagram+0x12c>)
 8017530:	22ab      	movs	r2, #171	@ 0xab
 8017532:	4945      	ldr	r1, [pc, #276]	@ (8017648 <ip_reass_free_complete_datagram+0x130>)
 8017534:	4845      	ldr	r0, [pc, #276]	@ (801764c <ip_reass_free_complete_datagram+0x134>)
 8017536:	f001 fdc5 	bl	80190c4 <iprintf>
  if (prev != NULL) {
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d00a      	beq.n	8017556 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	429a      	cmp	r2, r3
 8017548:	d005      	beq.n	8017556 <ip_reass_free_complete_datagram+0x3e>
 801754a:	4b3e      	ldr	r3, [pc, #248]	@ (8017644 <ip_reass_free_complete_datagram+0x12c>)
 801754c:	22ad      	movs	r2, #173	@ 0xad
 801754e:	4940      	ldr	r1, [pc, #256]	@ (8017650 <ip_reass_free_complete_datagram+0x138>)
 8017550:	483e      	ldr	r0, [pc, #248]	@ (801764c <ip_reass_free_complete_datagram+0x134>)
 8017552:	f001 fdb7 	bl	80190c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	889b      	ldrh	r3, [r3, #4]
 8017562:	b29b      	uxth	r3, r3
 8017564:	2b00      	cmp	r3, #0
 8017566:	d12a      	bne.n	80175be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801756e:	697b      	ldr	r3, [r7, #20]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	6858      	ldr	r0, [r3, #4]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	3308      	adds	r3, #8
 801757e:	2214      	movs	r2, #20
 8017580:	4619      	mov	r1, r3
 8017582:	f002 f81e 	bl	80195c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017586:	2101      	movs	r1, #1
 8017588:	69b8      	ldr	r0, [r7, #24]
 801758a:	f7ff fc47 	bl	8016e1c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801758e:	69b8      	ldr	r0, [r7, #24]
 8017590:	f7f7 fcdc 	bl	800ef4c <pbuf_clen>
 8017594:	4603      	mov	r3, r0
 8017596:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017598:	8bfa      	ldrh	r2, [r7, #30]
 801759a:	8a7b      	ldrh	r3, [r7, #18]
 801759c:	4413      	add	r3, r2
 801759e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80175a2:	db05      	blt.n	80175b0 <ip_reass_free_complete_datagram+0x98>
 80175a4:	4b27      	ldr	r3, [pc, #156]	@ (8017644 <ip_reass_free_complete_datagram+0x12c>)
 80175a6:	22bc      	movs	r2, #188	@ 0xbc
 80175a8:	492a      	ldr	r1, [pc, #168]	@ (8017654 <ip_reass_free_complete_datagram+0x13c>)
 80175aa:	4828      	ldr	r0, [pc, #160]	@ (801764c <ip_reass_free_complete_datagram+0x134>)
 80175ac:	f001 fd8a 	bl	80190c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80175b0:	8bfa      	ldrh	r2, [r7, #30]
 80175b2:	8a7b      	ldrh	r3, [r7, #18]
 80175b4:	4413      	add	r3, r2
 80175b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80175b8:	69b8      	ldr	r0, [r7, #24]
 80175ba:	f7f7 fc39 	bl	800ee30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80175c4:	e01f      	b.n	8017606 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80175c6:	69bb      	ldr	r3, [r7, #24]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80175d6:	68f8      	ldr	r0, [r7, #12]
 80175d8:	f7f7 fcb8 	bl	800ef4c <pbuf_clen>
 80175dc:	4603      	mov	r3, r0
 80175de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80175e0:	8bfa      	ldrh	r2, [r7, #30]
 80175e2:	8a7b      	ldrh	r3, [r7, #18]
 80175e4:	4413      	add	r3, r2
 80175e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80175ea:	db05      	blt.n	80175f8 <ip_reass_free_complete_datagram+0xe0>
 80175ec:	4b15      	ldr	r3, [pc, #84]	@ (8017644 <ip_reass_free_complete_datagram+0x12c>)
 80175ee:	22cc      	movs	r2, #204	@ 0xcc
 80175f0:	4918      	ldr	r1, [pc, #96]	@ (8017654 <ip_reass_free_complete_datagram+0x13c>)
 80175f2:	4816      	ldr	r0, [pc, #88]	@ (801764c <ip_reass_free_complete_datagram+0x134>)
 80175f4:	f001 fd66 	bl	80190c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80175f8:	8bfa      	ldrh	r2, [r7, #30]
 80175fa:	8a7b      	ldrh	r3, [r7, #18]
 80175fc:	4413      	add	r3, r2
 80175fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017600:	68f8      	ldr	r0, [r7, #12]
 8017602:	f7f7 fc15 	bl	800ee30 <pbuf_free>
  while (p != NULL) {
 8017606:	69bb      	ldr	r3, [r7, #24]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d1dc      	bne.n	80175c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801760c:	6839      	ldr	r1, [r7, #0]
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 f8c2 	bl	8017798 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017614:	4b10      	ldr	r3, [pc, #64]	@ (8017658 <ip_reass_free_complete_datagram+0x140>)
 8017616:	881b      	ldrh	r3, [r3, #0]
 8017618:	8bfa      	ldrh	r2, [r7, #30]
 801761a:	429a      	cmp	r2, r3
 801761c:	d905      	bls.n	801762a <ip_reass_free_complete_datagram+0x112>
 801761e:	4b09      	ldr	r3, [pc, #36]	@ (8017644 <ip_reass_free_complete_datagram+0x12c>)
 8017620:	22d2      	movs	r2, #210	@ 0xd2
 8017622:	490e      	ldr	r1, [pc, #56]	@ (801765c <ip_reass_free_complete_datagram+0x144>)
 8017624:	4809      	ldr	r0, [pc, #36]	@ (801764c <ip_reass_free_complete_datagram+0x134>)
 8017626:	f001 fd4d 	bl	80190c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801762a:	4b0b      	ldr	r3, [pc, #44]	@ (8017658 <ip_reass_free_complete_datagram+0x140>)
 801762c:	881a      	ldrh	r2, [r3, #0]
 801762e:	8bfb      	ldrh	r3, [r7, #30]
 8017630:	1ad3      	subs	r3, r2, r3
 8017632:	b29a      	uxth	r2, r3
 8017634:	4b08      	ldr	r3, [pc, #32]	@ (8017658 <ip_reass_free_complete_datagram+0x140>)
 8017636:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017638:	8bfb      	ldrh	r3, [r7, #30]
}
 801763a:	4618      	mov	r0, r3
 801763c:	3720      	adds	r7, #32
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	0801e83c 	.word	0x0801e83c
 8017648:	0801e878 	.word	0x0801e878
 801764c:	0801e884 	.word	0x0801e884
 8017650:	0801e8ac 	.word	0x0801e8ac
 8017654:	0801e8c0 	.word	0x0801e8c0
 8017658:	2000e270 	.word	0x2000e270
 801765c:	0801e8e0 	.word	0x0801e8e0

08017660 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b08a      	sub	sp, #40	@ 0x28
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
 8017668:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801766a:	2300      	movs	r3, #0
 801766c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801766e:	2300      	movs	r3, #0
 8017670:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017672:	2300      	movs	r3, #0
 8017674:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017676:	2300      	movs	r3, #0
 8017678:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801767a:	2300      	movs	r3, #0
 801767c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801767e:	4b28      	ldr	r3, [pc, #160]	@ (8017720 <ip_reass_remove_oldest_datagram+0xc0>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017684:	e030      	b.n	80176e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017688:	695a      	ldr	r2, [r3, #20]
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	68db      	ldr	r3, [r3, #12]
 801768e:	429a      	cmp	r2, r3
 8017690:	d10c      	bne.n	80176ac <ip_reass_remove_oldest_datagram+0x4c>
 8017692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017694:	699a      	ldr	r2, [r3, #24]
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	691b      	ldr	r3, [r3, #16]
 801769a:	429a      	cmp	r2, r3
 801769c:	d106      	bne.n	80176ac <ip_reass_remove_oldest_datagram+0x4c>
 801769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176a0:	899a      	ldrh	r2, [r3, #12]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	889b      	ldrh	r3, [r3, #4]
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d014      	beq.n	80176d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	3301      	adds	r3, #1
 80176b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80176b2:	6a3b      	ldr	r3, [r7, #32]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d104      	bne.n	80176c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80176b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	61bb      	str	r3, [r7, #24]
 80176c0:	e009      	b.n	80176d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80176c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176c4:	7fda      	ldrb	r2, [r3, #31]
 80176c6:	6a3b      	ldr	r3, [r7, #32]
 80176c8:	7fdb      	ldrb	r3, [r3, #31]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d803      	bhi.n	80176d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80176ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80176d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d001      	beq.n	80176e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80176de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80176e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80176e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d1cb      	bne.n	8017686 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80176ee:	6a3b      	ldr	r3, [r7, #32]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d008      	beq.n	8017706 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80176f4:	69b9      	ldr	r1, [r7, #24]
 80176f6:	6a38      	ldr	r0, [r7, #32]
 80176f8:	f7ff ff0e 	bl	8017518 <ip_reass_free_complete_datagram>
 80176fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80176fe:	697a      	ldr	r2, [r7, #20]
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	4413      	add	r3, r2
 8017704:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017706:	697a      	ldr	r2, [r7, #20]
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	429a      	cmp	r2, r3
 801770c:	da02      	bge.n	8017714 <ip_reass_remove_oldest_datagram+0xb4>
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	2b01      	cmp	r3, #1
 8017712:	dcac      	bgt.n	801766e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017714:	697b      	ldr	r3, [r7, #20]
}
 8017716:	4618      	mov	r0, r3
 8017718:	3728      	adds	r7, #40	@ 0x28
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2000e26c 	.word	0x2000e26c

08017724 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b084      	sub	sp, #16
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801772e:	2004      	movs	r0, #4
 8017730:	f7f6 fc88 	bl	800e044 <memp_malloc>
 8017734:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d110      	bne.n	801775e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801773c:	6839      	ldr	r1, [r7, #0]
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7ff ff8e 	bl	8017660 <ip_reass_remove_oldest_datagram>
 8017744:	4602      	mov	r2, r0
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	4293      	cmp	r3, r2
 801774a:	dc03      	bgt.n	8017754 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801774c:	2004      	movs	r0, #4
 801774e:	f7f6 fc79 	bl	800e044 <memp_malloc>
 8017752:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d101      	bne.n	801775e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801775a:	2300      	movs	r3, #0
 801775c:	e016      	b.n	801778c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801775e:	2220      	movs	r2, #32
 8017760:	2100      	movs	r1, #0
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f001 fe74 	bl	8019450 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	220f      	movs	r2, #15
 801776c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801776e:	4b09      	ldr	r3, [pc, #36]	@ (8017794 <ip_reass_enqueue_new_datagram+0x70>)
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017776:	4a07      	ldr	r2, [pc, #28]	@ (8017794 <ip_reass_enqueue_new_datagram+0x70>)
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	3308      	adds	r3, #8
 8017780:	2214      	movs	r2, #20
 8017782:	6879      	ldr	r1, [r7, #4]
 8017784:	4618      	mov	r0, r3
 8017786:	f001 ff1c 	bl	80195c2 <memcpy>
  return ipr;
 801778a:	68fb      	ldr	r3, [r7, #12]
}
 801778c:	4618      	mov	r0, r3
 801778e:	3710      	adds	r7, #16
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	2000e26c 	.word	0x2000e26c

08017798 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80177a2:	4b10      	ldr	r3, [pc, #64]	@ (80177e4 <ip_reass_dequeue_datagram+0x4c>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d104      	bne.n	80177b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	4a0c      	ldr	r2, [pc, #48]	@ (80177e4 <ip_reass_dequeue_datagram+0x4c>)
 80177b2:	6013      	str	r3, [r2, #0]
 80177b4:	e00d      	b.n	80177d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d106      	bne.n	80177ca <ip_reass_dequeue_datagram+0x32>
 80177bc:	4b0a      	ldr	r3, [pc, #40]	@ (80177e8 <ip_reass_dequeue_datagram+0x50>)
 80177be:	f240 1245 	movw	r2, #325	@ 0x145
 80177c2:	490a      	ldr	r1, [pc, #40]	@ (80177ec <ip_reass_dequeue_datagram+0x54>)
 80177c4:	480a      	ldr	r0, [pc, #40]	@ (80177f0 <ip_reass_dequeue_datagram+0x58>)
 80177c6:	f001 fc7d 	bl	80190c4 <iprintf>
    prev->next = ipr->next;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80177d2:	6879      	ldr	r1, [r7, #4]
 80177d4:	2004      	movs	r0, #4
 80177d6:	f7f6 fc87 	bl	800e0e8 <memp_free>
}
 80177da:	bf00      	nop
 80177dc:	3708      	adds	r7, #8
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}
 80177e2:	bf00      	nop
 80177e4:	2000e26c 	.word	0x2000e26c
 80177e8:	0801e83c 	.word	0x0801e83c
 80177ec:	0801e904 	.word	0x0801e904
 80177f0:	0801e884 	.word	0x0801e884

080177f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b08c      	sub	sp, #48	@ 0x30
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017800:	2300      	movs	r3, #0
 8017802:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017804:	2301      	movs	r3, #1
 8017806:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017808:	68bb      	ldr	r3, [r7, #8]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801780e:	69fb      	ldr	r3, [r7, #28]
 8017810:	885b      	ldrh	r3, [r3, #2]
 8017812:	b29b      	uxth	r3, r3
 8017814:	4618      	mov	r0, r3
 8017816:	f7f5 ff5f 	bl	800d6d8 <lwip_htons>
 801781a:	4603      	mov	r3, r0
 801781c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801781e:	69fb      	ldr	r3, [r7, #28]
 8017820:	781b      	ldrb	r3, [r3, #0]
 8017822:	f003 030f 	and.w	r3, r3, #15
 8017826:	b2db      	uxtb	r3, r3
 8017828:	009b      	lsls	r3, r3, #2
 801782a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801782c:	7e7b      	ldrb	r3, [r7, #25]
 801782e:	b29b      	uxth	r3, r3
 8017830:	8b7a      	ldrh	r2, [r7, #26]
 8017832:	429a      	cmp	r2, r3
 8017834:	d202      	bcs.n	801783c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017836:	f04f 33ff 	mov.w	r3, #4294967295
 801783a:	e135      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801783c:	7e7b      	ldrb	r3, [r7, #25]
 801783e:	b29b      	uxth	r3, r3
 8017840:	8b7a      	ldrh	r2, [r7, #26]
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	88db      	ldrh	r3, [r3, #6]
 801784a:	b29b      	uxth	r3, r3
 801784c:	4618      	mov	r0, r3
 801784e:	f7f5 ff43 	bl	800d6d8 <lwip_htons>
 8017852:	4603      	mov	r3, r0
 8017854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017858:	b29b      	uxth	r3, r3
 801785a:	00db      	lsls	r3, r3, #3
 801785c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017866:	2200      	movs	r2, #0
 8017868:	701a      	strb	r2, [r3, #0]
 801786a:	2200      	movs	r2, #0
 801786c:	705a      	strb	r2, [r3, #1]
 801786e:	2200      	movs	r2, #0
 8017870:	709a      	strb	r2, [r3, #2]
 8017872:	2200      	movs	r2, #0
 8017874:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017878:	8afa      	ldrh	r2, [r7, #22]
 801787a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801787c:	8afa      	ldrh	r2, [r7, #22]
 801787e:	8b7b      	ldrh	r3, [r7, #26]
 8017880:	4413      	add	r3, r2
 8017882:	b29a      	uxth	r2, r3
 8017884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017886:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801788a:	88db      	ldrh	r3, [r3, #6]
 801788c:	b29b      	uxth	r3, r3
 801788e:	8afa      	ldrh	r2, [r7, #22]
 8017890:	429a      	cmp	r2, r3
 8017892:	d902      	bls.n	801789a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017894:	f04f 33ff 	mov.w	r3, #4294967295
 8017898:	e106      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	685b      	ldr	r3, [r3, #4]
 801789e:	627b      	str	r3, [r7, #36]	@ 0x24
 80178a0:	e068      	b.n	8017974 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80178a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80178a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178aa:	889b      	ldrh	r3, [r3, #4]
 80178ac:	b29a      	uxth	r2, r3
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	889b      	ldrh	r3, [r3, #4]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d235      	bcs.n	8017924 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80178b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80178bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80178be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d020      	beq.n	8017906 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80178c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178c6:	889b      	ldrh	r3, [r3, #4]
 80178c8:	b29a      	uxth	r2, r3
 80178ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178cc:	88db      	ldrh	r3, [r3, #6]
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d307      	bcc.n	80178e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80178d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178d6:	88db      	ldrh	r3, [r3, #6]
 80178d8:	b29a      	uxth	r2, r3
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	889b      	ldrh	r3, [r3, #4]
 80178de:	b29b      	uxth	r3, r3
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d902      	bls.n	80178ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80178e4:	f04f 33ff 	mov.w	r3, #4294967295
 80178e8:	e0de      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80178ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ec:	68ba      	ldr	r2, [r7, #8]
 80178ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80178f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178f2:	88db      	ldrh	r3, [r3, #6]
 80178f4:	b29a      	uxth	r2, r3
 80178f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178f8:	889b      	ldrh	r3, [r3, #4]
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d03d      	beq.n	801797c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017900:	2300      	movs	r3, #0
 8017902:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017904:	e03a      	b.n	801797c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017908:	88db      	ldrh	r3, [r3, #6]
 801790a:	b29a      	uxth	r2, r3
 801790c:	693b      	ldr	r3, [r7, #16]
 801790e:	889b      	ldrh	r3, [r3, #4]
 8017910:	b29b      	uxth	r3, r3
 8017912:	429a      	cmp	r2, r3
 8017914:	d902      	bls.n	801791c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017916:	f04f 33ff 	mov.w	r3, #4294967295
 801791a:	e0c5      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	68ba      	ldr	r2, [r7, #8]
 8017920:	605a      	str	r2, [r3, #4]
      break;
 8017922:	e02b      	b.n	801797c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017926:	889b      	ldrh	r3, [r3, #4]
 8017928:	b29a      	uxth	r2, r3
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	889b      	ldrh	r3, [r3, #4]
 801792e:	b29b      	uxth	r3, r3
 8017930:	429a      	cmp	r2, r3
 8017932:	d102      	bne.n	801793a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017934:	f04f 33ff 	mov.w	r3, #4294967295
 8017938:	e0b6      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801793a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801793c:	889b      	ldrh	r3, [r3, #4]
 801793e:	b29a      	uxth	r2, r3
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	88db      	ldrh	r3, [r3, #6]
 8017944:	b29b      	uxth	r3, r3
 8017946:	429a      	cmp	r2, r3
 8017948:	d202      	bcs.n	8017950 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801794a:	f04f 33ff 	mov.w	r3, #4294967295
 801794e:	e0ab      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017952:	2b00      	cmp	r3, #0
 8017954:	d009      	beq.n	801796a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017958:	88db      	ldrh	r3, [r3, #6]
 801795a:	b29a      	uxth	r2, r3
 801795c:	693b      	ldr	r3, [r7, #16]
 801795e:	889b      	ldrh	r3, [r3, #4]
 8017960:	b29b      	uxth	r3, r3
 8017962:	429a      	cmp	r2, r3
 8017964:	d001      	beq.n	801796a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017966:	2300      	movs	r3, #0
 8017968:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017976:	2b00      	cmp	r3, #0
 8017978:	d193      	bne.n	80178a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801797a:	e000      	b.n	801797e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801797c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017980:	2b00      	cmp	r3, #0
 8017982:	d12d      	bne.n	80179e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017986:	2b00      	cmp	r3, #0
 8017988:	d01c      	beq.n	80179c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801798c:	88db      	ldrh	r3, [r3, #6]
 801798e:	b29a      	uxth	r2, r3
 8017990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017992:	889b      	ldrh	r3, [r3, #4]
 8017994:	b29b      	uxth	r3, r3
 8017996:	429a      	cmp	r2, r3
 8017998:	d906      	bls.n	80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801799a:	4b45      	ldr	r3, [pc, #276]	@ (8017ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801799c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80179a0:	4944      	ldr	r1, [pc, #272]	@ (8017ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80179a2:	4845      	ldr	r0, [pc, #276]	@ (8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80179a4:	f001 fb8e 	bl	80190c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80179a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179aa:	68ba      	ldr	r2, [r7, #8]
 80179ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80179ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179b0:	88db      	ldrh	r3, [r3, #6]
 80179b2:	b29a      	uxth	r2, r3
 80179b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179b6:	889b      	ldrh	r3, [r3, #4]
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d010      	beq.n	80179e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80179be:	2300      	movs	r3, #0
 80179c0:	623b      	str	r3, [r7, #32]
 80179c2:	e00d      	b.n	80179e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d006      	beq.n	80179da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80179cc:	4b38      	ldr	r3, [pc, #224]	@ (8017ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80179ce:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80179d2:	493a      	ldr	r1, [pc, #232]	@ (8017abc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80179d4:	4838      	ldr	r0, [pc, #224]	@ (8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80179d6:	f001 fb75 	bl	80190c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	68ba      	ldr	r2, [r7, #8]
 80179de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d105      	bne.n	80179f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	7f9b      	ldrb	r3, [r3, #30]
 80179ea:	f003 0301 	and.w	r3, r3, #1
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d059      	beq.n	8017aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d04f      	beq.n	8017a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d006      	beq.n	8017a0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	889b      	ldrh	r3, [r3, #4]
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d002      	beq.n	8017a14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	623b      	str	r3, [r7, #32]
 8017a12:	e041      	b.n	8017a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a16:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017a1e:	e012      	b.n	8017a46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a22:	685b      	ldr	r3, [r3, #4]
 8017a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a28:	88db      	ldrh	r3, [r3, #6]
 8017a2a:	b29a      	uxth	r2, r3
 8017a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a2e:	889b      	ldrh	r3, [r3, #4]
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	429a      	cmp	r2, r3
 8017a34:	d002      	beq.n	8017a3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	623b      	str	r3, [r7, #32]
            break;
 8017a3a:	e007      	b.n	8017a4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d1e9      	bne.n	8017a20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017a4c:	6a3b      	ldr	r3, [r7, #32]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d022      	beq.n	8017a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d106      	bne.n	8017a68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017a5a:	4b15      	ldr	r3, [pc, #84]	@ (8017ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017a5c:	f240 12df 	movw	r2, #479	@ 0x1df
 8017a60:	4917      	ldr	r1, [pc, #92]	@ (8017ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017a62:	4815      	ldr	r0, [pc, #84]	@ (8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017a64:	f001 fb2e 	bl	80190c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d106      	bne.n	8017a82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017a74:	4b0e      	ldr	r3, [pc, #56]	@ (8017ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017a76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017a7a:	4911      	ldr	r1, [pc, #68]	@ (8017ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017a7c:	480e      	ldr	r0, [pc, #56]	@ (8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017a7e:	f001 fb21 	bl	80190c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d006      	beq.n	8017a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017a8a:	4b09      	ldr	r3, [pc, #36]	@ (8017ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017a8c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017a90:	490c      	ldr	r1, [pc, #48]	@ (8017ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017a92:	4809      	ldr	r0, [pc, #36]	@ (8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017a94:	f001 fb16 	bl	80190c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017a98:	6a3b      	ldr	r3, [r7, #32]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	bf14      	ite	ne
 8017a9e:	2301      	movne	r3, #1
 8017aa0:	2300      	moveq	r3, #0
 8017aa2:	b2db      	uxtb	r3, r3
 8017aa4:	e000      	b.n	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017aa6:	2300      	movs	r3, #0
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3730      	adds	r7, #48	@ 0x30
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	0801e83c 	.word	0x0801e83c
 8017ab4:	0801e920 	.word	0x0801e920
 8017ab8:	0801e884 	.word	0x0801e884
 8017abc:	0801e940 	.word	0x0801e940
 8017ac0:	0801e978 	.word	0x0801e978
 8017ac4:	0801e988 	.word	0x0801e988

08017ac8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b08e      	sub	sp, #56	@ 0x38
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	685b      	ldr	r3, [r3, #4]
 8017ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	f003 030f 	and.w	r3, r3, #15
 8017ade:	b2db      	uxtb	r3, r3
 8017ae0:	009b      	lsls	r3, r3, #2
 8017ae2:	b2db      	uxtb	r3, r3
 8017ae4:	2b14      	cmp	r3, #20
 8017ae6:	f040 8171 	bne.w	8017dcc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aec:	88db      	ldrh	r3, [r3, #6]
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7f5 fdf1 	bl	800d6d8 <lwip_htons>
 8017af6:	4603      	mov	r3, r0
 8017af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b04:	885b      	ldrh	r3, [r3, #2]
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7f5 fde5 	bl	800d6d8 <lwip_htons>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	f003 030f 	and.w	r3, r3, #15
 8017b1a:	b2db      	uxtb	r3, r3
 8017b1c:	009b      	lsls	r3, r3, #2
 8017b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017b22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	f0c0 8150 	bcc.w	8017dd0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017b30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017b34:	b29b      	uxth	r3, r3
 8017b36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017b38:	1ad3      	subs	r3, r2, r3
 8017b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f7f7 fa05 	bl	800ef4c <pbuf_clen>
 8017b42:	4603      	mov	r3, r0
 8017b44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017b46:	4b8c      	ldr	r3, [pc, #560]	@ (8017d78 <ip4_reass+0x2b0>)
 8017b48:	881b      	ldrh	r3, [r3, #0]
 8017b4a:	461a      	mov	r2, r3
 8017b4c:	8c3b      	ldrh	r3, [r7, #32]
 8017b4e:	4413      	add	r3, r2
 8017b50:	2b0a      	cmp	r3, #10
 8017b52:	dd10      	ble.n	8017b76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017b54:	8c3b      	ldrh	r3, [r7, #32]
 8017b56:	4619      	mov	r1, r3
 8017b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017b5a:	f7ff fd81 	bl	8017660 <ip_reass_remove_oldest_datagram>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f000 8137 	beq.w	8017dd4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017b66:	4b84      	ldr	r3, [pc, #528]	@ (8017d78 <ip4_reass+0x2b0>)
 8017b68:	881b      	ldrh	r3, [r3, #0]
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	8c3b      	ldrh	r3, [r7, #32]
 8017b6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017b70:	2b0a      	cmp	r3, #10
 8017b72:	f300 812f 	bgt.w	8017dd4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017b76:	4b81      	ldr	r3, [pc, #516]	@ (8017d7c <ip4_reass+0x2b4>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017b7c:	e015      	b.n	8017baa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b80:	695a      	ldr	r2, [r3, #20]
 8017b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b84:	68db      	ldr	r3, [r3, #12]
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d10c      	bne.n	8017ba4 <ip4_reass+0xdc>
 8017b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b8c:	699a      	ldr	r2, [r3, #24]
 8017b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b90:	691b      	ldr	r3, [r3, #16]
 8017b92:	429a      	cmp	r2, r3
 8017b94:	d106      	bne.n	8017ba4 <ip4_reass+0xdc>
 8017b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b98:	899a      	ldrh	r2, [r3, #12]
 8017b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b9c:	889b      	ldrh	r3, [r3, #4]
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d006      	beq.n	8017bb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8017baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d1e6      	bne.n	8017b7e <ip4_reass+0xb6>
 8017bb0:	e000      	b.n	8017bb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017bb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d109      	bne.n	8017bce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017bba:	8c3b      	ldrh	r3, [r7, #32]
 8017bbc:	4619      	mov	r1, r3
 8017bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017bc0:	f7ff fdb0 	bl	8017724 <ip_reass_enqueue_new_datagram>
 8017bc4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d11c      	bne.n	8017c06 <ip4_reass+0x13e>
      goto nullreturn;
 8017bcc:	e105      	b.n	8017dda <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd0:	88db      	ldrh	r3, [r3, #6]
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7f5 fd7f 	bl	800d6d8 <lwip_htons>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d110      	bne.n	8017c06 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017be6:	89db      	ldrh	r3, [r3, #14]
 8017be8:	4618      	mov	r0, r3
 8017bea:	f7f5 fd75 	bl	800d6d8 <lwip_htons>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d006      	beq.n	8017c06 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bfa:	3308      	adds	r3, #8
 8017bfc:	2214      	movs	r2, #20
 8017bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017c00:	4618      	mov	r0, r3
 8017c02:	f001 fcde 	bl	80195c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c08:	88db      	ldrh	r3, [r3, #6]
 8017c0a:	b29b      	uxth	r3, r3
 8017c0c:	f003 0320 	and.w	r3, r3, #32
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	bf0c      	ite	eq
 8017c14:	2301      	moveq	r3, #1
 8017c16:	2300      	movne	r3, #0
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017c1c:	69fb      	ldr	r3, [r7, #28]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d00e      	beq.n	8017c40 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017c22:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c26:	4413      	add	r3, r2
 8017c28:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017c2a:	8b7a      	ldrh	r2, [r7, #26]
 8017c2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	f0c0 80a0 	bcc.w	8017d74 <ip4_reass+0x2ac>
 8017c34:	8b7b      	ldrh	r3, [r7, #26]
 8017c36:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017c3a:	4293      	cmp	r3, r2
 8017c3c:	f200 809a 	bhi.w	8017d74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017c40:	69fa      	ldr	r2, [r7, #28]
 8017c42:	6879      	ldr	r1, [r7, #4]
 8017c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c46:	f7ff fdd5 	bl	80177f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8017c4a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017c4c:	697b      	ldr	r3, [r7, #20]
 8017c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c52:	f000 809b 	beq.w	8017d8c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017c56:	4b48      	ldr	r3, [pc, #288]	@ (8017d78 <ip4_reass+0x2b0>)
 8017c58:	881a      	ldrh	r2, [r3, #0]
 8017c5a:	8c3b      	ldrh	r3, [r7, #32]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	4b45      	ldr	r3, [pc, #276]	@ (8017d78 <ip4_reass+0x2b0>)
 8017c62:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017c64:	69fb      	ldr	r3, [r7, #28]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d00d      	beq.n	8017c86 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017c6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c6e:	4413      	add	r3, r2
 8017c70:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c74:	8a7a      	ldrh	r2, [r7, #18]
 8017c76:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c7a:	7f9b      	ldrb	r3, [r3, #30]
 8017c7c:	f043 0301 	orr.w	r3, r3, #1
 8017c80:	b2da      	uxtb	r2, r3
 8017c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c84:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	2b01      	cmp	r3, #1
 8017c8a:	d171      	bne.n	8017d70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c8e:	8b9b      	ldrh	r3, [r3, #28]
 8017c90:	3314      	adds	r3, #20
 8017c92:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c96:	685b      	ldr	r3, [r3, #4]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ca8:	3308      	adds	r3, #8
 8017caa:	2214      	movs	r2, #20
 8017cac:	4619      	mov	r1, r3
 8017cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017cb0:	f001 fc87 	bl	80195c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017cb4:	8a3b      	ldrh	r3, [r7, #16]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7f5 fd0e 	bl	800d6d8 <lwip_htons>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	719a      	strb	r2, [r3, #6]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	729a      	strb	r2, [r3, #10]
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017cde:	e00d      	b.n	8017cfc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ce2:	685b      	ldr	r3, [r3, #4]
 8017ce4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017ce6:	2114      	movs	r1, #20
 8017ce8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017cea:	f7f7 f81b 	bl	800ed24 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017cee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017cf0:	6878      	ldr	r0, [r7, #4]
 8017cf2:	f7f7 f96b 	bl	800efcc <pbuf_cat>
      r = iprh->next_pbuf;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d1ee      	bne.n	8017ce0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017d02:	4b1e      	ldr	r3, [pc, #120]	@ (8017d7c <ip4_reass+0x2b4>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d102      	bne.n	8017d12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017d10:	e010      	b.n	8017d34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017d12:	4b1a      	ldr	r3, [pc, #104]	@ (8017d7c <ip4_reass+0x2b4>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017d18:	e007      	b.n	8017d2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d006      	beq.n	8017d32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1f4      	bne.n	8017d1a <ip4_reass+0x252>
 8017d30:	e000      	b.n	8017d34 <ip4_reass+0x26c>
          break;
 8017d32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017d36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d38:	f7ff fd2e 	bl	8017798 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f7f7 f905 	bl	800ef4c <pbuf_clen>
 8017d42:	4603      	mov	r3, r0
 8017d44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017d46:	4b0c      	ldr	r3, [pc, #48]	@ (8017d78 <ip4_reass+0x2b0>)
 8017d48:	881b      	ldrh	r3, [r3, #0]
 8017d4a:	8c3a      	ldrh	r2, [r7, #32]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d906      	bls.n	8017d5e <ip4_reass+0x296>
 8017d50:	4b0b      	ldr	r3, [pc, #44]	@ (8017d80 <ip4_reass+0x2b8>)
 8017d52:	f240 229b 	movw	r2, #667	@ 0x29b
 8017d56:	490b      	ldr	r1, [pc, #44]	@ (8017d84 <ip4_reass+0x2bc>)
 8017d58:	480b      	ldr	r0, [pc, #44]	@ (8017d88 <ip4_reass+0x2c0>)
 8017d5a:	f001 f9b3 	bl	80190c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017d5e:	4b06      	ldr	r3, [pc, #24]	@ (8017d78 <ip4_reass+0x2b0>)
 8017d60:	881a      	ldrh	r2, [r3, #0]
 8017d62:	8c3b      	ldrh	r3, [r7, #32]
 8017d64:	1ad3      	subs	r3, r2, r3
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	4b03      	ldr	r3, [pc, #12]	@ (8017d78 <ip4_reass+0x2b0>)
 8017d6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	e038      	b.n	8017de2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017d70:	2300      	movs	r3, #0
 8017d72:	e036      	b.n	8017de2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017d74:	bf00      	nop
 8017d76:	e00a      	b.n	8017d8e <ip4_reass+0x2c6>
 8017d78:	2000e270 	.word	0x2000e270
 8017d7c:	2000e26c 	.word	0x2000e26c
 8017d80:	0801e83c 	.word	0x0801e83c
 8017d84:	0801e9ac 	.word	0x0801e9ac
 8017d88:	0801e884 	.word	0x0801e884
    goto nullreturn_ipr;
 8017d8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d106      	bne.n	8017da2 <ip4_reass+0x2da>
 8017d94:	4b15      	ldr	r3, [pc, #84]	@ (8017dec <ip4_reass+0x324>)
 8017d96:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8017d9a:	4915      	ldr	r1, [pc, #84]	@ (8017df0 <ip4_reass+0x328>)
 8017d9c:	4815      	ldr	r0, [pc, #84]	@ (8017df4 <ip4_reass+0x32c>)
 8017d9e:	f001 f991 	bl	80190c4 <iprintf>
  if (ipr->p == NULL) {
 8017da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017da4:	685b      	ldr	r3, [r3, #4]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d116      	bne.n	8017dd8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017daa:	4b13      	ldr	r3, [pc, #76]	@ (8017df8 <ip4_reass+0x330>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d006      	beq.n	8017dc2 <ip4_reass+0x2fa>
 8017db4:	4b0d      	ldr	r3, [pc, #52]	@ (8017dec <ip4_reass+0x324>)
 8017db6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017dba:	4910      	ldr	r1, [pc, #64]	@ (8017dfc <ip4_reass+0x334>)
 8017dbc:	480d      	ldr	r0, [pc, #52]	@ (8017df4 <ip4_reass+0x32c>)
 8017dbe:	f001 f981 	bl	80190c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017dc2:	2100      	movs	r1, #0
 8017dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017dc6:	f7ff fce7 	bl	8017798 <ip_reass_dequeue_datagram>
 8017dca:	e006      	b.n	8017dda <ip4_reass+0x312>
    goto nullreturn;
 8017dcc:	bf00      	nop
 8017dce:	e004      	b.n	8017dda <ip4_reass+0x312>
    goto nullreturn;
 8017dd0:	bf00      	nop
 8017dd2:	e002      	b.n	8017dda <ip4_reass+0x312>
      goto nullreturn;
 8017dd4:	bf00      	nop
 8017dd6:	e000      	b.n	8017dda <ip4_reass+0x312>
  }

nullreturn:
 8017dd8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f7f7 f828 	bl	800ee30 <pbuf_free>
  return NULL;
 8017de0:	2300      	movs	r3, #0
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3738      	adds	r7, #56	@ 0x38
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
 8017dea:	bf00      	nop
 8017dec:	0801e83c 	.word	0x0801e83c
 8017df0:	0801e9c8 	.word	0x0801e9c8
 8017df4:	0801e884 	.word	0x0801e884
 8017df8:	2000e26c 	.word	0x2000e26c
 8017dfc:	0801e9d4 	.word	0x0801e9d4

08017e00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017e04:	2005      	movs	r0, #5
 8017e06:	f7f6 f91d 	bl	800e044 <memp_malloc>
 8017e0a:	4603      	mov	r3, r0
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d106      	bne.n	8017e2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8017e1e:	4b07      	ldr	r3, [pc, #28]	@ (8017e3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017e20:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017e24:	4906      	ldr	r1, [pc, #24]	@ (8017e40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017e26:	4807      	ldr	r0, [pc, #28]	@ (8017e44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017e28:	f001 f94c 	bl	80190c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017e2c:	6879      	ldr	r1, [r7, #4]
 8017e2e:	2005      	movs	r0, #5
 8017e30:	f7f6 f95a 	bl	800e0e8 <memp_free>
}
 8017e34:	bf00      	nop
 8017e36:	3708      	adds	r7, #8
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}
 8017e3c:	0801e83c 	.word	0x0801e83c
 8017e40:	0801e9f4 	.word	0x0801e9f4
 8017e44:	0801e884 	.word	0x0801e884

08017e48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d106      	bne.n	8017e68 <ipfrag_free_pbuf_custom+0x20>
 8017e5a:	4b11      	ldr	r3, [pc, #68]	@ (8017ea0 <ipfrag_free_pbuf_custom+0x58>)
 8017e5c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017e60:	4910      	ldr	r1, [pc, #64]	@ (8017ea4 <ipfrag_free_pbuf_custom+0x5c>)
 8017e62:	4811      	ldr	r0, [pc, #68]	@ (8017ea8 <ipfrag_free_pbuf_custom+0x60>)
 8017e64:	f001 f92e 	bl	80190c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d006      	beq.n	8017e7e <ipfrag_free_pbuf_custom+0x36>
 8017e70:	4b0b      	ldr	r3, [pc, #44]	@ (8017ea0 <ipfrag_free_pbuf_custom+0x58>)
 8017e72:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8017e76:	490d      	ldr	r1, [pc, #52]	@ (8017eac <ipfrag_free_pbuf_custom+0x64>)
 8017e78:	480b      	ldr	r0, [pc, #44]	@ (8017ea8 <ipfrag_free_pbuf_custom+0x60>)
 8017e7a:	f001 f923 	bl	80190c4 <iprintf>
  if (pcr->original != NULL) {
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	695b      	ldr	r3, [r3, #20]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d004      	beq.n	8017e90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	695b      	ldr	r3, [r3, #20]
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7f6 ffd0 	bl	800ee30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f7ff ffbd 	bl	8017e10 <ip_frag_free_pbuf_custom_ref>
}
 8017e96:	bf00      	nop
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	0801e83c 	.word	0x0801e83c
 8017ea4:	0801ea00 	.word	0x0801ea00
 8017ea8:	0801e884 	.word	0x0801e884
 8017eac:	0801ea0c 	.word	0x0801ea0c

08017eb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b094      	sub	sp, #80	@ 0x50
 8017eb4:	af02      	add	r7, sp, #8
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017ec2:	68bb      	ldr	r3, [r7, #8]
 8017ec4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017ec6:	3b14      	subs	r3, #20
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	da00      	bge.n	8017ece <ip4_frag+0x1e>
 8017ecc:	3307      	adds	r3, #7
 8017ece:	10db      	asrs	r3, r3, #3
 8017ed0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017ed2:	2314      	movs	r3, #20
 8017ed4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	685b      	ldr	r3, [r3, #4]
 8017eda:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ede:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	f003 030f 	and.w	r3, r3, #15
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	2b14      	cmp	r3, #20
 8017ef0:	d002      	beq.n	8017ef8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017ef2:	f06f 0305 	mvn.w	r3, #5
 8017ef6:	e110      	b.n	801811a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	895b      	ldrh	r3, [r3, #10]
 8017efc:	2b13      	cmp	r3, #19
 8017efe:	d809      	bhi.n	8017f14 <ip4_frag+0x64>
 8017f00:	4b88      	ldr	r3, [pc, #544]	@ (8018124 <ip4_frag+0x274>)
 8017f02:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8017f06:	4988      	ldr	r1, [pc, #544]	@ (8018128 <ip4_frag+0x278>)
 8017f08:	4888      	ldr	r0, [pc, #544]	@ (801812c <ip4_frag+0x27c>)
 8017f0a:	f001 f8db 	bl	80190c4 <iprintf>
 8017f0e:	f06f 0305 	mvn.w	r3, #5
 8017f12:	e102      	b.n	801811a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f16:	88db      	ldrh	r3, [r3, #6]
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7f5 fbdc 	bl	800d6d8 <lwip_htons>
 8017f20:	4603      	mov	r3, r0
 8017f22:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017f24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017f2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017f34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	891b      	ldrh	r3, [r3, #8]
 8017f3a:	3b14      	subs	r3, #20
 8017f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017f40:	e0e1      	b.n	8018106 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017f42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017f44:	00db      	lsls	r3, r3, #3
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f4c:	4293      	cmp	r3, r2
 8017f4e:	bf28      	it	cs
 8017f50:	4613      	movcs	r3, r2
 8017f52:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017f54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017f58:	2114      	movs	r1, #20
 8017f5a:	200e      	movs	r0, #14
 8017f5c:	f7f6 fc84 	bl	800e868 <pbuf_alloc>
 8017f60:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	f000 80d5 	beq.w	8018114 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f6c:	895b      	ldrh	r3, [r3, #10]
 8017f6e:	2b13      	cmp	r3, #19
 8017f70:	d806      	bhi.n	8017f80 <ip4_frag+0xd0>
 8017f72:	4b6c      	ldr	r3, [pc, #432]	@ (8018124 <ip4_frag+0x274>)
 8017f74:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8017f78:	496d      	ldr	r1, [pc, #436]	@ (8018130 <ip4_frag+0x280>)
 8017f7a:	486c      	ldr	r0, [pc, #432]	@ (801812c <ip4_frag+0x27c>)
 8017f7c:	f001 f8a2 	bl	80190c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	2214      	movs	r2, #20
 8017f86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f001 fb1a 	bl	80195c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f90:	685b      	ldr	r3, [r3, #4]
 8017f92:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017f94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017f96:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8017f9a:	e064      	b.n	8018066 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	895a      	ldrh	r2, [r3, #10]
 8017fa0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017fa2:	1ad3      	subs	r3, r2, r3
 8017fa4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	895b      	ldrh	r3, [r3, #10]
 8017faa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017fac:	429a      	cmp	r2, r3
 8017fae:	d906      	bls.n	8017fbe <ip4_frag+0x10e>
 8017fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8018124 <ip4_frag+0x274>)
 8017fb2:	f240 322d 	movw	r2, #813	@ 0x32d
 8017fb6:	495f      	ldr	r1, [pc, #380]	@ (8018134 <ip4_frag+0x284>)
 8017fb8:	485c      	ldr	r0, [pc, #368]	@ (801812c <ip4_frag+0x27c>)
 8017fba:	f001 f883 	bl	80190c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017fbe:	8bfa      	ldrh	r2, [r7, #30]
 8017fc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	bf28      	it	cs
 8017fc8:	4613      	movcs	r3, r2
 8017fca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d105      	bne.n	8017fe2 <ip4_frag+0x132>
        poff = 0;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	60fb      	str	r3, [r7, #12]
        continue;
 8017fe0:	e041      	b.n	8018066 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017fe2:	f7ff ff0d 	bl	8017e00 <ip_frag_alloc_pbuf_custom_ref>
 8017fe6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017fe8:	69bb      	ldr	r3, [r7, #24]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d103      	bne.n	8017ff6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ff0:	f7f6 ff1e 	bl	800ee30 <pbuf_free>
        goto memerr;
 8017ff4:	e08f      	b.n	8018116 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ff6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ffc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ffe:	4413      	add	r3, r2
 8018000:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018004:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018008:	9201      	str	r2, [sp, #4]
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	4603      	mov	r3, r0
 801800e:	2241      	movs	r2, #65	@ 0x41
 8018010:	2000      	movs	r0, #0
 8018012:	f7f6 fd53 	bl	800eabc <pbuf_alloced_custom>
 8018016:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d106      	bne.n	801802c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801801e:	69b8      	ldr	r0, [r7, #24]
 8018020:	f7ff fef6 	bl	8017e10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018024:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018026:	f7f6 ff03 	bl	800ee30 <pbuf_free>
        goto memerr;
 801802a:	e074      	b.n	8018116 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f7f6 ffa5 	bl	800ef7c <pbuf_ref>
      pcr->original = p;
 8018032:	69bb      	ldr	r3, [r7, #24]
 8018034:	68fa      	ldr	r2, [r7, #12]
 8018036:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018038:	69bb      	ldr	r3, [r7, #24]
 801803a:	4a3f      	ldr	r2, [pc, #252]	@ (8018138 <ip4_frag+0x288>)
 801803c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801803e:	6979      	ldr	r1, [r7, #20]
 8018040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018042:	f7f6 ffc3 	bl	800efcc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018046:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801804a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801804e:	1ad3      	subs	r3, r2, r3
 8018050:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018058:	2b00      	cmp	r3, #0
 801805a:	d004      	beq.n	8018066 <ip4_frag+0x1b6>
        poff = 0;
 801805c:	2300      	movs	r3, #0
 801805e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801806a:	2b00      	cmp	r3, #0
 801806c:	d196      	bne.n	8017f9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801806e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018074:	4413      	add	r3, r2
 8018076:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801807c:	f1a3 0213 	sub.w	r2, r3, #19
 8018080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018084:	429a      	cmp	r2, r3
 8018086:	bfcc      	ite	gt
 8018088:	2301      	movgt	r3, #1
 801808a:	2300      	movle	r3, #0
 801808c:	b2db      	uxtb	r3, r3
 801808e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018098:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801809a:	6a3b      	ldr	r3, [r7, #32]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d002      	beq.n	80180a6 <ip4_frag+0x1f6>
 80180a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d003      	beq.n	80180ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80180a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80180a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80180ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80180ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7f5 fb11 	bl	800d6d8 <lwip_htons>
 80180b6:	4603      	mov	r3, r0
 80180b8:	461a      	mov	r2, r3
 80180ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80180be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80180c0:	3314      	adds	r3, #20
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7f5 fb07 	bl	800d6d8 <lwip_htons>
 80180ca:	4603      	mov	r3, r0
 80180cc:	461a      	mov	r2, r3
 80180ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80180d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d4:	2200      	movs	r2, #0
 80180d6:	729a      	strb	r2, [r3, #10]
 80180d8:	2200      	movs	r2, #0
 80180da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	695b      	ldr	r3, [r3, #20]
 80180e0:	687a      	ldr	r2, [r7, #4]
 80180e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80180e4:	68b8      	ldr	r0, [r7, #8]
 80180e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80180e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80180ea:	f7f6 fea1 	bl	800ee30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80180ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80180f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80180f4:	1ad3      	subs	r3, r2, r3
 80180f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80180fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80180fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018100:	4413      	add	r3, r2
 8018102:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801810a:	2b00      	cmp	r3, #0
 801810c:	f47f af19 	bne.w	8017f42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018110:	2300      	movs	r3, #0
 8018112:	e002      	b.n	801811a <ip4_frag+0x26a>
      goto memerr;
 8018114:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801811a:	4618      	mov	r0, r3
 801811c:	3748      	adds	r7, #72	@ 0x48
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	0801e83c 	.word	0x0801e83c
 8018128:	0801ea18 	.word	0x0801ea18
 801812c:	0801e884 	.word	0x0801e884
 8018130:	0801ea34 	.word	0x0801ea34
 8018134:	0801ea54 	.word	0x0801ea54
 8018138:	08017e49 	.word	0x08017e49

0801813c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b086      	sub	sp, #24
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
 8018144:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018146:	230e      	movs	r3, #14
 8018148:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	895b      	ldrh	r3, [r3, #10]
 801814e:	2b0e      	cmp	r3, #14
 8018150:	d96e      	bls.n	8018230 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	7bdb      	ldrb	r3, [r3, #15]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d106      	bne.n	8018168 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018160:	3301      	adds	r3, #1
 8018162:	b2da      	uxtb	r2, r3
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	7b1a      	ldrb	r2, [r3, #12]
 8018172:	7b5b      	ldrb	r3, [r3, #13]
 8018174:	021b      	lsls	r3, r3, #8
 8018176:	4313      	orrs	r3, r2
 8018178:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	781b      	ldrb	r3, [r3, #0]
 801817e:	f003 0301 	and.w	r3, r3, #1
 8018182:	2b00      	cmp	r3, #0
 8018184:	d023      	beq.n	80181ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018186:	693b      	ldr	r3, [r7, #16]
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	2b01      	cmp	r3, #1
 801818c:	d10f      	bne.n	80181ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801818e:	693b      	ldr	r3, [r7, #16]
 8018190:	785b      	ldrb	r3, [r3, #1]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d11b      	bne.n	80181ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018196:	693b      	ldr	r3, [r7, #16]
 8018198:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801819a:	2b5e      	cmp	r3, #94	@ 0x5e
 801819c:	d117      	bne.n	80181ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	7b5b      	ldrb	r3, [r3, #13]
 80181a2:	f043 0310 	orr.w	r3, r3, #16
 80181a6:	b2da      	uxtb	r2, r3
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	735a      	strb	r2, [r3, #13]
 80181ac:	e00f      	b.n	80181ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	2206      	movs	r2, #6
 80181b2:	4928      	ldr	r1, [pc, #160]	@ (8018254 <ethernet_input+0x118>)
 80181b4:	4618      	mov	r0, r3
 80181b6:	f001 f921 	bl	80193fc <memcmp>
 80181ba:	4603      	mov	r3, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d106      	bne.n	80181ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	7b5b      	ldrb	r3, [r3, #13]
 80181c4:	f043 0308 	orr.w	r3, r3, #8
 80181c8:	b2da      	uxtb	r2, r3
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80181ce:	89fb      	ldrh	r3, [r7, #14]
 80181d0:	2b08      	cmp	r3, #8
 80181d2:	d003      	beq.n	80181dc <ethernet_input+0xa0>
 80181d4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80181d8:	d014      	beq.n	8018204 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80181da:	e032      	b.n	8018242 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80181e2:	f003 0308 	and.w	r3, r3, #8
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d024      	beq.n	8018234 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80181ea:	8afb      	ldrh	r3, [r7, #22]
 80181ec:	4619      	mov	r1, r3
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7f6 fd98 	bl	800ed24 <pbuf_remove_header>
 80181f4:	4603      	mov	r3, r0
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d11e      	bne.n	8018238 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80181fa:	6839      	ldr	r1, [r7, #0]
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f7fe ff21 	bl	8017044 <ip4_input>
      break;
 8018202:	e013      	b.n	801822c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801820a:	f003 0308 	and.w	r3, r3, #8
 801820e:	2b00      	cmp	r3, #0
 8018210:	d014      	beq.n	801823c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018212:	8afb      	ldrh	r3, [r7, #22]
 8018214:	4619      	mov	r1, r3
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f7f6 fd84 	bl	800ed24 <pbuf_remove_header>
 801821c:	4603      	mov	r3, r0
 801821e:	2b00      	cmp	r3, #0
 8018220:	d10e      	bne.n	8018240 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018222:	6839      	ldr	r1, [r7, #0]
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	f7fe f8c1 	bl	80163ac <etharp_input>
      break;
 801822a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801822c:	2300      	movs	r3, #0
 801822e:	e00c      	b.n	801824a <ethernet_input+0x10e>
    goto free_and_return;
 8018230:	bf00      	nop
 8018232:	e006      	b.n	8018242 <ethernet_input+0x106>
        goto free_and_return;
 8018234:	bf00      	nop
 8018236:	e004      	b.n	8018242 <ethernet_input+0x106>
        goto free_and_return;
 8018238:	bf00      	nop
 801823a:	e002      	b.n	8018242 <ethernet_input+0x106>
        goto free_and_return;
 801823c:	bf00      	nop
 801823e:	e000      	b.n	8018242 <ethernet_input+0x106>
        goto free_and_return;
 8018240:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f7f6 fdf4 	bl	800ee30 <pbuf_free>
  return ERR_OK;
 8018248:	2300      	movs	r3, #0
}
 801824a:	4618      	mov	r0, r3
 801824c:	3718      	adds	r7, #24
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}
 8018252:	bf00      	nop
 8018254:	0801ec4c 	.word	0x0801ec4c

08018258 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018258:	b580      	push	{r7, lr}
 801825a:	b086      	sub	sp, #24
 801825c:	af00      	add	r7, sp, #0
 801825e:	60f8      	str	r0, [r7, #12]
 8018260:	60b9      	str	r1, [r7, #8]
 8018262:	607a      	str	r2, [r7, #4]
 8018264:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018266:	8c3b      	ldrh	r3, [r7, #32]
 8018268:	4618      	mov	r0, r3
 801826a:	f7f5 fa35 	bl	800d6d8 <lwip_htons>
 801826e:	4603      	mov	r3, r0
 8018270:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018272:	210e      	movs	r1, #14
 8018274:	68b8      	ldr	r0, [r7, #8]
 8018276:	f7f6 fd45 	bl	800ed04 <pbuf_add_header>
 801827a:	4603      	mov	r3, r0
 801827c:	2b00      	cmp	r3, #0
 801827e:	d125      	bne.n	80182cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	8afa      	ldrh	r2, [r7, #22]
 801828a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801828c:	693b      	ldr	r3, [r7, #16]
 801828e:	2206      	movs	r2, #6
 8018290:	6839      	ldr	r1, [r7, #0]
 8018292:	4618      	mov	r0, r3
 8018294:	f001 f995 	bl	80195c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018298:	693b      	ldr	r3, [r7, #16]
 801829a:	3306      	adds	r3, #6
 801829c:	2206      	movs	r2, #6
 801829e:	6879      	ldr	r1, [r7, #4]
 80182a0:	4618      	mov	r0, r3
 80182a2:	f001 f98e 	bl	80195c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80182ac:	2b06      	cmp	r3, #6
 80182ae:	d006      	beq.n	80182be <ethernet_output+0x66>
 80182b0:	4b0a      	ldr	r3, [pc, #40]	@ (80182dc <ethernet_output+0x84>)
 80182b2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80182b6:	490a      	ldr	r1, [pc, #40]	@ (80182e0 <ethernet_output+0x88>)
 80182b8:	480a      	ldr	r0, [pc, #40]	@ (80182e4 <ethernet_output+0x8c>)
 80182ba:	f000 ff03 	bl	80190c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	699b      	ldr	r3, [r3, #24]
 80182c2:	68b9      	ldr	r1, [r7, #8]
 80182c4:	68f8      	ldr	r0, [r7, #12]
 80182c6:	4798      	blx	r3
 80182c8:	4603      	mov	r3, r0
 80182ca:	e002      	b.n	80182d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80182cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80182ce:	f06f 0301 	mvn.w	r3, #1
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3718      	adds	r7, #24
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	0801ea64 	.word	0x0801ea64
 80182e0:	0801ea9c 	.word	0x0801ea9c
 80182e4:	0801ead0 	.word	0x0801ead0

080182e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	2200      	movs	r2, #0
 80182f6:	2104      	movs	r1, #4
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7ef fa5d 	bl	80077b8 <osMessageQueueNew>
 80182fe:	4602      	mov	r2, r0
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d102      	bne.n	8018312 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801830c:	f04f 33ff 	mov.w	r3, #4294967295
 8018310:	e000      	b.n	8018314 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018312:	2300      	movs	r3, #0
}
 8018314:	4618      	mov	r0, r3
 8018316:	3708      	adds	r7, #8
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4618      	mov	r0, r3
 801832a:	f7ef fbb1 	bl	8007a90 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4618      	mov	r0, r3
 8018334:	f7ef fbde 	bl	8007af4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018338:	bf00      	nop
 801833a:	3708      	adds	r7, #8
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	6818      	ldr	r0, [r3, #0]
 801834e:	4639      	mov	r1, r7
 8018350:	2300      	movs	r3, #0
 8018352:	2200      	movs	r2, #0
 8018354:	f7ef fab6 	bl	80078c4 <osMessageQueuePut>
 8018358:	4603      	mov	r3, r0
 801835a:	2b00      	cmp	r3, #0
 801835c:	d102      	bne.n	8018364 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801835e:	2300      	movs	r3, #0
 8018360:	73fb      	strb	r3, [r7, #15]
 8018362:	e001      	b.n	8018368 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018364:	23ff      	movs	r3, #255	@ 0xff
 8018366:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801836c:	4618      	mov	r0, r3
 801836e:	3710      	adds	r7, #16
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}

08018374 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b086      	sub	sp, #24
 8018378:	af00      	add	r7, sp, #0
 801837a:	60f8      	str	r0, [r7, #12]
 801837c:	60b9      	str	r1, [r7, #8]
 801837e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018380:	f7ee fe46 	bl	8007010 <osKernelGetTickCount>
 8018384:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d013      	beq.n	80183b4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	6818      	ldr	r0, [r3, #0]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2200      	movs	r2, #0
 8018394:	68b9      	ldr	r1, [r7, #8]
 8018396:	f7ef fb09 	bl	80079ac <osMessageQueueGet>
 801839a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801839c:	693b      	ldr	r3, [r7, #16]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d105      	bne.n	80183ae <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80183a2:	f7ee fe35 	bl	8007010 <osKernelGetTickCount>
 80183a6:	4602      	mov	r2, r0
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	1ad3      	subs	r3, r2, r3
 80183ac:	e00f      	b.n	80183ce <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80183ae:	f04f 33ff 	mov.w	r3, #4294967295
 80183b2:	e00c      	b.n	80183ce <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	6818      	ldr	r0, [r3, #0]
 80183b8:	f04f 33ff 	mov.w	r3, #4294967295
 80183bc:	2200      	movs	r2, #0
 80183be:	68b9      	ldr	r1, [r7, #8]
 80183c0:	f7ef faf4 	bl	80079ac <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80183c4:	f7ee fe24 	bl	8007010 <osKernelGetTickCount>
 80183c8:	4602      	mov	r2, r0
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	3718      	adds	r7, #24
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}

080183d6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80183d6:	b580      	push	{r7, lr}
 80183d8:	b082      	sub	sp, #8
 80183da:	af00      	add	r7, sp, #0
 80183dc:	6078      	str	r0, [r7, #4]
 80183de:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6818      	ldr	r0, [r3, #0]
 80183e4:	2300      	movs	r3, #0
 80183e6:	2200      	movs	r2, #0
 80183e8:	6839      	ldr	r1, [r7, #0]
 80183ea:	f7ef fadf 	bl	80079ac <osMessageQueueGet>
 80183ee:	4603      	mov	r3, r0
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d101      	bne.n	80183f8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80183f4:	2300      	movs	r3, #0
 80183f6:	e001      	b.n	80183fc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80183f8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3708      	adds	r7, #8
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}

08018404 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018404:	b480      	push	{r7}
 8018406:	b083      	sub	sp, #12
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d101      	bne.n	8018418 <sys_mbox_valid+0x14>
    return 0;
 8018414:	2300      	movs	r3, #0
 8018416:	e000      	b.n	801841a <sys_mbox_valid+0x16>
  else
    return 1;
 8018418:	2301      	movs	r3, #1
}
 801841a:	4618      	mov	r0, r3
 801841c:	370c      	adds	r7, #12
 801841e:	46bd      	mov	sp, r7
 8018420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018424:	4770      	bx	lr

08018426 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018426:	b480      	push	{r7}
 8018428:	b083      	sub	sp, #12
 801842a:	af00      	add	r7, sp, #0
 801842c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	601a      	str	r2, [r3, #0]
}
 8018434:	bf00      	nop
 8018436:	370c      	adds	r7, #12
 8018438:	46bd      	mov	sp, r7
 801843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843e:	4770      	bx	lr

08018440 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	460b      	mov	r3, r1
 801844a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801844c:	78fb      	ldrb	r3, [r7, #3]
 801844e:	2200      	movs	r2, #0
 8018450:	4619      	mov	r1, r3
 8018452:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018456:	f7ef f81f 	bl	8007498 <osSemaphoreNew>
 801845a:	4602      	mov	r2, r0
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d102      	bne.n	801846e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018468:	f04f 33ff 	mov.w	r3, #4294967295
 801846c:	e009      	b.n	8018482 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801846e:	78fb      	ldrb	r3, [r7, #3]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d105      	bne.n	8018480 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	2100      	movs	r1, #0
 801847a:	4618      	mov	r0, r3
 801847c:	f7ef f8a8 	bl	80075d0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018480:	2300      	movs	r3, #0
}
 8018482:	4618      	mov	r0, r3
 8018484:	3708      	adds	r7, #8
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}

0801848a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801848a:	b580      	push	{r7, lr}
 801848c:	b084      	sub	sp, #16
 801848e:	af00      	add	r7, sp, #0
 8018490:	6078      	str	r0, [r7, #4]
 8018492:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018494:	f7ee fdbc 	bl	8007010 <osKernelGetTickCount>
 8018498:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801849a:	683b      	ldr	r3, [r7, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d011      	beq.n	80184c4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	6839      	ldr	r1, [r7, #0]
 80184a6:	4618      	mov	r0, r3
 80184a8:	f7ef f892 	bl	80075d0 <osSemaphoreAcquire>
 80184ac:	4603      	mov	r3, r0
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d105      	bne.n	80184be <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80184b2:	f7ee fdad 	bl	8007010 <osKernelGetTickCount>
 80184b6:	4602      	mov	r2, r0
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	1ad3      	subs	r3, r2, r3
 80184bc:	e012      	b.n	80184e4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80184be:	f04f 33ff 	mov.w	r3, #4294967295
 80184c2:	e00f      	b.n	80184e4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80184c4:	bf00      	nop
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	f04f 31ff 	mov.w	r1, #4294967295
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7ef f87e 	bl	80075d0 <osSemaphoreAcquire>
 80184d4:	4603      	mov	r3, r0
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d1f5      	bne.n	80184c6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80184da:	f7ee fd99 	bl	8007010 <osKernelGetTickCount>
 80184de:	4602      	mov	r2, r0
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	3710      	adds	r7, #16
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}

080184ec <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ef f8cf 	bl	800769c <osSemaphoreRelease>
}
 80184fe:	bf00      	nop
 8018500:	3708      	adds	r7, #8
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}

08018506 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018506:	b580      	push	{r7, lr}
 8018508:	b082      	sub	sp, #8
 801850a:	af00      	add	r7, sp, #0
 801850c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	4618      	mov	r0, r3
 8018514:	f7ef f91a 	bl	800774c <osSemaphoreDelete>
}
 8018518:	bf00      	nop
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d101      	bne.n	8018534 <sys_sem_valid+0x14>
    return 0;
 8018530:	2300      	movs	r3, #0
 8018532:	e000      	b.n	8018536 <sys_sem_valid+0x16>
  else
    return 1;
 8018534:	2301      	movs	r3, #1
}
 8018536:	4618      	mov	r0, r3
 8018538:	370c      	adds	r7, #12
 801853a:	46bd      	mov	sp, r7
 801853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018540:	4770      	bx	lr

08018542 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018542:	b480      	push	{r7}
 8018544:	b083      	sub	sp, #12
 8018546:	af00      	add	r7, sp, #0
 8018548:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2200      	movs	r2, #0
 801854e:	601a      	str	r2, [r3, #0]
}
 8018550:	bf00      	nop
 8018552:	370c      	adds	r7, #12
 8018554:	46bd      	mov	sp, r7
 8018556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855a:	4770      	bx	lr

0801855c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018560:	2000      	movs	r0, #0
 8018562:	f7ee fe51 	bl	8007208 <osMutexNew>
 8018566:	4603      	mov	r3, r0
 8018568:	4a01      	ldr	r2, [pc, #4]	@ (8018570 <sys_init+0x14>)
 801856a:	6013      	str	r3, [r2, #0]
#endif
}
 801856c:	bf00      	nop
 801856e:	bd80      	pop	{r7, pc}
 8018570:	2000e278 	.word	0x2000e278

08018574 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018574:	b580      	push	{r7, lr}
 8018576:	b082      	sub	sp, #8
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801857c:	2000      	movs	r0, #0
 801857e:	f7ee fe43 	bl	8007208 <osMutexNew>
 8018582:	4602      	mov	r2, r0
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d102      	bne.n	8018596 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018590:	f04f 33ff 	mov.w	r3, #4294967295
 8018594:	e000      	b.n	8018598 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018596:	2300      	movs	r3, #0
}
 8018598:	4618      	mov	r0, r3
 801859a:	3708      	adds	r7, #8
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	f04f 31ff 	mov.w	r1, #4294967295
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7ee fec3 	bl	800733c <osMutexAcquire>
#endif
}
 80185b6:	bf00      	nop
 80185b8:	3708      	adds	r7, #8
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}

080185be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80185be:	b580      	push	{r7, lr}
 80185c0:	b082      	sub	sp, #8
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7ee ff14 	bl	80073f8 <osMutexRelease>
}
 80185d0:	bf00      	nop
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b08e      	sub	sp, #56	@ 0x38
 80185dc:	af00      	add	r7, sp, #0
 80185de:	60f8      	str	r0, [r7, #12]
 80185e0:	60b9      	str	r1, [r7, #8]
 80185e2:	607a      	str	r2, [r7, #4]
 80185e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80185e6:	f107 0314 	add.w	r3, r7, #20
 80185ea:	2224      	movs	r2, #36	@ 0x24
 80185ec:	2100      	movs	r1, #0
 80185ee:	4618      	mov	r0, r3
 80185f0:	f000 ff2e 	bl	8019450 <memset>
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	617b      	str	r3, [r7, #20]
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80185fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80185fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018600:	f107 0314 	add.w	r3, r7, #20
 8018604:	461a      	mov	r2, r3
 8018606:	6879      	ldr	r1, [r7, #4]
 8018608:	68b8      	ldr	r0, [r7, #8]
 801860a:	f7ee fd29 	bl	8007060 <osThreadNew>
 801860e:	4603      	mov	r3, r0
#endif
}
 8018610:	4618      	mov	r0, r3
 8018612:	3738      	adds	r7, #56	@ 0x38
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}

08018618 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801861c:	4b04      	ldr	r3, [pc, #16]	@ (8018630 <sys_arch_protect+0x18>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	f04f 31ff 	mov.w	r1, #4294967295
 8018624:	4618      	mov	r0, r3
 8018626:	f7ee fe89 	bl	800733c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801862a:	2301      	movs	r3, #1
}
 801862c:	4618      	mov	r0, r3
 801862e:	bd80      	pop	{r7, pc}
 8018630:	2000e278 	.word	0x2000e278

08018634 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801863c:	4b04      	ldr	r3, [pc, #16]	@ (8018650 <sys_arch_unprotect+0x1c>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	4618      	mov	r0, r3
 8018642:	f7ee fed9 	bl	80073f8 <osMutexRelease>
}
 8018646:	bf00      	nop
 8018648:	3708      	adds	r7, #8
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	2000e278 	.word	0x2000e278

08018654 <rand>:
 8018654:	4b16      	ldr	r3, [pc, #88]	@ (80186b0 <rand+0x5c>)
 8018656:	b510      	push	{r4, lr}
 8018658:	681c      	ldr	r4, [r3, #0]
 801865a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801865c:	b9b3      	cbnz	r3, 801868c <rand+0x38>
 801865e:	2018      	movs	r0, #24
 8018660:	f001 fe06 	bl	801a270 <malloc>
 8018664:	4602      	mov	r2, r0
 8018666:	6320      	str	r0, [r4, #48]	@ 0x30
 8018668:	b920      	cbnz	r0, 8018674 <rand+0x20>
 801866a:	4b12      	ldr	r3, [pc, #72]	@ (80186b4 <rand+0x60>)
 801866c:	4812      	ldr	r0, [pc, #72]	@ (80186b8 <rand+0x64>)
 801866e:	2152      	movs	r1, #82	@ 0x52
 8018670:	f000 ffb6 	bl	80195e0 <__assert_func>
 8018674:	4911      	ldr	r1, [pc, #68]	@ (80186bc <rand+0x68>)
 8018676:	4b12      	ldr	r3, [pc, #72]	@ (80186c0 <rand+0x6c>)
 8018678:	e9c0 1300 	strd	r1, r3, [r0]
 801867c:	4b11      	ldr	r3, [pc, #68]	@ (80186c4 <rand+0x70>)
 801867e:	6083      	str	r3, [r0, #8]
 8018680:	230b      	movs	r3, #11
 8018682:	8183      	strh	r3, [r0, #12]
 8018684:	2100      	movs	r1, #0
 8018686:	2001      	movs	r0, #1
 8018688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801868c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801868e:	480e      	ldr	r0, [pc, #56]	@ (80186c8 <rand+0x74>)
 8018690:	690b      	ldr	r3, [r1, #16]
 8018692:	694c      	ldr	r4, [r1, #20]
 8018694:	4a0d      	ldr	r2, [pc, #52]	@ (80186cc <rand+0x78>)
 8018696:	4358      	muls	r0, r3
 8018698:	fb02 0004 	mla	r0, r2, r4, r0
 801869c:	fba3 3202 	umull	r3, r2, r3, r2
 80186a0:	3301      	adds	r3, #1
 80186a2:	eb40 0002 	adc.w	r0, r0, r2
 80186a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80186aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80186ae:	bd10      	pop	{r4, pc}
 80186b0:	20000028 	.word	0x20000028
 80186b4:	0801ec5a 	.word	0x0801ec5a
 80186b8:	0801ec71 	.word	0x0801ec71
 80186bc:	abcd330e 	.word	0xabcd330e
 80186c0:	e66d1234 	.word	0xe66d1234
 80186c4:	0005deec 	.word	0x0005deec
 80186c8:	5851f42d 	.word	0x5851f42d
 80186cc:	4c957f2d 	.word	0x4c957f2d

080186d0 <__cvt>:
 80186d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186d2:	ed2d 8b02 	vpush	{d8}
 80186d6:	eeb0 8b40 	vmov.f64	d8, d0
 80186da:	b085      	sub	sp, #20
 80186dc:	4617      	mov	r7, r2
 80186de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80186e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80186e2:	ee18 2a90 	vmov	r2, s17
 80186e6:	f025 0520 	bic.w	r5, r5, #32
 80186ea:	2a00      	cmp	r2, #0
 80186ec:	bfb6      	itet	lt
 80186ee:	222d      	movlt	r2, #45	@ 0x2d
 80186f0:	2200      	movge	r2, #0
 80186f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80186f6:	2d46      	cmp	r5, #70	@ 0x46
 80186f8:	460c      	mov	r4, r1
 80186fa:	701a      	strb	r2, [r3, #0]
 80186fc:	d004      	beq.n	8018708 <__cvt+0x38>
 80186fe:	2d45      	cmp	r5, #69	@ 0x45
 8018700:	d100      	bne.n	8018704 <__cvt+0x34>
 8018702:	3401      	adds	r4, #1
 8018704:	2102      	movs	r1, #2
 8018706:	e000      	b.n	801870a <__cvt+0x3a>
 8018708:	2103      	movs	r1, #3
 801870a:	ab03      	add	r3, sp, #12
 801870c:	9301      	str	r3, [sp, #4]
 801870e:	ab02      	add	r3, sp, #8
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	4622      	mov	r2, r4
 8018714:	4633      	mov	r3, r6
 8018716:	eeb0 0b48 	vmov.f64	d0, d8
 801871a:	f001 f809 	bl	8019730 <_dtoa_r>
 801871e:	2d47      	cmp	r5, #71	@ 0x47
 8018720:	d114      	bne.n	801874c <__cvt+0x7c>
 8018722:	07fb      	lsls	r3, r7, #31
 8018724:	d50a      	bpl.n	801873c <__cvt+0x6c>
 8018726:	1902      	adds	r2, r0, r4
 8018728:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018730:	bf08      	it	eq
 8018732:	9203      	streq	r2, [sp, #12]
 8018734:	2130      	movs	r1, #48	@ 0x30
 8018736:	9b03      	ldr	r3, [sp, #12]
 8018738:	4293      	cmp	r3, r2
 801873a:	d319      	bcc.n	8018770 <__cvt+0xa0>
 801873c:	9b03      	ldr	r3, [sp, #12]
 801873e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018740:	1a1b      	subs	r3, r3, r0
 8018742:	6013      	str	r3, [r2, #0]
 8018744:	b005      	add	sp, #20
 8018746:	ecbd 8b02 	vpop	{d8}
 801874a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801874c:	2d46      	cmp	r5, #70	@ 0x46
 801874e:	eb00 0204 	add.w	r2, r0, r4
 8018752:	d1e9      	bne.n	8018728 <__cvt+0x58>
 8018754:	7803      	ldrb	r3, [r0, #0]
 8018756:	2b30      	cmp	r3, #48	@ 0x30
 8018758:	d107      	bne.n	801876a <__cvt+0x9a>
 801875a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	bf1c      	itt	ne
 8018764:	f1c4 0401 	rsbne	r4, r4, #1
 8018768:	6034      	strne	r4, [r6, #0]
 801876a:	6833      	ldr	r3, [r6, #0]
 801876c:	441a      	add	r2, r3
 801876e:	e7db      	b.n	8018728 <__cvt+0x58>
 8018770:	1c5c      	adds	r4, r3, #1
 8018772:	9403      	str	r4, [sp, #12]
 8018774:	7019      	strb	r1, [r3, #0]
 8018776:	e7de      	b.n	8018736 <__cvt+0x66>

08018778 <__exponent>:
 8018778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801877a:	2900      	cmp	r1, #0
 801877c:	bfba      	itte	lt
 801877e:	4249      	neglt	r1, r1
 8018780:	232d      	movlt	r3, #45	@ 0x2d
 8018782:	232b      	movge	r3, #43	@ 0x2b
 8018784:	2909      	cmp	r1, #9
 8018786:	7002      	strb	r2, [r0, #0]
 8018788:	7043      	strb	r3, [r0, #1]
 801878a:	dd29      	ble.n	80187e0 <__exponent+0x68>
 801878c:	f10d 0307 	add.w	r3, sp, #7
 8018790:	461d      	mov	r5, r3
 8018792:	270a      	movs	r7, #10
 8018794:	461a      	mov	r2, r3
 8018796:	fbb1 f6f7 	udiv	r6, r1, r7
 801879a:	fb07 1416 	mls	r4, r7, r6, r1
 801879e:	3430      	adds	r4, #48	@ 0x30
 80187a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80187a4:	460c      	mov	r4, r1
 80187a6:	2c63      	cmp	r4, #99	@ 0x63
 80187a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80187ac:	4631      	mov	r1, r6
 80187ae:	dcf1      	bgt.n	8018794 <__exponent+0x1c>
 80187b0:	3130      	adds	r1, #48	@ 0x30
 80187b2:	1e94      	subs	r4, r2, #2
 80187b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80187b8:	1c41      	adds	r1, r0, #1
 80187ba:	4623      	mov	r3, r4
 80187bc:	42ab      	cmp	r3, r5
 80187be:	d30a      	bcc.n	80187d6 <__exponent+0x5e>
 80187c0:	f10d 0309 	add.w	r3, sp, #9
 80187c4:	1a9b      	subs	r3, r3, r2
 80187c6:	42ac      	cmp	r4, r5
 80187c8:	bf88      	it	hi
 80187ca:	2300      	movhi	r3, #0
 80187cc:	3302      	adds	r3, #2
 80187ce:	4403      	add	r3, r0
 80187d0:	1a18      	subs	r0, r3, r0
 80187d2:	b003      	add	sp, #12
 80187d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80187da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80187de:	e7ed      	b.n	80187bc <__exponent+0x44>
 80187e0:	2330      	movs	r3, #48	@ 0x30
 80187e2:	3130      	adds	r1, #48	@ 0x30
 80187e4:	7083      	strb	r3, [r0, #2]
 80187e6:	70c1      	strb	r1, [r0, #3]
 80187e8:	1d03      	adds	r3, r0, #4
 80187ea:	e7f1      	b.n	80187d0 <__exponent+0x58>
 80187ec:	0000      	movs	r0, r0
	...

080187f0 <_printf_float>:
 80187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f4:	b08d      	sub	sp, #52	@ 0x34
 80187f6:	460c      	mov	r4, r1
 80187f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80187fc:	4616      	mov	r6, r2
 80187fe:	461f      	mov	r7, r3
 8018800:	4605      	mov	r5, r0
 8018802:	f000 fe65 	bl	80194d0 <_localeconv_r>
 8018806:	f8d0 b000 	ldr.w	fp, [r0]
 801880a:	4658      	mov	r0, fp
 801880c:	f7e7 fd68 	bl	80002e0 <strlen>
 8018810:	2300      	movs	r3, #0
 8018812:	930a      	str	r3, [sp, #40]	@ 0x28
 8018814:	f8d8 3000 	ldr.w	r3, [r8]
 8018818:	f894 9018 	ldrb.w	r9, [r4, #24]
 801881c:	6822      	ldr	r2, [r4, #0]
 801881e:	9005      	str	r0, [sp, #20]
 8018820:	3307      	adds	r3, #7
 8018822:	f023 0307 	bic.w	r3, r3, #7
 8018826:	f103 0108 	add.w	r1, r3, #8
 801882a:	f8c8 1000 	str.w	r1, [r8]
 801882e:	ed93 0b00 	vldr	d0, [r3]
 8018832:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8018a90 <_printf_float+0x2a0>
 8018836:	eeb0 7bc0 	vabs.f64	d7, d0
 801883a:	eeb4 7b46 	vcmp.f64	d7, d6
 801883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018842:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8018846:	dd24      	ble.n	8018892 <_printf_float+0xa2>
 8018848:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018850:	d502      	bpl.n	8018858 <_printf_float+0x68>
 8018852:	232d      	movs	r3, #45	@ 0x2d
 8018854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018858:	498f      	ldr	r1, [pc, #572]	@ (8018a98 <_printf_float+0x2a8>)
 801885a:	4b90      	ldr	r3, [pc, #576]	@ (8018a9c <_printf_float+0x2ac>)
 801885c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8018860:	bf94      	ite	ls
 8018862:	4688      	movls	r8, r1
 8018864:	4698      	movhi	r8, r3
 8018866:	f022 0204 	bic.w	r2, r2, #4
 801886a:	2303      	movs	r3, #3
 801886c:	6123      	str	r3, [r4, #16]
 801886e:	6022      	str	r2, [r4, #0]
 8018870:	f04f 0a00 	mov.w	sl, #0
 8018874:	9700      	str	r7, [sp, #0]
 8018876:	4633      	mov	r3, r6
 8018878:	aa0b      	add	r2, sp, #44	@ 0x2c
 801887a:	4621      	mov	r1, r4
 801887c:	4628      	mov	r0, r5
 801887e:	f000 f9d1 	bl	8018c24 <_printf_common>
 8018882:	3001      	adds	r0, #1
 8018884:	f040 8089 	bne.w	801899a <_printf_float+0x1aa>
 8018888:	f04f 30ff 	mov.w	r0, #4294967295
 801888c:	b00d      	add	sp, #52	@ 0x34
 801888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018892:	eeb4 0b40 	vcmp.f64	d0, d0
 8018896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801889a:	d709      	bvc.n	80188b0 <_printf_float+0xc0>
 801889c:	ee10 3a90 	vmov	r3, s1
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	bfbc      	itt	lt
 80188a4:	232d      	movlt	r3, #45	@ 0x2d
 80188a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80188aa:	497d      	ldr	r1, [pc, #500]	@ (8018aa0 <_printf_float+0x2b0>)
 80188ac:	4b7d      	ldr	r3, [pc, #500]	@ (8018aa4 <_printf_float+0x2b4>)
 80188ae:	e7d5      	b.n	801885c <_printf_float+0x6c>
 80188b0:	6863      	ldr	r3, [r4, #4]
 80188b2:	1c59      	adds	r1, r3, #1
 80188b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80188b8:	d139      	bne.n	801892e <_printf_float+0x13e>
 80188ba:	2306      	movs	r3, #6
 80188bc:	6063      	str	r3, [r4, #4]
 80188be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80188c2:	2300      	movs	r3, #0
 80188c4:	6022      	str	r2, [r4, #0]
 80188c6:	9303      	str	r3, [sp, #12]
 80188c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80188ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80188ce:	ab09      	add	r3, sp, #36	@ 0x24
 80188d0:	9300      	str	r3, [sp, #0]
 80188d2:	6861      	ldr	r1, [r4, #4]
 80188d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80188d8:	4628      	mov	r0, r5
 80188da:	f7ff fef9 	bl	80186d0 <__cvt>
 80188de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80188e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80188e4:	4680      	mov	r8, r0
 80188e6:	d129      	bne.n	801893c <_printf_float+0x14c>
 80188e8:	1cc8      	adds	r0, r1, #3
 80188ea:	db02      	blt.n	80188f2 <_printf_float+0x102>
 80188ec:	6863      	ldr	r3, [r4, #4]
 80188ee:	4299      	cmp	r1, r3
 80188f0:	dd41      	ble.n	8018976 <_printf_float+0x186>
 80188f2:	f1a9 0902 	sub.w	r9, r9, #2
 80188f6:	fa5f f989 	uxtb.w	r9, r9
 80188fa:	3901      	subs	r1, #1
 80188fc:	464a      	mov	r2, r9
 80188fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018902:	9109      	str	r1, [sp, #36]	@ 0x24
 8018904:	f7ff ff38 	bl	8018778 <__exponent>
 8018908:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801890a:	1813      	adds	r3, r2, r0
 801890c:	2a01      	cmp	r2, #1
 801890e:	4682      	mov	sl, r0
 8018910:	6123      	str	r3, [r4, #16]
 8018912:	dc02      	bgt.n	801891a <_printf_float+0x12a>
 8018914:	6822      	ldr	r2, [r4, #0]
 8018916:	07d2      	lsls	r2, r2, #31
 8018918:	d501      	bpl.n	801891e <_printf_float+0x12e>
 801891a:	3301      	adds	r3, #1
 801891c:	6123      	str	r3, [r4, #16]
 801891e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018922:	2b00      	cmp	r3, #0
 8018924:	d0a6      	beq.n	8018874 <_printf_float+0x84>
 8018926:	232d      	movs	r3, #45	@ 0x2d
 8018928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801892c:	e7a2      	b.n	8018874 <_printf_float+0x84>
 801892e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018932:	d1c4      	bne.n	80188be <_printf_float+0xce>
 8018934:	2b00      	cmp	r3, #0
 8018936:	d1c2      	bne.n	80188be <_printf_float+0xce>
 8018938:	2301      	movs	r3, #1
 801893a:	e7bf      	b.n	80188bc <_printf_float+0xcc>
 801893c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018940:	d9db      	bls.n	80188fa <_printf_float+0x10a>
 8018942:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8018946:	d118      	bne.n	801897a <_printf_float+0x18a>
 8018948:	2900      	cmp	r1, #0
 801894a:	6863      	ldr	r3, [r4, #4]
 801894c:	dd0b      	ble.n	8018966 <_printf_float+0x176>
 801894e:	6121      	str	r1, [r4, #16]
 8018950:	b913      	cbnz	r3, 8018958 <_printf_float+0x168>
 8018952:	6822      	ldr	r2, [r4, #0]
 8018954:	07d0      	lsls	r0, r2, #31
 8018956:	d502      	bpl.n	801895e <_printf_float+0x16e>
 8018958:	3301      	adds	r3, #1
 801895a:	440b      	add	r3, r1
 801895c:	6123      	str	r3, [r4, #16]
 801895e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018960:	f04f 0a00 	mov.w	sl, #0
 8018964:	e7db      	b.n	801891e <_printf_float+0x12e>
 8018966:	b913      	cbnz	r3, 801896e <_printf_float+0x17e>
 8018968:	6822      	ldr	r2, [r4, #0]
 801896a:	07d2      	lsls	r2, r2, #31
 801896c:	d501      	bpl.n	8018972 <_printf_float+0x182>
 801896e:	3302      	adds	r3, #2
 8018970:	e7f4      	b.n	801895c <_printf_float+0x16c>
 8018972:	2301      	movs	r3, #1
 8018974:	e7f2      	b.n	801895c <_printf_float+0x16c>
 8018976:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801897a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801897c:	4299      	cmp	r1, r3
 801897e:	db05      	blt.n	801898c <_printf_float+0x19c>
 8018980:	6823      	ldr	r3, [r4, #0]
 8018982:	6121      	str	r1, [r4, #16]
 8018984:	07d8      	lsls	r0, r3, #31
 8018986:	d5ea      	bpl.n	801895e <_printf_float+0x16e>
 8018988:	1c4b      	adds	r3, r1, #1
 801898a:	e7e7      	b.n	801895c <_printf_float+0x16c>
 801898c:	2900      	cmp	r1, #0
 801898e:	bfd4      	ite	le
 8018990:	f1c1 0202 	rsble	r2, r1, #2
 8018994:	2201      	movgt	r2, #1
 8018996:	4413      	add	r3, r2
 8018998:	e7e0      	b.n	801895c <_printf_float+0x16c>
 801899a:	6823      	ldr	r3, [r4, #0]
 801899c:	055a      	lsls	r2, r3, #21
 801899e:	d407      	bmi.n	80189b0 <_printf_float+0x1c0>
 80189a0:	6923      	ldr	r3, [r4, #16]
 80189a2:	4642      	mov	r2, r8
 80189a4:	4631      	mov	r1, r6
 80189a6:	4628      	mov	r0, r5
 80189a8:	47b8      	blx	r7
 80189aa:	3001      	adds	r0, #1
 80189ac:	d12a      	bne.n	8018a04 <_printf_float+0x214>
 80189ae:	e76b      	b.n	8018888 <_printf_float+0x98>
 80189b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80189b4:	f240 80e0 	bls.w	8018b78 <_printf_float+0x388>
 80189b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80189bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80189c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c4:	d133      	bne.n	8018a2e <_printf_float+0x23e>
 80189c6:	4a38      	ldr	r2, [pc, #224]	@ (8018aa8 <_printf_float+0x2b8>)
 80189c8:	2301      	movs	r3, #1
 80189ca:	4631      	mov	r1, r6
 80189cc:	4628      	mov	r0, r5
 80189ce:	47b8      	blx	r7
 80189d0:	3001      	adds	r0, #1
 80189d2:	f43f af59 	beq.w	8018888 <_printf_float+0x98>
 80189d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80189da:	4543      	cmp	r3, r8
 80189dc:	db02      	blt.n	80189e4 <_printf_float+0x1f4>
 80189de:	6823      	ldr	r3, [r4, #0]
 80189e0:	07d8      	lsls	r0, r3, #31
 80189e2:	d50f      	bpl.n	8018a04 <_printf_float+0x214>
 80189e4:	9b05      	ldr	r3, [sp, #20]
 80189e6:	465a      	mov	r2, fp
 80189e8:	4631      	mov	r1, r6
 80189ea:	4628      	mov	r0, r5
 80189ec:	47b8      	blx	r7
 80189ee:	3001      	adds	r0, #1
 80189f0:	f43f af4a 	beq.w	8018888 <_printf_float+0x98>
 80189f4:	f04f 0900 	mov.w	r9, #0
 80189f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80189fc:	f104 0a1a 	add.w	sl, r4, #26
 8018a00:	45c8      	cmp	r8, r9
 8018a02:	dc09      	bgt.n	8018a18 <_printf_float+0x228>
 8018a04:	6823      	ldr	r3, [r4, #0]
 8018a06:	079b      	lsls	r3, r3, #30
 8018a08:	f100 8107 	bmi.w	8018c1a <_printf_float+0x42a>
 8018a0c:	68e0      	ldr	r0, [r4, #12]
 8018a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a10:	4298      	cmp	r0, r3
 8018a12:	bfb8      	it	lt
 8018a14:	4618      	movlt	r0, r3
 8018a16:	e739      	b.n	801888c <_printf_float+0x9c>
 8018a18:	2301      	movs	r3, #1
 8018a1a:	4652      	mov	r2, sl
 8018a1c:	4631      	mov	r1, r6
 8018a1e:	4628      	mov	r0, r5
 8018a20:	47b8      	blx	r7
 8018a22:	3001      	adds	r0, #1
 8018a24:	f43f af30 	beq.w	8018888 <_printf_float+0x98>
 8018a28:	f109 0901 	add.w	r9, r9, #1
 8018a2c:	e7e8      	b.n	8018a00 <_printf_float+0x210>
 8018a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	dc3b      	bgt.n	8018aac <_printf_float+0x2bc>
 8018a34:	4a1c      	ldr	r2, [pc, #112]	@ (8018aa8 <_printf_float+0x2b8>)
 8018a36:	2301      	movs	r3, #1
 8018a38:	4631      	mov	r1, r6
 8018a3a:	4628      	mov	r0, r5
 8018a3c:	47b8      	blx	r7
 8018a3e:	3001      	adds	r0, #1
 8018a40:	f43f af22 	beq.w	8018888 <_printf_float+0x98>
 8018a44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018a48:	ea59 0303 	orrs.w	r3, r9, r3
 8018a4c:	d102      	bne.n	8018a54 <_printf_float+0x264>
 8018a4e:	6823      	ldr	r3, [r4, #0]
 8018a50:	07d9      	lsls	r1, r3, #31
 8018a52:	d5d7      	bpl.n	8018a04 <_printf_float+0x214>
 8018a54:	9b05      	ldr	r3, [sp, #20]
 8018a56:	465a      	mov	r2, fp
 8018a58:	4631      	mov	r1, r6
 8018a5a:	4628      	mov	r0, r5
 8018a5c:	47b8      	blx	r7
 8018a5e:	3001      	adds	r0, #1
 8018a60:	f43f af12 	beq.w	8018888 <_printf_float+0x98>
 8018a64:	f04f 0a00 	mov.w	sl, #0
 8018a68:	f104 0b1a 	add.w	fp, r4, #26
 8018a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a6e:	425b      	negs	r3, r3
 8018a70:	4553      	cmp	r3, sl
 8018a72:	dc01      	bgt.n	8018a78 <_printf_float+0x288>
 8018a74:	464b      	mov	r3, r9
 8018a76:	e794      	b.n	80189a2 <_printf_float+0x1b2>
 8018a78:	2301      	movs	r3, #1
 8018a7a:	465a      	mov	r2, fp
 8018a7c:	4631      	mov	r1, r6
 8018a7e:	4628      	mov	r0, r5
 8018a80:	47b8      	blx	r7
 8018a82:	3001      	adds	r0, #1
 8018a84:	f43f af00 	beq.w	8018888 <_printf_float+0x98>
 8018a88:	f10a 0a01 	add.w	sl, sl, #1
 8018a8c:	e7ee      	b.n	8018a6c <_printf_float+0x27c>
 8018a8e:	bf00      	nop
 8018a90:	ffffffff 	.word	0xffffffff
 8018a94:	7fefffff 	.word	0x7fefffff
 8018a98:	0801edca 	.word	0x0801edca
 8018a9c:	0801edce 	.word	0x0801edce
 8018aa0:	0801edd2 	.word	0x0801edd2
 8018aa4:	0801edd6 	.word	0x0801edd6
 8018aa8:	0801edda 	.word	0x0801edda
 8018aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018aae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018ab2:	4553      	cmp	r3, sl
 8018ab4:	bfa8      	it	ge
 8018ab6:	4653      	movge	r3, sl
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	4699      	mov	r9, r3
 8018abc:	dc37      	bgt.n	8018b2e <_printf_float+0x33e>
 8018abe:	2300      	movs	r3, #0
 8018ac0:	9307      	str	r3, [sp, #28]
 8018ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018ac6:	f104 021a 	add.w	r2, r4, #26
 8018aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018acc:	9907      	ldr	r1, [sp, #28]
 8018ace:	9306      	str	r3, [sp, #24]
 8018ad0:	eba3 0309 	sub.w	r3, r3, r9
 8018ad4:	428b      	cmp	r3, r1
 8018ad6:	dc31      	bgt.n	8018b3c <_printf_float+0x34c>
 8018ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ada:	459a      	cmp	sl, r3
 8018adc:	dc3b      	bgt.n	8018b56 <_printf_float+0x366>
 8018ade:	6823      	ldr	r3, [r4, #0]
 8018ae0:	07da      	lsls	r2, r3, #31
 8018ae2:	d438      	bmi.n	8018b56 <_printf_float+0x366>
 8018ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ae6:	ebaa 0903 	sub.w	r9, sl, r3
 8018aea:	9b06      	ldr	r3, [sp, #24]
 8018aec:	ebaa 0303 	sub.w	r3, sl, r3
 8018af0:	4599      	cmp	r9, r3
 8018af2:	bfa8      	it	ge
 8018af4:	4699      	movge	r9, r3
 8018af6:	f1b9 0f00 	cmp.w	r9, #0
 8018afa:	dc34      	bgt.n	8018b66 <_printf_float+0x376>
 8018afc:	f04f 0800 	mov.w	r8, #0
 8018b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b04:	f104 0b1a 	add.w	fp, r4, #26
 8018b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b0a:	ebaa 0303 	sub.w	r3, sl, r3
 8018b0e:	eba3 0309 	sub.w	r3, r3, r9
 8018b12:	4543      	cmp	r3, r8
 8018b14:	f77f af76 	ble.w	8018a04 <_printf_float+0x214>
 8018b18:	2301      	movs	r3, #1
 8018b1a:	465a      	mov	r2, fp
 8018b1c:	4631      	mov	r1, r6
 8018b1e:	4628      	mov	r0, r5
 8018b20:	47b8      	blx	r7
 8018b22:	3001      	adds	r0, #1
 8018b24:	f43f aeb0 	beq.w	8018888 <_printf_float+0x98>
 8018b28:	f108 0801 	add.w	r8, r8, #1
 8018b2c:	e7ec      	b.n	8018b08 <_printf_float+0x318>
 8018b2e:	4642      	mov	r2, r8
 8018b30:	4631      	mov	r1, r6
 8018b32:	4628      	mov	r0, r5
 8018b34:	47b8      	blx	r7
 8018b36:	3001      	adds	r0, #1
 8018b38:	d1c1      	bne.n	8018abe <_printf_float+0x2ce>
 8018b3a:	e6a5      	b.n	8018888 <_printf_float+0x98>
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	4631      	mov	r1, r6
 8018b40:	4628      	mov	r0, r5
 8018b42:	9206      	str	r2, [sp, #24]
 8018b44:	47b8      	blx	r7
 8018b46:	3001      	adds	r0, #1
 8018b48:	f43f ae9e 	beq.w	8018888 <_printf_float+0x98>
 8018b4c:	9b07      	ldr	r3, [sp, #28]
 8018b4e:	9a06      	ldr	r2, [sp, #24]
 8018b50:	3301      	adds	r3, #1
 8018b52:	9307      	str	r3, [sp, #28]
 8018b54:	e7b9      	b.n	8018aca <_printf_float+0x2da>
 8018b56:	9b05      	ldr	r3, [sp, #20]
 8018b58:	465a      	mov	r2, fp
 8018b5a:	4631      	mov	r1, r6
 8018b5c:	4628      	mov	r0, r5
 8018b5e:	47b8      	blx	r7
 8018b60:	3001      	adds	r0, #1
 8018b62:	d1bf      	bne.n	8018ae4 <_printf_float+0x2f4>
 8018b64:	e690      	b.n	8018888 <_printf_float+0x98>
 8018b66:	9a06      	ldr	r2, [sp, #24]
 8018b68:	464b      	mov	r3, r9
 8018b6a:	4442      	add	r2, r8
 8018b6c:	4631      	mov	r1, r6
 8018b6e:	4628      	mov	r0, r5
 8018b70:	47b8      	blx	r7
 8018b72:	3001      	adds	r0, #1
 8018b74:	d1c2      	bne.n	8018afc <_printf_float+0x30c>
 8018b76:	e687      	b.n	8018888 <_printf_float+0x98>
 8018b78:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8018b7c:	f1b9 0f01 	cmp.w	r9, #1
 8018b80:	dc01      	bgt.n	8018b86 <_printf_float+0x396>
 8018b82:	07db      	lsls	r3, r3, #31
 8018b84:	d536      	bpl.n	8018bf4 <_printf_float+0x404>
 8018b86:	2301      	movs	r3, #1
 8018b88:	4642      	mov	r2, r8
 8018b8a:	4631      	mov	r1, r6
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	47b8      	blx	r7
 8018b90:	3001      	adds	r0, #1
 8018b92:	f43f ae79 	beq.w	8018888 <_printf_float+0x98>
 8018b96:	9b05      	ldr	r3, [sp, #20]
 8018b98:	465a      	mov	r2, fp
 8018b9a:	4631      	mov	r1, r6
 8018b9c:	4628      	mov	r0, r5
 8018b9e:	47b8      	blx	r7
 8018ba0:	3001      	adds	r0, #1
 8018ba2:	f43f ae71 	beq.w	8018888 <_printf_float+0x98>
 8018ba6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018baa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8018bb6:	d018      	beq.n	8018bea <_printf_float+0x3fa>
 8018bb8:	464b      	mov	r3, r9
 8018bba:	f108 0201 	add.w	r2, r8, #1
 8018bbe:	4631      	mov	r1, r6
 8018bc0:	4628      	mov	r0, r5
 8018bc2:	47b8      	blx	r7
 8018bc4:	3001      	adds	r0, #1
 8018bc6:	d10c      	bne.n	8018be2 <_printf_float+0x3f2>
 8018bc8:	e65e      	b.n	8018888 <_printf_float+0x98>
 8018bca:	2301      	movs	r3, #1
 8018bcc:	465a      	mov	r2, fp
 8018bce:	4631      	mov	r1, r6
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	47b8      	blx	r7
 8018bd4:	3001      	adds	r0, #1
 8018bd6:	f43f ae57 	beq.w	8018888 <_printf_float+0x98>
 8018bda:	f108 0801 	add.w	r8, r8, #1
 8018bde:	45c8      	cmp	r8, r9
 8018be0:	dbf3      	blt.n	8018bca <_printf_float+0x3da>
 8018be2:	4653      	mov	r3, sl
 8018be4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018be8:	e6dc      	b.n	80189a4 <_printf_float+0x1b4>
 8018bea:	f04f 0800 	mov.w	r8, #0
 8018bee:	f104 0b1a 	add.w	fp, r4, #26
 8018bf2:	e7f4      	b.n	8018bde <_printf_float+0x3ee>
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	4642      	mov	r2, r8
 8018bf8:	e7e1      	b.n	8018bbe <_printf_float+0x3ce>
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	464a      	mov	r2, r9
 8018bfe:	4631      	mov	r1, r6
 8018c00:	4628      	mov	r0, r5
 8018c02:	47b8      	blx	r7
 8018c04:	3001      	adds	r0, #1
 8018c06:	f43f ae3f 	beq.w	8018888 <_printf_float+0x98>
 8018c0a:	f108 0801 	add.w	r8, r8, #1
 8018c0e:	68e3      	ldr	r3, [r4, #12]
 8018c10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018c12:	1a5b      	subs	r3, r3, r1
 8018c14:	4543      	cmp	r3, r8
 8018c16:	dcf0      	bgt.n	8018bfa <_printf_float+0x40a>
 8018c18:	e6f8      	b.n	8018a0c <_printf_float+0x21c>
 8018c1a:	f04f 0800 	mov.w	r8, #0
 8018c1e:	f104 0919 	add.w	r9, r4, #25
 8018c22:	e7f4      	b.n	8018c0e <_printf_float+0x41e>

08018c24 <_printf_common>:
 8018c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c28:	4616      	mov	r6, r2
 8018c2a:	4698      	mov	r8, r3
 8018c2c:	688a      	ldr	r2, [r1, #8]
 8018c2e:	690b      	ldr	r3, [r1, #16]
 8018c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018c34:	4293      	cmp	r3, r2
 8018c36:	bfb8      	it	lt
 8018c38:	4613      	movlt	r3, r2
 8018c3a:	6033      	str	r3, [r6, #0]
 8018c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018c40:	4607      	mov	r7, r0
 8018c42:	460c      	mov	r4, r1
 8018c44:	b10a      	cbz	r2, 8018c4a <_printf_common+0x26>
 8018c46:	3301      	adds	r3, #1
 8018c48:	6033      	str	r3, [r6, #0]
 8018c4a:	6823      	ldr	r3, [r4, #0]
 8018c4c:	0699      	lsls	r1, r3, #26
 8018c4e:	bf42      	ittt	mi
 8018c50:	6833      	ldrmi	r3, [r6, #0]
 8018c52:	3302      	addmi	r3, #2
 8018c54:	6033      	strmi	r3, [r6, #0]
 8018c56:	6825      	ldr	r5, [r4, #0]
 8018c58:	f015 0506 	ands.w	r5, r5, #6
 8018c5c:	d106      	bne.n	8018c6c <_printf_common+0x48>
 8018c5e:	f104 0a19 	add.w	sl, r4, #25
 8018c62:	68e3      	ldr	r3, [r4, #12]
 8018c64:	6832      	ldr	r2, [r6, #0]
 8018c66:	1a9b      	subs	r3, r3, r2
 8018c68:	42ab      	cmp	r3, r5
 8018c6a:	dc26      	bgt.n	8018cba <_printf_common+0x96>
 8018c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018c70:	6822      	ldr	r2, [r4, #0]
 8018c72:	3b00      	subs	r3, #0
 8018c74:	bf18      	it	ne
 8018c76:	2301      	movne	r3, #1
 8018c78:	0692      	lsls	r2, r2, #26
 8018c7a:	d42b      	bmi.n	8018cd4 <_printf_common+0xb0>
 8018c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018c80:	4641      	mov	r1, r8
 8018c82:	4638      	mov	r0, r7
 8018c84:	47c8      	blx	r9
 8018c86:	3001      	adds	r0, #1
 8018c88:	d01e      	beq.n	8018cc8 <_printf_common+0xa4>
 8018c8a:	6823      	ldr	r3, [r4, #0]
 8018c8c:	6922      	ldr	r2, [r4, #16]
 8018c8e:	f003 0306 	and.w	r3, r3, #6
 8018c92:	2b04      	cmp	r3, #4
 8018c94:	bf02      	ittt	eq
 8018c96:	68e5      	ldreq	r5, [r4, #12]
 8018c98:	6833      	ldreq	r3, [r6, #0]
 8018c9a:	1aed      	subeq	r5, r5, r3
 8018c9c:	68a3      	ldr	r3, [r4, #8]
 8018c9e:	bf0c      	ite	eq
 8018ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ca4:	2500      	movne	r5, #0
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	bfc4      	itt	gt
 8018caa:	1a9b      	subgt	r3, r3, r2
 8018cac:	18ed      	addgt	r5, r5, r3
 8018cae:	2600      	movs	r6, #0
 8018cb0:	341a      	adds	r4, #26
 8018cb2:	42b5      	cmp	r5, r6
 8018cb4:	d11a      	bne.n	8018cec <_printf_common+0xc8>
 8018cb6:	2000      	movs	r0, #0
 8018cb8:	e008      	b.n	8018ccc <_printf_common+0xa8>
 8018cba:	2301      	movs	r3, #1
 8018cbc:	4652      	mov	r2, sl
 8018cbe:	4641      	mov	r1, r8
 8018cc0:	4638      	mov	r0, r7
 8018cc2:	47c8      	blx	r9
 8018cc4:	3001      	adds	r0, #1
 8018cc6:	d103      	bne.n	8018cd0 <_printf_common+0xac>
 8018cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8018ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cd0:	3501      	adds	r5, #1
 8018cd2:	e7c6      	b.n	8018c62 <_printf_common+0x3e>
 8018cd4:	18e1      	adds	r1, r4, r3
 8018cd6:	1c5a      	adds	r2, r3, #1
 8018cd8:	2030      	movs	r0, #48	@ 0x30
 8018cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018cde:	4422      	add	r2, r4
 8018ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018ce8:	3302      	adds	r3, #2
 8018cea:	e7c7      	b.n	8018c7c <_printf_common+0x58>
 8018cec:	2301      	movs	r3, #1
 8018cee:	4622      	mov	r2, r4
 8018cf0:	4641      	mov	r1, r8
 8018cf2:	4638      	mov	r0, r7
 8018cf4:	47c8      	blx	r9
 8018cf6:	3001      	adds	r0, #1
 8018cf8:	d0e6      	beq.n	8018cc8 <_printf_common+0xa4>
 8018cfa:	3601      	adds	r6, #1
 8018cfc:	e7d9      	b.n	8018cb2 <_printf_common+0x8e>
	...

08018d00 <_printf_i>:
 8018d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d04:	7e0f      	ldrb	r7, [r1, #24]
 8018d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018d08:	2f78      	cmp	r7, #120	@ 0x78
 8018d0a:	4691      	mov	r9, r2
 8018d0c:	4680      	mov	r8, r0
 8018d0e:	460c      	mov	r4, r1
 8018d10:	469a      	mov	sl, r3
 8018d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018d16:	d807      	bhi.n	8018d28 <_printf_i+0x28>
 8018d18:	2f62      	cmp	r7, #98	@ 0x62
 8018d1a:	d80a      	bhi.n	8018d32 <_printf_i+0x32>
 8018d1c:	2f00      	cmp	r7, #0
 8018d1e:	f000 80d2 	beq.w	8018ec6 <_printf_i+0x1c6>
 8018d22:	2f58      	cmp	r7, #88	@ 0x58
 8018d24:	f000 80b9 	beq.w	8018e9a <_printf_i+0x19a>
 8018d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018d30:	e03a      	b.n	8018da8 <_printf_i+0xa8>
 8018d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018d36:	2b15      	cmp	r3, #21
 8018d38:	d8f6      	bhi.n	8018d28 <_printf_i+0x28>
 8018d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8018d40 <_printf_i+0x40>)
 8018d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d40:	08018d99 	.word	0x08018d99
 8018d44:	08018dad 	.word	0x08018dad
 8018d48:	08018d29 	.word	0x08018d29
 8018d4c:	08018d29 	.word	0x08018d29
 8018d50:	08018d29 	.word	0x08018d29
 8018d54:	08018d29 	.word	0x08018d29
 8018d58:	08018dad 	.word	0x08018dad
 8018d5c:	08018d29 	.word	0x08018d29
 8018d60:	08018d29 	.word	0x08018d29
 8018d64:	08018d29 	.word	0x08018d29
 8018d68:	08018d29 	.word	0x08018d29
 8018d6c:	08018ead 	.word	0x08018ead
 8018d70:	08018dd7 	.word	0x08018dd7
 8018d74:	08018e67 	.word	0x08018e67
 8018d78:	08018d29 	.word	0x08018d29
 8018d7c:	08018d29 	.word	0x08018d29
 8018d80:	08018ecf 	.word	0x08018ecf
 8018d84:	08018d29 	.word	0x08018d29
 8018d88:	08018dd7 	.word	0x08018dd7
 8018d8c:	08018d29 	.word	0x08018d29
 8018d90:	08018d29 	.word	0x08018d29
 8018d94:	08018e6f 	.word	0x08018e6f
 8018d98:	6833      	ldr	r3, [r6, #0]
 8018d9a:	1d1a      	adds	r2, r3, #4
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	6032      	str	r2, [r6, #0]
 8018da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018da8:	2301      	movs	r3, #1
 8018daa:	e09d      	b.n	8018ee8 <_printf_i+0x1e8>
 8018dac:	6833      	ldr	r3, [r6, #0]
 8018dae:	6820      	ldr	r0, [r4, #0]
 8018db0:	1d19      	adds	r1, r3, #4
 8018db2:	6031      	str	r1, [r6, #0]
 8018db4:	0606      	lsls	r6, r0, #24
 8018db6:	d501      	bpl.n	8018dbc <_printf_i+0xbc>
 8018db8:	681d      	ldr	r5, [r3, #0]
 8018dba:	e003      	b.n	8018dc4 <_printf_i+0xc4>
 8018dbc:	0645      	lsls	r5, r0, #25
 8018dbe:	d5fb      	bpl.n	8018db8 <_printf_i+0xb8>
 8018dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018dc4:	2d00      	cmp	r5, #0
 8018dc6:	da03      	bge.n	8018dd0 <_printf_i+0xd0>
 8018dc8:	232d      	movs	r3, #45	@ 0x2d
 8018dca:	426d      	negs	r5, r5
 8018dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018dd0:	4859      	ldr	r0, [pc, #356]	@ (8018f38 <_printf_i+0x238>)
 8018dd2:	230a      	movs	r3, #10
 8018dd4:	e011      	b.n	8018dfa <_printf_i+0xfa>
 8018dd6:	6821      	ldr	r1, [r4, #0]
 8018dd8:	6833      	ldr	r3, [r6, #0]
 8018dda:	0608      	lsls	r0, r1, #24
 8018ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8018de0:	d402      	bmi.n	8018de8 <_printf_i+0xe8>
 8018de2:	0649      	lsls	r1, r1, #25
 8018de4:	bf48      	it	mi
 8018de6:	b2ad      	uxthmi	r5, r5
 8018de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8018dea:	4853      	ldr	r0, [pc, #332]	@ (8018f38 <_printf_i+0x238>)
 8018dec:	6033      	str	r3, [r6, #0]
 8018dee:	bf14      	ite	ne
 8018df0:	230a      	movne	r3, #10
 8018df2:	2308      	moveq	r3, #8
 8018df4:	2100      	movs	r1, #0
 8018df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018dfa:	6866      	ldr	r6, [r4, #4]
 8018dfc:	60a6      	str	r6, [r4, #8]
 8018dfe:	2e00      	cmp	r6, #0
 8018e00:	bfa2      	ittt	ge
 8018e02:	6821      	ldrge	r1, [r4, #0]
 8018e04:	f021 0104 	bicge.w	r1, r1, #4
 8018e08:	6021      	strge	r1, [r4, #0]
 8018e0a:	b90d      	cbnz	r5, 8018e10 <_printf_i+0x110>
 8018e0c:	2e00      	cmp	r6, #0
 8018e0e:	d04b      	beq.n	8018ea8 <_printf_i+0x1a8>
 8018e10:	4616      	mov	r6, r2
 8018e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8018e16:	fb03 5711 	mls	r7, r3, r1, r5
 8018e1a:	5dc7      	ldrb	r7, [r0, r7]
 8018e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018e20:	462f      	mov	r7, r5
 8018e22:	42bb      	cmp	r3, r7
 8018e24:	460d      	mov	r5, r1
 8018e26:	d9f4      	bls.n	8018e12 <_printf_i+0x112>
 8018e28:	2b08      	cmp	r3, #8
 8018e2a:	d10b      	bne.n	8018e44 <_printf_i+0x144>
 8018e2c:	6823      	ldr	r3, [r4, #0]
 8018e2e:	07df      	lsls	r7, r3, #31
 8018e30:	d508      	bpl.n	8018e44 <_printf_i+0x144>
 8018e32:	6923      	ldr	r3, [r4, #16]
 8018e34:	6861      	ldr	r1, [r4, #4]
 8018e36:	4299      	cmp	r1, r3
 8018e38:	bfde      	ittt	le
 8018e3a:	2330      	movle	r3, #48	@ 0x30
 8018e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018e44:	1b92      	subs	r2, r2, r6
 8018e46:	6122      	str	r2, [r4, #16]
 8018e48:	f8cd a000 	str.w	sl, [sp]
 8018e4c:	464b      	mov	r3, r9
 8018e4e:	aa03      	add	r2, sp, #12
 8018e50:	4621      	mov	r1, r4
 8018e52:	4640      	mov	r0, r8
 8018e54:	f7ff fee6 	bl	8018c24 <_printf_common>
 8018e58:	3001      	adds	r0, #1
 8018e5a:	d14a      	bne.n	8018ef2 <_printf_i+0x1f2>
 8018e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e60:	b004      	add	sp, #16
 8018e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e66:	6823      	ldr	r3, [r4, #0]
 8018e68:	f043 0320 	orr.w	r3, r3, #32
 8018e6c:	6023      	str	r3, [r4, #0]
 8018e6e:	4833      	ldr	r0, [pc, #204]	@ (8018f3c <_printf_i+0x23c>)
 8018e70:	2778      	movs	r7, #120	@ 0x78
 8018e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018e76:	6823      	ldr	r3, [r4, #0]
 8018e78:	6831      	ldr	r1, [r6, #0]
 8018e7a:	061f      	lsls	r7, r3, #24
 8018e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018e80:	d402      	bmi.n	8018e88 <_printf_i+0x188>
 8018e82:	065f      	lsls	r7, r3, #25
 8018e84:	bf48      	it	mi
 8018e86:	b2ad      	uxthmi	r5, r5
 8018e88:	6031      	str	r1, [r6, #0]
 8018e8a:	07d9      	lsls	r1, r3, #31
 8018e8c:	bf44      	itt	mi
 8018e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8018e92:	6023      	strmi	r3, [r4, #0]
 8018e94:	b11d      	cbz	r5, 8018e9e <_printf_i+0x19e>
 8018e96:	2310      	movs	r3, #16
 8018e98:	e7ac      	b.n	8018df4 <_printf_i+0xf4>
 8018e9a:	4827      	ldr	r0, [pc, #156]	@ (8018f38 <_printf_i+0x238>)
 8018e9c:	e7e9      	b.n	8018e72 <_printf_i+0x172>
 8018e9e:	6823      	ldr	r3, [r4, #0]
 8018ea0:	f023 0320 	bic.w	r3, r3, #32
 8018ea4:	6023      	str	r3, [r4, #0]
 8018ea6:	e7f6      	b.n	8018e96 <_printf_i+0x196>
 8018ea8:	4616      	mov	r6, r2
 8018eaa:	e7bd      	b.n	8018e28 <_printf_i+0x128>
 8018eac:	6833      	ldr	r3, [r6, #0]
 8018eae:	6825      	ldr	r5, [r4, #0]
 8018eb0:	6961      	ldr	r1, [r4, #20]
 8018eb2:	1d18      	adds	r0, r3, #4
 8018eb4:	6030      	str	r0, [r6, #0]
 8018eb6:	062e      	lsls	r6, r5, #24
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	d501      	bpl.n	8018ec0 <_printf_i+0x1c0>
 8018ebc:	6019      	str	r1, [r3, #0]
 8018ebe:	e002      	b.n	8018ec6 <_printf_i+0x1c6>
 8018ec0:	0668      	lsls	r0, r5, #25
 8018ec2:	d5fb      	bpl.n	8018ebc <_printf_i+0x1bc>
 8018ec4:	8019      	strh	r1, [r3, #0]
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	6123      	str	r3, [r4, #16]
 8018eca:	4616      	mov	r6, r2
 8018ecc:	e7bc      	b.n	8018e48 <_printf_i+0x148>
 8018ece:	6833      	ldr	r3, [r6, #0]
 8018ed0:	1d1a      	adds	r2, r3, #4
 8018ed2:	6032      	str	r2, [r6, #0]
 8018ed4:	681e      	ldr	r6, [r3, #0]
 8018ed6:	6862      	ldr	r2, [r4, #4]
 8018ed8:	2100      	movs	r1, #0
 8018eda:	4630      	mov	r0, r6
 8018edc:	f7e7 f9b0 	bl	8000240 <memchr>
 8018ee0:	b108      	cbz	r0, 8018ee6 <_printf_i+0x1e6>
 8018ee2:	1b80      	subs	r0, r0, r6
 8018ee4:	6060      	str	r0, [r4, #4]
 8018ee6:	6863      	ldr	r3, [r4, #4]
 8018ee8:	6123      	str	r3, [r4, #16]
 8018eea:	2300      	movs	r3, #0
 8018eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ef0:	e7aa      	b.n	8018e48 <_printf_i+0x148>
 8018ef2:	6923      	ldr	r3, [r4, #16]
 8018ef4:	4632      	mov	r2, r6
 8018ef6:	4649      	mov	r1, r9
 8018ef8:	4640      	mov	r0, r8
 8018efa:	47d0      	blx	sl
 8018efc:	3001      	adds	r0, #1
 8018efe:	d0ad      	beq.n	8018e5c <_printf_i+0x15c>
 8018f00:	6823      	ldr	r3, [r4, #0]
 8018f02:	079b      	lsls	r3, r3, #30
 8018f04:	d413      	bmi.n	8018f2e <_printf_i+0x22e>
 8018f06:	68e0      	ldr	r0, [r4, #12]
 8018f08:	9b03      	ldr	r3, [sp, #12]
 8018f0a:	4298      	cmp	r0, r3
 8018f0c:	bfb8      	it	lt
 8018f0e:	4618      	movlt	r0, r3
 8018f10:	e7a6      	b.n	8018e60 <_printf_i+0x160>
 8018f12:	2301      	movs	r3, #1
 8018f14:	4632      	mov	r2, r6
 8018f16:	4649      	mov	r1, r9
 8018f18:	4640      	mov	r0, r8
 8018f1a:	47d0      	blx	sl
 8018f1c:	3001      	adds	r0, #1
 8018f1e:	d09d      	beq.n	8018e5c <_printf_i+0x15c>
 8018f20:	3501      	adds	r5, #1
 8018f22:	68e3      	ldr	r3, [r4, #12]
 8018f24:	9903      	ldr	r1, [sp, #12]
 8018f26:	1a5b      	subs	r3, r3, r1
 8018f28:	42ab      	cmp	r3, r5
 8018f2a:	dcf2      	bgt.n	8018f12 <_printf_i+0x212>
 8018f2c:	e7eb      	b.n	8018f06 <_printf_i+0x206>
 8018f2e:	2500      	movs	r5, #0
 8018f30:	f104 0619 	add.w	r6, r4, #25
 8018f34:	e7f5      	b.n	8018f22 <_printf_i+0x222>
 8018f36:	bf00      	nop
 8018f38:	0801eddc 	.word	0x0801eddc
 8018f3c:	0801eded 	.word	0x0801eded

08018f40 <std>:
 8018f40:	2300      	movs	r3, #0
 8018f42:	b510      	push	{r4, lr}
 8018f44:	4604      	mov	r4, r0
 8018f46:	e9c0 3300 	strd	r3, r3, [r0]
 8018f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018f4e:	6083      	str	r3, [r0, #8]
 8018f50:	8181      	strh	r1, [r0, #12]
 8018f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8018f54:	81c2      	strh	r2, [r0, #14]
 8018f56:	6183      	str	r3, [r0, #24]
 8018f58:	4619      	mov	r1, r3
 8018f5a:	2208      	movs	r2, #8
 8018f5c:	305c      	adds	r0, #92	@ 0x5c
 8018f5e:	f000 fa77 	bl	8019450 <memset>
 8018f62:	4b0d      	ldr	r3, [pc, #52]	@ (8018f98 <std+0x58>)
 8018f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8018f66:	4b0d      	ldr	r3, [pc, #52]	@ (8018f9c <std+0x5c>)
 8018f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa0 <std+0x60>)
 8018f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa4 <std+0x64>)
 8018f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8018f72:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa8 <std+0x68>)
 8018f74:	6224      	str	r4, [r4, #32]
 8018f76:	429c      	cmp	r4, r3
 8018f78:	d006      	beq.n	8018f88 <std+0x48>
 8018f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018f7e:	4294      	cmp	r4, r2
 8018f80:	d002      	beq.n	8018f88 <std+0x48>
 8018f82:	33d0      	adds	r3, #208	@ 0xd0
 8018f84:	429c      	cmp	r4, r3
 8018f86:	d105      	bne.n	8018f94 <std+0x54>
 8018f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f90:	f000 bb0c 	b.w	80195ac <__retarget_lock_init_recursive>
 8018f94:	bd10      	pop	{r4, pc}
 8018f96:	bf00      	nop
 8018f98:	0801924d 	.word	0x0801924d
 8018f9c:	0801926f 	.word	0x0801926f
 8018fa0:	080192a7 	.word	0x080192a7
 8018fa4:	080192cb 	.word	0x080192cb
 8018fa8:	2000e27c 	.word	0x2000e27c

08018fac <stdio_exit_handler>:
 8018fac:	4a02      	ldr	r2, [pc, #8]	@ (8018fb8 <stdio_exit_handler+0xc>)
 8018fae:	4903      	ldr	r1, [pc, #12]	@ (8018fbc <stdio_exit_handler+0x10>)
 8018fb0:	4803      	ldr	r0, [pc, #12]	@ (8018fc0 <stdio_exit_handler+0x14>)
 8018fb2:	f000 b869 	b.w	8019088 <_fwalk_sglue>
 8018fb6:	bf00      	nop
 8018fb8:	2000001c 	.word	0x2000001c
 8018fbc:	0801b11d 	.word	0x0801b11d
 8018fc0:	2000002c 	.word	0x2000002c

08018fc4 <cleanup_stdio>:
 8018fc4:	6841      	ldr	r1, [r0, #4]
 8018fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8018ff8 <cleanup_stdio+0x34>)
 8018fc8:	4299      	cmp	r1, r3
 8018fca:	b510      	push	{r4, lr}
 8018fcc:	4604      	mov	r4, r0
 8018fce:	d001      	beq.n	8018fd4 <cleanup_stdio+0x10>
 8018fd0:	f002 f8a4 	bl	801b11c <_fflush_r>
 8018fd4:	68a1      	ldr	r1, [r4, #8]
 8018fd6:	4b09      	ldr	r3, [pc, #36]	@ (8018ffc <cleanup_stdio+0x38>)
 8018fd8:	4299      	cmp	r1, r3
 8018fda:	d002      	beq.n	8018fe2 <cleanup_stdio+0x1e>
 8018fdc:	4620      	mov	r0, r4
 8018fde:	f002 f89d 	bl	801b11c <_fflush_r>
 8018fe2:	68e1      	ldr	r1, [r4, #12]
 8018fe4:	4b06      	ldr	r3, [pc, #24]	@ (8019000 <cleanup_stdio+0x3c>)
 8018fe6:	4299      	cmp	r1, r3
 8018fe8:	d004      	beq.n	8018ff4 <cleanup_stdio+0x30>
 8018fea:	4620      	mov	r0, r4
 8018fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ff0:	f002 b894 	b.w	801b11c <_fflush_r>
 8018ff4:	bd10      	pop	{r4, pc}
 8018ff6:	bf00      	nop
 8018ff8:	2000e27c 	.word	0x2000e27c
 8018ffc:	2000e2e4 	.word	0x2000e2e4
 8019000:	2000e34c 	.word	0x2000e34c

08019004 <global_stdio_init.part.0>:
 8019004:	b510      	push	{r4, lr}
 8019006:	4b0b      	ldr	r3, [pc, #44]	@ (8019034 <global_stdio_init.part.0+0x30>)
 8019008:	4c0b      	ldr	r4, [pc, #44]	@ (8019038 <global_stdio_init.part.0+0x34>)
 801900a:	4a0c      	ldr	r2, [pc, #48]	@ (801903c <global_stdio_init.part.0+0x38>)
 801900c:	601a      	str	r2, [r3, #0]
 801900e:	4620      	mov	r0, r4
 8019010:	2200      	movs	r2, #0
 8019012:	2104      	movs	r1, #4
 8019014:	f7ff ff94 	bl	8018f40 <std>
 8019018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801901c:	2201      	movs	r2, #1
 801901e:	2109      	movs	r1, #9
 8019020:	f7ff ff8e 	bl	8018f40 <std>
 8019024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019028:	2202      	movs	r2, #2
 801902a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801902e:	2112      	movs	r1, #18
 8019030:	f7ff bf86 	b.w	8018f40 <std>
 8019034:	2000e3b4 	.word	0x2000e3b4
 8019038:	2000e27c 	.word	0x2000e27c
 801903c:	08018fad 	.word	0x08018fad

08019040 <__sfp_lock_acquire>:
 8019040:	4801      	ldr	r0, [pc, #4]	@ (8019048 <__sfp_lock_acquire+0x8>)
 8019042:	f000 bab4 	b.w	80195ae <__retarget_lock_acquire_recursive>
 8019046:	bf00      	nop
 8019048:	2000e3b9 	.word	0x2000e3b9

0801904c <__sfp_lock_release>:
 801904c:	4801      	ldr	r0, [pc, #4]	@ (8019054 <__sfp_lock_release+0x8>)
 801904e:	f000 baaf 	b.w	80195b0 <__retarget_lock_release_recursive>
 8019052:	bf00      	nop
 8019054:	2000e3b9 	.word	0x2000e3b9

08019058 <__sinit>:
 8019058:	b510      	push	{r4, lr}
 801905a:	4604      	mov	r4, r0
 801905c:	f7ff fff0 	bl	8019040 <__sfp_lock_acquire>
 8019060:	6a23      	ldr	r3, [r4, #32]
 8019062:	b11b      	cbz	r3, 801906c <__sinit+0x14>
 8019064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019068:	f7ff bff0 	b.w	801904c <__sfp_lock_release>
 801906c:	4b04      	ldr	r3, [pc, #16]	@ (8019080 <__sinit+0x28>)
 801906e:	6223      	str	r3, [r4, #32]
 8019070:	4b04      	ldr	r3, [pc, #16]	@ (8019084 <__sinit+0x2c>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d1f5      	bne.n	8019064 <__sinit+0xc>
 8019078:	f7ff ffc4 	bl	8019004 <global_stdio_init.part.0>
 801907c:	e7f2      	b.n	8019064 <__sinit+0xc>
 801907e:	bf00      	nop
 8019080:	08018fc5 	.word	0x08018fc5
 8019084:	2000e3b4 	.word	0x2000e3b4

08019088 <_fwalk_sglue>:
 8019088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801908c:	4607      	mov	r7, r0
 801908e:	4688      	mov	r8, r1
 8019090:	4614      	mov	r4, r2
 8019092:	2600      	movs	r6, #0
 8019094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019098:	f1b9 0901 	subs.w	r9, r9, #1
 801909c:	d505      	bpl.n	80190aa <_fwalk_sglue+0x22>
 801909e:	6824      	ldr	r4, [r4, #0]
 80190a0:	2c00      	cmp	r4, #0
 80190a2:	d1f7      	bne.n	8019094 <_fwalk_sglue+0xc>
 80190a4:	4630      	mov	r0, r6
 80190a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190aa:	89ab      	ldrh	r3, [r5, #12]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d907      	bls.n	80190c0 <_fwalk_sglue+0x38>
 80190b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80190b4:	3301      	adds	r3, #1
 80190b6:	d003      	beq.n	80190c0 <_fwalk_sglue+0x38>
 80190b8:	4629      	mov	r1, r5
 80190ba:	4638      	mov	r0, r7
 80190bc:	47c0      	blx	r8
 80190be:	4306      	orrs	r6, r0
 80190c0:	3568      	adds	r5, #104	@ 0x68
 80190c2:	e7e9      	b.n	8019098 <_fwalk_sglue+0x10>

080190c4 <iprintf>:
 80190c4:	b40f      	push	{r0, r1, r2, r3}
 80190c6:	b507      	push	{r0, r1, r2, lr}
 80190c8:	4906      	ldr	r1, [pc, #24]	@ (80190e4 <iprintf+0x20>)
 80190ca:	ab04      	add	r3, sp, #16
 80190cc:	6808      	ldr	r0, [r1, #0]
 80190ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80190d2:	6881      	ldr	r1, [r0, #8]
 80190d4:	9301      	str	r3, [sp, #4]
 80190d6:	f001 fe85 	bl	801ade4 <_vfiprintf_r>
 80190da:	b003      	add	sp, #12
 80190dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80190e0:	b004      	add	sp, #16
 80190e2:	4770      	bx	lr
 80190e4:	20000028 	.word	0x20000028

080190e8 <_puts_r>:
 80190e8:	6a03      	ldr	r3, [r0, #32]
 80190ea:	b570      	push	{r4, r5, r6, lr}
 80190ec:	6884      	ldr	r4, [r0, #8]
 80190ee:	4605      	mov	r5, r0
 80190f0:	460e      	mov	r6, r1
 80190f2:	b90b      	cbnz	r3, 80190f8 <_puts_r+0x10>
 80190f4:	f7ff ffb0 	bl	8019058 <__sinit>
 80190f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80190fa:	07db      	lsls	r3, r3, #31
 80190fc:	d405      	bmi.n	801910a <_puts_r+0x22>
 80190fe:	89a3      	ldrh	r3, [r4, #12]
 8019100:	0598      	lsls	r0, r3, #22
 8019102:	d402      	bmi.n	801910a <_puts_r+0x22>
 8019104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019106:	f000 fa52 	bl	80195ae <__retarget_lock_acquire_recursive>
 801910a:	89a3      	ldrh	r3, [r4, #12]
 801910c:	0719      	lsls	r1, r3, #28
 801910e:	d502      	bpl.n	8019116 <_puts_r+0x2e>
 8019110:	6923      	ldr	r3, [r4, #16]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d135      	bne.n	8019182 <_puts_r+0x9a>
 8019116:	4621      	mov	r1, r4
 8019118:	4628      	mov	r0, r5
 801911a:	f000 f919 	bl	8019350 <__swsetup_r>
 801911e:	b380      	cbz	r0, 8019182 <_puts_r+0x9a>
 8019120:	f04f 35ff 	mov.w	r5, #4294967295
 8019124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019126:	07da      	lsls	r2, r3, #31
 8019128:	d405      	bmi.n	8019136 <_puts_r+0x4e>
 801912a:	89a3      	ldrh	r3, [r4, #12]
 801912c:	059b      	lsls	r3, r3, #22
 801912e:	d402      	bmi.n	8019136 <_puts_r+0x4e>
 8019130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019132:	f000 fa3d 	bl	80195b0 <__retarget_lock_release_recursive>
 8019136:	4628      	mov	r0, r5
 8019138:	bd70      	pop	{r4, r5, r6, pc}
 801913a:	2b00      	cmp	r3, #0
 801913c:	da04      	bge.n	8019148 <_puts_r+0x60>
 801913e:	69a2      	ldr	r2, [r4, #24]
 8019140:	429a      	cmp	r2, r3
 8019142:	dc17      	bgt.n	8019174 <_puts_r+0x8c>
 8019144:	290a      	cmp	r1, #10
 8019146:	d015      	beq.n	8019174 <_puts_r+0x8c>
 8019148:	6823      	ldr	r3, [r4, #0]
 801914a:	1c5a      	adds	r2, r3, #1
 801914c:	6022      	str	r2, [r4, #0]
 801914e:	7019      	strb	r1, [r3, #0]
 8019150:	68a3      	ldr	r3, [r4, #8]
 8019152:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019156:	3b01      	subs	r3, #1
 8019158:	60a3      	str	r3, [r4, #8]
 801915a:	2900      	cmp	r1, #0
 801915c:	d1ed      	bne.n	801913a <_puts_r+0x52>
 801915e:	2b00      	cmp	r3, #0
 8019160:	da11      	bge.n	8019186 <_puts_r+0x9e>
 8019162:	4622      	mov	r2, r4
 8019164:	210a      	movs	r1, #10
 8019166:	4628      	mov	r0, r5
 8019168:	f000 f8b3 	bl	80192d2 <__swbuf_r>
 801916c:	3001      	adds	r0, #1
 801916e:	d0d7      	beq.n	8019120 <_puts_r+0x38>
 8019170:	250a      	movs	r5, #10
 8019172:	e7d7      	b.n	8019124 <_puts_r+0x3c>
 8019174:	4622      	mov	r2, r4
 8019176:	4628      	mov	r0, r5
 8019178:	f000 f8ab 	bl	80192d2 <__swbuf_r>
 801917c:	3001      	adds	r0, #1
 801917e:	d1e7      	bne.n	8019150 <_puts_r+0x68>
 8019180:	e7ce      	b.n	8019120 <_puts_r+0x38>
 8019182:	3e01      	subs	r6, #1
 8019184:	e7e4      	b.n	8019150 <_puts_r+0x68>
 8019186:	6823      	ldr	r3, [r4, #0]
 8019188:	1c5a      	adds	r2, r3, #1
 801918a:	6022      	str	r2, [r4, #0]
 801918c:	220a      	movs	r2, #10
 801918e:	701a      	strb	r2, [r3, #0]
 8019190:	e7ee      	b.n	8019170 <_puts_r+0x88>
	...

08019194 <puts>:
 8019194:	4b02      	ldr	r3, [pc, #8]	@ (80191a0 <puts+0xc>)
 8019196:	4601      	mov	r1, r0
 8019198:	6818      	ldr	r0, [r3, #0]
 801919a:	f7ff bfa5 	b.w	80190e8 <_puts_r>
 801919e:	bf00      	nop
 80191a0:	20000028 	.word	0x20000028

080191a4 <sniprintf>:
 80191a4:	b40c      	push	{r2, r3}
 80191a6:	b530      	push	{r4, r5, lr}
 80191a8:	4b17      	ldr	r3, [pc, #92]	@ (8019208 <sniprintf+0x64>)
 80191aa:	1e0c      	subs	r4, r1, #0
 80191ac:	681d      	ldr	r5, [r3, #0]
 80191ae:	b09d      	sub	sp, #116	@ 0x74
 80191b0:	da08      	bge.n	80191c4 <sniprintf+0x20>
 80191b2:	238b      	movs	r3, #139	@ 0x8b
 80191b4:	602b      	str	r3, [r5, #0]
 80191b6:	f04f 30ff 	mov.w	r0, #4294967295
 80191ba:	b01d      	add	sp, #116	@ 0x74
 80191bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80191c0:	b002      	add	sp, #8
 80191c2:	4770      	bx	lr
 80191c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80191c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191cc:	bf14      	ite	ne
 80191ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80191d2:	4623      	moveq	r3, r4
 80191d4:	9304      	str	r3, [sp, #16]
 80191d6:	9307      	str	r3, [sp, #28]
 80191d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80191dc:	9002      	str	r0, [sp, #8]
 80191de:	9006      	str	r0, [sp, #24]
 80191e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80191e6:	ab21      	add	r3, sp, #132	@ 0x84
 80191e8:	a902      	add	r1, sp, #8
 80191ea:	4628      	mov	r0, r5
 80191ec:	9301      	str	r3, [sp, #4]
 80191ee:	f001 fcd3 	bl	801ab98 <_svfiprintf_r>
 80191f2:	1c43      	adds	r3, r0, #1
 80191f4:	bfbc      	itt	lt
 80191f6:	238b      	movlt	r3, #139	@ 0x8b
 80191f8:	602b      	strlt	r3, [r5, #0]
 80191fa:	2c00      	cmp	r4, #0
 80191fc:	d0dd      	beq.n	80191ba <sniprintf+0x16>
 80191fe:	9b02      	ldr	r3, [sp, #8]
 8019200:	2200      	movs	r2, #0
 8019202:	701a      	strb	r2, [r3, #0]
 8019204:	e7d9      	b.n	80191ba <sniprintf+0x16>
 8019206:	bf00      	nop
 8019208:	20000028 	.word	0x20000028

0801920c <siprintf>:
 801920c:	b40e      	push	{r1, r2, r3}
 801920e:	b500      	push	{lr}
 8019210:	b09c      	sub	sp, #112	@ 0x70
 8019212:	ab1d      	add	r3, sp, #116	@ 0x74
 8019214:	9002      	str	r0, [sp, #8]
 8019216:	9006      	str	r0, [sp, #24]
 8019218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801921c:	4809      	ldr	r0, [pc, #36]	@ (8019244 <siprintf+0x38>)
 801921e:	9107      	str	r1, [sp, #28]
 8019220:	9104      	str	r1, [sp, #16]
 8019222:	4909      	ldr	r1, [pc, #36]	@ (8019248 <siprintf+0x3c>)
 8019224:	f853 2b04 	ldr.w	r2, [r3], #4
 8019228:	9105      	str	r1, [sp, #20]
 801922a:	6800      	ldr	r0, [r0, #0]
 801922c:	9301      	str	r3, [sp, #4]
 801922e:	a902      	add	r1, sp, #8
 8019230:	f001 fcb2 	bl	801ab98 <_svfiprintf_r>
 8019234:	9b02      	ldr	r3, [sp, #8]
 8019236:	2200      	movs	r2, #0
 8019238:	701a      	strb	r2, [r3, #0]
 801923a:	b01c      	add	sp, #112	@ 0x70
 801923c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019240:	b003      	add	sp, #12
 8019242:	4770      	bx	lr
 8019244:	20000028 	.word	0x20000028
 8019248:	ffff0208 	.word	0xffff0208

0801924c <__sread>:
 801924c:	b510      	push	{r4, lr}
 801924e:	460c      	mov	r4, r1
 8019250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019254:	f000 f962 	bl	801951c <_read_r>
 8019258:	2800      	cmp	r0, #0
 801925a:	bfab      	itete	ge
 801925c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801925e:	89a3      	ldrhlt	r3, [r4, #12]
 8019260:	181b      	addge	r3, r3, r0
 8019262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019266:	bfac      	ite	ge
 8019268:	6563      	strge	r3, [r4, #84]	@ 0x54
 801926a:	81a3      	strhlt	r3, [r4, #12]
 801926c:	bd10      	pop	{r4, pc}

0801926e <__swrite>:
 801926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019272:	461f      	mov	r7, r3
 8019274:	898b      	ldrh	r3, [r1, #12]
 8019276:	05db      	lsls	r3, r3, #23
 8019278:	4605      	mov	r5, r0
 801927a:	460c      	mov	r4, r1
 801927c:	4616      	mov	r6, r2
 801927e:	d505      	bpl.n	801928c <__swrite+0x1e>
 8019280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019284:	2302      	movs	r3, #2
 8019286:	2200      	movs	r2, #0
 8019288:	f000 f936 	bl	80194f8 <_lseek_r>
 801928c:	89a3      	ldrh	r3, [r4, #12]
 801928e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019296:	81a3      	strh	r3, [r4, #12]
 8019298:	4632      	mov	r2, r6
 801929a:	463b      	mov	r3, r7
 801929c:	4628      	mov	r0, r5
 801929e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192a2:	f000 b94d 	b.w	8019540 <_write_r>

080192a6 <__sseek>:
 80192a6:	b510      	push	{r4, lr}
 80192a8:	460c      	mov	r4, r1
 80192aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192ae:	f000 f923 	bl	80194f8 <_lseek_r>
 80192b2:	1c43      	adds	r3, r0, #1
 80192b4:	89a3      	ldrh	r3, [r4, #12]
 80192b6:	bf15      	itete	ne
 80192b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80192ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80192be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80192c2:	81a3      	strheq	r3, [r4, #12]
 80192c4:	bf18      	it	ne
 80192c6:	81a3      	strhne	r3, [r4, #12]
 80192c8:	bd10      	pop	{r4, pc}

080192ca <__sclose>:
 80192ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192ce:	f000 b903 	b.w	80194d8 <_close_r>

080192d2 <__swbuf_r>:
 80192d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192d4:	460e      	mov	r6, r1
 80192d6:	4614      	mov	r4, r2
 80192d8:	4605      	mov	r5, r0
 80192da:	b118      	cbz	r0, 80192e4 <__swbuf_r+0x12>
 80192dc:	6a03      	ldr	r3, [r0, #32]
 80192de:	b90b      	cbnz	r3, 80192e4 <__swbuf_r+0x12>
 80192e0:	f7ff feba 	bl	8019058 <__sinit>
 80192e4:	69a3      	ldr	r3, [r4, #24]
 80192e6:	60a3      	str	r3, [r4, #8]
 80192e8:	89a3      	ldrh	r3, [r4, #12]
 80192ea:	071a      	lsls	r2, r3, #28
 80192ec:	d501      	bpl.n	80192f2 <__swbuf_r+0x20>
 80192ee:	6923      	ldr	r3, [r4, #16]
 80192f0:	b943      	cbnz	r3, 8019304 <__swbuf_r+0x32>
 80192f2:	4621      	mov	r1, r4
 80192f4:	4628      	mov	r0, r5
 80192f6:	f000 f82b 	bl	8019350 <__swsetup_r>
 80192fa:	b118      	cbz	r0, 8019304 <__swbuf_r+0x32>
 80192fc:	f04f 37ff 	mov.w	r7, #4294967295
 8019300:	4638      	mov	r0, r7
 8019302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019304:	6823      	ldr	r3, [r4, #0]
 8019306:	6922      	ldr	r2, [r4, #16]
 8019308:	1a98      	subs	r0, r3, r2
 801930a:	6963      	ldr	r3, [r4, #20]
 801930c:	b2f6      	uxtb	r6, r6
 801930e:	4283      	cmp	r3, r0
 8019310:	4637      	mov	r7, r6
 8019312:	dc05      	bgt.n	8019320 <__swbuf_r+0x4e>
 8019314:	4621      	mov	r1, r4
 8019316:	4628      	mov	r0, r5
 8019318:	f001 ff00 	bl	801b11c <_fflush_r>
 801931c:	2800      	cmp	r0, #0
 801931e:	d1ed      	bne.n	80192fc <__swbuf_r+0x2a>
 8019320:	68a3      	ldr	r3, [r4, #8]
 8019322:	3b01      	subs	r3, #1
 8019324:	60a3      	str	r3, [r4, #8]
 8019326:	6823      	ldr	r3, [r4, #0]
 8019328:	1c5a      	adds	r2, r3, #1
 801932a:	6022      	str	r2, [r4, #0]
 801932c:	701e      	strb	r6, [r3, #0]
 801932e:	6962      	ldr	r2, [r4, #20]
 8019330:	1c43      	adds	r3, r0, #1
 8019332:	429a      	cmp	r2, r3
 8019334:	d004      	beq.n	8019340 <__swbuf_r+0x6e>
 8019336:	89a3      	ldrh	r3, [r4, #12]
 8019338:	07db      	lsls	r3, r3, #31
 801933a:	d5e1      	bpl.n	8019300 <__swbuf_r+0x2e>
 801933c:	2e0a      	cmp	r6, #10
 801933e:	d1df      	bne.n	8019300 <__swbuf_r+0x2e>
 8019340:	4621      	mov	r1, r4
 8019342:	4628      	mov	r0, r5
 8019344:	f001 feea 	bl	801b11c <_fflush_r>
 8019348:	2800      	cmp	r0, #0
 801934a:	d0d9      	beq.n	8019300 <__swbuf_r+0x2e>
 801934c:	e7d6      	b.n	80192fc <__swbuf_r+0x2a>
	...

08019350 <__swsetup_r>:
 8019350:	b538      	push	{r3, r4, r5, lr}
 8019352:	4b29      	ldr	r3, [pc, #164]	@ (80193f8 <__swsetup_r+0xa8>)
 8019354:	4605      	mov	r5, r0
 8019356:	6818      	ldr	r0, [r3, #0]
 8019358:	460c      	mov	r4, r1
 801935a:	b118      	cbz	r0, 8019364 <__swsetup_r+0x14>
 801935c:	6a03      	ldr	r3, [r0, #32]
 801935e:	b90b      	cbnz	r3, 8019364 <__swsetup_r+0x14>
 8019360:	f7ff fe7a 	bl	8019058 <__sinit>
 8019364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019368:	0719      	lsls	r1, r3, #28
 801936a:	d422      	bmi.n	80193b2 <__swsetup_r+0x62>
 801936c:	06da      	lsls	r2, r3, #27
 801936e:	d407      	bmi.n	8019380 <__swsetup_r+0x30>
 8019370:	2209      	movs	r2, #9
 8019372:	602a      	str	r2, [r5, #0]
 8019374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019378:	81a3      	strh	r3, [r4, #12]
 801937a:	f04f 30ff 	mov.w	r0, #4294967295
 801937e:	e033      	b.n	80193e8 <__swsetup_r+0x98>
 8019380:	0758      	lsls	r0, r3, #29
 8019382:	d512      	bpl.n	80193aa <__swsetup_r+0x5a>
 8019384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019386:	b141      	cbz	r1, 801939a <__swsetup_r+0x4a>
 8019388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801938c:	4299      	cmp	r1, r3
 801938e:	d002      	beq.n	8019396 <__swsetup_r+0x46>
 8019390:	4628      	mov	r0, r5
 8019392:	f000 ff23 	bl	801a1dc <_free_r>
 8019396:	2300      	movs	r3, #0
 8019398:	6363      	str	r3, [r4, #52]	@ 0x34
 801939a:	89a3      	ldrh	r3, [r4, #12]
 801939c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80193a0:	81a3      	strh	r3, [r4, #12]
 80193a2:	2300      	movs	r3, #0
 80193a4:	6063      	str	r3, [r4, #4]
 80193a6:	6923      	ldr	r3, [r4, #16]
 80193a8:	6023      	str	r3, [r4, #0]
 80193aa:	89a3      	ldrh	r3, [r4, #12]
 80193ac:	f043 0308 	orr.w	r3, r3, #8
 80193b0:	81a3      	strh	r3, [r4, #12]
 80193b2:	6923      	ldr	r3, [r4, #16]
 80193b4:	b94b      	cbnz	r3, 80193ca <__swsetup_r+0x7a>
 80193b6:	89a3      	ldrh	r3, [r4, #12]
 80193b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80193bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80193c0:	d003      	beq.n	80193ca <__swsetup_r+0x7a>
 80193c2:	4621      	mov	r1, r4
 80193c4:	4628      	mov	r0, r5
 80193c6:	f001 ff09 	bl	801b1dc <__smakebuf_r>
 80193ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193ce:	f013 0201 	ands.w	r2, r3, #1
 80193d2:	d00a      	beq.n	80193ea <__swsetup_r+0x9a>
 80193d4:	2200      	movs	r2, #0
 80193d6:	60a2      	str	r2, [r4, #8]
 80193d8:	6962      	ldr	r2, [r4, #20]
 80193da:	4252      	negs	r2, r2
 80193dc:	61a2      	str	r2, [r4, #24]
 80193de:	6922      	ldr	r2, [r4, #16]
 80193e0:	b942      	cbnz	r2, 80193f4 <__swsetup_r+0xa4>
 80193e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80193e6:	d1c5      	bne.n	8019374 <__swsetup_r+0x24>
 80193e8:	bd38      	pop	{r3, r4, r5, pc}
 80193ea:	0799      	lsls	r1, r3, #30
 80193ec:	bf58      	it	pl
 80193ee:	6962      	ldrpl	r2, [r4, #20]
 80193f0:	60a2      	str	r2, [r4, #8]
 80193f2:	e7f4      	b.n	80193de <__swsetup_r+0x8e>
 80193f4:	2000      	movs	r0, #0
 80193f6:	e7f7      	b.n	80193e8 <__swsetup_r+0x98>
 80193f8:	20000028 	.word	0x20000028

080193fc <memcmp>:
 80193fc:	b510      	push	{r4, lr}
 80193fe:	3901      	subs	r1, #1
 8019400:	4402      	add	r2, r0
 8019402:	4290      	cmp	r0, r2
 8019404:	d101      	bne.n	801940a <memcmp+0xe>
 8019406:	2000      	movs	r0, #0
 8019408:	e005      	b.n	8019416 <memcmp+0x1a>
 801940a:	7803      	ldrb	r3, [r0, #0]
 801940c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019410:	42a3      	cmp	r3, r4
 8019412:	d001      	beq.n	8019418 <memcmp+0x1c>
 8019414:	1b18      	subs	r0, r3, r4
 8019416:	bd10      	pop	{r4, pc}
 8019418:	3001      	adds	r0, #1
 801941a:	e7f2      	b.n	8019402 <memcmp+0x6>

0801941c <memmove>:
 801941c:	4288      	cmp	r0, r1
 801941e:	b510      	push	{r4, lr}
 8019420:	eb01 0402 	add.w	r4, r1, r2
 8019424:	d902      	bls.n	801942c <memmove+0x10>
 8019426:	4284      	cmp	r4, r0
 8019428:	4623      	mov	r3, r4
 801942a:	d807      	bhi.n	801943c <memmove+0x20>
 801942c:	1e43      	subs	r3, r0, #1
 801942e:	42a1      	cmp	r1, r4
 8019430:	d008      	beq.n	8019444 <memmove+0x28>
 8019432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019436:	f803 2f01 	strb.w	r2, [r3, #1]!
 801943a:	e7f8      	b.n	801942e <memmove+0x12>
 801943c:	4402      	add	r2, r0
 801943e:	4601      	mov	r1, r0
 8019440:	428a      	cmp	r2, r1
 8019442:	d100      	bne.n	8019446 <memmove+0x2a>
 8019444:	bd10      	pop	{r4, pc}
 8019446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801944a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801944e:	e7f7      	b.n	8019440 <memmove+0x24>

08019450 <memset>:
 8019450:	4402      	add	r2, r0
 8019452:	4603      	mov	r3, r0
 8019454:	4293      	cmp	r3, r2
 8019456:	d100      	bne.n	801945a <memset+0xa>
 8019458:	4770      	bx	lr
 801945a:	f803 1b01 	strb.w	r1, [r3], #1
 801945e:	e7f9      	b.n	8019454 <memset+0x4>

08019460 <strcat>:
 8019460:	b510      	push	{r4, lr}
 8019462:	4602      	mov	r2, r0
 8019464:	7814      	ldrb	r4, [r2, #0]
 8019466:	4613      	mov	r3, r2
 8019468:	3201      	adds	r2, #1
 801946a:	2c00      	cmp	r4, #0
 801946c:	d1fa      	bne.n	8019464 <strcat+0x4>
 801946e:	3b01      	subs	r3, #1
 8019470:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019474:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019478:	2a00      	cmp	r2, #0
 801947a:	d1f9      	bne.n	8019470 <strcat+0x10>
 801947c:	bd10      	pop	{r4, pc}

0801947e <strncpy>:
 801947e:	b510      	push	{r4, lr}
 8019480:	3901      	subs	r1, #1
 8019482:	4603      	mov	r3, r0
 8019484:	b132      	cbz	r2, 8019494 <strncpy+0x16>
 8019486:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801948a:	f803 4b01 	strb.w	r4, [r3], #1
 801948e:	3a01      	subs	r2, #1
 8019490:	2c00      	cmp	r4, #0
 8019492:	d1f7      	bne.n	8019484 <strncpy+0x6>
 8019494:	441a      	add	r2, r3
 8019496:	2100      	movs	r1, #0
 8019498:	4293      	cmp	r3, r2
 801949a:	d100      	bne.n	801949e <strncpy+0x20>
 801949c:	bd10      	pop	{r4, pc}
 801949e:	f803 1b01 	strb.w	r1, [r3], #1
 80194a2:	e7f9      	b.n	8019498 <strncpy+0x1a>

080194a4 <strstr>:
 80194a4:	780a      	ldrb	r2, [r1, #0]
 80194a6:	b570      	push	{r4, r5, r6, lr}
 80194a8:	b96a      	cbnz	r2, 80194c6 <strstr+0x22>
 80194aa:	bd70      	pop	{r4, r5, r6, pc}
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d109      	bne.n	80194c4 <strstr+0x20>
 80194b0:	460c      	mov	r4, r1
 80194b2:	4605      	mov	r5, r0
 80194b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d0f6      	beq.n	80194aa <strstr+0x6>
 80194bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80194c0:	429e      	cmp	r6, r3
 80194c2:	d0f7      	beq.n	80194b4 <strstr+0x10>
 80194c4:	3001      	adds	r0, #1
 80194c6:	7803      	ldrb	r3, [r0, #0]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d1ef      	bne.n	80194ac <strstr+0x8>
 80194cc:	4618      	mov	r0, r3
 80194ce:	e7ec      	b.n	80194aa <strstr+0x6>

080194d0 <_localeconv_r>:
 80194d0:	4800      	ldr	r0, [pc, #0]	@ (80194d4 <_localeconv_r+0x4>)
 80194d2:	4770      	bx	lr
 80194d4:	20000168 	.word	0x20000168

080194d8 <_close_r>:
 80194d8:	b538      	push	{r3, r4, r5, lr}
 80194da:	4d06      	ldr	r5, [pc, #24]	@ (80194f4 <_close_r+0x1c>)
 80194dc:	2300      	movs	r3, #0
 80194de:	4604      	mov	r4, r0
 80194e0:	4608      	mov	r0, r1
 80194e2:	602b      	str	r3, [r5, #0]
 80194e4:	f7e7 ff66 	bl	80013b4 <_close>
 80194e8:	1c43      	adds	r3, r0, #1
 80194ea:	d102      	bne.n	80194f2 <_close_r+0x1a>
 80194ec:	682b      	ldr	r3, [r5, #0]
 80194ee:	b103      	cbz	r3, 80194f2 <_close_r+0x1a>
 80194f0:	6023      	str	r3, [r4, #0]
 80194f2:	bd38      	pop	{r3, r4, r5, pc}
 80194f4:	2000e274 	.word	0x2000e274

080194f8 <_lseek_r>:
 80194f8:	b538      	push	{r3, r4, r5, lr}
 80194fa:	4d07      	ldr	r5, [pc, #28]	@ (8019518 <_lseek_r+0x20>)
 80194fc:	4604      	mov	r4, r0
 80194fe:	4608      	mov	r0, r1
 8019500:	4611      	mov	r1, r2
 8019502:	2200      	movs	r2, #0
 8019504:	602a      	str	r2, [r5, #0]
 8019506:	461a      	mov	r2, r3
 8019508:	f7e7 ff7b 	bl	8001402 <_lseek>
 801950c:	1c43      	adds	r3, r0, #1
 801950e:	d102      	bne.n	8019516 <_lseek_r+0x1e>
 8019510:	682b      	ldr	r3, [r5, #0]
 8019512:	b103      	cbz	r3, 8019516 <_lseek_r+0x1e>
 8019514:	6023      	str	r3, [r4, #0]
 8019516:	bd38      	pop	{r3, r4, r5, pc}
 8019518:	2000e274 	.word	0x2000e274

0801951c <_read_r>:
 801951c:	b538      	push	{r3, r4, r5, lr}
 801951e:	4d07      	ldr	r5, [pc, #28]	@ (801953c <_read_r+0x20>)
 8019520:	4604      	mov	r4, r0
 8019522:	4608      	mov	r0, r1
 8019524:	4611      	mov	r1, r2
 8019526:	2200      	movs	r2, #0
 8019528:	602a      	str	r2, [r5, #0]
 801952a:	461a      	mov	r2, r3
 801952c:	f7e7 ff25 	bl	800137a <_read>
 8019530:	1c43      	adds	r3, r0, #1
 8019532:	d102      	bne.n	801953a <_read_r+0x1e>
 8019534:	682b      	ldr	r3, [r5, #0]
 8019536:	b103      	cbz	r3, 801953a <_read_r+0x1e>
 8019538:	6023      	str	r3, [r4, #0]
 801953a:	bd38      	pop	{r3, r4, r5, pc}
 801953c:	2000e274 	.word	0x2000e274

08019540 <_write_r>:
 8019540:	b538      	push	{r3, r4, r5, lr}
 8019542:	4d07      	ldr	r5, [pc, #28]	@ (8019560 <_write_r+0x20>)
 8019544:	4604      	mov	r4, r0
 8019546:	4608      	mov	r0, r1
 8019548:	4611      	mov	r1, r2
 801954a:	2200      	movs	r2, #0
 801954c:	602a      	str	r2, [r5, #0]
 801954e:	461a      	mov	r2, r3
 8019550:	f7e7 faae 	bl	8000ab0 <_write>
 8019554:	1c43      	adds	r3, r0, #1
 8019556:	d102      	bne.n	801955e <_write_r+0x1e>
 8019558:	682b      	ldr	r3, [r5, #0]
 801955a:	b103      	cbz	r3, 801955e <_write_r+0x1e>
 801955c:	6023      	str	r3, [r4, #0]
 801955e:	bd38      	pop	{r3, r4, r5, pc}
 8019560:	2000e274 	.word	0x2000e274

08019564 <__libc_init_array>:
 8019564:	b570      	push	{r4, r5, r6, lr}
 8019566:	4d0d      	ldr	r5, [pc, #52]	@ (801959c <__libc_init_array+0x38>)
 8019568:	4c0d      	ldr	r4, [pc, #52]	@ (80195a0 <__libc_init_array+0x3c>)
 801956a:	1b64      	subs	r4, r4, r5
 801956c:	10a4      	asrs	r4, r4, #2
 801956e:	2600      	movs	r6, #0
 8019570:	42a6      	cmp	r6, r4
 8019572:	d109      	bne.n	8019588 <__libc_init_array+0x24>
 8019574:	4d0b      	ldr	r5, [pc, #44]	@ (80195a4 <__libc_init_array+0x40>)
 8019576:	4c0c      	ldr	r4, [pc, #48]	@ (80195a8 <__libc_init_array+0x44>)
 8019578:	f001 ff52 	bl	801b420 <_init>
 801957c:	1b64      	subs	r4, r4, r5
 801957e:	10a4      	asrs	r4, r4, #2
 8019580:	2600      	movs	r6, #0
 8019582:	42a6      	cmp	r6, r4
 8019584:	d105      	bne.n	8019592 <__libc_init_array+0x2e>
 8019586:	bd70      	pop	{r4, r5, r6, pc}
 8019588:	f855 3b04 	ldr.w	r3, [r5], #4
 801958c:	4798      	blx	r3
 801958e:	3601      	adds	r6, #1
 8019590:	e7ee      	b.n	8019570 <__libc_init_array+0xc>
 8019592:	f855 3b04 	ldr.w	r3, [r5], #4
 8019596:	4798      	blx	r3
 8019598:	3601      	adds	r6, #1
 801959a:	e7f2      	b.n	8019582 <__libc_init_array+0x1e>
 801959c:	0801f02c 	.word	0x0801f02c
 80195a0:	0801f02c 	.word	0x0801f02c
 80195a4:	0801f02c 	.word	0x0801f02c
 80195a8:	0801f030 	.word	0x0801f030

080195ac <__retarget_lock_init_recursive>:
 80195ac:	4770      	bx	lr

080195ae <__retarget_lock_acquire_recursive>:
 80195ae:	4770      	bx	lr

080195b0 <__retarget_lock_release_recursive>:
 80195b0:	4770      	bx	lr

080195b2 <strcpy>:
 80195b2:	4603      	mov	r3, r0
 80195b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195b8:	f803 2b01 	strb.w	r2, [r3], #1
 80195bc:	2a00      	cmp	r2, #0
 80195be:	d1f9      	bne.n	80195b4 <strcpy+0x2>
 80195c0:	4770      	bx	lr

080195c2 <memcpy>:
 80195c2:	440a      	add	r2, r1
 80195c4:	4291      	cmp	r1, r2
 80195c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80195ca:	d100      	bne.n	80195ce <memcpy+0xc>
 80195cc:	4770      	bx	lr
 80195ce:	b510      	push	{r4, lr}
 80195d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80195d8:	4291      	cmp	r1, r2
 80195da:	d1f9      	bne.n	80195d0 <memcpy+0xe>
 80195dc:	bd10      	pop	{r4, pc}
	...

080195e0 <__assert_func>:
 80195e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80195e2:	4614      	mov	r4, r2
 80195e4:	461a      	mov	r2, r3
 80195e6:	4b09      	ldr	r3, [pc, #36]	@ (801960c <__assert_func+0x2c>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	4605      	mov	r5, r0
 80195ec:	68d8      	ldr	r0, [r3, #12]
 80195ee:	b954      	cbnz	r4, 8019606 <__assert_func+0x26>
 80195f0:	4b07      	ldr	r3, [pc, #28]	@ (8019610 <__assert_func+0x30>)
 80195f2:	461c      	mov	r4, r3
 80195f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80195f8:	9100      	str	r1, [sp, #0]
 80195fa:	462b      	mov	r3, r5
 80195fc:	4905      	ldr	r1, [pc, #20]	@ (8019614 <__assert_func+0x34>)
 80195fe:	f001 fdb5 	bl	801b16c <fiprintf>
 8019602:	f001 fe59 	bl	801b2b8 <abort>
 8019606:	4b04      	ldr	r3, [pc, #16]	@ (8019618 <__assert_func+0x38>)
 8019608:	e7f4      	b.n	80195f4 <__assert_func+0x14>
 801960a:	bf00      	nop
 801960c:	20000028 	.word	0x20000028
 8019610:	0801ee39 	.word	0x0801ee39
 8019614:	0801ee0b 	.word	0x0801ee0b
 8019618:	0801edfe 	.word	0x0801edfe

0801961c <quorem>:
 801961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019620:	6903      	ldr	r3, [r0, #16]
 8019622:	690c      	ldr	r4, [r1, #16]
 8019624:	42a3      	cmp	r3, r4
 8019626:	4607      	mov	r7, r0
 8019628:	db7e      	blt.n	8019728 <quorem+0x10c>
 801962a:	3c01      	subs	r4, #1
 801962c:	f101 0814 	add.w	r8, r1, #20
 8019630:	00a3      	lsls	r3, r4, #2
 8019632:	f100 0514 	add.w	r5, r0, #20
 8019636:	9300      	str	r3, [sp, #0]
 8019638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801963c:	9301      	str	r3, [sp, #4]
 801963e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019646:	3301      	adds	r3, #1
 8019648:	429a      	cmp	r2, r3
 801964a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801964e:	fbb2 f6f3 	udiv	r6, r2, r3
 8019652:	d32e      	bcc.n	80196b2 <quorem+0x96>
 8019654:	f04f 0a00 	mov.w	sl, #0
 8019658:	46c4      	mov	ip, r8
 801965a:	46ae      	mov	lr, r5
 801965c:	46d3      	mov	fp, sl
 801965e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019662:	b298      	uxth	r0, r3
 8019664:	fb06 a000 	mla	r0, r6, r0, sl
 8019668:	0c02      	lsrs	r2, r0, #16
 801966a:	0c1b      	lsrs	r3, r3, #16
 801966c:	fb06 2303 	mla	r3, r6, r3, r2
 8019670:	f8de 2000 	ldr.w	r2, [lr]
 8019674:	b280      	uxth	r0, r0
 8019676:	b292      	uxth	r2, r2
 8019678:	1a12      	subs	r2, r2, r0
 801967a:	445a      	add	r2, fp
 801967c:	f8de 0000 	ldr.w	r0, [lr]
 8019680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019684:	b29b      	uxth	r3, r3
 8019686:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801968a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801968e:	b292      	uxth	r2, r2
 8019690:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019694:	45e1      	cmp	r9, ip
 8019696:	f84e 2b04 	str.w	r2, [lr], #4
 801969a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801969e:	d2de      	bcs.n	801965e <quorem+0x42>
 80196a0:	9b00      	ldr	r3, [sp, #0]
 80196a2:	58eb      	ldr	r3, [r5, r3]
 80196a4:	b92b      	cbnz	r3, 80196b2 <quorem+0x96>
 80196a6:	9b01      	ldr	r3, [sp, #4]
 80196a8:	3b04      	subs	r3, #4
 80196aa:	429d      	cmp	r5, r3
 80196ac:	461a      	mov	r2, r3
 80196ae:	d32f      	bcc.n	8019710 <quorem+0xf4>
 80196b0:	613c      	str	r4, [r7, #16]
 80196b2:	4638      	mov	r0, r7
 80196b4:	f001 f90c 	bl	801a8d0 <__mcmp>
 80196b8:	2800      	cmp	r0, #0
 80196ba:	db25      	blt.n	8019708 <quorem+0xec>
 80196bc:	4629      	mov	r1, r5
 80196be:	2000      	movs	r0, #0
 80196c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80196c4:	f8d1 c000 	ldr.w	ip, [r1]
 80196c8:	fa1f fe82 	uxth.w	lr, r2
 80196cc:	fa1f f38c 	uxth.w	r3, ip
 80196d0:	eba3 030e 	sub.w	r3, r3, lr
 80196d4:	4403      	add	r3, r0
 80196d6:	0c12      	lsrs	r2, r2, #16
 80196d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80196dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80196e0:	b29b      	uxth	r3, r3
 80196e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80196e6:	45c1      	cmp	r9, r8
 80196e8:	f841 3b04 	str.w	r3, [r1], #4
 80196ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80196f0:	d2e6      	bcs.n	80196c0 <quorem+0xa4>
 80196f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80196f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80196fa:	b922      	cbnz	r2, 8019706 <quorem+0xea>
 80196fc:	3b04      	subs	r3, #4
 80196fe:	429d      	cmp	r5, r3
 8019700:	461a      	mov	r2, r3
 8019702:	d30b      	bcc.n	801971c <quorem+0x100>
 8019704:	613c      	str	r4, [r7, #16]
 8019706:	3601      	adds	r6, #1
 8019708:	4630      	mov	r0, r6
 801970a:	b003      	add	sp, #12
 801970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019710:	6812      	ldr	r2, [r2, #0]
 8019712:	3b04      	subs	r3, #4
 8019714:	2a00      	cmp	r2, #0
 8019716:	d1cb      	bne.n	80196b0 <quorem+0x94>
 8019718:	3c01      	subs	r4, #1
 801971a:	e7c6      	b.n	80196aa <quorem+0x8e>
 801971c:	6812      	ldr	r2, [r2, #0]
 801971e:	3b04      	subs	r3, #4
 8019720:	2a00      	cmp	r2, #0
 8019722:	d1ef      	bne.n	8019704 <quorem+0xe8>
 8019724:	3c01      	subs	r4, #1
 8019726:	e7ea      	b.n	80196fe <quorem+0xe2>
 8019728:	2000      	movs	r0, #0
 801972a:	e7ee      	b.n	801970a <quorem+0xee>
 801972c:	0000      	movs	r0, r0
	...

08019730 <_dtoa_r>:
 8019730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019734:	ed2d 8b02 	vpush	{d8}
 8019738:	69c7      	ldr	r7, [r0, #28]
 801973a:	b091      	sub	sp, #68	@ 0x44
 801973c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019740:	ec55 4b10 	vmov	r4, r5, d0
 8019744:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019746:	9107      	str	r1, [sp, #28]
 8019748:	4681      	mov	r9, r0
 801974a:	9209      	str	r2, [sp, #36]	@ 0x24
 801974c:	930d      	str	r3, [sp, #52]	@ 0x34
 801974e:	b97f      	cbnz	r7, 8019770 <_dtoa_r+0x40>
 8019750:	2010      	movs	r0, #16
 8019752:	f000 fd8d 	bl	801a270 <malloc>
 8019756:	4602      	mov	r2, r0
 8019758:	f8c9 001c 	str.w	r0, [r9, #28]
 801975c:	b920      	cbnz	r0, 8019768 <_dtoa_r+0x38>
 801975e:	4ba0      	ldr	r3, [pc, #640]	@ (80199e0 <_dtoa_r+0x2b0>)
 8019760:	21ef      	movs	r1, #239	@ 0xef
 8019762:	48a0      	ldr	r0, [pc, #640]	@ (80199e4 <_dtoa_r+0x2b4>)
 8019764:	f7ff ff3c 	bl	80195e0 <__assert_func>
 8019768:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801976c:	6007      	str	r7, [r0, #0]
 801976e:	60c7      	str	r7, [r0, #12]
 8019770:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019774:	6819      	ldr	r1, [r3, #0]
 8019776:	b159      	cbz	r1, 8019790 <_dtoa_r+0x60>
 8019778:	685a      	ldr	r2, [r3, #4]
 801977a:	604a      	str	r2, [r1, #4]
 801977c:	2301      	movs	r3, #1
 801977e:	4093      	lsls	r3, r2
 8019780:	608b      	str	r3, [r1, #8]
 8019782:	4648      	mov	r0, r9
 8019784:	f000 fe6a 	bl	801a45c <_Bfree>
 8019788:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801978c:	2200      	movs	r2, #0
 801978e:	601a      	str	r2, [r3, #0]
 8019790:	1e2b      	subs	r3, r5, #0
 8019792:	bfbb      	ittet	lt
 8019794:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019798:	9303      	strlt	r3, [sp, #12]
 801979a:	2300      	movge	r3, #0
 801979c:	2201      	movlt	r2, #1
 801979e:	bfac      	ite	ge
 80197a0:	6033      	strge	r3, [r6, #0]
 80197a2:	6032      	strlt	r2, [r6, #0]
 80197a4:	4b90      	ldr	r3, [pc, #576]	@ (80199e8 <_dtoa_r+0x2b8>)
 80197a6:	9e03      	ldr	r6, [sp, #12]
 80197a8:	43b3      	bics	r3, r6
 80197aa:	d110      	bne.n	80197ce <_dtoa_r+0x9e>
 80197ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 80197b2:	6013      	str	r3, [r2, #0]
 80197b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80197b8:	4323      	orrs	r3, r4
 80197ba:	f000 84de 	beq.w	801a17a <_dtoa_r+0xa4a>
 80197be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80197c0:	4f8a      	ldr	r7, [pc, #552]	@ (80199ec <_dtoa_r+0x2bc>)
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f000 84e0 	beq.w	801a188 <_dtoa_r+0xa58>
 80197c8:	1cfb      	adds	r3, r7, #3
 80197ca:	f000 bcdb 	b.w	801a184 <_dtoa_r+0xa54>
 80197ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 80197d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80197d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197da:	d10a      	bne.n	80197f2 <_dtoa_r+0xc2>
 80197dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197de:	2301      	movs	r3, #1
 80197e0:	6013      	str	r3, [r2, #0]
 80197e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80197e4:	b113      	cbz	r3, 80197ec <_dtoa_r+0xbc>
 80197e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80197e8:	4b81      	ldr	r3, [pc, #516]	@ (80199f0 <_dtoa_r+0x2c0>)
 80197ea:	6013      	str	r3, [r2, #0]
 80197ec:	4f81      	ldr	r7, [pc, #516]	@ (80199f4 <_dtoa_r+0x2c4>)
 80197ee:	f000 bccb 	b.w	801a188 <_dtoa_r+0xa58>
 80197f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80197f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80197f6:	4648      	mov	r0, r9
 80197f8:	eeb0 0b48 	vmov.f64	d0, d8
 80197fc:	f001 f918 	bl	801aa30 <__d2b>
 8019800:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019806:	9001      	str	r0, [sp, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d045      	beq.n	8019898 <_dtoa_r+0x168>
 801980c:	eeb0 7b48 	vmov.f64	d7, d8
 8019810:	ee18 1a90 	vmov	r1, s17
 8019814:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019818:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801981c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019820:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019824:	2500      	movs	r5, #0
 8019826:	ee07 1a90 	vmov	s15, r1
 801982a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801982e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80199c8 <_dtoa_r+0x298>
 8019832:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019836:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80199d0 <_dtoa_r+0x2a0>
 801983a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801983e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80199d8 <_dtoa_r+0x2a8>
 8019842:	ee07 3a90 	vmov	s15, r3
 8019846:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801984a:	eeb0 7b46 	vmov.f64	d7, d6
 801984e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019852:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019856:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985e:	ee16 8a90 	vmov	r8, s13
 8019862:	d508      	bpl.n	8019876 <_dtoa_r+0x146>
 8019864:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019868:	eeb4 6b47 	vcmp.f64	d6, d7
 801986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019870:	bf18      	it	ne
 8019872:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019876:	f1b8 0f16 	cmp.w	r8, #22
 801987a:	d82b      	bhi.n	80198d4 <_dtoa_r+0x1a4>
 801987c:	495e      	ldr	r1, [pc, #376]	@ (80199f8 <_dtoa_r+0x2c8>)
 801987e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019882:	ed91 7b00 	vldr	d7, [r1]
 8019886:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988e:	d501      	bpl.n	8019894 <_dtoa_r+0x164>
 8019890:	f108 38ff 	add.w	r8, r8, #4294967295
 8019894:	2100      	movs	r1, #0
 8019896:	e01e      	b.n	80198d6 <_dtoa_r+0x1a6>
 8019898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801989a:	4413      	add	r3, r2
 801989c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80198a0:	2920      	cmp	r1, #32
 80198a2:	bfc1      	itttt	gt
 80198a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80198a8:	408e      	lslgt	r6, r1
 80198aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80198ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 80198b2:	bfd6      	itet	le
 80198b4:	f1c1 0120 	rsble	r1, r1, #32
 80198b8:	4331      	orrgt	r1, r6
 80198ba:	fa04 f101 	lslle.w	r1, r4, r1
 80198be:	ee07 1a90 	vmov	s15, r1
 80198c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80198c6:	3b01      	subs	r3, #1
 80198c8:	ee17 1a90 	vmov	r1, s15
 80198cc:	2501      	movs	r5, #1
 80198ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80198d2:	e7a8      	b.n	8019826 <_dtoa_r+0xf6>
 80198d4:	2101      	movs	r1, #1
 80198d6:	1ad2      	subs	r2, r2, r3
 80198d8:	1e53      	subs	r3, r2, #1
 80198da:	9306      	str	r3, [sp, #24]
 80198dc:	bf45      	ittet	mi
 80198de:	f1c2 0301 	rsbmi	r3, r2, #1
 80198e2:	9305      	strmi	r3, [sp, #20]
 80198e4:	2300      	movpl	r3, #0
 80198e6:	2300      	movmi	r3, #0
 80198e8:	bf4c      	ite	mi
 80198ea:	9306      	strmi	r3, [sp, #24]
 80198ec:	9305      	strpl	r3, [sp, #20]
 80198ee:	f1b8 0f00 	cmp.w	r8, #0
 80198f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80198f4:	db18      	blt.n	8019928 <_dtoa_r+0x1f8>
 80198f6:	9b06      	ldr	r3, [sp, #24]
 80198f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80198fc:	4443      	add	r3, r8
 80198fe:	9306      	str	r3, [sp, #24]
 8019900:	2300      	movs	r3, #0
 8019902:	9a07      	ldr	r2, [sp, #28]
 8019904:	2a09      	cmp	r2, #9
 8019906:	d849      	bhi.n	801999c <_dtoa_r+0x26c>
 8019908:	2a05      	cmp	r2, #5
 801990a:	bfc4      	itt	gt
 801990c:	3a04      	subgt	r2, #4
 801990e:	9207      	strgt	r2, [sp, #28]
 8019910:	9a07      	ldr	r2, [sp, #28]
 8019912:	f1a2 0202 	sub.w	r2, r2, #2
 8019916:	bfcc      	ite	gt
 8019918:	2400      	movgt	r4, #0
 801991a:	2401      	movle	r4, #1
 801991c:	2a03      	cmp	r2, #3
 801991e:	d848      	bhi.n	80199b2 <_dtoa_r+0x282>
 8019920:	e8df f002 	tbb	[pc, r2]
 8019924:	3a2c2e0b 	.word	0x3a2c2e0b
 8019928:	9b05      	ldr	r3, [sp, #20]
 801992a:	2200      	movs	r2, #0
 801992c:	eba3 0308 	sub.w	r3, r3, r8
 8019930:	9305      	str	r3, [sp, #20]
 8019932:	920a      	str	r2, [sp, #40]	@ 0x28
 8019934:	f1c8 0300 	rsb	r3, r8, #0
 8019938:	e7e3      	b.n	8019902 <_dtoa_r+0x1d2>
 801993a:	2200      	movs	r2, #0
 801993c:	9208      	str	r2, [sp, #32]
 801993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019940:	2a00      	cmp	r2, #0
 8019942:	dc39      	bgt.n	80199b8 <_dtoa_r+0x288>
 8019944:	f04f 0b01 	mov.w	fp, #1
 8019948:	46da      	mov	sl, fp
 801994a:	465a      	mov	r2, fp
 801994c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019950:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019954:	2100      	movs	r1, #0
 8019956:	2004      	movs	r0, #4
 8019958:	f100 0614 	add.w	r6, r0, #20
 801995c:	4296      	cmp	r6, r2
 801995e:	d930      	bls.n	80199c2 <_dtoa_r+0x292>
 8019960:	6079      	str	r1, [r7, #4]
 8019962:	4648      	mov	r0, r9
 8019964:	9304      	str	r3, [sp, #16]
 8019966:	f000 fd39 	bl	801a3dc <_Balloc>
 801996a:	9b04      	ldr	r3, [sp, #16]
 801996c:	4607      	mov	r7, r0
 801996e:	2800      	cmp	r0, #0
 8019970:	d146      	bne.n	8019a00 <_dtoa_r+0x2d0>
 8019972:	4b22      	ldr	r3, [pc, #136]	@ (80199fc <_dtoa_r+0x2cc>)
 8019974:	4602      	mov	r2, r0
 8019976:	f240 11af 	movw	r1, #431	@ 0x1af
 801997a:	e6f2      	b.n	8019762 <_dtoa_r+0x32>
 801997c:	2201      	movs	r2, #1
 801997e:	e7dd      	b.n	801993c <_dtoa_r+0x20c>
 8019980:	2200      	movs	r2, #0
 8019982:	9208      	str	r2, [sp, #32]
 8019984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019986:	eb08 0b02 	add.w	fp, r8, r2
 801998a:	f10b 0a01 	add.w	sl, fp, #1
 801998e:	4652      	mov	r2, sl
 8019990:	2a01      	cmp	r2, #1
 8019992:	bfb8      	it	lt
 8019994:	2201      	movlt	r2, #1
 8019996:	e7db      	b.n	8019950 <_dtoa_r+0x220>
 8019998:	2201      	movs	r2, #1
 801999a:	e7f2      	b.n	8019982 <_dtoa_r+0x252>
 801999c:	2401      	movs	r4, #1
 801999e:	2200      	movs	r2, #0
 80199a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80199a4:	f04f 3bff 	mov.w	fp, #4294967295
 80199a8:	2100      	movs	r1, #0
 80199aa:	46da      	mov	sl, fp
 80199ac:	2212      	movs	r2, #18
 80199ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80199b0:	e7ce      	b.n	8019950 <_dtoa_r+0x220>
 80199b2:	2201      	movs	r2, #1
 80199b4:	9208      	str	r2, [sp, #32]
 80199b6:	e7f5      	b.n	80199a4 <_dtoa_r+0x274>
 80199b8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80199bc:	46da      	mov	sl, fp
 80199be:	465a      	mov	r2, fp
 80199c0:	e7c6      	b.n	8019950 <_dtoa_r+0x220>
 80199c2:	3101      	adds	r1, #1
 80199c4:	0040      	lsls	r0, r0, #1
 80199c6:	e7c7      	b.n	8019958 <_dtoa_r+0x228>
 80199c8:	636f4361 	.word	0x636f4361
 80199cc:	3fd287a7 	.word	0x3fd287a7
 80199d0:	8b60c8b3 	.word	0x8b60c8b3
 80199d4:	3fc68a28 	.word	0x3fc68a28
 80199d8:	509f79fb 	.word	0x509f79fb
 80199dc:	3fd34413 	.word	0x3fd34413
 80199e0:	0801ec5a 	.word	0x0801ec5a
 80199e4:	0801ee47 	.word	0x0801ee47
 80199e8:	7ff00000 	.word	0x7ff00000
 80199ec:	0801ee43 	.word	0x0801ee43
 80199f0:	0801eddb 	.word	0x0801eddb
 80199f4:	0801edda 	.word	0x0801edda
 80199f8:	0801ef40 	.word	0x0801ef40
 80199fc:	0801ee9f 	.word	0x0801ee9f
 8019a00:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019a04:	f1ba 0f0e 	cmp.w	sl, #14
 8019a08:	6010      	str	r0, [r2, #0]
 8019a0a:	d86f      	bhi.n	8019aec <_dtoa_r+0x3bc>
 8019a0c:	2c00      	cmp	r4, #0
 8019a0e:	d06d      	beq.n	8019aec <_dtoa_r+0x3bc>
 8019a10:	f1b8 0f00 	cmp.w	r8, #0
 8019a14:	f340 80c2 	ble.w	8019b9c <_dtoa_r+0x46c>
 8019a18:	4aca      	ldr	r2, [pc, #808]	@ (8019d44 <_dtoa_r+0x614>)
 8019a1a:	f008 010f 	and.w	r1, r8, #15
 8019a1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019a22:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019a26:	ed92 7b00 	vldr	d7, [r2]
 8019a2a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8019a2e:	f000 80a9 	beq.w	8019b84 <_dtoa_r+0x454>
 8019a32:	4ac5      	ldr	r2, [pc, #788]	@ (8019d48 <_dtoa_r+0x618>)
 8019a34:	ed92 6b08 	vldr	d6, [r2, #32]
 8019a38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019a3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019a40:	f001 010f 	and.w	r1, r1, #15
 8019a44:	2203      	movs	r2, #3
 8019a46:	48c0      	ldr	r0, [pc, #768]	@ (8019d48 <_dtoa_r+0x618>)
 8019a48:	2900      	cmp	r1, #0
 8019a4a:	f040 809d 	bne.w	8019b88 <_dtoa_r+0x458>
 8019a4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019a52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019a56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019a5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019a5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a60:	2900      	cmp	r1, #0
 8019a62:	f000 80c1 	beq.w	8019be8 <_dtoa_r+0x4b8>
 8019a66:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8019a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a72:	f140 80b9 	bpl.w	8019be8 <_dtoa_r+0x4b8>
 8019a76:	f1ba 0f00 	cmp.w	sl, #0
 8019a7a:	f000 80b5 	beq.w	8019be8 <_dtoa_r+0x4b8>
 8019a7e:	f1bb 0f00 	cmp.w	fp, #0
 8019a82:	dd31      	ble.n	8019ae8 <_dtoa_r+0x3b8>
 8019a84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019a8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019a90:	f108 31ff 	add.w	r1, r8, #4294967295
 8019a94:	9104      	str	r1, [sp, #16]
 8019a96:	3201      	adds	r2, #1
 8019a98:	465c      	mov	r4, fp
 8019a9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019a9e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019aa2:	ee07 2a90 	vmov	s15, r2
 8019aa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019aaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019aae:	ee15 2a90 	vmov	r2, s11
 8019ab2:	ec51 0b15 	vmov	r0, r1, d5
 8019ab6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8019aba:	2c00      	cmp	r4, #0
 8019abc:	f040 8098 	bne.w	8019bf0 <_dtoa_r+0x4c0>
 8019ac0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019ac4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019ac8:	ec41 0b17 	vmov	d7, r0, r1
 8019acc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ad4:	f300 8261 	bgt.w	8019f9a <_dtoa_r+0x86a>
 8019ad8:	eeb1 7b47 	vneg.f64	d7, d7
 8019adc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ae4:	f100 80f5 	bmi.w	8019cd2 <_dtoa_r+0x5a2>
 8019ae8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019aec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019aee:	2a00      	cmp	r2, #0
 8019af0:	f2c0 812c 	blt.w	8019d4c <_dtoa_r+0x61c>
 8019af4:	f1b8 0f0e 	cmp.w	r8, #14
 8019af8:	f300 8128 	bgt.w	8019d4c <_dtoa_r+0x61c>
 8019afc:	4b91      	ldr	r3, [pc, #580]	@ (8019d44 <_dtoa_r+0x614>)
 8019afe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019b02:	ed93 6b00 	vldr	d6, [r3]
 8019b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	da03      	bge.n	8019b14 <_dtoa_r+0x3e4>
 8019b0c:	f1ba 0f00 	cmp.w	sl, #0
 8019b10:	f340 80d2 	ble.w	8019cb8 <_dtoa_r+0x588>
 8019b14:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019b1c:	463e      	mov	r6, r7
 8019b1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019b22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019b26:	ee15 3a10 	vmov	r3, s10
 8019b2a:	3330      	adds	r3, #48	@ 0x30
 8019b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8019b30:	1bf3      	subs	r3, r6, r7
 8019b32:	459a      	cmp	sl, r3
 8019b34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019b38:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019b3c:	f040 80f8 	bne.w	8019d30 <_dtoa_r+0x600>
 8019b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019b44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b4c:	f300 80dd 	bgt.w	8019d0a <_dtoa_r+0x5da>
 8019b50:	eeb4 7b46 	vcmp.f64	d7, d6
 8019b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b58:	d104      	bne.n	8019b64 <_dtoa_r+0x434>
 8019b5a:	ee15 3a10 	vmov	r3, s10
 8019b5e:	07db      	lsls	r3, r3, #31
 8019b60:	f100 80d3 	bmi.w	8019d0a <_dtoa_r+0x5da>
 8019b64:	9901      	ldr	r1, [sp, #4]
 8019b66:	4648      	mov	r0, r9
 8019b68:	f000 fc78 	bl	801a45c <_Bfree>
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019b70:	7033      	strb	r3, [r6, #0]
 8019b72:	f108 0301 	add.w	r3, r8, #1
 8019b76:	6013      	str	r3, [r2, #0]
 8019b78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	f000 8304 	beq.w	801a188 <_dtoa_r+0xa58>
 8019b80:	601e      	str	r6, [r3, #0]
 8019b82:	e301      	b.n	801a188 <_dtoa_r+0xa58>
 8019b84:	2202      	movs	r2, #2
 8019b86:	e75e      	b.n	8019a46 <_dtoa_r+0x316>
 8019b88:	07cc      	lsls	r4, r1, #31
 8019b8a:	d504      	bpl.n	8019b96 <_dtoa_r+0x466>
 8019b8c:	ed90 6b00 	vldr	d6, [r0]
 8019b90:	3201      	adds	r2, #1
 8019b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b96:	1049      	asrs	r1, r1, #1
 8019b98:	3008      	adds	r0, #8
 8019b9a:	e755      	b.n	8019a48 <_dtoa_r+0x318>
 8019b9c:	d022      	beq.n	8019be4 <_dtoa_r+0x4b4>
 8019b9e:	f1c8 0100 	rsb	r1, r8, #0
 8019ba2:	4a68      	ldr	r2, [pc, #416]	@ (8019d44 <_dtoa_r+0x614>)
 8019ba4:	f001 000f 	and.w	r0, r1, #15
 8019ba8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019bac:	ed92 7b00 	vldr	d7, [r2]
 8019bb0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019bb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019bb8:	4863      	ldr	r0, [pc, #396]	@ (8019d48 <_dtoa_r+0x618>)
 8019bba:	1109      	asrs	r1, r1, #4
 8019bbc:	2400      	movs	r4, #0
 8019bbe:	2202      	movs	r2, #2
 8019bc0:	b929      	cbnz	r1, 8019bce <_dtoa_r+0x49e>
 8019bc2:	2c00      	cmp	r4, #0
 8019bc4:	f43f af49 	beq.w	8019a5a <_dtoa_r+0x32a>
 8019bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019bcc:	e745      	b.n	8019a5a <_dtoa_r+0x32a>
 8019bce:	07ce      	lsls	r6, r1, #31
 8019bd0:	d505      	bpl.n	8019bde <_dtoa_r+0x4ae>
 8019bd2:	ed90 6b00 	vldr	d6, [r0]
 8019bd6:	3201      	adds	r2, #1
 8019bd8:	2401      	movs	r4, #1
 8019bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019bde:	1049      	asrs	r1, r1, #1
 8019be0:	3008      	adds	r0, #8
 8019be2:	e7ed      	b.n	8019bc0 <_dtoa_r+0x490>
 8019be4:	2202      	movs	r2, #2
 8019be6:	e738      	b.n	8019a5a <_dtoa_r+0x32a>
 8019be8:	f8cd 8010 	str.w	r8, [sp, #16]
 8019bec:	4654      	mov	r4, sl
 8019bee:	e754      	b.n	8019a9a <_dtoa_r+0x36a>
 8019bf0:	4a54      	ldr	r2, [pc, #336]	@ (8019d44 <_dtoa_r+0x614>)
 8019bf2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8019bf6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8019bfa:	9a08      	ldr	r2, [sp, #32]
 8019bfc:	ec41 0b17 	vmov	d7, r0, r1
 8019c00:	443c      	add	r4, r7
 8019c02:	b34a      	cbz	r2, 8019c58 <_dtoa_r+0x528>
 8019c04:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8019c08:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019c0c:	463e      	mov	r6, r7
 8019c0e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019c12:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019c16:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019c1a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019c1e:	ee14 2a90 	vmov	r2, s9
 8019c22:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019c26:	3230      	adds	r2, #48	@ 0x30
 8019c28:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019c2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c34:	f806 2b01 	strb.w	r2, [r6], #1
 8019c38:	d438      	bmi.n	8019cac <_dtoa_r+0x57c>
 8019c3a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019c3e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c46:	d462      	bmi.n	8019d0e <_dtoa_r+0x5de>
 8019c48:	42a6      	cmp	r6, r4
 8019c4a:	f43f af4d 	beq.w	8019ae8 <_dtoa_r+0x3b8>
 8019c4e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019c52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019c56:	e7e0      	b.n	8019c1a <_dtoa_r+0x4ea>
 8019c58:	4621      	mov	r1, r4
 8019c5a:	463e      	mov	r6, r7
 8019c5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019c60:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019c64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019c68:	ee14 2a90 	vmov	r2, s9
 8019c6c:	3230      	adds	r2, #48	@ 0x30
 8019c6e:	f806 2b01 	strb.w	r2, [r6], #1
 8019c72:	42a6      	cmp	r6, r4
 8019c74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019c78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019c7c:	d119      	bne.n	8019cb2 <_dtoa_r+0x582>
 8019c7e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019c82:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019c86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8e:	dc3e      	bgt.n	8019d0e <_dtoa_r+0x5de>
 8019c90:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019c94:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c9c:	f57f af24 	bpl.w	8019ae8 <_dtoa_r+0x3b8>
 8019ca0:	460e      	mov	r6, r1
 8019ca2:	3901      	subs	r1, #1
 8019ca4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019ca8:	2b30      	cmp	r3, #48	@ 0x30
 8019caa:	d0f9      	beq.n	8019ca0 <_dtoa_r+0x570>
 8019cac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019cb0:	e758      	b.n	8019b64 <_dtoa_r+0x434>
 8019cb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019cb6:	e7d5      	b.n	8019c64 <_dtoa_r+0x534>
 8019cb8:	d10b      	bne.n	8019cd2 <_dtoa_r+0x5a2>
 8019cba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019cbe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019cc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019cc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cce:	f2c0 8161 	blt.w	8019f94 <_dtoa_r+0x864>
 8019cd2:	2400      	movs	r4, #0
 8019cd4:	4625      	mov	r5, r4
 8019cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cd8:	43db      	mvns	r3, r3
 8019cda:	9304      	str	r3, [sp, #16]
 8019cdc:	463e      	mov	r6, r7
 8019cde:	f04f 0800 	mov.w	r8, #0
 8019ce2:	4621      	mov	r1, r4
 8019ce4:	4648      	mov	r0, r9
 8019ce6:	f000 fbb9 	bl	801a45c <_Bfree>
 8019cea:	2d00      	cmp	r5, #0
 8019cec:	d0de      	beq.n	8019cac <_dtoa_r+0x57c>
 8019cee:	f1b8 0f00 	cmp.w	r8, #0
 8019cf2:	d005      	beq.n	8019d00 <_dtoa_r+0x5d0>
 8019cf4:	45a8      	cmp	r8, r5
 8019cf6:	d003      	beq.n	8019d00 <_dtoa_r+0x5d0>
 8019cf8:	4641      	mov	r1, r8
 8019cfa:	4648      	mov	r0, r9
 8019cfc:	f000 fbae 	bl	801a45c <_Bfree>
 8019d00:	4629      	mov	r1, r5
 8019d02:	4648      	mov	r0, r9
 8019d04:	f000 fbaa 	bl	801a45c <_Bfree>
 8019d08:	e7d0      	b.n	8019cac <_dtoa_r+0x57c>
 8019d0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8019d0e:	4633      	mov	r3, r6
 8019d10:	461e      	mov	r6, r3
 8019d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019d16:	2a39      	cmp	r2, #57	@ 0x39
 8019d18:	d106      	bne.n	8019d28 <_dtoa_r+0x5f8>
 8019d1a:	429f      	cmp	r7, r3
 8019d1c:	d1f8      	bne.n	8019d10 <_dtoa_r+0x5e0>
 8019d1e:	9a04      	ldr	r2, [sp, #16]
 8019d20:	3201      	adds	r2, #1
 8019d22:	9204      	str	r2, [sp, #16]
 8019d24:	2230      	movs	r2, #48	@ 0x30
 8019d26:	703a      	strb	r2, [r7, #0]
 8019d28:	781a      	ldrb	r2, [r3, #0]
 8019d2a:	3201      	adds	r2, #1
 8019d2c:	701a      	strb	r2, [r3, #0]
 8019d2e:	e7bd      	b.n	8019cac <_dtoa_r+0x57c>
 8019d30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019d34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d3c:	f47f aeef 	bne.w	8019b1e <_dtoa_r+0x3ee>
 8019d40:	e710      	b.n	8019b64 <_dtoa_r+0x434>
 8019d42:	bf00      	nop
 8019d44:	0801ef40 	.word	0x0801ef40
 8019d48:	0801ef18 	.word	0x0801ef18
 8019d4c:	9908      	ldr	r1, [sp, #32]
 8019d4e:	2900      	cmp	r1, #0
 8019d50:	f000 80e3 	beq.w	8019f1a <_dtoa_r+0x7ea>
 8019d54:	9907      	ldr	r1, [sp, #28]
 8019d56:	2901      	cmp	r1, #1
 8019d58:	f300 80c8 	bgt.w	8019eec <_dtoa_r+0x7bc>
 8019d5c:	2d00      	cmp	r5, #0
 8019d5e:	f000 80c1 	beq.w	8019ee4 <_dtoa_r+0x7b4>
 8019d62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019d66:	9e05      	ldr	r6, [sp, #20]
 8019d68:	461c      	mov	r4, r3
 8019d6a:	9304      	str	r3, [sp, #16]
 8019d6c:	9b05      	ldr	r3, [sp, #20]
 8019d6e:	4413      	add	r3, r2
 8019d70:	9305      	str	r3, [sp, #20]
 8019d72:	9b06      	ldr	r3, [sp, #24]
 8019d74:	2101      	movs	r1, #1
 8019d76:	4413      	add	r3, r2
 8019d78:	4648      	mov	r0, r9
 8019d7a:	9306      	str	r3, [sp, #24]
 8019d7c:	f000 fc22 	bl	801a5c4 <__i2b>
 8019d80:	9b04      	ldr	r3, [sp, #16]
 8019d82:	4605      	mov	r5, r0
 8019d84:	b166      	cbz	r6, 8019da0 <_dtoa_r+0x670>
 8019d86:	9a06      	ldr	r2, [sp, #24]
 8019d88:	2a00      	cmp	r2, #0
 8019d8a:	dd09      	ble.n	8019da0 <_dtoa_r+0x670>
 8019d8c:	42b2      	cmp	r2, r6
 8019d8e:	9905      	ldr	r1, [sp, #20]
 8019d90:	bfa8      	it	ge
 8019d92:	4632      	movge	r2, r6
 8019d94:	1a89      	subs	r1, r1, r2
 8019d96:	9105      	str	r1, [sp, #20]
 8019d98:	9906      	ldr	r1, [sp, #24]
 8019d9a:	1ab6      	subs	r6, r6, r2
 8019d9c:	1a8a      	subs	r2, r1, r2
 8019d9e:	9206      	str	r2, [sp, #24]
 8019da0:	b1fb      	cbz	r3, 8019de2 <_dtoa_r+0x6b2>
 8019da2:	9a08      	ldr	r2, [sp, #32]
 8019da4:	2a00      	cmp	r2, #0
 8019da6:	f000 80bc 	beq.w	8019f22 <_dtoa_r+0x7f2>
 8019daa:	b19c      	cbz	r4, 8019dd4 <_dtoa_r+0x6a4>
 8019dac:	4629      	mov	r1, r5
 8019dae:	4622      	mov	r2, r4
 8019db0:	4648      	mov	r0, r9
 8019db2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019db4:	f000 fcc6 	bl	801a744 <__pow5mult>
 8019db8:	9a01      	ldr	r2, [sp, #4]
 8019dba:	4601      	mov	r1, r0
 8019dbc:	4605      	mov	r5, r0
 8019dbe:	4648      	mov	r0, r9
 8019dc0:	f000 fc16 	bl	801a5f0 <__multiply>
 8019dc4:	9901      	ldr	r1, [sp, #4]
 8019dc6:	9004      	str	r0, [sp, #16]
 8019dc8:	4648      	mov	r0, r9
 8019dca:	f000 fb47 	bl	801a45c <_Bfree>
 8019dce:	9a04      	ldr	r2, [sp, #16]
 8019dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019dd2:	9201      	str	r2, [sp, #4]
 8019dd4:	1b1a      	subs	r2, r3, r4
 8019dd6:	d004      	beq.n	8019de2 <_dtoa_r+0x6b2>
 8019dd8:	9901      	ldr	r1, [sp, #4]
 8019dda:	4648      	mov	r0, r9
 8019ddc:	f000 fcb2 	bl	801a744 <__pow5mult>
 8019de0:	9001      	str	r0, [sp, #4]
 8019de2:	2101      	movs	r1, #1
 8019de4:	4648      	mov	r0, r9
 8019de6:	f000 fbed 	bl	801a5c4 <__i2b>
 8019dea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019dec:	4604      	mov	r4, r0
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	f000 81d0 	beq.w	801a194 <_dtoa_r+0xa64>
 8019df4:	461a      	mov	r2, r3
 8019df6:	4601      	mov	r1, r0
 8019df8:	4648      	mov	r0, r9
 8019dfa:	f000 fca3 	bl	801a744 <__pow5mult>
 8019dfe:	9b07      	ldr	r3, [sp, #28]
 8019e00:	2b01      	cmp	r3, #1
 8019e02:	4604      	mov	r4, r0
 8019e04:	f300 8095 	bgt.w	8019f32 <_dtoa_r+0x802>
 8019e08:	9b02      	ldr	r3, [sp, #8]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	f040 808b 	bne.w	8019f26 <_dtoa_r+0x7f6>
 8019e10:	9b03      	ldr	r3, [sp, #12]
 8019e12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019e16:	2a00      	cmp	r2, #0
 8019e18:	f040 8087 	bne.w	8019f2a <_dtoa_r+0x7fa>
 8019e1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019e20:	0d12      	lsrs	r2, r2, #20
 8019e22:	0512      	lsls	r2, r2, #20
 8019e24:	2a00      	cmp	r2, #0
 8019e26:	f000 8082 	beq.w	8019f2e <_dtoa_r+0x7fe>
 8019e2a:	9b05      	ldr	r3, [sp, #20]
 8019e2c:	3301      	adds	r3, #1
 8019e2e:	9305      	str	r3, [sp, #20]
 8019e30:	9b06      	ldr	r3, [sp, #24]
 8019e32:	3301      	adds	r3, #1
 8019e34:	9306      	str	r3, [sp, #24]
 8019e36:	2301      	movs	r3, #1
 8019e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	f000 81af 	beq.w	801a1a0 <_dtoa_r+0xa70>
 8019e42:	6922      	ldr	r2, [r4, #16]
 8019e44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019e48:	6910      	ldr	r0, [r2, #16]
 8019e4a:	f000 fb6f 	bl	801a52c <__hi0bits>
 8019e4e:	f1c0 0020 	rsb	r0, r0, #32
 8019e52:	9b06      	ldr	r3, [sp, #24]
 8019e54:	4418      	add	r0, r3
 8019e56:	f010 001f 	ands.w	r0, r0, #31
 8019e5a:	d076      	beq.n	8019f4a <_dtoa_r+0x81a>
 8019e5c:	f1c0 0220 	rsb	r2, r0, #32
 8019e60:	2a04      	cmp	r2, #4
 8019e62:	dd69      	ble.n	8019f38 <_dtoa_r+0x808>
 8019e64:	9b05      	ldr	r3, [sp, #20]
 8019e66:	f1c0 001c 	rsb	r0, r0, #28
 8019e6a:	4403      	add	r3, r0
 8019e6c:	9305      	str	r3, [sp, #20]
 8019e6e:	9b06      	ldr	r3, [sp, #24]
 8019e70:	4406      	add	r6, r0
 8019e72:	4403      	add	r3, r0
 8019e74:	9306      	str	r3, [sp, #24]
 8019e76:	9b05      	ldr	r3, [sp, #20]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	dd05      	ble.n	8019e88 <_dtoa_r+0x758>
 8019e7c:	9901      	ldr	r1, [sp, #4]
 8019e7e:	461a      	mov	r2, r3
 8019e80:	4648      	mov	r0, r9
 8019e82:	f000 fcb9 	bl	801a7f8 <__lshift>
 8019e86:	9001      	str	r0, [sp, #4]
 8019e88:	9b06      	ldr	r3, [sp, #24]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	dd05      	ble.n	8019e9a <_dtoa_r+0x76a>
 8019e8e:	4621      	mov	r1, r4
 8019e90:	461a      	mov	r2, r3
 8019e92:	4648      	mov	r0, r9
 8019e94:	f000 fcb0 	bl	801a7f8 <__lshift>
 8019e98:	4604      	mov	r4, r0
 8019e9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d056      	beq.n	8019f4e <_dtoa_r+0x81e>
 8019ea0:	9801      	ldr	r0, [sp, #4]
 8019ea2:	4621      	mov	r1, r4
 8019ea4:	f000 fd14 	bl	801a8d0 <__mcmp>
 8019ea8:	2800      	cmp	r0, #0
 8019eaa:	da50      	bge.n	8019f4e <_dtoa_r+0x81e>
 8019eac:	f108 33ff 	add.w	r3, r8, #4294967295
 8019eb0:	9304      	str	r3, [sp, #16]
 8019eb2:	9901      	ldr	r1, [sp, #4]
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	220a      	movs	r2, #10
 8019eb8:	4648      	mov	r0, r9
 8019eba:	f000 faf1 	bl	801a4a0 <__multadd>
 8019ebe:	9b08      	ldr	r3, [sp, #32]
 8019ec0:	9001      	str	r0, [sp, #4]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	f000 816e 	beq.w	801a1a4 <_dtoa_r+0xa74>
 8019ec8:	4629      	mov	r1, r5
 8019eca:	2300      	movs	r3, #0
 8019ecc:	220a      	movs	r2, #10
 8019ece:	4648      	mov	r0, r9
 8019ed0:	f000 fae6 	bl	801a4a0 <__multadd>
 8019ed4:	f1bb 0f00 	cmp.w	fp, #0
 8019ed8:	4605      	mov	r5, r0
 8019eda:	dc64      	bgt.n	8019fa6 <_dtoa_r+0x876>
 8019edc:	9b07      	ldr	r3, [sp, #28]
 8019ede:	2b02      	cmp	r3, #2
 8019ee0:	dc3e      	bgt.n	8019f60 <_dtoa_r+0x830>
 8019ee2:	e060      	b.n	8019fa6 <_dtoa_r+0x876>
 8019ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ee6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019eea:	e73c      	b.n	8019d66 <_dtoa_r+0x636>
 8019eec:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019ef0:	42a3      	cmp	r3, r4
 8019ef2:	bfbf      	itttt	lt
 8019ef4:	1ae2      	sublt	r2, r4, r3
 8019ef6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019ef8:	189b      	addlt	r3, r3, r2
 8019efa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8019efc:	bfae      	itee	ge
 8019efe:	1b1c      	subge	r4, r3, r4
 8019f00:	4623      	movlt	r3, r4
 8019f02:	2400      	movlt	r4, #0
 8019f04:	f1ba 0f00 	cmp.w	sl, #0
 8019f08:	bfb5      	itete	lt
 8019f0a:	9a05      	ldrlt	r2, [sp, #20]
 8019f0c:	9e05      	ldrge	r6, [sp, #20]
 8019f0e:	eba2 060a 	sublt.w	r6, r2, sl
 8019f12:	4652      	movge	r2, sl
 8019f14:	bfb8      	it	lt
 8019f16:	2200      	movlt	r2, #0
 8019f18:	e727      	b.n	8019d6a <_dtoa_r+0x63a>
 8019f1a:	9e05      	ldr	r6, [sp, #20]
 8019f1c:	9d08      	ldr	r5, [sp, #32]
 8019f1e:	461c      	mov	r4, r3
 8019f20:	e730      	b.n	8019d84 <_dtoa_r+0x654>
 8019f22:	461a      	mov	r2, r3
 8019f24:	e758      	b.n	8019dd8 <_dtoa_r+0x6a8>
 8019f26:	2300      	movs	r3, #0
 8019f28:	e786      	b.n	8019e38 <_dtoa_r+0x708>
 8019f2a:	9b02      	ldr	r3, [sp, #8]
 8019f2c:	e784      	b.n	8019e38 <_dtoa_r+0x708>
 8019f2e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019f30:	e783      	b.n	8019e3a <_dtoa_r+0x70a>
 8019f32:	2300      	movs	r3, #0
 8019f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f36:	e784      	b.n	8019e42 <_dtoa_r+0x712>
 8019f38:	d09d      	beq.n	8019e76 <_dtoa_r+0x746>
 8019f3a:	9b05      	ldr	r3, [sp, #20]
 8019f3c:	321c      	adds	r2, #28
 8019f3e:	4413      	add	r3, r2
 8019f40:	9305      	str	r3, [sp, #20]
 8019f42:	9b06      	ldr	r3, [sp, #24]
 8019f44:	4416      	add	r6, r2
 8019f46:	4413      	add	r3, r2
 8019f48:	e794      	b.n	8019e74 <_dtoa_r+0x744>
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	e7f5      	b.n	8019f3a <_dtoa_r+0x80a>
 8019f4e:	f1ba 0f00 	cmp.w	sl, #0
 8019f52:	f8cd 8010 	str.w	r8, [sp, #16]
 8019f56:	46d3      	mov	fp, sl
 8019f58:	dc21      	bgt.n	8019f9e <_dtoa_r+0x86e>
 8019f5a:	9b07      	ldr	r3, [sp, #28]
 8019f5c:	2b02      	cmp	r3, #2
 8019f5e:	dd1e      	ble.n	8019f9e <_dtoa_r+0x86e>
 8019f60:	f1bb 0f00 	cmp.w	fp, #0
 8019f64:	f47f aeb7 	bne.w	8019cd6 <_dtoa_r+0x5a6>
 8019f68:	4621      	mov	r1, r4
 8019f6a:	465b      	mov	r3, fp
 8019f6c:	2205      	movs	r2, #5
 8019f6e:	4648      	mov	r0, r9
 8019f70:	f000 fa96 	bl	801a4a0 <__multadd>
 8019f74:	4601      	mov	r1, r0
 8019f76:	4604      	mov	r4, r0
 8019f78:	9801      	ldr	r0, [sp, #4]
 8019f7a:	f000 fca9 	bl	801a8d0 <__mcmp>
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	f77f aea9 	ble.w	8019cd6 <_dtoa_r+0x5a6>
 8019f84:	463e      	mov	r6, r7
 8019f86:	2331      	movs	r3, #49	@ 0x31
 8019f88:	f806 3b01 	strb.w	r3, [r6], #1
 8019f8c:	9b04      	ldr	r3, [sp, #16]
 8019f8e:	3301      	adds	r3, #1
 8019f90:	9304      	str	r3, [sp, #16]
 8019f92:	e6a4      	b.n	8019cde <_dtoa_r+0x5ae>
 8019f94:	f8cd 8010 	str.w	r8, [sp, #16]
 8019f98:	4654      	mov	r4, sl
 8019f9a:	4625      	mov	r5, r4
 8019f9c:	e7f2      	b.n	8019f84 <_dtoa_r+0x854>
 8019f9e:	9b08      	ldr	r3, [sp, #32]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	f000 8103 	beq.w	801a1ac <_dtoa_r+0xa7c>
 8019fa6:	2e00      	cmp	r6, #0
 8019fa8:	dd05      	ble.n	8019fb6 <_dtoa_r+0x886>
 8019faa:	4629      	mov	r1, r5
 8019fac:	4632      	mov	r2, r6
 8019fae:	4648      	mov	r0, r9
 8019fb0:	f000 fc22 	bl	801a7f8 <__lshift>
 8019fb4:	4605      	mov	r5, r0
 8019fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d058      	beq.n	801a06e <_dtoa_r+0x93e>
 8019fbc:	6869      	ldr	r1, [r5, #4]
 8019fbe:	4648      	mov	r0, r9
 8019fc0:	f000 fa0c 	bl	801a3dc <_Balloc>
 8019fc4:	4606      	mov	r6, r0
 8019fc6:	b928      	cbnz	r0, 8019fd4 <_dtoa_r+0x8a4>
 8019fc8:	4b82      	ldr	r3, [pc, #520]	@ (801a1d4 <_dtoa_r+0xaa4>)
 8019fca:	4602      	mov	r2, r0
 8019fcc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019fd0:	f7ff bbc7 	b.w	8019762 <_dtoa_r+0x32>
 8019fd4:	692a      	ldr	r2, [r5, #16]
 8019fd6:	3202      	adds	r2, #2
 8019fd8:	0092      	lsls	r2, r2, #2
 8019fda:	f105 010c 	add.w	r1, r5, #12
 8019fde:	300c      	adds	r0, #12
 8019fe0:	f7ff faef 	bl	80195c2 <memcpy>
 8019fe4:	2201      	movs	r2, #1
 8019fe6:	4631      	mov	r1, r6
 8019fe8:	4648      	mov	r0, r9
 8019fea:	f000 fc05 	bl	801a7f8 <__lshift>
 8019fee:	1c7b      	adds	r3, r7, #1
 8019ff0:	9305      	str	r3, [sp, #20]
 8019ff2:	eb07 030b 	add.w	r3, r7, fp
 8019ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ff8:	9b02      	ldr	r3, [sp, #8]
 8019ffa:	f003 0301 	and.w	r3, r3, #1
 8019ffe:	46a8      	mov	r8, r5
 801a000:	9308      	str	r3, [sp, #32]
 801a002:	4605      	mov	r5, r0
 801a004:	9b05      	ldr	r3, [sp, #20]
 801a006:	9801      	ldr	r0, [sp, #4]
 801a008:	4621      	mov	r1, r4
 801a00a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a00e:	f7ff fb05 	bl	801961c <quorem>
 801a012:	4641      	mov	r1, r8
 801a014:	9002      	str	r0, [sp, #8]
 801a016:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a01a:	9801      	ldr	r0, [sp, #4]
 801a01c:	f000 fc58 	bl	801a8d0 <__mcmp>
 801a020:	462a      	mov	r2, r5
 801a022:	9006      	str	r0, [sp, #24]
 801a024:	4621      	mov	r1, r4
 801a026:	4648      	mov	r0, r9
 801a028:	f000 fc6e 	bl	801a908 <__mdiff>
 801a02c:	68c2      	ldr	r2, [r0, #12]
 801a02e:	4606      	mov	r6, r0
 801a030:	b9fa      	cbnz	r2, 801a072 <_dtoa_r+0x942>
 801a032:	4601      	mov	r1, r0
 801a034:	9801      	ldr	r0, [sp, #4]
 801a036:	f000 fc4b 	bl	801a8d0 <__mcmp>
 801a03a:	4602      	mov	r2, r0
 801a03c:	4631      	mov	r1, r6
 801a03e:	4648      	mov	r0, r9
 801a040:	920a      	str	r2, [sp, #40]	@ 0x28
 801a042:	f000 fa0b 	bl	801a45c <_Bfree>
 801a046:	9b07      	ldr	r3, [sp, #28]
 801a048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a04a:	9e05      	ldr	r6, [sp, #20]
 801a04c:	ea43 0102 	orr.w	r1, r3, r2
 801a050:	9b08      	ldr	r3, [sp, #32]
 801a052:	4319      	orrs	r1, r3
 801a054:	d10f      	bne.n	801a076 <_dtoa_r+0x946>
 801a056:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a05a:	d028      	beq.n	801a0ae <_dtoa_r+0x97e>
 801a05c:	9b06      	ldr	r3, [sp, #24]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	dd02      	ble.n	801a068 <_dtoa_r+0x938>
 801a062:	9b02      	ldr	r3, [sp, #8]
 801a064:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a068:	f88b a000 	strb.w	sl, [fp]
 801a06c:	e639      	b.n	8019ce2 <_dtoa_r+0x5b2>
 801a06e:	4628      	mov	r0, r5
 801a070:	e7bd      	b.n	8019fee <_dtoa_r+0x8be>
 801a072:	2201      	movs	r2, #1
 801a074:	e7e2      	b.n	801a03c <_dtoa_r+0x90c>
 801a076:	9b06      	ldr	r3, [sp, #24]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	db04      	blt.n	801a086 <_dtoa_r+0x956>
 801a07c:	9907      	ldr	r1, [sp, #28]
 801a07e:	430b      	orrs	r3, r1
 801a080:	9908      	ldr	r1, [sp, #32]
 801a082:	430b      	orrs	r3, r1
 801a084:	d120      	bne.n	801a0c8 <_dtoa_r+0x998>
 801a086:	2a00      	cmp	r2, #0
 801a088:	ddee      	ble.n	801a068 <_dtoa_r+0x938>
 801a08a:	9901      	ldr	r1, [sp, #4]
 801a08c:	2201      	movs	r2, #1
 801a08e:	4648      	mov	r0, r9
 801a090:	f000 fbb2 	bl	801a7f8 <__lshift>
 801a094:	4621      	mov	r1, r4
 801a096:	9001      	str	r0, [sp, #4]
 801a098:	f000 fc1a 	bl	801a8d0 <__mcmp>
 801a09c:	2800      	cmp	r0, #0
 801a09e:	dc03      	bgt.n	801a0a8 <_dtoa_r+0x978>
 801a0a0:	d1e2      	bne.n	801a068 <_dtoa_r+0x938>
 801a0a2:	f01a 0f01 	tst.w	sl, #1
 801a0a6:	d0df      	beq.n	801a068 <_dtoa_r+0x938>
 801a0a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a0ac:	d1d9      	bne.n	801a062 <_dtoa_r+0x932>
 801a0ae:	2339      	movs	r3, #57	@ 0x39
 801a0b0:	f88b 3000 	strb.w	r3, [fp]
 801a0b4:	4633      	mov	r3, r6
 801a0b6:	461e      	mov	r6, r3
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a0be:	2a39      	cmp	r2, #57	@ 0x39
 801a0c0:	d053      	beq.n	801a16a <_dtoa_r+0xa3a>
 801a0c2:	3201      	adds	r2, #1
 801a0c4:	701a      	strb	r2, [r3, #0]
 801a0c6:	e60c      	b.n	8019ce2 <_dtoa_r+0x5b2>
 801a0c8:	2a00      	cmp	r2, #0
 801a0ca:	dd07      	ble.n	801a0dc <_dtoa_r+0x9ac>
 801a0cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a0d0:	d0ed      	beq.n	801a0ae <_dtoa_r+0x97e>
 801a0d2:	f10a 0301 	add.w	r3, sl, #1
 801a0d6:	f88b 3000 	strb.w	r3, [fp]
 801a0da:	e602      	b.n	8019ce2 <_dtoa_r+0x5b2>
 801a0dc:	9b05      	ldr	r3, [sp, #20]
 801a0de:	9a05      	ldr	r2, [sp, #20]
 801a0e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0e6:	4293      	cmp	r3, r2
 801a0e8:	d029      	beq.n	801a13e <_dtoa_r+0xa0e>
 801a0ea:	9901      	ldr	r1, [sp, #4]
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	220a      	movs	r2, #10
 801a0f0:	4648      	mov	r0, r9
 801a0f2:	f000 f9d5 	bl	801a4a0 <__multadd>
 801a0f6:	45a8      	cmp	r8, r5
 801a0f8:	9001      	str	r0, [sp, #4]
 801a0fa:	f04f 0300 	mov.w	r3, #0
 801a0fe:	f04f 020a 	mov.w	r2, #10
 801a102:	4641      	mov	r1, r8
 801a104:	4648      	mov	r0, r9
 801a106:	d107      	bne.n	801a118 <_dtoa_r+0x9e8>
 801a108:	f000 f9ca 	bl	801a4a0 <__multadd>
 801a10c:	4680      	mov	r8, r0
 801a10e:	4605      	mov	r5, r0
 801a110:	9b05      	ldr	r3, [sp, #20]
 801a112:	3301      	adds	r3, #1
 801a114:	9305      	str	r3, [sp, #20]
 801a116:	e775      	b.n	801a004 <_dtoa_r+0x8d4>
 801a118:	f000 f9c2 	bl	801a4a0 <__multadd>
 801a11c:	4629      	mov	r1, r5
 801a11e:	4680      	mov	r8, r0
 801a120:	2300      	movs	r3, #0
 801a122:	220a      	movs	r2, #10
 801a124:	4648      	mov	r0, r9
 801a126:	f000 f9bb 	bl	801a4a0 <__multadd>
 801a12a:	4605      	mov	r5, r0
 801a12c:	e7f0      	b.n	801a110 <_dtoa_r+0x9e0>
 801a12e:	f1bb 0f00 	cmp.w	fp, #0
 801a132:	bfcc      	ite	gt
 801a134:	465e      	movgt	r6, fp
 801a136:	2601      	movle	r6, #1
 801a138:	443e      	add	r6, r7
 801a13a:	f04f 0800 	mov.w	r8, #0
 801a13e:	9901      	ldr	r1, [sp, #4]
 801a140:	2201      	movs	r2, #1
 801a142:	4648      	mov	r0, r9
 801a144:	f000 fb58 	bl	801a7f8 <__lshift>
 801a148:	4621      	mov	r1, r4
 801a14a:	9001      	str	r0, [sp, #4]
 801a14c:	f000 fbc0 	bl	801a8d0 <__mcmp>
 801a150:	2800      	cmp	r0, #0
 801a152:	dcaf      	bgt.n	801a0b4 <_dtoa_r+0x984>
 801a154:	d102      	bne.n	801a15c <_dtoa_r+0xa2c>
 801a156:	f01a 0f01 	tst.w	sl, #1
 801a15a:	d1ab      	bne.n	801a0b4 <_dtoa_r+0x984>
 801a15c:	4633      	mov	r3, r6
 801a15e:	461e      	mov	r6, r3
 801a160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a164:	2a30      	cmp	r2, #48	@ 0x30
 801a166:	d0fa      	beq.n	801a15e <_dtoa_r+0xa2e>
 801a168:	e5bb      	b.n	8019ce2 <_dtoa_r+0x5b2>
 801a16a:	429f      	cmp	r7, r3
 801a16c:	d1a3      	bne.n	801a0b6 <_dtoa_r+0x986>
 801a16e:	9b04      	ldr	r3, [sp, #16]
 801a170:	3301      	adds	r3, #1
 801a172:	9304      	str	r3, [sp, #16]
 801a174:	2331      	movs	r3, #49	@ 0x31
 801a176:	703b      	strb	r3, [r7, #0]
 801a178:	e5b3      	b.n	8019ce2 <_dtoa_r+0x5b2>
 801a17a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a17c:	4f16      	ldr	r7, [pc, #88]	@ (801a1d8 <_dtoa_r+0xaa8>)
 801a17e:	b11b      	cbz	r3, 801a188 <_dtoa_r+0xa58>
 801a180:	f107 0308 	add.w	r3, r7, #8
 801a184:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a186:	6013      	str	r3, [r2, #0]
 801a188:	4638      	mov	r0, r7
 801a18a:	b011      	add	sp, #68	@ 0x44
 801a18c:	ecbd 8b02 	vpop	{d8}
 801a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a194:	9b07      	ldr	r3, [sp, #28]
 801a196:	2b01      	cmp	r3, #1
 801a198:	f77f ae36 	ble.w	8019e08 <_dtoa_r+0x6d8>
 801a19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a19e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	e656      	b.n	8019e52 <_dtoa_r+0x722>
 801a1a4:	f1bb 0f00 	cmp.w	fp, #0
 801a1a8:	f77f aed7 	ble.w	8019f5a <_dtoa_r+0x82a>
 801a1ac:	463e      	mov	r6, r7
 801a1ae:	9801      	ldr	r0, [sp, #4]
 801a1b0:	4621      	mov	r1, r4
 801a1b2:	f7ff fa33 	bl	801961c <quorem>
 801a1b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a1ba:	f806 ab01 	strb.w	sl, [r6], #1
 801a1be:	1bf2      	subs	r2, r6, r7
 801a1c0:	4593      	cmp	fp, r2
 801a1c2:	ddb4      	ble.n	801a12e <_dtoa_r+0x9fe>
 801a1c4:	9901      	ldr	r1, [sp, #4]
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	220a      	movs	r2, #10
 801a1ca:	4648      	mov	r0, r9
 801a1cc:	f000 f968 	bl	801a4a0 <__multadd>
 801a1d0:	9001      	str	r0, [sp, #4]
 801a1d2:	e7ec      	b.n	801a1ae <_dtoa_r+0xa7e>
 801a1d4:	0801ee9f 	.word	0x0801ee9f
 801a1d8:	0801ee3a 	.word	0x0801ee3a

0801a1dc <_free_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	4605      	mov	r5, r0
 801a1e0:	2900      	cmp	r1, #0
 801a1e2:	d041      	beq.n	801a268 <_free_r+0x8c>
 801a1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1e8:	1f0c      	subs	r4, r1, #4
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	bfb8      	it	lt
 801a1ee:	18e4      	addlt	r4, r4, r3
 801a1f0:	f000 f8e8 	bl	801a3c4 <__malloc_lock>
 801a1f4:	4a1d      	ldr	r2, [pc, #116]	@ (801a26c <_free_r+0x90>)
 801a1f6:	6813      	ldr	r3, [r2, #0]
 801a1f8:	b933      	cbnz	r3, 801a208 <_free_r+0x2c>
 801a1fa:	6063      	str	r3, [r4, #4]
 801a1fc:	6014      	str	r4, [r2, #0]
 801a1fe:	4628      	mov	r0, r5
 801a200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a204:	f000 b8e4 	b.w	801a3d0 <__malloc_unlock>
 801a208:	42a3      	cmp	r3, r4
 801a20a:	d908      	bls.n	801a21e <_free_r+0x42>
 801a20c:	6820      	ldr	r0, [r4, #0]
 801a20e:	1821      	adds	r1, r4, r0
 801a210:	428b      	cmp	r3, r1
 801a212:	bf01      	itttt	eq
 801a214:	6819      	ldreq	r1, [r3, #0]
 801a216:	685b      	ldreq	r3, [r3, #4]
 801a218:	1809      	addeq	r1, r1, r0
 801a21a:	6021      	streq	r1, [r4, #0]
 801a21c:	e7ed      	b.n	801a1fa <_free_r+0x1e>
 801a21e:	461a      	mov	r2, r3
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	b10b      	cbz	r3, 801a228 <_free_r+0x4c>
 801a224:	42a3      	cmp	r3, r4
 801a226:	d9fa      	bls.n	801a21e <_free_r+0x42>
 801a228:	6811      	ldr	r1, [r2, #0]
 801a22a:	1850      	adds	r0, r2, r1
 801a22c:	42a0      	cmp	r0, r4
 801a22e:	d10b      	bne.n	801a248 <_free_r+0x6c>
 801a230:	6820      	ldr	r0, [r4, #0]
 801a232:	4401      	add	r1, r0
 801a234:	1850      	adds	r0, r2, r1
 801a236:	4283      	cmp	r3, r0
 801a238:	6011      	str	r1, [r2, #0]
 801a23a:	d1e0      	bne.n	801a1fe <_free_r+0x22>
 801a23c:	6818      	ldr	r0, [r3, #0]
 801a23e:	685b      	ldr	r3, [r3, #4]
 801a240:	6053      	str	r3, [r2, #4]
 801a242:	4408      	add	r0, r1
 801a244:	6010      	str	r0, [r2, #0]
 801a246:	e7da      	b.n	801a1fe <_free_r+0x22>
 801a248:	d902      	bls.n	801a250 <_free_r+0x74>
 801a24a:	230c      	movs	r3, #12
 801a24c:	602b      	str	r3, [r5, #0]
 801a24e:	e7d6      	b.n	801a1fe <_free_r+0x22>
 801a250:	6820      	ldr	r0, [r4, #0]
 801a252:	1821      	adds	r1, r4, r0
 801a254:	428b      	cmp	r3, r1
 801a256:	bf04      	itt	eq
 801a258:	6819      	ldreq	r1, [r3, #0]
 801a25a:	685b      	ldreq	r3, [r3, #4]
 801a25c:	6063      	str	r3, [r4, #4]
 801a25e:	bf04      	itt	eq
 801a260:	1809      	addeq	r1, r1, r0
 801a262:	6021      	streq	r1, [r4, #0]
 801a264:	6054      	str	r4, [r2, #4]
 801a266:	e7ca      	b.n	801a1fe <_free_r+0x22>
 801a268:	bd38      	pop	{r3, r4, r5, pc}
 801a26a:	bf00      	nop
 801a26c:	2000e3c0 	.word	0x2000e3c0

0801a270 <malloc>:
 801a270:	4b02      	ldr	r3, [pc, #8]	@ (801a27c <malloc+0xc>)
 801a272:	4601      	mov	r1, r0
 801a274:	6818      	ldr	r0, [r3, #0]
 801a276:	f000 b825 	b.w	801a2c4 <_malloc_r>
 801a27a:	bf00      	nop
 801a27c:	20000028 	.word	0x20000028

0801a280 <sbrk_aligned>:
 801a280:	b570      	push	{r4, r5, r6, lr}
 801a282:	4e0f      	ldr	r6, [pc, #60]	@ (801a2c0 <sbrk_aligned+0x40>)
 801a284:	460c      	mov	r4, r1
 801a286:	6831      	ldr	r1, [r6, #0]
 801a288:	4605      	mov	r5, r0
 801a28a:	b911      	cbnz	r1, 801a292 <sbrk_aligned+0x12>
 801a28c:	f001 f804 	bl	801b298 <_sbrk_r>
 801a290:	6030      	str	r0, [r6, #0]
 801a292:	4621      	mov	r1, r4
 801a294:	4628      	mov	r0, r5
 801a296:	f000 ffff 	bl	801b298 <_sbrk_r>
 801a29a:	1c43      	adds	r3, r0, #1
 801a29c:	d103      	bne.n	801a2a6 <sbrk_aligned+0x26>
 801a29e:	f04f 34ff 	mov.w	r4, #4294967295
 801a2a2:	4620      	mov	r0, r4
 801a2a4:	bd70      	pop	{r4, r5, r6, pc}
 801a2a6:	1cc4      	adds	r4, r0, #3
 801a2a8:	f024 0403 	bic.w	r4, r4, #3
 801a2ac:	42a0      	cmp	r0, r4
 801a2ae:	d0f8      	beq.n	801a2a2 <sbrk_aligned+0x22>
 801a2b0:	1a21      	subs	r1, r4, r0
 801a2b2:	4628      	mov	r0, r5
 801a2b4:	f000 fff0 	bl	801b298 <_sbrk_r>
 801a2b8:	3001      	adds	r0, #1
 801a2ba:	d1f2      	bne.n	801a2a2 <sbrk_aligned+0x22>
 801a2bc:	e7ef      	b.n	801a29e <sbrk_aligned+0x1e>
 801a2be:	bf00      	nop
 801a2c0:	2000e3bc 	.word	0x2000e3bc

0801a2c4 <_malloc_r>:
 801a2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2c8:	1ccd      	adds	r5, r1, #3
 801a2ca:	f025 0503 	bic.w	r5, r5, #3
 801a2ce:	3508      	adds	r5, #8
 801a2d0:	2d0c      	cmp	r5, #12
 801a2d2:	bf38      	it	cc
 801a2d4:	250c      	movcc	r5, #12
 801a2d6:	2d00      	cmp	r5, #0
 801a2d8:	4606      	mov	r6, r0
 801a2da:	db01      	blt.n	801a2e0 <_malloc_r+0x1c>
 801a2dc:	42a9      	cmp	r1, r5
 801a2de:	d904      	bls.n	801a2ea <_malloc_r+0x26>
 801a2e0:	230c      	movs	r3, #12
 801a2e2:	6033      	str	r3, [r6, #0]
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a3c0 <_malloc_r+0xfc>
 801a2ee:	f000 f869 	bl	801a3c4 <__malloc_lock>
 801a2f2:	f8d8 3000 	ldr.w	r3, [r8]
 801a2f6:	461c      	mov	r4, r3
 801a2f8:	bb44      	cbnz	r4, 801a34c <_malloc_r+0x88>
 801a2fa:	4629      	mov	r1, r5
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	f7ff ffbf 	bl	801a280 <sbrk_aligned>
 801a302:	1c43      	adds	r3, r0, #1
 801a304:	4604      	mov	r4, r0
 801a306:	d158      	bne.n	801a3ba <_malloc_r+0xf6>
 801a308:	f8d8 4000 	ldr.w	r4, [r8]
 801a30c:	4627      	mov	r7, r4
 801a30e:	2f00      	cmp	r7, #0
 801a310:	d143      	bne.n	801a39a <_malloc_r+0xd6>
 801a312:	2c00      	cmp	r4, #0
 801a314:	d04b      	beq.n	801a3ae <_malloc_r+0xea>
 801a316:	6823      	ldr	r3, [r4, #0]
 801a318:	4639      	mov	r1, r7
 801a31a:	4630      	mov	r0, r6
 801a31c:	eb04 0903 	add.w	r9, r4, r3
 801a320:	f000 ffba 	bl	801b298 <_sbrk_r>
 801a324:	4581      	cmp	r9, r0
 801a326:	d142      	bne.n	801a3ae <_malloc_r+0xea>
 801a328:	6821      	ldr	r1, [r4, #0]
 801a32a:	1a6d      	subs	r5, r5, r1
 801a32c:	4629      	mov	r1, r5
 801a32e:	4630      	mov	r0, r6
 801a330:	f7ff ffa6 	bl	801a280 <sbrk_aligned>
 801a334:	3001      	adds	r0, #1
 801a336:	d03a      	beq.n	801a3ae <_malloc_r+0xea>
 801a338:	6823      	ldr	r3, [r4, #0]
 801a33a:	442b      	add	r3, r5
 801a33c:	6023      	str	r3, [r4, #0]
 801a33e:	f8d8 3000 	ldr.w	r3, [r8]
 801a342:	685a      	ldr	r2, [r3, #4]
 801a344:	bb62      	cbnz	r2, 801a3a0 <_malloc_r+0xdc>
 801a346:	f8c8 7000 	str.w	r7, [r8]
 801a34a:	e00f      	b.n	801a36c <_malloc_r+0xa8>
 801a34c:	6822      	ldr	r2, [r4, #0]
 801a34e:	1b52      	subs	r2, r2, r5
 801a350:	d420      	bmi.n	801a394 <_malloc_r+0xd0>
 801a352:	2a0b      	cmp	r2, #11
 801a354:	d917      	bls.n	801a386 <_malloc_r+0xc2>
 801a356:	1961      	adds	r1, r4, r5
 801a358:	42a3      	cmp	r3, r4
 801a35a:	6025      	str	r5, [r4, #0]
 801a35c:	bf18      	it	ne
 801a35e:	6059      	strne	r1, [r3, #4]
 801a360:	6863      	ldr	r3, [r4, #4]
 801a362:	bf08      	it	eq
 801a364:	f8c8 1000 	streq.w	r1, [r8]
 801a368:	5162      	str	r2, [r4, r5]
 801a36a:	604b      	str	r3, [r1, #4]
 801a36c:	4630      	mov	r0, r6
 801a36e:	f000 f82f 	bl	801a3d0 <__malloc_unlock>
 801a372:	f104 000b 	add.w	r0, r4, #11
 801a376:	1d23      	adds	r3, r4, #4
 801a378:	f020 0007 	bic.w	r0, r0, #7
 801a37c:	1ac2      	subs	r2, r0, r3
 801a37e:	bf1c      	itt	ne
 801a380:	1a1b      	subne	r3, r3, r0
 801a382:	50a3      	strne	r3, [r4, r2]
 801a384:	e7af      	b.n	801a2e6 <_malloc_r+0x22>
 801a386:	6862      	ldr	r2, [r4, #4]
 801a388:	42a3      	cmp	r3, r4
 801a38a:	bf0c      	ite	eq
 801a38c:	f8c8 2000 	streq.w	r2, [r8]
 801a390:	605a      	strne	r2, [r3, #4]
 801a392:	e7eb      	b.n	801a36c <_malloc_r+0xa8>
 801a394:	4623      	mov	r3, r4
 801a396:	6864      	ldr	r4, [r4, #4]
 801a398:	e7ae      	b.n	801a2f8 <_malloc_r+0x34>
 801a39a:	463c      	mov	r4, r7
 801a39c:	687f      	ldr	r7, [r7, #4]
 801a39e:	e7b6      	b.n	801a30e <_malloc_r+0x4a>
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	685b      	ldr	r3, [r3, #4]
 801a3a4:	42a3      	cmp	r3, r4
 801a3a6:	d1fb      	bne.n	801a3a0 <_malloc_r+0xdc>
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	6053      	str	r3, [r2, #4]
 801a3ac:	e7de      	b.n	801a36c <_malloc_r+0xa8>
 801a3ae:	230c      	movs	r3, #12
 801a3b0:	6033      	str	r3, [r6, #0]
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f000 f80c 	bl	801a3d0 <__malloc_unlock>
 801a3b8:	e794      	b.n	801a2e4 <_malloc_r+0x20>
 801a3ba:	6005      	str	r5, [r0, #0]
 801a3bc:	e7d6      	b.n	801a36c <_malloc_r+0xa8>
 801a3be:	bf00      	nop
 801a3c0:	2000e3c0 	.word	0x2000e3c0

0801a3c4 <__malloc_lock>:
 801a3c4:	4801      	ldr	r0, [pc, #4]	@ (801a3cc <__malloc_lock+0x8>)
 801a3c6:	f7ff b8f2 	b.w	80195ae <__retarget_lock_acquire_recursive>
 801a3ca:	bf00      	nop
 801a3cc:	2000e3b8 	.word	0x2000e3b8

0801a3d0 <__malloc_unlock>:
 801a3d0:	4801      	ldr	r0, [pc, #4]	@ (801a3d8 <__malloc_unlock+0x8>)
 801a3d2:	f7ff b8ed 	b.w	80195b0 <__retarget_lock_release_recursive>
 801a3d6:	bf00      	nop
 801a3d8:	2000e3b8 	.word	0x2000e3b8

0801a3dc <_Balloc>:
 801a3dc:	b570      	push	{r4, r5, r6, lr}
 801a3de:	69c6      	ldr	r6, [r0, #28]
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	460d      	mov	r5, r1
 801a3e4:	b976      	cbnz	r6, 801a404 <_Balloc+0x28>
 801a3e6:	2010      	movs	r0, #16
 801a3e8:	f7ff ff42 	bl	801a270 <malloc>
 801a3ec:	4602      	mov	r2, r0
 801a3ee:	61e0      	str	r0, [r4, #28]
 801a3f0:	b920      	cbnz	r0, 801a3fc <_Balloc+0x20>
 801a3f2:	4b18      	ldr	r3, [pc, #96]	@ (801a454 <_Balloc+0x78>)
 801a3f4:	4818      	ldr	r0, [pc, #96]	@ (801a458 <_Balloc+0x7c>)
 801a3f6:	216b      	movs	r1, #107	@ 0x6b
 801a3f8:	f7ff f8f2 	bl	80195e0 <__assert_func>
 801a3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a400:	6006      	str	r6, [r0, #0]
 801a402:	60c6      	str	r6, [r0, #12]
 801a404:	69e6      	ldr	r6, [r4, #28]
 801a406:	68f3      	ldr	r3, [r6, #12]
 801a408:	b183      	cbz	r3, 801a42c <_Balloc+0x50>
 801a40a:	69e3      	ldr	r3, [r4, #28]
 801a40c:	68db      	ldr	r3, [r3, #12]
 801a40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a412:	b9b8      	cbnz	r0, 801a444 <_Balloc+0x68>
 801a414:	2101      	movs	r1, #1
 801a416:	fa01 f605 	lsl.w	r6, r1, r5
 801a41a:	1d72      	adds	r2, r6, #5
 801a41c:	0092      	lsls	r2, r2, #2
 801a41e:	4620      	mov	r0, r4
 801a420:	f000 ff51 	bl	801b2c6 <_calloc_r>
 801a424:	b160      	cbz	r0, 801a440 <_Balloc+0x64>
 801a426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a42a:	e00e      	b.n	801a44a <_Balloc+0x6e>
 801a42c:	2221      	movs	r2, #33	@ 0x21
 801a42e:	2104      	movs	r1, #4
 801a430:	4620      	mov	r0, r4
 801a432:	f000 ff48 	bl	801b2c6 <_calloc_r>
 801a436:	69e3      	ldr	r3, [r4, #28]
 801a438:	60f0      	str	r0, [r6, #12]
 801a43a:	68db      	ldr	r3, [r3, #12]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d1e4      	bne.n	801a40a <_Balloc+0x2e>
 801a440:	2000      	movs	r0, #0
 801a442:	bd70      	pop	{r4, r5, r6, pc}
 801a444:	6802      	ldr	r2, [r0, #0]
 801a446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a44a:	2300      	movs	r3, #0
 801a44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a450:	e7f7      	b.n	801a442 <_Balloc+0x66>
 801a452:	bf00      	nop
 801a454:	0801ec5a 	.word	0x0801ec5a
 801a458:	0801eeb0 	.word	0x0801eeb0

0801a45c <_Bfree>:
 801a45c:	b570      	push	{r4, r5, r6, lr}
 801a45e:	69c6      	ldr	r6, [r0, #28]
 801a460:	4605      	mov	r5, r0
 801a462:	460c      	mov	r4, r1
 801a464:	b976      	cbnz	r6, 801a484 <_Bfree+0x28>
 801a466:	2010      	movs	r0, #16
 801a468:	f7ff ff02 	bl	801a270 <malloc>
 801a46c:	4602      	mov	r2, r0
 801a46e:	61e8      	str	r0, [r5, #28]
 801a470:	b920      	cbnz	r0, 801a47c <_Bfree+0x20>
 801a472:	4b09      	ldr	r3, [pc, #36]	@ (801a498 <_Bfree+0x3c>)
 801a474:	4809      	ldr	r0, [pc, #36]	@ (801a49c <_Bfree+0x40>)
 801a476:	218f      	movs	r1, #143	@ 0x8f
 801a478:	f7ff f8b2 	bl	80195e0 <__assert_func>
 801a47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a480:	6006      	str	r6, [r0, #0]
 801a482:	60c6      	str	r6, [r0, #12]
 801a484:	b13c      	cbz	r4, 801a496 <_Bfree+0x3a>
 801a486:	69eb      	ldr	r3, [r5, #28]
 801a488:	6862      	ldr	r2, [r4, #4]
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a490:	6021      	str	r1, [r4, #0]
 801a492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a496:	bd70      	pop	{r4, r5, r6, pc}
 801a498:	0801ec5a 	.word	0x0801ec5a
 801a49c:	0801eeb0 	.word	0x0801eeb0

0801a4a0 <__multadd>:
 801a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a4:	690d      	ldr	r5, [r1, #16]
 801a4a6:	4607      	mov	r7, r0
 801a4a8:	460c      	mov	r4, r1
 801a4aa:	461e      	mov	r6, r3
 801a4ac:	f101 0c14 	add.w	ip, r1, #20
 801a4b0:	2000      	movs	r0, #0
 801a4b2:	f8dc 3000 	ldr.w	r3, [ip]
 801a4b6:	b299      	uxth	r1, r3
 801a4b8:	fb02 6101 	mla	r1, r2, r1, r6
 801a4bc:	0c1e      	lsrs	r6, r3, #16
 801a4be:	0c0b      	lsrs	r3, r1, #16
 801a4c0:	fb02 3306 	mla	r3, r2, r6, r3
 801a4c4:	b289      	uxth	r1, r1
 801a4c6:	3001      	adds	r0, #1
 801a4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a4cc:	4285      	cmp	r5, r0
 801a4ce:	f84c 1b04 	str.w	r1, [ip], #4
 801a4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a4d6:	dcec      	bgt.n	801a4b2 <__multadd+0x12>
 801a4d8:	b30e      	cbz	r6, 801a51e <__multadd+0x7e>
 801a4da:	68a3      	ldr	r3, [r4, #8]
 801a4dc:	42ab      	cmp	r3, r5
 801a4de:	dc19      	bgt.n	801a514 <__multadd+0x74>
 801a4e0:	6861      	ldr	r1, [r4, #4]
 801a4e2:	4638      	mov	r0, r7
 801a4e4:	3101      	adds	r1, #1
 801a4e6:	f7ff ff79 	bl	801a3dc <_Balloc>
 801a4ea:	4680      	mov	r8, r0
 801a4ec:	b928      	cbnz	r0, 801a4fa <__multadd+0x5a>
 801a4ee:	4602      	mov	r2, r0
 801a4f0:	4b0c      	ldr	r3, [pc, #48]	@ (801a524 <__multadd+0x84>)
 801a4f2:	480d      	ldr	r0, [pc, #52]	@ (801a528 <__multadd+0x88>)
 801a4f4:	21ba      	movs	r1, #186	@ 0xba
 801a4f6:	f7ff f873 	bl	80195e0 <__assert_func>
 801a4fa:	6922      	ldr	r2, [r4, #16]
 801a4fc:	3202      	adds	r2, #2
 801a4fe:	f104 010c 	add.w	r1, r4, #12
 801a502:	0092      	lsls	r2, r2, #2
 801a504:	300c      	adds	r0, #12
 801a506:	f7ff f85c 	bl	80195c2 <memcpy>
 801a50a:	4621      	mov	r1, r4
 801a50c:	4638      	mov	r0, r7
 801a50e:	f7ff ffa5 	bl	801a45c <_Bfree>
 801a512:	4644      	mov	r4, r8
 801a514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a518:	3501      	adds	r5, #1
 801a51a:	615e      	str	r6, [r3, #20]
 801a51c:	6125      	str	r5, [r4, #16]
 801a51e:	4620      	mov	r0, r4
 801a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a524:	0801ee9f 	.word	0x0801ee9f
 801a528:	0801eeb0 	.word	0x0801eeb0

0801a52c <__hi0bits>:
 801a52c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a530:	4603      	mov	r3, r0
 801a532:	bf36      	itet	cc
 801a534:	0403      	lslcc	r3, r0, #16
 801a536:	2000      	movcs	r0, #0
 801a538:	2010      	movcc	r0, #16
 801a53a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a53e:	bf3c      	itt	cc
 801a540:	021b      	lslcc	r3, r3, #8
 801a542:	3008      	addcc	r0, #8
 801a544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a548:	bf3c      	itt	cc
 801a54a:	011b      	lslcc	r3, r3, #4
 801a54c:	3004      	addcc	r0, #4
 801a54e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a552:	bf3c      	itt	cc
 801a554:	009b      	lslcc	r3, r3, #2
 801a556:	3002      	addcc	r0, #2
 801a558:	2b00      	cmp	r3, #0
 801a55a:	db05      	blt.n	801a568 <__hi0bits+0x3c>
 801a55c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a560:	f100 0001 	add.w	r0, r0, #1
 801a564:	bf08      	it	eq
 801a566:	2020      	moveq	r0, #32
 801a568:	4770      	bx	lr

0801a56a <__lo0bits>:
 801a56a:	6803      	ldr	r3, [r0, #0]
 801a56c:	4602      	mov	r2, r0
 801a56e:	f013 0007 	ands.w	r0, r3, #7
 801a572:	d00b      	beq.n	801a58c <__lo0bits+0x22>
 801a574:	07d9      	lsls	r1, r3, #31
 801a576:	d421      	bmi.n	801a5bc <__lo0bits+0x52>
 801a578:	0798      	lsls	r0, r3, #30
 801a57a:	bf49      	itett	mi
 801a57c:	085b      	lsrmi	r3, r3, #1
 801a57e:	089b      	lsrpl	r3, r3, #2
 801a580:	2001      	movmi	r0, #1
 801a582:	6013      	strmi	r3, [r2, #0]
 801a584:	bf5c      	itt	pl
 801a586:	6013      	strpl	r3, [r2, #0]
 801a588:	2002      	movpl	r0, #2
 801a58a:	4770      	bx	lr
 801a58c:	b299      	uxth	r1, r3
 801a58e:	b909      	cbnz	r1, 801a594 <__lo0bits+0x2a>
 801a590:	0c1b      	lsrs	r3, r3, #16
 801a592:	2010      	movs	r0, #16
 801a594:	b2d9      	uxtb	r1, r3
 801a596:	b909      	cbnz	r1, 801a59c <__lo0bits+0x32>
 801a598:	3008      	adds	r0, #8
 801a59a:	0a1b      	lsrs	r3, r3, #8
 801a59c:	0719      	lsls	r1, r3, #28
 801a59e:	bf04      	itt	eq
 801a5a0:	091b      	lsreq	r3, r3, #4
 801a5a2:	3004      	addeq	r0, #4
 801a5a4:	0799      	lsls	r1, r3, #30
 801a5a6:	bf04      	itt	eq
 801a5a8:	089b      	lsreq	r3, r3, #2
 801a5aa:	3002      	addeq	r0, #2
 801a5ac:	07d9      	lsls	r1, r3, #31
 801a5ae:	d403      	bmi.n	801a5b8 <__lo0bits+0x4e>
 801a5b0:	085b      	lsrs	r3, r3, #1
 801a5b2:	f100 0001 	add.w	r0, r0, #1
 801a5b6:	d003      	beq.n	801a5c0 <__lo0bits+0x56>
 801a5b8:	6013      	str	r3, [r2, #0]
 801a5ba:	4770      	bx	lr
 801a5bc:	2000      	movs	r0, #0
 801a5be:	4770      	bx	lr
 801a5c0:	2020      	movs	r0, #32
 801a5c2:	4770      	bx	lr

0801a5c4 <__i2b>:
 801a5c4:	b510      	push	{r4, lr}
 801a5c6:	460c      	mov	r4, r1
 801a5c8:	2101      	movs	r1, #1
 801a5ca:	f7ff ff07 	bl	801a3dc <_Balloc>
 801a5ce:	4602      	mov	r2, r0
 801a5d0:	b928      	cbnz	r0, 801a5de <__i2b+0x1a>
 801a5d2:	4b05      	ldr	r3, [pc, #20]	@ (801a5e8 <__i2b+0x24>)
 801a5d4:	4805      	ldr	r0, [pc, #20]	@ (801a5ec <__i2b+0x28>)
 801a5d6:	f240 1145 	movw	r1, #325	@ 0x145
 801a5da:	f7ff f801 	bl	80195e0 <__assert_func>
 801a5de:	2301      	movs	r3, #1
 801a5e0:	6144      	str	r4, [r0, #20]
 801a5e2:	6103      	str	r3, [r0, #16]
 801a5e4:	bd10      	pop	{r4, pc}
 801a5e6:	bf00      	nop
 801a5e8:	0801ee9f 	.word	0x0801ee9f
 801a5ec:	0801eeb0 	.word	0x0801eeb0

0801a5f0 <__multiply>:
 801a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f4:	4614      	mov	r4, r2
 801a5f6:	690a      	ldr	r2, [r1, #16]
 801a5f8:	6923      	ldr	r3, [r4, #16]
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	bfa8      	it	ge
 801a5fe:	4623      	movge	r3, r4
 801a600:	460f      	mov	r7, r1
 801a602:	bfa4      	itt	ge
 801a604:	460c      	movge	r4, r1
 801a606:	461f      	movge	r7, r3
 801a608:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a60c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a610:	68a3      	ldr	r3, [r4, #8]
 801a612:	6861      	ldr	r1, [r4, #4]
 801a614:	eb0a 0609 	add.w	r6, sl, r9
 801a618:	42b3      	cmp	r3, r6
 801a61a:	b085      	sub	sp, #20
 801a61c:	bfb8      	it	lt
 801a61e:	3101      	addlt	r1, #1
 801a620:	f7ff fedc 	bl	801a3dc <_Balloc>
 801a624:	b930      	cbnz	r0, 801a634 <__multiply+0x44>
 801a626:	4602      	mov	r2, r0
 801a628:	4b44      	ldr	r3, [pc, #272]	@ (801a73c <__multiply+0x14c>)
 801a62a:	4845      	ldr	r0, [pc, #276]	@ (801a740 <__multiply+0x150>)
 801a62c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a630:	f7fe ffd6 	bl	80195e0 <__assert_func>
 801a634:	f100 0514 	add.w	r5, r0, #20
 801a638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a63c:	462b      	mov	r3, r5
 801a63e:	2200      	movs	r2, #0
 801a640:	4543      	cmp	r3, r8
 801a642:	d321      	bcc.n	801a688 <__multiply+0x98>
 801a644:	f107 0114 	add.w	r1, r7, #20
 801a648:	f104 0214 	add.w	r2, r4, #20
 801a64c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a650:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a654:	9302      	str	r3, [sp, #8]
 801a656:	1b13      	subs	r3, r2, r4
 801a658:	3b15      	subs	r3, #21
 801a65a:	f023 0303 	bic.w	r3, r3, #3
 801a65e:	3304      	adds	r3, #4
 801a660:	f104 0715 	add.w	r7, r4, #21
 801a664:	42ba      	cmp	r2, r7
 801a666:	bf38      	it	cc
 801a668:	2304      	movcc	r3, #4
 801a66a:	9301      	str	r3, [sp, #4]
 801a66c:	9b02      	ldr	r3, [sp, #8]
 801a66e:	9103      	str	r1, [sp, #12]
 801a670:	428b      	cmp	r3, r1
 801a672:	d80c      	bhi.n	801a68e <__multiply+0x9e>
 801a674:	2e00      	cmp	r6, #0
 801a676:	dd03      	ble.n	801a680 <__multiply+0x90>
 801a678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d05b      	beq.n	801a738 <__multiply+0x148>
 801a680:	6106      	str	r6, [r0, #16]
 801a682:	b005      	add	sp, #20
 801a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a688:	f843 2b04 	str.w	r2, [r3], #4
 801a68c:	e7d8      	b.n	801a640 <__multiply+0x50>
 801a68e:	f8b1 a000 	ldrh.w	sl, [r1]
 801a692:	f1ba 0f00 	cmp.w	sl, #0
 801a696:	d024      	beq.n	801a6e2 <__multiply+0xf2>
 801a698:	f104 0e14 	add.w	lr, r4, #20
 801a69c:	46a9      	mov	r9, r5
 801a69e:	f04f 0c00 	mov.w	ip, #0
 801a6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a6a6:	f8d9 3000 	ldr.w	r3, [r9]
 801a6aa:	fa1f fb87 	uxth.w	fp, r7
 801a6ae:	b29b      	uxth	r3, r3
 801a6b0:	fb0a 330b 	mla	r3, sl, fp, r3
 801a6b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a6b8:	f8d9 7000 	ldr.w	r7, [r9]
 801a6bc:	4463      	add	r3, ip
 801a6be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a6c2:	fb0a c70b 	mla	r7, sl, fp, ip
 801a6c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a6d0:	4572      	cmp	r2, lr
 801a6d2:	f849 3b04 	str.w	r3, [r9], #4
 801a6d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a6da:	d8e2      	bhi.n	801a6a2 <__multiply+0xb2>
 801a6dc:	9b01      	ldr	r3, [sp, #4]
 801a6de:	f845 c003 	str.w	ip, [r5, r3]
 801a6e2:	9b03      	ldr	r3, [sp, #12]
 801a6e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a6e8:	3104      	adds	r1, #4
 801a6ea:	f1b9 0f00 	cmp.w	r9, #0
 801a6ee:	d021      	beq.n	801a734 <__multiply+0x144>
 801a6f0:	682b      	ldr	r3, [r5, #0]
 801a6f2:	f104 0c14 	add.w	ip, r4, #20
 801a6f6:	46ae      	mov	lr, r5
 801a6f8:	f04f 0a00 	mov.w	sl, #0
 801a6fc:	f8bc b000 	ldrh.w	fp, [ip]
 801a700:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a704:	fb09 770b 	mla	r7, r9, fp, r7
 801a708:	4457      	add	r7, sl
 801a70a:	b29b      	uxth	r3, r3
 801a70c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a710:	f84e 3b04 	str.w	r3, [lr], #4
 801a714:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a718:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a71c:	f8be 3000 	ldrh.w	r3, [lr]
 801a720:	fb09 330a 	mla	r3, r9, sl, r3
 801a724:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a728:	4562      	cmp	r2, ip
 801a72a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a72e:	d8e5      	bhi.n	801a6fc <__multiply+0x10c>
 801a730:	9f01      	ldr	r7, [sp, #4]
 801a732:	51eb      	str	r3, [r5, r7]
 801a734:	3504      	adds	r5, #4
 801a736:	e799      	b.n	801a66c <__multiply+0x7c>
 801a738:	3e01      	subs	r6, #1
 801a73a:	e79b      	b.n	801a674 <__multiply+0x84>
 801a73c:	0801ee9f 	.word	0x0801ee9f
 801a740:	0801eeb0 	.word	0x0801eeb0

0801a744 <__pow5mult>:
 801a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a748:	4615      	mov	r5, r2
 801a74a:	f012 0203 	ands.w	r2, r2, #3
 801a74e:	4607      	mov	r7, r0
 801a750:	460e      	mov	r6, r1
 801a752:	d007      	beq.n	801a764 <__pow5mult+0x20>
 801a754:	4c25      	ldr	r4, [pc, #148]	@ (801a7ec <__pow5mult+0xa8>)
 801a756:	3a01      	subs	r2, #1
 801a758:	2300      	movs	r3, #0
 801a75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a75e:	f7ff fe9f 	bl	801a4a0 <__multadd>
 801a762:	4606      	mov	r6, r0
 801a764:	10ad      	asrs	r5, r5, #2
 801a766:	d03d      	beq.n	801a7e4 <__pow5mult+0xa0>
 801a768:	69fc      	ldr	r4, [r7, #28]
 801a76a:	b97c      	cbnz	r4, 801a78c <__pow5mult+0x48>
 801a76c:	2010      	movs	r0, #16
 801a76e:	f7ff fd7f 	bl	801a270 <malloc>
 801a772:	4602      	mov	r2, r0
 801a774:	61f8      	str	r0, [r7, #28]
 801a776:	b928      	cbnz	r0, 801a784 <__pow5mult+0x40>
 801a778:	4b1d      	ldr	r3, [pc, #116]	@ (801a7f0 <__pow5mult+0xac>)
 801a77a:	481e      	ldr	r0, [pc, #120]	@ (801a7f4 <__pow5mult+0xb0>)
 801a77c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a780:	f7fe ff2e 	bl	80195e0 <__assert_func>
 801a784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a788:	6004      	str	r4, [r0, #0]
 801a78a:	60c4      	str	r4, [r0, #12]
 801a78c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a794:	b94c      	cbnz	r4, 801a7aa <__pow5mult+0x66>
 801a796:	f240 2171 	movw	r1, #625	@ 0x271
 801a79a:	4638      	mov	r0, r7
 801a79c:	f7ff ff12 	bl	801a5c4 <__i2b>
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	f8c8 0008 	str.w	r0, [r8, #8]
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	6003      	str	r3, [r0, #0]
 801a7aa:	f04f 0900 	mov.w	r9, #0
 801a7ae:	07eb      	lsls	r3, r5, #31
 801a7b0:	d50a      	bpl.n	801a7c8 <__pow5mult+0x84>
 801a7b2:	4631      	mov	r1, r6
 801a7b4:	4622      	mov	r2, r4
 801a7b6:	4638      	mov	r0, r7
 801a7b8:	f7ff ff1a 	bl	801a5f0 <__multiply>
 801a7bc:	4631      	mov	r1, r6
 801a7be:	4680      	mov	r8, r0
 801a7c0:	4638      	mov	r0, r7
 801a7c2:	f7ff fe4b 	bl	801a45c <_Bfree>
 801a7c6:	4646      	mov	r6, r8
 801a7c8:	106d      	asrs	r5, r5, #1
 801a7ca:	d00b      	beq.n	801a7e4 <__pow5mult+0xa0>
 801a7cc:	6820      	ldr	r0, [r4, #0]
 801a7ce:	b938      	cbnz	r0, 801a7e0 <__pow5mult+0x9c>
 801a7d0:	4622      	mov	r2, r4
 801a7d2:	4621      	mov	r1, r4
 801a7d4:	4638      	mov	r0, r7
 801a7d6:	f7ff ff0b 	bl	801a5f0 <__multiply>
 801a7da:	6020      	str	r0, [r4, #0]
 801a7dc:	f8c0 9000 	str.w	r9, [r0]
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	e7e4      	b.n	801a7ae <__pow5mult+0x6a>
 801a7e4:	4630      	mov	r0, r6
 801a7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7ea:	bf00      	nop
 801a7ec:	0801ef0c 	.word	0x0801ef0c
 801a7f0:	0801ec5a 	.word	0x0801ec5a
 801a7f4:	0801eeb0 	.word	0x0801eeb0

0801a7f8 <__lshift>:
 801a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7fc:	460c      	mov	r4, r1
 801a7fe:	6849      	ldr	r1, [r1, #4]
 801a800:	6923      	ldr	r3, [r4, #16]
 801a802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a806:	68a3      	ldr	r3, [r4, #8]
 801a808:	4607      	mov	r7, r0
 801a80a:	4691      	mov	r9, r2
 801a80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a810:	f108 0601 	add.w	r6, r8, #1
 801a814:	42b3      	cmp	r3, r6
 801a816:	db0b      	blt.n	801a830 <__lshift+0x38>
 801a818:	4638      	mov	r0, r7
 801a81a:	f7ff fddf 	bl	801a3dc <_Balloc>
 801a81e:	4605      	mov	r5, r0
 801a820:	b948      	cbnz	r0, 801a836 <__lshift+0x3e>
 801a822:	4602      	mov	r2, r0
 801a824:	4b28      	ldr	r3, [pc, #160]	@ (801a8c8 <__lshift+0xd0>)
 801a826:	4829      	ldr	r0, [pc, #164]	@ (801a8cc <__lshift+0xd4>)
 801a828:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a82c:	f7fe fed8 	bl	80195e0 <__assert_func>
 801a830:	3101      	adds	r1, #1
 801a832:	005b      	lsls	r3, r3, #1
 801a834:	e7ee      	b.n	801a814 <__lshift+0x1c>
 801a836:	2300      	movs	r3, #0
 801a838:	f100 0114 	add.w	r1, r0, #20
 801a83c:	f100 0210 	add.w	r2, r0, #16
 801a840:	4618      	mov	r0, r3
 801a842:	4553      	cmp	r3, sl
 801a844:	db33      	blt.n	801a8ae <__lshift+0xb6>
 801a846:	6920      	ldr	r0, [r4, #16]
 801a848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a84c:	f104 0314 	add.w	r3, r4, #20
 801a850:	f019 091f 	ands.w	r9, r9, #31
 801a854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a85c:	d02b      	beq.n	801a8b6 <__lshift+0xbe>
 801a85e:	f1c9 0e20 	rsb	lr, r9, #32
 801a862:	468a      	mov	sl, r1
 801a864:	2200      	movs	r2, #0
 801a866:	6818      	ldr	r0, [r3, #0]
 801a868:	fa00 f009 	lsl.w	r0, r0, r9
 801a86c:	4310      	orrs	r0, r2
 801a86e:	f84a 0b04 	str.w	r0, [sl], #4
 801a872:	f853 2b04 	ldr.w	r2, [r3], #4
 801a876:	459c      	cmp	ip, r3
 801a878:	fa22 f20e 	lsr.w	r2, r2, lr
 801a87c:	d8f3      	bhi.n	801a866 <__lshift+0x6e>
 801a87e:	ebac 0304 	sub.w	r3, ip, r4
 801a882:	3b15      	subs	r3, #21
 801a884:	f023 0303 	bic.w	r3, r3, #3
 801a888:	3304      	adds	r3, #4
 801a88a:	f104 0015 	add.w	r0, r4, #21
 801a88e:	4584      	cmp	ip, r0
 801a890:	bf38      	it	cc
 801a892:	2304      	movcc	r3, #4
 801a894:	50ca      	str	r2, [r1, r3]
 801a896:	b10a      	cbz	r2, 801a89c <__lshift+0xa4>
 801a898:	f108 0602 	add.w	r6, r8, #2
 801a89c:	3e01      	subs	r6, #1
 801a89e:	4638      	mov	r0, r7
 801a8a0:	612e      	str	r6, [r5, #16]
 801a8a2:	4621      	mov	r1, r4
 801a8a4:	f7ff fdda 	bl	801a45c <_Bfree>
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ae:	f842 0f04 	str.w	r0, [r2, #4]!
 801a8b2:	3301      	adds	r3, #1
 801a8b4:	e7c5      	b.n	801a842 <__lshift+0x4a>
 801a8b6:	3904      	subs	r1, #4
 801a8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8bc:	f841 2f04 	str.w	r2, [r1, #4]!
 801a8c0:	459c      	cmp	ip, r3
 801a8c2:	d8f9      	bhi.n	801a8b8 <__lshift+0xc0>
 801a8c4:	e7ea      	b.n	801a89c <__lshift+0xa4>
 801a8c6:	bf00      	nop
 801a8c8:	0801ee9f 	.word	0x0801ee9f
 801a8cc:	0801eeb0 	.word	0x0801eeb0

0801a8d0 <__mcmp>:
 801a8d0:	690a      	ldr	r2, [r1, #16]
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	6900      	ldr	r0, [r0, #16]
 801a8d6:	1a80      	subs	r0, r0, r2
 801a8d8:	b530      	push	{r4, r5, lr}
 801a8da:	d10e      	bne.n	801a8fa <__mcmp+0x2a>
 801a8dc:	3314      	adds	r3, #20
 801a8de:	3114      	adds	r1, #20
 801a8e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a8e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a8e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a8ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a8f0:	4295      	cmp	r5, r2
 801a8f2:	d003      	beq.n	801a8fc <__mcmp+0x2c>
 801a8f4:	d205      	bcs.n	801a902 <__mcmp+0x32>
 801a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 801a8fa:	bd30      	pop	{r4, r5, pc}
 801a8fc:	42a3      	cmp	r3, r4
 801a8fe:	d3f3      	bcc.n	801a8e8 <__mcmp+0x18>
 801a900:	e7fb      	b.n	801a8fa <__mcmp+0x2a>
 801a902:	2001      	movs	r0, #1
 801a904:	e7f9      	b.n	801a8fa <__mcmp+0x2a>
	...

0801a908 <__mdiff>:
 801a908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a90c:	4689      	mov	r9, r1
 801a90e:	4606      	mov	r6, r0
 801a910:	4611      	mov	r1, r2
 801a912:	4648      	mov	r0, r9
 801a914:	4614      	mov	r4, r2
 801a916:	f7ff ffdb 	bl	801a8d0 <__mcmp>
 801a91a:	1e05      	subs	r5, r0, #0
 801a91c:	d112      	bne.n	801a944 <__mdiff+0x3c>
 801a91e:	4629      	mov	r1, r5
 801a920:	4630      	mov	r0, r6
 801a922:	f7ff fd5b 	bl	801a3dc <_Balloc>
 801a926:	4602      	mov	r2, r0
 801a928:	b928      	cbnz	r0, 801a936 <__mdiff+0x2e>
 801a92a:	4b3f      	ldr	r3, [pc, #252]	@ (801aa28 <__mdiff+0x120>)
 801a92c:	f240 2137 	movw	r1, #567	@ 0x237
 801a930:	483e      	ldr	r0, [pc, #248]	@ (801aa2c <__mdiff+0x124>)
 801a932:	f7fe fe55 	bl	80195e0 <__assert_func>
 801a936:	2301      	movs	r3, #1
 801a938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a93c:	4610      	mov	r0, r2
 801a93e:	b003      	add	sp, #12
 801a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a944:	bfbc      	itt	lt
 801a946:	464b      	movlt	r3, r9
 801a948:	46a1      	movlt	r9, r4
 801a94a:	4630      	mov	r0, r6
 801a94c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a950:	bfba      	itte	lt
 801a952:	461c      	movlt	r4, r3
 801a954:	2501      	movlt	r5, #1
 801a956:	2500      	movge	r5, #0
 801a958:	f7ff fd40 	bl	801a3dc <_Balloc>
 801a95c:	4602      	mov	r2, r0
 801a95e:	b918      	cbnz	r0, 801a968 <__mdiff+0x60>
 801a960:	4b31      	ldr	r3, [pc, #196]	@ (801aa28 <__mdiff+0x120>)
 801a962:	f240 2145 	movw	r1, #581	@ 0x245
 801a966:	e7e3      	b.n	801a930 <__mdiff+0x28>
 801a968:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a96c:	6926      	ldr	r6, [r4, #16]
 801a96e:	60c5      	str	r5, [r0, #12]
 801a970:	f109 0310 	add.w	r3, r9, #16
 801a974:	f109 0514 	add.w	r5, r9, #20
 801a978:	f104 0e14 	add.w	lr, r4, #20
 801a97c:	f100 0b14 	add.w	fp, r0, #20
 801a980:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a984:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a988:	9301      	str	r3, [sp, #4]
 801a98a:	46d9      	mov	r9, fp
 801a98c:	f04f 0c00 	mov.w	ip, #0
 801a990:	9b01      	ldr	r3, [sp, #4]
 801a992:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a996:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a99a:	9301      	str	r3, [sp, #4]
 801a99c:	fa1f f38a 	uxth.w	r3, sl
 801a9a0:	4619      	mov	r1, r3
 801a9a2:	b283      	uxth	r3, r0
 801a9a4:	1acb      	subs	r3, r1, r3
 801a9a6:	0c00      	lsrs	r0, r0, #16
 801a9a8:	4463      	add	r3, ip
 801a9aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a9ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a9b8:	4576      	cmp	r6, lr
 801a9ba:	f849 3b04 	str.w	r3, [r9], #4
 801a9be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a9c2:	d8e5      	bhi.n	801a990 <__mdiff+0x88>
 801a9c4:	1b33      	subs	r3, r6, r4
 801a9c6:	3b15      	subs	r3, #21
 801a9c8:	f023 0303 	bic.w	r3, r3, #3
 801a9cc:	3415      	adds	r4, #21
 801a9ce:	3304      	adds	r3, #4
 801a9d0:	42a6      	cmp	r6, r4
 801a9d2:	bf38      	it	cc
 801a9d4:	2304      	movcc	r3, #4
 801a9d6:	441d      	add	r5, r3
 801a9d8:	445b      	add	r3, fp
 801a9da:	461e      	mov	r6, r3
 801a9dc:	462c      	mov	r4, r5
 801a9de:	4544      	cmp	r4, r8
 801a9e0:	d30e      	bcc.n	801aa00 <__mdiff+0xf8>
 801a9e2:	f108 0103 	add.w	r1, r8, #3
 801a9e6:	1b49      	subs	r1, r1, r5
 801a9e8:	f021 0103 	bic.w	r1, r1, #3
 801a9ec:	3d03      	subs	r5, #3
 801a9ee:	45a8      	cmp	r8, r5
 801a9f0:	bf38      	it	cc
 801a9f2:	2100      	movcc	r1, #0
 801a9f4:	440b      	add	r3, r1
 801a9f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a9fa:	b191      	cbz	r1, 801aa22 <__mdiff+0x11a>
 801a9fc:	6117      	str	r7, [r2, #16]
 801a9fe:	e79d      	b.n	801a93c <__mdiff+0x34>
 801aa00:	f854 1b04 	ldr.w	r1, [r4], #4
 801aa04:	46e6      	mov	lr, ip
 801aa06:	0c08      	lsrs	r0, r1, #16
 801aa08:	fa1c fc81 	uxtah	ip, ip, r1
 801aa0c:	4471      	add	r1, lr
 801aa0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801aa12:	b289      	uxth	r1, r1
 801aa14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801aa18:	f846 1b04 	str.w	r1, [r6], #4
 801aa1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801aa20:	e7dd      	b.n	801a9de <__mdiff+0xd6>
 801aa22:	3f01      	subs	r7, #1
 801aa24:	e7e7      	b.n	801a9f6 <__mdiff+0xee>
 801aa26:	bf00      	nop
 801aa28:	0801ee9f 	.word	0x0801ee9f
 801aa2c:	0801eeb0 	.word	0x0801eeb0

0801aa30 <__d2b>:
 801aa30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa34:	460f      	mov	r7, r1
 801aa36:	2101      	movs	r1, #1
 801aa38:	ec59 8b10 	vmov	r8, r9, d0
 801aa3c:	4616      	mov	r6, r2
 801aa3e:	f7ff fccd 	bl	801a3dc <_Balloc>
 801aa42:	4604      	mov	r4, r0
 801aa44:	b930      	cbnz	r0, 801aa54 <__d2b+0x24>
 801aa46:	4602      	mov	r2, r0
 801aa48:	4b23      	ldr	r3, [pc, #140]	@ (801aad8 <__d2b+0xa8>)
 801aa4a:	4824      	ldr	r0, [pc, #144]	@ (801aadc <__d2b+0xac>)
 801aa4c:	f240 310f 	movw	r1, #783	@ 0x30f
 801aa50:	f7fe fdc6 	bl	80195e0 <__assert_func>
 801aa54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801aa58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aa5c:	b10d      	cbz	r5, 801aa62 <__d2b+0x32>
 801aa5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801aa62:	9301      	str	r3, [sp, #4]
 801aa64:	f1b8 0300 	subs.w	r3, r8, #0
 801aa68:	d023      	beq.n	801aab2 <__d2b+0x82>
 801aa6a:	4668      	mov	r0, sp
 801aa6c:	9300      	str	r3, [sp, #0]
 801aa6e:	f7ff fd7c 	bl	801a56a <__lo0bits>
 801aa72:	e9dd 1200 	ldrd	r1, r2, [sp]
 801aa76:	b1d0      	cbz	r0, 801aaae <__d2b+0x7e>
 801aa78:	f1c0 0320 	rsb	r3, r0, #32
 801aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa80:	430b      	orrs	r3, r1
 801aa82:	40c2      	lsrs	r2, r0
 801aa84:	6163      	str	r3, [r4, #20]
 801aa86:	9201      	str	r2, [sp, #4]
 801aa88:	9b01      	ldr	r3, [sp, #4]
 801aa8a:	61a3      	str	r3, [r4, #24]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	bf0c      	ite	eq
 801aa90:	2201      	moveq	r2, #1
 801aa92:	2202      	movne	r2, #2
 801aa94:	6122      	str	r2, [r4, #16]
 801aa96:	b1a5      	cbz	r5, 801aac2 <__d2b+0x92>
 801aa98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801aa9c:	4405      	add	r5, r0
 801aa9e:	603d      	str	r5, [r7, #0]
 801aaa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801aaa4:	6030      	str	r0, [r6, #0]
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	b003      	add	sp, #12
 801aaaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaae:	6161      	str	r1, [r4, #20]
 801aab0:	e7ea      	b.n	801aa88 <__d2b+0x58>
 801aab2:	a801      	add	r0, sp, #4
 801aab4:	f7ff fd59 	bl	801a56a <__lo0bits>
 801aab8:	9b01      	ldr	r3, [sp, #4]
 801aaba:	6163      	str	r3, [r4, #20]
 801aabc:	3020      	adds	r0, #32
 801aabe:	2201      	movs	r2, #1
 801aac0:	e7e8      	b.n	801aa94 <__d2b+0x64>
 801aac2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801aac6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801aaca:	6038      	str	r0, [r7, #0]
 801aacc:	6918      	ldr	r0, [r3, #16]
 801aace:	f7ff fd2d 	bl	801a52c <__hi0bits>
 801aad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801aad6:	e7e5      	b.n	801aaa4 <__d2b+0x74>
 801aad8:	0801ee9f 	.word	0x0801ee9f
 801aadc:	0801eeb0 	.word	0x0801eeb0

0801aae0 <__ssputs_r>:
 801aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aae4:	688e      	ldr	r6, [r1, #8]
 801aae6:	461f      	mov	r7, r3
 801aae8:	42be      	cmp	r6, r7
 801aaea:	680b      	ldr	r3, [r1, #0]
 801aaec:	4682      	mov	sl, r0
 801aaee:	460c      	mov	r4, r1
 801aaf0:	4690      	mov	r8, r2
 801aaf2:	d82d      	bhi.n	801ab50 <__ssputs_r+0x70>
 801aaf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801aaf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801aafc:	d026      	beq.n	801ab4c <__ssputs_r+0x6c>
 801aafe:	6965      	ldr	r5, [r4, #20]
 801ab00:	6909      	ldr	r1, [r1, #16]
 801ab02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab06:	eba3 0901 	sub.w	r9, r3, r1
 801ab0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ab0e:	1c7b      	adds	r3, r7, #1
 801ab10:	444b      	add	r3, r9
 801ab12:	106d      	asrs	r5, r5, #1
 801ab14:	429d      	cmp	r5, r3
 801ab16:	bf38      	it	cc
 801ab18:	461d      	movcc	r5, r3
 801ab1a:	0553      	lsls	r3, r2, #21
 801ab1c:	d527      	bpl.n	801ab6e <__ssputs_r+0x8e>
 801ab1e:	4629      	mov	r1, r5
 801ab20:	f7ff fbd0 	bl	801a2c4 <_malloc_r>
 801ab24:	4606      	mov	r6, r0
 801ab26:	b360      	cbz	r0, 801ab82 <__ssputs_r+0xa2>
 801ab28:	6921      	ldr	r1, [r4, #16]
 801ab2a:	464a      	mov	r2, r9
 801ab2c:	f7fe fd49 	bl	80195c2 <memcpy>
 801ab30:	89a3      	ldrh	r3, [r4, #12]
 801ab32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ab36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ab3a:	81a3      	strh	r3, [r4, #12]
 801ab3c:	6126      	str	r6, [r4, #16]
 801ab3e:	6165      	str	r5, [r4, #20]
 801ab40:	444e      	add	r6, r9
 801ab42:	eba5 0509 	sub.w	r5, r5, r9
 801ab46:	6026      	str	r6, [r4, #0]
 801ab48:	60a5      	str	r5, [r4, #8]
 801ab4a:	463e      	mov	r6, r7
 801ab4c:	42be      	cmp	r6, r7
 801ab4e:	d900      	bls.n	801ab52 <__ssputs_r+0x72>
 801ab50:	463e      	mov	r6, r7
 801ab52:	6820      	ldr	r0, [r4, #0]
 801ab54:	4632      	mov	r2, r6
 801ab56:	4641      	mov	r1, r8
 801ab58:	f7fe fc60 	bl	801941c <memmove>
 801ab5c:	68a3      	ldr	r3, [r4, #8]
 801ab5e:	1b9b      	subs	r3, r3, r6
 801ab60:	60a3      	str	r3, [r4, #8]
 801ab62:	6823      	ldr	r3, [r4, #0]
 801ab64:	4433      	add	r3, r6
 801ab66:	6023      	str	r3, [r4, #0]
 801ab68:	2000      	movs	r0, #0
 801ab6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab6e:	462a      	mov	r2, r5
 801ab70:	f000 fbcf 	bl	801b312 <_realloc_r>
 801ab74:	4606      	mov	r6, r0
 801ab76:	2800      	cmp	r0, #0
 801ab78:	d1e0      	bne.n	801ab3c <__ssputs_r+0x5c>
 801ab7a:	6921      	ldr	r1, [r4, #16]
 801ab7c:	4650      	mov	r0, sl
 801ab7e:	f7ff fb2d 	bl	801a1dc <_free_r>
 801ab82:	230c      	movs	r3, #12
 801ab84:	f8ca 3000 	str.w	r3, [sl]
 801ab88:	89a3      	ldrh	r3, [r4, #12]
 801ab8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ab8e:	81a3      	strh	r3, [r4, #12]
 801ab90:	f04f 30ff 	mov.w	r0, #4294967295
 801ab94:	e7e9      	b.n	801ab6a <__ssputs_r+0x8a>
	...

0801ab98 <_svfiprintf_r>:
 801ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab9c:	4698      	mov	r8, r3
 801ab9e:	898b      	ldrh	r3, [r1, #12]
 801aba0:	061b      	lsls	r3, r3, #24
 801aba2:	b09d      	sub	sp, #116	@ 0x74
 801aba4:	4607      	mov	r7, r0
 801aba6:	460d      	mov	r5, r1
 801aba8:	4614      	mov	r4, r2
 801abaa:	d510      	bpl.n	801abce <_svfiprintf_r+0x36>
 801abac:	690b      	ldr	r3, [r1, #16]
 801abae:	b973      	cbnz	r3, 801abce <_svfiprintf_r+0x36>
 801abb0:	2140      	movs	r1, #64	@ 0x40
 801abb2:	f7ff fb87 	bl	801a2c4 <_malloc_r>
 801abb6:	6028      	str	r0, [r5, #0]
 801abb8:	6128      	str	r0, [r5, #16]
 801abba:	b930      	cbnz	r0, 801abca <_svfiprintf_r+0x32>
 801abbc:	230c      	movs	r3, #12
 801abbe:	603b      	str	r3, [r7, #0]
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295
 801abc4:	b01d      	add	sp, #116	@ 0x74
 801abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abca:	2340      	movs	r3, #64	@ 0x40
 801abcc:	616b      	str	r3, [r5, #20]
 801abce:	2300      	movs	r3, #0
 801abd0:	9309      	str	r3, [sp, #36]	@ 0x24
 801abd2:	2320      	movs	r3, #32
 801abd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801abd8:	f8cd 800c 	str.w	r8, [sp, #12]
 801abdc:	2330      	movs	r3, #48	@ 0x30
 801abde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ad7c <_svfiprintf_r+0x1e4>
 801abe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801abe6:	f04f 0901 	mov.w	r9, #1
 801abea:	4623      	mov	r3, r4
 801abec:	469a      	mov	sl, r3
 801abee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abf2:	b10a      	cbz	r2, 801abf8 <_svfiprintf_r+0x60>
 801abf4:	2a25      	cmp	r2, #37	@ 0x25
 801abf6:	d1f9      	bne.n	801abec <_svfiprintf_r+0x54>
 801abf8:	ebba 0b04 	subs.w	fp, sl, r4
 801abfc:	d00b      	beq.n	801ac16 <_svfiprintf_r+0x7e>
 801abfe:	465b      	mov	r3, fp
 801ac00:	4622      	mov	r2, r4
 801ac02:	4629      	mov	r1, r5
 801ac04:	4638      	mov	r0, r7
 801ac06:	f7ff ff6b 	bl	801aae0 <__ssputs_r>
 801ac0a:	3001      	adds	r0, #1
 801ac0c:	f000 80a7 	beq.w	801ad5e <_svfiprintf_r+0x1c6>
 801ac10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac12:	445a      	add	r2, fp
 801ac14:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac16:	f89a 3000 	ldrb.w	r3, [sl]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	f000 809f 	beq.w	801ad5e <_svfiprintf_r+0x1c6>
 801ac20:	2300      	movs	r3, #0
 801ac22:	f04f 32ff 	mov.w	r2, #4294967295
 801ac26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac2a:	f10a 0a01 	add.w	sl, sl, #1
 801ac2e:	9304      	str	r3, [sp, #16]
 801ac30:	9307      	str	r3, [sp, #28]
 801ac32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac36:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac38:	4654      	mov	r4, sl
 801ac3a:	2205      	movs	r2, #5
 801ac3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac40:	484e      	ldr	r0, [pc, #312]	@ (801ad7c <_svfiprintf_r+0x1e4>)
 801ac42:	f7e5 fafd 	bl	8000240 <memchr>
 801ac46:	9a04      	ldr	r2, [sp, #16]
 801ac48:	b9d8      	cbnz	r0, 801ac82 <_svfiprintf_r+0xea>
 801ac4a:	06d0      	lsls	r0, r2, #27
 801ac4c:	bf44      	itt	mi
 801ac4e:	2320      	movmi	r3, #32
 801ac50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac54:	0711      	lsls	r1, r2, #28
 801ac56:	bf44      	itt	mi
 801ac58:	232b      	movmi	r3, #43	@ 0x2b
 801ac5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac5e:	f89a 3000 	ldrb.w	r3, [sl]
 801ac62:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac64:	d015      	beq.n	801ac92 <_svfiprintf_r+0xfa>
 801ac66:	9a07      	ldr	r2, [sp, #28]
 801ac68:	4654      	mov	r4, sl
 801ac6a:	2000      	movs	r0, #0
 801ac6c:	f04f 0c0a 	mov.w	ip, #10
 801ac70:	4621      	mov	r1, r4
 801ac72:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac76:	3b30      	subs	r3, #48	@ 0x30
 801ac78:	2b09      	cmp	r3, #9
 801ac7a:	d94b      	bls.n	801ad14 <_svfiprintf_r+0x17c>
 801ac7c:	b1b0      	cbz	r0, 801acac <_svfiprintf_r+0x114>
 801ac7e:	9207      	str	r2, [sp, #28]
 801ac80:	e014      	b.n	801acac <_svfiprintf_r+0x114>
 801ac82:	eba0 0308 	sub.w	r3, r0, r8
 801ac86:	fa09 f303 	lsl.w	r3, r9, r3
 801ac8a:	4313      	orrs	r3, r2
 801ac8c:	9304      	str	r3, [sp, #16]
 801ac8e:	46a2      	mov	sl, r4
 801ac90:	e7d2      	b.n	801ac38 <_svfiprintf_r+0xa0>
 801ac92:	9b03      	ldr	r3, [sp, #12]
 801ac94:	1d19      	adds	r1, r3, #4
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	9103      	str	r1, [sp, #12]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	bfbb      	ittet	lt
 801ac9e:	425b      	neglt	r3, r3
 801aca0:	f042 0202 	orrlt.w	r2, r2, #2
 801aca4:	9307      	strge	r3, [sp, #28]
 801aca6:	9307      	strlt	r3, [sp, #28]
 801aca8:	bfb8      	it	lt
 801acaa:	9204      	strlt	r2, [sp, #16]
 801acac:	7823      	ldrb	r3, [r4, #0]
 801acae:	2b2e      	cmp	r3, #46	@ 0x2e
 801acb0:	d10a      	bne.n	801acc8 <_svfiprintf_r+0x130>
 801acb2:	7863      	ldrb	r3, [r4, #1]
 801acb4:	2b2a      	cmp	r3, #42	@ 0x2a
 801acb6:	d132      	bne.n	801ad1e <_svfiprintf_r+0x186>
 801acb8:	9b03      	ldr	r3, [sp, #12]
 801acba:	1d1a      	adds	r2, r3, #4
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	9203      	str	r2, [sp, #12]
 801acc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acc4:	3402      	adds	r4, #2
 801acc6:	9305      	str	r3, [sp, #20]
 801acc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ad8c <_svfiprintf_r+0x1f4>
 801accc:	7821      	ldrb	r1, [r4, #0]
 801acce:	2203      	movs	r2, #3
 801acd0:	4650      	mov	r0, sl
 801acd2:	f7e5 fab5 	bl	8000240 <memchr>
 801acd6:	b138      	cbz	r0, 801ace8 <_svfiprintf_r+0x150>
 801acd8:	9b04      	ldr	r3, [sp, #16]
 801acda:	eba0 000a 	sub.w	r0, r0, sl
 801acde:	2240      	movs	r2, #64	@ 0x40
 801ace0:	4082      	lsls	r2, r0
 801ace2:	4313      	orrs	r3, r2
 801ace4:	3401      	adds	r4, #1
 801ace6:	9304      	str	r3, [sp, #16]
 801ace8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acec:	4824      	ldr	r0, [pc, #144]	@ (801ad80 <_svfiprintf_r+0x1e8>)
 801acee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801acf2:	2206      	movs	r2, #6
 801acf4:	f7e5 faa4 	bl	8000240 <memchr>
 801acf8:	2800      	cmp	r0, #0
 801acfa:	d036      	beq.n	801ad6a <_svfiprintf_r+0x1d2>
 801acfc:	4b21      	ldr	r3, [pc, #132]	@ (801ad84 <_svfiprintf_r+0x1ec>)
 801acfe:	bb1b      	cbnz	r3, 801ad48 <_svfiprintf_r+0x1b0>
 801ad00:	9b03      	ldr	r3, [sp, #12]
 801ad02:	3307      	adds	r3, #7
 801ad04:	f023 0307 	bic.w	r3, r3, #7
 801ad08:	3308      	adds	r3, #8
 801ad0a:	9303      	str	r3, [sp, #12]
 801ad0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad0e:	4433      	add	r3, r6
 801ad10:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad12:	e76a      	b.n	801abea <_svfiprintf_r+0x52>
 801ad14:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad18:	460c      	mov	r4, r1
 801ad1a:	2001      	movs	r0, #1
 801ad1c:	e7a8      	b.n	801ac70 <_svfiprintf_r+0xd8>
 801ad1e:	2300      	movs	r3, #0
 801ad20:	3401      	adds	r4, #1
 801ad22:	9305      	str	r3, [sp, #20]
 801ad24:	4619      	mov	r1, r3
 801ad26:	f04f 0c0a 	mov.w	ip, #10
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad30:	3a30      	subs	r2, #48	@ 0x30
 801ad32:	2a09      	cmp	r2, #9
 801ad34:	d903      	bls.n	801ad3e <_svfiprintf_r+0x1a6>
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d0c6      	beq.n	801acc8 <_svfiprintf_r+0x130>
 801ad3a:	9105      	str	r1, [sp, #20]
 801ad3c:	e7c4      	b.n	801acc8 <_svfiprintf_r+0x130>
 801ad3e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad42:	4604      	mov	r4, r0
 801ad44:	2301      	movs	r3, #1
 801ad46:	e7f0      	b.n	801ad2a <_svfiprintf_r+0x192>
 801ad48:	ab03      	add	r3, sp, #12
 801ad4a:	9300      	str	r3, [sp, #0]
 801ad4c:	462a      	mov	r2, r5
 801ad4e:	4b0e      	ldr	r3, [pc, #56]	@ (801ad88 <_svfiprintf_r+0x1f0>)
 801ad50:	a904      	add	r1, sp, #16
 801ad52:	4638      	mov	r0, r7
 801ad54:	f7fd fd4c 	bl	80187f0 <_printf_float>
 801ad58:	1c42      	adds	r2, r0, #1
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	d1d6      	bne.n	801ad0c <_svfiprintf_r+0x174>
 801ad5e:	89ab      	ldrh	r3, [r5, #12]
 801ad60:	065b      	lsls	r3, r3, #25
 801ad62:	f53f af2d 	bmi.w	801abc0 <_svfiprintf_r+0x28>
 801ad66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad68:	e72c      	b.n	801abc4 <_svfiprintf_r+0x2c>
 801ad6a:	ab03      	add	r3, sp, #12
 801ad6c:	9300      	str	r3, [sp, #0]
 801ad6e:	462a      	mov	r2, r5
 801ad70:	4b05      	ldr	r3, [pc, #20]	@ (801ad88 <_svfiprintf_r+0x1f0>)
 801ad72:	a904      	add	r1, sp, #16
 801ad74:	4638      	mov	r0, r7
 801ad76:	f7fd ffc3 	bl	8018d00 <_printf_i>
 801ad7a:	e7ed      	b.n	801ad58 <_svfiprintf_r+0x1c0>
 801ad7c:	0801f008 	.word	0x0801f008
 801ad80:	0801f012 	.word	0x0801f012
 801ad84:	080187f1 	.word	0x080187f1
 801ad88:	0801aae1 	.word	0x0801aae1
 801ad8c:	0801f00e 	.word	0x0801f00e

0801ad90 <__sfputc_r>:
 801ad90:	6893      	ldr	r3, [r2, #8]
 801ad92:	3b01      	subs	r3, #1
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	b410      	push	{r4}
 801ad98:	6093      	str	r3, [r2, #8]
 801ad9a:	da08      	bge.n	801adae <__sfputc_r+0x1e>
 801ad9c:	6994      	ldr	r4, [r2, #24]
 801ad9e:	42a3      	cmp	r3, r4
 801ada0:	db01      	blt.n	801ada6 <__sfputc_r+0x16>
 801ada2:	290a      	cmp	r1, #10
 801ada4:	d103      	bne.n	801adae <__sfputc_r+0x1e>
 801ada6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adaa:	f7fe ba92 	b.w	80192d2 <__swbuf_r>
 801adae:	6813      	ldr	r3, [r2, #0]
 801adb0:	1c58      	adds	r0, r3, #1
 801adb2:	6010      	str	r0, [r2, #0]
 801adb4:	7019      	strb	r1, [r3, #0]
 801adb6:	4608      	mov	r0, r1
 801adb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adbc:	4770      	bx	lr

0801adbe <__sfputs_r>:
 801adbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adc0:	4606      	mov	r6, r0
 801adc2:	460f      	mov	r7, r1
 801adc4:	4614      	mov	r4, r2
 801adc6:	18d5      	adds	r5, r2, r3
 801adc8:	42ac      	cmp	r4, r5
 801adca:	d101      	bne.n	801add0 <__sfputs_r+0x12>
 801adcc:	2000      	movs	r0, #0
 801adce:	e007      	b.n	801ade0 <__sfputs_r+0x22>
 801add0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801add4:	463a      	mov	r2, r7
 801add6:	4630      	mov	r0, r6
 801add8:	f7ff ffda 	bl	801ad90 <__sfputc_r>
 801addc:	1c43      	adds	r3, r0, #1
 801adde:	d1f3      	bne.n	801adc8 <__sfputs_r+0xa>
 801ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ade4 <_vfiprintf_r>:
 801ade4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade8:	460d      	mov	r5, r1
 801adea:	b09d      	sub	sp, #116	@ 0x74
 801adec:	4614      	mov	r4, r2
 801adee:	4698      	mov	r8, r3
 801adf0:	4606      	mov	r6, r0
 801adf2:	b118      	cbz	r0, 801adfc <_vfiprintf_r+0x18>
 801adf4:	6a03      	ldr	r3, [r0, #32]
 801adf6:	b90b      	cbnz	r3, 801adfc <_vfiprintf_r+0x18>
 801adf8:	f7fe f92e 	bl	8019058 <__sinit>
 801adfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801adfe:	07d9      	lsls	r1, r3, #31
 801ae00:	d405      	bmi.n	801ae0e <_vfiprintf_r+0x2a>
 801ae02:	89ab      	ldrh	r3, [r5, #12]
 801ae04:	059a      	lsls	r2, r3, #22
 801ae06:	d402      	bmi.n	801ae0e <_vfiprintf_r+0x2a>
 801ae08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae0a:	f7fe fbd0 	bl	80195ae <__retarget_lock_acquire_recursive>
 801ae0e:	89ab      	ldrh	r3, [r5, #12]
 801ae10:	071b      	lsls	r3, r3, #28
 801ae12:	d501      	bpl.n	801ae18 <_vfiprintf_r+0x34>
 801ae14:	692b      	ldr	r3, [r5, #16]
 801ae16:	b99b      	cbnz	r3, 801ae40 <_vfiprintf_r+0x5c>
 801ae18:	4629      	mov	r1, r5
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	f7fe fa98 	bl	8019350 <__swsetup_r>
 801ae20:	b170      	cbz	r0, 801ae40 <_vfiprintf_r+0x5c>
 801ae22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae24:	07dc      	lsls	r4, r3, #31
 801ae26:	d504      	bpl.n	801ae32 <_vfiprintf_r+0x4e>
 801ae28:	f04f 30ff 	mov.w	r0, #4294967295
 801ae2c:	b01d      	add	sp, #116	@ 0x74
 801ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae32:	89ab      	ldrh	r3, [r5, #12]
 801ae34:	0598      	lsls	r0, r3, #22
 801ae36:	d4f7      	bmi.n	801ae28 <_vfiprintf_r+0x44>
 801ae38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae3a:	f7fe fbb9 	bl	80195b0 <__retarget_lock_release_recursive>
 801ae3e:	e7f3      	b.n	801ae28 <_vfiprintf_r+0x44>
 801ae40:	2300      	movs	r3, #0
 801ae42:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae44:	2320      	movs	r3, #32
 801ae46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ae4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae4e:	2330      	movs	r3, #48	@ 0x30
 801ae50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b000 <_vfiprintf_r+0x21c>
 801ae54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ae58:	f04f 0901 	mov.w	r9, #1
 801ae5c:	4623      	mov	r3, r4
 801ae5e:	469a      	mov	sl, r3
 801ae60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae64:	b10a      	cbz	r2, 801ae6a <_vfiprintf_r+0x86>
 801ae66:	2a25      	cmp	r2, #37	@ 0x25
 801ae68:	d1f9      	bne.n	801ae5e <_vfiprintf_r+0x7a>
 801ae6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ae6e:	d00b      	beq.n	801ae88 <_vfiprintf_r+0xa4>
 801ae70:	465b      	mov	r3, fp
 801ae72:	4622      	mov	r2, r4
 801ae74:	4629      	mov	r1, r5
 801ae76:	4630      	mov	r0, r6
 801ae78:	f7ff ffa1 	bl	801adbe <__sfputs_r>
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	f000 80a7 	beq.w	801afd0 <_vfiprintf_r+0x1ec>
 801ae82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae84:	445a      	add	r2, fp
 801ae86:	9209      	str	r2, [sp, #36]	@ 0x24
 801ae88:	f89a 3000 	ldrb.w	r3, [sl]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	f000 809f 	beq.w	801afd0 <_vfiprintf_r+0x1ec>
 801ae92:	2300      	movs	r3, #0
 801ae94:	f04f 32ff 	mov.w	r2, #4294967295
 801ae98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae9c:	f10a 0a01 	add.w	sl, sl, #1
 801aea0:	9304      	str	r3, [sp, #16]
 801aea2:	9307      	str	r3, [sp, #28]
 801aea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801aea8:	931a      	str	r3, [sp, #104]	@ 0x68
 801aeaa:	4654      	mov	r4, sl
 801aeac:	2205      	movs	r2, #5
 801aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aeb2:	4853      	ldr	r0, [pc, #332]	@ (801b000 <_vfiprintf_r+0x21c>)
 801aeb4:	f7e5 f9c4 	bl	8000240 <memchr>
 801aeb8:	9a04      	ldr	r2, [sp, #16]
 801aeba:	b9d8      	cbnz	r0, 801aef4 <_vfiprintf_r+0x110>
 801aebc:	06d1      	lsls	r1, r2, #27
 801aebe:	bf44      	itt	mi
 801aec0:	2320      	movmi	r3, #32
 801aec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aec6:	0713      	lsls	r3, r2, #28
 801aec8:	bf44      	itt	mi
 801aeca:	232b      	movmi	r3, #43	@ 0x2b
 801aecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aed0:	f89a 3000 	ldrb.w	r3, [sl]
 801aed4:	2b2a      	cmp	r3, #42	@ 0x2a
 801aed6:	d015      	beq.n	801af04 <_vfiprintf_r+0x120>
 801aed8:	9a07      	ldr	r2, [sp, #28]
 801aeda:	4654      	mov	r4, sl
 801aedc:	2000      	movs	r0, #0
 801aede:	f04f 0c0a 	mov.w	ip, #10
 801aee2:	4621      	mov	r1, r4
 801aee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aee8:	3b30      	subs	r3, #48	@ 0x30
 801aeea:	2b09      	cmp	r3, #9
 801aeec:	d94b      	bls.n	801af86 <_vfiprintf_r+0x1a2>
 801aeee:	b1b0      	cbz	r0, 801af1e <_vfiprintf_r+0x13a>
 801aef0:	9207      	str	r2, [sp, #28]
 801aef2:	e014      	b.n	801af1e <_vfiprintf_r+0x13a>
 801aef4:	eba0 0308 	sub.w	r3, r0, r8
 801aef8:	fa09 f303 	lsl.w	r3, r9, r3
 801aefc:	4313      	orrs	r3, r2
 801aefe:	9304      	str	r3, [sp, #16]
 801af00:	46a2      	mov	sl, r4
 801af02:	e7d2      	b.n	801aeaa <_vfiprintf_r+0xc6>
 801af04:	9b03      	ldr	r3, [sp, #12]
 801af06:	1d19      	adds	r1, r3, #4
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	9103      	str	r1, [sp, #12]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	bfbb      	ittet	lt
 801af10:	425b      	neglt	r3, r3
 801af12:	f042 0202 	orrlt.w	r2, r2, #2
 801af16:	9307      	strge	r3, [sp, #28]
 801af18:	9307      	strlt	r3, [sp, #28]
 801af1a:	bfb8      	it	lt
 801af1c:	9204      	strlt	r2, [sp, #16]
 801af1e:	7823      	ldrb	r3, [r4, #0]
 801af20:	2b2e      	cmp	r3, #46	@ 0x2e
 801af22:	d10a      	bne.n	801af3a <_vfiprintf_r+0x156>
 801af24:	7863      	ldrb	r3, [r4, #1]
 801af26:	2b2a      	cmp	r3, #42	@ 0x2a
 801af28:	d132      	bne.n	801af90 <_vfiprintf_r+0x1ac>
 801af2a:	9b03      	ldr	r3, [sp, #12]
 801af2c:	1d1a      	adds	r2, r3, #4
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	9203      	str	r2, [sp, #12]
 801af32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801af36:	3402      	adds	r4, #2
 801af38:	9305      	str	r3, [sp, #20]
 801af3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b010 <_vfiprintf_r+0x22c>
 801af3e:	7821      	ldrb	r1, [r4, #0]
 801af40:	2203      	movs	r2, #3
 801af42:	4650      	mov	r0, sl
 801af44:	f7e5 f97c 	bl	8000240 <memchr>
 801af48:	b138      	cbz	r0, 801af5a <_vfiprintf_r+0x176>
 801af4a:	9b04      	ldr	r3, [sp, #16]
 801af4c:	eba0 000a 	sub.w	r0, r0, sl
 801af50:	2240      	movs	r2, #64	@ 0x40
 801af52:	4082      	lsls	r2, r0
 801af54:	4313      	orrs	r3, r2
 801af56:	3401      	adds	r4, #1
 801af58:	9304      	str	r3, [sp, #16]
 801af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af5e:	4829      	ldr	r0, [pc, #164]	@ (801b004 <_vfiprintf_r+0x220>)
 801af60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801af64:	2206      	movs	r2, #6
 801af66:	f7e5 f96b 	bl	8000240 <memchr>
 801af6a:	2800      	cmp	r0, #0
 801af6c:	d03f      	beq.n	801afee <_vfiprintf_r+0x20a>
 801af6e:	4b26      	ldr	r3, [pc, #152]	@ (801b008 <_vfiprintf_r+0x224>)
 801af70:	bb1b      	cbnz	r3, 801afba <_vfiprintf_r+0x1d6>
 801af72:	9b03      	ldr	r3, [sp, #12]
 801af74:	3307      	adds	r3, #7
 801af76:	f023 0307 	bic.w	r3, r3, #7
 801af7a:	3308      	adds	r3, #8
 801af7c:	9303      	str	r3, [sp, #12]
 801af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af80:	443b      	add	r3, r7
 801af82:	9309      	str	r3, [sp, #36]	@ 0x24
 801af84:	e76a      	b.n	801ae5c <_vfiprintf_r+0x78>
 801af86:	fb0c 3202 	mla	r2, ip, r2, r3
 801af8a:	460c      	mov	r4, r1
 801af8c:	2001      	movs	r0, #1
 801af8e:	e7a8      	b.n	801aee2 <_vfiprintf_r+0xfe>
 801af90:	2300      	movs	r3, #0
 801af92:	3401      	adds	r4, #1
 801af94:	9305      	str	r3, [sp, #20]
 801af96:	4619      	mov	r1, r3
 801af98:	f04f 0c0a 	mov.w	ip, #10
 801af9c:	4620      	mov	r0, r4
 801af9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afa2:	3a30      	subs	r2, #48	@ 0x30
 801afa4:	2a09      	cmp	r2, #9
 801afa6:	d903      	bls.n	801afb0 <_vfiprintf_r+0x1cc>
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d0c6      	beq.n	801af3a <_vfiprintf_r+0x156>
 801afac:	9105      	str	r1, [sp, #20]
 801afae:	e7c4      	b.n	801af3a <_vfiprintf_r+0x156>
 801afb0:	fb0c 2101 	mla	r1, ip, r1, r2
 801afb4:	4604      	mov	r4, r0
 801afb6:	2301      	movs	r3, #1
 801afb8:	e7f0      	b.n	801af9c <_vfiprintf_r+0x1b8>
 801afba:	ab03      	add	r3, sp, #12
 801afbc:	9300      	str	r3, [sp, #0]
 801afbe:	462a      	mov	r2, r5
 801afc0:	4b12      	ldr	r3, [pc, #72]	@ (801b00c <_vfiprintf_r+0x228>)
 801afc2:	a904      	add	r1, sp, #16
 801afc4:	4630      	mov	r0, r6
 801afc6:	f7fd fc13 	bl	80187f0 <_printf_float>
 801afca:	4607      	mov	r7, r0
 801afcc:	1c78      	adds	r0, r7, #1
 801afce:	d1d6      	bne.n	801af7e <_vfiprintf_r+0x19a>
 801afd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801afd2:	07d9      	lsls	r1, r3, #31
 801afd4:	d405      	bmi.n	801afe2 <_vfiprintf_r+0x1fe>
 801afd6:	89ab      	ldrh	r3, [r5, #12]
 801afd8:	059a      	lsls	r2, r3, #22
 801afda:	d402      	bmi.n	801afe2 <_vfiprintf_r+0x1fe>
 801afdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801afde:	f7fe fae7 	bl	80195b0 <__retarget_lock_release_recursive>
 801afe2:	89ab      	ldrh	r3, [r5, #12]
 801afe4:	065b      	lsls	r3, r3, #25
 801afe6:	f53f af1f 	bmi.w	801ae28 <_vfiprintf_r+0x44>
 801afea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801afec:	e71e      	b.n	801ae2c <_vfiprintf_r+0x48>
 801afee:	ab03      	add	r3, sp, #12
 801aff0:	9300      	str	r3, [sp, #0]
 801aff2:	462a      	mov	r2, r5
 801aff4:	4b05      	ldr	r3, [pc, #20]	@ (801b00c <_vfiprintf_r+0x228>)
 801aff6:	a904      	add	r1, sp, #16
 801aff8:	4630      	mov	r0, r6
 801affa:	f7fd fe81 	bl	8018d00 <_printf_i>
 801affe:	e7e4      	b.n	801afca <_vfiprintf_r+0x1e6>
 801b000:	0801f008 	.word	0x0801f008
 801b004:	0801f012 	.word	0x0801f012
 801b008:	080187f1 	.word	0x080187f1
 801b00c:	0801adbf 	.word	0x0801adbf
 801b010:	0801f00e 	.word	0x0801f00e

0801b014 <__sflush_r>:
 801b014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b01c:	0716      	lsls	r6, r2, #28
 801b01e:	4605      	mov	r5, r0
 801b020:	460c      	mov	r4, r1
 801b022:	d454      	bmi.n	801b0ce <__sflush_r+0xba>
 801b024:	684b      	ldr	r3, [r1, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	dc02      	bgt.n	801b030 <__sflush_r+0x1c>
 801b02a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	dd48      	ble.n	801b0c2 <__sflush_r+0xae>
 801b030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b032:	2e00      	cmp	r6, #0
 801b034:	d045      	beq.n	801b0c2 <__sflush_r+0xae>
 801b036:	2300      	movs	r3, #0
 801b038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b03c:	682f      	ldr	r7, [r5, #0]
 801b03e:	6a21      	ldr	r1, [r4, #32]
 801b040:	602b      	str	r3, [r5, #0]
 801b042:	d030      	beq.n	801b0a6 <__sflush_r+0x92>
 801b044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b046:	89a3      	ldrh	r3, [r4, #12]
 801b048:	0759      	lsls	r1, r3, #29
 801b04a:	d505      	bpl.n	801b058 <__sflush_r+0x44>
 801b04c:	6863      	ldr	r3, [r4, #4]
 801b04e:	1ad2      	subs	r2, r2, r3
 801b050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b052:	b10b      	cbz	r3, 801b058 <__sflush_r+0x44>
 801b054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b056:	1ad2      	subs	r2, r2, r3
 801b058:	2300      	movs	r3, #0
 801b05a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b05c:	6a21      	ldr	r1, [r4, #32]
 801b05e:	4628      	mov	r0, r5
 801b060:	47b0      	blx	r6
 801b062:	1c43      	adds	r3, r0, #1
 801b064:	89a3      	ldrh	r3, [r4, #12]
 801b066:	d106      	bne.n	801b076 <__sflush_r+0x62>
 801b068:	6829      	ldr	r1, [r5, #0]
 801b06a:	291d      	cmp	r1, #29
 801b06c:	d82b      	bhi.n	801b0c6 <__sflush_r+0xb2>
 801b06e:	4a2a      	ldr	r2, [pc, #168]	@ (801b118 <__sflush_r+0x104>)
 801b070:	410a      	asrs	r2, r1
 801b072:	07d6      	lsls	r6, r2, #31
 801b074:	d427      	bmi.n	801b0c6 <__sflush_r+0xb2>
 801b076:	2200      	movs	r2, #0
 801b078:	6062      	str	r2, [r4, #4]
 801b07a:	04d9      	lsls	r1, r3, #19
 801b07c:	6922      	ldr	r2, [r4, #16]
 801b07e:	6022      	str	r2, [r4, #0]
 801b080:	d504      	bpl.n	801b08c <__sflush_r+0x78>
 801b082:	1c42      	adds	r2, r0, #1
 801b084:	d101      	bne.n	801b08a <__sflush_r+0x76>
 801b086:	682b      	ldr	r3, [r5, #0]
 801b088:	b903      	cbnz	r3, 801b08c <__sflush_r+0x78>
 801b08a:	6560      	str	r0, [r4, #84]	@ 0x54
 801b08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b08e:	602f      	str	r7, [r5, #0]
 801b090:	b1b9      	cbz	r1, 801b0c2 <__sflush_r+0xae>
 801b092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b096:	4299      	cmp	r1, r3
 801b098:	d002      	beq.n	801b0a0 <__sflush_r+0x8c>
 801b09a:	4628      	mov	r0, r5
 801b09c:	f7ff f89e 	bl	801a1dc <_free_r>
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	6363      	str	r3, [r4, #52]	@ 0x34
 801b0a4:	e00d      	b.n	801b0c2 <__sflush_r+0xae>
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	47b0      	blx	r6
 801b0ac:	4602      	mov	r2, r0
 801b0ae:	1c50      	adds	r0, r2, #1
 801b0b0:	d1c9      	bne.n	801b046 <__sflush_r+0x32>
 801b0b2:	682b      	ldr	r3, [r5, #0]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d0c6      	beq.n	801b046 <__sflush_r+0x32>
 801b0b8:	2b1d      	cmp	r3, #29
 801b0ba:	d001      	beq.n	801b0c0 <__sflush_r+0xac>
 801b0bc:	2b16      	cmp	r3, #22
 801b0be:	d11e      	bne.n	801b0fe <__sflush_r+0xea>
 801b0c0:	602f      	str	r7, [r5, #0]
 801b0c2:	2000      	movs	r0, #0
 801b0c4:	e022      	b.n	801b10c <__sflush_r+0xf8>
 801b0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b0ca:	b21b      	sxth	r3, r3
 801b0cc:	e01b      	b.n	801b106 <__sflush_r+0xf2>
 801b0ce:	690f      	ldr	r7, [r1, #16]
 801b0d0:	2f00      	cmp	r7, #0
 801b0d2:	d0f6      	beq.n	801b0c2 <__sflush_r+0xae>
 801b0d4:	0793      	lsls	r3, r2, #30
 801b0d6:	680e      	ldr	r6, [r1, #0]
 801b0d8:	bf08      	it	eq
 801b0da:	694b      	ldreq	r3, [r1, #20]
 801b0dc:	600f      	str	r7, [r1, #0]
 801b0de:	bf18      	it	ne
 801b0e0:	2300      	movne	r3, #0
 801b0e2:	eba6 0807 	sub.w	r8, r6, r7
 801b0e6:	608b      	str	r3, [r1, #8]
 801b0e8:	f1b8 0f00 	cmp.w	r8, #0
 801b0ec:	dde9      	ble.n	801b0c2 <__sflush_r+0xae>
 801b0ee:	6a21      	ldr	r1, [r4, #32]
 801b0f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b0f2:	4643      	mov	r3, r8
 801b0f4:	463a      	mov	r2, r7
 801b0f6:	4628      	mov	r0, r5
 801b0f8:	47b0      	blx	r6
 801b0fa:	2800      	cmp	r0, #0
 801b0fc:	dc08      	bgt.n	801b110 <__sflush_r+0xfc>
 801b0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b106:	81a3      	strh	r3, [r4, #12]
 801b108:	f04f 30ff 	mov.w	r0, #4294967295
 801b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b110:	4407      	add	r7, r0
 801b112:	eba8 0800 	sub.w	r8, r8, r0
 801b116:	e7e7      	b.n	801b0e8 <__sflush_r+0xd4>
 801b118:	dfbffffe 	.word	0xdfbffffe

0801b11c <_fflush_r>:
 801b11c:	b538      	push	{r3, r4, r5, lr}
 801b11e:	690b      	ldr	r3, [r1, #16]
 801b120:	4605      	mov	r5, r0
 801b122:	460c      	mov	r4, r1
 801b124:	b913      	cbnz	r3, 801b12c <_fflush_r+0x10>
 801b126:	2500      	movs	r5, #0
 801b128:	4628      	mov	r0, r5
 801b12a:	bd38      	pop	{r3, r4, r5, pc}
 801b12c:	b118      	cbz	r0, 801b136 <_fflush_r+0x1a>
 801b12e:	6a03      	ldr	r3, [r0, #32]
 801b130:	b90b      	cbnz	r3, 801b136 <_fflush_r+0x1a>
 801b132:	f7fd ff91 	bl	8019058 <__sinit>
 801b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d0f3      	beq.n	801b126 <_fflush_r+0xa>
 801b13e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b140:	07d0      	lsls	r0, r2, #31
 801b142:	d404      	bmi.n	801b14e <_fflush_r+0x32>
 801b144:	0599      	lsls	r1, r3, #22
 801b146:	d402      	bmi.n	801b14e <_fflush_r+0x32>
 801b148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b14a:	f7fe fa30 	bl	80195ae <__retarget_lock_acquire_recursive>
 801b14e:	4628      	mov	r0, r5
 801b150:	4621      	mov	r1, r4
 801b152:	f7ff ff5f 	bl	801b014 <__sflush_r>
 801b156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b158:	07da      	lsls	r2, r3, #31
 801b15a:	4605      	mov	r5, r0
 801b15c:	d4e4      	bmi.n	801b128 <_fflush_r+0xc>
 801b15e:	89a3      	ldrh	r3, [r4, #12]
 801b160:	059b      	lsls	r3, r3, #22
 801b162:	d4e1      	bmi.n	801b128 <_fflush_r+0xc>
 801b164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b166:	f7fe fa23 	bl	80195b0 <__retarget_lock_release_recursive>
 801b16a:	e7dd      	b.n	801b128 <_fflush_r+0xc>

0801b16c <fiprintf>:
 801b16c:	b40e      	push	{r1, r2, r3}
 801b16e:	b503      	push	{r0, r1, lr}
 801b170:	4601      	mov	r1, r0
 801b172:	ab03      	add	r3, sp, #12
 801b174:	4805      	ldr	r0, [pc, #20]	@ (801b18c <fiprintf+0x20>)
 801b176:	f853 2b04 	ldr.w	r2, [r3], #4
 801b17a:	6800      	ldr	r0, [r0, #0]
 801b17c:	9301      	str	r3, [sp, #4]
 801b17e:	f7ff fe31 	bl	801ade4 <_vfiprintf_r>
 801b182:	b002      	add	sp, #8
 801b184:	f85d eb04 	ldr.w	lr, [sp], #4
 801b188:	b003      	add	sp, #12
 801b18a:	4770      	bx	lr
 801b18c:	20000028 	.word	0x20000028

0801b190 <__swhatbuf_r>:
 801b190:	b570      	push	{r4, r5, r6, lr}
 801b192:	460c      	mov	r4, r1
 801b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b198:	2900      	cmp	r1, #0
 801b19a:	b096      	sub	sp, #88	@ 0x58
 801b19c:	4615      	mov	r5, r2
 801b19e:	461e      	mov	r6, r3
 801b1a0:	da0d      	bge.n	801b1be <__swhatbuf_r+0x2e>
 801b1a2:	89a3      	ldrh	r3, [r4, #12]
 801b1a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b1a8:	f04f 0100 	mov.w	r1, #0
 801b1ac:	bf14      	ite	ne
 801b1ae:	2340      	movne	r3, #64	@ 0x40
 801b1b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	6031      	str	r1, [r6, #0]
 801b1b8:	602b      	str	r3, [r5, #0]
 801b1ba:	b016      	add	sp, #88	@ 0x58
 801b1bc:	bd70      	pop	{r4, r5, r6, pc}
 801b1be:	466a      	mov	r2, sp
 801b1c0:	f000 f848 	bl	801b254 <_fstat_r>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	dbec      	blt.n	801b1a2 <__swhatbuf_r+0x12>
 801b1c8:	9901      	ldr	r1, [sp, #4]
 801b1ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b1ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b1d2:	4259      	negs	r1, r3
 801b1d4:	4159      	adcs	r1, r3
 801b1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b1da:	e7eb      	b.n	801b1b4 <__swhatbuf_r+0x24>

0801b1dc <__smakebuf_r>:
 801b1dc:	898b      	ldrh	r3, [r1, #12]
 801b1de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1e0:	079d      	lsls	r5, r3, #30
 801b1e2:	4606      	mov	r6, r0
 801b1e4:	460c      	mov	r4, r1
 801b1e6:	d507      	bpl.n	801b1f8 <__smakebuf_r+0x1c>
 801b1e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b1ec:	6023      	str	r3, [r4, #0]
 801b1ee:	6123      	str	r3, [r4, #16]
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	6163      	str	r3, [r4, #20]
 801b1f4:	b003      	add	sp, #12
 801b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1f8:	ab01      	add	r3, sp, #4
 801b1fa:	466a      	mov	r2, sp
 801b1fc:	f7ff ffc8 	bl	801b190 <__swhatbuf_r>
 801b200:	9f00      	ldr	r7, [sp, #0]
 801b202:	4605      	mov	r5, r0
 801b204:	4639      	mov	r1, r7
 801b206:	4630      	mov	r0, r6
 801b208:	f7ff f85c 	bl	801a2c4 <_malloc_r>
 801b20c:	b948      	cbnz	r0, 801b222 <__smakebuf_r+0x46>
 801b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b212:	059a      	lsls	r2, r3, #22
 801b214:	d4ee      	bmi.n	801b1f4 <__smakebuf_r+0x18>
 801b216:	f023 0303 	bic.w	r3, r3, #3
 801b21a:	f043 0302 	orr.w	r3, r3, #2
 801b21e:	81a3      	strh	r3, [r4, #12]
 801b220:	e7e2      	b.n	801b1e8 <__smakebuf_r+0xc>
 801b222:	89a3      	ldrh	r3, [r4, #12]
 801b224:	6020      	str	r0, [r4, #0]
 801b226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b22a:	81a3      	strh	r3, [r4, #12]
 801b22c:	9b01      	ldr	r3, [sp, #4]
 801b22e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b232:	b15b      	cbz	r3, 801b24c <__smakebuf_r+0x70>
 801b234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b238:	4630      	mov	r0, r6
 801b23a:	f000 f81d 	bl	801b278 <_isatty_r>
 801b23e:	b128      	cbz	r0, 801b24c <__smakebuf_r+0x70>
 801b240:	89a3      	ldrh	r3, [r4, #12]
 801b242:	f023 0303 	bic.w	r3, r3, #3
 801b246:	f043 0301 	orr.w	r3, r3, #1
 801b24a:	81a3      	strh	r3, [r4, #12]
 801b24c:	89a3      	ldrh	r3, [r4, #12]
 801b24e:	431d      	orrs	r5, r3
 801b250:	81a5      	strh	r5, [r4, #12]
 801b252:	e7cf      	b.n	801b1f4 <__smakebuf_r+0x18>

0801b254 <_fstat_r>:
 801b254:	b538      	push	{r3, r4, r5, lr}
 801b256:	4d07      	ldr	r5, [pc, #28]	@ (801b274 <_fstat_r+0x20>)
 801b258:	2300      	movs	r3, #0
 801b25a:	4604      	mov	r4, r0
 801b25c:	4608      	mov	r0, r1
 801b25e:	4611      	mov	r1, r2
 801b260:	602b      	str	r3, [r5, #0]
 801b262:	f7e6 f8b3 	bl	80013cc <_fstat>
 801b266:	1c43      	adds	r3, r0, #1
 801b268:	d102      	bne.n	801b270 <_fstat_r+0x1c>
 801b26a:	682b      	ldr	r3, [r5, #0]
 801b26c:	b103      	cbz	r3, 801b270 <_fstat_r+0x1c>
 801b26e:	6023      	str	r3, [r4, #0]
 801b270:	bd38      	pop	{r3, r4, r5, pc}
 801b272:	bf00      	nop
 801b274:	2000e274 	.word	0x2000e274

0801b278 <_isatty_r>:
 801b278:	b538      	push	{r3, r4, r5, lr}
 801b27a:	4d06      	ldr	r5, [pc, #24]	@ (801b294 <_isatty_r+0x1c>)
 801b27c:	2300      	movs	r3, #0
 801b27e:	4604      	mov	r4, r0
 801b280:	4608      	mov	r0, r1
 801b282:	602b      	str	r3, [r5, #0]
 801b284:	f7e6 f8b2 	bl	80013ec <_isatty>
 801b288:	1c43      	adds	r3, r0, #1
 801b28a:	d102      	bne.n	801b292 <_isatty_r+0x1a>
 801b28c:	682b      	ldr	r3, [r5, #0]
 801b28e:	b103      	cbz	r3, 801b292 <_isatty_r+0x1a>
 801b290:	6023      	str	r3, [r4, #0]
 801b292:	bd38      	pop	{r3, r4, r5, pc}
 801b294:	2000e274 	.word	0x2000e274

0801b298 <_sbrk_r>:
 801b298:	b538      	push	{r3, r4, r5, lr}
 801b29a:	4d06      	ldr	r5, [pc, #24]	@ (801b2b4 <_sbrk_r+0x1c>)
 801b29c:	2300      	movs	r3, #0
 801b29e:	4604      	mov	r4, r0
 801b2a0:	4608      	mov	r0, r1
 801b2a2:	602b      	str	r3, [r5, #0]
 801b2a4:	f7e6 f8ba 	bl	800141c <_sbrk>
 801b2a8:	1c43      	adds	r3, r0, #1
 801b2aa:	d102      	bne.n	801b2b2 <_sbrk_r+0x1a>
 801b2ac:	682b      	ldr	r3, [r5, #0]
 801b2ae:	b103      	cbz	r3, 801b2b2 <_sbrk_r+0x1a>
 801b2b0:	6023      	str	r3, [r4, #0]
 801b2b2:	bd38      	pop	{r3, r4, r5, pc}
 801b2b4:	2000e274 	.word	0x2000e274

0801b2b8 <abort>:
 801b2b8:	b508      	push	{r3, lr}
 801b2ba:	2006      	movs	r0, #6
 801b2bc:	f000 f88c 	bl	801b3d8 <raise>
 801b2c0:	2001      	movs	r0, #1
 801b2c2:	f7e6 f84f 	bl	8001364 <_exit>

0801b2c6 <_calloc_r>:
 801b2c6:	b570      	push	{r4, r5, r6, lr}
 801b2c8:	fba1 5402 	umull	r5, r4, r1, r2
 801b2cc:	b93c      	cbnz	r4, 801b2de <_calloc_r+0x18>
 801b2ce:	4629      	mov	r1, r5
 801b2d0:	f7fe fff8 	bl	801a2c4 <_malloc_r>
 801b2d4:	4606      	mov	r6, r0
 801b2d6:	b928      	cbnz	r0, 801b2e4 <_calloc_r+0x1e>
 801b2d8:	2600      	movs	r6, #0
 801b2da:	4630      	mov	r0, r6
 801b2dc:	bd70      	pop	{r4, r5, r6, pc}
 801b2de:	220c      	movs	r2, #12
 801b2e0:	6002      	str	r2, [r0, #0]
 801b2e2:	e7f9      	b.n	801b2d8 <_calloc_r+0x12>
 801b2e4:	462a      	mov	r2, r5
 801b2e6:	4621      	mov	r1, r4
 801b2e8:	f7fe f8b2 	bl	8019450 <memset>
 801b2ec:	e7f5      	b.n	801b2da <_calloc_r+0x14>

0801b2ee <__ascii_mbtowc>:
 801b2ee:	b082      	sub	sp, #8
 801b2f0:	b901      	cbnz	r1, 801b2f4 <__ascii_mbtowc+0x6>
 801b2f2:	a901      	add	r1, sp, #4
 801b2f4:	b142      	cbz	r2, 801b308 <__ascii_mbtowc+0x1a>
 801b2f6:	b14b      	cbz	r3, 801b30c <__ascii_mbtowc+0x1e>
 801b2f8:	7813      	ldrb	r3, [r2, #0]
 801b2fa:	600b      	str	r3, [r1, #0]
 801b2fc:	7812      	ldrb	r2, [r2, #0]
 801b2fe:	1e10      	subs	r0, r2, #0
 801b300:	bf18      	it	ne
 801b302:	2001      	movne	r0, #1
 801b304:	b002      	add	sp, #8
 801b306:	4770      	bx	lr
 801b308:	4610      	mov	r0, r2
 801b30a:	e7fb      	b.n	801b304 <__ascii_mbtowc+0x16>
 801b30c:	f06f 0001 	mvn.w	r0, #1
 801b310:	e7f8      	b.n	801b304 <__ascii_mbtowc+0x16>

0801b312 <_realloc_r>:
 801b312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b316:	4680      	mov	r8, r0
 801b318:	4615      	mov	r5, r2
 801b31a:	460c      	mov	r4, r1
 801b31c:	b921      	cbnz	r1, 801b328 <_realloc_r+0x16>
 801b31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b322:	4611      	mov	r1, r2
 801b324:	f7fe bfce 	b.w	801a2c4 <_malloc_r>
 801b328:	b92a      	cbnz	r2, 801b336 <_realloc_r+0x24>
 801b32a:	f7fe ff57 	bl	801a1dc <_free_r>
 801b32e:	2400      	movs	r4, #0
 801b330:	4620      	mov	r0, r4
 801b332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b336:	f000 f86b 	bl	801b410 <_malloc_usable_size_r>
 801b33a:	4285      	cmp	r5, r0
 801b33c:	4606      	mov	r6, r0
 801b33e:	d802      	bhi.n	801b346 <_realloc_r+0x34>
 801b340:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b344:	d8f4      	bhi.n	801b330 <_realloc_r+0x1e>
 801b346:	4629      	mov	r1, r5
 801b348:	4640      	mov	r0, r8
 801b34a:	f7fe ffbb 	bl	801a2c4 <_malloc_r>
 801b34e:	4607      	mov	r7, r0
 801b350:	2800      	cmp	r0, #0
 801b352:	d0ec      	beq.n	801b32e <_realloc_r+0x1c>
 801b354:	42b5      	cmp	r5, r6
 801b356:	462a      	mov	r2, r5
 801b358:	4621      	mov	r1, r4
 801b35a:	bf28      	it	cs
 801b35c:	4632      	movcs	r2, r6
 801b35e:	f7fe f930 	bl	80195c2 <memcpy>
 801b362:	4621      	mov	r1, r4
 801b364:	4640      	mov	r0, r8
 801b366:	f7fe ff39 	bl	801a1dc <_free_r>
 801b36a:	463c      	mov	r4, r7
 801b36c:	e7e0      	b.n	801b330 <_realloc_r+0x1e>

0801b36e <__ascii_wctomb>:
 801b36e:	4603      	mov	r3, r0
 801b370:	4608      	mov	r0, r1
 801b372:	b141      	cbz	r1, 801b386 <__ascii_wctomb+0x18>
 801b374:	2aff      	cmp	r2, #255	@ 0xff
 801b376:	d904      	bls.n	801b382 <__ascii_wctomb+0x14>
 801b378:	228a      	movs	r2, #138	@ 0x8a
 801b37a:	601a      	str	r2, [r3, #0]
 801b37c:	f04f 30ff 	mov.w	r0, #4294967295
 801b380:	4770      	bx	lr
 801b382:	700a      	strb	r2, [r1, #0]
 801b384:	2001      	movs	r0, #1
 801b386:	4770      	bx	lr

0801b388 <_raise_r>:
 801b388:	291f      	cmp	r1, #31
 801b38a:	b538      	push	{r3, r4, r5, lr}
 801b38c:	4605      	mov	r5, r0
 801b38e:	460c      	mov	r4, r1
 801b390:	d904      	bls.n	801b39c <_raise_r+0x14>
 801b392:	2316      	movs	r3, #22
 801b394:	6003      	str	r3, [r0, #0]
 801b396:	f04f 30ff 	mov.w	r0, #4294967295
 801b39a:	bd38      	pop	{r3, r4, r5, pc}
 801b39c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b39e:	b112      	cbz	r2, 801b3a6 <_raise_r+0x1e>
 801b3a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3a4:	b94b      	cbnz	r3, 801b3ba <_raise_r+0x32>
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	f000 f830 	bl	801b40c <_getpid_r>
 801b3ac:	4622      	mov	r2, r4
 801b3ae:	4601      	mov	r1, r0
 801b3b0:	4628      	mov	r0, r5
 801b3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3b6:	f000 b817 	b.w	801b3e8 <_kill_r>
 801b3ba:	2b01      	cmp	r3, #1
 801b3bc:	d00a      	beq.n	801b3d4 <_raise_r+0x4c>
 801b3be:	1c59      	adds	r1, r3, #1
 801b3c0:	d103      	bne.n	801b3ca <_raise_r+0x42>
 801b3c2:	2316      	movs	r3, #22
 801b3c4:	6003      	str	r3, [r0, #0]
 801b3c6:	2001      	movs	r0, #1
 801b3c8:	e7e7      	b.n	801b39a <_raise_r+0x12>
 801b3ca:	2100      	movs	r1, #0
 801b3cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b3d0:	4620      	mov	r0, r4
 801b3d2:	4798      	blx	r3
 801b3d4:	2000      	movs	r0, #0
 801b3d6:	e7e0      	b.n	801b39a <_raise_r+0x12>

0801b3d8 <raise>:
 801b3d8:	4b02      	ldr	r3, [pc, #8]	@ (801b3e4 <raise+0xc>)
 801b3da:	4601      	mov	r1, r0
 801b3dc:	6818      	ldr	r0, [r3, #0]
 801b3de:	f7ff bfd3 	b.w	801b388 <_raise_r>
 801b3e2:	bf00      	nop
 801b3e4:	20000028 	.word	0x20000028

0801b3e8 <_kill_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4d07      	ldr	r5, [pc, #28]	@ (801b408 <_kill_r+0x20>)
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	4604      	mov	r4, r0
 801b3f0:	4608      	mov	r0, r1
 801b3f2:	4611      	mov	r1, r2
 801b3f4:	602b      	str	r3, [r5, #0]
 801b3f6:	f7e5 ffa3 	bl	8001340 <_kill>
 801b3fa:	1c43      	adds	r3, r0, #1
 801b3fc:	d102      	bne.n	801b404 <_kill_r+0x1c>
 801b3fe:	682b      	ldr	r3, [r5, #0]
 801b400:	b103      	cbz	r3, 801b404 <_kill_r+0x1c>
 801b402:	6023      	str	r3, [r4, #0]
 801b404:	bd38      	pop	{r3, r4, r5, pc}
 801b406:	bf00      	nop
 801b408:	2000e274 	.word	0x2000e274

0801b40c <_getpid_r>:
 801b40c:	f7e5 bf90 	b.w	8001330 <_getpid>

0801b410 <_malloc_usable_size_r>:
 801b410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b414:	1f18      	subs	r0, r3, #4
 801b416:	2b00      	cmp	r3, #0
 801b418:	bfbc      	itt	lt
 801b41a:	580b      	ldrlt	r3, [r1, r0]
 801b41c:	18c0      	addlt	r0, r0, r3
 801b41e:	4770      	bx	lr

0801b420 <_init>:
 801b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b422:	bf00      	nop
 801b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b426:	bc08      	pop	{r3}
 801b428:	469e      	mov	lr, r3
 801b42a:	4770      	bx	lr

0801b42c <_fini>:
 801b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b42e:	bf00      	nop
 801b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b432:	bc08      	pop	{r3}
 801b434:	469e      	mov	lr, r3
 801b436:	4770      	bx	lr
