
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bec8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d14  0801c0c8  0801c0c8  0001d0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fddc  0801fddc  000211e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fddc  0801fddc  00020ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fde4  0801fde4  000211e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fde4  0801fde4  00020de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fde8  0801fde8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0801fdec  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011e44  200001e4  0801ffd0  000211e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012028  0801ffd0  00022028  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000211e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bb2d  00000000  00000000  00021212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000933a  00000000  00000000  0005cd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bc8  00000000  00000000  00066080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022a0  00000000  00000000  00068c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c18f  00000000  00000000  0006aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004844f  00000000  00000000  000a7077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126fd2  00000000  00000000  000ef4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00216498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c54c  00000000  00000000  002164dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00222a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c0b0 	.word	0x0801c0b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0801c0b0 	.word	0x0801c0b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Timer3_Init>:
volatile uint32_t task_start = 0;
volatile uint32_t pump_start = 0;
volatile uint32_t difference = 0;

void Timer3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

    __HAL_RCC_TIM3_CLK_ENABLE();
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <Timer3_Init+0x58>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <Timer3_Init+0x58>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <Timer3_Init+0x58>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

    htim3.Instance = TIM3;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <Timer3_Init+0x5c>)
 8000600:	4a0f      	ldr	r2, [pc, #60]	@ (8000640 <Timer3_Init+0x60>)
 8000602:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 10800 - 1;
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <Timer3_Init+0x5c>)
 8000606:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800060a:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 15 - 1;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <Timer3_Init+0x5c>)
 800060e:	220e      	movs	r2, #14
 8000610:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <Timer3_Init+0x5c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <Timer3_Init+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <Timer3_Init+0x5c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&htim3);
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <Timer3_Init+0x5c>)
 8000626:	f004 fdf7 	bl	8005218 <HAL_TIM_Base_Init>

    HAL_TIM_Base_Start_IT(&htim3);
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <Timer3_Init+0x5c>)
 800062c:	f004 fe56 	bl	80052dc <HAL_TIM_Base_Start_IT>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	20000208 	.word	0x20000208
 8000640:	40000400 	.word	0x40000400

08000644 <DWT_Init>:
void DWT_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <DWT_Init+0x34>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <DWT_Init+0x34>)
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000652:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <DWT_Init+0x38>)
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <DWT_Init+0x3c>)
 8000658:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <DWT_Init+0x38>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <DWT_Init+0x38>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a05      	ldr	r2, [pc, #20]	@ (800067c <DWT_Init+0x38>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000edf0 	.word	0xe000edf0
 800067c:	e0001000 	.word	0xe0001000
 8000680:	c5acce55 	.word	0xc5acce55

08000684 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af02      	add	r7, sp, #8

	    if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE)) {
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <TIM3_IRQHandler+0x44>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b01      	cmp	r3, #1
 8000696:	d113      	bne.n	80006c0 <TIM3_IRQHandler+0x3c>
	        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <TIM3_IRQHandler+0x44>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f06f 0201 	mvn.w	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
	        notify_start = DWT->CYCCNT;
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <TIM3_IRQHandler+0x48>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <TIM3_IRQHandler+0x4c>)
 80006a8:	6013      	str	r3, [r2, #0]
	        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
	        xTaskNotifyFromISR(adcTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <TIM3_IRQHandler+0x50>)
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f00a fade 	bl	800ac7c <xTaskGenericNotifyFromISR>

	    }
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000208 	.word	0x20000208
 80006cc:	e0001000 	.word	0xe0001000
 80006d0:	20000254 	.word	0x20000254
 80006d4:	20000200 	.word	0x20000200

080006d8 <humiditySensorAdcInit>:
void humiditySensorAdcInit(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <humiditySensorAdcInit+0x80>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000758 <humiditySensorAdcInit+0x80>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <humiditySensorAdcInit+0x80>)
 80006ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000758 <humiditySensorAdcInit+0x80>)
 80006ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006f2:	6453      	str	r3, [r2, #68]	@ 0x44

	GPIOA->MODER |= GPIO_MODER_MODER3;
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <humiditySensorAdcInit+0x84>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a18      	ldr	r2, [pc, #96]	@ (800075c <humiditySensorAdcInit+0x84>)
 80006fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80006fe:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <humiditySensorAdcInit+0x84>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a15      	ldr	r2, [pc, #84]	@ (800075c <humiditySensorAdcInit+0x84>)
 8000706:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800070a:	60d3      	str	r3, [r2, #12]

	ADC1->CR2 = 0;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <humiditySensorAdcInit+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 = 3;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000720:	2203      	movs	r2, #3
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC1->SMPR2 |= ADC_SMPR2_SMP3;
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <humiditySensorAdcInit+0x88>)
 800072a:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 800072e:	6113      	str	r3, [r2, #16]
	ADC1->CR1 = 0;
 8000730:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= ADC_CR2_EXTSEL;
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	4a09      	ldr	r2, [pc, #36]	@ (8000760 <humiditySensorAdcInit+0x88>)
 800073c:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000740:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <humiditySensorAdcInit+0x88>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074c:	6093      	str	r3, [r2, #8]

}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40012000 	.word	0x40012000

08000764 <humiditySensorReadValue>:

uint16_t humiditySensorReadValue(void){
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <humiditySensorReadValue+0x30>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <humiditySensorReadValue+0x30>)
 800076e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000772:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & ADC_SR_EOC));
 8000774:	bf00      	nop
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <humiditySensorReadValue+0x30>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <humiditySensorReadValue+0x12>

	return ADC1 -> DR;
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <humiditySensorReadValue+0x30>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	b29b      	uxth	r3, r3

}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000

08000798 <humidity_read_task>:
void humidity_read_task(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	while (1)
	    {
			ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	2001      	movs	r0, #1
 80007a6:	f00a f961 	bl	800aa6c <ulTaskNotifyTake>
			//PrintTaskTiming("ADC_start");

	        int adc_value = humiditySensorReadValue();
 80007aa:	f7ff ffdb 	bl	8000764 <humiditySensorReadValue>
 80007ae:	4603      	mov	r3, r0
 80007b0:	617b      	str	r3, [r7, #20]
	        task_start = DWT->CYCCNT;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <humidity_read_task+0x88>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <humidity_read_task+0x8c>)
 80007b8:	6013      	str	r3, [r2, #0]
	        if (adc_value < 1200) adc_value = 1200;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80007c0:	da02      	bge.n	80007c8 <humidity_read_task+0x30>
 80007c2:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80007c6:	617b      	str	r3, [r7, #20]
	        if (adc_value > 4000) adc_value = 4000;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80007ce:	dd02      	ble.n	80007d6 <humidity_read_task+0x3e>
 80007d0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80007d4:	617b      	str	r3, [r7, #20]

	        float humidity = (float)(4000 - adc_value) / (4000 - 1200) * 100;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e4:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000828 <humidity_read_task+0x90>
 80007e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800082c <humidity_read_task+0x94>
 80007f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f4:	edc7 7a04 	vstr	s15, [r7, #16]

	        HumiditySensorData sensorData;
	        sensorData.humidity = humidity;
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	60bb      	str	r3, [r7, #8]
	        sensorData.adc_value = adc_value;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	60fb      	str	r3, [r7, #12]


	        if (xQueueOverwrite(sensorQueue, &sensorData) != pdTRUE)
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <humidity_read_task+0x98>)
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	f107 0108 	add.w	r1, r7, #8
 8000808:	2302      	movs	r3, #2
 800080a:	2200      	movs	r2, #0
 800080c:	f007 fed4 	bl	80085b8 <xQueueGenericSend>
	        {
	           // printf("Failed to send humidity data to queue\n");
	        }

	       // PrintTaskTiming("ADC_end");
	        xTaskNotify(pumpTaskHandle, 0, eNoAction);
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <humidity_read_task+0x9c>)
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	f00a f96f 	bl	800aafc <xTaskGenericNotify>
	    {
 800081e:	e7bf      	b.n	80007a0 <humidity_read_task+0x8>
 8000820:	e0001000 	.word	0xe0001000
 8000824:	20000258 	.word	0x20000258
 8000828:	452f0000 	.word	0x452f0000
 800082c:	42c80000 	.word	0x42c80000
 8000830:	20000744 	.word	0x20000744
 8000834:	20000204 	.word	0x20000204

08000838 <init_humidity_task>:


	    }
}
void init_humidity_task(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
    osThreadAttr_t humidityTask_attributes = {
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2224      	movs	r2, #36	@ 0x24
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f019 fc4b 	bl	801a0e0 <memset>
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <init_humidity_task+0x3c>)
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	2332      	movs	r3, #50	@ 0x32
 8000856:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityRealtime2,
    };


    adcTaskHandle =   osThreadNew(humidity_read_task, NULL, &humidityTask_attributes);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	461a      	mov	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <init_humidity_task+0x40>)
 8000860:	f006 fdb6 	bl	80073d0 <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <init_humidity_task+0x44>)
 8000868:	6013      	str	r3, [r2, #0]

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	@ 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0801c0c8 	.word	0x0801c0c8
 8000878:	08000799 	.word	0x08000799
 800087c:	20000200 	.word	0x20000200

08000880 <pump_control_task>:

void pump_control_task(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	481f      	ldr	r0, [pc, #124]	@ (800090c <pump_control_task+0x8c>)
 800088e:	f002 fdb9 	bl	8003404 <HAL_GPIO_WritePin>
    HumiditySensorData sensor_data;

    while (1)

    {
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000892:	f04f 31ff 	mov.w	r1, #4294967295
 8000896:	2001      	movs	r0, #1
 8000898:	f00a f8e8 	bl	800aa6c <ulTaskNotifyTake>
    	//PrintTaskTiming("PumpControl_start");

        if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 800089c:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <pump_control_task+0x90>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f107 010c 	add.w	r1, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f008 facc 	bl	8008e44 <xQueuePeek>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1ef      	bne.n	8000892 <pump_control_task+0x12>
        {	pump_start = DWT->CYCCNT;
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <pump_control_task+0x94>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <pump_control_task+0x98>)
 80008b8:	6013      	str	r3, [r2, #0]
            if (sensor_data.humidity < 10.0)
 80008ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80008be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80008c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ca:	d505      	bpl.n	80008d8 <pump_control_task+0x58>
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480e      	ldr	r0, [pc, #56]	@ (800090c <pump_control_task+0x8c>)
 80008d2:	f002 fd97 	bl	8003404 <HAL_GPIO_WritePin>
 80008d6:	e004      	b.n	80008e2 <pump_control_task+0x62>
               // printf("Pompa oprită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
            else
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2180      	movs	r1, #128	@ 0x80
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <pump_control_task+0x8c>)
 80008de:	f002 fd91 	bl	8003404 <HAL_GPIO_WritePin>
               // printf("Pompa pornită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
            difference = pump_start - task_start;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <pump_control_task+0x98>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <pump_control_task+0x9c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <pump_control_task+0xa0>)
 80008ee:	6013      	str	r3, [r2, #0]
            float time_in_seconds;
            time_in_seconds = (float)difference / 216000000.0f;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <pump_control_task+0xa0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008fc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000924 <pump_control_task+0xa4>
 8000900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000904:	edc7 7a05 	vstr	s15, [r7, #20]
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000908:	e7c3      	b.n	8000892 <pump_control_task+0x12>
 800090a:	bf00      	nop
 800090c:	40020800 	.word	0x40020800
 8000910:	20000744 	.word	0x20000744
 8000914:	e0001000 	.word	0xe0001000
 8000918:	2000025c 	.word	0x2000025c
 800091c:	20000258 	.word	0x20000258
 8000920:	20000260 	.word	0x20000260
 8000924:	4d4dfe60 	.word	0x4d4dfe60

08000928 <init_pump_task>:

    }
}

void init_pump_task(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
    osThreadAttr_t pumpTask_attributes = {
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2224      	movs	r2, #36	@ 0x24
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f019 fbd3 	bl	801a0e0 <memset>
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <init_pump_task+0x44>)
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	2331      	movs	r3, #49	@ 0x31
 8000946:	61fb      	str	r3, [r7, #28]
        .name = "pumpTask",
        .stack_size = 512 * 4,
        .priority = (osPriority_t) osPriorityRealtime1,
    };
    DWT_Init();
 8000948:	f7ff fe7c 	bl	8000644 <DWT_Init>
    Timer3_Init();
 800094c:	f7ff fe48 	bl	80005e0 <Timer3_Init>

    pumpTaskHandle =  osThreadNew(pump_control_task, NULL, &pumpTask_attributes);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	461a      	mov	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <init_pump_task+0x48>)
 8000958:	f006 fd3a 	bl	80073d0 <osThreadNew>
 800095c:	4603      	mov	r3, r0
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <init_pump_task+0x4c>)
 8000960:	6013      	str	r3, [r2, #0]

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0801c0d8 	.word	0x0801c0d8
 8000970:	08000881 	.word	0x08000881
 8000974:	20000204 	.word	0x20000204

08000978 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f023 030f 	bic.w	r3, r3, #15
 8000988:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	f043 030c 	orr.w	r3, r3, #12
 8000996:	b2db      	uxtb	r3, r3
 8000998:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	f043 030c 	orr.w	r3, r3, #12
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009b8:	f107 0208 	add.w	r2, r7, #8
 80009bc:	2364      	movs	r3, #100	@ 0x64
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2304      	movs	r3, #4
 80009c2:	214e      	movs	r1, #78	@ 0x4e
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <lcd_send_cmd+0x5c>)
 80009c6:	f002 fdc7 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200002f0 	.word	0x200002f0

080009d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f023 030f 	bic.w	r3, r3, #15
 80009e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	f043 030d 	orr.w	r3, r3, #13
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f043 0309 	orr.w	r3, r3, #9
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	f043 030d 	orr.w	r3, r3, #13
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	f043 0309 	orr.w	r3, r3, #9
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a18:	f107 0208 	add.w	r2, r7, #8
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2304      	movs	r3, #4
 8000a22:	214e      	movs	r1, #78	@ 0x4e
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <lcd_send_data+0x5c>)
 8000a26:	f002 fd97 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002f0 	.word	0x200002f0

08000a38 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <lcd_put_cur+0x18>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <lcd_put_cur+0x22>
 8000a4e:	e009      	b.n	8000a64 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a56:	603b      	str	r3, [r7, #0]
            break;
 8000a58:	e004      	b.n	8000a64 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000a60:	603b      	str	r3, [r7, #0]
            break;
 8000a62:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff85 	bl	8000978 <lcd_send_cmd>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <lcd_init>:


void lcd_init (void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0

	vTaskDelay(pdMS_TO_TICKS(40));
 8000a7a:	2028      	movs	r0, #40	@ 0x28
 8000a7c:	f008 ff1a 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x30);
 8000a80:	2030      	movs	r0, #48	@ 0x30
 8000a82:	f7ff ff79 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(5));
 8000a86:	2005      	movs	r0, #5
 8000a88:	f008 ff14 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x30);
 8000a8c:	2030      	movs	r0, #48	@ 0x30
 8000a8e:	f7ff ff73 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 8000a92:	2001      	movs	r0, #1
 8000a94:	f008 ff0e 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x30);
 8000a98:	2030      	movs	r0, #48	@ 0x30
 8000a9a:	f7ff ff6d 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f008 ff08 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x20);
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	f7ff ff67 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f008 ff02 	bl	80098b4 <vTaskDelay>


	lcd_send_cmd (0x28);
 8000ab0:	2028      	movs	r0, #40	@ 0x28
 8000ab2:	f7ff ff61 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f008 fefc 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x08);
 8000abc:	2008      	movs	r0, #8
 8000abe:	f7ff ff5b 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f008 fef6 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x01);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff ff55 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1)); vTaskDelay(pdMS_TO_TICKS(1));
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f008 fef0 	bl	80098b4 <vTaskDelay>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f008 feed 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x06);
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff ff4c 	bl	8000978 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f008 fee7 	bl	80098b4 <vTaskDelay>
	lcd_send_cmd (0x0C);
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f7ff ff46 	bl	8000978 <lcd_send_cmd>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000af8:	e006      	b.n	8000b08 <lcd_send_string+0x18>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff68 	bl	80009d8 <lcd_send_data>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f4      	bne.n	8000afa <lcd_send_string+0xa>
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <init_lcd_control_task>:
void init_lcd_control_task(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0



    osThreadAttr_t lcdTask_attributes = {
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2224      	movs	r2, #36	@ 0x24
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f019 fad9 	bl	801a0e0 <memset>
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <init_lcd_control_task+0x34>)
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	231f      	movs	r3, #31
 8000b3a:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = (osPriority_t)osPriorityNormal7,
    };


    osThreadNew(lcd_control_task, NULL, &lcdTask_attributes);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <init_lcd_control_task+0x38>)
 8000b44:	f006 fc44 	bl	80073d0 <osThreadNew>
}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	0801c0e4 	.word	0x0801c0e4
 8000b54:	08000b59 	.word	0x08000b59

08000b58 <lcd_control_task>:
void lcd_control_task(void *argument)
{	lcd_init();
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	f7ff ff89 	bl	8000a76 <lcd_init>
char humidity_str[16];
//lcd_clear();
	while(1)
	{
		//PrintTaskTiming("LCD_start");
	    if (xQueuePeek(sensorQueue, &sensor_data, pdMS_TO_TICKS(10)) == pdTRUE)
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <lcd_control_task+0x74>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 f968 	bl	8008e44 <xQueuePeek>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d123      	bne.n	8000bc2 <lcd_control_task+0x6a>
	    {


		    sprintf(adc_str, "ADC: %d", sensor_data.adc_value);
 8000b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4913      	ldr	r1, [pc, #76]	@ (8000bd0 <lcd_control_task+0x78>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f019 f98a 	bl	8019e9c <siprintf>
		    sprintf(humidity_str, "Hum: %.2f%%", sensor_data.humidity);
 8000b88:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b90:	f107 0008 	add.w	r0, r7, #8
 8000b94:	ec53 2b17 	vmov	r2, r3, d7
 8000b98:	490e      	ldr	r1, [pc, #56]	@ (8000bd4 <lcd_control_task+0x7c>)
 8000b9a:	f019 f97f 	bl	8019e9c <siprintf>

		    //lcd_clear();

		    lcd_put_cur(0, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff49 	bl	8000a38 <lcd_put_cur>
		    lcd_send_string(adc_str);
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffa0 	bl	8000af0 <lcd_send_string>
		    lcd_put_cur(1, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff ff40 	bl	8000a38 <lcd_put_cur>
		    lcd_send_string(humidity_str);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff97 	bl	8000af0 <lcd_send_string>
	    }
	  //  PrintTaskTiming("LCD_end");


	    vTaskDelay(pdMS_TO_TICKS(200));
 8000bc2:	20c8      	movs	r0, #200	@ 0xc8
 8000bc4:	f008 fe76 	bl	80098b4 <vTaskDelay>
	    if (xQueuePeek(sensorQueue, &sensor_data, pdMS_TO_TICKS(10)) == pdTRUE)
 8000bc8:	e7cc      	b.n	8000b64 <lcd_control_task+0xc>
 8000bca:	bf00      	nop
 8000bcc:	20000744 	.word	0x20000744
 8000bd0:	0801c0f4 	.word	0x0801c0f4
 8000bd4:	0801c0fc 	.word	0x0801c0fc

08000bd8 <init_led_control_task>:

static uint8_t led_states[3] = {0, 0, 0};


void init_led_control_task(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0

    ledQueue = xQueueCreate(5, sizeof(LedMessage));
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	2005      	movs	r0, #5
 8000be4:	f007 fb4f 	bl	8008286 <xQueueGenericCreate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <init_led_control_task+0x54>)
 8000bec:	6013      	str	r3, [r2, #0]
    if (ledQueue == NULL) {
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <init_led_control_task+0x54>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <init_led_control_task+0x26>
        printf("Failed to create LED queue\n");
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <init_led_control_task+0x58>)
 8000bf8:	f019 f914 	bl	8019e24 <puts>
 8000bfc:	e012      	b.n	8000c24 <init_led_control_task+0x4c>
        return;
    }


    osThreadAttr_t ledTask_attributes = {
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2224      	movs	r2, #36	@ 0x24
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f019 fa6b 	bl	801a0e0 <memset>
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <init_led_control_task+0x5c>)
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	2318      	movs	r3, #24
 8000c16:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };


    osThreadNew(led_control_task, NULL, &ledTask_attributes);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <init_led_control_task+0x60>)
 8000c20:	f006 fbd6 	bl	80073d0 <osThreadNew>
}
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000264 	.word	0x20000264
 8000c30:	0801c108 	.word	0x0801c108
 8000c34:	0801c124 	.word	0x0801c124
 8000c38:	08000c3d 	.word	0x08000c3d

08000c3c <led_control_task>:


void led_control_task(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    LedMessage message;


    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2101      	movs	r1, #1
 8000c48:	4828      	ldr	r0, [pc, #160]	@ (8000cec <led_control_task+0xb0>)
 8000c4a:	f002 fbdb 	bl	8003404 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	4826      	ldr	r0, [pc, #152]	@ (8000cec <led_control_task+0xb0>)
 8000c54:	f002 fbd6 	bl	8003404 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5e:	4823      	ldr	r0, [pc, #140]	@ (8000cec <led_control_task+0xb0>)
 8000c60:	f002 fbd0 	bl	8003404 <HAL_GPIO_WritePin>

    while (1) {
    //	PrintTaskTiming("LED_start");
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <led_control_task+0xb4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f107 010c 	add.w	r1, r7, #12
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fee7 	bl	8008a44 <xQueueReceive>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d1f3      	bne.n	8000c64 <led_control_task+0x28>
            uint8_t led_index = (uint8_t)message.led;
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	73fb      	strb	r3, [r7, #15]

            if (led_index < 3) {
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d8ee      	bhi.n	8000c64 <led_control_task+0x28>

                led_states[led_index] ^= 1;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf4 <led_control_task+0xb8>)
 8000c8a:	5cd2      	ldrb	r2, [r2, r3]
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f082 0201 	eor.w	r2, r2, #1
 8000c92:	b2d1      	uxtb	r1, r2
 8000c94:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <led_control_task+0xb8>)
 8000c96:	54d1      	strb	r1, [r2, r3]
                GPIO_PinState pin_state = (led_states[led_index]) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <led_control_task+0xb8>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	73bb      	strb	r3, [r7, #14]

                switch (message.led) {
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d014      	beq.n	8000cda <led_control_task+0x9e>
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	dcd7      	bgt.n	8000c64 <led_control_task+0x28>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <led_control_task+0x82>
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d007      	beq.n	8000ccc <led_control_task+0x90>
 8000cbc:	e015      	b.n	8000cea <led_control_task+0xae>
                    case LED1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state); break;
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <led_control_task+0xb0>)
 8000cc6:	f002 fb9d 	bl	8003404 <HAL_GPIO_WritePin>
 8000cca:	e00e      	b.n	8000cea <led_control_task+0xae>
                    case LED2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); break;
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2180      	movs	r1, #128	@ 0x80
 8000cd2:	4806      	ldr	r0, [pc, #24]	@ (8000cec <led_control_task+0xb0>)
 8000cd4:	f002 fb96 	bl	8003404 <HAL_GPIO_WritePin>
 8000cd8:	e007      	b.n	8000cea <led_control_task+0xae>
                    case LED3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); break;
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce2:	4802      	ldr	r0, [pc, #8]	@ (8000cec <led_control_task+0xb0>)
 8000ce4:	f002 fb8e 	bl	8003404 <HAL_GPIO_WritePin>
 8000ce8:	bf00      	nop
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 8000cea:	e7bb      	b.n	8000c64 <led_control_task+0x28>
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	20000264 	.word	0x20000264
 8000cf4:	20000268 	.word	0x20000268

08000cf8 <InitUartMutex>:
           task_name,
           tick_now,
           tick_now * portTICK_PERIOD_MS,
           (float)(tick_now * portTICK_PERIOD_MS) / 1000.0);
}
void InitUartMutex(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    uartMutex = osMutexNew(NULL);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f006 fc3b 	bl	8007578 <osMutexNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a01      	ldr	r2, [pc, #4]	@ (8000d0c <InitUartMutex+0x14>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000740 	.word	0x20000740

08000d10 <QueueInit>:

QueueHandle_t sensorQueue;

void QueueInit(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	sensorQueue = xQueueCreate(1,sizeof(HumiditySensorData));
 8000d14:	2200      	movs	r2, #0
 8000d16:	2108      	movs	r1, #8
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f007 fab4 	bl	8008286 <xQueueGenericCreate>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <QueueInit+0x2c>)
 8000d22:	6013      	str	r3, [r2, #0]

	if(sensorQueue == NULL){
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <QueueInit+0x2c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <QueueInit+0x26>
		printf("stiva pentru senzor umiditate nu a putut fi intializata");
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <QueueInit+0x30>)
 8000d2e:	f019 f811 	bl	8019d54 <iprintf>
		while(1){};
 8000d32:	bf00      	nop
 8000d34:	e7fd      	b.n	8000d32 <QueueInit+0x22>
	}

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000744 	.word	0x20000744
 8000d40:	0801c164 	.word	0x0801c164

08000d44 <_write>:
int _write(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	 osMutexAcquire(uartMutex, osWaitForever);
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <_write+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 fca7 	bl	80076ac <osMutexAcquire>
	    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <_write+0x44>)
 8000d6a:	f004 fd83 	bl	8005874 <HAL_UART_Transmit>
	    osMutexRelease(uartMutex);
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <_write+0x40>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fcf8 	bl	8007768 <osMutexRelease>
	    return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000740 	.word	0x20000740
 8000d88:	2000026c 	.word	0x2000026c

08000d8c <main>:

int row=0;
int col=0;

int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000d90:	f000 feed 	bl	8001b6e <HAL_Init>
  QueueInit();
 8000d94:	f7ff ffbc 	bl	8000d10 <QueueInit>
  SystemClock_Config();
 8000d98:	f000 f820 	bl	8000ddc <SystemClock_Config>

  MX_GPIO_Init();
 8000d9c:	f000 f934 	bl	8001008 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000da0:	f000 f8c4 	bl	8000f2c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000da4:	f000 f892 	bl	8000ecc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000da8:	f000 f900 	bl	8000fac <MX_USB_OTG_FS_PCD_Init>
  humiditySensorAdcInit();
 8000dac:	f7ff fc94 	bl	80006d8 <humiditySensorAdcInit>
  InitUartMutex();
 8000db0:	f7ff ffa2 	bl	8000cf8 <InitUartMutex>

  osKernelInitialize();
 8000db4:	f006 fa7a 	bl	80072ac <osKernelInitialize>


  init_pump_task();
 8000db8:	f7ff fdb6 	bl	8000928 <init_pump_task>
  init_humidity_task();
 8000dbc:	f7ff fd3c 	bl	8000838 <init_humidity_task>
  init_led_control_task();
 8000dc0:	f7ff ff0a 	bl	8000bd8 <init_led_control_task>
  init_lcd_control_task();
 8000dc4:	f7ff feaa 	bl	8000b1c <init_lcd_control_task>
  MX_LWIP_Init();
 8000dc8:	f005 fcea 	bl	80067a0 <MX_LWIP_Init>
  tcpserver_init();
 8000dcc:	f000 fe92 	bl	8001af4 <tcpserver_init>

  print_system_info();
 8000dd0:	f000 fbd6 	bl	8001580 <print_system_info>

  osKernelStart();
 8000dd4:	f006 fa9e 	bl	8007314 <osKernelStart>


  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <main+0x4c>

08000ddc <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2234      	movs	r2, #52	@ 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f019 f978 	bl	801a0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]


  HAL_PWR_EnableBkUpAccess();
 8000e00:	f003 f87c 	bl	8003efc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <SystemClock_Config+0xe8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <SystemClock_Config+0xe8>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <SystemClock_Config+0xe8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <SystemClock_Config+0xec>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a29      	ldr	r2, [pc, #164]	@ (8000ec8 <SystemClock_Config+0xec>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <SystemClock_Config+0xec>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e4c:	23d8      	movs	r3, #216	@ 0xd8
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e54:	2309      	movs	r3, #9
 8000e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 f8ab 	bl	8003fbc <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e6c:	f000 f99a 	bl	80011a4 <Error_Handler>
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f003 f854 	bl	8003f1c <HAL_PWREx_EnableOverDrive>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e7a:	f000 f993 	bl	80011a4 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fb3b 	bl	8004518 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ea8:	f000 f97c 	bl	80011a4 <Error_Handler>
  }
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	201d      	movs	r0, #29
 8000eb2:	f000 ff65 	bl	8001d80 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eb6:	201d      	movs	r0, #29
 8000eb8:	f000 ff7e 	bl	8001db8 <HAL_NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	@ 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <MX_USART3_UART_Init+0x5c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f10:	f004 fc62 	bl	80057d8 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f000 f943 	bl	80011a4 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000026c 	.word	0x2000026c
 8000f28:	40004800 	.word	0x40004800

08000f2c <MX_I2C2_Init>:
static void MX_I2C2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <MX_I2C2_Init+0x78>)
 8000f34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <MX_I2C2_Init+0x7c>)
 8000f3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f68:	f002 fa66 	bl	8003438 <HAL_I2C_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f72:	f000 f917 	bl	80011a4 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f7a:	f002 fddf 	bl	8003b3c <HAL_I2CEx_ConfigAnalogFilter>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f84:	f000 f90e 	bl	80011a4 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_I2C2_Init+0x74>)
 8000f8c:	f002 fe21 	bl	8003bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f96:	f000 f905 	bl	80011a4 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002f0 	.word	0x200002f0
 8000fa4:	40005800 	.word	0x40005800
 8000fa8:	20404768 	.word	0x20404768

08000fac <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2206      	movs	r2, #6
 8000fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	f002 fe3b 	bl	8003c6a <HAL_PCD_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 f8d3 	bl	80011a4 <Error_Handler>
  }

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000033c 	.word	0x2000033c

08001008 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a53      	ldr	r2, [pc, #332]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <MX_GPIO_Init+0x168>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	4b4e      	ldr	r3, [pc, #312]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a4d      	ldr	r2, [pc, #308]	@ (8001170 <MX_GPIO_Init+0x168>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a47      	ldr	r2, [pc, #284]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <MX_GPIO_Init+0x168>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <MX_GPIO_Init+0x168>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a3b      	ldr	r2, [pc, #236]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <MX_GPIO_Init+0x168>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a35      	ldr	r2, [pc, #212]	@ (8001170 <MX_GPIO_Init+0x168>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <MX_GPIO_Init+0x168>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_GPIO_Init+0x168>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001170 <MX_GPIO_Init+0x168>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <MX_GPIO_Init+0x168>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010cc:	4829      	ldr	r0, [pc, #164]	@ (8001174 <MX_GPIO_Init+0x16c>)
 80010ce:	f002 f999 	bl	8003404 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	@ 0x40
 80010d6:	4828      	ldr	r0, [pc, #160]	@ (8001178 <MX_GPIO_Init+0x170>)
 80010d8:	f002 f994 	bl	8003404 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4822      	ldr	r0, [pc, #136]	@ (800117c <MX_GPIO_Init+0x174>)
 80010f4:	f001 ffda 	bl	80030ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010f8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4818      	ldr	r0, [pc, #96]	@ (8001174 <MX_GPIO_Init+0x16c>)
 8001112:	f001 ffcb 	bl	80030ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001116:	2340      	movs	r3, #64	@ 0x40
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4812      	ldr	r0, [pc, #72]	@ (8001178 <MX_GPIO_Init+0x170>)
 800112e:	f001 ffbd 	bl	80030ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <MX_GPIO_Init+0x170>)
 8001146:	f001 ffb1 	bl	80030ac <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_GPIO_Init+0x174>)
 8001162:	f001 ffa3 	bl	80030ac <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	@ 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40020800 	.word	0x40020800

08001180 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001192:	f000 fcf9 	bl	8001b88 <HAL_IncTick>
  }

}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010000 	.word	0x40010000

080011a4 <Error_Handler>:


void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	f06f 0001 	mvn.w	r0, #1
 80011ee:	f000 fdc7 	bl	8001d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ae      	sub	sp, #184	@ 0xb8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2290      	movs	r2, #144	@ 0x90
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f018 ff5d 	bl	801a0e0 <memset>
  if(huart->Instance==USART3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a22      	ldr	r2, [pc, #136]	@ (80012b4 <HAL_UART_MspInit+0xb4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d13c      	bne.n	80012aa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001234:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001236:	2300      	movs	r3, #0
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fbc2 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800124a:	f7ff ffab 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a19      	ldr	r2, [pc, #100]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_UART_MspInit+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800127e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001298:	2307      	movs	r3, #7
 800129a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_UART_MspInit+0xbc>)
 80012a6:	f001 ff01 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	37b8      	adds	r7, #184	@ 0xb8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004800 	.word	0x40004800
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ae      	sub	sp, #184	@ 0xb8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2290      	movs	r2, #144	@ 0x90
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f018 fefd 	bl	801a0e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ee:	d159      	bne.n	80013a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fb61 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800130c:	f7ff ff4a 	bl	80011a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a25      	ldr	r2, [pc, #148]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001328:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800132c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001342:	230a      	movs	r3, #10
 8001344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	4619      	mov	r1, r3
 800134e:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <HAL_PCD_MspInit+0xf0>)
 8001350:	f001 feac 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800136c:	4619      	mov	r1, r3
 800136e:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <HAL_PCD_MspInit+0xf0>)
 8001370:	f001 fe9c 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 8001376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 800137a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800137e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6453      	str	r3, [r2, #68]	@ 0x44
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_PCD_MspInit+0xec>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	37b8      	adds	r7, #184	@ 0xb8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0ae      	sub	sp, #184	@ 0xb8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2290      	movs	r2, #144	@ 0x90
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f018 fe83 	bl	801a0e0 <memset>
  if(hi2c->Instance==I2C2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_I2C_MspInit+0xb0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d13b      	bne.n	800145c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fae8 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013fe:	f7ff fed1 	bl	80011a4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001432:	2304      	movs	r3, #4
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001438:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <HAL_I2C_MspInit+0xb8>)
 8001440:	f001 fe34 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 800144a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_I2C_MspInit+0xb4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	37b8      	adds	r7, #184	@ 0xb8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40005800 	.word	0x40005800
 8001468:	40023800 	.word	0x40023800
 800146c:	40021400 	.word	0x40021400

08001470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2019      	movs	r0, #25
 8001486:	f000 fc7b 	bl	8001d80 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800148a:	2019      	movs	r0, #25
 800148c:	f000 fc94 	bl	8001db8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_InitTick+0xa0>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <HAL_InitTick+0xa0>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6453      	str	r3, [r2, #68]	@ 0x44
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_InitTick+0xa0>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fa56 	bl	8004964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014b8:	f003 fa40 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 80014bc:	4603      	mov	r3, r0
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <HAL_InitTick+0xa4>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3b01      	subs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_InitTick+0xa8>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <HAL_InitTick+0xac>)
 80014d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_InitTick+0xa8>)
 80014d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014de:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <HAL_InitTick+0xa8>)
 80014e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <HAL_InitTick+0xa8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_InitTick+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014f0:	4809      	ldr	r0, [pc, #36]	@ (8001518 <HAL_InitTick+0xa8>)
 80014f2:	f003 fe91 	bl	8005218 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014fc:	4806      	ldr	r0, [pc, #24]	@ (8001518 <HAL_InitTick+0xa8>)
 80014fe:	f003 feed 	bl	80052dc <HAL_TIM_Base_Start_IT>
 8001502:	4603      	mov	r3, r0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3730      	adds	r7, #48	@ 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	431bde83 	.word	0x431bde83
 8001518:	20000748 	.word	0x20000748
 800151c:	40010000 	.word	0x40010000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <NMI_Handler+0x4>

08001528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <MemManage_Handler+0x4>

08001538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <UsageFault_Handler+0x4>

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800155e:	f003 ff35 	bl	80053cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000748 	.word	0x20000748

0800156c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <ETH_IRQHandler+0x10>)
 8001572:	f001 f80d 	bl	8002590 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20003ec8 	.word	0x20003ec8

08001580 <print_system_info>:
#include "sys_info.h"

void print_system_info(void) {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 8001586:	af00      	add	r7, sp, #0

    uint32_t totalRunTime;
    uint32_t numTasks;
    TaskStatus_t taskStatusArray[10];

    printf("\n=== Sistem FreeRTOS ===\n\r");
 8001588:	483e      	ldr	r0, [pc, #248]	@ (8001684 <print_system_info+0x104>)
 800158a:	f018 fbe3 	bl	8019d54 <iprintf>


    printf("Heap disponibil: %u bytes\n\r", xPortGetFreeHeapSize());
 800158e:	f00a fb81 	bl	800bc94 <xPortGetFreeHeapSize>
 8001592:	4603      	mov	r3, r0
 8001594:	4619      	mov	r1, r3
 8001596:	483c      	ldr	r0, [pc, #240]	@ (8001688 <print_system_info+0x108>)
 8001598:	f018 fbdc 	bl	8019d54 <iprintf>
    printf("Heap minim disponibil: %u bytes\n\r", xPortGetMinimumEverFreeHeapSize());
 800159c:	f00a fb86 	bl	800bcac <xPortGetMinimumEverFreeHeapSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4839      	ldr	r0, [pc, #228]	@ (800168c <print_system_info+0x10c>)
 80015a6:	f018 fbd5 	bl	8019d54 <iprintf>


    printf("\n=== Lista Taskuri ===\n\r");
 80015aa:	4839      	ldr	r0, [pc, #228]	@ (8001690 <print_system_info+0x110>)
 80015ac:	f018 fbd2 	bl	8019d54 <iprintf>
    vTaskList(taskListBuffer);
 80015b0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80015b4:	4618      	mov	r0, r3
 80015b6:	f009 f9af 	bl	800a918 <vTaskList>
    printf("Nume Task   Stare   Prioritate   Stack Rămas   Nr. Task\n\r");
 80015ba:	4836      	ldr	r0, [pc, #216]	@ (8001694 <print_system_info+0x114>)
 80015bc:	f018 fbca 	bl	8019d54 <iprintf>
    printf("%s\n", taskListBuffer);
 80015c0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80015c4:	4618      	mov	r0, r3
 80015c6:	f018 fc2d 	bl	8019e24 <puts>


    printf("\n=== Detalii Taskuri ===\n");
 80015ca:	4833      	ldr	r0, [pc, #204]	@ (8001698 <print_system_info+0x118>)
 80015cc:	f018 fc2a 	bl	8019e24 <puts>
    numTasks = uxTaskGetSystemState(taskStatusArray, 10, &totalRunTime);
 80015d0:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	210a      	movs	r1, #10
 80015d8:	4618      	mov	r0, r3
 80015da:	f008 fb49 	bl	8009c70 <uxTaskGetSystemState>
 80015de:	f8c7 0370 	str.w	r0, [r7, #880]	@ 0x370
    for (uint32_t i = 0; i < numTasks; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80015e8:	e030      	b.n	800164c <print_system_info+0xcc>
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 80015ea:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80015ee:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 80015f2:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001608:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 800160c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3310      	adds	r3, #16
 800161c:	681c      	ldr	r4, [r3, #0]
               taskStatusArray[i].pcTaskName,
               taskStatusArray[i].uxCurrentPriority,
               taskStatusArray[i].usStackHighWaterMark);
 800161e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001622:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 8001626:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3320      	adds	r3, #32
 8001636:	881b      	ldrh	r3, [r3, #0]
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 8001638:	4622      	mov	r2, r4
 800163a:	4601      	mov	r1, r0
 800163c:	4817      	ldr	r0, [pc, #92]	@ (800169c <print_system_info+0x11c>)
 800163e:	f018 fb89 	bl	8019d54 <iprintf>
    for (uint32_t i = 0; i < numTasks; i++) {
 8001642:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001646:	3301      	adds	r3, #1
 8001648:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800164c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001650:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001654:	429a      	cmp	r2, r3
 8001656:	d3c8      	bcc.n	80015ea <print_system_info+0x6a>
    }


    printf("\n=== Alte informații ===\n\r");
 8001658:	4811      	ldr	r0, [pc, #68]	@ (80016a0 <print_system_info+0x120>)
 800165a:	f018 fb7b 	bl	8019d54 <iprintf>
    printf("Tick-uri de sistem: %lu\n\r", xTaskGetTickCount());
 800165e:	f008 fae5 	bl	8009c2c <xTaskGetTickCount>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	480f      	ldr	r0, [pc, #60]	@ (80016a4 <print_system_info+0x124>)
 8001668:	f018 fb74 	bl	8019d54 <iprintf>
    printf("Stare scheduler: %u\n\r", xTaskGetSchedulerState());
 800166c:	f008 ffac 	bl	800a5c8 <xTaskGetSchedulerState>
 8001670:	4603      	mov	r3, r0
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <print_system_info+0x128>)
 8001676:	f018 fb6d 	bl	8019d54 <iprintf>
}
 800167a:	bf00      	nop
 800167c:	f507 775f 	add.w	r7, r7, #892	@ 0x37c
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	0801c19c 	.word	0x0801c19c
 8001688:	0801c1b8 	.word	0x0801c1b8
 800168c:	0801c1d4 	.word	0x0801c1d4
 8001690:	0801c1f8 	.word	0x0801c1f8
 8001694:	0801c214 	.word	0x0801c214
 8001698:	0801c250 	.word	0x0801c250
 800169c:	0801c26c 	.word	0x0801c26c
 80016a0:	0801c2a0 	.word	0x0801c2a0
 80016a4:	0801c2bc 	.word	0x0801c2bc
 80016a8:	0801c2d8 	.word	0x0801c2d8

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_kill>:

int _kill(int pid, int sig)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <_kill+0x20>)
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
	return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	20011ed8 	.word	0x20011ed8

080016e0 <_exit>:

void _exit (int status)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffe5 	bl	80016bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016f2:	bf00      	nop
 80016f4:	e7fd      	b.n	80016f2 <_exit+0x12>

080016f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e00a      	b.n	800171e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001708:	f3af 8000 	nop.w
 800170c:	4601      	mov	r1, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbf0      	blt.n	8001708 <_read+0x12>
	}

return len;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001758:	605a      	str	r2, [r3, #4]
	return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_isatty>:

int _isatty(int file)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d205      	bcs.n	80017d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <_sbrk+0x6c>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	20080000 	.word	0x20080000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000794 	.word	0x20000794
 8001800:	20012028 	.word	0x20012028
 8001804:	20011ed8 	.word	0x20011ed8

08001808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <get_humidity_value>:
static struct netbuf *buf;
char msg[512];
char smsg[1024];

 float get_humidity_value(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
    HumiditySensorData sensor_data;

    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <get_humidity_value+0x30>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4639      	mov	r1, r7
 8001838:	2200      	movs	r2, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f007 fb02 	bl	8008e44 <xQueuePeek>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <get_humidity_value+0x1e>
    {
        return sensor_data.humidity;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	e000      	b.n	800184c <get_humidity_value+0x20>
    }
    return -1.0f;
 800184a:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <get_humidity_value+0x34>)
}
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb0 0a67 	vmov.f32	s0, s15
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000744 	.word	0x20000744
 8001860:	bf800000 	.word	0xbf800000

08001864 <process_http_request>:

static void process_http_request(const char *request, char *response)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0a2      	sub	sp, #136	@ 0x88
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 800186e:	494e      	ldr	r1, [pc, #312]	@ (80019a8 <process_http_request+0x144>)
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f018 fc5f 	bl	801a134 <strstr>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01d      	beq.n	80018b8 <process_http_request+0x54>
    {
        float humidity = get_humidity_value();
 800187c:	f7ff ffd6 	bl	800182c <get_humidity_value>
 8001880:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

        char humidity_str[100];
        snprintf(humidity_str, sizeof(humidity_str), "%.2f", humidity);
 8001884:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001888:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	ed8d 7b00 	vstr	d7, [sp]
 8001894:	4a45      	ldr	r2, [pc, #276]	@ (80019ac <process_http_request+0x148>)
 8001896:	2164      	movs	r1, #100	@ 0x64
 8001898:	4618      	mov	r0, r3
 800189a:	f018 facb 	bl	8019e34 <sniprintf>

        const char *http_response =
 800189e:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <process_http_request+0x14c>)
 80018a0:	673b      	str	r3, [r7, #112]	@ 0x70
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n";
        strcpy(response, http_response);
 80018a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f018 fccc 	bl	801a242 <strcpy>
        strcat(response, humidity_str);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	6838      	ldr	r0, [r7, #0]
 80018b2:	f018 fc1d 	bl	801a0f0 <strcat>
 80018b6:	e073      	b.n	80019a0 <process_http_request+0x13c>
    }
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 80018b8:	493e      	ldr	r1, [pc, #248]	@ (80019b4 <process_http_request+0x150>)
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f018 fc3a 	bl	801a134 <strstr>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d066      	beq.n	8001994 <process_http_request+0x130>
    {

        const char *body = strstr(request, "\r\n\r\n");
 80018c6:	493c      	ldr	r1, [pc, #240]	@ (80019b8 <process_http_request+0x154>)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f018 fc33 	bl	801a134 <strstr>
 80018ce:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (body != NULL)
 80018d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d057      	beq.n	8001986 <process_http_request+0x122>
        {
            body += 4;
 80018d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018d8:	3304      	adds	r3, #4
 80018da:	67bb      	str	r3, [r7, #120]	@ 0x78

            LedMessage message;
            if (strstr(body, "led=1") != NULL)
 80018dc:	4937      	ldr	r1, [pc, #220]	@ (80019bc <process_http_request+0x158>)
 80018de:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80018e0:	f018 fc28 	bl	801a134 <strstr>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <process_http_request+0x8e>
            {
                message.led = LED1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80018f0:	e01c      	b.n	800192c <process_http_request+0xc8>
            }
            else if (strstr(body, "led=2") != NULL)
 80018f2:	4933      	ldr	r1, [pc, #204]	@ (80019c0 <process_http_request+0x15c>)
 80018f4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80018f6:	f018 fc1d 	bl	801a134 <strstr>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <process_http_request+0xa4>
            {
                message.led = LED2;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001906:	e011      	b.n	800192c <process_http_request+0xc8>
            }
            else if (strstr(body, "led=3") != NULL)
 8001908:	492e      	ldr	r1, [pc, #184]	@ (80019c4 <process_http_request+0x160>)
 800190a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800190c:	f018 fc12 	bl	801a134 <strstr>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <process_http_request+0xba>
            {
                message.led = LED3;
 8001916:	2302      	movs	r3, #2
 8001918:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800191c:	e006      	b.n	800192c <process_http_request+0xc8>
            }
            else
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nInvalid LED ID");
 800191e:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <process_http_request+0x164>)
 8001920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f018 fa85 	bl	8019e34 <sniprintf>
                return;
 800192a:	e039      	b.n	80019a0 <process_http_request+0x13c>
            }

            if (strstr(body, "toggle=1") != NULL)
 800192c:	4927      	ldr	r1, [pc, #156]	@ (80019cc <process_http_request+0x168>)
 800192e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001930:	f018 fc00 	bl	801a134 <strstr>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <process_http_request+0xf4>
            {
                message.toggle = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
                return;
            }

            if (xQueueSendToBack(ledQueue, &message, 0) != pdTRUE)
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <process_http_request+0x16c>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001948:	2300      	movs	r3, #0
 800194a:	2200      	movs	r2, #0
 800194c:	f006 fe34 	bl	80085b8 <xQueueGenericSend>
 8001950:	4603      	mov	r3, r0
 8001952:	2b01      	cmp	r3, #1
 8001954:	d00e      	beq.n	8001974 <process_http_request+0x110>
 8001956:	e006      	b.n	8001966 <process_http_request+0x102>
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
 8001958:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <process_http_request+0x170>)
 800195a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195e:	6838      	ldr	r0, [r7, #0]
 8001960:	f018 fa68 	bl	8019e34 <sniprintf>
                return;
 8001964:	e01c      	b.n	80019a0 <process_http_request+0x13c>
            {
                snprintf(response, 256, "HTTP/1.1 500 Internal Server Error\r\n\r\nQueue full");
 8001966:	4a1c      	ldr	r2, [pc, #112]	@ (80019d8 <process_http_request+0x174>)
 8001968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196c:	6838      	ldr	r0, [r7, #0]
 800196e:	f018 fa61 	bl	8019e34 <sniprintf>
                return;
 8001972:	e015      	b.n	80019a0 <process_http_request+0x13c>
            }

            snprintf(response, 256, "HTTP/1.1 200 OK\r\n\r\nLED %d toggled", message.led);
 8001974:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001978:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <process_http_request+0x178>)
 800197a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f018 fa58 	bl	8019e34 <sniprintf>
 8001984:	e00c      	b.n	80019a0 <process_http_request+0x13c>
        }
        else
        {
            snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nNo body found");
 8001986:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <process_http_request+0x17c>)
 8001988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f018 fa51 	bl	8019e34 <sniprintf>
 8001992:	e005      	b.n	80019a0 <process_http_request+0x13c>
        }
    }
    else
    {
        const char *http_response =
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <process_http_request+0x180>)
 8001996:	67fb      	str	r3, [r7, #124]	@ 0x7c
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
 8001998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f018 fc51 	bl	801a242 <strcpy>
    }
}
 80019a0:	3780      	adds	r7, #128	@ 0x80
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0801c2f0 	.word	0x0801c2f0
 80019ac:	0801c300 	.word	0x0801c300
 80019b0:	0801c308 	.word	0x0801c308
 80019b4:	0801c348 	.word	0x0801c348
 80019b8:	0801c358 	.word	0x0801c358
 80019bc:	0801c360 	.word	0x0801c360
 80019c0:	0801c368 	.word	0x0801c368
 80019c4:	0801c370 	.word	0x0801c370
 80019c8:	0801c378 	.word	0x0801c378
 80019cc:	0801c3a4 	.word	0x0801c3a4
 80019d0:	20000264 	.word	0x20000264
 80019d4:	0801c3b0 	.word	0x0801c3b0
 80019d8:	0801c3e4 	.word	0x0801c3e4
 80019dc:	0801c418 	.word	0x0801c418
 80019e0:	0801c43c 	.word	0x0801c43c
 80019e4:	0801c468 	.word	0x0801c468

080019e8 <tcp_thread>:



static void tcp_thread(void *arg)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;


    conn = netconn_new(NETCONN_TCP);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2010      	movs	r0, #16
 80019f6:	f00a fa3f 	bl	800be78 <netconn_new_with_proto_and_callback>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a35      	ldr	r2, [pc, #212]	@ (8001ad4 <tcp_thread+0xec>)
 80019fe:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <tcp_thread+0xec>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d061      	beq.n	8001acc <tcp_thread+0xe4>
    {

        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <tcp_thread+0xec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2250      	movs	r2, #80	@ 0x50
 8001a0e:	4932      	ldr	r1, [pc, #200]	@ (8001ad8 <tcp_thread+0xf0>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00a faeb 	bl	800bfec <netconn_bind>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d14c      	bne.n	8001abc <tcp_thread+0xd4>
        {

            netconn_listen(conn);
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <tcp_thread+0xec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	21ff      	movs	r1, #255	@ 0xff
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00a fb17 	bl	800c05c <netconn_listen_with_backlog>

            while (1)
            {
            	//PrintTaskTiming("TCP_start");
                accept_err = netconn_accept(conn, &newconn);
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <tcp_thread+0xec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	492a      	ldr	r1, [pc, #168]	@ (8001adc <tcp_thread+0xf4>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fb3d 	bl	800c0b4 <netconn_accept>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 8001a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d136      	bne.n	8001ab4 <tcp_thread+0xcc>
                {

                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8001a46:	e02b      	b.n	8001aa0 <tcp_thread+0xb8>
                    {

                        strncpy(msg, buf->p->payload, buf->p->len);
 8001a48:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <tcp_thread+0xf8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <tcp_thread+0xf8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	895b      	ldrh	r3, [r3, #10]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4822      	ldr	r0, [pc, #136]	@ (8001ae4 <tcp_thread+0xfc>)
 8001a5c:	f018 fb57 	bl	801a10e <strncpy>


                        //printf("Received request: %s\n", msg);

                        process_http_request(msg, smsg);
 8001a60:	4921      	ldr	r1, [pc, #132]	@ (8001ae8 <tcp_thread+0x100>)
 8001a62:	4820      	ldr	r0, [pc, #128]	@ (8001ae4 <tcp_thread+0xfc>)
 8001a64:	f7ff fefe 	bl	8001864 <process_http_request>

                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <tcp_thread+0xf4>)
 8001a6a:	681c      	ldr	r4, [r3, #0]
 8001a6c:	481e      	ldr	r0, [pc, #120]	@ (8001ae8 <tcp_thread+0x100>)
 8001a6e:	f7fe fc37 	bl	80002e0 <strlen>
 8001a72:	4602      	mov	r2, r0
 8001a74:	2300      	movs	r3, #0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	491b      	ldr	r1, [pc, #108]	@ (8001ae8 <tcp_thread+0x100>)
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f00a fd9b 	bl	800c5b8 <netconn_write_partly>

                        netbuf_delete(buf);
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <tcp_thread+0xf8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00c fa96 	bl	800dfb8 <netbuf_delete>

                        netconn_close(newconn);
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <tcp_thread+0xf4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00a fe93 	bl	800c7bc <netconn_close>
                        netconn_delete(newconn);
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <tcp_thread+0xf4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00a fa8a 	bl	800bfb4 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <tcp_thread+0xf4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <tcp_thread+0xf8>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00a fd0c 	bl	800c4c4 <netconn_recv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ca      	beq.n	8001a48 <tcp_thread+0x60>
 8001ab2:	e7bc      	b.n	8001a2e <tcp_thread+0x46>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <tcp_thread+0x104>)
 8001ab6:	f018 f9b5 	bl	8019e24 <puts>
                accept_err = netconn_accept(conn, &newconn);
 8001aba:	e7b8      	b.n	8001a2e <tcp_thread+0x46>
             //   PrintTaskTiming("TCP_end");
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 8001abc:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <tcp_thread+0x108>)
 8001abe:	f018 f9b1 	bl	8019e24 <puts>
            netconn_delete(conn);
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <tcp_thread+0xec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00a fa74 	bl	800bfb4 <netconn_delete>
        }
    }
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	20000798 	.word	0x20000798
 8001ad8:	0801f9fc 	.word	0x0801f9fc
 8001adc:	2000079c 	.word	0x2000079c
 8001ae0:	200007a0 	.word	0x200007a0
 8001ae4:	200007a4 	.word	0x200007a4
 8001ae8:	200009a4 	.word	0x200009a4
 8001aec:	0801c4c8 	.word	0x0801c4c8
 8001af0:	0801c4e4 	.word	0x0801c4e4

08001af4 <tcpserver_init>:


void tcpserver_init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityRealtime);
 8001afa:	2330      	movs	r3, #48	@ 0x30
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b02:	2200      	movs	r2, #0
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <tcpserver_init+0x20>)
 8001b06:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <tcpserver_init+0x24>)
 8001b08:	f017 fbae 	bl	8019268 <sys_thread_new>
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	080019e9 	.word	0x080019e9
 8001b18:	0801c500 	.word	0x0801c500

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	@ (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	@ (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b46:	f7ff fe5f 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f018 fb53 	bl	801a1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff f91d 	bl	8000d8c <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b60:	0801fdec 	.word	0x0801fdec
  ldr r2, =_sbss
 8001b64:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b68:	20012028 	.word	0x20012028

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f8f9 	bl	8001d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f7ff fc79 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fb17 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000da4 	.word	0x20000da4

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000da4 	.word	0x20000da4

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	05fa0000 	.word	0x05fa0000

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	@ (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff4c 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d92:	f7ff ff61 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	6978      	ldr	r0, [r7, #20]
 8001d9e:	f7ff ffb1 	bl	8001d04 <NVIC_EncodePriority>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff80 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff54 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001de4:	4ba0      	ldr	r3, [pc, #640]	@ (8002068 <HAL_ETH_Init+0x294>)
 8001de6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e180      	b.n	80020fc <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f004 fe28 	bl	8006a64 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e14:	4b95      	ldr	r3, [pc, #596]	@ (800206c <HAL_ETH_Init+0x298>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e18:	4a94      	ldr	r2, [pc, #592]	@ (800206c <HAL_ETH_Init+0x298>)
 8001e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e20:	4b92      	ldr	r3, [pc, #584]	@ (800206c <HAL_ETH_Init+0x298>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e2c:	4b90      	ldr	r3, [pc, #576]	@ (8002070 <HAL_ETH_Init+0x29c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a8f      	ldr	r2, [pc, #572]	@ (8002070 <HAL_ETH_Init+0x29c>)
 8001e32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e38:	4b8d      	ldr	r3, [pc, #564]	@ (8002070 <HAL_ETH_Init+0x29c>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	498b      	ldr	r1, [pc, #556]	@ (8002070 <HAL_ETH_Init+0x29c>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e5c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5e:	f7ff fea7 	bl	8001bb0 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e64:	e011      	b.n	8001e8a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e66:	f7ff fea3 	bl	8001bb0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e74:	d909      	bls.n	8001e8a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e138      	b.n	80020fc <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e4      	bne.n	8001e66 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f023 031c 	bic.w	r3, r3, #28
 8001eaa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001eac:	f002 fd26 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8001eb0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4a6f      	ldr	r2, [pc, #444]	@ (8002074 <HAL_ETH_Init+0x2a0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d908      	bls.n	8001ecc <HAL_ETH_Init+0xf8>
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8002078 <HAL_ETH_Init+0x2a4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d804      	bhi.n	8001ecc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e027      	b.n	8001f1c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4a6a      	ldr	r2, [pc, #424]	@ (8002078 <HAL_ETH_Init+0x2a4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d908      	bls.n	8001ee6 <HAL_ETH_Init+0x112>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	4a64      	ldr	r2, [pc, #400]	@ (8002068 <HAL_ETH_Init+0x294>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d204      	bcs.n	8001ee6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f043 030c 	orr.w	r3, r3, #12
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	e01a      	b.n	8001f1c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8002068 <HAL_ETH_Init+0x294>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d303      	bcc.n	8001ef6 <HAL_ETH_Init+0x122>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4a62      	ldr	r2, [pc, #392]	@ (800207c <HAL_ETH_Init+0x2a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d911      	bls.n	8001f1a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4a60      	ldr	r2, [pc, #384]	@ (800207c <HAL_ETH_Init+0x2a8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d908      	bls.n	8001f10 <HAL_ETH_Init+0x13c>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	@ (8002080 <HAL_ETH_Init+0x2ac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d804      	bhi.n	8001f10 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e005      	b.n	8001f1c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	e000      	b.n	8001f1c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fc10 	bl	8002750 <HAL_ETH_WritePHYRegister>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fdc5 	bl	8002acc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0d6      	b.n	80020fc <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f4e:	20ff      	movs	r0, #255	@ 0xff
 8001f50:	f7ff fe3a 	bl	8001bc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a4 	beq.w	80020a6 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5e:	f7ff fe27 	bl	8001bb0 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb87 	bl	8002680 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f72:	f7ff fe1d 	bl	8001bb0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d90f      	bls.n	8001fa4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fd9e 	bl	8002acc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0ab      	b.n	80020fc <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0da      	beq.n	8001f64 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001fae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fbcb 	bl	8002750 <HAL_ETH_WritePHYRegister>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fd80 	bl	8002acc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e091      	b.n	80020fc <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff fdea 	bl	8001bb0 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fb4a 	bl	8002680 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001fec:	f7ff fde0 	bl	8001bb0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d90f      	bls.n	800201e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002002:	6939      	ldr	r1, [r7, #16]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fd61 	bl	8002acc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e06e      	b.n	80020fc <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0da      	beq.n	8001fde <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	461a      	mov	r2, r3
 800202e:	2110      	movs	r1, #16
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fb25 	bl	8002680 <HAL_ETH_ReadPHYRegister>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fd42 	bl	8002acc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002050:	2301      	movs	r3, #1
 8002052:	e053      	b.n	80020fc <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	e010      	b.n	800208a <HAL_ETH_Init+0x2b6>
 8002068:	03938700 	.word	0x03938700
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	01312cff 	.word	0x01312cff
 8002078:	02160ebf 	.word	0x02160ebf
 800207c:	05f5e0ff 	.word	0x05f5e0ff
 8002080:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	e026      	b.n	80020ea <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e021      	b.n	80020ea <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fb46 	bl	8002750 <HAL_ETH_WritePHYRegister>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fcfb 	bl	8002acc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00c      	b.n	80020fc <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80020e2:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80020e6:	f7ff fd6f 	bl	8001bc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80020ea:	6939      	ldr	r1, [r7, #16]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fced 	bl	8002acc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ETH_DMATxDescListInit+0x20>
 8002120:	2302      	movs	r3, #2
 8002122:	e051      	b.n	80021c8 <HAL_ETH_DMATxDescListInit+0xc4>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e030      	b.n	80021a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	015b      	lsls	r3, r3, #5
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	4413      	add	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002150:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	461a      	mov	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3b01      	subs	r3, #1
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d208      	bcs.n	8002196 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	015b      	lsls	r3, r3, #5
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	461a      	mov	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	e002      	b.n	800219c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3ca      	bcc.n	8002140 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021b4:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ETH_DMARxDescListInit+0x20>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e055      	b.n	80022a0 <HAL_ETH_DMARxDescListInit+0xcc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e034      	b.n	800227a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	4413      	add	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002220:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002228:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	461a      	mov	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	d208      	bcs.n	800226e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	461a      	mov	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e002      	b.n	8002274 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3c6      	bcc.n	8002210 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800228c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ETH_TransmitFrame+0x24>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0cc      	b.n	800246a <HAL_ETH_TransmitFrame+0x1be>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0b7      	b.n	800246a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da09      	bge.n	8002318 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2212      	movs	r2, #18
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0a8      	b.n	800246a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800231e:	4293      	cmp	r3, r2
 8002320:	d915      	bls.n	800234e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4a54      	ldr	r2, [pc, #336]	@ (8002478 <HAL_ETH_TransmitFrame+0x1cc>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a9b      	lsrs	r3, r3, #10
 800232c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4b51      	ldr	r3, [pc, #324]	@ (8002478 <HAL_ETH_TransmitFrame+0x1cc>)
 8002332:	fba3 1302 	umull	r1, r3, r3, r2
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e001      	b.n	8002352 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d11c      	bne.n	8002392 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8002366:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002372:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002382:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002390:	e04b      	b.n	800242a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e044      	b.n	8002422 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023a6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023bc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80023c6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d116      	bne.n	8002400 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80023e0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_ETH_TransmitFrame+0x1d0>)
 80023e6:	fb03 f202 	mul.w	r2, r3, r2
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80023f2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80023fe:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800240e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3301      	adds	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	429a      	cmp	r2, r3
 8002428:	d3b6      	bcc.n	8002398 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002444:	461a      	mov	r2, r3
 8002446:	2304      	movs	r3, #4
 8002448:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	ac02b00b 	.word	0xac02b00b
 800247c:	fffffa0c 	.word	0xfffffa0c

08002480 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002496:	2302      	movs	r3, #2
 8002498:	e074      	b.n	8002584 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024aa:	e05a      	b.n	8002562 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024c0:	d10d      	bne.n	80024de <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
 80024dc:	e041      	b.n	8002562 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28
 8002502:	e02e      	b.n	8002562 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251a:	2b01      	cmp	r3, #1
 800251c:	d103      	bne.n	8002526 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002532:	1f1a      	subs	r2, r3, #4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e010      	b.n	8002584 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db02      	blt.n	8002572 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d99c      	bls.n	80024ac <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a6:	2b40      	cmp	r3, #64	@ 0x40
 80025a8:	d112      	bne.n	80025d0 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f004 fb1a 	bl	8006be4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b8:	461a      	mov	r2, r3
 80025ba:	2340      	movs	r3, #64	@ 0x40
 80025bc:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ce:	e01a      	b.n	8002606 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d111      	bne.n	8002606 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f838 	bl	8002658 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f0:	461a      	mov	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002614:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002628:	d112      	bne.n	8002650 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f81e 	bl	800266c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	461a      	mov	r2, r3
 800263a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800263e:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	460b      	mov	r3, r1
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b82      	cmp	r3, #130	@ 0x82
 80026a0:	d101      	bne.n	80026a6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	e050      	b.n	8002748 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2282      	movs	r2, #130	@ 0x82
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 031c 	and.w	r3, r3, #28
 80026bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8a1b      	ldrh	r3, [r3, #16]
 80026c2:	02db      	lsls	r3, r3, #11
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026cc:	897b      	ldrh	r3, [r7, #10]
 80026ce:	019b      	lsls	r3, r3, #6
 80026d0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026f2:	f7ff fa5d 	bl	8001bb0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026f8:	e015      	b.n	8002726 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026fa:	f7ff fa59 	bl	8001bb0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002708:	d309      	bcc.n	800271e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e014      	b.n	8002748 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e4      	bne.n	80026fa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	460b      	mov	r3, r1
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b42      	cmp	r3, #66	@ 0x42
 8002770:	d101      	bne.n	8002776 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e04e      	b.n	8002814 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2242      	movs	r2, #66	@ 0x42
 800277a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 031c 	and.w	r3, r3, #28
 800278c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8a1b      	ldrh	r3, [r3, #16]
 8002792:	02db      	lsls	r3, r3, #11
 8002794:	b29b      	uxth	r3, r3
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027cc:	f7ff f9f0 	bl	8001bb0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027d2:	e015      	b.n	8002800 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027d4:	f7ff f9ec 	bl	8001bb0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e2:	d309      	bcc.n	80027f8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e00d      	b.n	8002814 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e4      	bne.n	80027d4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ETH_Start+0x16>
 800282e:	2302      	movs	r3, #2
 8002830:	e01f      	b.n	8002872 <HAL_ETH_Start+0x56>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fb40 	bl	8002ec8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fb77 	bl	8002f3c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fc06 	bl	8003060 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fbab 	bl	8002fb0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fbd4 	bl	8003008 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_ETH_Stop+0x16>
 800288c:	2302      	movs	r3, #2
 800288e:	e01f      	b.n	80028d0 <HAL_ETH_Stop+0x56>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb9b 	bl	8002fdc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fbc4 	bl	8003034 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fb62 	bl	8002f76 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fbd4 	bl	8003060 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb22 	bl	8002f02 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_ETH_ConfigMAC+0x1c>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0e4      	b.n	8002abe <HAL_ETH_ConfigMAC+0x1e6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80b1 	beq.w	8002a6e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002924:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800292a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002930:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002936:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800293c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002942:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002948:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800294e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002954:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800295a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002960:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 8002966:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff f922 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002994:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 800299a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 80029a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 80029a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 80029ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80029be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff f8fc 	bl	8001bc8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a08:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8002a0e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8002a14:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002a1a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8002a20:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff f8c5 	bl	8001bc8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f7ff f8b2 	bl	8001bc8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	61da      	str	r2, [r3, #28]
 8002a6c:	e01e      	b.n	8002aac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002a7c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff f892 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	ff20810f 	.word	0xff20810f

08002acc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0b0      	sub	sp, #192	@ 0xc0
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ae8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b18:	e001      	b.n	8002b1e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b22:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b38:	2340      	movs	r3, #64	@ 0x40
 8002b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002ba0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002ba4:	4ba9      	ldr	r3, [pc, #676]	@ (8002e4c <ETH_MACDMAConfig+0x380>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8002bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bb0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8002bb4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8002bb8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002bbe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8002bc2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 8002bc6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bcc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8002bd0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8002bd4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8002bd8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bdc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8002be0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002be2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002bf4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fe ffe1 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c0e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c10:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8002c12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c14:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8002c18:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8002c1e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8002c24:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002c2a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c34:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c3c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c3e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f7fe ffbc 	bl	8001bc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c58:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c62:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c6c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c7c:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002c80:	4013      	ands	r3, r2
 8002c82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c8a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c90:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002c96:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002c9c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002ca2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002ca8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cbc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe ff7d 	bl	8001bc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cd6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cd8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 8002cdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe ff68 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d00:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d14:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d26:	2304      	movs	r3, #4
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d60:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <ETH_MACDMAConfig+0x384>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d68:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d6a:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d6c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d6e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d70:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d72:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d74:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d76:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d78:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d7a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d7c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d80:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d84:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002d88:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002da2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7fe ff08 	bl	8001bc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dc6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dcc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8002dd0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dd4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8002dd8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ddc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002dde:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002de2:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002df0:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f7fe fee1 	bl	8001bc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e14:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10b      	bne.n	8002e36 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <ETH_MACDMAConfig+0x388>)
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e34:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f80a 	bl	8002e58 <ETH_MACAddressConfig>
}
 8002e44:	bf00      	nop
 8002e46:	37c0      	adds	r7, #192	@ 0xc0
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	ff20810f 	.word	0xff20810f
 8002e50:	f8de3f23 	.word	0xf8de3f23
 8002e54:	00010040 	.word	0x00010040

08002e58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3305      	adds	r3, #5
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	3204      	adds	r2, #4
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <ETH_MACAddressConfig+0x68>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3303      	adds	r3, #3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	061a      	lsls	r2, r3, #24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3301      	adds	r3, #1
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	7812      	ldrb	r2, [r2, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <ETH_MACAddressConfig+0x6c>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40028040 	.word	0x40028040
 8002ec4:	40028044 	.word	0x40028044

08002ec8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f7fe fe6b 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fe fe4e 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0204 	orr.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fe fe31 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0204 	bic.w	r2, r2, #4
 8002f90:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7fe fe14 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fce:	6193      	str	r3, [r2, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ff6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ffa:	6193      	str	r3, [r2, #24]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003026:	6193      	str	r3, [r2, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	f023 0302 	bic.w	r3, r3, #2
 800304e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003052:	6193      	str	r3, [r2, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003082:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003090:	2001      	movs	r0, #1
 8003092:	f7fe fd99 	bl	8001bc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030a0:	6193      	str	r3, [r2, #24]
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	@ 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e175      	b.n	80033b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8164 	bne.w	80033b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d005      	beq.n	8003102 <HAL_GPIO_Init+0x56>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d130      	bne.n	8003164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0201 	and.w	r2, r3, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b03      	cmp	r3, #3
 800316e:	d017      	beq.n	80031a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d123      	bne.n	80031f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80be 	beq.w	80033b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	4b66      	ldr	r3, [pc, #408]	@ (80033d0 <HAL_GPIO_Init+0x324>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	4a65      	ldr	r2, [pc, #404]	@ (80033d0 <HAL_GPIO_Init+0x324>)
 800323c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003240:	6453      	str	r3, [r2, #68]	@ 0x44
 8003242:	4b63      	ldr	r3, [pc, #396]	@ (80033d0 <HAL_GPIO_Init+0x324>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800324e:	4a61      	ldr	r2, [pc, #388]	@ (80033d4 <HAL_GPIO_Init+0x328>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <HAL_GPIO_Init+0x32c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d037      	beq.n	80032ea <HAL_GPIO_Init+0x23e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a57      	ldr	r2, [pc, #348]	@ (80033dc <HAL_GPIO_Init+0x330>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d031      	beq.n	80032e6 <HAL_GPIO_Init+0x23a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a56      	ldr	r2, [pc, #344]	@ (80033e0 <HAL_GPIO_Init+0x334>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02b      	beq.n	80032e2 <HAL_GPIO_Init+0x236>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a55      	ldr	r2, [pc, #340]	@ (80033e4 <HAL_GPIO_Init+0x338>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d025      	beq.n	80032de <HAL_GPIO_Init+0x232>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a54      	ldr	r2, [pc, #336]	@ (80033e8 <HAL_GPIO_Init+0x33c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <HAL_GPIO_Init+0x22e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a53      	ldr	r2, [pc, #332]	@ (80033ec <HAL_GPIO_Init+0x340>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x22a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a52      	ldr	r2, [pc, #328]	@ (80033f0 <HAL_GPIO_Init+0x344>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x226>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a51      	ldr	r2, [pc, #324]	@ (80033f4 <HAL_GPIO_Init+0x348>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x222>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a50      	ldr	r2, [pc, #320]	@ (80033f8 <HAL_GPIO_Init+0x34c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x21e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4f      	ldr	r2, [pc, #316]	@ (80033fc <HAL_GPIO_Init+0x350>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x21a>
 80032c2:	2309      	movs	r3, #9
 80032c4:	e012      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032c6:	230a      	movs	r3, #10
 80032c8:	e010      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e00e      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e00c      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032d2:	2306      	movs	r3, #6
 80032d4:	e00a      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032d6:	2305      	movs	r3, #5
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032da:	2304      	movs	r3, #4
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x240>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032fc:	4935      	ldr	r1, [pc, #212]	@ (80033d4 <HAL_GPIO_Init+0x328>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b3d      	ldr	r3, [pc, #244]	@ (8003400 <HAL_GPIO_Init+0x354>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332e:	4a34      	ldr	r2, [pc, #208]	@ (8003400 <HAL_GPIO_Init+0x354>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003334:	4b32      	ldr	r3, [pc, #200]	@ (8003400 <HAL_GPIO_Init+0x354>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003358:	4a29      	ldr	r2, [pc, #164]	@ (8003400 <HAL_GPIO_Init+0x354>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335e:	4b28      	ldr	r3, [pc, #160]	@ (8003400 <HAL_GPIO_Init+0x354>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003382:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_GPIO_Init+0x354>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_GPIO_Init+0x354>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ac:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HAL_GPIO_Init+0x354>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f ae86 	bls.w	80030cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40021400 	.word	0x40021400
 80033f0:	40021800 	.word	0x40021800
 80033f4:	40021c00 	.word	0x40021c00
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022400 	.word	0x40022400
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd ffa8 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	@ 0x24
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e006      	b.n	80034c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d104      	bne.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_I2C_Init+0x11c>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	02008000 	.word	0x02008000

08003558 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
 8003568:	4613      	mov	r3, r2
 800356a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	f040 80da 	bne.w	800372e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_I2C_Master_Transmit+0x30>
 8003584:	2302      	movs	r3, #2
 8003586:	e0d3      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003590:	f7fe fb0e 	bl	8001bb0 <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f8f0 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0be      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2221      	movs	r2, #33	@ 0x21
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2210      	movs	r2, #16
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	893a      	ldrh	r2, [r7, #8]
 80035d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2bff      	cmp	r3, #255	@ 0xff
 80035e2:	d90e      	bls.n	8003602 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	22ff      	movs	r2, #255	@ 0xff
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	4b51      	ldr	r3, [pc, #324]	@ (8003738 <HAL_I2C_Master_Transmit+0x1e0>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa6c 	bl	8003ad8 <I2C_TransferConfig>
 8003600:	e06c      	b.n	80036dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <HAL_I2C_Master_Transmit+0x1e0>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fa5b 	bl	8003ad8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003622:	e05b      	b.n	80036dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	6a39      	ldr	r1, [r7, #32]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8ed 	bl	8003808 <I2C_WaitOnTXISFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e07b      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d034      	beq.n	80036dc <HAL_I2C_Master_Transmit+0x184>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003676:	2b00      	cmp	r3, #0
 8003678:	d130      	bne.n	80036dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	@ 0x80
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f87f 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e04d      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	2bff      	cmp	r3, #255	@ 0xff
 800369c:	d90e      	bls.n	80036bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	@ 0xff
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	8979      	ldrh	r1, [r7, #10]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa0f 	bl	8003ad8 <I2C_TransferConfig>
 80036ba:	e00f      	b.n	80036dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	8979      	ldrh	r1, [r7, #10]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f9fe 	bl	8003ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d19e      	bne.n	8003624 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6a39      	ldr	r1, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8cc 	bl	8003888 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e01a      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_I2C_Master_Transmit+0x1e4>)
 800370e:	400b      	ands	r3, r1
 8003710:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	80002000 	.word	0x80002000
 800373c:	fe00e800 	.word	0xfe00e800

08003740 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d103      	bne.n	800375e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d007      	beq.n	800377c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	619a      	str	r2, [r3, #24]
  }
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003798:	e022      	b.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d01e      	beq.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fe fa05 	bl	8001bb0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e00f      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d0cd      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003814:	e02c      	b.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f870 	bl	8003900 <I2C_IsErrorOccurred>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e02a      	b.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d01e      	beq.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe f9bd 	bl	8001bb0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d1cb      	bne.n	8003816 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003894:	e028      	b.n	80038e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f830 	bl	8003900 <I2C_IsErrorOccurred>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e026      	b.n	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fe f981 	bl	8001bb0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d113      	bne.n	80038e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d1cf      	bne.n	8003896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d075      	beq.n	8003a18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003934:	e056      	b.n	80039e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d052      	beq.n	80039e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe f937 	bl	8001bb0 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_IsErrorOccurred+0x54>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d147      	bne.n	80039e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003966:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003976:	d12e      	bne.n	80039d6 <I2C_IsErrorOccurred+0xd6>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800397e:	d02a      	beq.n	80039d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b20      	cmp	r3, #32
 8003984:	d027      	beq.n	80039d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003994:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003996:	f7fe f90b 	bl	8001bb0 <HAL_GetTick>
 800399a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800399c:	e01b      	b.n	80039d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800399e:	f7fe f907 	bl	8001bb0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b19      	cmp	r3, #25
 80039aa:	d914      	bls.n	80039d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d1dc      	bne.n	800399e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d003      	beq.n	80039fa <I2C_IsErrorOccurred+0xfa>
 80039f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d09d      	beq.n	8003936 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2220      	movs	r2, #32
 8003a08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01c      	beq.n	8003ac8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fe56 	bl	8003740 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <I2C_IsErrorOccurred+0x1d4>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	@ 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	fe00e800 	.word	0xfe00e800

08003ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	817b      	strh	r3, [r7, #10]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003af0:	7a7b      	ldrb	r3, [r7, #9]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003af8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b06:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	0d5b      	lsrs	r3, r3, #21
 8003b12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <I2C_TransferConfig+0x60>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	ea02 0103 	and.w	r1, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	03ff63ff 	.word	0x03ff63ff

08003b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d138      	bne.n	8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e032      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	@ 0x24
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d139      	bne.n	8003c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e033      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2224      	movs	r2, #36	@ 0x24
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6c:	b08f      	sub	sp, #60	@ 0x3c
 8003c6e:	af0a      	add	r7, sp, #40	@ 0x28
 8003c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e116      	b.n	8003eaa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fb12 	bl	80012c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 fada 	bl	8006274 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	687e      	ldr	r6, [r7, #4]
 8003cc8:	466d      	mov	r5, sp
 8003cca:	f106 0410 	add.w	r4, r6, #16
 8003cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cde:	1d33      	adds	r3, r6, #4
 8003ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce2:	6838      	ldr	r0, [r7, #0]
 8003ce4:	f002 fa6e 	bl	80061c4 <USB_CoreInit>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0d7      	b.n	8003eaa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fac8 	bl	8006296 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e04a      	b.n	8003da2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	333d      	adds	r3, #61	@ 0x3d
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	333c      	adds	r3, #60	@ 0x3c
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	b298      	uxth	r0, r3
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3342      	adds	r3, #66	@ 0x42
 8003d48:	4602      	mov	r2, r0
 8003d4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	333f      	adds	r3, #63	@ 0x3f
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3344      	adds	r3, #68	@ 0x44
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	3348      	adds	r3, #72	@ 0x48
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3350      	adds	r3, #80	@ 0x50
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d3af      	bcc.n	8003d0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e044      	b.n	8003e3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3b5      	bcc.n	8003db2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	687e      	ldr	r6, [r7, #4]
 8003e4e:	466d      	mov	r5, sp
 8003e50:	f106 0410 	add.w	r4, r6, #16
 8003e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e64:	1d33      	adds	r3, r6, #4
 8003e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e68:	6838      	ldr	r0, [r7, #0]
 8003e6a:	f002 fa61 	bl	8006330 <USB_DevInit>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e014      	b.n	8003eaa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f80b 	bl	8003eb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f002 fc1b 	bl	80066de <USB_DevDisconnect>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003eb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	10000003 	.word	0x10000003

08003efc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b23      	ldr	r3, [pc, #140]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	4a22      	ldr	r2, [pc, #136]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f32:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4a:	f7fd fe31 	bl	8001bb0 <HAL_GetTick>
 8003f4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f50:	e009      	b.n	8003f66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f52:	f7fd fe2d 	bl	8001bb0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f60:	d901      	bls.n	8003f66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e022      	b.n	8003fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f66:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f72:	d1ee      	bne.n	8003f52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f74:	4b10      	ldr	r3, [pc, #64]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f80:	f7fd fe16 	bl	8001bb0 <HAL_GetTick>
 8003f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f86:	e009      	b.n	8003f9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f88:	f7fd fe12 	bl	8001bb0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f96:	d901      	bls.n	8003f9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e007      	b.n	8003fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40007000 	.word	0x40007000

08003fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e29b      	b.n	800450a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8087 	beq.w	80040ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe0:	4b96      	ldr	r3, [pc, #600]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d00c      	beq.n	8004006 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fec:	4b93      	ldr	r3, [pc, #588]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d112      	bne.n	800401e <HAL_RCC_OscConfig+0x62>
 8003ff8:	4b90      	ldr	r3, [pc, #576]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004004:	d10b      	bne.n	800401e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004006:	4b8d      	ldr	r3, [pc, #564]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06c      	beq.n	80040ec <HAL_RCC_OscConfig+0x130>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d168      	bne.n	80040ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e275      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x7a>
 8004028:	4b84      	ldr	r3, [pc, #528]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a83      	ldr	r2, [pc, #524]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e02e      	b.n	8004094 <HAL_RCC_OscConfig+0xd8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x9c>
 800403e:	4b7f      	ldr	r3, [pc, #508]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7e      	ldr	r2, [pc, #504]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b7c      	ldr	r3, [pc, #496]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a7b      	ldr	r2, [pc, #492]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xd8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0xc0>
 8004062:	4b76      	ldr	r3, [pc, #472]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a75      	ldr	r2, [pc, #468]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b73      	ldr	r3, [pc, #460]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a72      	ldr	r2, [pc, #456]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xd8>
 800407c:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a6e      	ldr	r2, [pc, #440]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6b      	ldr	r2, [pc, #428]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fd88 	bl	8001bb0 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fd fd84 	bl	8001bb0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	@ 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e229      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b61      	ldr	r3, [pc, #388]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xe8>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fd74 	bl	8001bb0 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fd70 	bl	8001bb0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e215      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	4b57      	ldr	r3, [pc, #348]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x110>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d069      	beq.n	80041ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040fa:	4b50      	ldr	r3, [pc, #320]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b4d      	ldr	r3, [pc, #308]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d11c      	bne.n	800414c <HAL_RCC_OscConfig+0x190>
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x17a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e1e9      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b41      	ldr	r3, [pc, #260]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	493d      	ldr	r1, [pc, #244]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	e040      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d023      	beq.n	800419c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a38      	ldr	r2, [pc, #224]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd fd26 	bl	8001bb0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004168:	f7fd fd22 	bl	8001bb0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1c7      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b30      	ldr	r3, [pc, #192]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4929      	ldr	r1, [pc, #164]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
 800419a:	e018      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419c:	4b27      	ldr	r3, [pc, #156]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a26      	ldr	r2, [pc, #152]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fd02 	bl	8001bb0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd fcfe 	bl	8001bb0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1a3      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d038      	beq.n	800424c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d019      	beq.n	8004216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	4a15      	ldr	r2, [pc, #84]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fcdf 	bl	8001bb0 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fd fcdb 	bl	8001bb0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e180      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x23a>
 8004214:	e01a      	b.n	800424c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421a:	4a08      	ldr	r2, [pc, #32]	@ (800423c <HAL_RCC_OscConfig+0x280>)
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fd fcc5 	bl	8001bb0 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422a:	f7fd fcc1 	bl	8001bb0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d903      	bls.n	8004240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e166      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
 800423c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b92      	ldr	r3, [pc, #584]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ee      	bne.n	800422a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a4 	beq.w	80043a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b8c      	ldr	r3, [pc, #560]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10d      	bne.n	8004282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4a88      	ldr	r2, [pc, #544]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	@ 0x40
 8004272:	4b86      	ldr	r3, [pc, #536]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004282:	4b83      	ldr	r3, [pc, #524]	@ (8004490 <HAL_RCC_OscConfig+0x4d4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800428e:	4b80      	ldr	r3, [pc, #512]	@ (8004490 <HAL_RCC_OscConfig+0x4d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7f      	ldr	r2, [pc, #508]	@ (8004490 <HAL_RCC_OscConfig+0x4d4>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fd fc89 	bl	8001bb0 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a2:	f7fd fc85 	bl	8001bb0 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b64      	cmp	r3, #100	@ 0x64
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e12a      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b76      	ldr	r3, [pc, #472]	@ (8004490 <HAL_RCC_OscConfig+0x4d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x31a>
 80042c8:	4b70      	ldr	r3, [pc, #448]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a6f      	ldr	r2, [pc, #444]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	e02d      	b.n	8004332 <HAL_RCC_OscConfig+0x376>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x33c>
 80042de:	4b6b      	ldr	r3, [pc, #428]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	4a6a      	ldr	r2, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ea:	4b68      	ldr	r3, [pc, #416]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a67      	ldr	r2, [pc, #412]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	e01c      	b.n	8004332 <HAL_RCC_OscConfig+0x376>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	d10c      	bne.n	800431a <HAL_RCC_OscConfig+0x35e>
 8004300:	4b62      	ldr	r3, [pc, #392]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	4a61      	ldr	r2, [pc, #388]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	6713      	str	r3, [r2, #112]	@ 0x70
 800430c:	4b5f      	ldr	r3, [pc, #380]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a5e      	ldr	r2, [pc, #376]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
 8004318:	e00b      	b.n	8004332 <HAL_RCC_OscConfig+0x376>
 800431a:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	4a5b      	ldr	r2, [pc, #364]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	6713      	str	r3, [r2, #112]	@ 0x70
 8004326:	4b59      	ldr	r3, [pc, #356]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a58      	ldr	r2, [pc, #352]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d015      	beq.n	8004366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fc39 	bl	8001bb0 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd fc35 	bl	8001bb0 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0d8      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	4b4c      	ldr	r3, [pc, #304]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ee      	beq.n	8004342 <HAL_RCC_OscConfig+0x386>
 8004364:	e014      	b.n	8004390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd fc23 	bl	8001bb0 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fc1f 	bl	8001bb0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0c2      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004384:	4b41      	ldr	r3, [pc, #260]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ee      	bne.n	800436e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	4a3c      	ldr	r2, [pc, #240]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80ae 	beq.w	8004508 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ac:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d06d      	beq.n	8004494 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d14b      	bne.n	8004458 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b32      	ldr	r3, [pc, #200]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a31      	ldr	r2, [pc, #196]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fbf0 	bl	8001bb0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fbec 	bl	8001bb0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e091      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	071b      	lsls	r3, r3, #28
 800441e:	491b      	ldr	r1, [pc, #108]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fbbe 	bl	8001bb0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd fbba 	bl	8001bb0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e05f      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x47c>
 8004456:	e057      	b.n	8004508 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0b      	ldr	r2, [pc, #44]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 800445e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd fba4 	bl	8001bb0 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fba0 	bl	8001bb0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e045      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCC_OscConfig+0x4d0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x4b0>
 800448a:	e03d      	b.n	8004508 <HAL_RCC_OscConfig+0x54c>
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004494:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <HAL_RCC_OscConfig+0x558>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d030      	beq.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d129      	bne.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d122      	bne.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d119      	bne.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d10f      	bne.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0d0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b6a      	ldr	r3, [pc, #424]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b67      	ldr	r3, [pc, #412]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	4965      	ldr	r1, [pc, #404]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d040      	beq.n	800463c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d115      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e073      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3d      	ldr	r3, [pc, #244]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4936      	ldr	r1, [pc, #216]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd fad0 	bl	8001bb0 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fd facc 	bl	8001bb0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e053      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b27      	ldr	r3, [pc, #156]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d210      	bcs.n	800466c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4922      	ldr	r1, [pc, #136]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004696:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x1cc>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x1d0>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fc fed0 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0801f8d0 	.word	0x0801f8d0
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b094      	sub	sp, #80	@ 0x50
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80e1 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0db      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b73      	ldr	r3, [pc, #460]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004728:	e0db      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b73      	ldr	r3, [pc, #460]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800472e:	e0d8      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b6f      	ldr	r3, [pc, #444]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800473a:	4b6d      	ldr	r3, [pc, #436]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4651      	mov	r1, sl
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4651      	mov	r1, sl
 80047a4:	ebb2 0801 	subs.w	r8, r2, r1
 80047a8:	4659      	mov	r1, fp
 80047aa:	eb63 0901 	sbc.w	r9, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c2:	4690      	mov	r8, r2
 80047c4:	4699      	mov	r9, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb18 0303 	adds.w	r3, r8, r3
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb49 0303 	adc.w	r3, r9, r3
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e2:	4629      	mov	r1, r5
 80047e4:	024b      	lsls	r3, r1, #9
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ec:	4621      	mov	r1, r4
 80047ee:	024a      	lsls	r2, r1, #9
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004800:	f7fb fd76 	bl	80002f0 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800480c:	e058      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	4611      	mov	r1, r2
 800481a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4641      	mov	r1, r8
 8004842:	ebb2 0a01 	subs.w	sl, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb63 0b01 	sbc.w	fp, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800485c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004860:	ebb2 040a 	subs.w	r4, r2, sl
 8004864:	eb63 050b 	sbc.w	r5, r3, fp
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	464b      	mov	r3, r9
 8004884:	eb45 0303 	adc.w	r3, r5, r3
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	61fa      	str	r2, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	f7fb fd1c 	bl	80002f0 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3750      	adds	r7, #80	@ 0x50
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	@ (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	0801f8e0 	.word	0x0801f8e0

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	0801f8e0 	.word	0x0801f8e0

08004964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	220f      	movs	r2, #15
 8004972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004974:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004980:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800498c:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <HAL_RCC_GetClockConfig+0x60>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40023c00 	.word	0x40023c00

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049f0:	4b69      	ldr	r3, [pc, #420]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a68      	ldr	r2, [pc, #416]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	4964      	ldr	r1, [pc, #400]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a22:	4b5d      	ldr	r3, [pc, #372]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	4959      	ldr	r1, [pc, #356]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a40:	d101      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	494a      	ldr	r1, [pc, #296]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 808b 	beq.w	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b3a      	ldr	r3, [pc, #232]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	4a39      	ldr	r2, [pc, #228]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab8:	4b37      	ldr	r3, [pc, #220]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fd f86e 	bl	8001bb0 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fd f86a 	bl	8001bb0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e38f      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af6:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d035      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d02e      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b14:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b36:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b3c:	4b16      	ldr	r3, [pc, #88]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d114      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd f832 	bl	8001bb0 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fd f82e 	bl	8001bb0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e351      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7e:	d111      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	4901      	ldr	r1, [pc, #4]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	0ffffcff 	.word	0x0ffffcff
 8004ba4:	4bac      	ldr	r3, [pc, #688]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4aab      	ldr	r2, [pc, #684]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004baa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bae:	6093      	str	r3, [r2, #8]
 8004bb0:	4ba9      	ldr	r3, [pc, #676]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	49a6      	ldr	r1, [pc, #664]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bce:	4ba2      	ldr	r3, [pc, #648]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd4:	4aa0      	ldr	r2, [pc, #640]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bde:	4b9e      	ldr	r3, [pc, #632]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	499b      	ldr	r1, [pc, #620]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bfc:	4b96      	ldr	r3, [pc, #600]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0a:	4993      	ldr	r1, [pc, #588]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c2c:	498a      	ldr	r1, [pc, #552]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c40:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	4982      	ldr	r1, [pc, #520]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c62:	4b7d      	ldr	r3, [pc, #500]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	4979      	ldr	r1, [pc, #484]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c84:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c92:	4971      	ldr	r1, [pc, #452]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cac:	f023 020c 	bic.w	r2, r3, #12
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	4968      	ldr	r1, [pc, #416]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc8:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	4960      	ldr	r1, [pc, #384]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cea:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	4957      	ldr	r1, [pc, #348]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d0c:	4b52      	ldr	r3, [pc, #328]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	494f      	ldr	r1, [pc, #316]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4946      	ldr	r1, [pc, #280]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d50:	4b41      	ldr	r3, [pc, #260]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	493e      	ldr	r1, [pc, #248]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d72:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	4935      	ldr	r1, [pc, #212]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d94:	4b30      	ldr	r3, [pc, #192]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da2:	492d      	ldr	r1, [pc, #180]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004db6:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc4:	4924      	ldr	r1, [pc, #144]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df6:	4b18      	ldr	r3, [pc, #96]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e04:	4914      	ldr	r1, [pc, #80]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e28:	490b      	ldr	r1, [pc, #44]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4c:	4902      	ldr	r1, [pc, #8]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e68:	4b8a      	ldr	r3, [pc, #552]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	4986      	ldr	r1, [pc, #536]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e8c:	4b81      	ldr	r3, [pc, #516]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	497d      	ldr	r1, [pc, #500]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80d6 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb8:	4b76      	ldr	r3, [pc, #472]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a75      	ldr	r2, [pc, #468]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fc fe74 	bl	8001bb0 <HAL_GetTick>
 8004ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ecc:	f7fc fe70 	bl	8001bb0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	@ 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e195      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ede:	4b6d      	ldr	r3, [pc, #436]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d021      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004efe:	4b65      	ldr	r3, [pc, #404]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f0c:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f12:	0e1b      	lsrs	r3, r3, #24
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	019a      	lsls	r2, r3, #6
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	071b      	lsls	r3, r3, #28
 8004f32:	4958      	ldr	r1, [pc, #352]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02e      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f64:	d129      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f66:	4b4b      	ldr	r3, [pc, #300]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f74:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7a:	0f1b      	lsrs	r3, r3, #28
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	019a      	lsls	r2, r3, #6
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	493e      	ldr	r1, [pc, #248]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa8:	f023 021f 	bic.w	r2, r3, #31
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4938      	ldr	r1, [pc, #224]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01d      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc6:	4b33      	ldr	r3, [pc, #204]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fda:	0f1b      	lsrs	r3, r3, #28
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	019a      	lsls	r2, r3, #6
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	4926      	ldr	r1, [pc, #152]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	019a      	lsls	r2, r3, #6
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	491a      	ldr	r1, [pc, #104]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005032:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005038:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc fdb7 	bl	8001bb0 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005046:	f7fc fdb3 	bl	8001bb0 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b64      	cmp	r3, #100	@ 0x64
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0d8      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b01      	cmp	r3, #1
 8005068:	f040 80ce 	bne.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800506c:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a08      	ldr	r2, [pc, #32]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fc fd9a 	bl	8001bb0 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800507e:	e00b      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005080:	f7fc fd96 	bl	8001bb0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d904      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0bb      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005098:	4b5e      	ldr	r3, [pc, #376]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a4:	d0ec      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d02e      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d12a      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ce:	4b51      	ldr	r3, [pc, #324]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4944      	ldr	r1, [pc, #272]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800510a:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005110:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	493d      	ldr	r1, [pc, #244]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005138:	d11d      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005148:	4b32      	ldr	r3, [pc, #200]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514e:	0f1b      	lsrs	r3, r3, #28
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	019a      	lsls	r2, r3, #6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	4929      	ldr	r1, [pc, #164]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005182:	4b24      	ldr	r3, [pc, #144]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	0e1b      	lsrs	r3, r3, #24
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005190:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	019a      	lsls	r2, r3, #6
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	071b      	lsls	r3, r3, #28
 80051b6:	4917      	ldr	r1, [pc, #92]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	4911      	ldr	r1, [pc, #68]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e0:	f7fc fce6 	bl	8001bb0 <HAL_GetTick>
 80051e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e8:	f7fc fce2 	bl	8001bb0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e007      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005206:	d1ef      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800

08005218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e049      	b.n	80052be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f841 	bl	80052c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 fa00 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e054      	b.n	800539e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a26      	ldr	r2, [pc, #152]	@ (80053ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	@ (80053b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1f      	ldr	r2, [pc, #124]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1e      	ldr	r2, [pc, #120]	@ (80053bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1b      	ldr	r2, [pc, #108]	@ (80053c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d115      	bne.n	8005388 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005364:	4013      	ands	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d015      	beq.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005374:	d011      	beq.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	e008      	b.n	800539a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e000      	b.n	800539c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800
 80053c8:	00010007 	.word	0x00010007

080053cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0202 	mvn.w	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f905 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8f7 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f908 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b04      	cmp	r3, #4
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0204 	mvn.w	r2, #4
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8db 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8cd 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8de 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b08      	cmp	r3, #8
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8b1 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8a3 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8b4 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2208      	movs	r2, #8
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f887 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f879 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f88a 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0201 	mvn.w	r2, #1
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fe18 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f91a 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b80      	cmp	r3, #128	@ 0x80
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f90d 	bl	80057c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f838 	bl	8005646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d10e      	bne.n	8005602 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0220 	mvn.w	r2, #32
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8cd 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a40      	ldr	r2, [pc, #256]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3d      	ldr	r2, [pc, #244]	@ (8005774 <TIM_Base_SetConfig+0x118>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3c      	ldr	r2, [pc, #240]	@ (8005778 <TIM_Base_SetConfig+0x11c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3b      	ldr	r2, [pc, #236]	@ (800577c <TIM_Base_SetConfig+0x120>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3a      	ldr	r2, [pc, #232]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d027      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005774 <TIM_Base_SetConfig+0x118>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d023      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005778 <TIM_Base_SetConfig+0x11c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2a      	ldr	r2, [pc, #168]	@ (800577c <TIM_Base_SetConfig+0x120>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a29      	ldr	r2, [pc, #164]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d017      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a28      	ldr	r2, [pc, #160]	@ (8005784 <TIM_Base_SetConfig+0x128>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a26      	ldr	r2, [pc, #152]	@ (800578c <TIM_Base_SetConfig+0x130>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a25      	ldr	r2, [pc, #148]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a24      	ldr	r2, [pc, #144]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a23      	ldr	r2, [pc, #140]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0a      	ldr	r2, [pc, #40]	@ (8005770 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <TIM_Base_SetConfig+0x124>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d103      	bne.n	800575c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	615a      	str	r2, [r3, #20]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40010400 	.word	0x40010400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800
 8005790:	40001800 	.word	0x40001800
 8005794:	40001c00 	.word	0x40001c00
 8005798:	40002000 	.word	0x40002000

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e040      	b.n	800586c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fb fd00 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	@ 0x24
 8005804:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8c0 	bl	800599c <UART_SetConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e022      	b.n	800586c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb18 	bl	8005e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fb9f 	bl	8005fa8 <UART_CheckIdleState>
 800586a:	4603      	mov	r3, r0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005888:	2b20      	cmp	r3, #32
 800588a:	f040 8081 	bne.w	8005990 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Transmit+0x26>
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e079      	b.n	8005992 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Transmit+0x38>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e072      	b.n	8005992 <HAL_UART_Transmit+0x11e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2221      	movs	r2, #33	@ 0x21
 80058c0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c2:	f7fc f975 	bl	8001bb0 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e0:	d108      	bne.n	80058f4 <HAL_UART_Transmit+0x80>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e003      	b.n	80058fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8005904:	e02c      	b.n	8005960 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	@ 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fb92 	bl	800603a <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e038      	b.n	8005992 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3302      	adds	r3, #2
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e007      	b.n	800594e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1cc      	bne.n	8005906 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	2140      	movs	r1, #64	@ 0x40
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fb5f 	bl	800603a <UART_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e005      	b.n	8005992 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4ba6      	ldr	r3, [pc, #664]	@ (8005c60 <UART_SetConfig+0x2c4>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	6979      	ldr	r1, [r7, #20]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a94      	ldr	r2, [pc, #592]	@ (8005c64 <UART_SetConfig+0x2c8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d120      	bne.n	8005a5a <UART_SetConfig+0xbe>
 8005a18:	4b93      	ldr	r3, [pc, #588]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d816      	bhi.n	8005a54 <UART_SetConfig+0xb8>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x90>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a49 	.word	0x08005a49
 8005a34:	08005a43 	.word	0x08005a43
 8005a38:	08005a4f 	.word	0x08005a4f
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e150      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e14d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e14a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e147      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e144      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a83      	ldr	r2, [pc, #524]	@ (8005c6c <UART_SetConfig+0x2d0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d132      	bne.n	8005aca <UART_SetConfig+0x12e>
 8005a64:	4b80      	ldr	r3, [pc, #512]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d828      	bhi.n	8005ac4 <UART_SetConfig+0x128>
 8005a72:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <UART_SetConfig+0xdc>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ab9 	.word	0x08005ab9
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ab3 	.word	0x08005ab3
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005ac5 	.word	0x08005ac5
 8005aa8:	08005abf 	.word	0x08005abf
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e118      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e115      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e112      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e10f      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e10c      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a68      	ldr	r2, [pc, #416]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d120      	bne.n	8005b16 <UART_SetConfig+0x17a>
 8005ad4:	4b64      	ldr	r3, [pc, #400]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ada:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ade:	2b30      	cmp	r3, #48	@ 0x30
 8005ae0:	d013      	beq.n	8005b0a <UART_SetConfig+0x16e>
 8005ae2:	2b30      	cmp	r3, #48	@ 0x30
 8005ae4:	d814      	bhi.n	8005b10 <UART_SetConfig+0x174>
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d009      	beq.n	8005afe <UART_SetConfig+0x162>
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d810      	bhi.n	8005b10 <UART_SetConfig+0x174>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <UART_SetConfig+0x15c>
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d006      	beq.n	8005b04 <UART_SetConfig+0x168>
 8005af6:	e00b      	b.n	8005b10 <UART_SetConfig+0x174>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e0f2      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005afe:	2302      	movs	r3, #2
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e0ef      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b04:	2304      	movs	r3, #4
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e0ec      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e0e9      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b10:	2310      	movs	r3, #16
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e0e6      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a56      	ldr	r2, [pc, #344]	@ (8005c74 <UART_SetConfig+0x2d8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d120      	bne.n	8005b62 <UART_SetConfig+0x1c6>
 8005b20:	4b51      	ldr	r3, [pc, #324]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b2c:	d013      	beq.n	8005b56 <UART_SetConfig+0x1ba>
 8005b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b30:	d814      	bhi.n	8005b5c <UART_SetConfig+0x1c0>
 8005b32:	2b80      	cmp	r3, #128	@ 0x80
 8005b34:	d009      	beq.n	8005b4a <UART_SetConfig+0x1ae>
 8005b36:	2b80      	cmp	r3, #128	@ 0x80
 8005b38:	d810      	bhi.n	8005b5c <UART_SetConfig+0x1c0>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <UART_SetConfig+0x1a8>
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d006      	beq.n	8005b50 <UART_SetConfig+0x1b4>
 8005b42:	e00b      	b.n	8005b5c <UART_SetConfig+0x1c0>
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e0cc      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e0c9      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b50:	2304      	movs	r3, #4
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e0c6      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b56:	2308      	movs	r3, #8
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e0c3      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e0c0      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a44      	ldr	r2, [pc, #272]	@ (8005c78 <UART_SetConfig+0x2dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d125      	bne.n	8005bb8 <UART_SetConfig+0x21c>
 8005b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b7a:	d017      	beq.n	8005bac <UART_SetConfig+0x210>
 8005b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b80:	d817      	bhi.n	8005bb2 <UART_SetConfig+0x216>
 8005b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b86:	d00b      	beq.n	8005ba0 <UART_SetConfig+0x204>
 8005b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b8c:	d811      	bhi.n	8005bb2 <UART_SetConfig+0x216>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <UART_SetConfig+0x1fe>
 8005b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b96:	d006      	beq.n	8005ba6 <UART_SetConfig+0x20a>
 8005b98:	e00b      	b.n	8005bb2 <UART_SetConfig+0x216>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e0a1      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e09e      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e09b      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bac:	2308      	movs	r3, #8
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e098      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bb2:	2310      	movs	r3, #16
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e095      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8005c7c <UART_SetConfig+0x2e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d125      	bne.n	8005c0e <UART_SetConfig+0x272>
 8005bc2:	4b29      	ldr	r3, [pc, #164]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bd0:	d017      	beq.n	8005c02 <UART_SetConfig+0x266>
 8005bd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bd6:	d817      	bhi.n	8005c08 <UART_SetConfig+0x26c>
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bdc:	d00b      	beq.n	8005bf6 <UART_SetConfig+0x25a>
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be2:	d811      	bhi.n	8005c08 <UART_SetConfig+0x26c>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <UART_SetConfig+0x254>
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bec:	d006      	beq.n	8005bfc <UART_SetConfig+0x260>
 8005bee:	e00b      	b.n	8005c08 <UART_SetConfig+0x26c>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e076      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e073      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e070      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c02:	2308      	movs	r3, #8
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e06d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e06a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <UART_SetConfig+0x2e4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d138      	bne.n	8005c8a <UART_SetConfig+0x2ee>
 8005c18:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c26:	d017      	beq.n	8005c58 <UART_SetConfig+0x2bc>
 8005c28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c2c:	d82a      	bhi.n	8005c84 <UART_SetConfig+0x2e8>
 8005c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c32:	d00b      	beq.n	8005c4c <UART_SetConfig+0x2b0>
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c38:	d824      	bhi.n	8005c84 <UART_SetConfig+0x2e8>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <UART_SetConfig+0x2aa>
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c42:	d006      	beq.n	8005c52 <UART_SetConfig+0x2b6>
 8005c44:	e01e      	b.n	8005c84 <UART_SetConfig+0x2e8>
 8005c46:	2300      	movs	r3, #0
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e04b      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e048      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c52:	2304      	movs	r3, #4
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e045      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e042      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c5e:	bf00      	nop
 8005c60:	efff69f3 	.word	0xefff69f3
 8005c64:	40011000 	.word	0x40011000
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	40004800 	.word	0x40004800
 8005c74:	40004c00 	.word	0x40004c00
 8005c78:	40005000 	.word	0x40005000
 8005c7c:	40011400 	.word	0x40011400
 8005c80:	40007800 	.word	0x40007800
 8005c84:	2310      	movs	r3, #16
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e02c      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a72      	ldr	r2, [pc, #456]	@ (8005e58 <UART_SetConfig+0x4bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d125      	bne.n	8005ce0 <UART_SetConfig+0x344>
 8005c94:	4b71      	ldr	r3, [pc, #452]	@ (8005e5c <UART_SetConfig+0x4c0>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c9e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ca2:	d017      	beq.n	8005cd4 <UART_SetConfig+0x338>
 8005ca4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ca8:	d817      	bhi.n	8005cda <UART_SetConfig+0x33e>
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cae:	d00b      	beq.n	8005cc8 <UART_SetConfig+0x32c>
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cb4:	d811      	bhi.n	8005cda <UART_SetConfig+0x33e>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <UART_SetConfig+0x326>
 8005cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cbe:	d006      	beq.n	8005cce <UART_SetConfig+0x332>
 8005cc0:	e00b      	b.n	8005cda <UART_SetConfig+0x33e>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e00d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e00a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cce:	2304      	movs	r3, #4
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e007      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e004      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cda:	2310      	movs	r3, #16
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e001      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cec:	d15b      	bne.n	8005da6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005cee:	7ffb      	ldrb	r3, [r7, #31]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d828      	bhi.n	8005d46 <UART_SetConfig+0x3aa>
 8005cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <UART_SetConfig+0x360>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d47 	.word	0x08005d47
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d47 	.word	0x08005d47
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fe fdf8 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8005d24:	61b8      	str	r0, [r7, #24]
        break;
 8005d26:	e013      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fe fe08 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b4b      	ldr	r3, [pc, #300]	@ (8005e60 <UART_SetConfig+0x4c4>)
 8005d32:	61bb      	str	r3, [r7, #24]
        break;
 8005d34:	e00c      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d36:	f7fe fcdb 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8005d3a:	61b8      	str	r0, [r7, #24]
        break;
 8005d3c:	e008      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d42:	61bb      	str	r3, [r7, #24]
        break;
 8005d44:	e004      	b.n	8005d50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d074      	beq.n	8005e40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	005a      	lsls	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d916      	bls.n	8005da0 <UART_SetConfig+0x404>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d212      	bcs.n	8005da0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f023 030f 	bic.w	r3, r3, #15
 8005d82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	89fa      	ldrh	r2, [r7, #14]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e04f      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	77bb      	strb	r3, [r7, #30]
 8005da4:	e04c      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da6:	7ffb      	ldrb	r3, [r7, #31]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d828      	bhi.n	8005dfe <UART_SetConfig+0x462>
 8005dac:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x418>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005de1 	.word	0x08005de1
 8005dbc:	08005de9 	.word	0x08005de9
 8005dc0:	08005dff 	.word	0x08005dff
 8005dc4:	08005def 	.word	0x08005def
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005dff 	.word	0x08005dff
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fe fd9c 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	61b8      	str	r0, [r7, #24]
        break;
 8005dde:	e013      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fe fdac 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8005de4:	61b8      	str	r0, [r7, #24]
        break;
 8005de6:	e00f      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e60 <UART_SetConfig+0x4c4>)
 8005dea:	61bb      	str	r3, [r7, #24]
        break;
 8005dec:	e00c      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fe fc7f 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8005df2:	61b8      	str	r0, [r7, #24]
        break;
 8005df4:	e008      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dfa:	61bb      	str	r3, [r7, #24]
        break;
 8005dfc:	e004      	b.n	8005e08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	77bb      	strb	r3, [r7, #30]
        break;
 8005e06:	bf00      	nop
    }

    if (pclk != 0U)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	085a      	lsrs	r2, r3, #1
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	441a      	add	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b0f      	cmp	r3, #15
 8005e26:	d909      	bls.n	8005e3c <UART_SetConfig+0x4a0>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e2e:	d205      	bcs.n	8005e3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	e001      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8005e4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40007c00 	.word	0x40007c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	00f42400 	.word	0x00f42400

08005e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f62:	d10a      	bne.n	8005f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fb8:	f7fb fdfa 	bl	8001bb0 <HAL_GetTick>
 8005fbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d10e      	bne.n	8005fea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f82d 	bl	800603a <UART_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e023      	b.n	8006032 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d10e      	bne.n	8006016 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f817 	bl	800603a <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e00d      	b.n	8006032 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b09c      	sub	sp, #112	@ 0x70
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604a:	e0a5      	b.n	8006198 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	f000 80a1 	beq.w	8006198 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fb fdab 	bl	8001bb0 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <UART_WaitOnFlagUntilTimeout+0x32>
 8006066:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006068:	2b00      	cmp	r3, #0
 800606a:	d13e      	bne.n	80060ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800607a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800607c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006080:	667b      	str	r3, [r7, #100]	@ 0x64
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800608c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006090:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060be:	64ba      	str	r2, [r7, #72]	@ 0x48
 80060c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80060cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e067      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d04f      	beq.n	8006198 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006106:	d147      	bne.n	8006198 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
 8006132:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	613b      	str	r3, [r7, #16]
   return(result);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3308      	adds	r3, #8
 8006162:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006164:	623a      	str	r2, [r7, #32]
 8006166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	61bb      	str	r3, [r7, #24]
   return(result);
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e010      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69da      	ldr	r2, [r3, #28]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4013      	ands	r3, r2
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	f43f af4a 	beq.w	800604c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3770      	adds	r7, #112	@ 0x70
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c4:	b084      	sub	sp, #16
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	f107 001c 	add.w	r0, r7, #28
 80061d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d120      	bne.n	800621e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	4b20      	ldr	r3, [pc, #128]	@ (8006270 <USB_CoreInit+0xac>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa92 	bl	800673c <USB_CoreReset>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e010      	b.n	8006240 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa86 	bl	800673c <USB_CoreReset>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10b      	bne.n	800625e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f043 0206 	orr.w	r2, r3, #6
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800626a:	b004      	add	sp, #16
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	ffbdffbf 	.word	0xffbdffbf

08006274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f023 0201 	bic.w	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d115      	bne.n	80062e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062c4:	2001      	movs	r0, #1
 80062c6:	f7fb fc7f 	bl	8001bc8 <HAL_Delay>
      ms++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa25 	bl	8006720 <USB_GetMode>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d01e      	beq.n	800631a <USB_SetCurrentMode+0x84>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b31      	cmp	r3, #49	@ 0x31
 80062e0:	d9f0      	bls.n	80062c4 <USB_SetCurrentMode+0x2e>
 80062e2:	e01a      	b.n	800631a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d115      	bne.n	8006316 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7fb fc66 	bl	8001bc8 <HAL_Delay>
      ms++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa0c 	bl	8006720 <USB_GetMode>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <USB_SetCurrentMode+0x84>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b31      	cmp	r3, #49	@ 0x31
 8006312:	d9f0      	bls.n	80062f6 <USB_SetCurrentMode+0x60>
 8006314:	e001      	b.n	800631a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e005      	b.n	8006326 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b32      	cmp	r3, #50	@ 0x32
 800631e:	d101      	bne.n	8006324 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006330:	b084      	sub	sp, #16
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800633e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	e009      	b.n	8006364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3340      	adds	r3, #64	@ 0x40
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b0e      	cmp	r3, #14
 8006368:	d9f2      	bls.n	8006350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800636a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11c      	bne.n	80063aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800637e:	f043 0302 	orr.w	r3, r3, #2
 8006382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e005      	b.n	80063b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063bc:	461a      	mov	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c8:	4619      	mov	r1, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	461a      	mov	r2, r3
 80063d2:	680b      	ldr	r3, [r1, #0]
 80063d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d10c      	bne.n	80063f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063e2:	2100      	movs	r1, #0
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f961 	bl	80066ac <USB_SetDevSpeed>
 80063ea:	e008      	b.n	80063fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063ec:	2101      	movs	r1, #1
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f95c 	bl	80066ac <USB_SetDevSpeed>
 80063f4:	e003      	b.n	80063fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063f6:	2103      	movs	r1, #3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f957 	bl	80066ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063fe:	2110      	movs	r1, #16
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8f3 	bl	80065ec <USB_FlushTxFifo>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f91d 	bl	8006650 <USB_FlushRxFifo>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006432:	461a      	mov	r2, r3
 8006434:	2300      	movs	r3, #0
 8006436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643e:	461a      	mov	r2, r3
 8006440:	2300      	movs	r3, #0
 8006442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	e043      	b.n	80064d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006460:	d118      	bne.n	8006494 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006474:	461a      	mov	r2, r3
 8006476:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e013      	b.n	80064a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648a:	461a      	mov	r2, r3
 800648c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e008      	b.n	80064a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a0:	461a      	mov	r2, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	461a      	mov	r2, r3
 80064c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3301      	adds	r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3b7      	bcc.n	800644a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	e043      	b.n	8006568 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064f6:	d118      	bne.n	800652a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	461a      	mov	r2, r3
 800650c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e013      	b.n	800653c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006520:	461a      	mov	r2, r3
 8006522:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e008      	b.n	800653c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006536:	461a      	mov	r2, r3
 8006538:	2300      	movs	r3, #0
 800653a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	461a      	mov	r2, r3
 800655c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3301      	adds	r3, #1
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d3b7      	bcc.n	80064e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800657e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006582:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006590:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f043 0210 	orr.w	r2, r3, #16
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	4b0e      	ldr	r3, [pc, #56]	@ (80065e4 <USB_DevInit+0x2b4>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f043 0208 	orr.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d105      	bne.n	80065d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <USB_DevInit+0x2b8>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065e0:	b004      	add	sp, #16
 80065e2:	4770      	bx	lr
 80065e4:	803c3800 	.word	0x803c3800
 80065e8:	40000004 	.word	0x40000004

080065ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	4a12      	ldr	r2, [pc, #72]	@ (800664c <USB_FlushTxFifo+0x60>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e01a      	b.n	8006640 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	daf3      	bge.n	80065fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4a08      	ldr	r2, [pc, #32]	@ (800664c <USB_FlushTxFifo+0x60>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e006      	b.n	8006640 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b20      	cmp	r3, #32
 800663c:	d0f1      	beq.n	8006622 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	00030d40 	.word	0x00030d40

08006650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	4a11      	ldr	r2, [pc, #68]	@ (80066a8 <USB_FlushRxFifo+0x58>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e017      	b.n	800669c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	daf3      	bge.n	800665c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2210      	movs	r2, #16
 800667c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	4a08      	ldr	r2, [pc, #32]	@ (80066a8 <USB_FlushRxFifo+0x58>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e006      	b.n	800669c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d0f1      	beq.n	800667e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0301 	and.w	r3, r3, #1
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	4a13      	ldr	r2, [pc, #76]	@ (800679c <USB_CoreReset+0x60>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e01a      	b.n	800678e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	daf3      	bge.n	8006748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f043 0201 	orr.w	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4a09      	ldr	r2, [pc, #36]	@ (800679c <USB_CoreReset+0x60>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d901      	bls.n	8006780 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e006      	b.n	800678e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d0f1      	beq.n	8006770 <USB_CoreReset+0x34>

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	00030d40 	.word	0x00030d40

080067a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80067a6:	4ba0      	ldr	r3, [pc, #640]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067a8:	22c0      	movs	r2, #192	@ 0xc0
 80067aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80067ac:	4b9e      	ldr	r3, [pc, #632]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067ae:	22a8      	movs	r2, #168	@ 0xa8
 80067b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80067b2:	4b9d      	ldr	r3, [pc, #628]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 80067b8:	4b9b      	ldr	r3, [pc, #620]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067ba:	221c      	movs	r2, #28
 80067bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80067be:	4b9b      	ldr	r3, [pc, #620]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80067c0:	22ff      	movs	r2, #255	@ 0xff
 80067c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80067c4:	4b99      	ldr	r3, [pc, #612]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80067c6:	22ff      	movs	r2, #255	@ 0xff
 80067c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80067ca:	4b98      	ldr	r3, [pc, #608]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80067cc:	22ff      	movs	r2, #255	@ 0xff
 80067ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80067d0:	4b96      	ldr	r3, [pc, #600]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80067d6:	4b96      	ldr	r3, [pc, #600]	@ (8006a30 <MX_LWIP_Init+0x290>)
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80067dc:	4b94      	ldr	r3, [pc, #592]	@ (8006a30 <MX_LWIP_Init+0x290>)
 80067de:	2200      	movs	r2, #0
 80067e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80067e2:	4b93      	ldr	r3, [pc, #588]	@ (8006a30 <MX_LWIP_Init+0x290>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80067e8:	4b91      	ldr	r3, [pc, #580]	@ (8006a30 <MX_LWIP_Init+0x290>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80067ee:	2100      	movs	r1, #0
 80067f0:	2000      	movs	r0, #0
 80067f2:	f007 fd6f 	bl	800e2d4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80067f6:	4b8c      	ldr	r3, [pc, #560]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	061a      	lsls	r2, r3, #24
 80067fc:	4b8a      	ldr	r3, [pc, #552]	@ (8006a28 <MX_LWIP_Init+0x288>)
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	431a      	orrs	r2, r3
 8006804:	4b88      	ldr	r3, [pc, #544]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	4313      	orrs	r3, r2
 800680c:	4a86      	ldr	r2, [pc, #536]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800680e:	78d2      	ldrb	r2, [r2, #3]
 8006810:	4313      	orrs	r3, r2
 8006812:	061a      	lsls	r2, r3, #24
 8006814:	4b84      	ldr	r3, [pc, #528]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	0619      	lsls	r1, r3, #24
 800681a:	4b83      	ldr	r3, [pc, #524]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	4319      	orrs	r1, r3
 8006822:	4b81      	ldr	r3, [pc, #516]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006824:	789b      	ldrb	r3, [r3, #2]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	430b      	orrs	r3, r1
 800682a:	497f      	ldr	r1, [pc, #508]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800682c:	78c9      	ldrb	r1, [r1, #3]
 800682e:	430b      	orrs	r3, r1
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006836:	431a      	orrs	r2, r3
 8006838:	4b7b      	ldr	r3, [pc, #492]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	0619      	lsls	r1, r3, #24
 800683e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	041b      	lsls	r3, r3, #16
 8006844:	4319      	orrs	r1, r3
 8006846:	4b78      	ldr	r3, [pc, #480]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006848:	789b      	ldrb	r3, [r3, #2]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	430b      	orrs	r3, r1
 800684e:	4976      	ldr	r1, [pc, #472]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006850:	78c9      	ldrb	r1, [r1, #3]
 8006852:	430b      	orrs	r3, r1
 8006854:	0a1b      	lsrs	r3, r3, #8
 8006856:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800685a:	431a      	orrs	r2, r3
 800685c:	4b72      	ldr	r3, [pc, #456]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	0619      	lsls	r1, r3, #24
 8006862:	4b71      	ldr	r3, [pc, #452]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	4319      	orrs	r1, r3
 800686a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a28 <MX_LWIP_Init+0x288>)
 800686c:	789b      	ldrb	r3, [r3, #2]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	430b      	orrs	r3, r1
 8006872:	496d      	ldr	r1, [pc, #436]	@ (8006a28 <MX_LWIP_Init+0x288>)
 8006874:	78c9      	ldrb	r1, [r1, #3]
 8006876:	430b      	orrs	r3, r1
 8006878:	0e1b      	lsrs	r3, r3, #24
 800687a:	4313      	orrs	r3, r2
 800687c:	4a6d      	ldr	r2, [pc, #436]	@ (8006a34 <MX_LWIP_Init+0x294>)
 800687e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006880:	4b6a      	ldr	r3, [pc, #424]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	061a      	lsls	r2, r3, #24
 8006886:	4b69      	ldr	r3, [pc, #420]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	431a      	orrs	r2, r3
 800688e:	4b67      	ldr	r3, [pc, #412]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 8006890:	789b      	ldrb	r3, [r3, #2]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	4313      	orrs	r3, r2
 8006896:	4a65      	ldr	r2, [pc, #404]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 8006898:	78d2      	ldrb	r2, [r2, #3]
 800689a:	4313      	orrs	r3, r2
 800689c:	061a      	lsls	r2, r3, #24
 800689e:	4b63      	ldr	r3, [pc, #396]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	0619      	lsls	r1, r3, #24
 80068a4:	4b61      	ldr	r3, [pc, #388]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	4319      	orrs	r1, r3
 80068ac:	4b5f      	ldr	r3, [pc, #380]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	430b      	orrs	r3, r1
 80068b4:	495d      	ldr	r1, [pc, #372]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068b6:	78c9      	ldrb	r1, [r1, #3]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068c0:	431a      	orrs	r2, r3
 80068c2:	4b5a      	ldr	r3, [pc, #360]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	0619      	lsls	r1, r3, #24
 80068c8:	4b58      	ldr	r3, [pc, #352]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	4319      	orrs	r1, r3
 80068d0:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068d2:	789b      	ldrb	r3, [r3, #2]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	430b      	orrs	r3, r1
 80068d8:	4954      	ldr	r1, [pc, #336]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068da:	78c9      	ldrb	r1, [r1, #3]
 80068dc:	430b      	orrs	r3, r1
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80068e4:	431a      	orrs	r2, r3
 80068e6:	4b51      	ldr	r3, [pc, #324]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	0619      	lsls	r1, r3, #24
 80068ec:	4b4f      	ldr	r3, [pc, #316]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	041b      	lsls	r3, r3, #16
 80068f2:	4319      	orrs	r1, r3
 80068f4:	4b4d      	ldr	r3, [pc, #308]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068f6:	789b      	ldrb	r3, [r3, #2]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	430b      	orrs	r3, r1
 80068fc:	494b      	ldr	r1, [pc, #300]	@ (8006a2c <MX_LWIP_Init+0x28c>)
 80068fe:	78c9      	ldrb	r1, [r1, #3]
 8006900:	430b      	orrs	r3, r1
 8006902:	0e1b      	lsrs	r3, r3, #24
 8006904:	4313      	orrs	r3, r2
 8006906:	4a4c      	ldr	r2, [pc, #304]	@ (8006a38 <MX_LWIP_Init+0x298>)
 8006908:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800690a:	4b49      	ldr	r3, [pc, #292]	@ (8006a30 <MX_LWIP_Init+0x290>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	061a      	lsls	r2, r3, #24
 8006910:	4b47      	ldr	r3, [pc, #284]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	431a      	orrs	r2, r3
 8006918:	4b45      	ldr	r3, [pc, #276]	@ (8006a30 <MX_LWIP_Init+0x290>)
 800691a:	789b      	ldrb	r3, [r3, #2]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	4313      	orrs	r3, r2
 8006920:	4a43      	ldr	r2, [pc, #268]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006922:	78d2      	ldrb	r2, [r2, #3]
 8006924:	4313      	orrs	r3, r2
 8006926:	061a      	lsls	r2, r3, #24
 8006928:	4b41      	ldr	r3, [pc, #260]	@ (8006a30 <MX_LWIP_Init+0x290>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	0619      	lsls	r1, r3, #24
 800692e:	4b40      	ldr	r3, [pc, #256]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	041b      	lsls	r3, r3, #16
 8006934:	4319      	orrs	r1, r3
 8006936:	4b3e      	ldr	r3, [pc, #248]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006938:	789b      	ldrb	r3, [r3, #2]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	430b      	orrs	r3, r1
 800693e:	493c      	ldr	r1, [pc, #240]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006940:	78c9      	ldrb	r1, [r1, #3]
 8006942:	430b      	orrs	r3, r1
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800694a:	431a      	orrs	r2, r3
 800694c:	4b38      	ldr	r3, [pc, #224]	@ (8006a30 <MX_LWIP_Init+0x290>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	0619      	lsls	r1, r3, #24
 8006952:	4b37      	ldr	r3, [pc, #220]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	4319      	orrs	r1, r3
 800695a:	4b35      	ldr	r3, [pc, #212]	@ (8006a30 <MX_LWIP_Init+0x290>)
 800695c:	789b      	ldrb	r3, [r3, #2]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	430b      	orrs	r3, r1
 8006962:	4933      	ldr	r1, [pc, #204]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006964:	78c9      	ldrb	r1, [r1, #3]
 8006966:	430b      	orrs	r3, r1
 8006968:	0a1b      	lsrs	r3, r3, #8
 800696a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800696e:	431a      	orrs	r2, r3
 8006970:	4b2f      	ldr	r3, [pc, #188]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	0619      	lsls	r1, r3, #24
 8006976:	4b2e      	ldr	r3, [pc, #184]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006978:	785b      	ldrb	r3, [r3, #1]
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	4319      	orrs	r1, r3
 800697e:	4b2c      	ldr	r3, [pc, #176]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006980:	789b      	ldrb	r3, [r3, #2]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	430b      	orrs	r3, r1
 8006986:	492a      	ldr	r1, [pc, #168]	@ (8006a30 <MX_LWIP_Init+0x290>)
 8006988:	78c9      	ldrb	r1, [r1, #3]
 800698a:	430b      	orrs	r3, r1
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	4313      	orrs	r3, r2
 8006990:	4a2a      	ldr	r2, [pc, #168]	@ (8006a3c <MX_LWIP_Init+0x29c>)
 8006992:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006994:	4b2a      	ldr	r3, [pc, #168]	@ (8006a40 <MX_LWIP_Init+0x2a0>)
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	4b2a      	ldr	r3, [pc, #168]	@ (8006a44 <MX_LWIP_Init+0x2a4>)
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	2300      	movs	r3, #0
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4b26      	ldr	r3, [pc, #152]	@ (8006a3c <MX_LWIP_Init+0x29c>)
 80069a2:	4a25      	ldr	r2, [pc, #148]	@ (8006a38 <MX_LWIP_Init+0x298>)
 80069a4:	4923      	ldr	r1, [pc, #140]	@ (8006a34 <MX_LWIP_Init+0x294>)
 80069a6:	4828      	ldr	r0, [pc, #160]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069a8:	f008 fa18 	bl	800eddc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80069ac:	4826      	ldr	r0, [pc, #152]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069ae:	f008 fbc7 	bl	800f140 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80069b2:	4b25      	ldr	r3, [pc, #148]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80069b8:	089b      	lsrs	r3, r3, #2
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80069c4:	4820      	ldr	r0, [pc, #128]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069c6:	f008 fbcb 	bl	800f160 <netif_set_up>
 80069ca:	e002      	b.n	80069d2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80069cc:	481e      	ldr	r0, [pc, #120]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069ce:	f008 fc33 	bl	800f238 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80069d2:	491e      	ldr	r1, [pc, #120]	@ (8006a4c <MX_LWIP_Init+0x2ac>)
 80069d4:	481c      	ldr	r0, [pc, #112]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069d6:	f008 fcc5 	bl	800f364 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80069da:	2200      	movs	r2, #0
 80069dc:	2101      	movs	r1, #1
 80069de:	2001      	movs	r0, #1
 80069e0:	f000 ff12 	bl	8007808 <osSemaphoreNew>
 80069e4:	4603      	mov	r3, r0
 80069e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a50 <MX_LWIP_Init+0x2b0>)
 80069e8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80069ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006a54 <MX_LWIP_Init+0x2b4>)
 80069ec:	4a16      	ldr	r2, [pc, #88]	@ (8006a48 <MX_LWIP_Init+0x2a8>)
 80069ee:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80069f0:	4b17      	ldr	r3, [pc, #92]	@ (8006a50 <MX_LWIP_Init+0x2b0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <MX_LWIP_Init+0x2b4>)
 80069f6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80069f8:	2224      	movs	r2, #36	@ 0x24
 80069fa:	2100      	movs	r1, #0
 80069fc:	4816      	ldr	r0, [pc, #88]	@ (8006a58 <MX_LWIP_Init+0x2b8>)
 80069fe:	f013 fb6f 	bl	801a0e0 <memset>
  attributes.name = "LinkThr";
 8006a02:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <MX_LWIP_Init+0x2b8>)
 8006a04:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <MX_LWIP_Init+0x2bc>)
 8006a06:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006a08:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <MX_LWIP_Init+0x2b8>)
 8006a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a0e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006a10:	4b11      	ldr	r3, [pc, #68]	@ (8006a58 <MX_LWIP_Init+0x2b8>)
 8006a12:	2210      	movs	r2, #16
 8006a14:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8006a16:	4a10      	ldr	r2, [pc, #64]	@ (8006a58 <MX_LWIP_Init+0x2b8>)
 8006a18:	490e      	ldr	r1, [pc, #56]	@ (8006a54 <MX_LWIP_Init+0x2b4>)
 8006a1a:	4811      	ldr	r0, [pc, #68]	@ (8006a60 <MX_LWIP_Init+0x2c0>)
 8006a1c:	f000 fcd8 	bl	80073d0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000df4 	.word	0x20000df4
 8006a2c:	20000df8 	.word	0x20000df8
 8006a30:	20000dfc 	.word	0x20000dfc
 8006a34:	20000de8 	.word	0x20000de8
 8006a38:	20000dec 	.word	0x20000dec
 8006a3c:	20000df0 	.word	0x20000df0
 8006a40:	0800e1e5 	.word	0x0800e1e5
 8006a44:	080070ad 	.word	0x080070ad
 8006a48:	20000db4 	.word	0x20000db4
 8006a4c:	08007191 	.word	0x08007191
 8006a50:	20000da8 	.word	0x20000da8
 8006a54:	20000dac 	.word	0x20000dac
 8006a58:	20000e00 	.word	0x20000e00
 8006a5c:	0801c50c 	.word	0x0801c50c
 8006a60:	08007119 	.word	0x08007119

08006a64 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	@ 0x38
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a52      	ldr	r2, [pc, #328]	@ (8006bcc <HAL_ETH_MspInit+0x168>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f040 809e 	bne.w	8006bc4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a88:	4b51      	ldr	r3, [pc, #324]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	4a50      	ldr	r2, [pc, #320]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006a8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a94:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aac:	4b48      	ldr	r3, [pc, #288]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4b45      	ldr	r3, [pc, #276]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abc:	4a44      	ldr	r2, [pc, #272]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006abe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ac4:	4b42      	ldr	r3, [pc, #264]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006ad6:	f043 0304 	orr.w	r3, r3, #4
 8006ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8006adc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae8:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	4a38      	ldr	r2, [pc, #224]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006af4:	4b36      	ldr	r3, [pc, #216]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b00:	4b33      	ldr	r3, [pc, #204]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b04:	4a32      	ldr	r2, [pc, #200]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b0c:	4b30      	ldr	r3, [pc, #192]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b18:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b24:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd0 <HAL_ETH_MspInit+0x16c>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006b30:	2332      	movs	r3, #50	@ 0x32
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b34:	2302      	movs	r3, #2
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b40:	230b      	movs	r3, #11
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4822      	ldr	r0, [pc, #136]	@ (8006bd4 <HAL_ETH_MspInit+0x170>)
 8006b4c:	f7fc faae 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006b50:	2386      	movs	r3, #134	@ 0x86
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b54:	2302      	movs	r3, #2
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b60:	230b      	movs	r3, #11
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b68:	4619      	mov	r1, r3
 8006b6a:	481b      	ldr	r0, [pc, #108]	@ (8006bd8 <HAL_ETH_MspInit+0x174>)
 8006b6c:	f7fc fa9e 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b76:	2302      	movs	r3, #2
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b82:	230b      	movs	r3, #11
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4813      	ldr	r0, [pc, #76]	@ (8006bdc <HAL_ETH_MspInit+0x178>)
 8006b8e:	f7fc fa8d 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006b92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ba4:	230b      	movs	r3, #11
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bac:	4619      	mov	r1, r3
 8006bae:	480c      	ldr	r0, [pc, #48]	@ (8006be0 <HAL_ETH_MspInit+0x17c>)
 8006bb0:	f7fc fa7c 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2105      	movs	r1, #5
 8006bb8:	203d      	movs	r0, #61	@ 0x3d
 8006bba:	f7fb f8e1 	bl	8001d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006bbe:	203d      	movs	r0, #61	@ 0x3d
 8006bc0:	f7fb f8fa 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3738      	adds	r7, #56	@ 0x38
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40028000 	.word	0x40028000
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	40020800 	.word	0x40020800
 8006bd8:	40020000 	.word	0x40020000
 8006bdc:	40020400 	.word	0x40020400
 8006be0:	40021800 	.word	0x40021800

08006be4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <HAL_ETH_RxCpltCallback+0x1c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 ff0b 	bl	8007a0c <osSemaphoreRelease>
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20003ec4 	.word	0x20003ec4

08006c04 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b090      	sub	sp, #64	@ 0x40
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006c10:	4b5d      	ldr	r3, [pc, #372]	@ (8006d88 <low_level_init+0x184>)
 8006c12:	4a5e      	ldr	r2, [pc, #376]	@ (8006d8c <low_level_init+0x188>)
 8006c14:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006c16:	4b5c      	ldr	r3, [pc, #368]	@ (8006d88 <low_level_init+0x184>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8006d88 <low_level_init+0x184>)
 8006c1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006c22:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006c24:	4b58      	ldr	r3, [pc, #352]	@ (8006d88 <low_level_init+0x184>)
 8006c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c2a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006c2c:	4b56      	ldr	r3, [pc, #344]	@ (8006d88 <low_level_init+0x184>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006c32:	2300      	movs	r3, #0
 8006c34:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 8006c36:	2322      	movs	r3, #34	@ 0x22
 8006c38:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 8006c3a:	23c0      	movs	r3, #192	@ 0xc0
 8006c3c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 8006c3e:	23a8      	movs	r3, #168	@ 0xa8
 8006c40:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006c42:	2300      	movs	r3, #0
 8006c44:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 8006c46:	231c      	movs	r3, #28
 8006c48:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8006c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8006d88 <low_level_init+0x184>)
 8006c4c:	f107 030c 	add.w	r3, r7, #12
 8006c50:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006c52:	4b4d      	ldr	r3, [pc, #308]	@ (8006d88 <low_level_init+0x184>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006c58:	4b4b      	ldr	r3, [pc, #300]	@ (8006d88 <low_level_init+0x184>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d88 <low_level_init+0x184>)
 8006c60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c64:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006c66:	4848      	ldr	r0, [pc, #288]	@ (8006d88 <low_level_init+0x184>)
 8006c68:	f7fb f8b4 	bl	8001dd4 <HAL_ETH_Init>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006c72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d108      	bne.n	8006c8c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c80:	f043 0304 	orr.w	r3, r3, #4
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	4a40      	ldr	r2, [pc, #256]	@ (8006d90 <low_level_init+0x18c>)
 8006c90:	4940      	ldr	r1, [pc, #256]	@ (8006d94 <low_level_init+0x190>)
 8006c92:	483d      	ldr	r0, [pc, #244]	@ (8006d88 <low_level_init+0x184>)
 8006c94:	f7fb fa36 	bl	8002104 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006c98:	2304      	movs	r3, #4
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006d98 <low_level_init+0x194>)
 8006c9c:	493f      	ldr	r1, [pc, #252]	@ (8006d9c <low_level_init+0x198>)
 8006c9e:	483a      	ldr	r0, [pc, #232]	@ (8006d88 <low_level_init+0x184>)
 8006ca0:	f7fb fa98 	bl	80021d4 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2206      	movs	r2, #6
 8006ca8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006cac:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <low_level_init+0x184>)
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	781a      	ldrb	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006cb8:	4b33      	ldr	r3, [pc, #204]	@ (8006d88 <low_level_init+0x184>)
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	785a      	ldrb	r2, [r3, #1]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006cc4:	4b30      	ldr	r3, [pc, #192]	@ (8006d88 <low_level_init+0x184>)
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	789a      	ldrb	r2, [r3, #2]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d88 <low_level_init+0x184>)
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	78da      	ldrb	r2, [r3, #3]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8006d88 <low_level_init+0x184>)
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	791a      	ldrb	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ce8:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <low_level_init+0x184>)
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	795a      	ldrb	r2, [r3, #5]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006cfa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d02:	f043 030a 	orr.w	r3, r3, #10
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2101      	movs	r1, #1
 8006d12:	2001      	movs	r0, #1
 8006d14:	f000 fd78 	bl	8007808 <osSemaphoreNew>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a21      	ldr	r2, [pc, #132]	@ (8006da0 <low_level_init+0x19c>)
 8006d1c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006d1e:	f107 0314 	add.w	r3, r7, #20
 8006d22:	2224      	movs	r2, #36	@ 0x24
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f013 f9da 	bl	801a0e0 <memset>
  attributes.name = "EthIf";
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <low_level_init+0x1a0>)
 8006d2e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006d30:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8006d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 8006d36:	2330      	movs	r3, #48	@ 0x30
 8006d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006d3a:	f107 0314 	add.w	r3, r7, #20
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4819      	ldr	r0, [pc, #100]	@ (8006da8 <low_level_init+0x1a4>)
 8006d44:	f000 fb44 	bl	80073d0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006d48:	480f      	ldr	r0, [pc, #60]	@ (8006d88 <low_level_init+0x184>)
 8006d4a:	f7fb fd67 	bl	800281c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006d4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d52:	461a      	mov	r2, r3
 8006d54:	211d      	movs	r1, #29
 8006d56:	480c      	ldr	r0, [pc, #48]	@ (8006d88 <low_level_init+0x184>)
 8006d58:	f7fb fc92 	bl	8002680 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	f043 030b 	orr.w	r3, r3, #11
 8006d62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	461a      	mov	r2, r3
 8006d68:	211d      	movs	r1, #29
 8006d6a:	4807      	ldr	r0, [pc, #28]	@ (8006d88 <low_level_init+0x184>)
 8006d6c:	f7fb fcf0 	bl	8002750 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006d70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d74:	461a      	mov	r2, r3
 8006d76:	211d      	movs	r1, #29
 8006d78:	4803      	ldr	r0, [pc, #12]	@ (8006d88 <low_level_init+0x184>)
 8006d7a:	f7fb fc81 	bl	8002680 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006d7e:	bf00      	nop
 8006d80:	3740      	adds	r7, #64	@ 0x40
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20003ec8 	.word	0x20003ec8
 8006d8c:	40028000 	.word	0x40028000
 8006d90:	200026f4 	.word	0x200026f4
 8006d94:	20000ea4 	.word	0x20000ea4
 8006d98:	20000f24 	.word	0x20000f24
 8006d9c:	20000e24 	.word	0x20000e24
 8006da0:	20003ec4 	.word	0x20003ec4
 8006da4:	0801c514 	.word	0x0801c514
 8006da8:	0800704d 	.word	0x0800704d

08006dac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	@ 0x28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006db6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee4 <low_level_output+0x138>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006dce:	4b45      	ldr	r3, [pc, #276]	@ (8006ee4 <low_level_output+0x138>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	e05a      	b.n	8006e94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da03      	bge.n	8006dee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006de6:	23f8      	movs	r3, #248	@ 0xf8
 8006de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8006dec:	e05c      	b.n	8006ea8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	895b      	ldrh	r3, [r3, #10]
 8006df2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006df8:	e02f      	b.n	8006e5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	18d0      	adds	r0, r2, r3
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	18d1      	adds	r1, r2, r3
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	f013 fa1e 	bl	801a252 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da03      	bge.n	8006e2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006e24:	23f8      	movs	r3, #248	@ 0xf8
 8006e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8006e2a:	e03d      	b.n	8006ea8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006e3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006e48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006e54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d8c8      	bhi.n	8006dfa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	18d0      	adds	r0, r2, r3
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f013 f9ea 	bl	801a252 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	623b      	str	r3, [r7, #32]
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1a1      	bne.n	8006dde <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	4811      	ldr	r0, [pc, #68]	@ (8006ee4 <low_level_output+0x138>)
 8006e9e:	f7fb fa05 	bl	80022ac <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <low_level_output+0x138>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006eba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee4 <low_level_output+0x138>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006ec8:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <low_level_output+0x138>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3728      	adds	r7, #40	@ 0x28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20003ec8 	.word	0x20003ec8

08006ee8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	@ 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006f0c:	484e      	ldr	r0, [pc, #312]	@ (8007048 <low_level_input+0x160>)
 8006f0e:	f7fb fab7 	bl	8002480 <HAL_ETH_GetReceivedFrame_IT>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <low_level_input+0x34>

    return NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e091      	b.n	8007040 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8007048 <low_level_input+0x160>)
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006f22:	4b49      	ldr	r3, [pc, #292]	@ (8007048 <low_level_input+0x160>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8006f28:	89fb      	ldrh	r3, [r7, #14]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
 8006f30:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8006f34:	4619      	mov	r1, r3
 8006f36:	2000      	movs	r0, #0
 8006f38:	f008 fade 	bl	800f4f8 <pbuf_alloc>
 8006f3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d04b      	beq.n	8006fdc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006f44:	4b40      	ldr	r3, [pc, #256]	@ (8007048 <low_level_input+0x160>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f48:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f52:	e040      	b.n	8006fd6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	895b      	ldrh	r3, [r3, #10]
 8006f58:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006f5e:	e021      	b.n	8006fa4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	18d0      	adds	r0, r2, r3
 8006f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	18d1      	adds	r1, r2, r3
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	461a      	mov	r2, r3
 8006f78:	f013 f96b 	bl	801a252 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006f92:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006f9e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d8d6      	bhi.n	8006f60 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	18d0      	adds	r0, r2, r3
 8006fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f013 f945 	bl	801a252 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1bb      	bne.n	8006f54 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007048 <low_level_input+0x160>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e00b      	b.n	8007000 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <low_level_input+0x160>)
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	429a      	cmp	r2, r3
 8007008:	d3ee      	bcc.n	8006fe8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800700a:	4b0f      	ldr	r3, [pc, #60]	@ (8007048 <low_level_input+0x160>)
 800700c:	2200      	movs	r2, #0
 800700e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007010:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <low_level_input+0x160>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007022:	4b09      	ldr	r3, [pc, #36]	@ (8007048 <low_level_input+0x160>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800702a:	461a      	mov	r2, r3
 800702c:	2380      	movs	r3, #128	@ 0x80
 800702e:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <low_level_input+0x160>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007038:	461a      	mov	r2, r3
 800703a:	2300      	movs	r3, #0
 800703c:	6093      	str	r3, [r2, #8]
  }
  return p;
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	@ 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20003ec8 	.word	0x20003ec8

0800704c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007058:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <ethernetif_input+0x58>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f04f 31ff 	mov.w	r1, #4294967295
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fc6d 	bl	8007940 <osSemaphoreAcquire>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f5      	bne.n	8007058 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800706c:	480e      	ldr	r0, [pc, #56]	@ (80070a8 <ethernetif_input+0x5c>)
 800706e:	f012 f8df 	bl	8019230 <sys_mutex_lock>
        p = low_level_input( netif );
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff ff38 	bl	8006ee8 <low_level_input>
 8007078:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	68f9      	ldr	r1, [r7, #12]
 8007086:	68b8      	ldr	r0, [r7, #8]
 8007088:	4798      	blx	r3
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007090:	68b8      	ldr	r0, [r7, #8]
 8007092:	f008 fd15 	bl	800fac0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007096:	4804      	ldr	r0, [pc, #16]	@ (80070a8 <ethernetif_input+0x5c>)
 8007098:	f012 f8d9 	bl	801924e <sys_mutex_unlock>
      } while(p!=NULL);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e4      	bne.n	800706c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80070a2:	e7d9      	b.n	8007058 <ethernetif_input+0xc>
 80070a4:	20003ec4 	.word	0x20003ec4
 80070a8:	2000c464 	.word	0x2000c464

080070ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <ethernetif_init+0x1c>
 80070ba:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <ethernetif_init+0x48>)
 80070bc:	f240 223b 	movw	r2, #571	@ 0x23b
 80070c0:	490d      	ldr	r1, [pc, #52]	@ (80070f8 <ethernetif_init+0x4c>)
 80070c2:	480e      	ldr	r0, [pc, #56]	@ (80070fc <ethernetif_init+0x50>)
 80070c4:	f012 fe46 	bl	8019d54 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2273      	movs	r2, #115	@ 0x73
 80070cc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2274      	movs	r2, #116	@ 0x74
 80070d4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a09      	ldr	r2, [pc, #36]	@ (8007100 <ethernetif_init+0x54>)
 80070dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a08      	ldr	r2, [pc, #32]	@ (8007104 <ethernetif_init+0x58>)
 80070e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fd8d 	bl	8006c04 <low_level_init>

  return ERR_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	0801c51c 	.word	0x0801c51c
 80070f8:	0801c538 	.word	0x0801c538
 80070fc:	0801c548 	.word	0x0801c548
 8007100:	08017285 	.word	0x08017285
 8007104:	08006dad 	.word	0x08006dad

08007108 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800710c:	f7fa fd50 	bl	8001bb0 <HAL_GetTick>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	461a      	mov	r2, r3
 800712e:	2101      	movs	r1, #1
 8007130:	4816      	ldr	r0, [pc, #88]	@ (800718c <ethernetif_set_link+0x74>)
 8007132:	f7fb faa5 	bl	8002680 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d108      	bne.n	8007160 <ethernetif_set_link+0x48>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f008 f89f 	bl	800f29c <netif_set_link_up>
 800715e:	e011      	b.n	8007184 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007168:	089b      	lsrs	r3, r3, #2
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <ethernetif_set_link+0x6c>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f008 f8c0 	bl	800f304 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007184:	20c8      	movs	r0, #200	@ 0xc8
 8007186:	f000 f9c9 	bl	800751c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800718a:	e7cd      	b.n	8007128 <ethernetif_set_link+0x10>
 800718c:	20003ec8 	.word	0x20003ec8

08007190 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071a6:	089b      	lsrs	r3, r3, #2
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d05d      	beq.n	800726e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80071b2:	4b34      	ldr	r3, [pc, #208]	@ (8007284 <ethernetif_update_config+0xf4>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03f      	beq.n	800723a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80071ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071be:	2100      	movs	r1, #0
 80071c0:	4830      	ldr	r0, [pc, #192]	@ (8007284 <ethernetif_update_config+0xf4>)
 80071c2:	f7fb fac5 	bl	8002750 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80071c6:	f7fa fcf3 	bl	8001bb0 <HAL_GetTick>
 80071ca:	4603      	mov	r3, r0
 80071cc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	461a      	mov	r2, r3
 80071d4:	2101      	movs	r1, #1
 80071d6:	482b      	ldr	r0, [pc, #172]	@ (8007284 <ethernetif_update_config+0xf4>)
 80071d8:	f7fb fa52 	bl	8002680 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80071dc:	f7fa fce8 	bl	8001bb0 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071ea:	d828      	bhi.n	800723e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0eb      	beq.n	80071ce <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80071f6:	f107 0308 	add.w	r3, r7, #8
 80071fa:	461a      	mov	r2, r3
 80071fc:	2110      	movs	r1, #16
 80071fe:	4821      	ldr	r0, [pc, #132]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007200:	f7fb fa3e 	bl	8002680 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800720e:	4b1d      	ldr	r3, [pc, #116]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e002      	b.n	800721e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007218:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <ethernetif_update_config+0xf4>)
 800721a:	2200      	movs	r2, #0
 800721c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007228:	4b16      	ldr	r3, [pc, #88]	@ (8007284 <ethernetif_update_config+0xf4>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
 800722e:	e016      	b.n	800725e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007230:	4b14      	ldr	r3, [pc, #80]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	e011      	b.n	800725e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <ethernetif_update_config+0xb0>
          goto error;
 800723e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007240:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	08db      	lsrs	r3, r3, #3
 8007246:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007248:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <ethernetif_update_config+0xf4>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007250:	4313      	orrs	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	2100      	movs	r1, #0
 8007258:	480a      	ldr	r0, [pc, #40]	@ (8007284 <ethernetif_update_config+0xf4>)
 800725a:	f7fb fa79 	bl	8002750 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800725e:	2100      	movs	r1, #0
 8007260:	4808      	ldr	r0, [pc, #32]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007262:	f7fb fb39 	bl	80028d8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007266:	4807      	ldr	r0, [pc, #28]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007268:	f7fb fad8 	bl	800281c <HAL_ETH_Start>
 800726c:	e002      	b.n	8007274 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800726e:	4805      	ldr	r0, [pc, #20]	@ (8007284 <ethernetif_update_config+0xf4>)
 8007270:	f7fb fb03 	bl	800287a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f807 	bl	8007288 <ethernetif_notify_conn_changed>
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20003ec8 	.word	0x20003ec8

08007288 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b2:	f3ef 8305 	mrs	r3, IPSR
 80072b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10f      	bne.n	80072de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072be:	f3ef 8310 	mrs	r3, PRIMASK
 80072c2:	607b      	str	r3, [r7, #4]
  return(result);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072ca:	f3ef 8311 	mrs	r3, BASEPRI
 80072ce:	603b      	str	r3, [r7, #0]
  return(result);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <osKernelInitialize+0x3a>
 80072d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007310 <osKernelInitialize+0x64>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d103      	bne.n	80072e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072de:	f06f 0305 	mvn.w	r3, #5
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e00c      	b.n	8007300 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <osKernelInitialize+0x64>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072ee:	4b08      	ldr	r3, [pc, #32]	@ (8007310 <osKernelInitialize+0x64>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e002      	b.n	8007300 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295
 80072fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007300:	68fb      	ldr	r3, [r7, #12]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20003f10 	.word	0x20003f10

08007314 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800731a:	f3ef 8305 	mrs	r3, IPSR
 800731e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007320:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10f      	bne.n	8007346 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007326:	f3ef 8310 	mrs	r3, PRIMASK
 800732a:	607b      	str	r3, [r7, #4]
  return(result);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007332:	f3ef 8311 	mrs	r3, BASEPRI
 8007336:	603b      	str	r3, [r7, #0]
  return(result);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <osKernelStart+0x3a>
 800733e:	4b0f      	ldr	r3, [pc, #60]	@ (800737c <osKernelStart+0x68>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007346:	f06f 0305 	mvn.w	r3, #5
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e010      	b.n	8007370 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800734e:	4b0b      	ldr	r3, [pc, #44]	@ (800737c <osKernelStart+0x68>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d109      	bne.n	800736a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007356:	f7ff ffa1 	bl	800729c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800735a:	4b08      	ldr	r3, [pc, #32]	@ (800737c <osKernelStart+0x68>)
 800735c:	2202      	movs	r2, #2
 800735e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007360:	f002 fb4a 	bl	80099f8 <vTaskStartScheduler>
      stat = osOK;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e002      	b.n	8007370 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800736a:	f04f 33ff 	mov.w	r3, #4294967295
 800736e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20003f10 	.word	0x20003f10

08007380 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	60bb      	str	r3, [r7, #8]
  return(result);
 800738c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007392:	f3ef 8310 	mrs	r3, PRIMASK
 8007396:	607b      	str	r3, [r7, #4]
  return(result);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800739e:	f3ef 8311 	mrs	r3, BASEPRI
 80073a2:	603b      	str	r3, [r7, #0]
  return(result);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <osKernelGetTickCount+0x3a>
 80073aa:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <osKernelGetTickCount+0x4c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80073b2:	f002 fc4b 	bl	8009c4c <xTaskGetTickCountFromISR>
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	e002      	b.n	80073c0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80073ba:	f002 fc37 	bl	8009c2c <xTaskGetTickCount>
 80073be:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20003f10 	.word	0x20003f10

080073d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b090      	sub	sp, #64	@ 0x40
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e0:	f3ef 8305 	mrs	r3, IPSR
 80073e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80073e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 808f 	bne.w	800750c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ee:	f3ef 8310 	mrs	r3, PRIMASK
 80073f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073fa:	f3ef 8311 	mrs	r3, BASEPRI
 80073fe:	617b      	str	r3, [r7, #20]
  return(result);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <osThreadNew+0x3e>
 8007406:	4b44      	ldr	r3, [pc, #272]	@ (8007518 <osThreadNew+0x148>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d07e      	beq.n	800750c <osThreadNew+0x13c>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d07b      	beq.n	800750c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007418:	2318      	movs	r3, #24
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007420:	f04f 33ff 	mov.w	r3, #4294967295
 8007424:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d045      	beq.n	80074b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <osThreadNew+0x6a>
        name = attr->name;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	d008      	beq.n	8007460 <osThreadNew+0x90>
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	2b38      	cmp	r3, #56	@ 0x38
 8007452:	d805      	bhi.n	8007460 <osThreadNew+0x90>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <osThreadNew+0x94>
        return (NULL);
 8007460:	2300      	movs	r3, #0
 8007462:	e054      	b.n	800750e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	089b      	lsrs	r3, r3, #2
 8007472:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <osThreadNew+0xca>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b5b      	cmp	r3, #91	@ 0x5b
 8007482:	d90a      	bls.n	800749a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <osThreadNew+0xca>
        mem = 1;
 8007494:	2301      	movs	r3, #1
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	e010      	b.n	80074bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10c      	bne.n	80074bc <osThreadNew+0xec>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d108      	bne.n	80074bc <osThreadNew+0xec>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <osThreadNew+0xec>
          mem = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	623b      	str	r3, [r7, #32]
 80074b6:	e001      	b.n	80074bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d110      	bne.n	80074e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ca:	9202      	str	r2, [sp, #8]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f002 f83d 	bl	8009558 <xTaskCreateStatic>
 80074de:	4603      	mov	r3, r0
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	e013      	b.n	800750c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d110      	bne.n	800750c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f107 0310 	add.w	r3, r7, #16
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f002 f891 	bl	8009624 <xTaskCreate>
 8007502:	4603      	mov	r3, r0
 8007504:	2b01      	cmp	r3, #1
 8007506:	d001      	beq.n	800750c <osThreadNew+0x13c>
          hTask = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800750c:	693b      	ldr	r3, [r7, #16]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3730      	adds	r7, #48	@ 0x30
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20003f10 	.word	0x20003f10

0800751c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007524:	f3ef 8305 	mrs	r3, IPSR
 8007528:	613b      	str	r3, [r7, #16]
  return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10f      	bne.n	8007550 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007530:	f3ef 8310 	mrs	r3, PRIMASK
 8007534:	60fb      	str	r3, [r7, #12]
  return(result);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800753c:	f3ef 8311 	mrs	r3, BASEPRI
 8007540:	60bb      	str	r3, [r7, #8]
  return(result);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <osDelay+0x3c>
 8007548:	4b0a      	ldr	r3, [pc, #40]	@ (8007574 <osDelay+0x58>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d103      	bne.n	8007558 <osDelay+0x3c>
    stat = osErrorISR;
 8007550:	f06f 0305 	mvn.w	r3, #5
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e007      	b.n	8007568 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f002 f9a6 	bl	80098b4 <vTaskDelay>
    }
  }

  return (stat);
 8007568:	697b      	ldr	r3, [r7, #20]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20003f10 	.word	0x20003f10

08007578 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	@ 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007584:	f3ef 8305 	mrs	r3, IPSR
 8007588:	613b      	str	r3, [r7, #16]
  return(result);
 800758a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 8085 	bne.w	800769c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007592:	f3ef 8310 	mrs	r3, PRIMASK
 8007596:	60fb      	str	r3, [r7, #12]
  return(result);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d105      	bne.n	80075aa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800759e:	f3ef 8311 	mrs	r3, BASEPRI
 80075a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <osMutexNew+0x3a>
 80075aa:	4b3f      	ldr	r3, [pc, #252]	@ (80076a8 <osMutexNew+0x130>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d074      	beq.n	800769c <osMutexNew+0x124>
    if (attr != NULL) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	e001      	b.n	80075c4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <osMutexNew+0x5c>
      rmtx = 1U;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	e001      	b.n	80075d8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d15c      	bne.n	800769c <osMutexNew+0x124>
      mem = -1;
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295
 80075e6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d015      	beq.n	800761a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d006      	beq.n	8007604 <osMutexNew+0x8c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80075fc:	d902      	bls.n	8007604 <osMutexNew+0x8c>
          mem = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	e00c      	b.n	800761e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <osMutexNew+0xa6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <osMutexNew+0xa6>
            mem = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e001      	b.n	800761e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d112      	bne.n	800764a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	4619      	mov	r1, r3
 8007630:	2004      	movs	r0, #4
 8007632:	f000 fec0 	bl	80083b6 <xQueueCreateMutexStatic>
 8007636:	6278      	str	r0, [r7, #36]	@ 0x24
 8007638:	e016      	b.n	8007668 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	4619      	mov	r1, r3
 8007640:	2001      	movs	r0, #1
 8007642:	f000 feb8 	bl	80083b6 <xQueueCreateMutexStatic>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24
 8007648:	e00e      	b.n	8007668 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007656:	2004      	movs	r0, #4
 8007658:	f000 fe95 	bl	8008386 <xQueueCreateMutex>
 800765c:	6278      	str	r0, [r7, #36]	@ 0x24
 800765e:	e003      	b.n	8007668 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007660:	2001      	movs	r0, #1
 8007662:	f000 fe90 	bl	8008386 <xQueueCreateMutex>
 8007666:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <osMutexNew+0x110>
        if (attr != NULL) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <osMutexNew+0x104>
          name = attr->name;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e001      	b.n	8007680 <osMutexNew+0x108>
        } else {
          name = NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007680:	6979      	ldr	r1, [r7, #20]
 8007682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007684:	f001 fee0 	bl	8009448 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <osMutexNew+0x124>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3728      	adds	r7, #40	@ 0x28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20003f10 	.word	0x20003f10

080076ac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ca:	f3ef 8305 	mrs	r3, IPSR
 80076ce:	613b      	str	r3, [r7, #16]
  return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10f      	bne.n	80076f6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d6:	f3ef 8310 	mrs	r3, PRIMASK
 80076da:	60fb      	str	r3, [r7, #12]
  return(result);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076e2:	f3ef 8311 	mrs	r3, BASEPRI
 80076e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <osMutexAcquire+0x52>
 80076ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <osMutexAcquire+0xb8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d103      	bne.n	80076fe <osMutexAcquire+0x52>
    stat = osErrorISR;
 80076f6:	f06f 0305 	mvn.w	r3, #5
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e02c      	b.n	8007758 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007704:	f06f 0303 	mvn.w	r3, #3
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	e025      	b.n	8007758 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d011      	beq.n	8007736 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	69b8      	ldr	r0, [r7, #24]
 8007716:	f000 fea0 	bl	800845a <xQueueTakeMutexRecursive>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d01b      	beq.n	8007758 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007726:	f06f 0301 	mvn.w	r3, #1
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e014      	b.n	8007758 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800772e:	f06f 0302 	mvn.w	r3, #2
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e010      	b.n	8007758 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	69b8      	ldr	r0, [r7, #24]
 800773a:	f001 fa6b 	bl	8008c14 <xQueueSemaphoreTake>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d009      	beq.n	8007758 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800774a:	f06f 0301 	mvn.w	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e002      	b.n	8007758 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007752:	f06f 0302 	mvn.w	r3, #2
 8007756:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007758:	69fb      	ldr	r3, [r7, #28]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20003f10 	.word	0x20003f10

08007768 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007784:	f3ef 8305 	mrs	r3, IPSR
 8007788:	613b      	str	r3, [r7, #16]
  return(result);
 800778a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10f      	bne.n	80077b0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007790:	f3ef 8310 	mrs	r3, PRIMASK
 8007794:	60fb      	str	r3, [r7, #12]
  return(result);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800779c:	f3ef 8311 	mrs	r3, BASEPRI
 80077a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <osMutexRelease+0x50>
 80077a8:	4b16      	ldr	r3, [pc, #88]	@ (8007804 <osMutexRelease+0x9c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d103      	bne.n	80077b8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80077b0:	f06f 0305 	mvn.w	r3, #5
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	e01f      	b.n	80077f8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80077be:	f06f 0303 	mvn.w	r3, #3
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e018      	b.n	80077f8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d009      	beq.n	80077e0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80077cc:	69b8      	ldr	r0, [r7, #24]
 80077ce:	f000 fe0d 	bl	80083ec <xQueueGiveMutexRecursive>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d00f      	beq.n	80077f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80077d8:	f06f 0302 	mvn.w	r3, #2
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	e00b      	b.n	80077f8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	69b8      	ldr	r0, [r7, #24]
 80077e8:	f000 fee6 	bl	80085b8 <xQueueGenericSend>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d002      	beq.n	80077f8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80077f2:	f06f 0302 	mvn.w	r3, #2
 80077f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80077f8:	69fb      	ldr	r3, [r7, #28]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20003f10 	.word	0x20003f10

08007808 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b08c      	sub	sp, #48	@ 0x30
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007818:	f3ef 8305 	mrs	r3, IPSR
 800781c:	61bb      	str	r3, [r7, #24]
  return(result);
 800781e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 8086 	bne.w	8007932 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007826:	f3ef 8310 	mrs	r3, PRIMASK
 800782a:	617b      	str	r3, [r7, #20]
  return(result);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007832:	f3ef 8311 	mrs	r3, BASEPRI
 8007836:	613b      	str	r3, [r7, #16]
  return(result);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <osSemaphoreNew+0x3e>
 800783e:	4b3f      	ldr	r3, [pc, #252]	@ (800793c <osSemaphoreNew+0x134>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d075      	beq.n	8007932 <osSemaphoreNew+0x12a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d072      	beq.n	8007932 <osSemaphoreNew+0x12a>
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d86e      	bhi.n	8007932 <osSemaphoreNew+0x12a>
    mem = -1;
 8007854:	f04f 33ff 	mov.w	r3, #4294967295
 8007858:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d015      	beq.n	800788c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <osSemaphoreNew+0x6e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b4f      	cmp	r3, #79	@ 0x4f
 800786e:	d902      	bls.n	8007876 <osSemaphoreNew+0x6e>
        mem = 1;
 8007870:	2301      	movs	r3, #1
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	e00c      	b.n	8007890 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d108      	bne.n	8007890 <osSemaphoreNew+0x88>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <osSemaphoreNew+0x88>
          mem = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	623b      	str	r3, [r7, #32]
 800788a:	e001      	b.n	8007890 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d04c      	beq.n	8007932 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d128      	bne.n	80078f0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10a      	bne.n	80078ba <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2203      	movs	r2, #3
 80078aa:	9200      	str	r2, [sp, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	2001      	movs	r0, #1
 80078b2:	f000 fc61 	bl	8008178 <xQueueGenericCreateStatic>
 80078b6:	6278      	str	r0, [r7, #36]	@ 0x24
 80078b8:	e005      	b.n	80078c6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80078ba:	2203      	movs	r2, #3
 80078bc:	2100      	movs	r1, #0
 80078be:	2001      	movs	r0, #1
 80078c0:	f000 fce1 	bl	8008286 <xQueueGenericCreate>
 80078c4:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d022      	beq.n	8007912 <osSemaphoreNew+0x10a>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01f      	beq.n	8007912 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078d2:	2300      	movs	r3, #0
 80078d4:	2200      	movs	r2, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078da:	f000 fe6d 	bl	80085b8 <xQueueGenericSend>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d016      	beq.n	8007912 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80078e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e6:	f001 fc61 	bl	80091ac <vQueueDelete>
            hSemaphore = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ee:	e010      	b.n	8007912 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d108      	bne.n	8007908 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	461a      	mov	r2, r3
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fde4 	bl	80084cc <xQueueCreateCountingSemaphoreStatic>
 8007904:	6278      	str	r0, [r7, #36]	@ 0x24
 8007906:	e004      	b.n	8007912 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fe1b 	bl	8008546 <xQueueCreateCountingSemaphore>
 8007910:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00c      	beq.n	8007932 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <osSemaphoreNew+0x11e>
          name = attr->name;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e001      	b.n	800792a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800792a:	69f9      	ldr	r1, [r7, #28]
 800792c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800792e:	f001 fd8b 	bl	8009448 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007934:	4618      	mov	r0, r3
 8007936:	3728      	adds	r7, #40	@ 0x28
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20003f10 	.word	0x20003f10

08007940 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007958:	f06f 0303 	mvn.w	r3, #3
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	e04b      	b.n	80079f8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007960:	f3ef 8305 	mrs	r3, IPSR
 8007964:	617b      	str	r3, [r7, #20]
  return(result);
 8007966:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10f      	bne.n	800798c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796c:	f3ef 8310 	mrs	r3, PRIMASK
 8007970:	613b      	str	r3, [r7, #16]
  return(result);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007978:	f3ef 8311 	mrs	r3, BASEPRI
 800797c:	60fb      	str	r3, [r7, #12]
  return(result);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d026      	beq.n	80079d2 <osSemaphoreAcquire+0x92>
 8007984:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <osSemaphoreAcquire+0xc4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d122      	bne.n	80079d2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007992:	f06f 0303 	mvn.w	r3, #3
 8007996:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007998:	e02d      	b.n	80079f6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	461a      	mov	r2, r3
 80079a4:	2100      	movs	r1, #0
 80079a6:	69b8      	ldr	r0, [r7, #24]
 80079a8:	f001 fb36 	bl	8009018 <xQueueReceiveFromISR>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d003      	beq.n	80079ba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80079b2:	f06f 0302 	mvn.w	r3, #2
 80079b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80079b8:	e01d      	b.n	80079f6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <osSemaphoreAcquire+0xb6>
 80079c0:	4b11      	ldr	r3, [pc, #68]	@ (8007a08 <osSemaphoreAcquire+0xc8>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80079d0:	e011      	b.n	80079f6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	69b8      	ldr	r0, [r7, #24]
 80079d6:	f001 f91d 	bl	8008c14 <xQueueSemaphoreTake>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d00b      	beq.n	80079f8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80079e6:	f06f 0301 	mvn.w	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	e004      	b.n	80079f8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80079ee:	f06f 0302 	mvn.w	r3, #2
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e000      	b.n	80079f8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80079f6:	bf00      	nop
      }
    }
  }

  return (stat);
 80079f8:	69fb      	ldr	r3, [r7, #28]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20003f10 	.word	0x20003f10
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d103      	bne.n	8007a2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007a22:	f06f 0303 	mvn.w	r3, #3
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	e03e      	b.n	8007aa8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a2a:	f3ef 8305 	mrs	r3, IPSR
 8007a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8007a30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a36:	f3ef 8310 	mrs	r3, PRIMASK
 8007a3a:	613b      	str	r3, [r7, #16]
  return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a42:	f3ef 8311 	mrs	r3, BASEPRI
 8007a46:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01e      	beq.n	8007a8c <osSemaphoreRelease+0x80>
 8007a4e:	4b19      	ldr	r3, [pc, #100]	@ (8007ab4 <osSemaphoreRelease+0xa8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d11a      	bne.n	8007a8c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	4619      	mov	r1, r3
 8007a60:	69b8      	ldr	r0, [r7, #24]
 8007a62:	f000 ff56 	bl	8008912 <xQueueGiveFromISR>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d003      	beq.n	8007a74 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007a6c:	f06f 0302 	mvn.w	r3, #2
 8007a70:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a72:	e018      	b.n	8007aa6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d015      	beq.n	8007aa6 <osSemaphoreRelease+0x9a>
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab8 <osSemaphoreRelease+0xac>)
 8007a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a8a:	e00c      	b.n	8007aa6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	69b8      	ldr	r0, [r7, #24]
 8007a94:	f000 fd90 	bl	80085b8 <xQueueGenericSend>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d004      	beq.n	8007aa8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007a9e:	f06f 0302 	mvn.w	r3, #2
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e000      	b.n	8007aa8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007aa6:	bf00      	nop
    }
  }

  return (stat);
 8007aa8:	69fb      	ldr	r3, [r7, #28]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20003f10 	.word	0x20003f10
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac8:	f3ef 8305 	mrs	r3, IPSR
 8007acc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ace:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10f      	bne.n	8007af4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d105      	bne.n	8007aec <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <osSemaphoreDelete+0x40>
 8007aec:	4b0d      	ldr	r3, [pc, #52]	@ (8007b24 <osSemaphoreDelete+0x68>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d103      	bne.n	8007afc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007af4:	f06f 0305 	mvn.w	r3, #5
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e00e      	b.n	8007b1a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007b02:	f06f 0303 	mvn.w	r3, #3
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e007      	b.n	8007b1a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007b0a:	69b8      	ldr	r0, [r7, #24]
 8007b0c:	f001 fcc6 	bl	800949c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007b14:	69b8      	ldr	r0, [r7, #24]
 8007b16:	f001 fb49 	bl	80091ac <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007b1a:	69fb      	ldr	r3, [r7, #28]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20003f10 	.word	0x20003f10

08007b28 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08c      	sub	sp, #48	@ 0x30
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b38:	f3ef 8305 	mrs	r3, IPSR
 8007b3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d16f      	bne.n	8007c24 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
 8007b48:	617b      	str	r3, [r7, #20]
  return(result);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b50:	f3ef 8311 	mrs	r3, BASEPRI
 8007b54:	613b      	str	r3, [r7, #16]
  return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <osMessageQueueNew+0x3c>
 8007b5c:	4b34      	ldr	r3, [pc, #208]	@ (8007c30 <osMessageQueueNew+0x108>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d05f      	beq.n	8007c24 <osMessageQueueNew+0xfc>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d05c      	beq.n	8007c24 <osMessageQueueNew+0xfc>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d059      	beq.n	8007c24 <osMessageQueueNew+0xfc>
    mem = -1;
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295
 8007b74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d029      	beq.n	8007bd0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d012      	beq.n	8007baa <osMessageQueueNew+0x82>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b4f      	cmp	r3, #79	@ 0x4f
 8007b8a:	d90e      	bls.n	8007baa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695a      	ldr	r2, [r3, #20]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <osMessageQueueNew+0x82>
        mem = 1;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	623b      	str	r3, [r7, #32]
 8007ba8:	e014      	b.n	8007bd4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d110      	bne.n	8007bd4 <osMessageQueueNew+0xac>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10c      	bne.n	8007bd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d108      	bne.n	8007bd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <osMessageQueueNew+0xac>
          mem = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	e001      	b.n	8007bd4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d10b      	bne.n	8007bf2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2100      	movs	r1, #0
 8007be4:	9100      	str	r1, [sp, #0]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fac5 	bl	8008178 <xQueueGenericCreateStatic>
 8007bee:	6278      	str	r0, [r7, #36]	@ 0x24
 8007bf0:	e008      	b.n	8007c04 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fb42 	bl	8008286 <xQueueGenericCreate>
 8007c02:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00c      	beq.n	8007c24 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	e001      	b.n	8007c1c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c1c:	69f9      	ldr	r1, [r7, #28]
 8007c1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c20:	f001 fc12 	bl	8009448 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3728      	adds	r7, #40	@ 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20003f10 	.word	0x20003f10

08007c34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08a      	sub	sp, #40	@ 0x28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4c:	f3ef 8305 	mrs	r3, IPSR
 8007c50:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c52:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10f      	bne.n	8007c78 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c58:	f3ef 8310 	mrs	r3, PRIMASK
 8007c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c64:	f3ef 8311 	mrs	r3, BASEPRI
 8007c68:	617b      	str	r3, [r7, #20]
  return(result);
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d02c      	beq.n	8007cca <osMessageQueuePut+0x96>
 8007c70:	4b28      	ldr	r3, [pc, #160]	@ (8007d14 <osMessageQueuePut+0xe0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d128      	bne.n	8007cca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <osMessageQueuePut+0x56>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <osMessageQueuePut+0x56>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007c8a:	f06f 0303 	mvn.w	r3, #3
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c90:	e039      	b.n	8007d06 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c96:	f107 0210 	add.w	r2, r7, #16
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	6a38      	ldr	r0, [r7, #32]
 8007ca0:	f000 fd94 	bl	80087cc <xQueueGenericSendFromISR>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007caa:	f06f 0302 	mvn.w	r3, #2
 8007cae:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cb0:	e029      	b.n	8007d06 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d026      	beq.n	8007d06 <osMessageQueuePut+0xd2>
 8007cb8:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <osMessageQueuePut+0xe4>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cc8:	e01d      	b.n	8007d06 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <osMessageQueuePut+0xa2>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007cd6:	f06f 0303 	mvn.w	r3, #3
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cdc:	e014      	b.n	8007d08 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007cde:	2300      	movs	r3, #0
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	6a38      	ldr	r0, [r7, #32]
 8007ce6:	f000 fc67 	bl	80085b8 <xQueueGenericSend>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d00b      	beq.n	8007d08 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007cf6:	f06f 0301 	mvn.w	r3, #1
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cfc:	e004      	b.n	8007d08 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007cfe:	f06f 0302 	mvn.w	r3, #2
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d04:	e000      	b.n	8007d08 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3728      	adds	r7, #40	@ 0x28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20003f10 	.word	0x20003f10
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d32:	f3ef 8305 	mrs	r3, IPSR
 8007d36:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d38:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10f      	bne.n	8007d5e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d42:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d4e:	617b      	str	r3, [r7, #20]
  return(result);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d02c      	beq.n	8007db0 <osMessageQueueGet+0x94>
 8007d56:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <osMessageQueueGet+0xdc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d128      	bne.n	8007db0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <osMessageQueueGet+0x54>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <osMessageQueueGet+0x54>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007d70:	f06f 0303 	mvn.w	r3, #3
 8007d74:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d76:	e038      	b.n	8007dea <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007d7c:	f107 0310 	add.w	r3, r7, #16
 8007d80:	461a      	mov	r2, r3
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6a38      	ldr	r0, [r7, #32]
 8007d86:	f001 f947 	bl	8009018 <xQueueReceiveFromISR>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d003      	beq.n	8007d98 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007d90:	f06f 0302 	mvn.w	r3, #2
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d96:	e028      	b.n	8007dea <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d025      	beq.n	8007dea <osMessageQueueGet+0xce>
 8007d9e:	4b17      	ldr	r3, [pc, #92]	@ (8007dfc <osMessageQueueGet+0xe0>)
 8007da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dae:	e01c      	b.n	8007dea <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <osMessageQueueGet+0xa0>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d103      	bne.n	8007dc4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007dbc:	f06f 0303 	mvn.w	r3, #3
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc2:	e013      	b.n	8007dec <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	6a38      	ldr	r0, [r7, #32]
 8007dca:	f000 fe3b 	bl	8008a44 <xQueueReceive>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d00b      	beq.n	8007dec <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007dda:	f06f 0301 	mvn.w	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de0:	e004      	b.n	8007dec <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007de2:	f06f 0302 	mvn.w	r3, #2
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de8:	e000      	b.n	8007dec <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3728      	adds	r7, #40	@ 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20003f10 	.word	0x20003f10
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	e01e      	b.n	8007e56 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e18:	f3ef 8305 	mrs	r3, IPSR
 8007e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e1e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10f      	bne.n	8007e44 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e24:	f3ef 8310 	mrs	r3, PRIMASK
 8007e28:	613b      	str	r3, [r7, #16]
  return(result);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e30:	f3ef 8311 	mrs	r3, BASEPRI
 8007e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <osMessageQueueGetCount+0x4e>
 8007e3c:	4b08      	ldr	r3, [pc, #32]	@ (8007e60 <osMessageQueueGetCount+0x60>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d104      	bne.n	8007e4e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007e44:	69b8      	ldr	r0, [r7, #24]
 8007e46:	f001 f990 	bl	800916a <uxQueueMessagesWaitingFromISR>
 8007e4a:	61f8      	str	r0, [r7, #28]
 8007e4c:	e003      	b.n	8007e56 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007e4e:	69b8      	ldr	r0, [r7, #24]
 8007e50:	f001 f96a 	bl	8009128 <uxQueueMessagesWaiting>
 8007e54:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20003f10 	.word	0x20003f10

08007e64 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e70:	f3ef 8305 	mrs	r3, IPSR
 8007e74:	617b      	str	r3, [r7, #20]
  return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10f      	bne.n	8007e9c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e80:	613b      	str	r3, [r7, #16]
  return(result);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d105      	bne.n	8007e94 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e88:	f3ef 8311 	mrs	r3, BASEPRI
 8007e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <osMessageQueueDelete+0x40>
 8007e94:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <osMessageQueueDelete+0x68>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d103      	bne.n	8007ea4 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007e9c:	f06f 0305 	mvn.w	r3, #5
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	e00e      	b.n	8007ec2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007eaa:	f06f 0303 	mvn.w	r3, #3
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e007      	b.n	8007ec2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f001 faf2 	bl	800949c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007ebc:	69b8      	ldr	r0, [r7, #24]
 8007ebe:	f001 f975 	bl	80091ac <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20003f10 	.word	0x20003f10

08007ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a07      	ldr	r2, [pc, #28]	@ (8007efc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a06      	ldr	r2, [pc, #24]	@ (8007f00 <vApplicationGetIdleTaskMemory+0x30>)
 8007ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2280      	movs	r2, #128	@ 0x80
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20003f14 	.word	0x20003f14
 8007f00:	20003f70 	.word	0x20003f70

08007f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4a07      	ldr	r2, [pc, #28]	@ (8007f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a06      	ldr	r2, [pc, #24]	@ (8007f34 <vApplicationGetTimerTaskMemory+0x30>)
 8007f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20004170 	.word	0x20004170
 8007f34:	200041cc 	.word	0x200041cc

08007f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f103 0208 	add.w	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 0208 	add.w	r2, r3, #8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f103 0208 	add.w	r2, r3, #8
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d103      	bne.n	8007ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e00c      	b.n	8008014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e002      	b.n	8008008 <vListInsert+0x2e>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	d2f6      	bcs.n	8008002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6892      	ldr	r2, [r2, #8]
 8008062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6852      	ldr	r2, [r2, #4]
 800806c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d103      	bne.n	8008080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10d      	bne.n	80080d0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	b672      	cpsid	i
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	b662      	cpsie	i
 80080c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80080d0:	f003 fb84 	bl	800b7dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	441a      	add	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008100:	3b01      	subs	r3, #1
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	441a      	add	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	22ff      	movs	r2, #255	@ 0xff
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	22ff      	movs	r2, #255	@ 0xff
 800811c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d114      	bne.n	8008150 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01a      	beq.n	8008164 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3310      	adds	r3, #16
 8008132:	4618      	mov	r0, r3
 8008134:	f001 ff9c 	bl	800a070 <xTaskRemoveFromEventList>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d012      	beq.n	8008164 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <xQueueGenericReset+0xd4>)
 8008140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	e009      	b.n	8008164 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3310      	adds	r3, #16
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff feef 	bl	8007f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3324      	adds	r3, #36	@ 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff feea 	bl	8007f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008164:	f003 fb70 	bl	800b848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008168:	2301      	movs	r3, #1
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	@ 0x38
 800817c:	af02      	add	r7, sp, #8
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10d      	bne.n	80081a8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10d      	bne.n	80081ca <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <xQueueGenericCreateStatic+0x5e>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <xQueueGenericCreateStatic+0x62>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGenericCreateStatic+0x64>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10d      	bne.n	80081fc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	623b      	str	r3, [r7, #32]
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xQueueGenericCreateStatic+0x90>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueGenericCreateStatic+0x94>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueGenericCreateStatic+0x96>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10d      	bne.n	800822e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	b672      	cpsid	i
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	b662      	cpsie	i
 8008226:	61fb      	str	r3, [r7, #28]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800822e:	2350      	movs	r3, #80	@ 0x50
 8008230:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b50      	cmp	r3, #80	@ 0x50
 8008236:	d00d      	beq.n	8008254 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	b672      	cpsid	i
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	b662      	cpsie	i
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008254:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008268:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f848 	bl	800830c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3730      	adds	r7, #48	@ 0x30
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008286:	b580      	push	{r7, lr}
 8008288:	b08a      	sub	sp, #40	@ 0x28
 800828a:	af02      	add	r7, sp, #8
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	4613      	mov	r3, r2
 8008292:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <xQueueGenericCreate+0x30>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	613b      	str	r3, [r7, #16]
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	e004      	b.n	80082cc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3350      	adds	r3, #80	@ 0x50
 80082d0:	4618      	mov	r0, r3
 80082d2:	f003 fbb1 	bl	800ba38 <pvPortMalloc>
 80082d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	3350      	adds	r3, #80	@ 0x50
 80082e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f805 	bl	800830c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008302:	69bb      	ldr	r3, [r7, #24]
	}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e002      	b.n	800832e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800833a:	2101      	movs	r1, #1
 800833c:	69b8      	ldr	r0, [r7, #24]
 800833e:	f7ff feaf 	bl	80080a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00e      	beq.n	800837e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008372:	2300      	movs	r3, #0
 8008374:	2200      	movs	r2, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f91d 	bl	80085b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008390:	2301      	movs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	2300      	movs	r3, #0
 8008396:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	461a      	mov	r2, r3
 800839c:	6939      	ldr	r1, [r7, #16]
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f7ff ff71 	bl	8008286 <xQueueGenericCreate>
 80083a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ffd3 	bl	8008352 <prvInitialiseMutex>

		return xNewQueue;
 80083ac:	68fb      	ldr	r3, [r7, #12]
	}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af02      	add	r7, sp, #8
 80083bc:	4603      	mov	r3, r0
 80083be:	6039      	str	r1, [r7, #0]
 80083c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80083c2:	2301      	movs	r3, #1
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	6939      	ldr	r1, [r7, #16]
 80083d4:	6978      	ldr	r0, [r7, #20]
 80083d6:	f7ff fecf 	bl	8008178 <xQueueGenericCreateStatic>
 80083da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff ffb8 	bl	8008352 <prvInitialiseMutex>

		return xNewQueue;
 80083e2:	68fb      	ldr	r3, [r7, #12]
	}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10d      	bne.n	800841a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	60fb      	str	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	689c      	ldr	r4, [r3, #8]
 800841e:	f002 f8c3 	bl	800a5a8 <xTaskGetCurrentTaskHandle>
 8008422:	4603      	mov	r3, r0
 8008424:	429c      	cmp	r4, r3
 8008426:	d111      	bne.n	800844c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800843a:	2300      	movs	r3, #0
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6938      	ldr	r0, [r7, #16]
 8008442:	f000 f8b9 	bl	80085b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008446:	2301      	movs	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e001      	b.n	8008450 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008450:	697b      	ldr	r3, [r7, #20]
	}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}

0800845a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800845a:	b590      	push	{r4, r7, lr}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10d      	bne.n	800848a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	60fb      	str	r3, [r7, #12]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	689c      	ldr	r4, [r3, #8]
 800848e:	f002 f88b 	bl	800a5a8 <xTaskGetCurrentTaskHandle>
 8008492:	4603      	mov	r3, r0
 8008494:	429c      	cmp	r4, r3
 8008496:	d107      	bne.n	80084a8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80084a2:	2301      	movs	r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e00c      	b.n	80084c2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6938      	ldr	r0, [r7, #16]
 80084ac:	f000 fbb2 	bl	8008c14 <xQueueSemaphoreTake>
 80084b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80084c2:	697b      	ldr	r3, [r7, #20]
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	371c      	adds	r7, #28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd90      	pop	{r4, r7, pc}

080084cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	@ 0x28
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10d      	bne.n	80084fa <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	61bb      	str	r3, [r7, #24]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d90d      	bls.n	800851e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	617b      	str	r3, [r7, #20]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800851e:	2302      	movs	r3, #2
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fe25 	bl	8008178 <xQueueGenericCreateStatic>
 800852e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800853c:	69fb      	ldr	r3, [r7, #28]
	}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10d      	bne.n	8008572 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	b672      	cpsid	i
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	b662      	cpsie	i
 800856a:	613b      	str	r3, [r7, #16]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d90d      	bls.n	8008596 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	b672      	cpsid	i
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	b662      	cpsie	i
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008596:	2202      	movs	r2, #2
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff fe73 	bl	8008286 <xQueueGenericCreate>
 80085a0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80085ae:	697b      	ldr	r3, [r7, #20]
	}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08e      	sub	sp, #56	@ 0x38
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085c6:	2300      	movs	r3, #0
 80085c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10d      	bne.n	80085f0 <xQueueGenericSend+0x38>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d103      	bne.n	80085fe <xQueueGenericSend+0x46>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <xQueueGenericSend+0x4a>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueGenericSend+0x4c>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <xQueueGenericSend+0x6c>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	b672      	cpsid	i
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	b662      	cpsie	i
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <xQueueGenericSend+0x7a>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <xQueueGenericSend+0x7e>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <xQueueGenericSend+0x80>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10d      	bne.n	8008658 <xQueueGenericSend+0xa0>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	b672      	cpsid	i
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	b662      	cpsie	i
 8008650:	623b      	str	r3, [r7, #32]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008658:	f001 ffb6 	bl	800a5c8 <xTaskGetSchedulerState>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <xQueueGenericSend+0xb0>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <xQueueGenericSend+0xb4>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <xQueueGenericSend+0xb6>
 800866c:	2300      	movs	r3, #0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10d      	bne.n	800868e <xQueueGenericSend+0xd6>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	b672      	cpsid	i
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	b662      	cpsie	i
 8008686:	61fb      	str	r3, [r7, #28]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800868e:	f003 f8a5 	bl	800b7dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <xQueueGenericSend+0xec>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d129      	bne.n	80086f8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086aa:	f000 fdbd 	bl	8009228 <prvCopyDataToQueue>
 80086ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d010      	beq.n	80086da <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	3324      	adds	r3, #36	@ 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fcd7 	bl	800a070 <xTaskRemoveFromEventList>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d013      	beq.n	80086f0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086c8:	4b3f      	ldr	r3, [pc, #252]	@ (80087c8 <xQueueGenericSend+0x210>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	e00a      	b.n	80086f0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086e0:	4b39      	ldr	r3, [pc, #228]	@ (80087c8 <xQueueGenericSend+0x210>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086f0:	f003 f8aa 	bl	800b848 <vPortExitCritical>
				return pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e063      	b.n	80087c0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086fe:	f003 f8a3 	bl	800b848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008702:	2300      	movs	r3, #0
 8008704:	e05c      	b.n	80087c0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fd13 	bl	800a13c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008716:	2301      	movs	r3, #1
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800871a:	f003 f895 	bl	800b848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800871e:	f001 f9d7 	bl	8009ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008722:	f003 f85b 	bl	800b7dc <vPortEnterCritical>
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800872c:	b25b      	sxtb	r3, r3
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d103      	bne.n	800873c <xQueueGenericSend+0x184>
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008742:	b25b      	sxtb	r3, r3
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d103      	bne.n	8008752 <xQueueGenericSend+0x19a>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008752:	f003 f879 	bl	800b848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008756:	1d3a      	adds	r2, r7, #4
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fd02 	bl	800a168 <xTaskCheckForTimeOut>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d124      	bne.n	80087b4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800876a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800876c:	f000 fe54 	bl	8009418 <prvIsQueueFull>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d018      	beq.n	80087a8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	3310      	adds	r3, #16
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4611      	mov	r1, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fc20 	bl	8009fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008786:	f000 fddf 	bl	8009348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800878a:	f001 f9af 	bl	8009aec <xTaskResumeAll>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f af7c 	bne.w	800868e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <xQueueGenericSend+0x210>)
 8008798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	e772      	b.n	800868e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087aa:	f000 fdcd 	bl	8009348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ae:	f001 f99d 	bl	8009aec <xTaskResumeAll>
 80087b2:	e76c      	b.n	800868e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087b6:	f000 fdc7 	bl	8009348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ba:	f001 f997 	bl	8009aec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3738      	adds	r7, #56	@ 0x38
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	@ 0x38
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10d      	bne.n	8008800 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	b672      	cpsid	i
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	b662      	cpsie	i
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <xQueueGenericSendFromISR+0x42>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <xQueueGenericSendFromISR+0x46>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <xQueueGenericSendFromISR+0x48>
 8008812:	2300      	movs	r3, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	b672      	cpsid	i
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	b662      	cpsie	i
 800882c:	623b      	str	r3, [r7, #32]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <xQueueGenericSendFromISR+0x76>
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <xQueueGenericSendFromISR+0x7a>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueGenericSendFromISR+0x7c>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008850:	b672      	cpsid	i
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	b662      	cpsie	i
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008868:	f003 f8a0 	bl	800b9ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800886c:	f3ef 8211 	mrs	r2, BASEPRI
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	61ba      	str	r2, [r7, #24]
 8008886:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008888:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800888a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <xQueueGenericSendFromISR+0xd2>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d12c      	bne.n	80088f8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ae:	f000 fcbb 	bl	8009228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d112      	bne.n	80088e2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d016      	beq.n	80088f2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	3324      	adds	r3, #36	@ 0x24
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fbd1 	bl	800a070 <xTaskRemoveFromEventList>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	e007      	b.n	80088f2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088e6:	3301      	adds	r3, #1
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	b25a      	sxtb	r2, r3
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088f2:	2301      	movs	r3, #1
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80088f6:	e001      	b.n	80088fc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008906:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800890a:	4618      	mov	r0, r3
 800890c:	3738      	adds	r7, #56	@ 0x38
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b08e      	sub	sp, #56	@ 0x38
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10d      	bne.n	8008942 <xQueueGiveFromISR+0x30>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	b672      	cpsid	i
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	b662      	cpsie	i
 800893a:	623b      	str	r3, [r7, #32]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <xQueueGiveFromISR+0x54>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	b672      	cpsid	i
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	b662      	cpsie	i
 800895e:	61fb      	str	r3, [r7, #28]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <xQueueGiveFromISR+0x64>
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueGiveFromISR+0x68>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGiveFromISR+0x6a>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10d      	bne.n	800899c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	61bb      	str	r3, [r7, #24]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800899c:	f003 f806 	bl	800b9ac <vPortValidateInterruptPriority>
	__asm volatile
 80089a0:	f3ef 8211 	mrs	r2, BASEPRI
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	b672      	cpsid	i
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	b662      	cpsie	i
 80089b8:	617a      	str	r2, [r7, #20]
 80089ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80089bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d22b      	bcs.n	8008a28 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d112      	bne.n	8008a12 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d016      	beq.n	8008a22 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	3324      	adds	r3, #36	@ 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fb39 	bl	800a070 <xTaskRemoveFromEventList>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00e      	beq.n	8008a22 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	e007      	b.n	8008a22 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a16:	3301      	adds	r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	b25a      	sxtb	r2, r3
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a22:	2301      	movs	r3, #1
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a26:	e001      	b.n	8008a2c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f383 8811 	msr	BASEPRI, r3
}
 8008a36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3738      	adds	r7, #56	@ 0x38
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08c      	sub	sp, #48	@ 0x30
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10d      	bne.n	8008a7a <xQueueReceive+0x36>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a62:	b672      	cpsid	i
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	b662      	cpsie	i
 8008a72:	623b      	str	r3, [r7, #32]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueReceive+0x44>
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueReceive+0x48>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueReceive+0x4a>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10d      	bne.n	8008aae <xQueueReceive+0x6a>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	b672      	cpsid	i
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	b662      	cpsie	i
 8008aa6:	61fb      	str	r3, [r7, #28]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aae:	f001 fd8b 	bl	800a5c8 <xTaskGetSchedulerState>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <xQueueReceive+0x7a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <xQueueReceive+0x7e>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueReceive+0x80>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10d      	bne.n	8008ae4 <xQueueReceive+0xa0>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	61bb      	str	r3, [r7, #24]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ae4:	f002 fe7a 	bl	800b7dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01f      	beq.n	8008b34 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af8:	f000 fc00 	bl	80092fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	1e5a      	subs	r2, r3, #1
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00f      	beq.n	8008b2c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	3310      	adds	r3, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 faad 	bl	800a070 <xTaskRemoveFromEventList>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d007      	beq.n	8008b2c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c10 <xQueueReceive+0x1cc>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b2c:	f002 fe8c 	bl	800b848 <vPortExitCritical>
				return pdPASS;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e069      	b.n	8008c08 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b3a:	f002 fe85 	bl	800b848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e062      	b.n	8008c08 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b48:	f107 0310 	add.w	r3, r7, #16
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 faf5 	bl	800a13c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b52:	2301      	movs	r3, #1
 8008b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b56:	f002 fe77 	bl	800b848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b5a:	f000 ffb9 	bl	8009ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b5e:	f002 fe3d 	bl	800b7dc <vPortEnterCritical>
 8008b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b68:	b25b      	sxtb	r3, r3
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <xQueueReceive+0x134>
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d103      	bne.n	8008b8e <xQueueReceive+0x14a>
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b8e:	f002 fe5b 	bl	800b848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b92:	1d3a      	adds	r2, r7, #4
 8008b94:	f107 0310 	add.w	r3, r7, #16
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 fae4 	bl	800a168 <xTaskCheckForTimeOut>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d123      	bne.n	8008bee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba8:	f000 fc20 	bl	80093ec <prvIsQueueEmpty>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d017      	beq.n	8008be2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb4:	3324      	adds	r3, #36	@ 0x24
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 fa02 	bl	8009fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc2:	f000 fbc1 	bl	8009348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc6:	f000 ff91 	bl	8009aec <xTaskResumeAll>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d189      	bne.n	8008ae4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c10 <xQueueReceive+0x1cc>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	e780      	b.n	8008ae4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be4:	f000 fbb0 	bl	8009348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be8:	f000 ff80 	bl	8009aec <xTaskResumeAll>
 8008bec:	e77a      	b.n	8008ae4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf0:	f000 fbaa 	bl	8009348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bf4:	f000 ff7a 	bl	8009aec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bfa:	f000 fbf7 	bl	80093ec <prvIsQueueEmpty>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f43f af6f 	beq.w	8008ae4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3730      	adds	r7, #48	@ 0x30
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08e      	sub	sp, #56	@ 0x38
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10d      	bne.n	8008c4c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	b672      	cpsid	i
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	b662      	cpsie	i
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00d      	beq.n	8008c70 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c58:	b672      	cpsid	i
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	b662      	cpsie	i
 8008c68:	61fb      	str	r3, [r7, #28]
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	e7fd      	b.n	8008c6c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c70:	f001 fcaa 	bl	800a5c8 <xTaskGetSchedulerState>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <xQueueSemaphoreTake+0x6c>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <xQueueSemaphoreTake+0x70>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <xQueueSemaphoreTake+0x72>
 8008c84:	2300      	movs	r3, #0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10d      	bne.n	8008ca6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8e:	b672      	cpsid	i
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	b662      	cpsie	i
 8008c9e:	61bb      	str	r3, [r7, #24]
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	e7fd      	b.n	8008ca2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ca6:	f002 fd99 	bl	800b7dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d024      	beq.n	8008d00 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cc6:	f001 febd 	bl	800aa44 <pvTaskIncrementMutexHeldCount>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00f      	beq.n	8008cf8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	3310      	adds	r3, #16
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 f9c7 	bl	800a070 <xTaskRemoveFromEventList>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ce8:	4b55      	ldr	r3, [pc, #340]	@ (8008e40 <xQueueSemaphoreTake+0x22c>)
 8008cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cf8:	f002 fda6 	bl	800b848 <vPortExitCritical>
				return pdPASS;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e09a      	b.n	8008e36 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d114      	bne.n	8008d30 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00d      	beq.n	8008d28 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	b672      	cpsid	i
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	b662      	cpsie	i
 8008d20:	617b      	str	r3, [r7, #20]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d28:	f002 fd8e 	bl	800b848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e082      	b.n	8008e36 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 f9fe 	bl	800a13c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d44:	f002 fd80 	bl	800b848 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d48:	f000 fec2 	bl	8009ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d4c:	f002 fd46 	bl	800b7dc <vPortEnterCritical>
 8008d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5c:	d103      	bne.n	8008d66 <xQueueSemaphoreTake+0x152>
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d103      	bne.n	8008d7c <xQueueSemaphoreTake+0x168>
 8008d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d7c:	f002 fd64 	bl	800b848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d80:	463a      	mov	r2, r7
 8008d82:	f107 030c 	add.w	r3, r7, #12
 8008d86:	4611      	mov	r1, r2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 f9ed 	bl	800a168 <xTaskCheckForTimeOut>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d132      	bne.n	8008dfa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d96:	f000 fb29 	bl	80093ec <prvIsQueueEmpty>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d026      	beq.n	8008dee <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008da8:	f002 fd18 	bl	800b7dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fc27 	bl	800a604 <xTaskPriorityInherit>
 8008db6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008db8:	f002 fd46 	bl	800b848 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	3324      	adds	r3, #36	@ 0x24
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 f8fd 	bl	8009fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dcc:	f000 fabc 	bl	8009348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dd0:	f000 fe8c 	bl	8009aec <xTaskResumeAll>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f47f af65 	bne.w	8008ca6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008ddc:	4b18      	ldr	r3, [pc, #96]	@ (8008e40 <xQueueSemaphoreTake+0x22c>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	e75b      	b.n	8008ca6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008dee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008df0:	f000 faaa 	bl	8009348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008df4:	f000 fe7a 	bl	8009aec <xTaskResumeAll>
 8008df8:	e755      	b.n	8008ca6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008dfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dfc:	f000 faa4 	bl	8009348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e00:	f000 fe74 	bl	8009aec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e06:	f000 faf1 	bl	80093ec <prvIsQueueEmpty>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f43f af4a 	beq.w	8008ca6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00d      	beq.n	8008e34 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008e18:	f002 fce0 	bl	800b7dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e1e:	f000 f9eb 	bl	80091f8 <prvGetDisinheritPriorityAfterTimeout>
 8008e22:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 fcc6 	bl	800a7bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e30:	f002 fd0a 	bl	800b848 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3738      	adds	r7, #56	@ 0x38
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	@ 0x38
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <xQueuePeek+0x36>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <xQueuePeek+0x44>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <xQueuePeek+0x48>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e000      	b.n	8008e8e <xQueuePeek+0x4a>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10d      	bne.n	8008eae <xQueuePeek+0x6a>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	b672      	cpsid	i
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	b662      	cpsie	i
 8008ea6:	623b      	str	r3, [r7, #32]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eae:	f001 fb8b 	bl	800a5c8 <xTaskGetSchedulerState>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <xQueuePeek+0x7a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <xQueuePeek+0x7e>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e000      	b.n	8008ec4 <xQueuePeek+0x80>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10d      	bne.n	8008ee4 <xQueuePeek+0xa0>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	61fb      	str	r3, [r7, #28]
}
 8008ede:	bf00      	nop
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ee4:	f002 fc7a 	bl	800b7dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d021      	beq.n	8008f38 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008efe:	f000 f9fd 	bl	80092fc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f06:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	3324      	adds	r3, #36	@ 0x24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 f8ab 	bl	800a070 <xTaskRemoveFromEventList>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d007      	beq.n	8008f30 <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f20:	4b3c      	ldr	r3, [pc, #240]	@ (8009014 <xQueuePeek+0x1d0>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f30:	f002 fc8a 	bl	800b848 <vPortExitCritical>
				return pdPASS;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e069      	b.n	800900c <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f3e:	f002 fc83 	bl	800b848 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e062      	b.n	800900c <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f4c:	f107 0314 	add.w	r3, r7, #20
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 f8f3 	bl	800a13c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f56:	2301      	movs	r3, #1
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f5a:	f002 fc75 	bl	800b848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f5e:	f000 fdb7 	bl	8009ad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f62:	f002 fc3b 	bl	800b7dc <vPortEnterCritical>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f72:	d103      	bne.n	8008f7c <xQueuePeek+0x138>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f82:	b25b      	sxtb	r3, r3
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d103      	bne.n	8008f92 <xQueuePeek+0x14e>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f92:	f002 fc59 	bl	800b848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f96:	1d3a      	adds	r2, r7, #4
 8008f98:	f107 0314 	add.w	r3, r7, #20
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 f8e2 	bl	800a168 <xTaskCheckForTimeOut>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d123      	bne.n	8008ff2 <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fac:	f000 fa1e 	bl	80093ec <prvIsQueueEmpty>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d017      	beq.n	8008fe6 <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	3324      	adds	r3, #36	@ 0x24
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 f800 	bl	8009fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fc6:	f000 f9bf 	bl	8009348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fca:	f000 fd8f 	bl	8009aec <xTaskResumeAll>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d187      	bne.n	8008ee4 <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8008fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8009014 <xQueuePeek+0x1d0>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	e77e      	b.n	8008ee4 <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8008fe6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fe8:	f000 f9ae 	bl	8009348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fec:	f000 fd7e 	bl	8009aec <xTaskResumeAll>
 8008ff0:	e778      	b.n	8008ee4 <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8008ff2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ff4:	f000 f9a8 	bl	8009348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ff8:	f000 fd78 	bl	8009aec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ffe:	f000 f9f5 	bl	80093ec <prvIsQueueEmpty>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	f43f af6d 	beq.w	8008ee4 <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800900a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800900c:	4618      	mov	r0, r3
 800900e:	3738      	adds	r7, #56	@ 0x38
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	@ 0x38
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10d      	bne.n	800904a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	b672      	cpsid	i
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	b662      	cpsie	i
 8009042:	623b      	str	r3, [r7, #32]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <xQueueReceiveFromISR+0x40>
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <xQueueReceiveFromISR+0x44>
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <xQueueReceiveFromISR+0x46>
 800905c:	2300      	movs	r3, #0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009066:	b672      	cpsid	i
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	b662      	cpsie	i
 8009076:	61fb      	str	r3, [r7, #28]
}
 8009078:	bf00      	nop
 800907a:	bf00      	nop
 800907c:	e7fd      	b.n	800907a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800907e:	f002 fc95 	bl	800b9ac <vPortValidateInterruptPriority>
	__asm volatile
 8009082:	f3ef 8211 	mrs	r2, BASEPRI
 8009086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	61ba      	str	r2, [r7, #24]
 800909c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800909e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d02f      	beq.n	800910e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090bc:	f000 f91e 	bl	80092fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c2:	1e5a      	subs	r2, r3, #1
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80090c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d112      	bne.n	80090f8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d016      	beq.n	8009108 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	3310      	adds	r3, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 ffc6 	bl	800a070 <xTaskRemoveFromEventList>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00e      	beq.n	8009108 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	e007      	b.n	8009108 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090fc:	3301      	adds	r3, #1
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	b25a      	sxtb	r2, r3
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
 800910c:	e001      	b.n	8009112 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800910e:	2300      	movs	r3, #0
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
 8009112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009114:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f383 8811 	msr	BASEPRI, r3
}
 800911c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800911e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009120:	4618      	mov	r0, r3
 8009122:	3738      	adds	r7, #56	@ 0x38
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	b672      	cpsid	i
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	b662      	cpsie	i
 800914a:	60bb      	str	r3, [r7, #8]
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	e7fd      	b.n	800914e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8009152:	f002 fb43 	bl	800b7dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800915c:	f002 fb74 	bl	800b848 <vPortExitCritical>

	return uxReturn;
 8009160:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800916a:	b480      	push	{r7}
 800916c:	b087      	sub	sp, #28
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10d      	bne.n	8009198 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	b672      	cpsid	i
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	b662      	cpsie	i
 8009190:	60fb      	str	r3, [r7, #12]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800919e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80091a0:	4618      	mov	r0, r3
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <vQueueDelete+0x2e>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	b672      	cpsid	i
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	b662      	cpsie	i
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f95e 	bl	800949c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f002 fcf2 	bl	800bbd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e001      	b.n	800921a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800921a:	68fb      	ldr	r3, [r7, #12]
	}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10d      	bne.n	8009262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d14d      	bne.n	80092ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4618      	mov	r0, r3
 8009254:	f001 fa3e 	bl	800a6d4 <xTaskPriorityDisinherit>
 8009258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	e043      	b.n	80092ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d119      	bne.n	800929c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6858      	ldr	r0, [r3, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	461a      	mov	r2, r3
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	f010 ffed 	bl	801a252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009280:	441a      	add	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	d32b      	bcc.n	80092ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	e026      	b.n	80092ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	68d8      	ldr	r0, [r3, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	461a      	mov	r2, r3
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	f010 ffd3 	bl	801a252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68da      	ldr	r2, [r3, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	425b      	negs	r3, r3
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d207      	bcs.n	80092d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d0:	425b      	negs	r3, r3
 80092d2:	441a      	add	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d105      	bne.n	80092ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80092f2:	697b      	ldr	r3, [r7, #20]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d018      	beq.n	8009340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	441a      	add	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	d303      	bcc.n	8009330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68d9      	ldr	r1, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009338:	461a      	mov	r2, r3
 800933a:	6838      	ldr	r0, [r7, #0]
 800933c:	f010 ff89 	bl	801a252 <memcpy>
	}
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009350:	f002 fa44 	bl	800b7dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800935a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800935c:	e011      	b.n	8009382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009362:	2b00      	cmp	r3, #0
 8009364:	d012      	beq.n	800938c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3324      	adds	r3, #36	@ 0x24
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fe80 	bl	800a070 <xTaskRemoveFromEventList>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009376:	f000 ff5f 	bl	800a238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	3b01      	subs	r3, #1
 800937e:	b2db      	uxtb	r3, r3
 8009380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dce9      	bgt.n	800935e <prvUnlockQueue+0x16>
 800938a:	e000      	b.n	800938e <prvUnlockQueue+0x46>
					break;
 800938c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	22ff      	movs	r2, #255	@ 0xff
 8009392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009396:	f002 fa57 	bl	800b848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800939a:	f002 fa1f 	bl	800b7dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093a6:	e011      	b.n	80093cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d012      	beq.n	80093d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3310      	adds	r3, #16
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fe5b 	bl	800a070 <xTaskRemoveFromEventList>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093c0:	f000 ff3a 	bl	800a238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dce9      	bgt.n	80093a8 <prvUnlockQueue+0x60>
 80093d4:	e000      	b.n	80093d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	22ff      	movs	r2, #255	@ 0xff
 80093dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80093e0:	f002 fa32 	bl	800b848 <vPortExitCritical>
}
 80093e4:	bf00      	nop
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093f4:	f002 f9f2 	bl	800b7dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e001      	b.n	800940a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800940a:	f002 fa1d 	bl	800b848 <vPortExitCritical>

	return xReturn;
 800940e:	68fb      	ldr	r3, [r7, #12]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009420:	f002 f9dc 	bl	800b7dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942c:	429a      	cmp	r2, r3
 800942e:	d102      	bne.n	8009436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e001      	b.n	800943a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800943a:	f002 fa05 	bl	800b848 <vPortExitCritical>

	return xReturn;
 800943e:	68fb      	ldr	r3, [r7, #12]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e014      	b.n	8009482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009458:	4a0f      	ldr	r2, [pc, #60]	@ (8009498 <vQueueAddToRegistry+0x50>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009464:	490c      	ldr	r1, [pc, #48]	@ (8009498 <vQueueAddToRegistry+0x50>)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800946e:	4a0a      	ldr	r2, [pc, #40]	@ (8009498 <vQueueAddToRegistry+0x50>)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	4413      	add	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800947a:	e006      	b.n	800948a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3301      	adds	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b07      	cmp	r3, #7
 8009486:	d9e7      	bls.n	8009458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	200045cc 	.word	0x200045cc

0800949c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e016      	b.n	80094d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094aa:	4a10      	ldr	r2, [pc, #64]	@ (80094ec <vQueueUnregisterQueue+0x50>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	4413      	add	r3, r2
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d10b      	bne.n	80094d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ba:	4a0c      	ldr	r2, [pc, #48]	@ (80094ec <vQueueUnregisterQueue+0x50>)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2100      	movs	r1, #0
 80094c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094c4:	4a09      	ldr	r2, [pc, #36]	@ (80094ec <vQueueUnregisterQueue+0x50>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	4413      	add	r3, r2
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
				break;
 80094d0:	e006      	b.n	80094e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b07      	cmp	r3, #7
 80094dc:	d9e5      	bls.n	80094aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	200045cc 	.word	0x200045cc

080094f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009500:	f002 f96c 	bl	800b7dc <vPortEnterCritical>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d103      	bne.n	800951a <vQueueWaitForMessageRestricted+0x2a>
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009520:	b25b      	sxtb	r3, r3
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d103      	bne.n	8009530 <vQueueWaitForMessageRestricted+0x40>
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009530:	f002 f98a 	bl	800b848 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	2b00      	cmp	r3, #0
 800953a:	d106      	bne.n	800954a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	3324      	adds	r3, #36	@ 0x24
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fd65 	bl	800a014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800954a:	6978      	ldr	r0, [r7, #20]
 800954c:	f7ff fefc 	bl	8009348 <prvUnlockQueue>
	}
 8009550:	bf00      	nop
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08e      	sub	sp, #56	@ 0x38
 800955c:	af04      	add	r7, sp, #16
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10d      	bne.n	8009588 <xTaskCreateStatic+0x30>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	b672      	cpsid	i
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	b662      	cpsie	i
 8009580:	623b      	str	r3, [r7, #32]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10d      	bne.n	80095aa <xTaskCreateStatic+0x52>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	61fb      	str	r3, [r7, #28]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095aa:	235c      	movs	r3, #92	@ 0x5c
 80095ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80095b2:	d00d      	beq.n	80095d0 <xTaskCreateStatic+0x78>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	b672      	cpsid	i
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	b662      	cpsie	i
 80095c8:	61bb      	str	r3, [r7, #24]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01e      	beq.n	8009616 <xTaskCreateStatic+0xbe>
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01b      	beq.n	8009616 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095f0:	2300      	movs	r3, #0
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	9302      	str	r3, [sp, #8]
 80095f8:	f107 0314 	add.w	r3, r7, #20
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f850 	bl	80096ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800960e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009610:	f000 f8e0 	bl	80097d4 <prvAddNewTaskToReadyList>
 8009614:	e001      	b.n	800961a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800961a:	697b      	ldr	r3, [r7, #20]
	}
 800961c:	4618      	mov	r0, r3
 800961e:	3728      	adds	r7, #40	@ 0x28
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08c      	sub	sp, #48	@ 0x30
 8009628:	af04      	add	r7, sp, #16
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4618      	mov	r0, r3
 800963a:	f002 f9fd 	bl	800ba38 <pvPortMalloc>
 800963e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00e      	beq.n	8009664 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009646:	205c      	movs	r0, #92	@ 0x5c
 8009648:	f002 f9f6 	bl	800ba38 <pvPortMalloc>
 800964c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	631a      	str	r2, [r3, #48]	@ 0x30
 800965a:	e005      	b.n	8009668 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800965c:	6978      	ldr	r0, [r7, #20]
 800965e:	f002 fab9 	bl	800bbd4 <vPortFree>
 8009662:	e001      	b.n	8009668 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d017      	beq.n	800969e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009676:	88fa      	ldrh	r2, [r7, #6]
 8009678:	2300      	movs	r3, #0
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f80e 	bl	80096ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009692:	69f8      	ldr	r0, [r7, #28]
 8009694:	f000 f89e 	bl	80097d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009698:	2301      	movs	r3, #1
 800969a:	61bb      	str	r3, [r7, #24]
 800969c:	e002      	b.n	80096a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800969e:	f04f 33ff 	mov.w	r3, #4294967295
 80096a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096a4:	69bb      	ldr	r3, [r7, #24]
	}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3720      	adds	r7, #32
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b088      	sub	sp, #32
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	461a      	mov	r2, r3
 80096c6:	21a5      	movs	r1, #165	@ 0xa5
 80096c8:	f010 fd0a 	bl	801a0e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80096d6:	440b      	add	r3, r1
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	f023 0307 	bic.w	r3, r3, #7
 80096e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00d      	beq.n	800970c <prvInitialiseNewTask+0x5e>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	b672      	cpsid	i
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	b662      	cpsie	i
 8009704:	617b      	str	r3, [r7, #20]
}
 8009706:	bf00      	nop
 8009708:	bf00      	nop
 800970a:	e7fd      	b.n	8009708 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d01f      	beq.n	8009752 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
 8009716:	e012      	b.n	800973e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	7819      	ldrb	r1, [r3, #0]
 8009720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4413      	add	r3, r2
 8009726:	3334      	adds	r3, #52	@ 0x34
 8009728:	460a      	mov	r2, r1
 800972a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d006      	beq.n	8009746 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	3301      	adds	r3, #1
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	2b0f      	cmp	r3, #15
 8009742:	d9e9      	bls.n	8009718 <prvInitialiseNewTask+0x6a>
 8009744:	e000      	b.n	8009748 <prvInitialiseNewTask+0x9a>
			{
				break;
 8009746:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009750:	e003      	b.n	800975a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800975a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975c:	2b37      	cmp	r3, #55	@ 0x37
 800975e:	d901      	bls.n	8009764 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009760:	2337      	movs	r3, #55	@ 0x37
 8009762:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009768:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	2200      	movs	r2, #0
 8009774:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	3304      	adds	r3, #4
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fbfc 	bl	8007f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	3318      	adds	r3, #24
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fbf7 	bl	8007f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800978e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009792:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800979e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	2200      	movs	r2, #0
 80097a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	69b8      	ldr	r0, [r7, #24]
 80097b4:	f001 ff06 	bl	800b5c4 <pxPortInitialiseStack>
 80097b8:	4602      	mov	r2, r0
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ca:	bf00      	nop
 80097cc:	3720      	adds	r7, #32
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097dc:	f001 fffe 	bl	800b7dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009898 <prvAddNewTaskToReadyList+0xc4>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009898 <prvAddNewTaskToReadyList+0xc4>)
 80097e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ea:	4b2c      	ldr	r3, [pc, #176]	@ (800989c <prvAddNewTaskToReadyList+0xc8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097f2:	4a2a      	ldr	r2, [pc, #168]	@ (800989c <prvAddNewTaskToReadyList+0xc8>)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097f8:	4b27      	ldr	r3, [pc, #156]	@ (8009898 <prvAddNewTaskToReadyList+0xc4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d110      	bne.n	8009822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009800:	f000 fd3e 	bl	800a280 <prvInitialiseTaskLists>
 8009804:	e00d      	b.n	8009822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009806:	4b26      	ldr	r3, [pc, #152]	@ (80098a0 <prvAddNewTaskToReadyList+0xcc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d109      	bne.n	8009822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800980e:	4b23      	ldr	r3, [pc, #140]	@ (800989c <prvAddNewTaskToReadyList+0xc8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	429a      	cmp	r2, r3
 800981a:	d802      	bhi.n	8009822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800981c:	4a1f      	ldr	r2, [pc, #124]	@ (800989c <prvAddNewTaskToReadyList+0xc8>)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009822:	4b20      	ldr	r3, [pc, #128]	@ (80098a4 <prvAddNewTaskToReadyList+0xd0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	4a1e      	ldr	r2, [pc, #120]	@ (80098a4 <prvAddNewTaskToReadyList+0xd0>)
 800982a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800982c:	4b1d      	ldr	r3, [pc, #116]	@ (80098a4 <prvAddNewTaskToReadyList+0xd0>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009838:	4b1b      	ldr	r3, [pc, #108]	@ (80098a8 <prvAddNewTaskToReadyList+0xd4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d903      	bls.n	8009848 <prvAddNewTaskToReadyList+0x74>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009844:	4a18      	ldr	r2, [pc, #96]	@ (80098a8 <prvAddNewTaskToReadyList+0xd4>)
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4a15      	ldr	r2, [pc, #84]	@ (80098ac <prvAddNewTaskToReadyList+0xd8>)
 8009856:	441a      	add	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7fe fb97 	bl	8007f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009864:	f001 fff0 	bl	800b848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009868:	4b0d      	ldr	r3, [pc, #52]	@ (80098a0 <prvAddNewTaskToReadyList+0xcc>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00e      	beq.n	800988e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <prvAddNewTaskToReadyList+0xc8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d207      	bcs.n	800988e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800987e:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <prvAddNewTaskToReadyList+0xdc>)
 8009880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20004ae0 	.word	0x20004ae0
 800989c:	2000460c 	.word	0x2000460c
 80098a0:	20004aec 	.word	0x20004aec
 80098a4:	20004afc 	.word	0x20004afc
 80098a8:	20004ae8 	.word	0x20004ae8
 80098ac:	20004610 	.word	0x20004610
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01a      	beq.n	80098fc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098c6:	4b15      	ldr	r3, [pc, #84]	@ (800991c <vTaskDelay+0x68>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00d      	beq.n	80098ea <vTaskDelay+0x36>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	b672      	cpsid	i
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	b662      	cpsie	i
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80098ea:	f000 f8f1 	bl	8009ad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098ee:	2100      	movs	r1, #0
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 faab 	bl	800ae4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098f6:	f000 f8f9 	bl	8009aec <xTaskResumeAll>
 80098fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d107      	bne.n	8009912 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009902:	4b07      	ldr	r3, [pc, #28]	@ (8009920 <vTaskDelay+0x6c>)
 8009904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20004b08 	.word	0x20004b08
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10d      	bne.n	8009952 <eTaskGetState+0x2e>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	b672      	cpsid	i
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	b662      	cpsie	i
 800994a:	60bb      	str	r3, [r7, #8]
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	e7fd      	b.n	800994e <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8009952:	4b24      	ldr	r3, [pc, #144]	@ (80099e4 <eTaskGetState+0xc0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	429a      	cmp	r2, r3
 800995a:	d102      	bne.n	8009962 <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800995c:	2300      	movs	r3, #0
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e03a      	b.n	80099d8 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 8009962:	f001 ff3b 	bl	800b7dc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800996c:	4b1e      	ldr	r3, [pc, #120]	@ (80099e8 <eTaskGetState+0xc4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009972:	4b1e      	ldr	r3, [pc, #120]	@ (80099ec <eTaskGetState+0xc8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009978:	f001 ff66 	bl	800b848 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	429a      	cmp	r2, r3
 8009982:	d003      	beq.n	800998c <eTaskGetState+0x68>
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	429a      	cmp	r2, r3
 800998a:	d102      	bne.n	8009992 <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800998c:	2302      	movs	r3, #2
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e022      	b.n	80099d8 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	4a16      	ldr	r2, [pc, #88]	@ (80099f0 <eTaskGetState+0xcc>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d112      	bne.n	80099c0 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10b      	bne.n	80099ba <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d102      	bne.n	80099b4 <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 80099ae:	2302      	movs	r3, #2
 80099b0:	77fb      	strb	r3, [r7, #31]
 80099b2:	e011      	b.n	80099d8 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 80099b4:	2303      	movs	r3, #3
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e00e      	b.n	80099d8 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e00b      	b.n	80099d8 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	4a0c      	ldr	r2, [pc, #48]	@ (80099f4 <eTaskGetState+0xd0>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d002      	beq.n	80099ce <eTaskGetState+0xaa>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80099ce:	2304      	movs	r3, #4
 80099d0:	77fb      	strb	r3, [r7, #31]
 80099d2:	e001      	b.n	80099d8 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80099d4:	2301      	movs	r3, #1
 80099d6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80099d8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80099da:	4618      	mov	r0, r3
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	2000460c 	.word	0x2000460c
 80099e8:	20004a98 	.word	0x20004a98
 80099ec:	20004a9c 	.word	0x20004a9c
 80099f0:	20004acc 	.word	0x20004acc
 80099f4:	20004ab4 	.word	0x20004ab4

080099f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	@ 0x28
 80099fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a06:	463a      	mov	r2, r7
 8009a08:	1d39      	adds	r1, r7, #4
 8009a0a:	f107 0308 	add.w	r3, r7, #8
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fa5e 	bl	8007ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	9202      	str	r2, [sp, #8]
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	2300      	movs	r3, #0
 8009a24:	460a      	mov	r2, r1
 8009a26:	4924      	ldr	r1, [pc, #144]	@ (8009ab8 <vTaskStartScheduler+0xc0>)
 8009a28:	4824      	ldr	r0, [pc, #144]	@ (8009abc <vTaskStartScheduler+0xc4>)
 8009a2a:	f7ff fd95 	bl	8009558 <xTaskCreateStatic>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4a23      	ldr	r2, [pc, #140]	@ (8009ac0 <vTaskStartScheduler+0xc8>)
 8009a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a34:	4b22      	ldr	r3, [pc, #136]	@ (8009ac0 <vTaskStartScheduler+0xc8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e001      	b.n	8009a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d102      	bne.n	8009a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a4c:	f001 fa52 	bl	800aef4 <xTimerCreateTimerTask>
 8009a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d118      	bne.n	8009a8a <vTaskStartScheduler+0x92>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	b672      	cpsid	i
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	b662      	cpsie	i
 8009a6c:	613b      	str	r3, [r7, #16]
}
 8009a6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a70:	4b14      	ldr	r3, [pc, #80]	@ (8009ac4 <vTaskStartScheduler+0xcc>)
 8009a72:	f04f 32ff 	mov.w	r2, #4294967295
 8009a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a78:	4b13      	ldr	r3, [pc, #76]	@ (8009ac8 <vTaskStartScheduler+0xd0>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a7e:	4b13      	ldr	r3, [pc, #76]	@ (8009acc <vTaskStartScheduler+0xd4>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a84:	f001 fe2c 	bl	800b6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a88:	e011      	b.n	8009aae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d10d      	bne.n	8009aae <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	b672      	cpsid	i
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	b662      	cpsie	i
 8009aa6:	60fb      	str	r3, [r7, #12]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vTaskStartScheduler+0xb2>
}
 8009aae:	bf00      	nop
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	0801c570 	.word	0x0801c570
 8009abc:	0800a251 	.word	0x0800a251
 8009ac0:	20004b04 	.word	0x20004b04
 8009ac4:	20004b00 	.word	0x20004b00
 8009ac8:	20004aec 	.word	0x20004aec
 8009acc:	20004ae4 	.word	0x20004ae4

08009ad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <vTaskSuspendAll+0x18>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	4a03      	ldr	r2, [pc, #12]	@ (8009ae8 <vTaskSuspendAll+0x18>)
 8009adc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009ade:	bf00      	nop
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20004b08 	.word	0x20004b08

08009aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009afa:	4b43      	ldr	r3, [pc, #268]	@ (8009c08 <xTaskResumeAll+0x11c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10d      	bne.n	8009b1e <xTaskResumeAll+0x32>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	603b      	str	r3, [r7, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b1e:	f001 fe5d 	bl	800b7dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b22:	4b39      	ldr	r3, [pc, #228]	@ (8009c08 <xTaskResumeAll+0x11c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	4a37      	ldr	r2, [pc, #220]	@ (8009c08 <xTaskResumeAll+0x11c>)
 8009b2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2c:	4b36      	ldr	r3, [pc, #216]	@ (8009c08 <xTaskResumeAll+0x11c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d162      	bne.n	8009bfa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b34:	4b35      	ldr	r3, [pc, #212]	@ (8009c0c <xTaskResumeAll+0x120>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d05e      	beq.n	8009bfa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b3c:	e02f      	b.n	8009b9e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3e:	4b34      	ldr	r3, [pc, #208]	@ (8009c10 <xTaskResumeAll+0x124>)
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3318      	adds	r3, #24
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fa7e 	bl	800804c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fa79 	bl	800804c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8009c14 <xTaskResumeAll+0x128>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d903      	bls.n	8009b6e <xTaskResumeAll+0x82>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009c14 <xTaskResumeAll+0x128>)
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4a27      	ldr	r2, [pc, #156]	@ (8009c18 <xTaskResumeAll+0x12c>)
 8009b7c:	441a      	add	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fe fa04 	bl	8007f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b8e:	4b23      	ldr	r3, [pc, #140]	@ (8009c1c <xTaskResumeAll+0x130>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d302      	bcc.n	8009b9e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009b98:	4b21      	ldr	r3, [pc, #132]	@ (8009c20 <xTaskResumeAll+0x134>)
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8009c10 <xTaskResumeAll+0x124>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1cb      	bne.n	8009b3e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bac:	f000 fcdc 	bl	800a568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <xTaskResumeAll+0x138>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d010      	beq.n	8009bde <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bbc:	f000 f8e6 	bl	8009d8c <xTaskIncrementTick>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009bc6:	4b16      	ldr	r3, [pc, #88]	@ (8009c20 <xTaskResumeAll+0x134>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f1      	bne.n	8009bbc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009bd8:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <xTaskResumeAll+0x138>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bde:	4b10      	ldr	r3, [pc, #64]	@ (8009c20 <xTaskResumeAll+0x134>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bea:	4b0f      	ldr	r3, [pc, #60]	@ (8009c28 <xTaskResumeAll+0x13c>)
 8009bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bfa:	f001 fe25 	bl	800b848 <vPortExitCritical>

	return xAlreadyYielded;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20004b08 	.word	0x20004b08
 8009c0c:	20004ae0 	.word	0x20004ae0
 8009c10:	20004aa0 	.word	0x20004aa0
 8009c14:	20004ae8 	.word	0x20004ae8
 8009c18:	20004610 	.word	0x20004610
 8009c1c:	2000460c 	.word	0x2000460c
 8009c20:	20004af4 	.word	0x20004af4
 8009c24:	20004af0 	.word	0x20004af0
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c32:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <xTaskGetTickCount+0x1c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c38:	687b      	ldr	r3, [r7, #4]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20004ae4 	.word	0x20004ae4

08009c4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c52:	f001 feab 	bl	800b9ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009c5a:	4b04      	ldr	r3, [pc, #16]	@ (8009c6c <xTaskGetTickCountFromISR+0x20>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c60:	683b      	ldr	r3, [r7, #0]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20004ae4 	.word	0x20004ae4

08009c70 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	2338      	movs	r3, #56	@ 0x38
 8009c82:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009c84:	f7ff ff24 	bl	8009ad0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009c88:	4b3a      	ldr	r3, [pc, #232]	@ (8009d74 <uxTaskGetSystemState+0x104>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d368      	bcc.n	8009d64 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	1898      	adds	r0, r3, r2
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4a31      	ldr	r2, [pc, #196]	@ (8009d78 <uxTaskGetSystemState+0x108>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f000 fbb5 	bl	800a428 <prvListTasksWithinSingleList>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e2      	bne.n	8009c92 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	4a27      	ldr	r2, [pc, #156]	@ (8009d7c <uxTaskGetSystemState+0x10c>)
 8009cde:	6811      	ldr	r1, [r2, #0]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fba0 	bl	800a428 <prvListTasksWithinSingleList>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	4413      	add	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4413      	add	r3, r2
 8009d00:	4a1f      	ldr	r2, [pc, #124]	@ (8009d80 <uxTaskGetSystemState+0x110>)
 8009d02:	6811      	ldr	r1, [r2, #0]
 8009d04:	2202      	movs	r2, #2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fb8e 	bl	800a428 <prvListTasksWithinSingleList>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	4413      	add	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	4613      	mov	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	2204      	movs	r2, #4
 8009d26:	4917      	ldr	r1, [pc, #92]	@ (8009d84 <uxTaskGetSystemState+0x114>)
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fb7d 	bl	800a428 <prvListTasksWithinSingleList>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	461a      	mov	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	2203      	movs	r2, #3
 8009d48:	490f      	ldr	r1, [pc, #60]	@ (8009d88 <uxTaskGetSystemState+0x118>)
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fb6c 	bl	800a428 <prvListTasksWithinSingleList>
 8009d50:	4602      	mov	r2, r0
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	4413      	add	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8009d64:	f7ff fec2 	bl	8009aec <xTaskResumeAll>

		return uxTask;
 8009d68:	697b      	ldr	r3, [r7, #20]
	}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20004ae0 	.word	0x20004ae0
 8009d78:	20004610 	.word	0x20004610
 8009d7c:	20004a98 	.word	0x20004a98
 8009d80:	20004a9c 	.word	0x20004a9c
 8009d84:	20004ab4 	.word	0x20004ab4
 8009d88:	20004acc 	.word	0x20004acc

08009d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d96:	4b50      	ldr	r3, [pc, #320]	@ (8009ed8 <xTaskIncrementTick+0x14c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 808c 	bne.w	8009eb8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009da0:	4b4e      	ldr	r3, [pc, #312]	@ (8009edc <xTaskIncrementTick+0x150>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009da8:	4a4c      	ldr	r2, [pc, #304]	@ (8009edc <xTaskIncrementTick+0x150>)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d123      	bne.n	8009dfc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009db4:	4b4a      	ldr	r3, [pc, #296]	@ (8009ee0 <xTaskIncrementTick+0x154>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00d      	beq.n	8009dda <xTaskIncrementTick+0x4e>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc2:	b672      	cpsid	i
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	b662      	cpsie	i
 8009dd2:	603b      	str	r3, [r7, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xTaskIncrementTick+0x4a>
 8009dda:	4b41      	ldr	r3, [pc, #260]	@ (8009ee0 <xTaskIncrementTick+0x154>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	4b40      	ldr	r3, [pc, #256]	@ (8009ee4 <xTaskIncrementTick+0x158>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee0 <xTaskIncrementTick+0x154>)
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee4 <xTaskIncrementTick+0x158>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4b3e      	ldr	r3, [pc, #248]	@ (8009ee8 <xTaskIncrementTick+0x15c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ee8 <xTaskIncrementTick+0x15c>)
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	f000 fbb6 	bl	800a568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8009eec <xTaskIncrementTick+0x160>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d349      	bcc.n	8009e9a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e06:	4b36      	ldr	r3, [pc, #216]	@ (8009ee0 <xTaskIncrementTick+0x154>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e10:	4b36      	ldr	r3, [pc, #216]	@ (8009eec <xTaskIncrementTick+0x160>)
 8009e12:	f04f 32ff 	mov.w	r2, #4294967295
 8009e16:	601a      	str	r2, [r3, #0]
					break;
 8009e18:	e03f      	b.n	8009e9a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1a:	4b31      	ldr	r3, [pc, #196]	@ (8009ee0 <xTaskIncrementTick+0x154>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d203      	bcs.n	8009e3a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e32:	4a2e      	ldr	r2, [pc, #184]	@ (8009eec <xTaskIncrementTick+0x160>)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e38:	e02f      	b.n	8009e9a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe f904 	bl	800804c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	3318      	adds	r3, #24
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe f8fb 	bl	800804c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e5a:	4b25      	ldr	r3, [pc, #148]	@ (8009ef0 <xTaskIncrementTick+0x164>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d903      	bls.n	8009e6a <xTaskIncrementTick+0xde>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e66:	4a22      	ldr	r2, [pc, #136]	@ (8009ef0 <xTaskIncrementTick+0x164>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef4 <xTaskIncrementTick+0x168>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe f886 	bl	8007f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <xTaskIncrementTick+0x16c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d3b8      	bcc.n	8009e06 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e98:	e7b5      	b.n	8009e06 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e9a:	4b17      	ldr	r3, [pc, #92]	@ (8009ef8 <xTaskIncrementTick+0x16c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea0:	4914      	ldr	r1, [pc, #80]	@ (8009ef4 <xTaskIncrementTick+0x168>)
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	440b      	add	r3, r1
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d907      	bls.n	8009ec2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	e004      	b.n	8009ec2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009eb8:	4b10      	ldr	r3, [pc, #64]	@ (8009efc <xTaskIncrementTick+0x170>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8009efc <xTaskIncrementTick+0x170>)
 8009ec0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <xTaskIncrementTick+0x174>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ece:	697b      	ldr	r3, [r7, #20]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20004b08 	.word	0x20004b08
 8009edc:	20004ae4 	.word	0x20004ae4
 8009ee0:	20004a98 	.word	0x20004a98
 8009ee4:	20004a9c 	.word	0x20004a9c
 8009ee8:	20004af8 	.word	0x20004af8
 8009eec:	20004b00 	.word	0x20004b00
 8009ef0:	20004ae8 	.word	0x20004ae8
 8009ef4:	20004610 	.word	0x20004610
 8009ef8:	2000460c 	.word	0x2000460c
 8009efc:	20004af0 	.word	0x20004af0
 8009f00:	20004af4 	.word	0x20004af4

08009f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f0a:	4b29      	ldr	r3, [pc, #164]	@ (8009fb0 <vTaskSwitchContext+0xac>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f12:	4b28      	ldr	r3, [pc, #160]	@ (8009fb4 <vTaskSwitchContext+0xb0>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f18:	e044      	b.n	8009fa4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009f1a:	4b26      	ldr	r3, [pc, #152]	@ (8009fb4 <vTaskSwitchContext+0xb0>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f20:	4b25      	ldr	r3, [pc, #148]	@ (8009fb8 <vTaskSwitchContext+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	e013      	b.n	8009f50 <vTaskSwitchContext+0x4c>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10d      	bne.n	8009f4a <vTaskSwitchContext+0x46>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	b672      	cpsid	i
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	b662      	cpsie	i
 8009f42:	607b      	str	r3, [r7, #4]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <vTaskSwitchContext+0x42>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	491a      	ldr	r1, [pc, #104]	@ (8009fbc <vTaskSwitchContext+0xb8>)
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0e1      	beq.n	8009f28 <vTaskSwitchContext+0x24>
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4a13      	ldr	r2, [pc, #76]	@ (8009fbc <vTaskSwitchContext+0xb8>)
 8009f70:	4413      	add	r3, r2
 8009f72:	60bb      	str	r3, [r7, #8]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	605a      	str	r2, [r3, #4]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	3308      	adds	r3, #8
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d104      	bne.n	8009f94 <vTaskSwitchContext+0x90>
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	605a      	str	r2, [r3, #4]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	4a09      	ldr	r2, [pc, #36]	@ (8009fc0 <vTaskSwitchContext+0xbc>)
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	4a06      	ldr	r2, [pc, #24]	@ (8009fb8 <vTaskSwitchContext+0xb4>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6013      	str	r3, [r2, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	20004b08 	.word	0x20004b08
 8009fb4:	20004af4 	.word	0x20004af4
 8009fb8:	20004ae8 	.word	0x20004ae8
 8009fbc:	20004610 	.word	0x20004610
 8009fc0:	2000460c 	.word	0x2000460c

08009fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd8:	b672      	cpsid	i
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	b662      	cpsie	i
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ff0:	4b07      	ldr	r3, [pc, #28]	@ (800a010 <vTaskPlaceOnEventList+0x4c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3318      	adds	r3, #24
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fd ffee 	bl	8007fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ffe:	2101      	movs	r1, #1
 800a000:	6838      	ldr	r0, [r7, #0]
 800a002:	f000 ff23 	bl	800ae4c <prvAddCurrentTaskToDelayedList>
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	2000460c 	.word	0x2000460c

0800a014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10d      	bne.n	800a042 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02a:	b672      	cpsid	i
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	b662      	cpsie	i
 800a03a:	617b      	str	r3, [r7, #20]
}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	e7fd      	b.n	800a03e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a042:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <vTaskPlaceOnEventListRestricted+0x58>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3318      	adds	r3, #24
 800a048:	4619      	mov	r1, r3
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7fd ffa1 	bl	8007f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	68b8      	ldr	r0, [r7, #8]
 800a060:	f000 fef4 	bl	800ae4c <prvAddCurrentTaskToDelayedList>
	}
 800a064:	bf00      	nop
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	2000460c 	.word	0x2000460c

0800a070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10d      	bne.n	800a0a2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08a:	b672      	cpsid	i
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	b662      	cpsie	i
 800a09a:	60fb      	str	r3, [r7, #12]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd ffd0 	bl	800804c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a124 <xTaskRemoveFromEventList+0xb4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d11d      	bne.n	800a0f0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fd ffc7 	bl	800804c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c2:	4b19      	ldr	r3, [pc, #100]	@ (800a128 <xTaskRemoveFromEventList+0xb8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d903      	bls.n	800a0d2 <xTaskRemoveFromEventList+0x62>
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ce:	4a16      	ldr	r2, [pc, #88]	@ (800a128 <xTaskRemoveFromEventList+0xb8>)
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4a13      	ldr	r2, [pc, #76]	@ (800a12c <xTaskRemoveFromEventList+0xbc>)
 800a0e0:	441a      	add	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7fd ff52 	bl	8007f92 <vListInsertEnd>
 800a0ee:	e005      	b.n	800a0fc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	3318      	adds	r3, #24
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	480e      	ldr	r0, [pc, #56]	@ (800a130 <xTaskRemoveFromEventList+0xc0>)
 800a0f8:	f7fd ff4b 	bl	8007f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a100:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <xTaskRemoveFromEventList+0xc4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a106:	429a      	cmp	r2, r3
 800a108:	d905      	bls.n	800a116 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a10a:	2301      	movs	r3, #1
 800a10c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a10e:	4b0a      	ldr	r3, [pc, #40]	@ (800a138 <xTaskRemoveFromEventList+0xc8>)
 800a110:	2201      	movs	r2, #1
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e001      	b.n	800a11a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a11a:	697b      	ldr	r3, [r7, #20]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20004b08 	.word	0x20004b08
 800a128:	20004ae8 	.word	0x20004ae8
 800a12c:	20004610 	.word	0x20004610
 800a130:	20004aa0 	.word	0x20004aa0
 800a134:	2000460c 	.word	0x2000460c
 800a138:	20004af4 	.word	0x20004af4

0800a13c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a144:	4b06      	ldr	r3, [pc, #24]	@ (800a160 <vTaskInternalSetTimeOutState+0x24>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <vTaskInternalSetTimeOutState+0x28>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	605a      	str	r2, [r3, #4]
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	20004af8 	.word	0x20004af8
 800a164:	20004ae4 	.word	0x20004ae4

0800a168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10d      	bne.n	800a194 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	b672      	cpsid	i
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	b662      	cpsie	i
 800a18c:	613b      	str	r3, [r7, #16]
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10d      	bne.n	800a1b6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19e:	b672      	cpsid	i
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	b662      	cpsie	i
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800a1b6:	f001 fb11 	bl	800b7dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a230 <xTaskCheckForTimeOut+0xc8>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d2:	d102      	bne.n	800a1da <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e023      	b.n	800a222 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b15      	ldr	r3, [pc, #84]	@ (800a234 <xTaskCheckForTimeOut+0xcc>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d007      	beq.n	800a1f6 <xTaskCheckForTimeOut+0x8e>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d302      	bcc.n	800a1f6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	61fb      	str	r3, [r7, #28]
 800a1f4:	e015      	b.n	800a222 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d20b      	bcs.n	800a218 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff ff95 	bl	800a13c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	e004      	b.n	800a222 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a21e:	2301      	movs	r3, #1
 800a220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a222:	f001 fb11 	bl	800b848 <vPortExitCritical>

	return xReturn;
 800a226:	69fb      	ldr	r3, [r7, #28]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20004ae4 	.word	0x20004ae4
 800a234:	20004af8 	.word	0x20004af8

0800a238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a23c:	4b03      	ldr	r3, [pc, #12]	@ (800a24c <vTaskMissedYield+0x14>)
 800a23e:	2201      	movs	r2, #1
 800a240:	601a      	str	r2, [r3, #0]
}
 800a242:	bf00      	nop
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	20004af4 	.word	0x20004af4

0800a250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a258:	f000 f852 	bl	800a300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a25c:	4b06      	ldr	r3, [pc, #24]	@ (800a278 <prvIdleTask+0x28>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d9f9      	bls.n	800a258 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a264:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <prvIdleTask+0x2c>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a274:	e7f0      	b.n	800a258 <prvIdleTask+0x8>
 800a276:	bf00      	nop
 800a278:	20004610 	.word	0x20004610
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a286:	2300      	movs	r3, #0
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	e00c      	b.n	800a2a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4a12      	ldr	r2, [pc, #72]	@ (800a2e0 <prvInitialiseTaskLists+0x60>)
 800a298:	4413      	add	r3, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fd fe4c 	bl	8007f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	607b      	str	r3, [r7, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b37      	cmp	r3, #55	@ 0x37
 800a2aa:	d9ef      	bls.n	800a28c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2ac:	480d      	ldr	r0, [pc, #52]	@ (800a2e4 <prvInitialiseTaskLists+0x64>)
 800a2ae:	f7fd fe43 	bl	8007f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2b2:	480d      	ldr	r0, [pc, #52]	@ (800a2e8 <prvInitialiseTaskLists+0x68>)
 800a2b4:	f7fd fe40 	bl	8007f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2b8:	480c      	ldr	r0, [pc, #48]	@ (800a2ec <prvInitialiseTaskLists+0x6c>)
 800a2ba:	f7fd fe3d 	bl	8007f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2be:	480c      	ldr	r0, [pc, #48]	@ (800a2f0 <prvInitialiseTaskLists+0x70>)
 800a2c0:	f7fd fe3a 	bl	8007f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2c4:	480b      	ldr	r0, [pc, #44]	@ (800a2f4 <prvInitialiseTaskLists+0x74>)
 800a2c6:	f7fd fe37 	bl	8007f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <prvInitialiseTaskLists+0x78>)
 800a2cc:	4a05      	ldr	r2, [pc, #20]	@ (800a2e4 <prvInitialiseTaskLists+0x64>)
 800a2ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <prvInitialiseTaskLists+0x7c>)
 800a2d2:	4a05      	ldr	r2, [pc, #20]	@ (800a2e8 <prvInitialiseTaskLists+0x68>)
 800a2d4:	601a      	str	r2, [r3, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20004610 	.word	0x20004610
 800a2e4:	20004a70 	.word	0x20004a70
 800a2e8:	20004a84 	.word	0x20004a84
 800a2ec:	20004aa0 	.word	0x20004aa0
 800a2f0:	20004ab4 	.word	0x20004ab4
 800a2f4:	20004acc 	.word	0x20004acc
 800a2f8:	20004a98 	.word	0x20004a98
 800a2fc:	20004a9c 	.word	0x20004a9c

0800a300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a306:	e019      	b.n	800a33c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a308:	f001 fa68 	bl	800b7dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30c:	4b10      	ldr	r3, [pc, #64]	@ (800a350 <prvCheckTasksWaitingTermination+0x50>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fd fe97 	bl	800804c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a31e:	4b0d      	ldr	r3, [pc, #52]	@ (800a354 <prvCheckTasksWaitingTermination+0x54>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3b01      	subs	r3, #1
 800a324:	4a0b      	ldr	r2, [pc, #44]	@ (800a354 <prvCheckTasksWaitingTermination+0x54>)
 800a326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a328:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <prvCheckTasksWaitingTermination+0x58>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	4a0a      	ldr	r2, [pc, #40]	@ (800a358 <prvCheckTasksWaitingTermination+0x58>)
 800a330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a332:	f001 fa89 	bl	800b848 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f8e4 	bl	800a504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a33c:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <prvCheckTasksWaitingTermination+0x58>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e1      	bne.n	800a308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20004ab4 	.word	0x20004ab4
 800a354:	20004ae0 	.word	0x20004ae0
 800a358:	20004ac8 	.word	0x20004ac8

0800a35c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <vTaskGetInfo+0x1a>
 800a370:	4b2c      	ldr	r3, [pc, #176]	@ (800a424 <vTaskGetInfo+0xc8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	e000      	b.n	800a378 <vTaskGetInfo+0x1c>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d01a      	beq.n	800a3ec <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a3b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a424 <vTaskGetInfo+0xc8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d103      	bne.n	800a3c8 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	731a      	strb	r2, [r3, #12]
 800a3c6:	e018      	b.n	800a3fa <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d112      	bne.n	800a3fa <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a3d4:	f7ff fb7c 	bl	8009ad0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a3e6:	f7ff fb81 	bl	8009aec <xTaskResumeAll>
 800a3ea:	e006      	b.n	800a3fa <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a3ec:	6978      	ldr	r0, [r7, #20]
 800a3ee:	f7ff fa99 	bl	8009924 <eTaskGetState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a404:	4618      	mov	r0, r3
 800a406:	f000 f861 	bl	800a4cc <prvTaskCheckFreeStackSpace>
 800a40a:	4603      	mov	r3, r0
 800a40c:	461a      	mov	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a412:	e002      	b.n	800a41a <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	841a      	strh	r2, [r3, #32]
	}
 800a41a:	bf00      	nop
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2000460c 	.word	0x2000460c

0800a428 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	@ 0x28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d03f      	beq.n	800a4c2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	623b      	str	r3, [r7, #32]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	605a      	str	r2, [r3, #4]
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	3308      	adds	r3, #8
 800a458:	429a      	cmp	r2, r3
 800a45a:	d104      	bne.n	800a466 <prvListTasksWithinSingleList+0x3e>
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	605a      	str	r2, [r3, #4]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	3308      	adds	r3, #8
 800a484:	429a      	cmp	r2, r3
 800a486:	d104      	bne.n	800a492 <prvListTasksWithinSingleList+0x6a>
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	605a      	str	r2, [r3, #4]
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49c:	4613      	mov	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1899      	adds	r1, r3, r2
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	6978      	ldr	r0, [r7, #20]
 800a4b0:	f7ff ff54 	bl	800a35c <vTaskGetInfo>
				uxTask++;
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d1d5      	bne.n	800a46e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3728      	adds	r7, #40	@ 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4d8:	e005      	b.n	800a4e6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2ba5      	cmp	r3, #165	@ 0xa5
 800a4ec:	d0f5      	beq.n	800a4da <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	089b      	lsrs	r3, r3, #2
 800a4f2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	b29b      	uxth	r3, r3
	}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a512:	2b00      	cmp	r3, #0
 800a514:	d108      	bne.n	800a528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 fb5a 	bl	800bbd4 <vPortFree>
				vPortFree( pxTCB );
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fb57 	bl	800bbd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a526:	e01b      	b.n	800a560 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d103      	bne.n	800a53a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fb4e 	bl	800bbd4 <vPortFree>
	}
 800a538:	e012      	b.n	800a560 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a540:	2b02      	cmp	r3, #2
 800a542:	d00d      	beq.n	800a560 <prvDeleteTCB+0x5c>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a548:	b672      	cpsid	i
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	b662      	cpsie	i
 800a558:	60fb      	str	r3, [r7, #12]
}
 800a55a:	bf00      	nop
 800a55c:	bf00      	nop
 800a55e:	e7fd      	b.n	800a55c <prvDeleteTCB+0x58>
	}
 800a560:	bf00      	nop
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a56e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a0 <prvResetNextTaskUnblockTime+0x38>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a578:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a57a:	f04f 32ff 	mov.w	r2, #4294967295
 800a57e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a580:	e008      	b.n	800a594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a582:	4b07      	ldr	r3, [pc, #28]	@ (800a5a0 <prvResetNextTaskUnblockTime+0x38>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	4a04      	ldr	r2, [pc, #16]	@ (800a5a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a592:	6013      	str	r3, [r2, #0]
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	20004a98 	.word	0x20004a98
 800a5a4:	20004b00 	.word	0x20004b00

0800a5a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <xTaskGetCurrentTaskHandle+0x1c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a5b4:	687b      	ldr	r3, [r7, #4]
	}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	2000460c 	.word	0x2000460c

0800a5c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a5fc <xTaskGetSchedulerState+0x34>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	607b      	str	r3, [r7, #4]
 800a5da:	e008      	b.n	800a5ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5dc:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <xTaskGetSchedulerState+0x38>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d102      	bne.n	800a5ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	607b      	str	r3, [r7, #4]
 800a5e8:	e001      	b.n	800a5ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5ee:	687b      	ldr	r3, [r7, #4]
	}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	20004aec 	.word	0x20004aec
 800a600:	20004b08 	.word	0x20004b08

0800a604 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d051      	beq.n	800a6be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61e:	4b2a      	ldr	r3, [pc, #168]	@ (800a6c8 <xTaskPriorityInherit+0xc4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a624:	429a      	cmp	r2, r3
 800a626:	d241      	bcs.n	800a6ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db06      	blt.n	800a63e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a630:	4b25      	ldr	r3, [pc, #148]	@ (800a6c8 <xTaskPriorityInherit+0xc4>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6959      	ldr	r1, [r3, #20]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6cc <xTaskPriorityInherit+0xc8>)
 800a650:	4413      	add	r3, r2
 800a652:	4299      	cmp	r1, r3
 800a654:	d122      	bne.n	800a69c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	3304      	adds	r3, #4
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd fcf6 	bl	800804c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a660:	4b19      	ldr	r3, [pc, #100]	@ (800a6c8 <xTaskPriorityInherit+0xc4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4b18      	ldr	r3, [pc, #96]	@ (800a6d0 <xTaskPriorityInherit+0xcc>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d903      	bls.n	800a67e <xTaskPriorityInherit+0x7a>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67a:	4a15      	ldr	r2, [pc, #84]	@ (800a6d0 <xTaskPriorityInherit+0xcc>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a10      	ldr	r2, [pc, #64]	@ (800a6cc <xTaskPriorityInherit+0xc8>)
 800a68c:	441a      	add	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	3304      	adds	r3, #4
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7fd fc7c 	bl	8007f92 <vListInsertEnd>
 800a69a:	e004      	b.n	800a6a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a69c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c8 <xTaskPriorityInherit+0xc4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e008      	b.n	800a6be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6b0:	4b05      	ldr	r3, [pc, #20]	@ (800a6c8 <xTaskPriorityInherit+0xc4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d201      	bcs.n	800a6be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6be:	68fb      	ldr	r3, [r7, #12]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	2000460c 	.word	0x2000460c
 800a6cc:	20004610 	.word	0x20004610
 800a6d0:	20004ae8 	.word	0x20004ae8

0800a6d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d05c      	beq.n	800a7a4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6ea:	4b31      	ldr	r3, [pc, #196]	@ (800a7b0 <xTaskPriorityDisinherit+0xdc>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d00d      	beq.n	800a710 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f8:	b672      	cpsid	i
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	b662      	cpsie	i
 800a708:	60fb      	str	r3, [r7, #12]
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	e7fd      	b.n	800a70c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10d      	bne.n	800a734 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	b672      	cpsid	i
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	b662      	cpsie	i
 800a72c:	60bb      	str	r3, [r7, #8]
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a738:	1e5a      	subs	r2, r3, #1
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a746:	429a      	cmp	r2, r3
 800a748:	d02c      	beq.n	800a7a4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d128      	bne.n	800a7a4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3304      	adds	r3, #4
 800a756:	4618      	mov	r0, r3
 800a758:	f7fd fc78 	bl	800804c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a768:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a774:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b4 <xTaskPriorityDisinherit+0xe0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d903      	bls.n	800a784 <xTaskPriorityDisinherit+0xb0>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a780:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b4 <xTaskPriorityDisinherit+0xe0>)
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4a09      	ldr	r2, [pc, #36]	@ (800a7b8 <xTaskPriorityDisinherit+0xe4>)
 800a792:	441a      	add	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3304      	adds	r3, #4
 800a798:	4619      	mov	r1, r3
 800a79a:	4610      	mov	r0, r2
 800a79c:	f7fd fbf9 	bl	8007f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7a4:	697b      	ldr	r3, [r7, #20]
	}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	2000460c 	.word	0x2000460c
 800a7b4:	20004ae8 	.word	0x20004ae8
 800a7b8:	20004610 	.word	0x20004610

0800a7bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d070      	beq.n	800a8b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10d      	bne.n	800a7f8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e0:	b672      	cpsid	i
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	b662      	cpsie	i
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d902      	bls.n	800a808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	61fb      	str	r3, [r7, #28]
 800a806:	e002      	b.n	800a80e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	429a      	cmp	r2, r3
 800a816:	d04e      	beq.n	800a8b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d149      	bne.n	800a8b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a822:	4b27      	ldr	r3, [pc, #156]	@ (800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d10d      	bne.n	800a848 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a830:	b672      	cpsid	i
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	b662      	cpsie	i
 800a840:	60bb      	str	r3, [r7, #8]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	69fa      	ldr	r2, [r7, #28]
 800a852:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	db04      	blt.n	800a866 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	6959      	ldr	r1, [r3, #20]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4a13      	ldr	r2, [pc, #76]	@ (800a8c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a876:	4413      	add	r3, r2
 800a878:	4299      	cmp	r1, r3
 800a87a:	d11c      	bne.n	800a8b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	3304      	adds	r3, #4
 800a880:	4618      	mov	r0, r3
 800a882:	f7fd fbe3 	bl	800804c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a88a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d903      	bls.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a896:	4a0c      	ldr	r2, [pc, #48]	@ (800a8c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a07      	ldr	r2, [pc, #28]	@ (800a8c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a8a8:	441a      	add	r2, r3
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fd fb6e 	bl	8007f92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8b6:	bf00      	nop
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	2000460c 	.word	0x2000460c
 800a8c4:	20004610 	.word	0x20004610
 800a8c8:	20004ae8 	.word	0x20004ae8

0800a8cc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f00f fcb2 	bl	801a242 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7f5 fcfe 	bl	80002e0 <strlen>
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	e007      	b.n	800a8f8 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b0e      	cmp	r3, #14
 800a8fc:	d9f4      	bls.n	800a8e8 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
	}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800a918:	b590      	push	{r4, r7, lr}
 800a91a:	b089      	sub	sp, #36	@ 0x24
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800a926:	4b45      	ldr	r3, [pc, #276]	@ (800aa3c <vTaskList+0x124>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a92c:	4b43      	ldr	r3, [pc, #268]	@ (800aa3c <vTaskList+0x124>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	4613      	mov	r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 f87d 	bl	800ba38 <pvPortMalloc>
 800a93e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d076      	beq.n	800aa34 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800a946:	2200      	movs	r2, #0
 800a948:	68f9      	ldr	r1, [r7, #12]
 800a94a:	68b8      	ldr	r0, [r7, #8]
 800a94c:	f7ff f990 	bl	8009c70 <uxTaskGetSystemState>
 800a950:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800a952:	2300      	movs	r3, #0
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e066      	b.n	800aa26 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4613      	mov	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	461a      	mov	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4413      	add	r3, r2
 800a968:	7b1b      	ldrb	r3, [r3, #12]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d81b      	bhi.n	800a9a6 <vTaskList+0x8e>
 800a96e:	a201      	add	r2, pc, #4	@ (adr r2, 800a974 <vTaskList+0x5c>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800a989 	.word	0x0800a989
 800a978:	0800a98f 	.word	0x0800a98f
 800a97c:	0800a995 	.word	0x0800a995
 800a980:	0800a99b 	.word	0x0800a99b
 800a984:	0800a9a1 	.word	0x0800a9a1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800a988:	2358      	movs	r3, #88	@ 0x58
 800a98a:	74fb      	strb	r3, [r7, #19]
										break;
 800a98c:	e00e      	b.n	800a9ac <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800a98e:	2352      	movs	r3, #82	@ 0x52
 800a990:	74fb      	strb	r3, [r7, #19]
										break;
 800a992:	e00b      	b.n	800a9ac <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800a994:	2342      	movs	r3, #66	@ 0x42
 800a996:	74fb      	strb	r3, [r7, #19]
										break;
 800a998:	e008      	b.n	800a9ac <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800a99a:	2353      	movs	r3, #83	@ 0x53
 800a99c:	74fb      	strb	r3, [r7, #19]
										break;
 800a99e:	e005      	b.n	800a9ac <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800a9a0:	2344      	movs	r3, #68	@ 0x44
 800a9a2:	74fb      	strb	r3, [r7, #19]
										break;
 800a9a4:	e002      	b.n	800a9ac <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	74fb      	strb	r3, [r7, #19]
										break;
 800a9aa:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff83 	bl	800a8cc <prvWriteNameToBuffer>
 800a9c6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a9c8:	7cf9      	ldrb	r1, [r7, #19]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	4413      	add	r3, r2
 800a9da:	6918      	ldr	r0, [r3, #16]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	8c1b      	ldrh	r3, [r3, #32]
 800a9ee:	461c      	mov	r4, r3
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4413      	add	r3, r2
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	9400      	str	r4, [sp, #0]
 800aa06:	4603      	mov	r3, r0
 800aa08:	460a      	mov	r2, r1
 800aa0a:	490d      	ldr	r1, [pc, #52]	@ (800aa40 <vTaskList+0x128>)
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f00f fa45 	bl	8019e9c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7f5 fc64 	bl	80002e0 <strlen>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	3301      	adds	r3, #1
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d394      	bcc.n	800a958 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	f001 f8d0 	bl	800bbd4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa34:	bf00      	nop
 800aa36:	371c      	adds	r7, #28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd90      	pop	{r4, r7, pc}
 800aa3c:	20004ae0 	.word	0x20004ae0
 800aa40:	0801c578 	.word	0x0801c578

0800aa44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aa48:	4b07      	ldr	r3, [pc, #28]	@ (800aa68 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d004      	beq.n	800aa5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aa50:	4b05      	ldr	r3, [pc, #20]	@ (800aa68 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa56:	3201      	adds	r2, #1
 800aa58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aa5a:	4b03      	ldr	r3, [pc, #12]	@ (800aa68 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
	}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	2000460c 	.word	0x2000460c

0800aa6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800aa76:	f000 feb1 	bl	800b7dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d113      	bne.n	800aaac <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800aa84:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00b      	beq.n	800aaac <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa94:	2101      	movs	r1, #1
 800aa96:	6838      	ldr	r0, [r7, #0]
 800aa98:	f000 f9d8 	bl	800ae4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800aa9c:	4b16      	ldr	r3, [pc, #88]	@ (800aaf8 <ulTaskNotifyTake+0x8c>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aaac:	f000 fecc 	bl	800b848 <vPortExitCritical>

		taskENTER_CRITICAL();
 800aab0:	f000 fe94 	bl	800b7dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800aab4:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00c      	beq.n	800aadc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800aac8:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2200      	movs	r2, #0
 800aace:	655a      	str	r2, [r3, #84]	@ 0x54
 800aad0:	e004      	b.n	800aadc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800aad2:	4b08      	ldr	r3, [pc, #32]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	3a01      	subs	r2, #1
 800aada:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aadc:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <ulTaskNotifyTake+0x88>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800aae6:	f000 feaf 	bl	800b848 <vPortExitCritical>

		return ulReturn;
 800aaea:	68fb      	ldr	r3, [r7, #12]
	}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	2000460c 	.word	0x2000460c
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08a      	sub	sp, #40	@ 0x28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <xTaskGenericNotify+0x36>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	b672      	cpsid	i
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	b662      	cpsie	i
 800ab2a:	61bb      	str	r3, [r7, #24]
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ab36:	f000 fe51 	bl	800b7dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ab4e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d827      	bhi.n	800abae <xTaskGenericNotify+0xb2>
 800ab5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <xTaskGenericNotify+0x68>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800abd5 	.word	0x0800abd5
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800ab87 	.word	0x0800ab87
 800ab70:	0800ab93 	.word	0x0800ab93
 800ab74:	0800ab9b 	.word	0x0800ab9b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ab84:	e029      	b.n	800abda <xTaskGenericNotify+0xde>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ab90:	e023      	b.n	800abda <xTaskGenericNotify+0xde>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ab98:	e01f      	b.n	800abda <xTaskGenericNotify+0xde>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab9a:	7ffb      	ldrb	r3, [r7, #31]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d003      	beq.n	800aba8 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aba0:	6a3b      	ldr	r3, [r7, #32]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aba6:	e018      	b.n	800abda <xTaskGenericNotify+0xde>
						xReturn = pdFAIL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800abac:	e015      	b.n	800abda <xTaskGenericNotify+0xde>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb6:	d00f      	beq.n	800abd8 <xTaskGenericNotify+0xdc>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbc:	b672      	cpsid	i
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	b662      	cpsie	i
 800abcc:	617b      	str	r3, [r7, #20]
}
 800abce:	bf00      	nop
 800abd0:	bf00      	nop
 800abd2:	e7fd      	b.n	800abd0 <xTaskGenericNotify+0xd4>
					break;
 800abd4:	bf00      	nop
 800abd6:	e000      	b.n	800abda <xTaskGenericNotify+0xde>

					break;
 800abd8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800abda:	7ffb      	ldrb	r3, [r7, #31]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d13d      	bne.n	800ac5c <xTaskGenericNotify+0x160>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fd fa31 	bl	800804c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abee:	4b1f      	ldr	r3, [pc, #124]	@ (800ac6c <xTaskGenericNotify+0x170>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d903      	bls.n	800abfe <xTaskGenericNotify+0x102>
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfa:	4a1c      	ldr	r2, [pc, #112]	@ (800ac6c <xTaskGenericNotify+0x170>)
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4a19      	ldr	r2, [pc, #100]	@ (800ac70 <xTaskGenericNotify+0x174>)
 800ac0c:	441a      	add	r2, r3
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fd f9bc 	bl	8007f92 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00d      	beq.n	800ac3e <xTaskGenericNotify+0x142>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac26:	b672      	cpsid	i
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	b662      	cpsie	i
 800ac36:	613b      	str	r3, [r7, #16]
}
 800ac38:	bf00      	nop
 800ac3a:	bf00      	nop
 800ac3c:	e7fd      	b.n	800ac3a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac42:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <xTaskGenericNotify+0x178>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d907      	bls.n	800ac5c <xTaskGenericNotify+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac78 <xTaskGenericNotify+0x17c>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ac5c:	f000 fdf4 	bl	800b848 <vPortExitCritical>

		return xReturn;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3728      	adds	r7, #40	@ 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20004ae8 	.word	0x20004ae8
 800ac70:	20004610 	.word	0x20004610
 800ac74:	2000460c 	.word	0x2000460c
 800ac78:	e000ed04 	.word	0xe000ed04

0800ac7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	@ 0x38
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10d      	bne.n	800acb2 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9a:	b672      	cpsid	i
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	b662      	cpsie	i
 800acaa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	e7fd      	b.n	800acae <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb2:	f000 fe7b 	bl	800b9ac <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800acba:	f3ef 8211 	mrs	r2, BASEPRI
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	b672      	cpsid	i
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	b662      	cpsie	i
 800acd2:	623a      	str	r2, [r7, #32]
 800acd4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800acd6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800acee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	2202      	movs	r2, #2
 800acf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	d829      	bhi.n	800ad54 <xTaskGenericNotifyFromISR+0xd8>
 800ad00:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <xTaskGenericNotifyFromISR+0x8c>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad7b 	.word	0x0800ad7b
 800ad0c:	0800ad1d 	.word	0x0800ad1d
 800ad10:	0800ad2b 	.word	0x0800ad2b
 800ad14:	0800ad37 	.word	0x0800ad37
 800ad18:	0800ad3f 	.word	0x0800ad3f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	431a      	orrs	r2, r3
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ad28:	e02a      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ad34:	e024      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ad3c:	e020      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ad3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d003      	beq.n	800ad4e <xTaskGenericNotifyFromISR+0xd2>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ad4c:	e018      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800ad52:	e015      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d00f      	beq.n	800ad7e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	b672      	cpsid	i
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	b662      	cpsie	i
 800ad72:	61bb      	str	r3, [r7, #24]
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	e7fd      	b.n	800ad76 <xTaskGenericNotifyFromISR+0xfa>
					break;
 800ad7a:	bf00      	nop
 800ad7c:	e000      	b.n	800ad80 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ad7e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ad80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d149      	bne.n	800ae1c <xTaskGenericNotifyFromISR+0x1a0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00d      	beq.n	800adac <xTaskGenericNotifyFromISR+0x130>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad94:	b672      	cpsid	i
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	b662      	cpsie	i
 800ada4:	617b      	str	r3, [r7, #20]
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	e7fd      	b.n	800ada8 <xTaskGenericNotifyFromISR+0x12c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adac:	4b21      	ldr	r3, [pc, #132]	@ (800ae34 <xTaskGenericNotifyFromISR+0x1b8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d11d      	bne.n	800adf0 <xTaskGenericNotifyFromISR+0x174>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb6:	3304      	adds	r3, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fd f947 	bl	800804c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae38 <xTaskGenericNotifyFromISR+0x1bc>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d903      	bls.n	800add2 <xTaskGenericNotifyFromISR+0x156>
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	4a1a      	ldr	r2, [pc, #104]	@ (800ae38 <xTaskGenericNotifyFromISR+0x1bc>)
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4a17      	ldr	r2, [pc, #92]	@ (800ae3c <xTaskGenericNotifyFromISR+0x1c0>)
 800ade0:	441a      	add	r2, r3
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	3304      	adds	r3, #4
 800ade6:	4619      	mov	r1, r3
 800ade8:	4610      	mov	r0, r2
 800adea:	f7fd f8d2 	bl	8007f92 <vListInsertEnd>
 800adee:	e005      	b.n	800adfc <xTaskGenericNotifyFromISR+0x180>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800adf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf2:	3318      	adds	r3, #24
 800adf4:	4619      	mov	r1, r3
 800adf6:	4812      	ldr	r0, [pc, #72]	@ (800ae40 <xTaskGenericNotifyFromISR+0x1c4>)
 800adf8:	f7fd f8cb 	bl	8007f92 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae00:	4b10      	ldr	r3, [pc, #64]	@ (800ae44 <xTaskGenericNotifyFromISR+0x1c8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d908      	bls.n	800ae1c <xTaskGenericNotifyFromISR+0x1a0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <xTaskGenericNotifyFromISR+0x19a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ae10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ae16:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <xTaskGenericNotifyFromISR+0x1cc>)
 800ae18:	2201      	movs	r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f383 8811 	msr	BASEPRI, r3
}
 800ae26:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ae28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3738      	adds	r7, #56	@ 0x38
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20004b08 	.word	0x20004b08
 800ae38:	20004ae8 	.word	0x20004ae8
 800ae3c:	20004610 	.word	0x20004610
 800ae40:	20004aa0 	.word	0x20004aa0
 800ae44:	2000460c 	.word	0x2000460c
 800ae48:	20004af4 	.word	0x20004af4

0800ae4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae56:	4b21      	ldr	r3, [pc, #132]	@ (800aedc <prvAddCurrentTaskToDelayedList+0x90>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae5c:	4b20      	ldr	r3, [pc, #128]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd f8f2 	bl	800804c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6e:	d10a      	bne.n	800ae86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae76:	4b1a      	ldr	r3, [pc, #104]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4819      	ldr	r0, [pc, #100]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae80:	f7fd f887 	bl	8007f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae84:	e026      	b.n	800aed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae8e:	4b14      	ldr	r3, [pc, #80]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d209      	bcs.n	800aeb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae9e:	4b12      	ldr	r3, [pc, #72]	@ (800aee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b0f      	ldr	r3, [pc, #60]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3304      	adds	r3, #4
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4610      	mov	r0, r2
 800aeac:	f7fd f895 	bl	8007fda <vListInsert>
}
 800aeb0:	e010      	b.n	800aed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	@ (800aeec <prvAddCurrentTaskToDelayedList+0xa0>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	4b0a      	ldr	r3, [pc, #40]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fd f88b 	bl	8007fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d202      	bcs.n	800aed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aece:	4a08      	ldr	r2, [pc, #32]	@ (800aef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	6013      	str	r3, [r2, #0]
}
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20004ae4 	.word	0x20004ae4
 800aee0:	2000460c 	.word	0x2000460c
 800aee4:	20004acc 	.word	0x20004acc
 800aee8:	20004a9c 	.word	0x20004a9c
 800aeec:	20004a98 	.word	0x20004a98
 800aef0:	20004b00 	.word	0x20004b00

0800aef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	@ 0x28
 800aef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aefe:	f000 fb21 	bl	800b544 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af02:	4b1e      	ldr	r3, [pc, #120]	@ (800af7c <xTimerCreateTimerTask+0x88>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d021      	beq.n	800af4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af0e:	2300      	movs	r3, #0
 800af10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af12:	1d3a      	adds	r2, r7, #4
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	f107 030c 	add.w	r3, r7, #12
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fc fff1 	bl	8007f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	9202      	str	r2, [sp, #8]
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	2302      	movs	r3, #2
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	2300      	movs	r3, #0
 800af32:	460a      	mov	r2, r1
 800af34:	4912      	ldr	r1, [pc, #72]	@ (800af80 <xTimerCreateTimerTask+0x8c>)
 800af36:	4813      	ldr	r0, [pc, #76]	@ (800af84 <xTimerCreateTimerTask+0x90>)
 800af38:	f7fe fb0e 	bl	8009558 <xTaskCreateStatic>
 800af3c:	4603      	mov	r3, r0
 800af3e:	4a12      	ldr	r2, [pc, #72]	@ (800af88 <xTimerCreateTimerTask+0x94>)
 800af40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af42:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <xTimerCreateTimerTask+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af4a:	2301      	movs	r3, #1
 800af4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10d      	bne.n	800af70 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	b672      	cpsid	i
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	b662      	cpsie	i
 800af68:	613b      	str	r3, [r7, #16]
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800af70:	697b      	ldr	r3, [r7, #20]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20004b3c 	.word	0x20004b3c
 800af80:	0801c588 	.word	0x0801c588
 800af84:	0800b0cd 	.word	0x0800b0cd
 800af88:	20004b40 	.word	0x20004b40

0800af8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	@ 0x28
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10d      	bne.n	800afc0 <xTimerGenericCommand+0x34>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	b672      	cpsid	i
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	b662      	cpsie	i
 800afb8:	623b      	str	r3, [r7, #32]
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afc0:	4b19      	ldr	r3, [pc, #100]	@ (800b028 <xTimerGenericCommand+0x9c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d02a      	beq.n	800b01e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	dc18      	bgt.n	800b00c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afda:	f7ff faf5 	bl	800a5c8 <xTaskGetSchedulerState>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d109      	bne.n	800aff8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afe4:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <xTimerGenericCommand+0x9c>)
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	f107 0110 	add.w	r1, r7, #16
 800afec:	2300      	movs	r3, #0
 800afee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff0:	f7fd fae2 	bl	80085b8 <xQueueGenericSend>
 800aff4:	6278      	str	r0, [r7, #36]	@ 0x24
 800aff6:	e012      	b.n	800b01e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aff8:	4b0b      	ldr	r3, [pc, #44]	@ (800b028 <xTimerGenericCommand+0x9c>)
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	f107 0110 	add.w	r1, r7, #16
 800b000:	2300      	movs	r3, #0
 800b002:	2200      	movs	r2, #0
 800b004:	f7fd fad8 	bl	80085b8 <xQueueGenericSend>
 800b008:	6278      	str	r0, [r7, #36]	@ 0x24
 800b00a:	e008      	b.n	800b01e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b00c:	4b06      	ldr	r3, [pc, #24]	@ (800b028 <xTimerGenericCommand+0x9c>)
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	f107 0110 	add.w	r1, r7, #16
 800b014:	2300      	movs	r3, #0
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	f7fd fbd8 	bl	80087cc <xQueueGenericSendFromISR>
 800b01c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b020:	4618      	mov	r0, r3
 800b022:	3728      	adds	r7, #40	@ 0x28
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20004b3c 	.word	0x20004b3c

0800b02c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af02      	add	r7, sp, #8
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b036:	4b24      	ldr	r3, [pc, #144]	@ (800b0c8 <prvProcessExpiredTimer+0x9c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	3304      	adds	r3, #4
 800b044:	4618      	mov	r0, r3
 800b046:	f7fd f801 	bl	800804c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d025      	beq.n	800b0a4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	699a      	ldr	r2, [r3, #24]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	18d1      	adds	r1, r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	6978      	ldr	r0, [r7, #20]
 800b066:	f000 f8d7 	bl	800b218 <prvInsertTimerInActiveList>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d022      	beq.n	800b0b6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b070:	2300      	movs	r3, #0
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	2100      	movs	r1, #0
 800b07a:	6978      	ldr	r0, [r7, #20]
 800b07c:	f7ff ff86 	bl	800af8c <xTimerGenericCommand>
 800b080:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d116      	bne.n	800b0b6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08c:	b672      	cpsid	i
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	b662      	cpsie	i
 800b09c:	60fb      	str	r3, [r7, #12]
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	e7fd      	b.n	800b0a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0aa:	f023 0301 	bic.w	r3, r3, #1
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	6978      	ldr	r0, [r7, #20]
 800b0bc:	4798      	blx	r3
}
 800b0be:	bf00      	nop
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20004b34 	.word	0x20004b34

0800b0cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0d4:	f107 0308 	add.w	r3, r7, #8
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 f859 	bl	800b190 <prvGetNextExpireTime>
 800b0de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 f805 	bl	800b0f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0ea:	f000 f8d7 	bl	800b29c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0ee:	bf00      	nop
 800b0f0:	e7f0      	b.n	800b0d4 <prvTimerTask+0x8>
	...

0800b0f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0fe:	f7fe fce7 	bl	8009ad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f866 	bl	800b1d8 <prvSampleTimeNow>
 800b10c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d130      	bne.n	800b176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <prvProcessTimerOrBlockTask+0x3c>
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d806      	bhi.n	800b130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b122:	f7fe fce3 	bl	8009aec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b126:	68f9      	ldr	r1, [r7, #12]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff ff7f 	bl	800b02c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b12e:	e024      	b.n	800b17a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d008      	beq.n	800b148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b136:	4b13      	ldr	r3, [pc, #76]	@ (800b184 <prvProcessTimerOrBlockTask+0x90>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <prvProcessTimerOrBlockTask+0x50>
 800b140:	2301      	movs	r3, #1
 800b142:	e000      	b.n	800b146 <prvProcessTimerOrBlockTask+0x52>
 800b144:	2300      	movs	r3, #0
 800b146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b148:	4b0f      	ldr	r3, [pc, #60]	@ (800b188 <prvProcessTimerOrBlockTask+0x94>)
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	f7fe f9cb 	bl	80094f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b15a:	f7fe fcc7 	bl	8009aec <xTaskResumeAll>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b164:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <prvProcessTimerOrBlockTask+0x98>)
 800b166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	f3bf 8f6f 	isb	sy
}
 800b174:	e001      	b.n	800b17a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b176:	f7fe fcb9 	bl	8009aec <xTaskResumeAll>
}
 800b17a:	bf00      	nop
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20004b38 	.word	0x20004b38
 800b188:	20004b3c 	.word	0x20004b3c
 800b18c:	e000ed04 	.word	0xe000ed04

0800b190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b198:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d4 <prvGetNextExpireTime+0x44>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <prvGetNextExpireTime+0x16>
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	e000      	b.n	800b1a8 <prvGetNextExpireTime+0x18>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d105      	bne.n	800b1c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1b4:	4b07      	ldr	r3, [pc, #28]	@ (800b1d4 <prvGetNextExpireTime+0x44>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e001      	b.n	800b1c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20004b34 	.word	0x20004b34

0800b1d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1e0:	f7fe fd24 	bl	8009c2c <xTaskGetTickCount>
 800b1e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <prvSampleTimeNow+0x3c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d205      	bcs.n	800b1fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1f0:	f000 f940 	bl	800b474 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	e002      	b.n	800b202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b202:	4a04      	ldr	r2, [pc, #16]	@ (800b214 <prvSampleTimeNow+0x3c>)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b208:	68fb      	ldr	r3, [r7, #12]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20004b44 	.word	0x20004b44

0800b218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d812      	bhi.n	800b264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	1ad2      	subs	r2, r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d302      	bcc.n	800b252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e01b      	b.n	800b28a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b252:	4b10      	ldr	r3, [pc, #64]	@ (800b294 <prvInsertTimerInActiveList+0x7c>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3304      	adds	r3, #4
 800b25a:	4619      	mov	r1, r3
 800b25c:	4610      	mov	r0, r2
 800b25e:	f7fc febc 	bl	8007fda <vListInsert>
 800b262:	e012      	b.n	800b28a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d206      	bcs.n	800b27a <prvInsertTimerInActiveList+0x62>
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d302      	bcc.n	800b27a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b274:	2301      	movs	r3, #1
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	e007      	b.n	800b28a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b27a:	4b07      	ldr	r3, [pc, #28]	@ (800b298 <prvInsertTimerInActiveList+0x80>)
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3304      	adds	r3, #4
 800b282:	4619      	mov	r1, r3
 800b284:	4610      	mov	r0, r2
 800b286:	f7fc fea8 	bl	8007fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b28a:	697b      	ldr	r3, [r7, #20]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20004b38 	.word	0x20004b38
 800b298:	20004b34 	.word	0x20004b34

0800b29c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08e      	sub	sp, #56	@ 0x38
 800b2a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2a2:	e0d4      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da1b      	bge.n	800b2e2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10d      	bne.n	800b2d2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ba:	b672      	cpsid	i
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	b662      	cpsie	i
 800b2ca:	61fb      	str	r3, [r7, #28]
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2d8:	6850      	ldr	r0, [r2, #4]
 800b2da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2dc:	6892      	ldr	r2, [r2, #8]
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f2c0 80b2 	blt.w	800b44e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fc fea6 	bl	800804c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b300:	463b      	mov	r3, r7
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ff68 	bl	800b1d8 <prvSampleTimeNow>
 800b308:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	f200 809b 	bhi.w	800b448 <prvProcessReceivedCommands+0x1ac>
 800b312:	a201      	add	r2, pc, #4	@ (adr r2, 800b318 <prvProcessReceivedCommands+0x7c>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b341 	.word	0x0800b341
 800b31c:	0800b341 	.word	0x0800b341
 800b320:	0800b341 	.word	0x0800b341
 800b324:	0800b3bb 	.word	0x0800b3bb
 800b328:	0800b3cf 	.word	0x0800b3cf
 800b32c:	0800b41f 	.word	0x0800b41f
 800b330:	0800b341 	.word	0x0800b341
 800b334:	0800b341 	.word	0x0800b341
 800b338:	0800b3bb 	.word	0x0800b3bb
 800b33c:	0800b3cf 	.word	0x0800b3cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	18d1      	adds	r1, r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b35e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b360:	f7ff ff5a 	bl	800b218 <prvInsertTimerInActiveList>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d070      	beq.n	800b44c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b370:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d065      	beq.n	800b44c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	441a      	add	r2, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2300      	movs	r3, #0
 800b38e:	2100      	movs	r1, #0
 800b390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b392:	f7ff fdfb 	bl	800af8c <xTimerGenericCommand>
 800b396:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d156      	bne.n	800b44c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	b672      	cpsid	i
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	b662      	cpsie	i
 800b3b2:	61bb      	str	r3, [r7, #24]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3cc:	e03f      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d4:	f043 0301 	orr.w	r3, r3, #1
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10d      	bne.n	800b40a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	b672      	cpsid	i
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	b662      	cpsie	i
 800b402:	617b      	str	r3, [r7, #20]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	18d1      	adds	r1, r2, r3
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b418:	f7ff fefe 	bl	800b218 <prvInsertTimerInActiveList>
					break;
 800b41c:	e017      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800b42c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b42e:	f000 fbd1 	bl	800bbd4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b432:	e00c      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b446:	e002      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800b448:	bf00      	nop
 800b44a:	e000      	b.n	800b44e <prvProcessReceivedCommands+0x1b2>
					break;
 800b44c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b44e:	4b08      	ldr	r3, [pc, #32]	@ (800b470 <prvProcessReceivedCommands+0x1d4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	1d39      	adds	r1, r7, #4
 800b454:	2200      	movs	r2, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f7fd faf4 	bl	8008a44 <xQueueReceive>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f af20 	bne.w	800b2a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	3730      	adds	r7, #48	@ 0x30
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20004b3c 	.word	0x20004b3c

0800b474 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b47a:	e04b      	b.n	800b514 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b47c:	4b2f      	ldr	r3, [pc, #188]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b486:	4b2d      	ldr	r3, [pc, #180]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3304      	adds	r3, #4
 800b494:	4618      	mov	r0, r3
 800b496:	f7fc fdd9 	bl	800804c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d031      	beq.n	800b514 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d90e      	bls.n	800b4e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fc fd7e 	bl	8007fda <vListInsert>
 800b4de:	e019      	b.n	800b514 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fd4e 	bl	800af8c <xTimerGenericCommand>
 800b4f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10d      	bne.n	800b514 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fc:	b672      	cpsid	i
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	b662      	cpsie	i
 800b50c:	603b      	str	r3, [r7, #0]
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b514:	4b09      	ldr	r3, [pc, #36]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1ae      	bne.n	800b47c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b51e:	4b07      	ldr	r3, [pc, #28]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b524:	4b06      	ldr	r3, [pc, #24]	@ (800b540 <prvSwitchTimerLists+0xcc>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a04      	ldr	r2, [pc, #16]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b52a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b52c:	4a04      	ldr	r2, [pc, #16]	@ (800b540 <prvSwitchTimerLists+0xcc>)
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	6013      	str	r3, [r2, #0]
}
 800b532:	bf00      	nop
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20004b34 	.word	0x20004b34
 800b540:	20004b38 	.word	0x20004b38

0800b544 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b54a:	f000 f947 	bl	800b7dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b54e:	4b15      	ldr	r3, [pc, #84]	@ (800b5a4 <prvCheckForValidListAndQueue+0x60>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d120      	bne.n	800b598 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b556:	4814      	ldr	r0, [pc, #80]	@ (800b5a8 <prvCheckForValidListAndQueue+0x64>)
 800b558:	f7fc fcee 	bl	8007f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b55c:	4813      	ldr	r0, [pc, #76]	@ (800b5ac <prvCheckForValidListAndQueue+0x68>)
 800b55e:	f7fc fceb 	bl	8007f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b562:	4b13      	ldr	r3, [pc, #76]	@ (800b5b0 <prvCheckForValidListAndQueue+0x6c>)
 800b564:	4a10      	ldr	r2, [pc, #64]	@ (800b5a8 <prvCheckForValidListAndQueue+0x64>)
 800b566:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b568:	4b12      	ldr	r3, [pc, #72]	@ (800b5b4 <prvCheckForValidListAndQueue+0x70>)
 800b56a:	4a10      	ldr	r2, [pc, #64]	@ (800b5ac <prvCheckForValidListAndQueue+0x68>)
 800b56c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b56e:	2300      	movs	r3, #0
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	4b11      	ldr	r3, [pc, #68]	@ (800b5b8 <prvCheckForValidListAndQueue+0x74>)
 800b574:	4a11      	ldr	r2, [pc, #68]	@ (800b5bc <prvCheckForValidListAndQueue+0x78>)
 800b576:	2110      	movs	r1, #16
 800b578:	200a      	movs	r0, #10
 800b57a:	f7fc fdfd 	bl	8008178 <xQueueGenericCreateStatic>
 800b57e:	4603      	mov	r3, r0
 800b580:	4a08      	ldr	r2, [pc, #32]	@ (800b5a4 <prvCheckForValidListAndQueue+0x60>)
 800b582:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b584:	4b07      	ldr	r3, [pc, #28]	@ (800b5a4 <prvCheckForValidListAndQueue+0x60>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b58c:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <prvCheckForValidListAndQueue+0x60>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	490b      	ldr	r1, [pc, #44]	@ (800b5c0 <prvCheckForValidListAndQueue+0x7c>)
 800b592:	4618      	mov	r0, r3
 800b594:	f7fd ff58 	bl	8009448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b598:	f000 f956 	bl	800b848 <vPortExitCritical>
}
 800b59c:	bf00      	nop
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20004b3c 	.word	0x20004b3c
 800b5a8:	20004b0c 	.word	0x20004b0c
 800b5ac:	20004b20 	.word	0x20004b20
 800b5b0:	20004b34 	.word	0x20004b34
 800b5b4:	20004b38 	.word	0x20004b38
 800b5b8:	20004be8 	.word	0x20004be8
 800b5bc:	20004b48 	.word	0x20004b48
 800b5c0:	0801c590 	.word	0x0801c590

0800b5c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3b04      	subs	r3, #4
 800b5d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3b04      	subs	r3, #4
 800b5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f023 0201 	bic.w	r2, r3, #1
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3b04      	subs	r3, #4
 800b5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5f4:	4a0c      	ldr	r2, [pc, #48]	@ (800b628 <pxPortInitialiseStack+0x64>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3b14      	subs	r3, #20
 800b5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b04      	subs	r3, #4
 800b60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f06f 0202 	mvn.w	r2, #2
 800b612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3b20      	subs	r3, #32
 800b618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b61a:	68fb      	ldr	r3, [r7, #12]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3714      	adds	r7, #20
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	0800b62d 	.word	0x0800b62d

0800b62c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b636:	4b15      	ldr	r3, [pc, #84]	@ (800b68c <prvTaskExitError+0x60>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63e:	d00d      	beq.n	800b65c <prvTaskExitError+0x30>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	b672      	cpsid	i
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	b662      	cpsie	i
 800b654:	60fb      	str	r3, [r7, #12]
}
 800b656:	bf00      	nop
 800b658:	bf00      	nop
 800b65a:	e7fd      	b.n	800b658 <prvTaskExitError+0x2c>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	b672      	cpsid	i
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	b662      	cpsie	i
 800b670:	60bb      	str	r3, [r7, #8]
}
 800b672:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b674:	bf00      	nop
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d0fc      	beq.n	800b676 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b67c:	bf00      	nop
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	2000000c 	.word	0x2000000c

0800b690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b690:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <pxCurrentTCBConst2>)
 800b692:	6819      	ldr	r1, [r3, #0]
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	f380 8809 	msr	PSP, r0
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8811 	msr	BASEPRI, r0
 800b6aa:	4770      	bx	lr
 800b6ac:	f3af 8000 	nop.w

0800b6b0 <pxCurrentTCBConst2>:
 800b6b0:	2000460c 	.word	0x2000460c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop

0800b6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6b8:	4808      	ldr	r0, [pc, #32]	@ (800b6dc <prvPortStartFirstTask+0x24>)
 800b6ba:	6800      	ldr	r0, [r0, #0]
 800b6bc:	6800      	ldr	r0, [r0, #0]
 800b6be:	f380 8808 	msr	MSP, r0
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8814 	msr	CONTROL, r0
 800b6ca:	b662      	cpsie	i
 800b6cc:	b661      	cpsie	f
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	df00      	svc	0
 800b6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6da:	bf00      	nop
 800b6dc:	e000ed08 	.word	0xe000ed08

0800b6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6e6:	4b37      	ldr	r3, [pc, #220]	@ (800b7c4 <xPortStartScheduler+0xe4>)
 800b6e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	@ 0xff
 800b6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	4b2f      	ldr	r3, [pc, #188]	@ (800b7c8 <xPortStartScheduler+0xe8>)
 800b70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b70e:	4b2f      	ldr	r3, [pc, #188]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b714:	e009      	b.n	800b72a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b716:	4b2d      	ldr	r3, [pc, #180]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	4a2b      	ldr	r2, [pc, #172]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	b2db      	uxtb	r3, r3
 800b728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b732:	2b80      	cmp	r3, #128	@ 0x80
 800b734:	d0ef      	beq.n	800b716 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b736:	4b25      	ldr	r3, [pc, #148]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f1c3 0307 	rsb	r3, r3, #7
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d00d      	beq.n	800b75e <xPortStartScheduler+0x7e>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b746:	b672      	cpsid	i
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	b662      	cpsie	i
 800b756:	60bb      	str	r3, [r7, #8]
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	e7fd      	b.n	800b75a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b75e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	4a19      	ldr	r2, [pc, #100]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b768:	4b18      	ldr	r3, [pc, #96]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b770:	4a16      	ldr	r2, [pc, #88]	@ (800b7cc <xPortStartScheduler+0xec>)
 800b772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b77c:	4b14      	ldr	r3, [pc, #80]	@ (800b7d0 <xPortStartScheduler+0xf0>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a13      	ldr	r2, [pc, #76]	@ (800b7d0 <xPortStartScheduler+0xf0>)
 800b782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b788:	4b11      	ldr	r3, [pc, #68]	@ (800b7d0 <xPortStartScheduler+0xf0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a10      	ldr	r2, [pc, #64]	@ (800b7d0 <xPortStartScheduler+0xf0>)
 800b78e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b794:	f000 f8dc 	bl	800b950 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b798:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d4 <xPortStartScheduler+0xf4>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b79e:	f000 f8fb 	bl	800b998 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d8 <xPortStartScheduler+0xf8>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b7d8 <xPortStartScheduler+0xf8>)
 800b7a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b7ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7ae:	f7ff ff83 	bl	800b6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7b2:	f7fe fba7 	bl	8009f04 <vTaskSwitchContext>
	prvTaskExitError();
 800b7b6:	f7ff ff39 	bl	800b62c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	e000e400 	.word	0xe000e400
 800b7c8:	20004c38 	.word	0x20004c38
 800b7cc:	20004c3c 	.word	0x20004c3c
 800b7d0:	e000ed20 	.word	0xe000ed20
 800b7d4:	2000000c 	.word	0x2000000c
 800b7d8:	e000ef34 	.word	0xe000ef34

0800b7dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	b672      	cpsid	i
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	b662      	cpsie	i
 800b7f6:	607b      	str	r3, [r7, #4]
}
 800b7f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7fa:	4b11      	ldr	r3, [pc, #68]	@ (800b840 <vPortEnterCritical+0x64>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	4a0f      	ldr	r2, [pc, #60]	@ (800b840 <vPortEnterCritical+0x64>)
 800b802:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b804:	4b0e      	ldr	r3, [pc, #56]	@ (800b840 <vPortEnterCritical+0x64>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d112      	bne.n	800b832 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b80c:	4b0d      	ldr	r3, [pc, #52]	@ (800b844 <vPortEnterCritical+0x68>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00d      	beq.n	800b832 <vPortEnterCritical+0x56>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	b672      	cpsid	i
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	b662      	cpsie	i
 800b82a:	603b      	str	r3, [r7, #0]
}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <vPortEnterCritical+0x52>
	}
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	2000000c 	.word	0x2000000c
 800b844:	e000ed04 	.word	0xe000ed04

0800b848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b84e:	4b13      	ldr	r3, [pc, #76]	@ (800b89c <vPortExitCritical+0x54>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10d      	bne.n	800b872 <vPortExitCritical+0x2a>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	b672      	cpsid	i
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	b662      	cpsie	i
 800b86a:	607b      	str	r3, [r7, #4]
}
 800b86c:	bf00      	nop
 800b86e:	bf00      	nop
 800b870:	e7fd      	b.n	800b86e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b872:	4b0a      	ldr	r3, [pc, #40]	@ (800b89c <vPortExitCritical+0x54>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3b01      	subs	r3, #1
 800b878:	4a08      	ldr	r2, [pc, #32]	@ (800b89c <vPortExitCritical+0x54>)
 800b87a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b87c:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <vPortExitCritical+0x54>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d105      	bne.n	800b890 <vPortExitCritical+0x48>
 800b884:	2300      	movs	r3, #0
 800b886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	f383 8811 	msr	BASEPRI, r3
}
 800b88e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	2000000c 	.word	0x2000000c

0800b8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8a0:	f3ef 8009 	mrs	r0, PSP
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	4b15      	ldr	r3, [pc, #84]	@ (800b900 <pxCurrentTCBConst>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	f01e 0f10 	tst.w	lr, #16
 800b8b0:	bf08      	it	eq
 800b8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	6010      	str	r0, [r2, #0]
 800b8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b8c4:	b672      	cpsid	i
 800b8c6:	f380 8811 	msr	BASEPRI, r0
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	b662      	cpsie	i
 800b8d4:	f7fe fb16 	bl	8009f04 <vTaskSwitchContext>
 800b8d8:	f04f 0000 	mov.w	r0, #0
 800b8dc:	f380 8811 	msr	BASEPRI, r0
 800b8e0:	bc09      	pop	{r0, r3}
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	6808      	ldr	r0, [r1, #0]
 800b8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	f01e 0f10 	tst.w	lr, #16
 800b8ee:	bf08      	it	eq
 800b8f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8f4:	f380 8809 	msr	PSP, r0
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop

0800b900 <pxCurrentTCBConst>:
 800b900:	2000460c 	.word	0x2000460c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop

0800b908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	b672      	cpsid	i
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	b662      	cpsie	i
 800b922:	607b      	str	r3, [r7, #4]
}
 800b924:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b926:	f7fe fa31 	bl	8009d8c <xTaskIncrementTick>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b930:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <SysTick_Handler+0x44>)
 800b932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	f383 8811 	msr	BASEPRI, r3
}
 800b942:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b954:	4b0b      	ldr	r3, [pc, #44]	@ (800b984 <vPortSetupTimerInterrupt+0x34>)
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b95a:	4b0b      	ldr	r3, [pc, #44]	@ (800b988 <vPortSetupTimerInterrupt+0x38>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b960:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <vPortSetupTimerInterrupt+0x3c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a0a      	ldr	r2, [pc, #40]	@ (800b990 <vPortSetupTimerInterrupt+0x40>)
 800b966:	fba2 2303 	umull	r2, r3, r2, r3
 800b96a:	099b      	lsrs	r3, r3, #6
 800b96c:	4a09      	ldr	r2, [pc, #36]	@ (800b994 <vPortSetupTimerInterrupt+0x44>)
 800b96e:	3b01      	subs	r3, #1
 800b970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b972:	4b04      	ldr	r3, [pc, #16]	@ (800b984 <vPortSetupTimerInterrupt+0x34>)
 800b974:	2207      	movs	r2, #7
 800b976:	601a      	str	r2, [r3, #0]
}
 800b978:	bf00      	nop
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	e000e010 	.word	0xe000e010
 800b988:	e000e018 	.word	0xe000e018
 800b98c:	20000000 	.word	0x20000000
 800b990:	10624dd3 	.word	0x10624dd3
 800b994:	e000e014 	.word	0xe000e014

0800b998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b998:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b9a8 <vPortEnableVFP+0x10>
 800b99c:	6801      	ldr	r1, [r0, #0]
 800b99e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9a2:	6001      	str	r1, [r0, #0]
 800b9a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9a6:	bf00      	nop
 800b9a8:	e000ed88 	.word	0xe000ed88

0800b9ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9b2:	f3ef 8305 	mrs	r3, IPSR
 800b9b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b0f      	cmp	r3, #15
 800b9bc:	d917      	bls.n	800b9ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9be:	4a1a      	ldr	r2, [pc, #104]	@ (800ba28 <vPortValidateInterruptPriority+0x7c>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9c8:	4b18      	ldr	r3, [pc, #96]	@ (800ba2c <vPortValidateInterruptPriority+0x80>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	7afa      	ldrb	r2, [r7, #11]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d20d      	bcs.n	800b9ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d6:	b672      	cpsid	i
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	b662      	cpsie	i
 800b9e6:	607b      	str	r3, [r7, #4]
}
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop
 800b9ec:	e7fd      	b.n	800b9ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b9ee:	4b10      	ldr	r3, [pc, #64]	@ (800ba30 <vPortValidateInterruptPriority+0x84>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800ba34 <vPortValidateInterruptPriority+0x88>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d90d      	bls.n	800ba1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	b672      	cpsid	i
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	b662      	cpsie	i
 800ba12:	603b      	str	r3, [r7, #0]
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	e7fd      	b.n	800ba16 <vPortValidateInterruptPriority+0x6a>
	}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	e000e3f0 	.word	0xe000e3f0
 800ba2c:	20004c38 	.word	0x20004c38
 800ba30:	e000ed0c 	.word	0xe000ed0c
 800ba34:	20004c3c 	.word	0x20004c3c

0800ba38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08a      	sub	sp, #40	@ 0x28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba44:	f7fe f844 	bl	8009ad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba48:	4b5d      	ldr	r3, [pc, #372]	@ (800bbc0 <pvPortMalloc+0x188>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba50:	f000 f938 	bl	800bcc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba54:	4b5b      	ldr	r3, [pc, #364]	@ (800bbc4 <pvPortMalloc+0x18c>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8094 	bne.w	800bb8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d020      	beq.n	800baaa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ba68:	2208      	movs	r2, #8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f003 0307 	and.w	r3, r3, #7
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d017      	beq.n	800baaa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f023 0307 	bic.w	r3, r3, #7
 800ba80:	3308      	adds	r3, #8
 800ba82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00d      	beq.n	800baaa <pvPortMalloc+0x72>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	b672      	cpsid	i
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	b662      	cpsie	i
 800baa2:	617b      	str	r3, [r7, #20]
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop
 800baa8:	e7fd      	b.n	800baa6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d06c      	beq.n	800bb8a <pvPortMalloc+0x152>
 800bab0:	4b45      	ldr	r3, [pc, #276]	@ (800bbc8 <pvPortMalloc+0x190>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d867      	bhi.n	800bb8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800baba:	4b44      	ldr	r3, [pc, #272]	@ (800bbcc <pvPortMalloc+0x194>)
 800babc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800babe:	4b43      	ldr	r3, [pc, #268]	@ (800bbcc <pvPortMalloc+0x194>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bac4:	e004      	b.n	800bad0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d903      	bls.n	800bae2 <pvPortMalloc+0xaa>
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f1      	bne.n	800bac6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bae2:	4b37      	ldr	r3, [pc, #220]	@ (800bbc0 <pvPortMalloc+0x188>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bae8:	429a      	cmp	r2, r3
 800baea:	d04e      	beq.n	800bb8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2208      	movs	r2, #8
 800baf2:	4413      	add	r3, r2
 800baf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	1ad2      	subs	r2, r2, r3
 800bb06:	2308      	movs	r3, #8
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d922      	bls.n	800bb54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4413      	add	r3, r2
 800bb14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <pvPortMalloc+0x104>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	b672      	cpsid	i
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	b662      	cpsie	i
 800bb34:	613b      	str	r3, [r7, #16]
}
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
 800bb3a:	e7fd      	b.n	800bb38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	1ad2      	subs	r2, r2, r3
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb4e:	69b8      	ldr	r0, [r7, #24]
 800bb50:	f000 f91a 	bl	800bd88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb54:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc8 <pvPortMalloc+0x190>)
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	4a1a      	ldr	r2, [pc, #104]	@ (800bbc8 <pvPortMalloc+0x190>)
 800bb60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb62:	4b19      	ldr	r3, [pc, #100]	@ (800bbc8 <pvPortMalloc+0x190>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd0 <pvPortMalloc+0x198>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d203      	bcs.n	800bb76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb6e:	4b16      	ldr	r3, [pc, #88]	@ (800bbc8 <pvPortMalloc+0x190>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a17      	ldr	r2, [pc, #92]	@ (800bbd0 <pvPortMalloc+0x198>)
 800bb74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	4b12      	ldr	r3, [pc, #72]	@ (800bbc4 <pvPortMalloc+0x18c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb8a:	f7fd ffaf 	bl	8009aec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	f003 0307 	and.w	r3, r3, #7
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00d      	beq.n	800bbb4 <pvPortMalloc+0x17c>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9c:	b672      	cpsid	i
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	b662      	cpsie	i
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	e7fd      	b.n	800bbb0 <pvPortMalloc+0x178>
	return pvReturn;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3728      	adds	r7, #40	@ 0x28
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	2000c448 	.word	0x2000c448
 800bbc4:	2000c454 	.word	0x2000c454
 800bbc8:	2000c44c 	.word	0x2000c44c
 800bbcc:	2000c440 	.word	0x2000c440
 800bbd0:	2000c450 	.word	0x2000c450

0800bbd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d04e      	beq.n	800bc84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbe6:	2308      	movs	r3, #8
 800bbe8:	425b      	negs	r3, r3
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4413      	add	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	4b24      	ldr	r3, [pc, #144]	@ (800bc8c <vPortFree+0xb8>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10d      	bne.n	800bc1e <vPortFree+0x4a>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc06:	b672      	cpsid	i
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	b662      	cpsie	i
 800bc16:	60fb      	str	r3, [r7, #12]
}
 800bc18:	bf00      	nop
 800bc1a:	bf00      	nop
 800bc1c:	e7fd      	b.n	800bc1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00d      	beq.n	800bc42 <vPortFree+0x6e>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	b672      	cpsid	i
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	b662      	cpsie	i
 800bc3a:	60bb      	str	r3, [r7, #8]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	4b11      	ldr	r3, [pc, #68]	@ (800bc8c <vPortFree+0xb8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d019      	beq.n	800bc84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d115      	bne.n	800bc84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc8c <vPortFree+0xb8>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	43db      	mvns	r3, r3
 800bc62:	401a      	ands	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc68:	f7fd ff32 	bl	8009ad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	4b07      	ldr	r3, [pc, #28]	@ (800bc90 <vPortFree+0xbc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4413      	add	r3, r2
 800bc76:	4a06      	ldr	r2, [pc, #24]	@ (800bc90 <vPortFree+0xbc>)
 800bc78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc7a:	6938      	ldr	r0, [r7, #16]
 800bc7c:	f000 f884 	bl	800bd88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bc80:	f7fd ff34 	bl	8009aec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc84:	bf00      	nop
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	2000c454 	.word	0x2000c454
 800bc90:	2000c44c 	.word	0x2000c44c

0800bc94 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800bc98:	4b03      	ldr	r3, [pc, #12]	@ (800bca8 <xPortGetFreeHeapSize+0x14>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	2000c44c 	.word	0x2000c44c

0800bcac <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800bcac:	b480      	push	{r7}
 800bcae:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800bcb0:	4b03      	ldr	r3, [pc, #12]	@ (800bcc0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	2000c450 	.word	0x2000c450

0800bcc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcca:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800bcce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcd0:	4b27      	ldr	r3, [pc, #156]	@ (800bd70 <prvHeapInit+0xac>)
 800bcd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00c      	beq.n	800bcf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3307      	adds	r3, #7
 800bce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd70 <prvHeapInit+0xac>)
 800bcf4:	4413      	add	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcfc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd74 <prvHeapInit+0xb0>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd02:	4b1c      	ldr	r3, [pc, #112]	@ (800bd74 <prvHeapInit+0xb0>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd10:	2208      	movs	r2, #8
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	1a9b      	subs	r3, r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f023 0307 	bic.w	r3, r3, #7
 800bd1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4a15      	ldr	r2, [pc, #84]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd26:	4b14      	ldr	r3, [pc, #80]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd2e:	4b12      	ldr	r3, [pc, #72]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd44:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4a0a      	ldr	r2, [pc, #40]	@ (800bd7c <prvHeapInit+0xb8>)
 800bd52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	4a09      	ldr	r2, [pc, #36]	@ (800bd80 <prvHeapInit+0xbc>)
 800bd5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd5c:	4b09      	ldr	r3, [pc, #36]	@ (800bd84 <prvHeapInit+0xc0>)
 800bd5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd62:	601a      	str	r2, [r3, #0]
}
 800bd64:	bf00      	nop
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	20004c40 	.word	0x20004c40
 800bd74:	2000c440 	.word	0x2000c440
 800bd78:	2000c448 	.word	0x2000c448
 800bd7c:	2000c450 	.word	0x2000c450
 800bd80:	2000c44c 	.word	0x2000c44c
 800bd84:	2000c454 	.word	0x2000c454

0800bd88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd90:	4b28      	ldr	r3, [pc, #160]	@ (800be34 <prvInsertBlockIntoFreeList+0xac>)
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	e002      	b.n	800bd9c <prvInsertBlockIntoFreeList+0x14>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d8f7      	bhi.n	800bd96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d108      	bne.n	800bdca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d118      	bne.n	800be10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	4b15      	ldr	r3, [pc, #84]	@ (800be38 <prvInsertBlockIntoFreeList+0xb0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d00d      	beq.n	800be06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685a      	ldr	r2, [r3, #4]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	441a      	add	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	e008      	b.n	800be18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be06:	4b0c      	ldr	r3, [pc, #48]	@ (800be38 <prvInsertBlockIntoFreeList+0xb0>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	e003      	b.n	800be18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d002      	beq.n	800be26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	2000c440 	.word	0x2000c440
 800be38:	2000c448 	.word	0x2000c448

0800be3c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	330c      	adds	r3, #12
 800be4c:	461a      	mov	r2, r3
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f002 fa29 	bl	800e2a8 <tcpip_send_msg_wait_sem>
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800be5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d103      	bne.n	800be6a <netconn_apimsg+0x2e>
    return apimsg->err;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800be68:	e001      	b.n	800be6e <netconn_apimsg+0x32>
  }
  return err;
 800be6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08c      	sub	sp, #48	@ 0x30
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	603a      	str	r2, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
 800be84:	460b      	mov	r3, r1
 800be86:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 f923 	bl	800d0d8 <netconn_alloc>
 800be92:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800be94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d054      	beq.n	800bf44 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800be9a:	79bb      	ldrb	r3, [r7, #6]
 800be9c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	4619      	mov	r1, r3
 800bea8:	4829      	ldr	r0, [pc, #164]	@ (800bf50 <netconn_new_with_proto_and_callback+0xd8>)
 800beaa:	f7ff ffc7 	bl	800be3c <netconn_apimsg>
 800beae:	4603      	mov	r3, r0
 800beb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800beb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d043      	beq.n	800bf44 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <netconn_new_with_proto_and_callback+0x58>
 800bec4:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <netconn_new_with_proto_and_callback+0xdc>)
 800bec6:	22a3      	movs	r2, #163	@ 0xa3
 800bec8:	4923      	ldr	r1, [pc, #140]	@ (800bf58 <netconn_new_with_proto_and_callback+0xe0>)
 800beca:	4824      	ldr	r0, [pc, #144]	@ (800bf5c <netconn_new_with_proto_and_callback+0xe4>)
 800becc:	f00d ff42 	bl	8019d54 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800bed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed2:	3310      	adds	r3, #16
 800bed4:	4618      	mov	r0, r3
 800bed6:	f00d f8dd 	bl	8019094 <sys_mbox_valid>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <netconn_new_with_proto_and_callback+0x74>
 800bee0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf54 <netconn_new_with_proto_and_callback+0xdc>)
 800bee2:	22a4      	movs	r2, #164	@ 0xa4
 800bee4:	491e      	ldr	r1, [pc, #120]	@ (800bf60 <netconn_new_with_proto_and_callback+0xe8>)
 800bee6:	481d      	ldr	r0, [pc, #116]	@ (800bf5c <netconn_new_with_proto_and_callback+0xe4>)
 800bee8:	f00d ff34 	bl	8019d54 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	3314      	adds	r3, #20
 800bef0:	4618      	mov	r0, r3
 800bef2:	f00d f8cf 	bl	8019094 <sys_mbox_valid>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <netconn_new_with_proto_and_callback+0x90>
 800befc:	4b15      	ldr	r3, [pc, #84]	@ (800bf54 <netconn_new_with_proto_and_callback+0xdc>)
 800befe:	22a6      	movs	r2, #166	@ 0xa6
 800bf00:	4918      	ldr	r1, [pc, #96]	@ (800bf64 <netconn_new_with_proto_and_callback+0xec>)
 800bf02:	4816      	ldr	r0, [pc, #88]	@ (800bf5c <netconn_new_with_proto_and_callback+0xe4>)
 800bf04:	f00d ff26 	bl	8019d54 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800bf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0a:	330c      	adds	r3, #12
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f00d f94f 	bl	80191b0 <sys_sem_valid>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <netconn_new_with_proto_and_callback+0xac>
 800bf18:	4b0e      	ldr	r3, [pc, #56]	@ (800bf54 <netconn_new_with_proto_and_callback+0xdc>)
 800bf1a:	22a9      	movs	r2, #169	@ 0xa9
 800bf1c:	4912      	ldr	r1, [pc, #72]	@ (800bf68 <netconn_new_with_proto_and_callback+0xf0>)
 800bf1e:	480f      	ldr	r0, [pc, #60]	@ (800bf5c <netconn_new_with_proto_and_callback+0xe4>)
 800bf20:	f00d ff18 	bl	8019d54 <iprintf>
      sys_sem_free(&conn->op_completed);
 800bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf26:	330c      	adds	r3, #12
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f00d f934 	bl	8019196 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800bf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf30:	3310      	adds	r3, #16
 800bf32:	4618      	mov	r0, r3
 800bf34:	f00d f83a 	bl	8018fac <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800bf38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf3a:	2007      	movs	r0, #7
 800bf3c:	f002 ff1c 	bl	800ed78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e000      	b.n	800bf46 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3730      	adds	r7, #48	@ 0x30
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800d0ad 	.word	0x0800d0ad
 800bf54:	0801c598 	.word	0x0801c598
 800bf58:	0801c5cc 	.word	0x0801c5cc
 800bf5c:	0801c5f0 	.word	0x0801c5f0
 800bf60:	0801c618 	.word	0x0801c618
 800bf64:	0801c630 	.word	0x0801c630
 800bf68:	0801c654 	.word	0x0801c654

0800bf6c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08c      	sub	sp, #48	@ 0x30
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e014      	b.n	800bfa8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bf82:	2329      	movs	r3, #41	@ 0x29
 800bf84:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800bf86:	f107 030c 	add.w	r3, r7, #12
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4808      	ldr	r0, [pc, #32]	@ (800bfb0 <netconn_prepare_delete+0x44>)
 800bf8e:	f7ff ff55 	bl	800be3c <netconn_apimsg>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800bf98:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <netconn_prepare_delete+0x3a>
    return err;
 800bfa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bfa4:	e000      	b.n	800bfa8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3730      	adds	r7, #48	@ 0x30
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	0800d619 	.word	0x0800d619

0800bfb4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <netconn_delete+0x12>
    return ERR_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e00d      	b.n	800bfe2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff ffd0 	bl	800bf6c <netconn_prepare_delete>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800bfd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <netconn_delete+0x2a>
    netconn_free(conn);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 f8eb 	bl	800d1b4 <netconn_free>
  }
  return err;
 800bfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08e      	sub	sp, #56	@ 0x38
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4613      	mov	r3, r2
 800bff8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d109      	bne.n	800c014 <netconn_bind+0x28>
 800c000:	4b11      	ldr	r3, [pc, #68]	@ (800c048 <netconn_bind+0x5c>)
 800c002:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800c006:	4911      	ldr	r1, [pc, #68]	@ (800c04c <netconn_bind+0x60>)
 800c008:	4811      	ldr	r0, [pc, #68]	@ (800c050 <netconn_bind+0x64>)
 800c00a:	f00d fea3 	bl	8019d54 <iprintf>
 800c00e:	f06f 030f 	mvn.w	r3, #15
 800c012:	e015      	b.n	800c040 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c01a:	4b0e      	ldr	r3, [pc, #56]	@ (800c054 <netconn_bind+0x68>)
 800c01c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c026:	88fb      	ldrh	r3, [r7, #6]
 800c028:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c02a:	f107 0314 	add.w	r3, r7, #20
 800c02e:	4619      	mov	r1, r3
 800c030:	4809      	ldr	r0, [pc, #36]	@ (800c058 <netconn_bind+0x6c>)
 800c032:	f7ff ff03 	bl	800be3c <netconn_apimsg>
 800c036:	4603      	mov	r3, r0
 800c038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c03c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c040:	4618      	mov	r0, r3
 800c042:	3738      	adds	r7, #56	@ 0x38
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	0801c598 	.word	0x0801c598
 800c04c:	0801c6d0 	.word	0x0801c6d0
 800c050:	0801c5f0 	.word	0x0801c5f0
 800c054:	0801f9fc 	.word	0x0801f9fc
 800c058:	0800d7e1 	.word	0x0800d7e1

0800c05c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08c      	sub	sp, #48	@ 0x30
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d109      	bne.n	800c082 <netconn_listen_with_backlog+0x26>
 800c06e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <netconn_listen_with_backlog+0x48>)
 800c070:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800c074:	490c      	ldr	r1, [pc, #48]	@ (800c0a8 <netconn_listen_with_backlog+0x4c>)
 800c076:	480d      	ldr	r0, [pc, #52]	@ (800c0ac <netconn_listen_with_backlog+0x50>)
 800c078:	f00d fe6c 	bl	8019d54 <iprintf>
 800c07c:	f06f 030f 	mvn.w	r3, #15
 800c080:	e00c      	b.n	800c09c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c086:	f107 030c 	add.w	r3, r7, #12
 800c08a:	4619      	mov	r1, r3
 800c08c:	4808      	ldr	r0, [pc, #32]	@ (800c0b0 <netconn_listen_with_backlog+0x54>)
 800c08e:	f7ff fed5 	bl	800be3c <netconn_apimsg>
 800c092:	4603      	mov	r3, r0
 800c094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c098:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3730      	adds	r7, #48	@ 0x30
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	0801c598 	.word	0x0801c598
 800c0a8:	0801c750 	.word	0x0801c750
 800c0ac:	0801c5f0 	.word	0x0801c5f0
 800c0b0:	0800d855 	.word	0x0800d855

0800c0b4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d109      	bne.n	800c0d8 <netconn_accept+0x24>
 800c0c4:	4b3d      	ldr	r3, [pc, #244]	@ (800c1bc <netconn_accept+0x108>)
 800c0c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c0ca:	493d      	ldr	r1, [pc, #244]	@ (800c1c0 <netconn_accept+0x10c>)
 800c0cc:	483d      	ldr	r0, [pc, #244]	@ (800c1c4 <netconn_accept+0x110>)
 800c0ce:	f00d fe41 	bl	8019d54 <iprintf>
 800c0d2:	f06f 030f 	mvn.w	r3, #15
 800c0d6:	e06c      	b.n	800c1b2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d109      	bne.n	800c0f8 <netconn_accept+0x44>
 800c0e4:	4b35      	ldr	r3, [pc, #212]	@ (800c1bc <netconn_accept+0x108>)
 800c0e6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800c0ea:	4937      	ldr	r1, [pc, #220]	@ (800c1c8 <netconn_accept+0x114>)
 800c0ec:	4835      	ldr	r0, [pc, #212]	@ (800c1c4 <netconn_accept+0x110>)
 800c0ee:	f00d fe31 	bl	8019d54 <iprintf>
 800c0f2:	f06f 030f 	mvn.w	r3, #15
 800c0f6:	e05c      	b.n	800c1b2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fb6c 	bl	800c7d6 <netconn_err>
 800c0fe:	4603      	mov	r3, r0
 800c100:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800c102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800c10a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c10e:	e050      	b.n	800c1b2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	3314      	adds	r3, #20
 800c114:	4618      	mov	r0, r3
 800c116:	f00c ffbd 	bl	8019094 <sys_mbox_valid>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d005      	beq.n	800c12c <netconn_accept+0x78>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7f1b      	ldrb	r3, [r3, #28]
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800c12c:	f06f 030e 	mvn.w	r3, #14
 800c130:	e03f      	b.n	800c1b2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	7f1b      	ldrb	r3, [r3, #28]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3314      	adds	r3, #20
 800c142:	f107 020c 	add.w	r2, r7, #12
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f00c ff8c 	bl	8019066 <sys_arch_mbox_tryfetch>
 800c14e:	4603      	mov	r3, r0
 800c150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c154:	d10a      	bne.n	800c16c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800c156:	f06f 0306 	mvn.w	r3, #6
 800c15a:	e02a      	b.n	800c1b2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3314      	adds	r3, #20
 800c160:	f107 010c 	add.w	r1, r7, #12
 800c164:	2200      	movs	r2, #0
 800c166:	4618      	mov	r0, r3
 800c168:	f00c ff4c 	bl	8019004 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c170:	2b00      	cmp	r3, #0
 800c172:	d005      	beq.n	800c180 <netconn_accept+0xcc>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c178:	2200      	movs	r2, #0
 800c17a:	2101      	movs	r1, #1
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f107 0213 	add.w	r2, r7, #19
 800c186:	4611      	mov	r1, r2
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fb75 	bl	800c878 <lwip_netconn_is_err_msg>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800c194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c198:	e00b      	b.n	800c1b2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d102      	bne.n	800c1a6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800c1a0:	f06f 030e 	mvn.w	r3, #14
 800c1a4:	e005      	b.n	800c1b2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c1b0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0801c598 	.word	0x0801c598
 800c1c0:	0801c770 	.word	0x0801c770
 800c1c4:	0801c5f0 	.word	0x0801c5f0
 800c1c8:	0801c790 	.word	0x0801c790

0800c1cc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d109      	bne.n	800c1f8 <netconn_recv_data+0x2c>
 800c1e4:	4b58      	ldr	r3, [pc, #352]	@ (800c348 <netconn_recv_data+0x17c>)
 800c1e6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800c1ea:	4958      	ldr	r1, [pc, #352]	@ (800c34c <netconn_recv_data+0x180>)
 800c1ec:	4858      	ldr	r0, [pc, #352]	@ (800c350 <netconn_recv_data+0x184>)
 800c1ee:	f00d fdb1 	bl	8019d54 <iprintf>
 800c1f2:	f06f 030f 	mvn.w	r3, #15
 800c1f6:	e0a2      	b.n	800c33e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d109      	bne.n	800c218 <netconn_recv_data+0x4c>
 800c204:	4b50      	ldr	r3, [pc, #320]	@ (800c348 <netconn_recv_data+0x17c>)
 800c206:	f240 224a 	movw	r2, #586	@ 0x24a
 800c20a:	4952      	ldr	r1, [pc, #328]	@ (800c354 <netconn_recv_data+0x188>)
 800c20c:	4850      	ldr	r0, [pc, #320]	@ (800c350 <netconn_recv_data+0x184>)
 800c20e:	f00d fda1 	bl	8019d54 <iprintf>
 800c212:	f06f 030f 	mvn.w	r3, #15
 800c216:	e092      	b.n	800c33e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3310      	adds	r3, #16
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00c ff39 	bl	8019094 <sys_mbox_valid>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10e      	bne.n	800c246 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 fad4 	bl	800c7d6 <netconn_err>
 800c22e:	4603      	mov	r3, r0
 800c230:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c232:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c23a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c23e:	e07e      	b.n	800c33e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c240:	f06f 030a 	mvn.w	r3, #10
 800c244:	e07b      	b.n	800c33e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	7f1b      	ldrb	r3, [r3, #28]
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10f      	bne.n	800c272 <netconn_recv_data+0xa6>
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10a      	bne.n	800c272 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	7f1b      	ldrb	r3, [r3, #28]
 800c260:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c264:	2b00      	cmp	r3, #0
 800c266:	d104      	bne.n	800c272 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d023      	beq.n	800c2ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3310      	adds	r3, #16
 800c276:	f107 0218 	add.w	r2, r7, #24
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f00c fef2 	bl	8019066 <sys_arch_mbox_tryfetch>
 800c282:	4603      	mov	r3, r0
 800c284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c288:	d11f      	bne.n	800c2ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f000 faa3 	bl	800c7d6 <netconn_err>
 800c290:	4603      	mov	r3, r0
 800c292:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c294:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c29c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c2a0:	e04d      	b.n	800c33e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	7f1b      	ldrb	r3, [r3, #28]
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c2ae:	f06f 030a 	mvn.w	r3, #10
 800c2b2:	e044      	b.n	800c33e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c2b4:	f06f 0306 	mvn.w	r3, #6
 800c2b8:	e041      	b.n	800c33e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3310      	adds	r3, #16
 800c2be:	f107 0118 	add.w	r1, r7, #24
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f00c fe9d 	bl	8019004 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2d2:	2b10      	cmp	r3, #16
 800c2d4:	d117      	bne.n	800c306 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	f107 0217 	add.w	r2, r7, #23
 800c2dc:	4611      	mov	r1, r2
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 faca 	bl	800c878 <lwip_netconn_is_err_msg>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d009      	beq.n	800c2fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c2ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ee:	f113 0f0f 	cmn.w	r3, #15
 800c2f2:	d101      	bne.n	800c2f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e022      	b.n	800c33e <netconn_recv_data+0x172>
      }
      return err;
 800c2f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2fc:	e01f      	b.n	800c33e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	891b      	ldrh	r3, [r3, #8]
 800c302:	83fb      	strh	r3, [r7, #30]
 800c304:	e00d      	b.n	800c322 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <netconn_recv_data+0x14e>
 800c30c:	4b0e      	ldr	r3, [pc, #56]	@ (800c348 <netconn_recv_data+0x17c>)
 800c30e:	f240 2291 	movw	r2, #657	@ 0x291
 800c312:	4911      	ldr	r1, [pc, #68]	@ (800c358 <netconn_recv_data+0x18c>)
 800c314:	480e      	ldr	r0, [pc, #56]	@ (800c350 <netconn_recv_data+0x184>)
 800c316:	f00d fd1d 	bl	8019d54 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	891b      	ldrh	r3, [r3, #8]
 800c320:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c326:	2b00      	cmp	r3, #0
 800c328:	d005      	beq.n	800c336 <netconn_recv_data+0x16a>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32e:	8bfa      	ldrh	r2, [r7, #30]
 800c330:	2101      	movs	r1, #1
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3720      	adds	r7, #32
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	0801c598 	.word	0x0801c598
 800c34c:	0801c7b0 	.word	0x0801c7b0
 800c350:	0801c5f0 	.word	0x0801c5f0
 800c354:	0801c7d0 	.word	0x0801c7d0
 800c358:	0801c7ec 	.word	0x0801c7ec

0800c35c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <netconn_tcp_recvd_msg+0x1e>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c376:	2b10      	cmp	r3, #16
 800c378:	d009      	beq.n	800c38e <netconn_tcp_recvd_msg+0x32>
 800c37a:	4b0c      	ldr	r3, [pc, #48]	@ (800c3ac <netconn_tcp_recvd_msg+0x50>)
 800c37c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800c380:	490b      	ldr	r1, [pc, #44]	@ (800c3b0 <netconn_tcp_recvd_msg+0x54>)
 800c382:	480c      	ldr	r0, [pc, #48]	@ (800c3b4 <netconn_tcp_recvd_msg+0x58>)
 800c384:	f00d fce6 	bl	8019d54 <iprintf>
 800c388:	f06f 030f 	mvn.w	r3, #15
 800c38c:	e00a      	b.n	800c3a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	4806      	ldr	r0, [pc, #24]	@ (800c3b8 <netconn_tcp_recvd_msg+0x5c>)
 800c39e:	f7ff fd4d 	bl	800be3c <netconn_apimsg>
 800c3a2:	4603      	mov	r3, r0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	0801c598 	.word	0x0801c598
 800c3b0:	0801c7f8 	.word	0x0801c7f8
 800c3b4:	0801c5f0 	.word	0x0801c5f0
 800c3b8:	0800d985 	.word	0x0800d985

0800c3bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b090      	sub	sp, #64	@ 0x40
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3310      	adds	r3, #16
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f00c fe60 	bl	8019094 <sys_mbox_valid>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c3da:	f06f 030a 	mvn.w	r3, #10
 800c3de:	e06d      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7f1b      	ldrb	r3, [r3, #28]
 800c3e4:	b25b      	sxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da07      	bge.n	800c3fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	7f1b      	ldrb	r3, [r3, #28]
 800c3ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c3f8:	e039      	b.n	800c46e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fee3 	bl	800c1cc <netconn_recv_data>
 800c406:	4603      	mov	r3, r0
 800c408:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800c40c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c414:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c418:	e050      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	f003 0308 	and.w	r3, r3, #8
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10e      	bne.n	800c448 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <netconn_recv_data_tcp+0x7a>
 800c430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c432:	891b      	ldrh	r3, [r3, #8]
 800c434:	e000      	b.n	800c438 <netconn_recv_data_tcp+0x7c>
 800c436:	2301      	movs	r3, #1
 800c438:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c43a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c43c:	f107 0214 	add.w	r2, r7, #20
 800c440:	4619      	mov	r1, r3
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f7ff ff8a 	bl	800c35c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d134      	bne.n	800c4b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	f003 0310 	and.w	r3, r3, #16
 800c454:	2b00      	cmp	r3, #0
 800c456:	d009      	beq.n	800c46c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	7f1b      	ldrb	r3, [r3, #28]
 800c45c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c460:	b2da      	uxtb	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c466:	f06f 0306 	mvn.w	r3, #6
 800c46a:	e027      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c46c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	d005      	beq.n	800c482 <netconn_recv_data_tcp+0xc6>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47a:	2200      	movs	r2, #0
 800c47c:	2101      	movs	r1, #1
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10f      	bne.n	800c4aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 f9a3 	bl	800c7d6 <netconn_err>
 800c490:	4603      	mov	r3, r0
 800c492:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800c496:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800c49e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c4a2:	e00b      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c4a4:	f06f 030d 	mvn.w	r3, #13
 800c4a8:	e008      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 f955 	bl	800c75c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c4b2:	f06f 030e 	mvn.w	r3, #14
 800c4b6:	e001      	b.n	800c4bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c4b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3740      	adds	r7, #64	@ 0x40
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <netconn_recv+0x28>
 800c4d8:	4b32      	ldr	r3, [pc, #200]	@ (800c5a4 <netconn_recv+0xe0>)
 800c4da:	f240 3263 	movw	r2, #867	@ 0x363
 800c4de:	4932      	ldr	r1, [pc, #200]	@ (800c5a8 <netconn_recv+0xe4>)
 800c4e0:	4832      	ldr	r0, [pc, #200]	@ (800c5ac <netconn_recv+0xe8>)
 800c4e2:	f00d fc37 	bl	8019d54 <iprintf>
 800c4e6:	f06f 030f 	mvn.w	r3, #15
 800c4ea:	e056      	b.n	800c59a <netconn_recv+0xd6>
  *new_buf = NULL;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d109      	bne.n	800c50c <netconn_recv+0x48>
 800c4f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c5a4 <netconn_recv+0xe0>)
 800c4fa:	f240 3265 	movw	r2, #869	@ 0x365
 800c4fe:	492c      	ldr	r1, [pc, #176]	@ (800c5b0 <netconn_recv+0xec>)
 800c500:	482a      	ldr	r0, [pc, #168]	@ (800c5ac <netconn_recv+0xe8>)
 800c502:	f00d fc27 	bl	8019d54 <iprintf>
 800c506:	f06f 030f 	mvn.w	r3, #15
 800c50a:	e046      	b.n	800c59a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c514:	2b10      	cmp	r3, #16
 800c516:	d13a      	bne.n	800c58e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c518:	2300      	movs	r3, #0
 800c51a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c51c:	2006      	movs	r0, #6
 800c51e:	f002 fbd9 	bl	800ecd4 <memp_malloc>
 800c522:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <netconn_recv+0x6c>
      return ERR_MEM;
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e034      	b.n	800c59a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c530:	f107 030c 	add.w	r3, r7, #12
 800c534:	2200      	movs	r2, #0
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ff3f 	bl	800c3bc <netconn_recv_data_tcp>
 800c53e:	4603      	mov	r3, r0
 800c540:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c542:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d006      	beq.n	800c558 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c54a:	6979      	ldr	r1, [r7, #20]
 800c54c:	2006      	movs	r0, #6
 800c54e:	f002 fc13 	bl	800ed78 <memp_free>
      return err;
 800c552:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c556:	e020      	b.n	800c59a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <netconn_recv+0xa8>
 800c55e:	4b11      	ldr	r3, [pc, #68]	@ (800c5a4 <netconn_recv+0xe0>)
 800c560:	f240 3279 	movw	r2, #889	@ 0x379
 800c564:	4913      	ldr	r1, [pc, #76]	@ (800c5b4 <netconn_recv+0xf0>)
 800c566:	4811      	ldr	r0, [pc, #68]	@ (800c5ac <netconn_recv+0xe8>)
 800c568:	f00d fbf4 	bl	8019d54 <iprintf>

    buf->p = p;
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2200      	movs	r2, #0
 800c57c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2200      	movs	r2, #0
 800c582:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e005      	b.n	800c59a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c58e:	2200      	movs	r2, #0
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fe1a 	bl	800c1cc <netconn_recv_data>
 800c598:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0801c598 	.word	0x0801c598
 800c5a8:	0801c7b0 	.word	0x0801c7b0
 800c5ac:	0801c5f0 	.word	0x0801c5f0
 800c5b0:	0801c7d0 	.word	0x0801c7d0
 800c5b4:	0801c848 	.word	0x0801c848

0800c5b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af02      	add	r7, sp, #8
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
 800c5c4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	f107 0110 	add.w	r1, r7, #16
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	2201      	movs	r2, #1
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f000 f805 	bl	800c5ec <netconn_write_vectors_partly>
 800c5e2:	4603      	mov	r3, r0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b092      	sub	sp, #72	@ 0x48
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	80fb      	strh	r3, [r7, #6]
 800c5fe:	4613      	mov	r3, r2
 800c600:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d109      	bne.n	800c61c <netconn_write_vectors_partly+0x30>
 800c608:	4b4e      	ldr	r3, [pc, #312]	@ (800c744 <netconn_write_vectors_partly+0x158>)
 800c60a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c60e:	494e      	ldr	r1, [pc, #312]	@ (800c748 <netconn_write_vectors_partly+0x15c>)
 800c610:	484e      	ldr	r0, [pc, #312]	@ (800c74c <netconn_write_vectors_partly+0x160>)
 800c612:	f00d fb9f 	bl	8019d54 <iprintf>
 800c616:	f06f 030f 	mvn.w	r3, #15
 800c61a:	e08e      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c624:	2b10      	cmp	r3, #16
 800c626:	d009      	beq.n	800c63c <netconn_write_vectors_partly+0x50>
 800c628:	4b46      	ldr	r3, [pc, #280]	@ (800c744 <netconn_write_vectors_partly+0x158>)
 800c62a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c62e:	4948      	ldr	r1, [pc, #288]	@ (800c750 <netconn_write_vectors_partly+0x164>)
 800c630:	4846      	ldr	r0, [pc, #280]	@ (800c74c <netconn_write_vectors_partly+0x160>)
 800c632:	f00d fb8f 	bl	8019d54 <iprintf>
 800c636:	f06f 0305 	mvn.w	r3, #5
 800c63a:	e07e      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	7f1b      	ldrb	r3, [r3, #28]
 800c640:	f003 0302 	and.w	r3, r3, #2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d104      	bne.n	800c652 <netconn_write_vectors_partly+0x66>
 800c648:	797b      	ldrb	r3, [r7, #5]
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <netconn_write_vectors_partly+0x6a>
 800c652:	2301      	movs	r3, #1
 800c654:	e000      	b.n	800c658 <netconn_write_vectors_partly+0x6c>
 800c656:	2300      	movs	r3, #0
 800c658:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c65c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c660:	2b00      	cmp	r3, #0
 800c662:	d005      	beq.n	800c670 <netconn_write_vectors_partly+0x84>
 800c664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c66a:	f06f 0305 	mvn.w	r3, #5
 800c66e:	e064      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c674:	2300      	movs	r3, #0
 800c676:	643b      	str	r3, [r7, #64]	@ 0x40
 800c678:	e015      	b.n	800c6a6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c67a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	4413      	add	r3, r2
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c686:	4413      	add	r3, r2
 800c688:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c68a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c696:	429a      	cmp	r2, r3
 800c698:	d202      	bcs.n	800c6a0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c69a:	f06f 0305 	mvn.w	r3, #5
 800c69e:	e04c      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c6a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	dbe5      	blt.n	800c67a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e040      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c6b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	da0a      	bge.n	800c6d4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d102      	bne.n	800c6ca <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c6c4:	f06f 0305 	mvn.w	r3, #5
 800c6c8:	e037      	b.n	800c73a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c6ca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c6dc:	88fb      	ldrh	r3, [r7, #6]
 800c6de:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c6e4:	797b      	ldrb	r3, [r7, #5]
 800c6e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4816      	ldr	r0, [pc, #88]	@ (800c754 <netconn_write_vectors_partly+0x168>)
 800c6fa:	f7ff fb9f 	bl	800be3c <netconn_apimsg>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c704:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d114      	bne.n	800c736 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c716:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c718:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10a      	bne.n	800c736 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c724:	429a      	cmp	r2, r3
 800c726:	d006      	beq.n	800c736 <netconn_write_vectors_partly+0x14a>
 800c728:	4b06      	ldr	r3, [pc, #24]	@ (800c744 <netconn_write_vectors_partly+0x158>)
 800c72a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c72e:	490a      	ldr	r1, [pc, #40]	@ (800c758 <netconn_write_vectors_partly+0x16c>)
 800c730:	4806      	ldr	r0, [pc, #24]	@ (800c74c <netconn_write_vectors_partly+0x160>)
 800c732:	f00d fb0f 	bl	8019d54 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c736:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3748      	adds	r7, #72	@ 0x48
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0801c598 	.word	0x0801c598
 800c748:	0801c870 	.word	0x0801c870
 800c74c:	0801c5f0 	.word	0x0801c5f0
 800c750:	0801c88c 	.word	0x0801c88c
 800c754:	0800dd89 	.word	0x0800dd89
 800c758:	0801c8b0 	.word	0x0801c8b0

0800c75c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08c      	sub	sp, #48	@ 0x30
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d109      	bne.n	800c782 <netconn_close_shutdown+0x26>
 800c76e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7ac <netconn_close_shutdown+0x50>)
 800c770:	f240 4247 	movw	r2, #1095	@ 0x447
 800c774:	490e      	ldr	r1, [pc, #56]	@ (800c7b0 <netconn_close_shutdown+0x54>)
 800c776:	480f      	ldr	r0, [pc, #60]	@ (800c7b4 <netconn_close_shutdown+0x58>)
 800c778:	f00d faec 	bl	8019d54 <iprintf>
 800c77c:	f06f 030f 	mvn.w	r3, #15
 800c780:	e010      	b.n	800c7a4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c78a:	2329      	movs	r3, #41	@ 0x29
 800c78c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c78e:	f107 030c 	add.w	r3, r7, #12
 800c792:	4619      	mov	r1, r3
 800c794:	4808      	ldr	r0, [pc, #32]	@ (800c7b8 <netconn_close_shutdown+0x5c>)
 800c796:	f7ff fb51 	bl	800be3c <netconn_apimsg>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c7a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3730      	adds	r7, #48	@ 0x30
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	0801c598 	.word	0x0801c598
 800c7b0:	0801c8d4 	.word	0x0801c8d4
 800c7b4:	0801c5f0 	.word	0x0801c5f0
 800c7b8:	0800dea1 	.word	0x0800dea1

0800c7bc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800c7c4:	2103      	movs	r1, #3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff ffc8 	bl	800c75c <netconn_close_shutdown>
 800c7cc:	4603      	mov	r3, r0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <netconn_err+0x12>
    return ERR_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e00d      	b.n	800c804 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c7e8:	f00c fd5e 	bl	80192a8 <sys_arch_protect>
 800c7ec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7a1b      	ldrb	r3, [r3, #8]
 800c7f2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f00c fd62 	bl	80192c4 <sys_arch_unprotect>
  return err;
 800c800:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c81a:	f113 0f0d 	cmn.w	r3, #13
 800c81e:	d009      	beq.n	800c834 <lwip_netconn_err_to_msg+0x28>
 800c820:	f113 0f0d 	cmn.w	r3, #13
 800c824:	dc0c      	bgt.n	800c840 <lwip_netconn_err_to_msg+0x34>
 800c826:	f113 0f0f 	cmn.w	r3, #15
 800c82a:	d007      	beq.n	800c83c <lwip_netconn_err_to_msg+0x30>
 800c82c:	f113 0f0e 	cmn.w	r3, #14
 800c830:	d002      	beq.n	800c838 <lwip_netconn_err_to_msg+0x2c>
 800c832:	e005      	b.n	800c840 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c834:	4b0a      	ldr	r3, [pc, #40]	@ (800c860 <lwip_netconn_err_to_msg+0x54>)
 800c836:	e00e      	b.n	800c856 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c838:	4b0a      	ldr	r3, [pc, #40]	@ (800c864 <lwip_netconn_err_to_msg+0x58>)
 800c83a:	e00c      	b.n	800c856 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c83c:	4b0a      	ldr	r3, [pc, #40]	@ (800c868 <lwip_netconn_err_to_msg+0x5c>)
 800c83e:	e00a      	b.n	800c856 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <lwip_netconn_err_to_msg+0x48>
 800c848:	4b08      	ldr	r3, [pc, #32]	@ (800c86c <lwip_netconn_err_to_msg+0x60>)
 800c84a:	227d      	movs	r2, #125	@ 0x7d
 800c84c:	4908      	ldr	r1, [pc, #32]	@ (800c870 <lwip_netconn_err_to_msg+0x64>)
 800c84e:	4809      	ldr	r0, [pc, #36]	@ (800c874 <lwip_netconn_err_to_msg+0x68>)
 800c850:	f00d fa80 	bl	8019d54 <iprintf>
      return NULL;
 800c854:	2300      	movs	r3, #0
  }
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	0801f8e8 	.word	0x0801f8e8
 800c864:	0801f8e9 	.word	0x0801f8e9
 800c868:	0801f8ea 	.word	0x0801f8ea
 800c86c:	0801c8f0 	.word	0x0801c8f0
 800c870:	0801c924 	.word	0x0801c924
 800c874:	0801c934 	.word	0x0801c934

0800c878 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d105      	bne.n	800c894 <lwip_netconn_is_err_msg+0x1c>
 800c888:	4b12      	ldr	r3, [pc, #72]	@ (800c8d4 <lwip_netconn_is_err_msg+0x5c>)
 800c88a:	2285      	movs	r2, #133	@ 0x85
 800c88c:	4912      	ldr	r1, [pc, #72]	@ (800c8d8 <lwip_netconn_is_err_msg+0x60>)
 800c88e:	4813      	ldr	r0, [pc, #76]	@ (800c8dc <lwip_netconn_is_err_msg+0x64>)
 800c890:	f00d fa60 	bl	8019d54 <iprintf>

  if (msg == &netconn_aborted) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a12      	ldr	r2, [pc, #72]	@ (800c8e0 <lwip_netconn_is_err_msg+0x68>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d104      	bne.n	800c8a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	22f3      	movs	r2, #243	@ 0xf3
 800c8a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e012      	b.n	800c8cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c8e4 <lwip_netconn_is_err_msg+0x6c>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d104      	bne.n	800c8b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	22f2      	movs	r2, #242	@ 0xf2
 800c8b2:	701a      	strb	r2, [r3, #0]
    return 1;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e009      	b.n	800c8cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a0b      	ldr	r2, [pc, #44]	@ (800c8e8 <lwip_netconn_is_err_msg+0x70>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d104      	bne.n	800c8ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	22f1      	movs	r2, #241	@ 0xf1
 800c8c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e000      	b.n	800c8cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	0801c8f0 	.word	0x0801c8f0
 800c8d8:	0801c95c 	.word	0x0801c95c
 800c8dc:	0801c934 	.word	0x0801c934
 800c8e0:	0801f8e8 	.word	0x0801f8e8
 800c8e4:	0801f8e9 	.word	0x0801f8e9
 800c8e8:	0801f8ea 	.word	0x0801f8ea

0800c8ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d105      	bne.n	800c90c <recv_udp+0x20>
 800c900:	4b34      	ldr	r3, [pc, #208]	@ (800c9d4 <recv_udp+0xe8>)
 800c902:	22e5      	movs	r2, #229	@ 0xe5
 800c904:	4934      	ldr	r1, [pc, #208]	@ (800c9d8 <recv_udp+0xec>)
 800c906:	4835      	ldr	r0, [pc, #212]	@ (800c9dc <recv_udp+0xf0>)
 800c908:	f00d fa24 	bl	8019d54 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <recv_udp+0x32>
 800c912:	4b30      	ldr	r3, [pc, #192]	@ (800c9d4 <recv_udp+0xe8>)
 800c914:	22e6      	movs	r2, #230	@ 0xe6
 800c916:	4932      	ldr	r1, [pc, #200]	@ (800c9e0 <recv_udp+0xf4>)
 800c918:	4830      	ldr	r0, [pc, #192]	@ (800c9dc <recv_udp+0xf0>)
 800c91a:	f00d fa1b 	bl	8019d54 <iprintf>
  conn = (struct netconn *)arg;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d103      	bne.n	800c930 <recv_udp+0x44>
    pbuf_free(p);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f003 f8c9 	bl	800fac0 <pbuf_free>
    return;
 800c92e:	e04d      	b.n	800c9cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	429a      	cmp	r2, r3
 800c938:	d005      	beq.n	800c946 <recv_udp+0x5a>
 800c93a:	4b26      	ldr	r3, [pc, #152]	@ (800c9d4 <recv_udp+0xe8>)
 800c93c:	22ee      	movs	r2, #238	@ 0xee
 800c93e:	4929      	ldr	r1, [pc, #164]	@ (800c9e4 <recv_udp+0xf8>)
 800c940:	4826      	ldr	r0, [pc, #152]	@ (800c9dc <recv_udp+0xf0>)
 800c942:	f00d fa07 	bl	8019d54 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	3310      	adds	r3, #16
 800c94a:	4618      	mov	r0, r3
 800c94c:	f00c fba2 	bl	8019094 <sys_mbox_valid>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f003 f8b2 	bl	800fac0 <pbuf_free>
    return;
 800c95c:	e036      	b.n	800c9cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c95e:	2006      	movs	r0, #6
 800c960:	f002 f9b8 	bl	800ecd4 <memp_malloc>
 800c964:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d103      	bne.n	800c974 <recv_udp+0x88>
    pbuf_free(p);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f003 f8a7 	bl	800fac0 <pbuf_free>
    return;
 800c972:	e02b      	b.n	800c9cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <recv_udp+0xa0>
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	e000      	b.n	800c98e <recv_udp+0xa2>
 800c98c:	2300      	movs	r3, #0
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c996:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	891b      	ldrh	r3, [r3, #8]
 800c99c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	3310      	adds	r3, #16
 800c9a2:	69b9      	ldr	r1, [r7, #24]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f00c fb13 	bl	8018fd0 <sys_mbox_trypost>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f001 fb01 	bl	800dfb8 <netbuf_delete>
    return;
 800c9b6:	e009      	b.n	800c9cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d005      	beq.n	800c9cc <recv_udp+0xe0>
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c4:	8afa      	ldrh	r2, [r7, #22]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	69f8      	ldr	r0, [r7, #28]
 800c9ca:	4798      	blx	r3
  }
}
 800c9cc:	3720      	adds	r7, #32
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0801c8f0 	.word	0x0801c8f0
 800c9d8:	0801c968 	.word	0x0801c968
 800c9dc:	0801c934 	.word	0x0801c934
 800c9e0:	0801c98c 	.word	0x0801c98c
 800c9e4:	0801c9ac 	.word	0x0801c9ac

0800c9e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <recv_tcp+0x22>
 800c9fc:	4b36      	ldr	r3, [pc, #216]	@ (800cad8 <recv_tcp+0xf0>)
 800c9fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ca02:	4936      	ldr	r1, [pc, #216]	@ (800cadc <recv_tcp+0xf4>)
 800ca04:	4836      	ldr	r0, [pc, #216]	@ (800cae0 <recv_tcp+0xf8>)
 800ca06:	f00d f9a5 	bl	8019d54 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <recv_tcp+0x36>
 800ca10:	4b31      	ldr	r3, [pc, #196]	@ (800cad8 <recv_tcp+0xf0>)
 800ca12:	f240 122d 	movw	r2, #301	@ 0x12d
 800ca16:	4933      	ldr	r1, [pc, #204]	@ (800cae4 <recv_tcp+0xfc>)
 800ca18:	4831      	ldr	r0, [pc, #196]	@ (800cae0 <recv_tcp+0xf8>)
 800ca1a:	f00d f99b 	bl	8019d54 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ca1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d006      	beq.n	800ca34 <recv_tcp+0x4c>
 800ca26:	4b2c      	ldr	r3, [pc, #176]	@ (800cad8 <recv_tcp+0xf0>)
 800ca28:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ca2c:	492e      	ldr	r1, [pc, #184]	@ (800cae8 <recv_tcp+0x100>)
 800ca2e:	482c      	ldr	r0, [pc, #176]	@ (800cae0 <recv_tcp+0xf8>)
 800ca30:	f00d f990 	bl	8019d54 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d102      	bne.n	800ca44 <recv_tcp+0x5c>
    return ERR_VAL;
 800ca3e:	f06f 0305 	mvn.w	r3, #5
 800ca42:	e045      	b.n	800cad0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d006      	beq.n	800ca5c <recv_tcp+0x74>
 800ca4e:	4b22      	ldr	r3, [pc, #136]	@ (800cad8 <recv_tcp+0xf0>)
 800ca50:	f240 1235 	movw	r2, #309	@ 0x135
 800ca54:	4925      	ldr	r1, [pc, #148]	@ (800caec <recv_tcp+0x104>)
 800ca56:	4822      	ldr	r0, [pc, #136]	@ (800cae0 <recv_tcp+0xf8>)
 800ca58:	f00d f97c 	bl	8019d54 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	3310      	adds	r3, #16
 800ca60:	4618      	mov	r0, r3
 800ca62:	f00c fb17 	bl	8019094 <sys_mbox_valid>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10d      	bne.n	800ca88 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d008      	beq.n	800ca84 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	891b      	ldrh	r3, [r3, #8]
 800ca76:	4619      	mov	r1, r3
 800ca78:	68b8      	ldr	r0, [r7, #8]
 800ca7a:	f003 ffd9 	bl	8010a30 <tcp_recved>
      pbuf_free(p);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f003 f81e 	bl	800fac0 <pbuf_free>
    }
    return ERR_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	e023      	b.n	800cad0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <recv_tcp+0xb2>
    msg = p;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	891b      	ldrh	r3, [r3, #8]
 800ca96:	83fb      	strh	r3, [r7, #30]
 800ca98:	e003      	b.n	800caa2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ca9a:	4b15      	ldr	r3, [pc, #84]	@ (800caf0 <recv_tcp+0x108>)
 800ca9c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	3310      	adds	r3, #16
 800caa6:	69b9      	ldr	r1, [r7, #24]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f00c fa91 	bl	8018fd0 <sys_mbox_trypost>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295
 800cab8:	e00a      	b.n	800cad0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d005      	beq.n	800cace <recv_tcp+0xe6>
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac6:	8bfa      	ldrh	r2, [r7, #30]
 800cac8:	2100      	movs	r1, #0
 800caca:	6978      	ldr	r0, [r7, #20]
 800cacc:	4798      	blx	r3
  }

  return ERR_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	0801c8f0 	.word	0x0801c8f0
 800cadc:	0801c9cc 	.word	0x0801c9cc
 800cae0:	0801c934 	.word	0x0801c934
 800cae4:	0801c9f0 	.word	0x0801c9f0
 800cae8:	0801ca10 	.word	0x0801ca10
 800caec:	0801ca28 	.word	0x0801ca28
 800caf0:	0801f8ea 	.word	0x0801f8ea

0800caf4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d106      	bne.n	800cb16 <poll_tcp+0x22>
 800cb08:	4b29      	ldr	r3, [pc, #164]	@ (800cbb0 <poll_tcp+0xbc>)
 800cb0a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800cb0e:	4929      	ldr	r1, [pc, #164]	@ (800cbb4 <poll_tcp+0xc0>)
 800cb10:	4829      	ldr	r0, [pc, #164]	@ (800cbb8 <poll_tcp+0xc4>)
 800cb12:	f00d f91f 	bl	8019d54 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d104      	bne.n	800cb28 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cb1e:	2101      	movs	r1, #1
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f000 ff65 	bl	800d9f0 <lwip_netconn_do_writemore>
 800cb26:	e016      	b.n	800cb56 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	785b      	ldrb	r3, [r3, #1]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d112      	bne.n	800cb56 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <poll_tcp+0x5a>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	7a5b      	ldrb	r3, [r3, #9]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d005      	beq.n	800cb4e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	7a5a      	ldrb	r2, [r3, #9]
 800cb48:	3a01      	subs	r2, #1
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cb4e:	2101      	movs	r1, #1
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f000 fbf7 	bl	800d344 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	7f1b      	ldrb	r3, [r3, #28]
 800cb5a:	f003 0310 	and.w	r3, r3, #16
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d021      	beq.n	800cba6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d01d      	beq.n	800cba6 <poll_tcp+0xb2>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cb72:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800cb76:	d316      	bcc.n	800cba6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d810      	bhi.n	800cba6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	7f1b      	ldrb	r3, [r3, #28]
 800cb88:	f023 0310 	bic.w	r3, r3, #16
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <poll_tcp+0xb2>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2102      	movs	r1, #2
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	0801c8f0 	.word	0x0801c8f0
 800cbb4:	0801ca48 	.word	0x0801ca48
 800cbb8:	0801c934 	.word	0x0801c934

0800cbbc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d106      	bne.n	800cbe2 <sent_tcp+0x26>
 800cbd4:	4b20      	ldr	r3, [pc, #128]	@ (800cc58 <sent_tcp+0x9c>)
 800cbd6:	f240 1293 	movw	r2, #403	@ 0x193
 800cbda:	4920      	ldr	r1, [pc, #128]	@ (800cc5c <sent_tcp+0xa0>)
 800cbdc:	4820      	ldr	r0, [pc, #128]	@ (800cc60 <sent_tcp+0xa4>)
 800cbde:	f00d f8b9 	bl	8019d54 <iprintf>

  if (conn) {
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d032      	beq.n	800cc4e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	785b      	ldrb	r3, [r3, #1]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d104      	bne.n	800cbfa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	f000 fefc 	bl	800d9f0 <lwip_netconn_do_writemore>
 800cbf8:	e007      	b.n	800cc0a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	785b      	ldrb	r3, [r3, #1]
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d103      	bne.n	800cc0a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cc02:	2101      	movs	r1, #1
 800cc04:	6978      	ldr	r0, [r7, #20]
 800cc06:	f000 fb9d 	bl	800d344 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01d      	beq.n	800cc4e <sent_tcp+0x92>
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cc1a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800cc1e:	d316      	bcc.n	800cc4e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cc28:	2b04      	cmp	r3, #4
 800cc2a:	d810      	bhi.n	800cc4e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	7f1b      	ldrb	r3, [r3, #28]
 800cc30:	f023 0310 	bic.w	r3, r3, #16
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d005      	beq.n	800cc4e <sent_tcp+0x92>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc46:	88fa      	ldrh	r2, [r7, #6]
 800cc48:	2102      	movs	r1, #2
 800cc4a:	6978      	ldr	r0, [r7, #20]
 800cc4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	0801c8f0 	.word	0x0801c8f0
 800cc5c:	0801ca48 	.word	0x0801ca48
 800cc60:	0801c934 	.word	0x0801c934

0800cc64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b088      	sub	sp, #32
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <err_tcp+0x24>
 800cc7a:	4b5f      	ldr	r3, [pc, #380]	@ (800cdf8 <err_tcp+0x194>)
 800cc7c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800cc80:	495e      	ldr	r1, [pc, #376]	@ (800cdfc <err_tcp+0x198>)
 800cc82:	485f      	ldr	r0, [pc, #380]	@ (800ce00 <err_tcp+0x19c>)
 800cc84:	f00d f866 	bl	8019d54 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800cc88:	f00c fb0e 	bl	80192a8 <sys_arch_protect>
 800cc8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	2200      	movs	r2, #0
 800cc92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	7f1b      	ldrb	r3, [r3, #28]
 800cc9e:	f043 0301 	orr.w	r3, r3, #1
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ccb4:	69b8      	ldr	r0, [r7, #24]
 800ccb6:	f00c fb05 	bl	80192c4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d005      	beq.n	800ccce <err_tcp+0x6a>
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	2104      	movs	r1, #4
 800ccca:	69f8      	ldr	r0, [r7, #28]
 800cccc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d005      	beq.n	800cce2 <err_tcp+0x7e>
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2100      	movs	r1, #0
 800ccde:	69f8      	ldr	r0, [r7, #28]
 800cce0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <err_tcp+0x92>
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2102      	movs	r1, #2
 800ccf2:	69f8      	ldr	r0, [r7, #28]
 800ccf4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ccf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fd86 	bl	800c80c <lwip_netconn_err_to_msg>
 800cd00:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	3310      	adds	r3, #16
 800cd06:	4618      	mov	r0, r3
 800cd08:	f00c f9c4 	bl	8019094 <sys_mbox_valid>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	3310      	adds	r3, #16
 800cd16:	6939      	ldr	r1, [r7, #16]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f00c f959 	bl	8018fd0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	3314      	adds	r3, #20
 800cd22:	4618      	mov	r0, r3
 800cd24:	f00c f9b6 	bl	8019094 <sys_mbox_valid>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d005      	beq.n	800cd3a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	3314      	adds	r3, #20
 800cd32:	6939      	ldr	r1, [r7, #16]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f00c f94b 	bl	8018fd0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d005      	beq.n	800cd4c <err_tcp+0xe8>
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	2b04      	cmp	r3, #4
 800cd44:	d002      	beq.n	800cd4c <err_tcp+0xe8>
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d143      	bne.n	800cdd4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	7f1b      	ldrb	r3, [r3, #28]
 800cd50:	f003 0304 	and.w	r3, r3, #4
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bf14      	ite	ne
 800cd58:	2301      	movne	r3, #1
 800cd5a:	2300      	moveq	r3, #0
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	7f1b      	ldrb	r3, [r3, #28]
 800cd64:	f023 0304 	bic.w	r3, r3, #4
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d13b      	bne.n	800cdec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d106      	bne.n	800cd8a <err_tcp+0x126>
 800cd7c:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf8 <err_tcp+0x194>)
 800cd7e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800cd82:	4920      	ldr	r1, [pc, #128]	@ (800ce04 <err_tcp+0x1a0>)
 800cd84:	481e      	ldr	r0, [pc, #120]	@ (800ce00 <err_tcp+0x19c>)
 800cd86:	f00c ffe5 	bl	8019d54 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d104      	bne.n	800cd9a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	2200      	movs	r2, #0
 800cd96:	711a      	strb	r2, [r3, #4]
 800cd98:	e003      	b.n	800cda2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	78fa      	ldrb	r2, [r7, #3]
 800cda0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800cdac:	68b8      	ldr	r0, [r7, #8]
 800cdae:	f00c f9ff 	bl	80191b0 <sys_sem_valid>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d106      	bne.n	800cdc6 <err_tcp+0x162>
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf8 <err_tcp+0x194>)
 800cdba:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800cdbe:	4912      	ldr	r1, [pc, #72]	@ (800ce08 <err_tcp+0x1a4>)
 800cdc0:	480f      	ldr	r0, [pc, #60]	@ (800ce00 <err_tcp+0x19c>)
 800cdc2:	f00c ffc7 	bl	8019d54 <iprintf>
      conn->current_msg = NULL;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800cdcc:	68b8      	ldr	r0, [r7, #8]
 800cdce:	f00c f9d5 	bl	801917c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800cdd2:	e00b      	b.n	800cdec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d008      	beq.n	800cdee <err_tcp+0x18a>
 800cddc:	4b06      	ldr	r3, [pc, #24]	@ (800cdf8 <err_tcp+0x194>)
 800cdde:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800cde2:	490a      	ldr	r1, [pc, #40]	@ (800ce0c <err_tcp+0x1a8>)
 800cde4:	4806      	ldr	r0, [pc, #24]	@ (800ce00 <err_tcp+0x19c>)
 800cde6:	f00c ffb5 	bl	8019d54 <iprintf>
  }
}
 800cdea:	e000      	b.n	800cdee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800cdec:	bf00      	nop
}
 800cdee:	bf00      	nop
 800cdf0:	3720      	adds	r7, #32
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	0801c8f0 	.word	0x0801c8f0
 800cdfc:	0801ca48 	.word	0x0801ca48
 800ce00:	0801c934 	.word	0x0801c934
 800ce04:	0801ca58 	.word	0x0801ca58
 800ce08:	0801ca74 	.word	0x0801ca74
 800ce0c:	0801ca90 	.word	0x0801ca90

0800ce10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f004 fccd 	bl	80117c0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ce26:	490a      	ldr	r1, [pc, #40]	@ (800ce50 <setup_tcp+0x40>)
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f004 fcdb 	bl	80117e4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ce2e:	4909      	ldr	r1, [pc, #36]	@ (800ce54 <setup_tcp+0x44>)
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f004 fcf9 	bl	8011828 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ce36:	2202      	movs	r2, #2
 800ce38:	4907      	ldr	r1, [pc, #28]	@ (800ce58 <setup_tcp+0x48>)
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f004 fd50 	bl	80118e0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ce40:	4906      	ldr	r1, [pc, #24]	@ (800ce5c <setup_tcp+0x4c>)
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f004 fd12 	bl	801186c <tcp_err>
}
 800ce48:	bf00      	nop
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	0800c9e9 	.word	0x0800c9e9
 800ce54:	0800cbbd 	.word	0x0800cbbd
 800ce58:	0800caf5 	.word	0x0800caf5
 800ce5c:	0800cc65 	.word	0x0800cc65

0800ce60 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ce60:	b590      	push	{r4, r7, lr}
 800ce62:	b089      	sub	sp, #36	@ 0x24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <accept_function+0x1e>
    return ERR_VAL;
 800ce78:	f06f 0305 	mvn.w	r3, #5
 800ce7c:	e0a1      	b.n	800cfc2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	3314      	adds	r3, #20
 800ce82:	4618      	mov	r0, r3
 800ce84:	f00c f906 	bl	8019094 <sys_mbox_valid>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d102      	bne.n	800ce94 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ce8e:	f06f 0305 	mvn.w	r3, #5
 800ce92:	e096      	b.n	800cfc2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d11b      	bne.n	800ced2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	f103 0414 	add.w	r4, r3, #20
 800cea0:	f06f 000c 	mvn.w	r0, #12
 800cea4:	f7ff fcb2 	bl	800c80c <lwip_netconn_err_to_msg>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4620      	mov	r0, r4
 800ceae:	f00c f88f 	bl	8018fd0 <sys_mbox_trypost>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d109      	bne.n	800cecc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <accept_function+0x6c>
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec4:	2200      	movs	r2, #0
 800cec6:	2100      	movs	r1, #0
 800cec8:	69f8      	ldr	r0, [r7, #28]
 800ceca:	4798      	blx	r3
    }
    return ERR_VAL;
 800cecc:	f06f 0305 	mvn.w	r3, #5
 800ced0:	e077      	b.n	800cfc2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ced2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <accept_function+0x88>
 800ceda:	4b3c      	ldr	r3, [pc, #240]	@ (800cfcc <accept_function+0x16c>)
 800cedc:	f240 222a 	movw	r2, #554	@ 0x22a
 800cee0:	493b      	ldr	r1, [pc, #236]	@ (800cfd0 <accept_function+0x170>)
 800cee2:	483c      	ldr	r0, [pc, #240]	@ (800cfd4 <accept_function+0x174>)
 800cee4:	f00c ff36 	bl	8019d54 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	781a      	ldrb	r2, [r3, #0]
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f000 f8f0 	bl	800d0d8 <netconn_alloc>
 800cef8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d11b      	bne.n	800cf38 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f103 0414 	add.w	r4, r3, #20
 800cf06:	f06f 000c 	mvn.w	r0, #12
 800cf0a:	f7ff fc7f 	bl	800c80c <lwip_netconn_err_to_msg>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	4619      	mov	r1, r3
 800cf12:	4620      	mov	r0, r4
 800cf14:	f00c f85c 	bl	8018fd0 <sys_mbox_trypost>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d109      	bne.n	800cf32 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d005      	beq.n	800cf32 <accept_function+0xd2>
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	69f8      	ldr	r0, [r7, #28]
 800cf30:	4798      	blx	r3
    }
    return ERR_MEM;
 800cf32:	f04f 33ff 	mov.w	r3, #4294967295
 800cf36:	e044      	b.n	800cfc2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800cf3e:	69b8      	ldr	r0, [r7, #24]
 800cf40:	f7ff ff66 	bl	800ce10 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	3314      	adds	r3, #20
 800cf48:	69b9      	ldr	r1, [r7, #24]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f00c f840 	bl	8018fd0 <sys_mbox_trypost>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d02a      	beq.n	800cfac <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6978      	ldr	r0, [r7, #20]
 800cf60:	f004 fc2e 	bl	80117c0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800cf64:	2100      	movs	r1, #0
 800cf66:	6978      	ldr	r0, [r7, #20]
 800cf68:	f004 fc3c 	bl	80117e4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6978      	ldr	r0, [r7, #20]
 800cf70:	f004 fc5a 	bl	8011828 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800cf74:	2200      	movs	r2, #0
 800cf76:	2100      	movs	r1, #0
 800cf78:	6978      	ldr	r0, [r7, #20]
 800cf7a:	f004 fcb1 	bl	80118e0 <tcp_poll>
    tcp_err(pcb, NULL);
 800cf7e:	2100      	movs	r1, #0
 800cf80:	6978      	ldr	r0, [r7, #20]
 800cf82:	f004 fc73 	bl	801186c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	3310      	adds	r3, #16
 800cf90:	4618      	mov	r0, r3
 800cf92:	f00c f80b 	bl	8018fac <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	3310      	adds	r3, #16
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f00c f88b 	bl	80190b6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800cfa0:	69b8      	ldr	r0, [r7, #24]
 800cfa2:	f000 f907 	bl	800d1b4 <netconn_free>
    return ERR_MEM;
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfaa:	e00a      	b.n	800cfc2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <accept_function+0x160>
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2100      	movs	r1, #0
 800cfbc:	69f8      	ldr	r0, [r7, #28]
 800cfbe:	4798      	blx	r3
  }

  return ERR_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3724      	adds	r7, #36	@ 0x24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd90      	pop	{r4, r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	0801c8f0 	.word	0x0801c8f0
 800cfd0:	0801caac 	.word	0x0801caac
 800cfd4:	0801c934 	.word	0x0801c934

0800cfd8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d006      	beq.n	800cffc <pcb_new+0x24>
 800cfee:	4b2b      	ldr	r3, [pc, #172]	@ (800d09c <pcb_new+0xc4>)
 800cff0:	f240 2265 	movw	r2, #613	@ 0x265
 800cff4:	492a      	ldr	r1, [pc, #168]	@ (800d0a0 <pcb_new+0xc8>)
 800cff6:	482b      	ldr	r0, [pc, #172]	@ (800d0a4 <pcb_new+0xcc>)
 800cff8:	f00c feac 	bl	8019d54 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d006:	2b10      	cmp	r3, #16
 800d008:	d022      	beq.n	800d050 <pcb_new+0x78>
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	d133      	bne.n	800d076 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	4618      	mov	r0, r3
 800d016:	f009 fcac 	bl	8016972 <udp_new_ip_type>
 800d01a:	4603      	mov	r3, r0
 800d01c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d02a      	beq.n	800d07e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	2b22      	cmp	r3, #34	@ 0x22
 800d030:	d104      	bne.n	800d03c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6858      	ldr	r0, [r3, #4]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	461a      	mov	r2, r3
 800d048:	4917      	ldr	r1, [pc, #92]	@ (800d0a8 <pcb_new+0xd0>)
 800d04a:	f009 fc19 	bl	8016880 <udp_recv>
      }
      break;
 800d04e:	e016      	b.n	800d07e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681c      	ldr	r4, [r3, #0]
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	4618      	mov	r0, r3
 800d058:	f004 fba4 	bl	80117a4 <tcp_new_ip_type>
 800d05c:	4603      	mov	r3, r0
 800d05e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fece 	bl	800ce10 <setup_tcp>
      }
      break;
 800d074:	e005      	b.n	800d082 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	22fa      	movs	r2, #250	@ 0xfa
 800d07a:	711a      	strb	r2, [r3, #4]
      return;
 800d07c:	e00a      	b.n	800d094 <pcb_new+0xbc>
      break;
 800d07e:	bf00      	nop
 800d080:	e000      	b.n	800d084 <pcb_new+0xac>
      break;
 800d082:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	22ff      	movs	r2, #255	@ 0xff
 800d092:	711a      	strb	r2, [r3, #4]
  }
}
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	bd90      	pop	{r4, r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0801c8f0 	.word	0x0801c8f0
 800d0a0:	0801cad4 	.word	0x0801cad4
 800d0a4:	0801c934 	.word	0x0801c934
 800d0a8:	0800c8ed 	.word	0x0800c8ed

0800d0ac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff ff85 	bl	800cfd8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4603      	mov	r3, r0
 800d0e0:	6039      	str	r1, [r7, #0]
 800d0e2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d0e8:	2007      	movs	r0, #7
 800d0ea:	f001 fdf3 	bl	800ecd4 <memp_malloc>
 800d0ee:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <netconn_alloc+0x22>
    return NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e052      	b.n	800d1a0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	79fa      	ldrb	r2, [r7, #7]
 800d104:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d112:	2b10      	cmp	r3, #16
 800d114:	d004      	beq.n	800d120 <netconn_alloc+0x48>
 800d116:	2b20      	cmp	r3, #32
 800d118:	d105      	bne.n	800d126 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d11a:	2306      	movs	r3, #6
 800d11c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d11e:	e00a      	b.n	800d136 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d120:	2306      	movs	r3, #6
 800d122:	617b      	str	r3, [r7, #20]
      break;
 800d124:	e007      	b.n	800d136 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d126:	4b20      	ldr	r3, [pc, #128]	@ (800d1a8 <netconn_alloc+0xd0>)
 800d128:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800d12c:	491f      	ldr	r1, [pc, #124]	@ (800d1ac <netconn_alloc+0xd4>)
 800d12e:	4820      	ldr	r0, [pc, #128]	@ (800d1b0 <netconn_alloc+0xd8>)
 800d130:	f00c fe10 	bl	8019d54 <iprintf>
      goto free_and_return;
 800d134:	e02f      	b.n	800d196 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3310      	adds	r3, #16
 800d13a:	6979      	ldr	r1, [r7, #20]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f00b ff1b 	bl	8018f78 <sys_mbox_new>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d125      	bne.n	800d194 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	330c      	adds	r3, #12
 800d14c:	2100      	movs	r1, #0
 800d14e:	4618      	mov	r0, r3
 800d150:	f00b ffbe 	bl	80190d0 <sys_sem_new>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3310      	adds	r3, #16
 800d15e:	4618      	mov	r0, r3
 800d160:	f00b ff24 	bl	8018fac <sys_mbox_free>
    goto free_and_return;
 800d164:	e017      	b.n	800d196 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3314      	adds	r3, #20
 800d16a:	4618      	mov	r0, r3
 800d16c:	f00b ffa3 	bl	80190b6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f04f 32ff 	mov.w	r2, #4294967295
 800d17c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2200      	movs	r2, #0
 800d188:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	7cfa      	ldrb	r2, [r7, #19]
 800d18e:	771a      	strb	r2, [r3, #28]
  return conn;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	e005      	b.n	800d1a0 <netconn_alloc+0xc8>
    goto free_and_return;
 800d194:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d196:	68f9      	ldr	r1, [r7, #12]
 800d198:	2007      	movs	r0, #7
 800d19a:	f001 fded 	bl	800ed78 <memp_free>
  return NULL;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	0801c8f0 	.word	0x0801c8f0
 800d1ac:	0801caf4 	.word	0x0801caf4
 800d1b0:	0801c934 	.word	0x0801c934

0800d1b4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d006      	beq.n	800d1d2 <netconn_free+0x1e>
 800d1c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d234 <netconn_free+0x80>)
 800d1c6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d1ca:	491b      	ldr	r1, [pc, #108]	@ (800d238 <netconn_free+0x84>)
 800d1cc:	481b      	ldr	r0, [pc, #108]	@ (800d23c <netconn_free+0x88>)
 800d1ce:	f00c fdc1 	bl	8019d54 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3310      	adds	r3, #16
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f00b ff5c 	bl	8019094 <sys_mbox_valid>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d006      	beq.n	800d1f0 <netconn_free+0x3c>
 800d1e2:	4b14      	ldr	r3, [pc, #80]	@ (800d234 <netconn_free+0x80>)
 800d1e4:	f240 3223 	movw	r2, #803	@ 0x323
 800d1e8:	4915      	ldr	r1, [pc, #84]	@ (800d240 <netconn_free+0x8c>)
 800d1ea:	4814      	ldr	r0, [pc, #80]	@ (800d23c <netconn_free+0x88>)
 800d1ec:	f00c fdb2 	bl	8019d54 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3314      	adds	r3, #20
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f00b ff4d 	bl	8019094 <sys_mbox_valid>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d006      	beq.n	800d20e <netconn_free+0x5a>
 800d200:	4b0c      	ldr	r3, [pc, #48]	@ (800d234 <netconn_free+0x80>)
 800d202:	f240 3226 	movw	r2, #806	@ 0x326
 800d206:	490f      	ldr	r1, [pc, #60]	@ (800d244 <netconn_free+0x90>)
 800d208:	480c      	ldr	r0, [pc, #48]	@ (800d23c <netconn_free+0x88>)
 800d20a:	f00c fda3 	bl	8019d54 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	330c      	adds	r3, #12
 800d212:	4618      	mov	r0, r3
 800d214:	f00b ffbf 	bl	8019196 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	330c      	adds	r3, #12
 800d21c:	4618      	mov	r0, r3
 800d21e:	f00b ffd8 	bl	80191d2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	2007      	movs	r0, #7
 800d226:	f001 fda7 	bl	800ed78 <memp_free>
}
 800d22a:	bf00      	nop
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	0801c8f0 	.word	0x0801c8f0
 800d238:	0801cb1c 	.word	0x0801cb1c
 800d23c:	0801c934 	.word	0x0801c934
 800d240:	0801cb4c 	.word	0x0801cb4c
 800d244:	0801cb88 	.word	0x0801cb88

0800d248 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3310      	adds	r3, #16
 800d254:	4618      	mov	r0, r3
 800d256:	f00b ff1d 	bl	8019094 <sys_mbox_valid>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d02f      	beq.n	800d2c0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d260:	e018      	b.n	800d294 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d26a:	2b10      	cmp	r3, #16
 800d26c:	d10e      	bne.n	800d28c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	f107 020f 	add.w	r2, r7, #15
 800d274:	4611      	mov	r1, r2
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff fafe 	bl	800c878 <lwip_netconn_is_err_msg>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d108      	bne.n	800d294 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	4618      	mov	r0, r3
 800d286:	f002 fc1b 	bl	800fac0 <pbuf_free>
 800d28a:	e003      	b.n	800d294 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fe92 	bl	800dfb8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3310      	adds	r3, #16
 800d298:	f107 0210 	add.w	r2, r7, #16
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f00b fee1 	bl	8019066 <sys_arch_mbox_tryfetch>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d1da      	bne.n	800d262 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3310      	adds	r3, #16
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f00b fe7b 	bl	8018fac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f00b fefb 	bl	80190b6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3314      	adds	r3, #20
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f00b fee5 	bl	8019094 <sys_mbox_valid>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d034      	beq.n	800d33a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d2d0:	e01d      	b.n	800d30e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f107 020e 	add.w	r2, r7, #14
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff facc 	bl	800c878 <lwip_netconn_is_err_msg>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d113      	bne.n	800d30e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d2ea:	6978      	ldr	r0, [r7, #20]
 800d2ec:	f7ff ffac 	bl	800d248 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d007      	beq.n	800d308 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f003 f9cf 	bl	80106a0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	2200      	movs	r2, #0
 800d306:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d308:	6978      	ldr	r0, [r7, #20]
 800d30a:	f7ff ff53 	bl	800d1b4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	3314      	adds	r3, #20
 800d312:	f107 0210 	add.w	r2, r7, #16
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f00b fea4 	bl	8019066 <sys_arch_mbox_tryfetch>
 800d31e:	4603      	mov	r3, r0
 800d320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d324:	d1d5      	bne.n	800d2d2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3314      	adds	r3, #20
 800d32a:	4618      	mov	r0, r3
 800d32c:	f00b fe3e 	bl	8018fac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3314      	adds	r3, #20
 800d334:	4618      	mov	r0, r3
 800d336:	f00b febe 	bl	80190b6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d33a:	bf00      	nop
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <lwip_netconn_do_close_internal+0x24>
 800d35a:	4b87      	ldr	r3, [pc, #540]	@ (800d578 <lwip_netconn_do_close_internal+0x234>)
 800d35c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800d360:	4986      	ldr	r1, [pc, #536]	@ (800d57c <lwip_netconn_do_close_internal+0x238>)
 800d362:	4887      	ldr	r0, [pc, #540]	@ (800d580 <lwip_netconn_do_close_internal+0x23c>)
 800d364:	f00c fcf6 	bl	8019d54 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d370:	2b10      	cmp	r3, #16
 800d372:	d006      	beq.n	800d382 <lwip_netconn_do_close_internal+0x3e>
 800d374:	4b80      	ldr	r3, [pc, #512]	@ (800d578 <lwip_netconn_do_close_internal+0x234>)
 800d376:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800d37a:	4982      	ldr	r1, [pc, #520]	@ (800d584 <lwip_netconn_do_close_internal+0x240>)
 800d37c:	4880      	ldr	r0, [pc, #512]	@ (800d580 <lwip_netconn_do_close_internal+0x23c>)
 800d37e:	f00c fce9 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	785b      	ldrb	r3, [r3, #1]
 800d386:	2b04      	cmp	r3, #4
 800d388:	d006      	beq.n	800d398 <lwip_netconn_do_close_internal+0x54>
 800d38a:	4b7b      	ldr	r3, [pc, #492]	@ (800d578 <lwip_netconn_do_close_internal+0x234>)
 800d38c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800d390:	497d      	ldr	r1, [pc, #500]	@ (800d588 <lwip_netconn_do_close_internal+0x244>)
 800d392:	487b      	ldr	r0, [pc, #492]	@ (800d580 <lwip_netconn_do_close_internal+0x23c>)
 800d394:	f00c fcde 	bl	8019d54 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d106      	bne.n	800d3ae <lwip_netconn_do_close_internal+0x6a>
 800d3a0:	4b75      	ldr	r3, [pc, #468]	@ (800d578 <lwip_netconn_do_close_internal+0x234>)
 800d3a2:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800d3a6:	4979      	ldr	r1, [pc, #484]	@ (800d58c <lwip_netconn_do_close_internal+0x248>)
 800d3a8:	4875      	ldr	r0, [pc, #468]	@ (800d580 <lwip_netconn_do_close_internal+0x23c>)
 800d3aa:	f00c fcd3 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a1b      	ldr	r3, [r3, #32]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d106      	bne.n	800d3c4 <lwip_netconn_do_close_internal+0x80>
 800d3b6:	4b70      	ldr	r3, [pc, #448]	@ (800d578 <lwip_netconn_do_close_internal+0x234>)
 800d3b8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d3bc:	4974      	ldr	r1, [pc, #464]	@ (800d590 <lwip_netconn_do_close_internal+0x24c>)
 800d3be:	4870      	ldr	r0, [pc, #448]	@ (800d580 <lwip_netconn_do_close_internal+0x23c>)
 800d3c0:	f00c fcc8 	bl	8019d54 <iprintf>

  tpcb = conn->pcb.tcp;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	7a1b      	ldrb	r3, [r3, #8]
 800d3d0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	f003 0302 	and.w	r3, r3, #2
 800d3e0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d102      	bne.n	800d3ee <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	75bb      	strb	r3, [r7, #22]
 800d3ec:	e01f      	b.n	800d42e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d3ee:	7bbb      	ldrb	r3, [r7, #14]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00e      	beq.n	800d412 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d3f8:	2b05      	cmp	r3, #5
 800d3fa:	d007      	beq.n	800d40c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d400:	2b06      	cmp	r3, #6
 800d402:	d003      	beq.n	800d40c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d408:	2b08      	cmp	r3, #8
 800d40a:	d102      	bne.n	800d412 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d40c:	2301      	movs	r3, #1
 800d40e:	75bb      	strb	r3, [r7, #22]
 800d410:	e00d      	b.n	800d42e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d412:	7b7b      	ldrb	r3, [r7, #13]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d008      	beq.n	800d42a <lwip_netconn_do_close_internal+0xe6>
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	8b5b      	ldrh	r3, [r3, #26]
 800d41c:	f003 0310 	and.w	r3, r3, #16
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d424:	2301      	movs	r3, #1
 800d426:	75bb      	strb	r3, [r7, #22]
 800d428:	e001      	b.n	800d42e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d42e:	7dbb      	ldrb	r3, [r7, #22]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d434:	2100      	movs	r1, #0
 800d436:	6938      	ldr	r0, [r7, #16]
 800d438:	f004 f9c2 	bl	80117c0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	7d1b      	ldrb	r3, [r3, #20]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d104      	bne.n	800d44e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d444:	2100      	movs	r1, #0
 800d446:	6938      	ldr	r0, [r7, #16]
 800d448:	f004 fa32 	bl	80118b0 <tcp_accept>
 800d44c:	e01d      	b.n	800d48a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d44e:	7bbb      	ldrb	r3, [r7, #14]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d454:	2100      	movs	r1, #0
 800d456:	6938      	ldr	r0, [r7, #16]
 800d458:	f004 f9c4 	bl	80117e4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d45c:	2100      	movs	r1, #0
 800d45e:	6938      	ldr	r0, [r7, #16]
 800d460:	f004 fa26 	bl	80118b0 <tcp_accept>
    }
    if (shut_tx) {
 800d464:	7b7b      	ldrb	r3, [r7, #13]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d46a:	2100      	movs	r1, #0
 800d46c:	6938      	ldr	r0, [r7, #16]
 800d46e:	f004 f9db 	bl	8011828 <tcp_sent>
    }
    if (shut_close) {
 800d472:	7dbb      	ldrb	r3, [r7, #22]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d008      	beq.n	800d48a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	6938      	ldr	r0, [r7, #16]
 800d47e:	f004 fa2f 	bl	80118e0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d482:	2100      	movs	r1, #0
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f004 f9f1 	bl	801186c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d48a:	7dbb      	ldrb	r3, [r7, #22]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d490:	6938      	ldr	r0, [r7, #16]
 800d492:	f002 ffbf 	bl	8010414 <tcp_close>
 800d496:	4603      	mov	r3, r0
 800d498:	75fb      	strb	r3, [r7, #23]
 800d49a:	e007      	b.n	800d4ac <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
 800d49e:	7b7a      	ldrb	r2, [r7, #13]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6938      	ldr	r0, [r7, #16]
 800d4a4:	f002 ffe2 	bl	801046c <tcp_shutdown>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d4ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	757b      	strb	r3, [r7, #21]
 800d4b8:	e016      	b.n	800d4e8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d4ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	d10f      	bne.n	800d4e4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a1b      	ldr	r3, [r3, #32]
 800d4c8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10c      	bne.n	800d4e8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d4d2:	7dbb      	ldrb	r3, [r7, #22]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d007      	beq.n	800d4e8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d4d8:	6938      	ldr	r0, [r7, #16]
 800d4da:	f003 f8e1 	bl	80106a0 <tcp_abort>
          err = ERR_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	75fb      	strb	r3, [r7, #23]
 800d4e2:	e001      	b.n	800d4e8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d4e8:	7d7b      	ldrb	r3, [r7, #21]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d052      	beq.n	800d594 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	330c      	adds	r3, #12
 800d4f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	7dfa      	ldrb	r2, [r7, #23]
 800d4fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d129      	bne.n	800d568 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d514:	7dbb      	ldrb	r3, [r7, #22]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00c      	beq.n	800d534 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <lwip_netconn_do_close_internal+0x1f0>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d52c:	2200      	movs	r2, #0
 800d52e:	2104      	movs	r1, #4
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	4798      	blx	r3
      }
      if (shut_rx) {
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d009      	beq.n	800d54e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d005      	beq.n	800d54e <lwip_netconn_do_close_internal+0x20a>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	4798      	blx	r3
      }
      if (shut_tx) {
 800d54e:	7b7b      	ldrb	r3, [r7, #13]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d009      	beq.n	800d568 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d005      	beq.n	800d568 <lwip_netconn_do_close_internal+0x224>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d560:	2200      	movs	r2, #0
 800d562:	2102      	movs	r1, #2
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d568:	78fb      	ldrb	r3, [r7, #3]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d56e:	68b8      	ldr	r0, [r7, #8]
 800d570:	f00b fe04 	bl	801917c <sys_sem_signal>
    }
    return ERR_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	e03c      	b.n	800d5f2 <lwip_netconn_do_close_internal+0x2ae>
 800d578:	0801c8f0 	.word	0x0801c8f0
 800d57c:	0801cbc4 	.word	0x0801cbc4
 800d580:	0801c934 	.word	0x0801c934
 800d584:	0801cbd4 	.word	0x0801cbd4
 800d588:	0801cbf4 	.word	0x0801cbf4
 800d58c:	0801cc18 	.word	0x0801cc18
 800d590:	0801ca58 	.word	0x0801ca58
  }
  if (!close_finished) {
 800d594:	7d7b      	ldrb	r3, [r7, #21]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d11e      	bne.n	800d5d8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	7d1b      	ldrb	r3, [r3, #20]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d106      	bne.n	800d5b0 <lwip_netconn_do_close_internal+0x26c>
 800d5a2:	4b16      	ldr	r3, [pc, #88]	@ (800d5fc <lwip_netconn_do_close_internal+0x2b8>)
 800d5a4:	f240 4241 	movw	r2, #1089	@ 0x441
 800d5a8:	4915      	ldr	r1, [pc, #84]	@ (800d600 <lwip_netconn_do_close_internal+0x2bc>)
 800d5aa:	4816      	ldr	r0, [pc, #88]	@ (800d604 <lwip_netconn_do_close_internal+0x2c0>)
 800d5ac:	f00c fbd2 	bl	8019d54 <iprintf>
    if (shut_tx) {
 800d5b0:	7b7b      	ldrb	r3, [r7, #13]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d5b6:	4914      	ldr	r1, [pc, #80]	@ (800d608 <lwip_netconn_do_close_internal+0x2c4>)
 800d5b8:	6938      	ldr	r0, [r7, #16]
 800d5ba:	f004 f935 	bl	8011828 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4912      	ldr	r1, [pc, #72]	@ (800d60c <lwip_netconn_do_close_internal+0x2c8>)
 800d5c2:	6938      	ldr	r0, [r7, #16]
 800d5c4:	f004 f98c 	bl	80118e0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d5c8:	4911      	ldr	r1, [pc, #68]	@ (800d610 <lwip_netconn_do_close_internal+0x2cc>)
 800d5ca:	6938      	ldr	r0, [r7, #16]
 800d5cc:	f004 f94e 	bl	801186c <tcp_err>
    tcp_arg(tpcb, conn);
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	6938      	ldr	r0, [r7, #16]
 800d5d4:	f004 f8f4 	bl	80117c0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <lwip_netconn_do_close_internal+0x2aa>
 800d5e0:	4b06      	ldr	r3, [pc, #24]	@ (800d5fc <lwip_netconn_do_close_internal+0x2b8>)
 800d5e2:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d5e6:	490b      	ldr	r1, [pc, #44]	@ (800d614 <lwip_netconn_do_close_internal+0x2d0>)
 800d5e8:	4806      	ldr	r0, [pc, #24]	@ (800d604 <lwip_netconn_do_close_internal+0x2c0>)
 800d5ea:	f00c fbb3 	bl	8019d54 <iprintf>
  return err;
 800d5ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3718      	adds	r7, #24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	0801c8f0 	.word	0x0801c8f0
 800d600:	0801cc2c 	.word	0x0801cc2c
 800d604:	0801c934 	.word	0x0801c934
 800d608:	0800cbbd 	.word	0x0800cbbd
 800d60c:	0800caf5 	.word	0x0800caf5
 800d610:	0800cc65 	.word	0x0800cc65
 800d614:	0801cc50 	.word	0x0801cc50

0800d618 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	785b      	ldrb	r3, [r3, #1]
 800d62a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d62c:	7afb      	ldrb	r3, [r7, #11]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00d      	beq.n	800d64e <lwip_netconn_do_delconn+0x36>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d63c:	2b10      	cmp	r3, #16
 800d63e:	d006      	beq.n	800d64e <lwip_netconn_do_delconn+0x36>
 800d640:	4b60      	ldr	r3, [pc, #384]	@ (800d7c4 <lwip_netconn_do_delconn+0x1ac>)
 800d642:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d646:	4960      	ldr	r1, [pc, #384]	@ (800d7c8 <lwip_netconn_do_delconn+0x1b0>)
 800d648:	4860      	ldr	r0, [pc, #384]	@ (800d7cc <lwip_netconn_do_delconn+0x1b4>)
 800d64a:	f00c fb83 	bl	8019d54 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d64e:	7afb      	ldrb	r3, [r7, #11]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d005      	beq.n	800d660 <lwip_netconn_do_delconn+0x48>
 800d654:	7afb      	ldrb	r3, [r7, #11]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d002      	beq.n	800d660 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d109      	bne.n	800d674 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d660:	7afb      	ldrb	r3, [r7, #11]
 800d662:	2b03      	cmp	r3, #3
 800d664:	d10a      	bne.n	800d67c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	7f1b      	ldrb	r3, [r3, #28]
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b00      	cmp	r3, #0
 800d672:	d103      	bne.n	800d67c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	22fb      	movs	r2, #251	@ 0xfb
 800d678:	711a      	strb	r2, [r3, #4]
 800d67a:	e097      	b.n	800d7ac <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d67c:	7afb      	ldrb	r3, [r7, #11]
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d10d      	bne.n	800d69e <lwip_netconn_do_delconn+0x86>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	7f1b      	ldrb	r3, [r3, #28]
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d106      	bne.n	800d69e <lwip_netconn_do_delconn+0x86>
 800d690:	4b4c      	ldr	r3, [pc, #304]	@ (800d7c4 <lwip_netconn_do_delconn+0x1ac>)
 800d692:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d696:	494e      	ldr	r1, [pc, #312]	@ (800d7d0 <lwip_netconn_do_delconn+0x1b8>)
 800d698:	484c      	ldr	r0, [pc, #304]	@ (800d7cc <lwip_netconn_do_delconn+0x1b4>)
 800d69a:	f00c fb5b 	bl	8019d54 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fdcd 	bl	800d248 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d05f      	beq.n	800d778 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6c2:	2b10      	cmp	r3, #16
 800d6c4:	d00d      	beq.n	800d6e2 <lwip_netconn_do_delconn+0xca>
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	d151      	bne.n	800d76e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f009 f8f0 	bl	80168c0 <udp_remove>
          break;
 800d6e0:	e046      	b.n	800d770 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <lwip_netconn_do_delconn+0xe2>
 800d6ec:	4b35      	ldr	r3, [pc, #212]	@ (800d7c4 <lwip_netconn_do_delconn+0x1ac>)
 800d6ee:	f240 4294 	movw	r2, #1172	@ 0x494
 800d6f2:	4938      	ldr	r1, [pc, #224]	@ (800d7d4 <lwip_netconn_do_delconn+0x1bc>)
 800d6f4:	4835      	ldr	r0, [pc, #212]	@ (800d7cc <lwip_netconn_do_delconn+0x1b4>)
 800d6f6:	f00c fb2d 	bl	8019d54 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2204      	movs	r2, #4
 800d700:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2203      	movs	r2, #3
 800d706:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f7ff fe14 	bl	800d344 <lwip_netconn_do_close_internal>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d04b      	beq.n	800d7ba <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	785b      	ldrb	r3, [r3, #1]
 800d728:	2b04      	cmp	r3, #4
 800d72a:	d006      	beq.n	800d73a <lwip_netconn_do_delconn+0x122>
 800d72c:	4b25      	ldr	r3, [pc, #148]	@ (800d7c4 <lwip_netconn_do_delconn+0x1ac>)
 800d72e:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d732:	4929      	ldr	r1, [pc, #164]	@ (800d7d8 <lwip_netconn_do_delconn+0x1c0>)
 800d734:	4825      	ldr	r0, [pc, #148]	@ (800d7cc <lwip_netconn_do_delconn+0x1b4>)
 800d736:	f00c fb0d 	bl	8019d54 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d73a:	4828      	ldr	r0, [pc, #160]	@ (800d7dc <lwip_netconn_do_delconn+0x1c4>)
 800d73c:	f00b fd87 	bl	801924e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	330c      	adds	r3, #12
 800d746:	2100      	movs	r1, #0
 800d748:	4618      	mov	r0, r3
 800d74a:	f00b fce6 	bl	801911a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d74e:	4823      	ldr	r0, [pc, #140]	@ (800d7dc <lwip_netconn_do_delconn+0x1c4>)
 800d750:	f00b fd6e 	bl	8019230 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	785b      	ldrb	r3, [r3, #1]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d02d      	beq.n	800d7ba <lwip_netconn_do_delconn+0x1a2>
 800d75e:	4b19      	ldr	r3, [pc, #100]	@ (800d7c4 <lwip_netconn_do_delconn+0x1ac>)
 800d760:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d764:	491c      	ldr	r1, [pc, #112]	@ (800d7d8 <lwip_netconn_do_delconn+0x1c0>)
 800d766:	4819      	ldr	r0, [pc, #100]	@ (800d7cc <lwip_netconn_do_delconn+0x1b4>)
 800d768:	f00c faf4 	bl	8019d54 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d76c:	e025      	b.n	800d7ba <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d76e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <lwip_netconn_do_delconn+0x17a>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	6810      	ldr	r0, [r2, #0]
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <lwip_netconn_do_delconn+0x194>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	6810      	ldr	r0, [r2, #0]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	2102      	movs	r1, #2
 800d7aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	330c      	adds	r3, #12
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f00b fcfc 	bl	80191b0 <sys_sem_valid>
 800d7b8:	e000      	b.n	800d7bc <lwip_netconn_do_delconn+0x1a4>
          return;
 800d7ba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	0801c8f0 	.word	0x0801c8f0
 800d7c8:	0801cc60 	.word	0x0801cc60
 800d7cc:	0801c934 	.word	0x0801c934
 800d7d0:	0801cc74 	.word	0x0801cc74
 800d7d4:	0801cc94 	.word	0x0801cc94
 800d7d8:	0801ccb0 	.word	0x0801ccb0
 800d7dc:	2000c464 	.word	0x2000c464

0800d7e0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d025      	beq.n	800d842 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d800:	2b10      	cmp	r3, #16
 800d802:	d00e      	beq.n	800d822 <lwip_netconn_do_bind+0x42>
 800d804:	2b20      	cmp	r3, #32
 800d806:	d119      	bne.n	800d83c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6858      	ldr	r0, [r3, #4]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6899      	ldr	r1, [r3, #8]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	899b      	ldrh	r3, [r3, #12]
 800d816:	461a      	mov	r2, r3
 800d818:	f008 ffaa 	bl	8016770 <udp_bind>
 800d81c:	4603      	mov	r3, r0
 800d81e:	73fb      	strb	r3, [r7, #15]
        break;
 800d820:	e011      	b.n	800d846 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6858      	ldr	r0, [r3, #4]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	6899      	ldr	r1, [r3, #8]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	461a      	mov	r2, r3
 800d832:	f002 ff41 	bl	80106b8 <tcp_bind>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
        break;
 800d83a:	e004      	b.n	800d846 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d83c:	23fa      	movs	r3, #250	@ 0xfa
 800d83e:	73fb      	strb	r3, [r7, #15]
        break;
 800d840:	e001      	b.n	800d846 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d842:	23fa      	movs	r3, #250	@ 0xfa
 800d844:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	7bfa      	ldrb	r2, [r7, #15]
 800d84a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d07f      	beq.n	800d96a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d874:	2b10      	cmp	r3, #16
 800d876:	d175      	bne.n	800d964 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d165      	bne.n	800d94e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	7d1b      	ldrb	r3, [r3, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d88e:	23fa      	movs	r3, #250	@ 0xfa
 800d890:	72fb      	strb	r3, [r7, #11]
 800d892:	e06c      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d894:	23ff      	movs	r3, #255	@ 0xff
 800d896:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	f107 020b 	add.w	r2, r7, #11
 800d8a2:	7cf9      	ldrb	r1, [r7, #19]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f002 ffbf 	bl	8010828 <tcp_listen_with_backlog_and_err>
 800d8aa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d05d      	beq.n	800d96e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3310      	adds	r3, #16
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f00b fbeb 	bl	8019094 <sys_mbox_valid>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00b      	beq.n	800d8dc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3310      	adds	r3, #16
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f00b fb6e 	bl	8018fac <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3310      	adds	r3, #16
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f00b fbed 	bl	80190b6 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3314      	adds	r3, #20
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f00b fbd4 	bl	8019094 <sys_mbox_valid>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d108      	bne.n	800d904 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3314      	adds	r3, #20
 800d8f8:	2106      	movs	r1, #6
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f00b fb3c 	bl	8018f78 <sys_mbox_new>
 800d900:	4603      	mov	r3, r0
 800d902:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d904:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d118      	bne.n	800d93e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2202      	movs	r2, #2
 800d912:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f003 ff49 	bl	80117c0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	4912      	ldr	r1, [pc, #72]	@ (800d980 <lwip_netconn_do_listen+0x12c>)
 800d936:	4618      	mov	r0, r3
 800d938:	f003 ffba 	bl	80118b0 <tcp_accept>
 800d93c:	e017      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f002 fd68 	bl	8010414 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	605a      	str	r2, [r3, #4]
 800d94c:	e00f      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d102      	bne.n	800d95e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	72fb      	strb	r3, [r7, #11]
 800d95c:	e007      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800d95e:	23f5      	movs	r3, #245	@ 0xf5
 800d960:	72fb      	strb	r3, [r7, #11]
 800d962:	e004      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800d964:	23f0      	movs	r3, #240	@ 0xf0
 800d966:	72fb      	strb	r3, [r7, #11]
 800d968:	e001      	b.n	800d96e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800d96a:	23f5      	movs	r3, #245	@ 0xf5
 800d96c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800d96e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d976:	bf00      	nop
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	0800ce61 	.word	0x0800ce61

0800d984 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	2200      	movs	r2, #0
 800d994:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d022      	beq.n	800d9e6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9aa:	2b10      	cmp	r3, #16
 800d9ac:	d11b      	bne.n	800d9e6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9ba:	d202      	bcs.n	800d9c2 <lwip_netconn_do_recv+0x3e>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	e001      	b.n	800d9c6 <lwip_netconn_do_recv+0x42>
 800d9c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9c6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	89fa      	ldrh	r2, [r7, #14]
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f003 f82c 	bl	8010a30 <tcp_recved>
        remaining -= recved;
 800d9d8:	89fb      	ldrh	r3, [r7, #14]
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e6      	bne.n	800d9b4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d9e6:	bf00      	nop
 800d9e8:	3718      	adds	r7, #24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
	...

0800d9f0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <lwip_netconn_do_writemore+0x24>
 800da06:	4b96      	ldr	r3, [pc, #600]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da08:	f240 6273 	movw	r2, #1651	@ 0x673
 800da0c:	4995      	ldr	r1, [pc, #596]	@ (800dc64 <lwip_netconn_do_writemore+0x274>)
 800da0e:	4896      	ldr	r0, [pc, #600]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da10:	f00c f9a0 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	785b      	ldrb	r3, [r3, #1]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d006      	beq.n	800da2a <lwip_netconn_do_writemore+0x3a>
 800da1c:	4b90      	ldr	r3, [pc, #576]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da1e:	f240 6274 	movw	r2, #1652	@ 0x674
 800da22:	4992      	ldr	r1, [pc, #584]	@ (800dc6c <lwip_netconn_do_writemore+0x27c>)
 800da24:	4890      	ldr	r0, [pc, #576]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da26:	f00c f995 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a1b      	ldr	r3, [r3, #32]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <lwip_netconn_do_writemore+0x50>
 800da32:	4b8b      	ldr	r3, [pc, #556]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da34:	f240 6275 	movw	r2, #1653	@ 0x675
 800da38:	498d      	ldr	r1, [pc, #564]	@ (800dc70 <lwip_netconn_do_writemore+0x280>)
 800da3a:	488b      	ldr	r0, [pc, #556]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da3c:	f00c f98a 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <lwip_netconn_do_writemore+0x66>
 800da48:	4b85      	ldr	r3, [pc, #532]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da4a:	f240 6276 	movw	r2, #1654	@ 0x676
 800da4e:	4989      	ldr	r1, [pc, #548]	@ (800dc74 <lwip_netconn_do_writemore+0x284>)
 800da50:	4885      	ldr	r0, [pc, #532]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da52:	f00c f97f 	bl	8019d54 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a1b      	ldr	r3, [r3, #32]
 800da5a:	699a      	ldr	r2, [r3, #24]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a1b      	ldr	r3, [r3, #32]
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	429a      	cmp	r2, r3
 800da64:	d306      	bcc.n	800da74 <lwip_netconn_do_writemore+0x84>
 800da66:	4b7e      	ldr	r3, [pc, #504]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da68:	f240 6277 	movw	r2, #1655	@ 0x677
 800da6c:	4982      	ldr	r1, [pc, #520]	@ (800dc78 <lwip_netconn_do_writemore+0x288>)
 800da6e:	487e      	ldr	r0, [pc, #504]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da70:	f00c f970 	bl	8019d54 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <lwip_netconn_do_writemore+0x9c>
 800da7e:	4b78      	ldr	r3, [pc, #480]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800da80:	f240 6279 	movw	r2, #1657	@ 0x679
 800da84:	497d      	ldr	r1, [pc, #500]	@ (800dc7c <lwip_netconn_do_writemore+0x28c>)
 800da86:	4878      	ldr	r0, [pc, #480]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800da88:	f00c f964 	bl	8019d54 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	7f1b      	ldrb	r3, [r3, #28]
 800da92:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7f1b      	ldrb	r3, [r3, #28]
 800da98:	f003 0302 	and.w	r3, r3, #2
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d104      	bne.n	800daaa <lwip_netconn_do_writemore+0xba>
 800daa0:	7ebb      	ldrb	r3, [r7, #26]
 800daa2:	f003 0304 	and.w	r3, r3, #4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <lwip_netconn_do_writemore+0xbe>
 800daaa:	2301      	movs	r3, #1
 800daac:	e000      	b.n	800dab0 <lwip_netconn_do_writemore+0xc0>
 800daae:	2300      	movs	r3, #0
 800dab0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	4413      	add	r3, r2
 800dac2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a1b      	ldr	r3, [r3, #32]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	685a      	ldr	r2, [r3, #4]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a1b      	ldr	r3, [r3, #32]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dadc:	d307      	bcc.n	800daee <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800dade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dae2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dae4:	7ebb      	ldrb	r3, [r7, #26]
 800dae6:	f043 0302 	orr.w	r3, r3, #2
 800daea:	76bb      	strb	r3, [r7, #26]
 800daec:	e001      	b.n	800daf2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dafa:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800dafc:	89fa      	ldrh	r2, [r7, #14]
 800dafe:	8bbb      	ldrh	r3, [r7, #28]
 800db00:	429a      	cmp	r2, r3
 800db02:	d216      	bcs.n	800db32 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800db04:	89fb      	ldrh	r3, [r7, #14]
 800db06:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800db08:	7e3b      	ldrb	r3, [r7, #24]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00d      	beq.n	800db2a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800db0e:	8bbb      	ldrh	r3, [r7, #28]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10e      	bne.n	800db32 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a1b      	ldr	r3, [r3, #32]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <lwip_netconn_do_writemore+0x134>
 800db1e:	f06f 0306 	mvn.w	r3, #6
 800db22:	e000      	b.n	800db26 <lwip_netconn_do_writemore+0x136>
 800db24:	2300      	movs	r3, #0
 800db26:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800db28:	e07d      	b.n	800dc26 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800db2a:	7ebb      	ldrb	r3, [r7, #26]
 800db2c:	f043 0302 	orr.w	r3, r3, #2
 800db30:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	691a      	ldr	r2, [r3, #16]
 800db38:	8bbb      	ldrh	r3, [r7, #28]
 800db3a:	441a      	add	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	429a      	cmp	r2, r3
 800db46:	d906      	bls.n	800db56 <lwip_netconn_do_writemore+0x166>
 800db48:	4b45      	ldr	r3, [pc, #276]	@ (800dc60 <lwip_netconn_do_writemore+0x270>)
 800db4a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800db4e:	494c      	ldr	r1, [pc, #304]	@ (800dc80 <lwip_netconn_do_writemore+0x290>)
 800db50:	4845      	ldr	r0, [pc, #276]	@ (800dc68 <lwip_netconn_do_writemore+0x278>)
 800db52:	f00c f8ff 	bl	8019d54 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800db56:	8bbb      	ldrh	r3, [r7, #28]
 800db58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d103      	bne.n	800db68 <lwip_netconn_do_writemore+0x178>
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db66:	d209      	bcs.n	800db7c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800db6c:	8bba      	ldrh	r2, [r7, #28]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d10b      	bne.n	800db8a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a1b      	ldr	r3, [r3, #32]
 800db76:	899b      	ldrh	r3, [r3, #12]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d906      	bls.n	800db8a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800db7c:	2301      	movs	r3, #1
 800db7e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800db80:	7ebb      	ldrb	r3, [r7, #26]
 800db82:	f043 0302 	orr.w	r3, r3, #2
 800db86:	76bb      	strb	r3, [r7, #26]
 800db88:	e001      	b.n	800db8e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6858      	ldr	r0, [r3, #4]
 800db92:	7ebb      	ldrb	r3, [r7, #26]
 800db94:	8bba      	ldrh	r2, [r7, #28]
 800db96:	6979      	ldr	r1, [r7, #20]
 800db98:	f006 fd4e 	bl	8014638 <tcp_write>
 800db9c:	4603      	mov	r3, r0
 800db9e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800dba0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d12c      	bne.n	800dc02 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	6999      	ldr	r1, [r3, #24]
 800dbae:	8bba      	ldrh	r2, [r7, #28]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
 800dbb4:	440a      	add	r2, r1
 800dbb6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	6919      	ldr	r1, [r3, #16]
 800dbbe:	8bba      	ldrh	r2, [r7, #28]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	440a      	add	r2, r1
 800dbc6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a1b      	ldr	r3, [r3, #32]
 800dbcc:	691a      	ldr	r2, [r3, #16]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d113      	bne.n	800dc02 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	899a      	ldrh	r2, [r3, #12]
 800dbe0:	3a01      	subs	r2, #1
 800dbe2:	b292      	uxth	r2, r2
 800dbe4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	899b      	ldrh	r3, [r3, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d008      	beq.n	800dc02 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a1b      	ldr	r3, [r3, #32]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	3208      	adds	r2, #8
 800dbf8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dc02:	7e7b      	ldrb	r3, [r7, #25]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <lwip_netconn_do_writemore+0x222>
 800dc08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f43f af50 	beq.w	800dab2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dc12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d004      	beq.n	800dc24 <lwip_netconn_do_writemore+0x234>
 800dc1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d146      	bne.n	800dcb2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dc24:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dc26:	7e3b      	ldrb	r3, [r7, #24]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d02b      	beq.n	800dc84 <lwip_netconn_do_writemore+0x294>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	699a      	ldr	r2, [r3, #24]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d223      	bcs.n	800dc84 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d005      	beq.n	800dc50 <lwip_netconn_do_writemore+0x260>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2103      	movs	r1, #3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	7f1b      	ldrb	r3, [r3, #28]
 800dc54:	f043 0310 	orr.w	r3, r3, #16
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	771a      	strb	r2, [r3, #28]
 800dc5e:	e028      	b.n	800dcb2 <lwip_netconn_do_writemore+0x2c2>
 800dc60:	0801c8f0 	.word	0x0801c8f0
 800dc64:	0801ca48 	.word	0x0801ca48
 800dc68:	0801c934 	.word	0x0801c934
 800dc6c:	0801cd50 	.word	0x0801cd50
 800dc70:	0801ca58 	.word	0x0801ca58
 800dc74:	0801cd70 	.word	0x0801cd70
 800dc78:	0801cd88 	.word	0x0801cd88
 800dc7c:	0801cdc8 	.word	0x0801cdc8
 800dc80:	0801cdf0 	.word	0x0801cdf0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dc8c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800dc90:	d305      	bcc.n	800dc9e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dc9a:	2b04      	cmp	r3, #4
 800dc9c:	d909      	bls.n	800dcb2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d005      	beq.n	800dcb2 <lwip_netconn_do_writemore+0x2c2>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2103      	movs	r1, #3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dcb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d11d      	bne.n	800dcf6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	699a      	ldr	r2, [r3, #24]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a1b      	ldr	r3, [r3, #32]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d002      	beq.n	800dcd0 <lwip_netconn_do_writemore+0x2e0>
 800dcca:	7e3b      	ldrb	r3, [r7, #24]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f007 fa97 	bl	801520c <tcp_output>
 800dcde:	4603      	mov	r3, r0
 800dce0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800dce2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800dce6:	f113 0f04 	cmn.w	r3, #4
 800dcea:	d12c      	bne.n	800dd46 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dcec:	7b3b      	ldrb	r3, [r7, #12]
 800dcee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	76fb      	strb	r3, [r7, #27]
 800dcf4:	e027      	b.n	800dd46 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800dcf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfe:	d120      	bne.n	800dd42 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f007 fa81 	bl	801520c <tcp_output>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800dd0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800dd12:	f113 0f04 	cmn.w	r3, #4
 800dd16:	d104      	bne.n	800dd22 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dd18:	7b7b      	ldrb	r3, [r7, #13]
 800dd1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	76fb      	strb	r3, [r7, #27]
 800dd20:	e011      	b.n	800dd46 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800dd22:	7e3b      	ldrb	r3, [r7, #24]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6a1b      	ldr	r3, [r3, #32]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <lwip_netconn_do_writemore+0x348>
 800dd32:	f06f 0306 	mvn.w	r3, #6
 800dd36:	e000      	b.n	800dd3a <lwip_netconn_do_writemore+0x34a>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	76fb      	strb	r3, [r7, #27]
 800dd40:	e001      	b.n	800dd46 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800dd46:	7efb      	ldrb	r3, [r7, #27]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d015      	beq.n	800dd78 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	330c      	adds	r3, #12
 800dd54:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a1b      	ldr	r3, [r3, #32]
 800dd5a:	7ffa      	ldrb	r2, [r7, #31]
 800dd5c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d006      	beq.n	800dd7e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800dd70:	68b8      	ldr	r0, [r7, #8]
 800dd72:	f00b fa03 	bl	801917c <sys_sem_signal>
 800dd76:	e002      	b.n	800dd7e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800dd78:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7c:	e000      	b.n	800dd80 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3720      	adds	r7, #32
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fd1c 	bl	800c7d6 <netconn_err>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dda2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d166      	bne.n	800de78 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ddb4:	2b10      	cmp	r3, #16
 800ddb6:	d15d      	bne.n	800de74 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	785b      	ldrb	r3, [r3, #1]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ddc2:	23fb      	movs	r3, #251	@ 0xfb
 800ddc4:	73fb      	strb	r3, [r7, #15]
 800ddc6:	e057      	b.n	800de78 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d04d      	beq.n	800de6e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6a1b      	ldr	r3, [r3, #32]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d006      	beq.n	800ddf2 <lwip_netconn_do_write+0x6a>
 800dde4:	4b28      	ldr	r3, [pc, #160]	@ (800de88 <lwip_netconn_do_write+0x100>)
 800dde6:	f240 7223 	movw	r2, #1827	@ 0x723
 800ddea:	4928      	ldr	r1, [pc, #160]	@ (800de8c <lwip_netconn_do_write+0x104>)
 800ddec:	4828      	ldr	r0, [pc, #160]	@ (800de90 <lwip_netconn_do_write+0x108>)
 800ddee:	f00b ffb1 	bl	8019d54 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <lwip_netconn_do_write+0x80>
 800ddfa:	4b23      	ldr	r3, [pc, #140]	@ (800de88 <lwip_netconn_do_write+0x100>)
 800ddfc:	f240 7224 	movw	r2, #1828	@ 0x724
 800de00:	4924      	ldr	r1, [pc, #144]	@ (800de94 <lwip_netconn_do_write+0x10c>)
 800de02:	4823      	ldr	r0, [pc, #140]	@ (800de90 <lwip_netconn_do_write+0x108>)
 800de04:	f00b ffa6 	bl	8019d54 <iprintf>
        msg->conn->current_msg = msg;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2100      	movs	r1, #0
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff fdea 	bl	800d9f0 <lwip_netconn_do_writemore>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d02e      	beq.n	800de80 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	785b      	ldrb	r3, [r3, #1]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d006      	beq.n	800de3a <lwip_netconn_do_write+0xb2>
 800de2c:	4b16      	ldr	r3, [pc, #88]	@ (800de88 <lwip_netconn_do_write+0x100>)
 800de2e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800de32:	4919      	ldr	r1, [pc, #100]	@ (800de98 <lwip_netconn_do_write+0x110>)
 800de34:	4816      	ldr	r0, [pc, #88]	@ (800de90 <lwip_netconn_do_write+0x108>)
 800de36:	f00b ff8d 	bl	8019d54 <iprintf>
          UNLOCK_TCPIP_CORE();
 800de3a:	4818      	ldr	r0, [pc, #96]	@ (800de9c <lwip_netconn_do_write+0x114>)
 800de3c:	f00b fa07 	bl	801924e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	330c      	adds	r3, #12
 800de46:	2100      	movs	r1, #0
 800de48:	4618      	mov	r0, r3
 800de4a:	f00b f966 	bl	801911a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800de4e:	4813      	ldr	r0, [pc, #76]	@ (800de9c <lwip_netconn_do_write+0x114>)
 800de50:	f00b f9ee 	bl	8019230 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	785b      	ldrb	r3, [r3, #1]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d110      	bne.n	800de80 <lwip_netconn_do_write+0xf8>
 800de5e:	4b0a      	ldr	r3, [pc, #40]	@ (800de88 <lwip_netconn_do_write+0x100>)
 800de60:	f240 722c 	movw	r2, #1836	@ 0x72c
 800de64:	490c      	ldr	r1, [pc, #48]	@ (800de98 <lwip_netconn_do_write+0x110>)
 800de66:	480a      	ldr	r0, [pc, #40]	@ (800de90 <lwip_netconn_do_write+0x108>)
 800de68:	f00b ff74 	bl	8019d54 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800de6c:	e008      	b.n	800de80 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800de6e:	23f5      	movs	r3, #245	@ 0xf5
 800de70:	73fb      	strb	r3, [r7, #15]
 800de72:	e001      	b.n	800de78 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800de74:	23fa      	movs	r3, #250	@ 0xfa
 800de76:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	7bfa      	ldrb	r2, [r7, #15]
 800de7c:	711a      	strb	r2, [r3, #4]
 800de7e:	e000      	b.n	800de82 <lwip_netconn_do_write+0xfa>
        return;
 800de80:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	0801c8f0 	.word	0x0801c8f0
 800de8c:	0801cc94 	.word	0x0801cc94
 800de90:	0801c934 	.word	0x0801c934
 800de94:	0801ce1c 	.word	0x0801ce1c
 800de98:	0801ccb0 	.word	0x0801ccb0
 800de9c:	2000c464 	.word	0x2000c464

0800dea0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	785b      	ldrb	r3, [r3, #1]
 800deb2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d069      	beq.n	800df92 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800dec8:	2b10      	cmp	r3, #16
 800deca:	d162      	bne.n	800df92 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d002      	beq.n	800deda <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d05b      	beq.n	800df92 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800deda:	7afb      	ldrb	r3, [r7, #11]
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d103      	bne.n	800dee8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	22f5      	movs	r2, #245	@ 0xf5
 800dee4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800dee6:	e059      	b.n	800df9c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800dee8:	7afb      	ldrb	r3, [r7, #11]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d103      	bne.n	800def6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	22fb      	movs	r2, #251	@ 0xfb
 800def2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800def4:	e052      	b.n	800df9c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	7a1b      	ldrb	r3, [r3, #8]
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	2b00      	cmp	r3, #0
 800df00:	d004      	beq.n	800df0c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4618      	mov	r0, r3
 800df08:	f7ff f99e 	bl	800d248 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d006      	beq.n	800df24 <lwip_netconn_do_close+0x84>
 800df16:	4b23      	ldr	r3, [pc, #140]	@ (800dfa4 <lwip_netconn_do_close+0x104>)
 800df18:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800df1c:	4922      	ldr	r1, [pc, #136]	@ (800dfa8 <lwip_netconn_do_close+0x108>)
 800df1e:	4823      	ldr	r0, [pc, #140]	@ (800dfac <lwip_netconn_do_close+0x10c>)
 800df20:	f00b ff18 	bl	8019d54 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2204      	movs	r2, #4
 800df2a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2100      	movs	r1, #0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff fa02 	bl	800d344 <lwip_netconn_do_close_internal>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d029      	beq.n	800df9a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d006      	beq.n	800df5e <lwip_netconn_do_close+0xbe>
 800df50:	4b14      	ldr	r3, [pc, #80]	@ (800dfa4 <lwip_netconn_do_close+0x104>)
 800df52:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800df56:	4916      	ldr	r1, [pc, #88]	@ (800dfb0 <lwip_netconn_do_close+0x110>)
 800df58:	4814      	ldr	r0, [pc, #80]	@ (800dfac <lwip_netconn_do_close+0x10c>)
 800df5a:	f00b fefb 	bl	8019d54 <iprintf>
        UNLOCK_TCPIP_CORE();
 800df5e:	4815      	ldr	r0, [pc, #84]	@ (800dfb4 <lwip_netconn_do_close+0x114>)
 800df60:	f00b f975 	bl	801924e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	330c      	adds	r3, #12
 800df6a:	2100      	movs	r1, #0
 800df6c:	4618      	mov	r0, r3
 800df6e:	f00b f8d4 	bl	801911a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800df72:	4810      	ldr	r0, [pc, #64]	@ (800dfb4 <lwip_netconn_do_close+0x114>)
 800df74:	f00b f95c 	bl	8019230 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	785b      	ldrb	r3, [r3, #1]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00b      	beq.n	800df9a <lwip_netconn_do_close+0xfa>
 800df82:	4b08      	ldr	r3, [pc, #32]	@ (800dfa4 <lwip_netconn_do_close+0x104>)
 800df84:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800df88:	4909      	ldr	r1, [pc, #36]	@ (800dfb0 <lwip_netconn_do_close+0x110>)
 800df8a:	4808      	ldr	r0, [pc, #32]	@ (800dfac <lwip_netconn_do_close+0x10c>)
 800df8c:	f00b fee2 	bl	8019d54 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800df90:	e003      	b.n	800df9a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	22f5      	movs	r2, #245	@ 0xf5
 800df96:	711a      	strb	r2, [r3, #4]
 800df98:	e000      	b.n	800df9c <lwip_netconn_do_close+0xfc>
      return;
 800df9a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	0801c8f0 	.word	0x0801c8f0
 800dfa8:	0801cc94 	.word	0x0801cc94
 800dfac:	0801c934 	.word	0x0801c934
 800dfb0:	0801ccb0 	.word	0x0801ccb0
 800dfb4:	2000c464 	.word	0x2000c464

0800dfb8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d013      	beq.n	800dfee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00b      	beq.n	800dfe6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f001 fd74 	bl	800fac0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	605a      	str	r2, [r3, #4]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	2006      	movs	r0, #6
 800dfea:	f000 fec5 	bl	800ed78 <memp_free>
  }
}
 800dfee:	bf00      	nop
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
	...

0800dff8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e002:	f008 f9bb 	bl	801637c <sys_timeouts_sleeptime>
 800e006:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00e:	d10b      	bne.n	800e028 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e010:	4813      	ldr	r0, [pc, #76]	@ (800e060 <tcpip_timeouts_mbox_fetch+0x68>)
 800e012:	f00b f91c 	bl	801924e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e016:	2200      	movs	r2, #0
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f00a fff2 	bl	8019004 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e020:	480f      	ldr	r0, [pc, #60]	@ (800e060 <tcpip_timeouts_mbox_fetch+0x68>)
 800e022:	f00b f905 	bl	8019230 <sys_mutex_lock>
    return;
 800e026:	e018      	b.n	800e05a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d102      	bne.n	800e034 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e02e:	f008 f96b 	bl	8016308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e032:	e7e6      	b.n	800e002 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e034:	480a      	ldr	r0, [pc, #40]	@ (800e060 <tcpip_timeouts_mbox_fetch+0x68>)
 800e036:	f00b f90a 	bl	801924e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f00a ffe0 	bl	8019004 <sys_arch_mbox_fetch>
 800e044:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e046:	4806      	ldr	r0, [pc, #24]	@ (800e060 <tcpip_timeouts_mbox_fetch+0x68>)
 800e048:	f00b f8f2 	bl	8019230 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e052:	d102      	bne.n	800e05a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e054:	f008 f958 	bl	8016308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e058:	e7d3      	b.n	800e002 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2000c464 	.word	0x2000c464

0800e064 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e06c:	4810      	ldr	r0, [pc, #64]	@ (800e0b0 <tcpip_thread+0x4c>)
 800e06e:	f00b f8df 	bl	8019230 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e072:	4b10      	ldr	r3, [pc, #64]	@ (800e0b4 <tcpip_thread+0x50>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d005      	beq.n	800e086 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e07a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b4 <tcpip_thread+0x50>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a0e      	ldr	r2, [pc, #56]	@ (800e0b8 <tcpip_thread+0x54>)
 800e080:	6812      	ldr	r2, [r2, #0]
 800e082:	4610      	mov	r0, r2
 800e084:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e086:	f107 030c 	add.w	r3, r7, #12
 800e08a:	4619      	mov	r1, r3
 800e08c:	480b      	ldr	r0, [pc, #44]	@ (800e0bc <tcpip_thread+0x58>)
 800e08e:	f7ff ffb3 	bl	800dff8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e098:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <tcpip_thread+0x5c>)
 800e09a:	2291      	movs	r2, #145	@ 0x91
 800e09c:	4909      	ldr	r1, [pc, #36]	@ (800e0c4 <tcpip_thread+0x60>)
 800e09e:	480a      	ldr	r0, [pc, #40]	@ (800e0c8 <tcpip_thread+0x64>)
 800e0a0:	f00b fe58 	bl	8019d54 <iprintf>
      continue;
 800e0a4:	e003      	b.n	800e0ae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f80f 	bl	800e0cc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e0ae:	e7ea      	b.n	800e086 <tcpip_thread+0x22>
 800e0b0:	2000c464 	.word	0x2000c464
 800e0b4:	2000c458 	.word	0x2000c458
 800e0b8:	2000c45c 	.word	0x2000c45c
 800e0bc:	2000c460 	.word	0x2000c460
 800e0c0:	0801ce48 	.word	0x0801ce48
 800e0c4:	0801ce78 	.word	0x0801ce78
 800e0c8:	0801ce98 	.word	0x0801ce98

0800e0cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d026      	beq.n	800e12a <tcpip_thread_handle_msg+0x5e>
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	dc2b      	bgt.n	800e138 <tcpip_thread_handle_msg+0x6c>
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <tcpip_thread_handle_msg+0x1e>
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d015      	beq.n	800e114 <tcpip_thread_handle_msg+0x48>
 800e0e8:	e026      	b.n	800e138 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	6850      	ldr	r0, [r2, #4]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	6892      	ldr	r2, [r2, #8]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4798      	blx	r3
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	4618      	mov	r0, r3
 800e106:	f001 fcdb 	bl	800fac0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e10a:	6879      	ldr	r1, [r7, #4]
 800e10c:	2009      	movs	r0, #9
 800e10e:	f000 fe33 	bl	800ed78 <memp_free>
      break;
 800e112:	e018      	b.n	800e146 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6892      	ldr	r2, [r2, #8]
 800e11c:	4610      	mov	r0, r2
 800e11e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	2008      	movs	r0, #8
 800e124:	f000 fe28 	bl	800ed78 <memp_free>
      break;
 800e128:	e00d      	b.n	800e146 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	6892      	ldr	r2, [r2, #8]
 800e132:	4610      	mov	r0, r2
 800e134:	4798      	blx	r3
      break;
 800e136:	e006      	b.n	800e146 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e138:	4b05      	ldr	r3, [pc, #20]	@ (800e150 <tcpip_thread_handle_msg+0x84>)
 800e13a:	22cf      	movs	r2, #207	@ 0xcf
 800e13c:	4905      	ldr	r1, [pc, #20]	@ (800e154 <tcpip_thread_handle_msg+0x88>)
 800e13e:	4806      	ldr	r0, [pc, #24]	@ (800e158 <tcpip_thread_handle_msg+0x8c>)
 800e140:	f00b fe08 	bl	8019d54 <iprintf>
      break;
 800e144:	bf00      	nop
  }
}
 800e146:	bf00      	nop
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	0801ce48 	.word	0x0801ce48
 800e154:	0801ce78 	.word	0x0801ce78
 800e158:	0801ce98 	.word	0x0801ce98

0800e15c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e168:	481a      	ldr	r0, [pc, #104]	@ (800e1d4 <tcpip_inpkt+0x78>)
 800e16a:	f00a ff93 	bl	8019094 <sys_mbox_valid>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d105      	bne.n	800e180 <tcpip_inpkt+0x24>
 800e174:	4b18      	ldr	r3, [pc, #96]	@ (800e1d8 <tcpip_inpkt+0x7c>)
 800e176:	22fc      	movs	r2, #252	@ 0xfc
 800e178:	4918      	ldr	r1, [pc, #96]	@ (800e1dc <tcpip_inpkt+0x80>)
 800e17a:	4819      	ldr	r0, [pc, #100]	@ (800e1e0 <tcpip_inpkt+0x84>)
 800e17c:	f00b fdea 	bl	8019d54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e180:	2009      	movs	r0, #9
 800e182:	f000 fda7 	bl	800ecd4 <memp_malloc>
 800e186:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d102      	bne.n	800e194 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e18e:	f04f 33ff 	mov.w	r3, #4294967295
 800e192:	e01a      	b.n	800e1ca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e1ac:	6979      	ldr	r1, [r7, #20]
 800e1ae:	4809      	ldr	r0, [pc, #36]	@ (800e1d4 <tcpip_inpkt+0x78>)
 800e1b0:	f00a ff0e 	bl	8018fd0 <sys_mbox_trypost>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d006      	beq.n	800e1c8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e1ba:	6979      	ldr	r1, [r7, #20]
 800e1bc:	2009      	movs	r0, #9
 800e1be:	f000 fddb 	bl	800ed78 <memp_free>
    return ERR_MEM;
 800e1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c6:	e000      	b.n	800e1ca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e1c8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	2000c460 	.word	0x2000c460
 800e1d8:	0801ce48 	.word	0x0801ce48
 800e1dc:	0801cec0 	.word	0x0801cec0
 800e1e0:	0801ce98 	.word	0x0801ce98

0800e1e4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e1f4:	f003 0318 	and.w	r3, r3, #24
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e1fc:	4a08      	ldr	r2, [pc, #32]	@ (800e220 <tcpip_input+0x3c>)
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff ffab 	bl	800e15c <tcpip_inpkt>
 800e206:	4603      	mov	r3, r0
 800e208:	e005      	b.n	800e216 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e20a:	4a06      	ldr	r2, [pc, #24]	@ (800e224 <tcpip_input+0x40>)
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff ffa4 	bl	800e15c <tcpip_inpkt>
 800e214:	4603      	mov	r3, r0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	08018dcd 	.word	0x08018dcd
 800e224:	08017cd5 	.word	0x08017cd5

0800e228 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e232:	4819      	ldr	r0, [pc, #100]	@ (800e298 <tcpip_try_callback+0x70>)
 800e234:	f00a ff2e 	bl	8019094 <sys_mbox_valid>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <tcpip_try_callback+0x24>
 800e23e:	4b17      	ldr	r3, [pc, #92]	@ (800e29c <tcpip_try_callback+0x74>)
 800e240:	f240 125d 	movw	r2, #349	@ 0x15d
 800e244:	4916      	ldr	r1, [pc, #88]	@ (800e2a0 <tcpip_try_callback+0x78>)
 800e246:	4817      	ldr	r0, [pc, #92]	@ (800e2a4 <tcpip_try_callback+0x7c>)
 800e248:	f00b fd84 	bl	8019d54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e24c:	2008      	movs	r0, #8
 800e24e:	f000 fd41 	bl	800ecd4 <memp_malloc>
 800e252:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e25a:	f04f 33ff 	mov.w	r3, #4294967295
 800e25e:	e017      	b.n	800e290 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2201      	movs	r2, #1
 800e264:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e272:	68f9      	ldr	r1, [r7, #12]
 800e274:	4808      	ldr	r0, [pc, #32]	@ (800e298 <tcpip_try_callback+0x70>)
 800e276:	f00a feab 	bl	8018fd0 <sys_mbox_trypost>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d006      	beq.n	800e28e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e280:	68f9      	ldr	r1, [r7, #12]
 800e282:	2008      	movs	r0, #8
 800e284:	f000 fd78 	bl	800ed78 <memp_free>
    return ERR_MEM;
 800e288:	f04f 33ff 	mov.w	r3, #4294967295
 800e28c:	e000      	b.n	800e290 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	2000c460 	.word	0x2000c460
 800e29c:	0801ce48 	.word	0x0801ce48
 800e2a0:	0801cec0 	.word	0x0801cec0
 800e2a4:	0801ce98 	.word	0x0801ce98

0800e2a8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e2b4:	4806      	ldr	r0, [pc, #24]	@ (800e2d0 <tcpip_send_msg_wait_sem+0x28>)
 800e2b6:	f00a ffbb 	bl	8019230 <sys_mutex_lock>
  fn(apimsg);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	68b8      	ldr	r0, [r7, #8]
 800e2be:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e2c0:	4803      	ldr	r0, [pc, #12]	@ (800e2d0 <tcpip_send_msg_wait_sem+0x28>)
 800e2c2:	f00a ffc4 	bl	801924e <sys_mutex_unlock>
  return ERR_OK;
 800e2c6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	2000c464 	.word	0x2000c464

0800e2d4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e2de:	f000 f871 	bl	800e3c4 <lwip_init>

  tcpip_init_done = initfunc;
 800e2e2:	4a17      	ldr	r2, [pc, #92]	@ (800e340 <tcpip_init+0x6c>)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e2e8:	4a16      	ldr	r2, [pc, #88]	@ (800e344 <tcpip_init+0x70>)
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e2ee:	2106      	movs	r1, #6
 800e2f0:	4815      	ldr	r0, [pc, #84]	@ (800e348 <tcpip_init+0x74>)
 800e2f2:	f00a fe41 	bl	8018f78 <sys_mbox_new>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d006      	beq.n	800e30a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e2fc:	4b13      	ldr	r3, [pc, #76]	@ (800e34c <tcpip_init+0x78>)
 800e2fe:	f240 2261 	movw	r2, #609	@ 0x261
 800e302:	4913      	ldr	r1, [pc, #76]	@ (800e350 <tcpip_init+0x7c>)
 800e304:	4813      	ldr	r0, [pc, #76]	@ (800e354 <tcpip_init+0x80>)
 800e306:	f00b fd25 	bl	8019d54 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e30a:	4813      	ldr	r0, [pc, #76]	@ (800e358 <tcpip_init+0x84>)
 800e30c:	f00a ff7a 	bl	8019204 <sys_mutex_new>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d006      	beq.n	800e324 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e316:	4b0d      	ldr	r3, [pc, #52]	@ (800e34c <tcpip_init+0x78>)
 800e318:	f240 2265 	movw	r2, #613	@ 0x265
 800e31c:	490f      	ldr	r1, [pc, #60]	@ (800e35c <tcpip_init+0x88>)
 800e31e:	480d      	ldr	r0, [pc, #52]	@ (800e354 <tcpip_init+0x80>)
 800e320:	f00b fd18 	bl	8019d54 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e324:	2318      	movs	r3, #24
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e32c:	2200      	movs	r2, #0
 800e32e:	490c      	ldr	r1, [pc, #48]	@ (800e360 <tcpip_init+0x8c>)
 800e330:	480c      	ldr	r0, [pc, #48]	@ (800e364 <tcpip_init+0x90>)
 800e332:	f00a ff99 	bl	8019268 <sys_thread_new>
}
 800e336:	bf00      	nop
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2000c458 	.word	0x2000c458
 800e344:	2000c45c 	.word	0x2000c45c
 800e348:	2000c460 	.word	0x2000c460
 800e34c:	0801ce48 	.word	0x0801ce48
 800e350:	0801ced0 	.word	0x0801ced0
 800e354:	0801ce98 	.word	0x0801ce98
 800e358:	2000c464 	.word	0x2000c464
 800e35c:	0801cef4 	.word	0x0801cef4
 800e360:	0800e065 	.word	0x0800e065
 800e364:	0801cf18 	.word	0x0801cf18

0800e368 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	b21a      	sxth	r2, r3
 800e378:	88fb      	ldrh	r3, [r7, #6]
 800e37a:	0a1b      	lsrs	r3, r3, #8
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	b21b      	sxth	r3, r3
 800e380:	4313      	orrs	r3, r2
 800e382:	b21b      	sxth	r3, r3
 800e384:	b29b      	uxth	r3, r3
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e392:	b480      	push	{r7}
 800e394:	b083      	sub	sp, #12
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	061a      	lsls	r2, r3, #24
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	021b      	lsls	r3, r3, #8
 800e3a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3a6:	431a      	orrs	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	0e1b      	lsrs	r3, r3, #24
 800e3b6:	4313      	orrs	r3, r2
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e3ce:	f00a ff0d 	bl	80191ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e3d2:	f000 f8d5 	bl	800e580 <mem_init>
  memp_init();
 800e3d6:	f000 fc31 	bl	800ec3c <memp_init>
  pbuf_init();
  netif_init();
 800e3da:	f000 fcf7 	bl	800edcc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e3de:	f008 f805 	bl	80163ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e3e2:	f001 fe07 	bl	800fff4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e3e6:	f007 ff47 	bl	8016278 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e3fe:	4b05      	ldr	r3, [pc, #20]	@ (800e414 <ptr_to_mem+0x20>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	88fb      	ldrh	r3, [r7, #6]
 800e404:	4413      	add	r3, r2
}
 800e406:	4618      	mov	r0, r3
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	2000ec94 	.word	0x2000ec94

0800e418 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e420:	4b05      	ldr	r3, [pc, #20]	@ (800e438 <mem_to_ptr+0x20>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	b29b      	uxth	r3, r3
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	2000ec94 	.word	0x2000ec94

0800e43c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e43c:	b590      	push	{r4, r7, lr}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e444:	4b45      	ldr	r3, [pc, #276]	@ (800e55c <plug_holes+0x120>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d206      	bcs.n	800e45c <plug_holes+0x20>
 800e44e:	4b44      	ldr	r3, [pc, #272]	@ (800e560 <plug_holes+0x124>)
 800e450:	f240 12df 	movw	r2, #479	@ 0x1df
 800e454:	4943      	ldr	r1, [pc, #268]	@ (800e564 <plug_holes+0x128>)
 800e456:	4844      	ldr	r0, [pc, #272]	@ (800e568 <plug_holes+0x12c>)
 800e458:	f00b fc7c 	bl	8019d54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e45c:	4b43      	ldr	r3, [pc, #268]	@ (800e56c <plug_holes+0x130>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	429a      	cmp	r2, r3
 800e464:	d306      	bcc.n	800e474 <plug_holes+0x38>
 800e466:	4b3e      	ldr	r3, [pc, #248]	@ (800e560 <plug_holes+0x124>)
 800e468:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e46c:	4940      	ldr	r1, [pc, #256]	@ (800e570 <plug_holes+0x134>)
 800e46e:	483e      	ldr	r0, [pc, #248]	@ (800e568 <plug_holes+0x12c>)
 800e470:	f00b fc70 	bl	8019d54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	791b      	ldrb	r3, [r3, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d006      	beq.n	800e48a <plug_holes+0x4e>
 800e47c:	4b38      	ldr	r3, [pc, #224]	@ (800e560 <plug_holes+0x124>)
 800e47e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e482:	493c      	ldr	r1, [pc, #240]	@ (800e574 <plug_holes+0x138>)
 800e484:	4838      	ldr	r0, [pc, #224]	@ (800e568 <plug_holes+0x12c>)
 800e486:	f00b fc65 	bl	8019d54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e492:	d906      	bls.n	800e4a2 <plug_holes+0x66>
 800e494:	4b32      	ldr	r3, [pc, #200]	@ (800e560 <plug_holes+0x124>)
 800e496:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800e49a:	4937      	ldr	r1, [pc, #220]	@ (800e578 <plug_holes+0x13c>)
 800e49c:	4832      	ldr	r0, [pc, #200]	@ (800e568 <plug_holes+0x12c>)
 800e49e:	f00b fc59 	bl	8019d54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7ff ffa4 	bl	800e3f4 <ptr_to_mem>
 800e4ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d024      	beq.n	800e500 <plug_holes+0xc4>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	791b      	ldrb	r3, [r3, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d120      	bne.n	800e500 <plug_holes+0xc4>
 800e4be:	4b2b      	ldr	r3, [pc, #172]	@ (800e56c <plug_holes+0x130>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d01b      	beq.n	800e500 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e4c8:	4b2c      	ldr	r3, [pc, #176]	@ (800e57c <plug_holes+0x140>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d102      	bne.n	800e4d8 <plug_holes+0x9c>
      lfree = mem;
 800e4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800e57c <plug_holes+0x140>)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	881a      	ldrh	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e4e8:	d00a      	beq.n	800e500 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff ff80 	bl	800e3f4 <ptr_to_mem>
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ff8e 	bl	800e418 <mem_to_ptr>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	885b      	ldrh	r3, [r3, #2]
 800e504:	4618      	mov	r0, r3
 800e506:	f7ff ff75 	bl	800e3f4 <ptr_to_mem>
 800e50a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	d01f      	beq.n	800e554 <plug_holes+0x118>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	791b      	ldrb	r3, [r3, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d11b      	bne.n	800e554 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e51c:	4b17      	ldr	r3, [pc, #92]	@ (800e57c <plug_holes+0x140>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	429a      	cmp	r2, r3
 800e524:	d102      	bne.n	800e52c <plug_holes+0xf0>
      lfree = pmem;
 800e526:	4a15      	ldr	r2, [pc, #84]	@ (800e57c <plug_holes+0x140>)
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	881a      	ldrh	r2, [r3, #0]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e53c:	d00a      	beq.n	800e554 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	f7ff ff56 	bl	800e3f4 <ptr_to_mem>
 800e548:	4604      	mov	r4, r0
 800e54a:	68b8      	ldr	r0, [r7, #8]
 800e54c:	f7ff ff64 	bl	800e418 <mem_to_ptr>
 800e550:	4603      	mov	r3, r0
 800e552:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e554:	bf00      	nop
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd90      	pop	{r4, r7, pc}
 800e55c:	2000ec94 	.word	0x2000ec94
 800e560:	0801cf28 	.word	0x0801cf28
 800e564:	0801cf58 	.word	0x0801cf58
 800e568:	0801cf70 	.word	0x0801cf70
 800e56c:	2000ec98 	.word	0x2000ec98
 800e570:	0801cf98 	.word	0x0801cf98
 800e574:	0801cfb4 	.word	0x0801cfb4
 800e578:	0801cfd0 	.word	0x0801cfd0
 800e57c:	2000eca0 	.word	0x2000eca0

0800e580 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e586:	4b1f      	ldr	r3, [pc, #124]	@ (800e604 <mem_init+0x84>)
 800e588:	3303      	adds	r3, #3
 800e58a:	f023 0303 	bic.w	r3, r3, #3
 800e58e:	461a      	mov	r2, r3
 800e590:	4b1d      	ldr	r3, [pc, #116]	@ (800e608 <mem_init+0x88>)
 800e592:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e594:	4b1c      	ldr	r3, [pc, #112]	@ (800e608 <mem_init+0x88>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e5a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e5ae:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800e5b2:	f7ff ff1f 	bl	800e3f4 <ptr_to_mem>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	4a14      	ldr	r2, [pc, #80]	@ (800e60c <mem_init+0x8c>)
 800e5ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e5bc:	4b13      	ldr	r3, [pc, #76]	@ (800e60c <mem_init+0x8c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e5c4:	4b11      	ldr	r3, [pc, #68]	@ (800e60c <mem_init+0x8c>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e5cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800e60c <mem_init+0x8c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e5d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e5d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e608 <mem_init+0x88>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e610 <mem_init+0x90>)
 800e5de:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e5e0:	480c      	ldr	r0, [pc, #48]	@ (800e614 <mem_init+0x94>)
 800e5e2:	f00a fe0f 	bl	8019204 <sys_mutex_new>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d006      	beq.n	800e5fa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <mem_init+0x98>)
 800e5ee:	f240 221f 	movw	r2, #543	@ 0x21f
 800e5f2:	490a      	ldr	r1, [pc, #40]	@ (800e61c <mem_init+0x9c>)
 800e5f4:	480a      	ldr	r0, [pc, #40]	@ (800e620 <mem_init+0xa0>)
 800e5f6:	f00b fbad 	bl	8019d54 <iprintf>
  }
}
 800e5fa:	bf00      	nop
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	2000c480 	.word	0x2000c480
 800e608:	2000ec94 	.word	0x2000ec94
 800e60c:	2000ec98 	.word	0x2000ec98
 800e610:	2000eca0 	.word	0x2000eca0
 800e614:	2000ec9c 	.word	0x2000ec9c
 800e618:	0801cf28 	.word	0x0801cf28
 800e61c:	0801cffc 	.word	0x0801cffc
 800e620:	0801cf70 	.word	0x0801cf70

0800e624 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7ff fef3 	bl	800e418 <mem_to_ptr>
 800e632:	4603      	mov	r3, r0
 800e634:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	881b      	ldrh	r3, [r3, #0]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7ff feda 	bl	800e3f4 <ptr_to_mem>
 800e640:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	885b      	ldrh	r3, [r3, #2]
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff fed4 	bl	800e3f4 <ptr_to_mem>
 800e64c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e656:	d818      	bhi.n	800e68a <mem_link_valid+0x66>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	885b      	ldrh	r3, [r3, #2]
 800e65c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e660:	d813      	bhi.n	800e68a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e666:	8afa      	ldrh	r2, [r7, #22]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d004      	beq.n	800e676 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	8afa      	ldrh	r2, [r7, #22]
 800e672:	429a      	cmp	r2, r3
 800e674:	d109      	bne.n	800e68a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <mem_link_valid+0x74>)
 800e678:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d006      	beq.n	800e68e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	885b      	ldrh	r3, [r3, #2]
 800e684:	8afa      	ldrh	r2, [r7, #22]
 800e686:	429a      	cmp	r2, r3
 800e688:	d001      	beq.n	800e68e <mem_link_valid+0x6a>
    return 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e000      	b.n	800e690 <mem_link_valid+0x6c>
  }
  return 1;
 800e68e:	2301      	movs	r3, #1
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	2000ec98 	.word	0x2000ec98

0800e69c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d070      	beq.n	800e78c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f003 0303 	and.w	r3, r3, #3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00d      	beq.n	800e6d0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e6b4:	4b37      	ldr	r3, [pc, #220]	@ (800e794 <mem_free+0xf8>)
 800e6b6:	f240 2273 	movw	r2, #627	@ 0x273
 800e6ba:	4937      	ldr	r1, [pc, #220]	@ (800e798 <mem_free+0xfc>)
 800e6bc:	4837      	ldr	r0, [pc, #220]	@ (800e79c <mem_free+0x100>)
 800e6be:	f00b fb49 	bl	8019d54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e6c2:	f00a fdf1 	bl	80192a8 <sys_arch_protect>
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f00a fdfb 	bl	80192c4 <sys_arch_unprotect>
    return;
 800e6ce:	e05e      	b.n	800e78e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3b08      	subs	r3, #8
 800e6d4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e6d6:	4b32      	ldr	r3, [pc, #200]	@ (800e7a0 <mem_free+0x104>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	69fa      	ldr	r2, [r7, #28]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d306      	bcc.n	800e6ee <mem_free+0x52>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f103 020c 	add.w	r2, r3, #12
 800e6e6:	4b2f      	ldr	r3, [pc, #188]	@ (800e7a4 <mem_free+0x108>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d90d      	bls.n	800e70a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e6ee:	4b29      	ldr	r3, [pc, #164]	@ (800e794 <mem_free+0xf8>)
 800e6f0:	f240 227f 	movw	r2, #639	@ 0x27f
 800e6f4:	492c      	ldr	r1, [pc, #176]	@ (800e7a8 <mem_free+0x10c>)
 800e6f6:	4829      	ldr	r0, [pc, #164]	@ (800e79c <mem_free+0x100>)
 800e6f8:	f00b fb2c 	bl	8019d54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e6fc:	f00a fdd4 	bl	80192a8 <sys_arch_protect>
 800e700:	6138      	str	r0, [r7, #16]
 800e702:	6938      	ldr	r0, [r7, #16]
 800e704:	f00a fdde 	bl	80192c4 <sys_arch_unprotect>
    return;
 800e708:	e041      	b.n	800e78e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e70a:	4828      	ldr	r0, [pc, #160]	@ (800e7ac <mem_free+0x110>)
 800e70c:	f00a fd90 	bl	8019230 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	791b      	ldrb	r3, [r3, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d110      	bne.n	800e73a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e718:	4b1e      	ldr	r3, [pc, #120]	@ (800e794 <mem_free+0xf8>)
 800e71a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e71e:	4924      	ldr	r1, [pc, #144]	@ (800e7b0 <mem_free+0x114>)
 800e720:	481e      	ldr	r0, [pc, #120]	@ (800e79c <mem_free+0x100>)
 800e722:	f00b fb17 	bl	8019d54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e726:	4821      	ldr	r0, [pc, #132]	@ (800e7ac <mem_free+0x110>)
 800e728:	f00a fd91 	bl	801924e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e72c:	f00a fdbc 	bl	80192a8 <sys_arch_protect>
 800e730:	6178      	str	r0, [r7, #20]
 800e732:	6978      	ldr	r0, [r7, #20]
 800e734:	f00a fdc6 	bl	80192c4 <sys_arch_unprotect>
    return;
 800e738:	e029      	b.n	800e78e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f7ff ff72 	bl	800e624 <mem_link_valid>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d110      	bne.n	800e768 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e746:	4b13      	ldr	r3, [pc, #76]	@ (800e794 <mem_free+0xf8>)
 800e748:	f240 2295 	movw	r2, #661	@ 0x295
 800e74c:	4919      	ldr	r1, [pc, #100]	@ (800e7b4 <mem_free+0x118>)
 800e74e:	4813      	ldr	r0, [pc, #76]	@ (800e79c <mem_free+0x100>)
 800e750:	f00b fb00 	bl	8019d54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e754:	4815      	ldr	r0, [pc, #84]	@ (800e7ac <mem_free+0x110>)
 800e756:	f00a fd7a 	bl	801924e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e75a:	f00a fda5 	bl	80192a8 <sys_arch_protect>
 800e75e:	61b8      	str	r0, [r7, #24]
 800e760:	69b8      	ldr	r0, [r7, #24]
 800e762:	f00a fdaf 	bl	80192c4 <sys_arch_unprotect>
    return;
 800e766:	e012      	b.n	800e78e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	2200      	movs	r2, #0
 800e76c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e76e:	4b12      	ldr	r3, [pc, #72]	@ (800e7b8 <mem_free+0x11c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	69fa      	ldr	r2, [r7, #28]
 800e774:	429a      	cmp	r2, r3
 800e776:	d202      	bcs.n	800e77e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e778:	4a0f      	ldr	r2, [pc, #60]	@ (800e7b8 <mem_free+0x11c>)
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e77e:	69f8      	ldr	r0, [r7, #28]
 800e780:	f7ff fe5c 	bl	800e43c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e784:	4809      	ldr	r0, [pc, #36]	@ (800e7ac <mem_free+0x110>)
 800e786:	f00a fd62 	bl	801924e <sys_mutex_unlock>
 800e78a:	e000      	b.n	800e78e <mem_free+0xf2>
    return;
 800e78c:	bf00      	nop
}
 800e78e:	3720      	adds	r7, #32
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	0801cf28 	.word	0x0801cf28
 800e798:	0801d018 	.word	0x0801d018
 800e79c:	0801cf70 	.word	0x0801cf70
 800e7a0:	2000ec94 	.word	0x2000ec94
 800e7a4:	2000ec98 	.word	0x2000ec98
 800e7a8:	0801d03c 	.word	0x0801d03c
 800e7ac:	2000ec9c 	.word	0x2000ec9c
 800e7b0:	0801d058 	.word	0x0801d058
 800e7b4:	0801d080 	.word	0x0801d080
 800e7b8:	2000eca0 	.word	0x2000eca0

0800e7bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b088      	sub	sp, #32
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e7c8:	887b      	ldrh	r3, [r7, #2]
 800e7ca:	3303      	adds	r3, #3
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	f023 0303 	bic.w	r3, r3, #3
 800e7d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e7d4:	8bfb      	ldrh	r3, [r7, #30]
 800e7d6:	2b0b      	cmp	r3, #11
 800e7d8:	d801      	bhi.n	800e7de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e7da:	230c      	movs	r3, #12
 800e7dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e7de:	8bfb      	ldrh	r3, [r7, #30]
 800e7e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e7e4:	d803      	bhi.n	800e7ee <mem_trim+0x32>
 800e7e6:	8bfa      	ldrh	r2, [r7, #30]
 800e7e8:	887b      	ldrh	r3, [r7, #2]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d201      	bcs.n	800e7f2 <mem_trim+0x36>
    return NULL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e0d8      	b.n	800e9a4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e7f2:	4b6e      	ldr	r3, [pc, #440]	@ (800e9ac <mem_trim+0x1f0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d304      	bcc.n	800e806 <mem_trim+0x4a>
 800e7fc:	4b6c      	ldr	r3, [pc, #432]	@ (800e9b0 <mem_trim+0x1f4>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	429a      	cmp	r2, r3
 800e804:	d306      	bcc.n	800e814 <mem_trim+0x58>
 800e806:	4b6b      	ldr	r3, [pc, #428]	@ (800e9b4 <mem_trim+0x1f8>)
 800e808:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e80c:	496a      	ldr	r1, [pc, #424]	@ (800e9b8 <mem_trim+0x1fc>)
 800e80e:	486b      	ldr	r0, [pc, #428]	@ (800e9bc <mem_trim+0x200>)
 800e810:	f00b faa0 	bl	8019d54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e814:	4b65      	ldr	r3, [pc, #404]	@ (800e9ac <mem_trim+0x1f0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d304      	bcc.n	800e828 <mem_trim+0x6c>
 800e81e:	4b64      	ldr	r3, [pc, #400]	@ (800e9b0 <mem_trim+0x1f4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	429a      	cmp	r2, r3
 800e826:	d307      	bcc.n	800e838 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e828:	f00a fd3e 	bl	80192a8 <sys_arch_protect>
 800e82c:	60b8      	str	r0, [r7, #8]
 800e82e:	68b8      	ldr	r0, [r7, #8]
 800e830:	f00a fd48 	bl	80192c4 <sys_arch_unprotect>
    return rmem;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	e0b5      	b.n	800e9a4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	3b08      	subs	r3, #8
 800e83c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e83e:	69b8      	ldr	r0, [r7, #24]
 800e840:	f7ff fdea 	bl	800e418 <mem_to_ptr>
 800e844:	4603      	mov	r3, r0
 800e846:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	881a      	ldrh	r2, [r3, #0]
 800e84c:	8afb      	ldrh	r3, [r7, #22]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b08      	subs	r3, #8
 800e854:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e856:	8bfa      	ldrh	r2, [r7, #30]
 800e858:	8abb      	ldrh	r3, [r7, #20]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d906      	bls.n	800e86c <mem_trim+0xb0>
 800e85e:	4b55      	ldr	r3, [pc, #340]	@ (800e9b4 <mem_trim+0x1f8>)
 800e860:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e864:	4956      	ldr	r1, [pc, #344]	@ (800e9c0 <mem_trim+0x204>)
 800e866:	4855      	ldr	r0, [pc, #340]	@ (800e9bc <mem_trim+0x200>)
 800e868:	f00b fa74 	bl	8019d54 <iprintf>
  if (newsize > size) {
 800e86c:	8bfa      	ldrh	r2, [r7, #30]
 800e86e:	8abb      	ldrh	r3, [r7, #20]
 800e870:	429a      	cmp	r2, r3
 800e872:	d901      	bls.n	800e878 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	e095      	b.n	800e9a4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e878:	8bfa      	ldrh	r2, [r7, #30]
 800e87a:	8abb      	ldrh	r3, [r7, #20]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d101      	bne.n	800e884 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	e08f      	b.n	800e9a4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e884:	484f      	ldr	r0, [pc, #316]	@ (800e9c4 <mem_trim+0x208>)
 800e886:	f00a fcd3 	bl	8019230 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fdb0 	bl	800e3f4 <ptr_to_mem>
 800e894:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	791b      	ldrb	r3, [r3, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d13f      	bne.n	800e91e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e8a6:	d106      	bne.n	800e8b6 <mem_trim+0xfa>
 800e8a8:	4b42      	ldr	r3, [pc, #264]	@ (800e9b4 <mem_trim+0x1f8>)
 800e8aa:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e8ae:	4946      	ldr	r1, [pc, #280]	@ (800e9c8 <mem_trim+0x20c>)
 800e8b0:	4842      	ldr	r0, [pc, #264]	@ (800e9bc <mem_trim+0x200>)
 800e8b2:	f00b fa4f 	bl	8019d54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e8bc:	8afa      	ldrh	r2, [r7, #22]
 800e8be:	8bfb      	ldrh	r3, [r7, #30]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e8c8:	4b40      	ldr	r3, [pc, #256]	@ (800e9cc <mem_trim+0x210>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d106      	bne.n	800e8e0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e8d2:	89fb      	ldrh	r3, [r7, #14]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7ff fd8d 	bl	800e3f4 <ptr_to_mem>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4a3b      	ldr	r2, [pc, #236]	@ (800e9cc <mem_trim+0x210>)
 800e8de:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e8e0:	89fb      	ldrh	r3, [r7, #14]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff fd86 	bl	800e3f4 <ptr_to_mem>
 800e8e8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	89ba      	ldrh	r2, [r7, #12]
 800e8f4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	8afa      	ldrh	r2, [r7, #22]
 800e8fa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	89fa      	ldrh	r2, [r7, #14]
 800e900:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e90a:	d047      	beq.n	800e99c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	881b      	ldrh	r3, [r3, #0]
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff fd6f 	bl	800e3f4 <ptr_to_mem>
 800e916:	4602      	mov	r2, r0
 800e918:	89fb      	ldrh	r3, [r7, #14]
 800e91a:	8053      	strh	r3, [r2, #2]
 800e91c:	e03e      	b.n	800e99c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e91e:	8bfb      	ldrh	r3, [r7, #30]
 800e920:	f103 0214 	add.w	r2, r3, #20
 800e924:	8abb      	ldrh	r3, [r7, #20]
 800e926:	429a      	cmp	r2, r3
 800e928:	d838      	bhi.n	800e99c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e92a:	8afa      	ldrh	r2, [r7, #22]
 800e92c:	8bfb      	ldrh	r3, [r7, #30]
 800e92e:	4413      	add	r3, r2
 800e930:	b29b      	uxth	r3, r3
 800e932:	3308      	adds	r3, #8
 800e934:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e93e:	d106      	bne.n	800e94e <mem_trim+0x192>
 800e940:	4b1c      	ldr	r3, [pc, #112]	@ (800e9b4 <mem_trim+0x1f8>)
 800e942:	f240 3216 	movw	r2, #790	@ 0x316
 800e946:	4920      	ldr	r1, [pc, #128]	@ (800e9c8 <mem_trim+0x20c>)
 800e948:	481c      	ldr	r0, [pc, #112]	@ (800e9bc <mem_trim+0x200>)
 800e94a:	f00b fa03 	bl	8019d54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e94e:	89fb      	ldrh	r3, [r7, #14]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fd4f 	bl	800e3f4 <ptr_to_mem>
 800e956:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e958:	4b1c      	ldr	r3, [pc, #112]	@ (800e9cc <mem_trim+0x210>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d202      	bcs.n	800e968 <mem_trim+0x1ac>
      lfree = mem2;
 800e962:	4a1a      	ldr	r2, [pc, #104]	@ (800e9cc <mem_trim+0x210>)
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	2200      	movs	r2, #0
 800e96c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	881a      	ldrh	r2, [r3, #0]
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	8afa      	ldrh	r2, [r7, #22]
 800e97a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	89fa      	ldrh	r2, [r7, #14]
 800e980:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e98a:	d007      	beq.n	800e99c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	881b      	ldrh	r3, [r3, #0]
 800e990:	4618      	mov	r0, r3
 800e992:	f7ff fd2f 	bl	800e3f4 <ptr_to_mem>
 800e996:	4602      	mov	r2, r0
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e99c:	4809      	ldr	r0, [pc, #36]	@ (800e9c4 <mem_trim+0x208>)
 800e99e:	f00a fc56 	bl	801924e <sys_mutex_unlock>
  return rmem;
 800e9a2:	687b      	ldr	r3, [r7, #4]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3720      	adds	r7, #32
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	2000ec94 	.word	0x2000ec94
 800e9b0:	2000ec98 	.word	0x2000ec98
 800e9b4:	0801cf28 	.word	0x0801cf28
 800e9b8:	0801d0b4 	.word	0x0801d0b4
 800e9bc:	0801cf70 	.word	0x0801cf70
 800e9c0:	0801d0cc 	.word	0x0801d0cc
 800e9c4:	2000ec9c 	.word	0x2000ec9c
 800e9c8:	0801d0ec 	.word	0x0801d0ec
 800e9cc:	2000eca0 	.word	0x2000eca0

0800e9d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e9da:	88fb      	ldrh	r3, [r7, #6]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <mem_malloc+0x14>
    return NULL;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	e0e2      	b.n	800ebaa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e9e4:	88fb      	ldrh	r3, [r7, #6]
 800e9e6:	3303      	adds	r3, #3
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	f023 0303 	bic.w	r3, r3, #3
 800e9ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e9f0:	8bbb      	ldrh	r3, [r7, #28]
 800e9f2:	2b0b      	cmp	r3, #11
 800e9f4:	d801      	bhi.n	800e9fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e9f6:	230c      	movs	r3, #12
 800e9f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e9fa:	8bbb      	ldrh	r3, [r7, #28]
 800e9fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ea00:	d803      	bhi.n	800ea0a <mem_malloc+0x3a>
 800ea02:	8bba      	ldrh	r2, [r7, #28]
 800ea04:	88fb      	ldrh	r3, [r7, #6]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d201      	bcs.n	800ea0e <mem_malloc+0x3e>
    return NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e0cd      	b.n	800ebaa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ea0e:	4869      	ldr	r0, [pc, #420]	@ (800ebb4 <mem_malloc+0x1e4>)
 800ea10:	f00a fc0e 	bl	8019230 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ea14:	4b68      	ldr	r3, [pc, #416]	@ (800ebb8 <mem_malloc+0x1e8>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fcfd 	bl	800e418 <mem_to_ptr>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	83fb      	strh	r3, [r7, #30]
 800ea22:	e0b7      	b.n	800eb94 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ea24:	8bfb      	ldrh	r3, [r7, #30]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff fce4 	bl	800e3f4 <ptr_to_mem>
 800ea2c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	791b      	ldrb	r3, [r3, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f040 80a7 	bne.w	800eb86 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	8bfb      	ldrh	r3, [r7, #30]
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	f1a3 0208 	sub.w	r2, r3, #8
 800ea46:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	f0c0 809c 	bcc.w	800eb86 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	881b      	ldrh	r3, [r3, #0]
 800ea52:	461a      	mov	r2, r3
 800ea54:	8bfb      	ldrh	r3, [r7, #30]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	f1a3 0208 	sub.w	r2, r3, #8
 800ea5c:	8bbb      	ldrh	r3, [r7, #28]
 800ea5e:	3314      	adds	r3, #20
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d333      	bcc.n	800eacc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ea64:	8bfa      	ldrh	r2, [r7, #30]
 800ea66:	8bbb      	ldrh	r3, [r7, #28]
 800ea68:	4413      	add	r3, r2
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ea70:	8a7b      	ldrh	r3, [r7, #18]
 800ea72:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ea76:	d106      	bne.n	800ea86 <mem_malloc+0xb6>
 800ea78:	4b50      	ldr	r3, [pc, #320]	@ (800ebbc <mem_malloc+0x1ec>)
 800ea7a:	f240 3287 	movw	r2, #903	@ 0x387
 800ea7e:	4950      	ldr	r1, [pc, #320]	@ (800ebc0 <mem_malloc+0x1f0>)
 800ea80:	4850      	ldr	r0, [pc, #320]	@ (800ebc4 <mem_malloc+0x1f4>)
 800ea82:	f00b f967 	bl	8019d54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ea86:	8a7b      	ldrh	r3, [r7, #18]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fcb3 	bl	800e3f4 <ptr_to_mem>
 800ea8e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2200      	movs	r2, #0
 800ea94:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	881a      	ldrh	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	8bfa      	ldrh	r2, [r7, #30]
 800eaa2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	8a7a      	ldrh	r2, [r7, #18]
 800eaa8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	2201      	movs	r2, #1
 800eaae:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800eab8:	d00b      	beq.n	800ead2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7ff fc98 	bl	800e3f4 <ptr_to_mem>
 800eac4:	4602      	mov	r2, r0
 800eac6:	8a7b      	ldrh	r3, [r7, #18]
 800eac8:	8053      	strh	r3, [r2, #2]
 800eaca:	e002      	b.n	800ead2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2201      	movs	r2, #1
 800ead0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ead2:	4b39      	ldr	r3, [pc, #228]	@ (800ebb8 <mem_malloc+0x1e8>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d127      	bne.n	800eb2c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800eadc:	4b36      	ldr	r3, [pc, #216]	@ (800ebb8 <mem_malloc+0x1e8>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800eae2:	e005      	b.n	800eaf0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	881b      	ldrh	r3, [r3, #0]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fc83 	bl	800e3f4 <ptr_to_mem>
 800eaee:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	791b      	ldrb	r3, [r3, #4]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <mem_malloc+0x132>
 800eaf8:	4b33      	ldr	r3, [pc, #204]	@ (800ebc8 <mem_malloc+0x1f8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	69ba      	ldr	r2, [r7, #24]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d1f0      	bne.n	800eae4 <mem_malloc+0x114>
          }
          lfree = cur;
 800eb02:	4a2d      	ldr	r2, [pc, #180]	@ (800ebb8 <mem_malloc+0x1e8>)
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800eb08:	4b2b      	ldr	r3, [pc, #172]	@ (800ebb8 <mem_malloc+0x1e8>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	4b2e      	ldr	r3, [pc, #184]	@ (800ebc8 <mem_malloc+0x1f8>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d00b      	beq.n	800eb2c <mem_malloc+0x15c>
 800eb14:	4b28      	ldr	r3, [pc, #160]	@ (800ebb8 <mem_malloc+0x1e8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	791b      	ldrb	r3, [r3, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d006      	beq.n	800eb2c <mem_malloc+0x15c>
 800eb1e:	4b27      	ldr	r3, [pc, #156]	@ (800ebbc <mem_malloc+0x1ec>)
 800eb20:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800eb24:	4929      	ldr	r1, [pc, #164]	@ (800ebcc <mem_malloc+0x1fc>)
 800eb26:	4827      	ldr	r0, [pc, #156]	@ (800ebc4 <mem_malloc+0x1f4>)
 800eb28:	f00b f914 	bl	8019d54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800eb2c:	4821      	ldr	r0, [pc, #132]	@ (800ebb4 <mem_malloc+0x1e4>)
 800eb2e:	f00a fb8e 	bl	801924e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800eb32:	8bba      	ldrh	r2, [r7, #28]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	4413      	add	r3, r2
 800eb38:	3308      	adds	r3, #8
 800eb3a:	4a23      	ldr	r2, [pc, #140]	@ (800ebc8 <mem_malloc+0x1f8>)
 800eb3c:	6812      	ldr	r2, [r2, #0]
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d906      	bls.n	800eb50 <mem_malloc+0x180>
 800eb42:	4b1e      	ldr	r3, [pc, #120]	@ (800ebbc <mem_malloc+0x1ec>)
 800eb44:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800eb48:	4921      	ldr	r1, [pc, #132]	@ (800ebd0 <mem_malloc+0x200>)
 800eb4a:	481e      	ldr	r0, [pc, #120]	@ (800ebc4 <mem_malloc+0x1f4>)
 800eb4c:	f00b f902 	bl	8019d54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f003 0303 	and.w	r3, r3, #3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <mem_malloc+0x198>
 800eb5a:	4b18      	ldr	r3, [pc, #96]	@ (800ebbc <mem_malloc+0x1ec>)
 800eb5c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800eb60:	491c      	ldr	r1, [pc, #112]	@ (800ebd4 <mem_malloc+0x204>)
 800eb62:	4818      	ldr	r0, [pc, #96]	@ (800ebc4 <mem_malloc+0x1f4>)
 800eb64:	f00b f8f6 	bl	8019d54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	f003 0303 	and.w	r3, r3, #3
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d006      	beq.n	800eb80 <mem_malloc+0x1b0>
 800eb72:	4b12      	ldr	r3, [pc, #72]	@ (800ebbc <mem_malloc+0x1ec>)
 800eb74:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800eb78:	4917      	ldr	r1, [pc, #92]	@ (800ebd8 <mem_malloc+0x208>)
 800eb7a:	4812      	ldr	r0, [pc, #72]	@ (800ebc4 <mem_malloc+0x1f4>)
 800eb7c:	f00b f8ea 	bl	8019d54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	3308      	adds	r3, #8
 800eb84:	e011      	b.n	800ebaa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800eb86:	8bfb      	ldrh	r3, [r7, #30]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7ff fc33 	bl	800e3f4 <ptr_to_mem>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800eb94:	8bfa      	ldrh	r2, [r7, #30]
 800eb96:	8bbb      	ldrh	r3, [r7, #28]
 800eb98:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	f4ff af41 	bcc.w	800ea24 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800eba2:	4804      	ldr	r0, [pc, #16]	@ (800ebb4 <mem_malloc+0x1e4>)
 800eba4:	f00a fb53 	bl	801924e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3720      	adds	r7, #32
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	2000ec9c 	.word	0x2000ec9c
 800ebb8:	2000eca0 	.word	0x2000eca0
 800ebbc:	0801cf28 	.word	0x0801cf28
 800ebc0:	0801d0ec 	.word	0x0801d0ec
 800ebc4:	0801cf70 	.word	0x0801cf70
 800ebc8:	2000ec98 	.word	0x2000ec98
 800ebcc:	0801d100 	.word	0x0801d100
 800ebd0:	0801d11c 	.word	0x0801d11c
 800ebd4:	0801d14c 	.word	0x0801d14c
 800ebd8:	0801d17c 	.word	0x0801d17c

0800ebdc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	3303      	adds	r3, #3
 800ebf2:	f023 0303 	bic.w	r3, r3, #3
 800ebf6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60fb      	str	r3, [r7, #12]
 800ebfc:	e011      	b.n	800ec22 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	461a      	mov	r2, r3
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	4413      	add	r3, r2
 800ec1a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	885b      	ldrh	r3, [r3, #2]
 800ec26:	461a      	mov	r2, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	dbe7      	blt.n	800ebfe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ec2e:	bf00      	nop
 800ec30:	bf00      	nop
 800ec32:	3714      	adds	r7, #20
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ec42:	2300      	movs	r3, #0
 800ec44:	80fb      	strh	r3, [r7, #6]
 800ec46:	e009      	b.n	800ec5c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ec48:	88fb      	ldrh	r3, [r7, #6]
 800ec4a:	4a08      	ldr	r2, [pc, #32]	@ (800ec6c <memp_init+0x30>)
 800ec4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff ffc3 	bl	800ebdc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ec56:	88fb      	ldrh	r3, [r7, #6]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	80fb      	strh	r3, [r7, #6]
 800ec5c:	88fb      	ldrh	r3, [r7, #6]
 800ec5e:	2b0c      	cmp	r3, #12
 800ec60:	d9f2      	bls.n	800ec48 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	0801f988 	.word	0x0801f988

0800ec70 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ec78:	f00a fb16 	bl	80192a8 <sys_arch_protect>
 800ec7c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d015      	beq.n	800ecb8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	6812      	ldr	r2, [r2, #0]
 800ec94:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	f003 0303 	and.w	r3, r3, #3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <do_memp_malloc_pool+0x3e>
 800eca0:	4b09      	ldr	r3, [pc, #36]	@ (800ecc8 <do_memp_malloc_pool+0x58>)
 800eca2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800eca6:	4909      	ldr	r1, [pc, #36]	@ (800eccc <do_memp_malloc_pool+0x5c>)
 800eca8:	4809      	ldr	r0, [pc, #36]	@ (800ecd0 <do_memp_malloc_pool+0x60>)
 800ecaa:	f00b f853 	bl	8019d54 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f00a fb08 	bl	80192c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	e003      	b.n	800ecc0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f00a fb03 	bl	80192c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	0801d1a0 	.word	0x0801d1a0
 800eccc:	0801d1d0 	.word	0x0801d1d0
 800ecd0:	0801d1f4 	.word	0x0801d1f4

0800ecd4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4603      	mov	r3, r0
 800ecdc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	2b0c      	cmp	r3, #12
 800ece2:	d908      	bls.n	800ecf6 <memp_malloc+0x22>
 800ece4:	4b0a      	ldr	r3, [pc, #40]	@ (800ed10 <memp_malloc+0x3c>)
 800ece6:	f240 1257 	movw	r2, #343	@ 0x157
 800ecea:	490a      	ldr	r1, [pc, #40]	@ (800ed14 <memp_malloc+0x40>)
 800ecec:	480a      	ldr	r0, [pc, #40]	@ (800ed18 <memp_malloc+0x44>)
 800ecee:	f00b f831 	bl	8019d54 <iprintf>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	e008      	b.n	800ed08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	4a08      	ldr	r2, [pc, #32]	@ (800ed1c <memp_malloc+0x48>)
 800ecfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff ffb6 	bl	800ec70 <do_memp_malloc_pool>
 800ed04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ed06:	68fb      	ldr	r3, [r7, #12]
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	0801d1a0 	.word	0x0801d1a0
 800ed14:	0801d230 	.word	0x0801d230
 800ed18:	0801d1f4 	.word	0x0801d1f4
 800ed1c:	0801f988 	.word	0x0801f988

0800ed20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	f003 0303 	and.w	r3, r3, #3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d006      	beq.n	800ed42 <do_memp_free_pool+0x22>
 800ed34:	4b0d      	ldr	r3, [pc, #52]	@ (800ed6c <do_memp_free_pool+0x4c>)
 800ed36:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ed3a:	490d      	ldr	r1, [pc, #52]	@ (800ed70 <do_memp_free_pool+0x50>)
 800ed3c:	480d      	ldr	r0, [pc, #52]	@ (800ed74 <do_memp_free_pool+0x54>)
 800ed3e:	f00b f809 	bl	8019d54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ed46:	f00a faaf 	bl	80192a8 <sys_arch_protect>
 800ed4a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ed5e:	68b8      	ldr	r0, [r7, #8]
 800ed60:	f00a fab0 	bl	80192c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ed64:	bf00      	nop
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	0801d1a0 	.word	0x0801d1a0
 800ed70:	0801d250 	.word	0x0801d250
 800ed74:	0801d1f4 	.word	0x0801d1f4

0800ed78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	6039      	str	r1, [r7, #0]
 800ed82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ed84:	79fb      	ldrb	r3, [r7, #7]
 800ed86:	2b0c      	cmp	r3, #12
 800ed88:	d907      	bls.n	800ed9a <memp_free+0x22>
 800ed8a:	4b0c      	ldr	r3, [pc, #48]	@ (800edbc <memp_free+0x44>)
 800ed8c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ed90:	490b      	ldr	r1, [pc, #44]	@ (800edc0 <memp_free+0x48>)
 800ed92:	480c      	ldr	r0, [pc, #48]	@ (800edc4 <memp_free+0x4c>)
 800ed94:	f00a ffde 	bl	8019d54 <iprintf>
 800ed98:	e00c      	b.n	800edb4 <memp_free+0x3c>

  if (mem == NULL) {
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d008      	beq.n	800edb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	4a09      	ldr	r2, [pc, #36]	@ (800edc8 <memp_free+0x50>)
 800eda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eda8:	6839      	ldr	r1, [r7, #0]
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff ffb8 	bl	800ed20 <do_memp_free_pool>
 800edb0:	e000      	b.n	800edb4 <memp_free+0x3c>
    return;
 800edb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	0801d1a0 	.word	0x0801d1a0
 800edc0:	0801d270 	.word	0x0801d270
 800edc4:	0801d1f4 	.word	0x0801d1f4
 800edc8:	0801f988 	.word	0x0801f988

0800edcc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800edd0:	bf00      	nop
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
	...

0800eddc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b086      	sub	sp, #24
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
 800ede8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d108      	bne.n	800ee02 <netif_add+0x26>
 800edf0:	4b57      	ldr	r3, [pc, #348]	@ (800ef50 <netif_add+0x174>)
 800edf2:	f240 1227 	movw	r2, #295	@ 0x127
 800edf6:	4957      	ldr	r1, [pc, #348]	@ (800ef54 <netif_add+0x178>)
 800edf8:	4857      	ldr	r0, [pc, #348]	@ (800ef58 <netif_add+0x17c>)
 800edfa:	f00a ffab 	bl	8019d54 <iprintf>
 800edfe:	2300      	movs	r3, #0
 800ee00:	e0a2      	b.n	800ef48 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d108      	bne.n	800ee1a <netif_add+0x3e>
 800ee08:	4b51      	ldr	r3, [pc, #324]	@ (800ef50 <netif_add+0x174>)
 800ee0a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ee0e:	4953      	ldr	r1, [pc, #332]	@ (800ef5c <netif_add+0x180>)
 800ee10:	4851      	ldr	r0, [pc, #324]	@ (800ef58 <netif_add+0x17c>)
 800ee12:	f00a ff9f 	bl	8019d54 <iprintf>
 800ee16:	2300      	movs	r3, #0
 800ee18:	e096      	b.n	800ef48 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ee20:	4b4f      	ldr	r3, [pc, #316]	@ (800ef60 <netif_add+0x184>)
 800ee22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d101      	bne.n	800ee2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ee2a:	4b4d      	ldr	r3, [pc, #308]	@ (800ef60 <netif_add+0x184>)
 800ee2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ee34:	4b4a      	ldr	r3, [pc, #296]	@ (800ef60 <netif_add+0x184>)
 800ee36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	4a45      	ldr	r2, [pc, #276]	@ (800ef64 <netif_add+0x188>)
 800ee4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6a3a      	ldr	r2, [r7, #32]
 800ee68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ee6a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef68 <netif_add+0x18c>)
 800ee6c:	781a      	ldrb	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 f913 	bl	800f0ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	4798      	blx	r3
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <netif_add+0xba>
    return NULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e058      	b.n	800ef48 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee9c:	2bff      	cmp	r3, #255	@ 0xff
 800ee9e:	d103      	bne.n	800eea8 <netif_add+0xcc>
        netif->num = 0;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eeac:	4b2f      	ldr	r3, [pc, #188]	@ (800ef6c <netif_add+0x190>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	617b      	str	r3, [r7, #20]
 800eeb2:	e02b      	b.n	800ef0c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800eeb4:	697a      	ldr	r2, [r7, #20]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d106      	bne.n	800eeca <netif_add+0xee>
 800eebc:	4b24      	ldr	r3, [pc, #144]	@ (800ef50 <netif_add+0x174>)
 800eebe:	f240 128b 	movw	r2, #395	@ 0x18b
 800eec2:	492b      	ldr	r1, [pc, #172]	@ (800ef70 <netif_add+0x194>)
 800eec4:	4824      	ldr	r0, [pc, #144]	@ (800ef58 <netif_add+0x17c>)
 800eec6:	f00a ff45 	bl	8019d54 <iprintf>
        num_netifs++;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	3301      	adds	r3, #1
 800eece:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	2bff      	cmp	r3, #255	@ 0xff
 800eed4:	dd06      	ble.n	800eee4 <netif_add+0x108>
 800eed6:	4b1e      	ldr	r3, [pc, #120]	@ (800ef50 <netif_add+0x174>)
 800eed8:	f240 128d 	movw	r2, #397	@ 0x18d
 800eedc:	4925      	ldr	r1, [pc, #148]	@ (800ef74 <netif_add+0x198>)
 800eede:	481e      	ldr	r0, [pc, #120]	@ (800ef58 <netif_add+0x17c>)
 800eee0:	f00a ff38 	bl	8019d54 <iprintf>
        if (netif2->num == netif->num) {
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d108      	bne.n	800ef06 <netif_add+0x12a>
          netif->num++;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eefa:	3301      	adds	r3, #1
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ef04:	e005      	b.n	800ef12 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	617b      	str	r3, [r7, #20]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1d0      	bne.n	800eeb4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1be      	bne.n	800ee96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef1e:	2bfe      	cmp	r3, #254	@ 0xfe
 800ef20:	d103      	bne.n	800ef2a <netif_add+0x14e>
    netif_num = 0;
 800ef22:	4b11      	ldr	r3, [pc, #68]	@ (800ef68 <netif_add+0x18c>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	701a      	strb	r2, [r3, #0]
 800ef28:	e006      	b.n	800ef38 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef30:	3301      	adds	r3, #1
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	4b0c      	ldr	r3, [pc, #48]	@ (800ef68 <netif_add+0x18c>)
 800ef36:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ef38:	4b0c      	ldr	r3, [pc, #48]	@ (800ef6c <netif_add+0x190>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ef40:	4a0a      	ldr	r2, [pc, #40]	@ (800ef6c <netif_add+0x190>)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ef46:	68fb      	ldr	r3, [r7, #12]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	0801d28c 	.word	0x0801d28c
 800ef54:	0801d320 	.word	0x0801d320
 800ef58:	0801d2dc 	.word	0x0801d2dc
 800ef5c:	0801d33c 	.word	0x0801d33c
 800ef60:	0801f9fc 	.word	0x0801f9fc
 800ef64:	0800f387 	.word	0x0800f387
 800ef68:	20011d78 	.word	0x20011d78
 800ef6c:	20011d70 	.word	0x20011d70
 800ef70:	0801d360 	.word	0x0801d360
 800ef74:	0801d374 	.word	0x0801d374

0800ef78 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f002 fe51 	bl	8011c2c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ef8a:	6839      	ldr	r1, [r7, #0]
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f007 fcfd 	bl	801698c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ef92:	bf00      	nop
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <netif_do_set_ipaddr+0x20>
 800efae:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <netif_do_set_ipaddr+0x88>)
 800efb0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800efb4:	491c      	ldr	r1, [pc, #112]	@ (800f028 <netif_do_set_ipaddr+0x8c>)
 800efb6:	481d      	ldr	r0, [pc, #116]	@ (800f02c <netif_do_set_ipaddr+0x90>)
 800efb8:	f00a fecc 	bl	8019d54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d106      	bne.n	800efd0 <netif_do_set_ipaddr+0x34>
 800efc2:	4b18      	ldr	r3, [pc, #96]	@ (800f024 <netif_do_set_ipaddr+0x88>)
 800efc4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800efc8:	4917      	ldr	r1, [pc, #92]	@ (800f028 <netif_do_set_ipaddr+0x8c>)
 800efca:	4818      	ldr	r0, [pc, #96]	@ (800f02c <netif_do_set_ipaddr+0x90>)
 800efcc:	f00a fec2 	bl	8019d54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	3304      	adds	r3, #4
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d01c      	beq.n	800f018 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3304      	adds	r3, #4
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800efee:	f107 0314 	add.w	r3, r7, #20
 800eff2:	4619      	mov	r1, r3
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7ff ffbf 	bl	800ef78 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <netif_do_set_ipaddr+0x6a>
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	e000      	b.n	800f008 <netif_do_set_ipaddr+0x6c>
 800f006:	2300      	movs	r3, #0
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f00c:	2101      	movs	r1, #1
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f8d2 	bl	800f1b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	0801d28c 	.word	0x0801d28c
 800f028:	0801d3a4 	.word	0x0801d3a4
 800f02c:	0801d2dc 	.word	0x0801d2dc

0800f030 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f030:	b480      	push	{r7}
 800f032:	b085      	sub	sp, #20
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3308      	adds	r3, #8
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	429a      	cmp	r2, r3
 800f048:	d00a      	beq.n	800f060 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <netif_do_set_netmask+0x26>
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	e000      	b.n	800f058 <netif_do_set_netmask+0x28>
 800f056:	2300      	movs	r3, #0
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f05c:	2301      	movs	r3, #1
 800f05e:	e000      	b.n	800f062 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f06e:	b480      	push	{r7}
 800f070:	b085      	sub	sp, #20
 800f072:	af00      	add	r7, sp, #0
 800f074:	60f8      	str	r0, [r7, #12]
 800f076:	60b9      	str	r1, [r7, #8]
 800f078:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	330c      	adds	r3, #12
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d00a      	beq.n	800f09e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <netif_do_set_gw+0x26>
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	e000      	b.n	800f096 <netif_do_set_gw+0x28>
 800f094:	2300      	movs	r3, #0
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f09a:	2301      	movs	r3, #1
 800f09c:	e000      	b.n	800f0a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b088      	sub	sp, #32
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
 800f0b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f0c8:	4b1c      	ldr	r3, [pc, #112]	@ (800f13c <netif_set_addr+0x90>)
 800f0ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800f13c <netif_set_addr+0x90>)
 800f0d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f0dc:	4b17      	ldr	r3, [pc, #92]	@ (800f13c <netif_set_addr+0x90>)
 800f0de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d003      	beq.n	800f0ee <netif_set_addr+0x42>
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <netif_set_addr+0x46>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e000      	b.n	800f0f4 <netif_set_addr+0x48>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d006      	beq.n	800f10a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f0fc:	f107 0310 	add.w	r3, r7, #16
 800f100:	461a      	mov	r2, r3
 800f102:	68b9      	ldr	r1, [r7, #8]
 800f104:	68f8      	ldr	r0, [r7, #12]
 800f106:	f7ff ff49 	bl	800ef9c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f10a:	69fa      	ldr	r2, [r7, #28]
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7ff ff8e 	bl	800f030 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f114:	69ba      	ldr	r2, [r7, #24]
 800f116:	6839      	ldr	r1, [r7, #0]
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f7ff ffa8 	bl	800f06e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d106      	bne.n	800f132 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f124:	f107 0310 	add.w	r3, r7, #16
 800f128:	461a      	mov	r2, r3
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f7ff ff35 	bl	800ef9c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f132:	bf00      	nop
 800f134:	3720      	adds	r7, #32
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	0801f9fc 	.word	0x0801f9fc

0800f140 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f148:	4a04      	ldr	r2, [pc, #16]	@ (800f15c <netif_set_default+0x1c>)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f14e:	bf00      	nop
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	20011d74 	.word	0x20011d74

0800f160 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d107      	bne.n	800f17e <netif_set_up+0x1e>
 800f16e:	4b0f      	ldr	r3, [pc, #60]	@ (800f1ac <netif_set_up+0x4c>)
 800f170:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800f174:	490e      	ldr	r1, [pc, #56]	@ (800f1b0 <netif_set_up+0x50>)
 800f176:	480f      	ldr	r0, [pc, #60]	@ (800f1b4 <netif_set_up+0x54>)
 800f178:	f00a fdec 	bl	8019d54 <iprintf>
 800f17c:	e013      	b.n	800f1a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10c      	bne.n	800f1a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f192:	f043 0301 	orr.w	r3, r3, #1
 800f196:	b2da      	uxtb	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f19e:	2103      	movs	r1, #3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f809 	bl	800f1b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	0801d28c 	.word	0x0801d28c
 800f1b0:	0801d414 	.word	0x0801d414
 800f1b4:	0801d2dc 	.word	0x0801d2dc

0800f1b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <netif_issue_reports+0x20>
 800f1ca:	4b18      	ldr	r3, [pc, #96]	@ (800f22c <netif_issue_reports+0x74>)
 800f1cc:	f240 326d 	movw	r2, #877	@ 0x36d
 800f1d0:	4917      	ldr	r1, [pc, #92]	@ (800f230 <netif_issue_reports+0x78>)
 800f1d2:	4818      	ldr	r0, [pc, #96]	@ (800f234 <netif_issue_reports+0x7c>)
 800f1d4:	f00a fdbe 	bl	8019d54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1de:	f003 0304 	and.w	r3, r3, #4
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d01e      	beq.n	800f224 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d017      	beq.n	800f224 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f1f4:	78fb      	ldrb	r3, [r7, #3]
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d013      	beq.n	800f226 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	3304      	adds	r3, #4
 800f202:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00e      	beq.n	800f226 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f20e:	f003 0308 	and.w	r3, r3, #8
 800f212:	2b00      	cmp	r3, #0
 800f214:	d007      	beq.n	800f226 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	3304      	adds	r3, #4
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f008 fb1f 	bl	8017860 <etharp_request>
 800f222:	e000      	b.n	800f226 <netif_issue_reports+0x6e>
    return;
 800f224:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	0801d28c 	.word	0x0801d28c
 800f230:	0801d430 	.word	0x0801d430
 800f234:	0801d2dc 	.word	0x0801d2dc

0800f238 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <netif_set_down+0x1e>
 800f246:	4b12      	ldr	r3, [pc, #72]	@ (800f290 <netif_set_down+0x58>)
 800f248:	f240 329b 	movw	r2, #923	@ 0x39b
 800f24c:	4911      	ldr	r1, [pc, #68]	@ (800f294 <netif_set_down+0x5c>)
 800f24e:	4812      	ldr	r0, [pc, #72]	@ (800f298 <netif_set_down+0x60>)
 800f250:	f00a fd80 	bl	8019d54 <iprintf>
 800f254:	e019      	b.n	800f28a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	d012      	beq.n	800f28a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f26a:	f023 0301 	bic.w	r3, r3, #1
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f27c:	f003 0308 	and.w	r3, r3, #8
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f007 fea9 	bl	8016fdc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	0801d28c 	.word	0x0801d28c
 800f294:	0801d454 	.word	0x0801d454
 800f298:	0801d2dc 	.word	0x0801d2dc

0800f29c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d107      	bne.n	800f2ba <netif_set_link_up+0x1e>
 800f2aa:	4b13      	ldr	r3, [pc, #76]	@ (800f2f8 <netif_set_link_up+0x5c>)
 800f2ac:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800f2b0:	4912      	ldr	r1, [pc, #72]	@ (800f2fc <netif_set_link_up+0x60>)
 800f2b2:	4813      	ldr	r0, [pc, #76]	@ (800f300 <netif_set_link_up+0x64>)
 800f2b4:	f00a fd4e 	bl	8019d54 <iprintf>
 800f2b8:	e01b      	b.n	800f2f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d114      	bne.n	800f2f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2ce:	f043 0304 	orr.w	r3, r3, #4
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f2da:	2103      	movs	r1, #3
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ff6b 	bl	800f1b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d003      	beq.n	800f2f2 <netif_set_link_up+0x56>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	0801d28c 	.word	0x0801d28c
 800f2fc:	0801d474 	.word	0x0801d474
 800f300:	0801d2dc 	.word	0x0801d2dc

0800f304 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d107      	bne.n	800f322 <netif_set_link_down+0x1e>
 800f312:	4b11      	ldr	r3, [pc, #68]	@ (800f358 <netif_set_link_down+0x54>)
 800f314:	f240 4206 	movw	r2, #1030	@ 0x406
 800f318:	4910      	ldr	r1, [pc, #64]	@ (800f35c <netif_set_link_down+0x58>)
 800f31a:	4811      	ldr	r0, [pc, #68]	@ (800f360 <netif_set_link_down+0x5c>)
 800f31c:	f00a fd1a 	bl	8019d54 <iprintf>
 800f320:	e017      	b.n	800f352 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d010      	beq.n	800f352 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f336:	f023 0304 	bic.w	r3, r3, #4
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <netif_set_link_down+0x4e>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	69db      	ldr	r3, [r3, #28]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	0801d28c 	.word	0x0801d28c
 800f35c:	0801d498 	.word	0x0801d498
 800f360:	0801d2dc 	.word	0x0801d2dc

0800f364 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	61da      	str	r2, [r3, #28]
  }
}
 800f37a:	bf00      	nop
 800f37c:	370c      	adds	r7, #12
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr

0800f386 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f386:	b480      	push	{r7}
 800f388:	b085      	sub	sp, #20
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	60f8      	str	r0, [r7, #12]
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f392:	f06f 030b 	mvn.w	r3, #11
}
 800f396:	4618      	mov	r0, r3
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
	...

0800f3a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d013      	beq.n	800f3dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ec <netif_get_by_index+0x48>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	60fb      	str	r3, [r7, #12]
 800f3ba:	e00c      	b.n	800f3d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	79fa      	ldrb	r2, [r7, #7]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d101      	bne.n	800f3d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	e006      	b.n	800f3de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	60fb      	str	r3, [r7, #12]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1ef      	bne.n	800f3bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	20011d70 	.word	0x20011d70

0800f3f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f3f6:	f009 ff57 	bl	80192a8 <sys_arch_protect>
 800f3fa:	6038      	str	r0, [r7, #0]
 800f3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f434 <pbuf_free_ooseq+0x44>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	701a      	strb	r2, [r3, #0]
 800f402:	6838      	ldr	r0, [r7, #0]
 800f404:	f009 ff5e 	bl	80192c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f408:	4b0b      	ldr	r3, [pc, #44]	@ (800f438 <pbuf_free_ooseq+0x48>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	607b      	str	r3, [r7, #4]
 800f40e:	e00a      	b.n	800f426 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f414:	2b00      	cmp	r3, #0
 800f416:	d003      	beq.n	800f420 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f002 fc45 	bl	8011ca8 <tcp_free_ooseq>
      return;
 800f41e:	e005      	b.n	800f42c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	607b      	str	r3, [r7, #4]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1f1      	bne.n	800f410 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	20011d79 	.word	0x20011d79
 800f438:	20011d88 	.word	0x20011d88

0800f43c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f444:	f7ff ffd4 	bl	800f3f0 <pbuf_free_ooseq>
}
 800f448:	bf00      	nop
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f456:	f009 ff27 	bl	80192a8 <sys_arch_protect>
 800f45a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f45c:	4b0f      	ldr	r3, [pc, #60]	@ (800f49c <pbuf_pool_is_empty+0x4c>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f462:	4b0e      	ldr	r3, [pc, #56]	@ (800f49c <pbuf_pool_is_empty+0x4c>)
 800f464:	2201      	movs	r2, #1
 800f466:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f009 ff2b 	bl	80192c4 <sys_arch_unprotect>

  if (!queued) {
 800f46e:	78fb      	ldrb	r3, [r7, #3]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10f      	bne.n	800f494 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f474:	2100      	movs	r1, #0
 800f476:	480a      	ldr	r0, [pc, #40]	@ (800f4a0 <pbuf_pool_is_empty+0x50>)
 800f478:	f7fe fed6 	bl	800e228 <tcpip_try_callback>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d008      	beq.n	800f494 <pbuf_pool_is_empty+0x44>
 800f482:	f009 ff11 	bl	80192a8 <sys_arch_protect>
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	4b04      	ldr	r3, [pc, #16]	@ (800f49c <pbuf_pool_is_empty+0x4c>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	701a      	strb	r2, [r3, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f009 ff18 	bl	80192c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f494:	bf00      	nop
 800f496:	3708      	adds	r7, #8
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	20011d79 	.word	0x20011d79
 800f4a0:	0800f43d 	.word	0x0800f43d

0800f4a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	80fb      	strh	r3, [r7, #6]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	88fa      	ldrh	r2, [r7, #6]
 800f4ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	88ba      	ldrh	r2, [r7, #4]
 800f4d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f4d2:	8b3b      	ldrh	r3, [r7, #24]
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7f3a      	ldrb	r2, [r7, #28]
 800f4de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	73da      	strb	r2, [r3, #15]
}
 800f4ec:	bf00      	nop
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b08c      	sub	sp, #48	@ 0x30
 800f4fc:	af02      	add	r7, sp, #8
 800f4fe:	4603      	mov	r3, r0
 800f500:	71fb      	strb	r3, [r7, #7]
 800f502:	460b      	mov	r3, r1
 800f504:	80bb      	strh	r3, [r7, #4]
 800f506:	4613      	mov	r3, r2
 800f508:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f50e:	887b      	ldrh	r3, [r7, #2]
 800f510:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f514:	d07f      	beq.n	800f616 <pbuf_alloc+0x11e>
 800f516:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f51a:	f300 80c8 	bgt.w	800f6ae <pbuf_alloc+0x1b6>
 800f51e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f522:	d010      	beq.n	800f546 <pbuf_alloc+0x4e>
 800f524:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f528:	f300 80c1 	bgt.w	800f6ae <pbuf_alloc+0x1b6>
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d002      	beq.n	800f536 <pbuf_alloc+0x3e>
 800f530:	2b41      	cmp	r3, #65	@ 0x41
 800f532:	f040 80bc 	bne.w	800f6ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f536:	887a      	ldrh	r2, [r7, #2]
 800f538:	88bb      	ldrh	r3, [r7, #4]
 800f53a:	4619      	mov	r1, r3
 800f53c:	2000      	movs	r0, #0
 800f53e:	f000 f8d1 	bl	800f6e4 <pbuf_alloc_reference>
 800f542:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800f544:	e0bd      	b.n	800f6c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f546:	2300      	movs	r3, #0
 800f548:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f54e:	88bb      	ldrh	r3, [r7, #4]
 800f550:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f552:	200c      	movs	r0, #12
 800f554:	f7ff fbbe 	bl	800ecd4 <memp_malloc>
 800f558:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d109      	bne.n	800f574 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f560:	f7ff ff76 	bl	800f450 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f566:	2b00      	cmp	r3, #0
 800f568:	d002      	beq.n	800f570 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f56a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f56c:	f000 faa8 	bl	800fac0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f570:	2300      	movs	r3, #0
 800f572:	e0a7      	b.n	800f6c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f576:	3303      	adds	r3, #3
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f023 0303 	bic.w	r3, r3, #3
 800f57e:	b29b      	uxth	r3, r3
 800f580:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800f584:	b29b      	uxth	r3, r3
 800f586:	8b7a      	ldrh	r2, [r7, #26]
 800f588:	4293      	cmp	r3, r2
 800f58a:	bf28      	it	cs
 800f58c:	4613      	movcs	r3, r2
 800f58e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f590:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f592:	3310      	adds	r3, #16
 800f594:	693a      	ldr	r2, [r7, #16]
 800f596:	4413      	add	r3, r2
 800f598:	3303      	adds	r3, #3
 800f59a:	f023 0303 	bic.w	r3, r3, #3
 800f59e:	4618      	mov	r0, r3
 800f5a0:	89f9      	ldrh	r1, [r7, #14]
 800f5a2:	8b7a      	ldrh	r2, [r7, #26]
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	887b      	ldrh	r3, [r7, #2]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	6938      	ldr	r0, [r7, #16]
 800f5b2:	f7ff ff77 	bl	800f4a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	f003 0303 	and.w	r3, r3, #3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d006      	beq.n	800f5d0 <pbuf_alloc+0xd8>
 800f5c2:	4b42      	ldr	r3, [pc, #264]	@ (800f6cc <pbuf_alloc+0x1d4>)
 800f5c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f5c8:	4941      	ldr	r1, [pc, #260]	@ (800f6d0 <pbuf_alloc+0x1d8>)
 800f5ca:	4842      	ldr	r0, [pc, #264]	@ (800f6d4 <pbuf_alloc+0x1dc>)
 800f5cc:	f00a fbc2 	bl	8019d54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f5d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f5d2:	3303      	adds	r3, #3
 800f5d4:	f023 0303 	bic.w	r3, r3, #3
 800f5d8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800f5dc:	d106      	bne.n	800f5ec <pbuf_alloc+0xf4>
 800f5de:	4b3b      	ldr	r3, [pc, #236]	@ (800f6cc <pbuf_alloc+0x1d4>)
 800f5e0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f5e4:	493c      	ldr	r1, [pc, #240]	@ (800f6d8 <pbuf_alloc+0x1e0>)
 800f5e6:	483b      	ldr	r0, [pc, #236]	@ (800f6d4 <pbuf_alloc+0x1dc>)
 800f5e8:	f00a fbb4 	bl	8019d54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d102      	bne.n	800f5f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5f6:	e002      	b.n	800f5fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	693a      	ldr	r2, [r7, #16]
 800f5fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f602:	8b7a      	ldrh	r2, [r7, #26]
 800f604:	89fb      	ldrh	r3, [r7, #14]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f60e:	8b7b      	ldrh	r3, [r7, #26]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d19e      	bne.n	800f552 <pbuf_alloc+0x5a>
      break;
 800f614:	e055      	b.n	800f6c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f616:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f618:	3303      	adds	r3, #3
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	f023 0303 	bic.w	r3, r3, #3
 800f620:	b29a      	uxth	r2, r3
 800f622:	88bb      	ldrh	r3, [r7, #4]
 800f624:	3303      	adds	r3, #3
 800f626:	b29b      	uxth	r3, r3
 800f628:	f023 0303 	bic.w	r3, r3, #3
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4413      	add	r3, r2
 800f630:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f632:	8b3b      	ldrh	r3, [r7, #24]
 800f634:	3310      	adds	r3, #16
 800f636:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f638:	8b3a      	ldrh	r2, [r7, #24]
 800f63a:	88bb      	ldrh	r3, [r7, #4]
 800f63c:	3303      	adds	r3, #3
 800f63e:	f023 0303 	bic.w	r3, r3, #3
 800f642:	429a      	cmp	r2, r3
 800f644:	d306      	bcc.n	800f654 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f646:	8afa      	ldrh	r2, [r7, #22]
 800f648:	88bb      	ldrh	r3, [r7, #4]
 800f64a:	3303      	adds	r3, #3
 800f64c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f650:	429a      	cmp	r2, r3
 800f652:	d201      	bcs.n	800f658 <pbuf_alloc+0x160>
        return NULL;
 800f654:	2300      	movs	r3, #0
 800f656:	e035      	b.n	800f6c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f658:	8afb      	ldrh	r3, [r7, #22]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7ff f9b8 	bl	800e9d0 <mem_malloc>
 800f660:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f664:	2b00      	cmp	r3, #0
 800f666:	d101      	bne.n	800f66c <pbuf_alloc+0x174>
        return NULL;
 800f668:	2300      	movs	r3, #0
 800f66a:	e02b      	b.n	800f6c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f66c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f66e:	3310      	adds	r3, #16
 800f670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f672:	4413      	add	r3, r2
 800f674:	3303      	adds	r3, #3
 800f676:	f023 0303 	bic.w	r3, r3, #3
 800f67a:	4618      	mov	r0, r3
 800f67c:	88b9      	ldrh	r1, [r7, #4]
 800f67e:	88ba      	ldrh	r2, [r7, #4]
 800f680:	2300      	movs	r3, #0
 800f682:	9301      	str	r3, [sp, #4]
 800f684:	887b      	ldrh	r3, [r7, #2]
 800f686:	9300      	str	r3, [sp, #0]
 800f688:	460b      	mov	r3, r1
 800f68a:	4601      	mov	r1, r0
 800f68c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f68e:	f7ff ff09 	bl	800f4a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	f003 0303 	and.w	r3, r3, #3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d010      	beq.n	800f6c0 <pbuf_alloc+0x1c8>
 800f69e:	4b0b      	ldr	r3, [pc, #44]	@ (800f6cc <pbuf_alloc+0x1d4>)
 800f6a0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f6a4:	490d      	ldr	r1, [pc, #52]	@ (800f6dc <pbuf_alloc+0x1e4>)
 800f6a6:	480b      	ldr	r0, [pc, #44]	@ (800f6d4 <pbuf_alloc+0x1dc>)
 800f6a8:	f00a fb54 	bl	8019d54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f6ac:	e008      	b.n	800f6c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f6ae:	4b07      	ldr	r3, [pc, #28]	@ (800f6cc <pbuf_alloc+0x1d4>)
 800f6b0:	f240 1227 	movw	r2, #295	@ 0x127
 800f6b4:	490a      	ldr	r1, [pc, #40]	@ (800f6e0 <pbuf_alloc+0x1e8>)
 800f6b6:	4807      	ldr	r0, [pc, #28]	@ (800f6d4 <pbuf_alloc+0x1dc>)
 800f6b8:	f00a fb4c 	bl	8019d54 <iprintf>
      return NULL;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	e001      	b.n	800f6c4 <pbuf_alloc+0x1cc>
      break;
 800f6c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3728      	adds	r7, #40	@ 0x28
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	0801d4bc 	.word	0x0801d4bc
 800f6d0:	0801d4ec 	.word	0x0801d4ec
 800f6d4:	0801d51c 	.word	0x0801d51c
 800f6d8:	0801d544 	.word	0x0801d544
 800f6dc:	0801d578 	.word	0x0801d578
 800f6e0:	0801d5a4 	.word	0x0801d5a4

0800f6e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af02      	add	r7, sp, #8
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	807b      	strh	r3, [r7, #2]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f6f4:	883b      	ldrh	r3, [r7, #0]
 800f6f6:	2b41      	cmp	r3, #65	@ 0x41
 800f6f8:	d009      	beq.n	800f70e <pbuf_alloc_reference+0x2a>
 800f6fa:	883b      	ldrh	r3, [r7, #0]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d006      	beq.n	800f70e <pbuf_alloc_reference+0x2a>
 800f700:	4b0f      	ldr	r3, [pc, #60]	@ (800f740 <pbuf_alloc_reference+0x5c>)
 800f702:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f706:	490f      	ldr	r1, [pc, #60]	@ (800f744 <pbuf_alloc_reference+0x60>)
 800f708:	480f      	ldr	r0, [pc, #60]	@ (800f748 <pbuf_alloc_reference+0x64>)
 800f70a:	f00a fb23 	bl	8019d54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f70e:	200b      	movs	r0, #11
 800f710:	f7ff fae0 	bl	800ecd4 <memp_malloc>
 800f714:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f71c:	2300      	movs	r3, #0
 800f71e:	e00b      	b.n	800f738 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f720:	8879      	ldrh	r1, [r7, #2]
 800f722:	887a      	ldrh	r2, [r7, #2]
 800f724:	2300      	movs	r3, #0
 800f726:	9301      	str	r3, [sp, #4]
 800f728:	883b      	ldrh	r3, [r7, #0]
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	460b      	mov	r3, r1
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7ff feb7 	bl	800f4a4 <pbuf_init_alloced_pbuf>
  return p;
 800f736:	68fb      	ldr	r3, [r7, #12]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	0801d4bc 	.word	0x0801d4bc
 800f744:	0801d5c0 	.word	0x0801d5c0
 800f748:	0801d51c 	.word	0x0801d51c

0800f74c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b088      	sub	sp, #32
 800f750:	af02      	add	r7, sp, #8
 800f752:	607b      	str	r3, [r7, #4]
 800f754:	4603      	mov	r3, r0
 800f756:	73fb      	strb	r3, [r7, #15]
 800f758:	460b      	mov	r3, r1
 800f75a:	81bb      	strh	r3, [r7, #12]
 800f75c:	4613      	mov	r3, r2
 800f75e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f760:	7bfb      	ldrb	r3, [r7, #15]
 800f762:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f764:	8a7b      	ldrh	r3, [r7, #18]
 800f766:	3303      	adds	r3, #3
 800f768:	f023 0203 	bic.w	r2, r3, #3
 800f76c:	89bb      	ldrh	r3, [r7, #12]
 800f76e:	441a      	add	r2, r3
 800f770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f772:	429a      	cmp	r2, r3
 800f774:	d901      	bls.n	800f77a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	e018      	b.n	800f7ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d007      	beq.n	800f790 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f780:	8a7b      	ldrh	r3, [r7, #18]
 800f782:	3303      	adds	r3, #3
 800f784:	f023 0303 	bic.w	r3, r3, #3
 800f788:	6a3a      	ldr	r2, [r7, #32]
 800f78a:	4413      	add	r3, r2
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	e001      	b.n	800f794 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f790:	2300      	movs	r3, #0
 800f792:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	89b9      	ldrh	r1, [r7, #12]
 800f798:	89ba      	ldrh	r2, [r7, #12]
 800f79a:	2302      	movs	r3, #2
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	897b      	ldrh	r3, [r7, #10]
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	6979      	ldr	r1, [r7, #20]
 800f7a6:	f7ff fe7d 	bl	800f4a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f7aa:	687b      	ldr	r3, [r7, #4]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3718      	adds	r7, #24
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d106      	bne.n	800f7d4 <pbuf_realloc+0x20>
 800f7c6:	4b3a      	ldr	r3, [pc, #232]	@ (800f8b0 <pbuf_realloc+0xfc>)
 800f7c8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f7cc:	4939      	ldr	r1, [pc, #228]	@ (800f8b4 <pbuf_realloc+0x100>)
 800f7ce:	483a      	ldr	r0, [pc, #232]	@ (800f8b8 <pbuf_realloc+0x104>)
 800f7d0:	f00a fac0 	bl	8019d54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	891b      	ldrh	r3, [r3, #8]
 800f7d8:	887a      	ldrh	r2, [r7, #2]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d263      	bcs.n	800f8a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	891a      	ldrh	r2, [r3, #8]
 800f7e2:	887b      	ldrh	r3, [r7, #2]
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f7e8:	887b      	ldrh	r3, [r7, #2]
 800f7ea:	817b      	strh	r3, [r7, #10]
  q = p;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f7f0:	e018      	b.n	800f824 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	895b      	ldrh	r3, [r3, #10]
 800f7f6:	897a      	ldrh	r2, [r7, #10]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	891a      	ldrh	r2, [r3, #8]
 800f800:	893b      	ldrh	r3, [r7, #8]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	b29a      	uxth	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <pbuf_realloc+0x70>
 800f816:	4b26      	ldr	r3, [pc, #152]	@ (800f8b0 <pbuf_realloc+0xfc>)
 800f818:	f240 12af 	movw	r2, #431	@ 0x1af
 800f81c:	4927      	ldr	r1, [pc, #156]	@ (800f8bc <pbuf_realloc+0x108>)
 800f81e:	4826      	ldr	r0, [pc, #152]	@ (800f8b8 <pbuf_realloc+0x104>)
 800f820:	f00a fa98 	bl	8019d54 <iprintf>
  while (rem_len > q->len) {
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	897a      	ldrh	r2, [r7, #10]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d8e1      	bhi.n	800f7f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	7b1b      	ldrb	r3, [r3, #12]
 800f832:	f003 030f 	and.w	r3, r3, #15
 800f836:	2b00      	cmp	r3, #0
 800f838:	d121      	bne.n	800f87e <pbuf_realloc+0xca>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	895b      	ldrh	r3, [r3, #10]
 800f83e:	897a      	ldrh	r2, [r7, #10]
 800f840:	429a      	cmp	r2, r3
 800f842:	d01c      	beq.n	800f87e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	7b5b      	ldrb	r3, [r3, #13]
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d116      	bne.n	800f87e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	685a      	ldr	r2, [r3, #4]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	b29a      	uxth	r2, r3
 800f85a:	897b      	ldrh	r3, [r7, #10]
 800f85c:	4413      	add	r3, r2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	4619      	mov	r1, r3
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f7fe ffaa 	bl	800e7bc <mem_trim>
 800f868:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d106      	bne.n	800f87e <pbuf_realloc+0xca>
 800f870:	4b0f      	ldr	r3, [pc, #60]	@ (800f8b0 <pbuf_realloc+0xfc>)
 800f872:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f876:	4912      	ldr	r1, [pc, #72]	@ (800f8c0 <pbuf_realloc+0x10c>)
 800f878:	480f      	ldr	r0, [pc, #60]	@ (800f8b8 <pbuf_realloc+0x104>)
 800f87a:	f00a fa6b 	bl	8019d54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	897a      	ldrh	r2, [r7, #10]
 800f882:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	895a      	ldrh	r2, [r3, #10]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d004      	beq.n	800f89e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f911 	bl	800fac0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	e000      	b.n	800f8a8 <pbuf_realloc+0xf4>
    return;
 800f8a6:	bf00      	nop

}
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	0801d4bc 	.word	0x0801d4bc
 800f8b4:	0801d5d4 	.word	0x0801d5d4
 800f8b8:	0801d51c 	.word	0x0801d51c
 800f8bc:	0801d5ec 	.word	0x0801d5ec
 800f8c0:	0801d604 	.word	0x0801d604

0800f8c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b086      	sub	sp, #24
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <pbuf_add_header_impl+0x22>
 800f8d8:	4b2b      	ldr	r3, [pc, #172]	@ (800f988 <pbuf_add_header_impl+0xc4>)
 800f8da:	f240 12df 	movw	r2, #479	@ 0x1df
 800f8de:	492b      	ldr	r1, [pc, #172]	@ (800f98c <pbuf_add_header_impl+0xc8>)
 800f8e0:	482b      	ldr	r0, [pc, #172]	@ (800f990 <pbuf_add_header_impl+0xcc>)
 800f8e2:	f00a fa37 	bl	8019d54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <pbuf_add_header_impl+0x30>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8f2:	d301      	bcc.n	800f8f8 <pbuf_add_header_impl+0x34>
    return 1;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e043      	b.n	800f980 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <pbuf_add_header_impl+0x3e>
    return 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e03e      	b.n	800f980 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	891a      	ldrh	r2, [r3, #8]
 800f90a:	8a7b      	ldrh	r3, [r7, #18]
 800f90c:	4413      	add	r3, r2
 800f90e:	b29b      	uxth	r3, r3
 800f910:	8a7a      	ldrh	r2, [r7, #18]
 800f912:	429a      	cmp	r2, r3
 800f914:	d901      	bls.n	800f91a <pbuf_add_header_impl+0x56>
    return 1;
 800f916:	2301      	movs	r3, #1
 800f918:	e032      	b.n	800f980 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	7b1b      	ldrb	r3, [r3, #12]
 800f91e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f920:	8a3b      	ldrh	r3, [r7, #16]
 800f922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00c      	beq.n	800f944 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	425b      	negs	r3, r3
 800f932:	4413      	add	r3, r2
 800f934:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3310      	adds	r3, #16
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d20d      	bcs.n	800f95c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f940:	2301      	movs	r3, #1
 800f942:	e01d      	b.n	800f980 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d006      	beq.n	800f958 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	685a      	ldr	r2, [r3, #4]
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	425b      	negs	r3, r3
 800f952:	4413      	add	r3, r2
 800f954:	617b      	str	r3, [r7, #20]
 800f956:	e001      	b.n	800f95c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f958:	2301      	movs	r3, #1
 800f95a:	e011      	b.n	800f980 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	895a      	ldrh	r2, [r3, #10]
 800f966:	8a7b      	ldrh	r3, [r7, #18]
 800f968:	4413      	add	r3, r2
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	891a      	ldrh	r2, [r3, #8]
 800f974:	8a7b      	ldrh	r3, [r7, #18]
 800f976:	4413      	add	r3, r2
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	811a      	strh	r2, [r3, #8]


  return 0;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3718      	adds	r7, #24
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	0801d4bc 	.word	0x0801d4bc
 800f98c:	0801d620 	.word	0x0801d620
 800f990:	0801d51c 	.word	0x0801d51c

0800f994 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f99e:	2200      	movs	r2, #0
 800f9a0:	6839      	ldr	r1, [r7, #0]
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff ff8e 	bl	800f8c4 <pbuf_add_header_impl>
 800f9a8:	4603      	mov	r3, r0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3708      	adds	r7, #8
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
	...

0800f9b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <pbuf_remove_header+0x1e>
 800f9c4:	4b20      	ldr	r3, [pc, #128]	@ (800fa48 <pbuf_remove_header+0x94>)
 800f9c6:	f240 224b 	movw	r2, #587	@ 0x24b
 800f9ca:	4920      	ldr	r1, [pc, #128]	@ (800fa4c <pbuf_remove_header+0x98>)
 800f9cc:	4820      	ldr	r0, [pc, #128]	@ (800fa50 <pbuf_remove_header+0x9c>)
 800f9ce:	f00a f9c1 	bl	8019d54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d003      	beq.n	800f9e0 <pbuf_remove_header+0x2c>
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9de:	d301      	bcc.n	800f9e4 <pbuf_remove_header+0x30>
    return 1;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e02c      	b.n	800fa3e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <pbuf_remove_header+0x3a>
    return 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e027      	b.n	800fa3e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	895b      	ldrh	r3, [r3, #10]
 800f9f6:	89fa      	ldrh	r2, [r7, #14]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d908      	bls.n	800fa0e <pbuf_remove_header+0x5a>
 800f9fc:	4b12      	ldr	r3, [pc, #72]	@ (800fa48 <pbuf_remove_header+0x94>)
 800f9fe:	f240 2255 	movw	r2, #597	@ 0x255
 800fa02:	4914      	ldr	r1, [pc, #80]	@ (800fa54 <pbuf_remove_header+0xa0>)
 800fa04:	4812      	ldr	r0, [pc, #72]	@ (800fa50 <pbuf_remove_header+0x9c>)
 800fa06:	f00a f9a5 	bl	8019d54 <iprintf>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e017      	b.n	800fa3e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	441a      	add	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	895a      	ldrh	r2, [r3, #10]
 800fa24:	89fb      	ldrh	r3, [r7, #14]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	891a      	ldrh	r2, [r3, #8]
 800fa32:	89fb      	ldrh	r3, [r7, #14]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	0801d4bc 	.word	0x0801d4bc
 800fa4c:	0801d620 	.word	0x0801d620
 800fa50:	0801d51c 	.word	0x0801d51c
 800fa54:	0801d62c 	.word	0x0801d62c

0800fa58 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	460b      	mov	r3, r1
 800fa62:	807b      	strh	r3, [r7, #2]
 800fa64:	4613      	mov	r3, r2
 800fa66:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fa68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	da08      	bge.n	800fa82 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fa70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa74:	425b      	negs	r3, r3
 800fa76:	4619      	mov	r1, r3
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7ff ff9b 	bl	800f9b4 <pbuf_remove_header>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	e007      	b.n	800fa92 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800fa82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa86:	787a      	ldrb	r2, [r7, #1]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7ff ff1a 	bl	800f8c4 <pbuf_add_header_impl>
 800fa90:	4603      	mov	r3, r0
  }
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	460b      	mov	r3, r1
 800faa4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800faa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800faaa:	2201      	movs	r2, #1
 800faac:	4619      	mov	r1, r3
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff ffd2 	bl	800fa58 <pbuf_header_impl>
 800fab4:	4603      	mov	r3, r0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b088      	sub	sp, #32
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10b      	bne.n	800fae6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d106      	bne.n	800fae2 <pbuf_free+0x22>
 800fad4:	4b3b      	ldr	r3, [pc, #236]	@ (800fbc4 <pbuf_free+0x104>)
 800fad6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800fada:	493b      	ldr	r1, [pc, #236]	@ (800fbc8 <pbuf_free+0x108>)
 800fadc:	483b      	ldr	r0, [pc, #236]	@ (800fbcc <pbuf_free+0x10c>)
 800fade:	f00a f939 	bl	8019d54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	e069      	b.n	800fbba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fae6:	2300      	movs	r3, #0
 800fae8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800faea:	e062      	b.n	800fbb2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800faec:	f009 fbdc 	bl	80192a8 <sys_arch_protect>
 800faf0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	7b9b      	ldrb	r3, [r3, #14]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d106      	bne.n	800fb08 <pbuf_free+0x48>
 800fafa:	4b32      	ldr	r3, [pc, #200]	@ (800fbc4 <pbuf_free+0x104>)
 800fafc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800fb00:	4933      	ldr	r1, [pc, #204]	@ (800fbd0 <pbuf_free+0x110>)
 800fb02:	4832      	ldr	r0, [pc, #200]	@ (800fbcc <pbuf_free+0x10c>)
 800fb04:	f00a f926 	bl	8019d54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	7b9b      	ldrb	r3, [r3, #14]
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	739a      	strb	r2, [r3, #14]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	7b9b      	ldrb	r3, [r3, #14]
 800fb18:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800fb1a:	69b8      	ldr	r0, [r7, #24]
 800fb1c:	f009 fbd2 	bl	80192c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d143      	bne.n	800fbae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	7b1b      	ldrb	r3, [r3, #12]
 800fb30:	f003 030f 	and.w	r3, r3, #15
 800fb34:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	7b5b      	ldrb	r3, [r3, #13]
 800fb3a:	f003 0302 	and.w	r3, r3, #2
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d011      	beq.n	800fb66 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <pbuf_free+0x9c>
 800fb4e:	4b1d      	ldr	r3, [pc, #116]	@ (800fbc4 <pbuf_free+0x104>)
 800fb50:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800fb54:	491f      	ldr	r1, [pc, #124]	@ (800fbd4 <pbuf_free+0x114>)
 800fb56:	481d      	ldr	r0, [pc, #116]	@ (800fbcc <pbuf_free+0x10c>)
 800fb58:	f00a f8fc 	bl	8019d54 <iprintf>
        pc->custom_free_function(p);
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	4798      	blx	r3
 800fb64:	e01d      	b.n	800fba2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d104      	bne.n	800fb76 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800fb6c:	6879      	ldr	r1, [r7, #4]
 800fb6e:	200c      	movs	r0, #12
 800fb70:	f7ff f902 	bl	800ed78 <memp_free>
 800fb74:	e015      	b.n	800fba2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d104      	bne.n	800fb86 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	200b      	movs	r0, #11
 800fb80:	f7ff f8fa 	bl	800ed78 <memp_free>
 800fb84:	e00d      	b.n	800fba2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d103      	bne.n	800fb94 <pbuf_free+0xd4>
          mem_free(p);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7fe fd85 	bl	800e69c <mem_free>
 800fb92:	e006      	b.n	800fba2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fb94:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc4 <pbuf_free+0x104>)
 800fb96:	f240 320f 	movw	r2, #783	@ 0x30f
 800fb9a:	490f      	ldr	r1, [pc, #60]	@ (800fbd8 <pbuf_free+0x118>)
 800fb9c:	480b      	ldr	r0, [pc, #44]	@ (800fbcc <pbuf_free+0x10c>)
 800fb9e:	f00a f8d9 	bl	8019d54 <iprintf>
        }
      }
      count++;
 800fba2:	7ffb      	ldrb	r3, [r7, #31]
 800fba4:	3301      	adds	r3, #1
 800fba6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	607b      	str	r3, [r7, #4]
 800fbac:	e001      	b.n	800fbb2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d199      	bne.n	800faec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fbb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3720      	adds	r7, #32
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	0801d4bc 	.word	0x0801d4bc
 800fbc8:	0801d620 	.word	0x0801d620
 800fbcc:	0801d51c 	.word	0x0801d51c
 800fbd0:	0801d64c 	.word	0x0801d64c
 800fbd4:	0801d664 	.word	0x0801d664
 800fbd8:	0801d688 	.word	0x0801d688

0800fbdc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fbe8:	e005      	b.n	800fbf6 <pbuf_clen+0x1a>
    ++len;
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	3301      	adds	r3, #1
 800fbee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1f6      	bne.n	800fbea <pbuf_clen+0xe>
  }
  return len;
 800fbfc:	89fb      	ldrh	r3, [r7, #14]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
	...

0800fc0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d016      	beq.n	800fc48 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fc1a:	f009 fb45 	bl	80192a8 <sys_arch_protect>
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	7b9b      	ldrb	r3, [r3, #14]
 800fc24:	3301      	adds	r3, #1
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	739a      	strb	r2, [r3, #14]
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f009 fb49 	bl	80192c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	7b9b      	ldrb	r3, [r3, #14]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <pbuf_ref+0x3c>
 800fc3a:	4b05      	ldr	r3, [pc, #20]	@ (800fc50 <pbuf_ref+0x44>)
 800fc3c:	f240 3242 	movw	r2, #834	@ 0x342
 800fc40:	4904      	ldr	r1, [pc, #16]	@ (800fc54 <pbuf_ref+0x48>)
 800fc42:	4805      	ldr	r0, [pc, #20]	@ (800fc58 <pbuf_ref+0x4c>)
 800fc44:	f00a f886 	bl	8019d54 <iprintf>
  }
}
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	0801d4bc 	.word	0x0801d4bc
 800fc54:	0801d69c 	.word	0x0801d69c
 800fc58:	0801d51c 	.word	0x0801d51c

0800fc5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <pbuf_cat+0x16>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d107      	bne.n	800fc82 <pbuf_cat+0x26>
 800fc72:	4b20      	ldr	r3, [pc, #128]	@ (800fcf4 <pbuf_cat+0x98>)
 800fc74:	f240 3259 	movw	r2, #857	@ 0x359
 800fc78:	491f      	ldr	r1, [pc, #124]	@ (800fcf8 <pbuf_cat+0x9c>)
 800fc7a:	4820      	ldr	r0, [pc, #128]	@ (800fcfc <pbuf_cat+0xa0>)
 800fc7c:	f00a f86a 	bl	8019d54 <iprintf>
 800fc80:	e034      	b.n	800fcec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	60fb      	str	r3, [r7, #12]
 800fc86:	e00a      	b.n	800fc9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	891a      	ldrh	r2, [r3, #8]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	891b      	ldrh	r3, [r3, #8]
 800fc90:	4413      	add	r3, r2
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1f0      	bne.n	800fc88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	891a      	ldrh	r2, [r3, #8]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	895b      	ldrh	r3, [r3, #10]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d006      	beq.n	800fcc0 <pbuf_cat+0x64>
 800fcb2:	4b10      	ldr	r3, [pc, #64]	@ (800fcf4 <pbuf_cat+0x98>)
 800fcb4:	f240 3262 	movw	r2, #866	@ 0x362
 800fcb8:	4911      	ldr	r1, [pc, #68]	@ (800fd00 <pbuf_cat+0xa4>)
 800fcba:	4810      	ldr	r0, [pc, #64]	@ (800fcfc <pbuf_cat+0xa0>)
 800fcbc:	f00a f84a 	bl	8019d54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d006      	beq.n	800fcd6 <pbuf_cat+0x7a>
 800fcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf4 <pbuf_cat+0x98>)
 800fcca:	f240 3263 	movw	r2, #867	@ 0x363
 800fcce:	490d      	ldr	r1, [pc, #52]	@ (800fd04 <pbuf_cat+0xa8>)
 800fcd0:	480a      	ldr	r0, [pc, #40]	@ (800fcfc <pbuf_cat+0xa0>)
 800fcd2:	f00a f83f 	bl	8019d54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	891a      	ldrh	r2, [r3, #8]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	891b      	ldrh	r3, [r3, #8]
 800fcde:	4413      	add	r3, r2
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	0801d4bc 	.word	0x0801d4bc
 800fcf8:	0801d6b0 	.word	0x0801d6b0
 800fcfc:	0801d51c 	.word	0x0801d51c
 800fd00:	0801d6e8 	.word	0x0801d6e8
 800fd04:	0801d718 	.word	0x0801d718

0800fd08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b086      	sub	sp, #24
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fd12:	2300      	movs	r3, #0
 800fd14:	617b      	str	r3, [r7, #20]
 800fd16:	2300      	movs	r3, #0
 800fd18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d008      	beq.n	800fd32 <pbuf_copy+0x2a>
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d005      	beq.n	800fd32 <pbuf_copy+0x2a>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	891a      	ldrh	r2, [r3, #8]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	891b      	ldrh	r3, [r3, #8]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d209      	bcs.n	800fd46 <pbuf_copy+0x3e>
 800fd32:	4b57      	ldr	r3, [pc, #348]	@ (800fe90 <pbuf_copy+0x188>)
 800fd34:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800fd38:	4956      	ldr	r1, [pc, #344]	@ (800fe94 <pbuf_copy+0x18c>)
 800fd3a:	4857      	ldr	r0, [pc, #348]	@ (800fe98 <pbuf_copy+0x190>)
 800fd3c:	f00a f80a 	bl	8019d54 <iprintf>
 800fd40:	f06f 030f 	mvn.w	r3, #15
 800fd44:	e09f      	b.n	800fe86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	895b      	ldrh	r3, [r3, #10]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	1ad2      	subs	r2, r2, r3
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	895b      	ldrh	r3, [r3, #10]
 800fd54:	4619      	mov	r1, r3
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	1acb      	subs	r3, r1, r3
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d306      	bcc.n	800fd6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	895b      	ldrh	r3, [r3, #10]
 800fd62:	461a      	mov	r2, r3
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	60fb      	str	r3, [r7, #12]
 800fd6a:	e005      	b.n	800fd78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	895b      	ldrh	r3, [r3, #10]
 800fd70:	461a      	mov	r2, r3
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	685a      	ldr	r2, [r3, #4]
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	18d0      	adds	r0, r2, r3
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	4413      	add	r3, r2
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	f00a fa61 	bl	801a252 <memcpy>
    offset_to += len;
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	4413      	add	r3, r2
 800fd96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fd98:	693a      	ldr	r2, [r7, #16]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	895b      	ldrh	r3, [r3, #10]
 800fda4:	461a      	mov	r2, r3
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d906      	bls.n	800fdba <pbuf_copy+0xb2>
 800fdac:	4b38      	ldr	r3, [pc, #224]	@ (800fe90 <pbuf_copy+0x188>)
 800fdae:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800fdb2:	493a      	ldr	r1, [pc, #232]	@ (800fe9c <pbuf_copy+0x194>)
 800fdb4:	4838      	ldr	r0, [pc, #224]	@ (800fe98 <pbuf_copy+0x190>)
 800fdb6:	f009 ffcd 	bl	8019d54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	895b      	ldrh	r3, [r3, #10]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d906      	bls.n	800fdd4 <pbuf_copy+0xcc>
 800fdc6:	4b32      	ldr	r3, [pc, #200]	@ (800fe90 <pbuf_copy+0x188>)
 800fdc8:	f240 32da 	movw	r2, #986	@ 0x3da
 800fdcc:	4934      	ldr	r1, [pc, #208]	@ (800fea0 <pbuf_copy+0x198>)
 800fdce:	4832      	ldr	r0, [pc, #200]	@ (800fe98 <pbuf_copy+0x190>)
 800fdd0:	f009 ffc0 	bl	8019d54 <iprintf>
    if (offset_from >= p_from->len) {
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	895b      	ldrh	r3, [r3, #10]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d304      	bcc.n	800fdea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	895b      	ldrh	r3, [r3, #10]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d114      	bne.n	800fe20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10c      	bne.n	800fe20 <pbuf_copy+0x118>
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d009      	beq.n	800fe20 <pbuf_copy+0x118>
 800fe0c:	4b20      	ldr	r3, [pc, #128]	@ (800fe90 <pbuf_copy+0x188>)
 800fe0e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800fe12:	4924      	ldr	r1, [pc, #144]	@ (800fea4 <pbuf_copy+0x19c>)
 800fe14:	4820      	ldr	r0, [pc, #128]	@ (800fe98 <pbuf_copy+0x190>)
 800fe16:	f009 ff9d 	bl	8019d54 <iprintf>
 800fe1a:	f06f 030f 	mvn.w	r3, #15
 800fe1e:	e032      	b.n	800fe86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d013      	beq.n	800fe4e <pbuf_copy+0x146>
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	895a      	ldrh	r2, [r3, #10]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	891b      	ldrh	r3, [r3, #8]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d10d      	bne.n	800fe4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <pbuf_copy+0x146>
 800fe3a:	4b15      	ldr	r3, [pc, #84]	@ (800fe90 <pbuf_copy+0x188>)
 800fe3c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800fe40:	4919      	ldr	r1, [pc, #100]	@ (800fea8 <pbuf_copy+0x1a0>)
 800fe42:	4815      	ldr	r0, [pc, #84]	@ (800fe98 <pbuf_copy+0x190>)
 800fe44:	f009 ff86 	bl	8019d54 <iprintf>
 800fe48:	f06f 0305 	mvn.w	r3, #5
 800fe4c:	e01b      	b.n	800fe86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d013      	beq.n	800fe7c <pbuf_copy+0x174>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	895a      	ldrh	r2, [r3, #10]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	891b      	ldrh	r3, [r3, #8]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d10d      	bne.n	800fe7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d009      	beq.n	800fe7c <pbuf_copy+0x174>
 800fe68:	4b09      	ldr	r3, [pc, #36]	@ (800fe90 <pbuf_copy+0x188>)
 800fe6a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800fe6e:	490e      	ldr	r1, [pc, #56]	@ (800fea8 <pbuf_copy+0x1a0>)
 800fe70:	4809      	ldr	r0, [pc, #36]	@ (800fe98 <pbuf_copy+0x190>)
 800fe72:	f009 ff6f 	bl	8019d54 <iprintf>
 800fe76:	f06f 0305 	mvn.w	r3, #5
 800fe7a:	e004      	b.n	800fe86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f47f af61 	bne.w	800fd46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	0801d4bc 	.word	0x0801d4bc
 800fe94:	0801d764 	.word	0x0801d764
 800fe98:	0801d51c 	.word	0x0801d51c
 800fe9c:	0801d794 	.word	0x0801d794
 800fea0:	0801d7ac 	.word	0x0801d7ac
 800fea4:	0801d7c8 	.word	0x0801d7c8
 800fea8:	0801d7d8 	.word	0x0801d7d8

0800feac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	4611      	mov	r1, r2
 800feb8:	461a      	mov	r2, r3
 800feba:	460b      	mov	r3, r1
 800febc:	80fb      	strh	r3, [r7, #6]
 800febe:	4613      	mov	r3, r2
 800fec0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d108      	bne.n	800fee2 <pbuf_copy_partial+0x36>
 800fed0:	4b2b      	ldr	r3, [pc, #172]	@ (800ff80 <pbuf_copy_partial+0xd4>)
 800fed2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fed6:	492b      	ldr	r1, [pc, #172]	@ (800ff84 <pbuf_copy_partial+0xd8>)
 800fed8:	482b      	ldr	r0, [pc, #172]	@ (800ff88 <pbuf_copy_partial+0xdc>)
 800feda:	f009 ff3b 	bl	8019d54 <iprintf>
 800fede:	2300      	movs	r3, #0
 800fee0:	e04a      	b.n	800ff78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d108      	bne.n	800fefa <pbuf_copy_partial+0x4e>
 800fee8:	4b25      	ldr	r3, [pc, #148]	@ (800ff80 <pbuf_copy_partial+0xd4>)
 800feea:	f240 420b 	movw	r2, #1035	@ 0x40b
 800feee:	4927      	ldr	r1, [pc, #156]	@ (800ff8c <pbuf_copy_partial+0xe0>)
 800fef0:	4825      	ldr	r0, [pc, #148]	@ (800ff88 <pbuf_copy_partial+0xdc>)
 800fef2:	f009 ff2f 	bl	8019d54 <iprintf>
 800fef6:	2300      	movs	r3, #0
 800fef8:	e03e      	b.n	800ff78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	61fb      	str	r3, [r7, #28]
 800fefe:	e034      	b.n	800ff6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ff00:	88bb      	ldrh	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00a      	beq.n	800ff1c <pbuf_copy_partial+0x70>
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	895b      	ldrh	r3, [r3, #10]
 800ff0a:	88ba      	ldrh	r2, [r7, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d305      	bcc.n	800ff1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	895b      	ldrh	r3, [r3, #10]
 800ff14:	88ba      	ldrh	r2, [r7, #4]
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	80bb      	strh	r3, [r7, #4]
 800ff1a:	e023      	b.n	800ff64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	895a      	ldrh	r2, [r3, #10]
 800ff20:	88bb      	ldrh	r3, [r7, #4]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ff26:	8b3a      	ldrh	r2, [r7, #24]
 800ff28:	88fb      	ldrh	r3, [r7, #6]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d901      	bls.n	800ff32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ff2e:	88fb      	ldrh	r3, [r7, #6]
 800ff30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ff32:	8b7b      	ldrh	r3, [r7, #26]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	18d0      	adds	r0, r2, r3
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	685a      	ldr	r2, [r3, #4]
 800ff3c:	88bb      	ldrh	r3, [r7, #4]
 800ff3e:	4413      	add	r3, r2
 800ff40:	8b3a      	ldrh	r2, [r7, #24]
 800ff42:	4619      	mov	r1, r3
 800ff44:	f00a f985 	bl	801a252 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ff48:	8afa      	ldrh	r2, [r7, #22]
 800ff4a:	8b3b      	ldrh	r3, [r7, #24]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ff50:	8b7a      	ldrh	r2, [r7, #26]
 800ff52:	8b3b      	ldrh	r3, [r7, #24]
 800ff54:	4413      	add	r3, r2
 800ff56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ff58:	88fa      	ldrh	r2, [r7, #6]
 800ff5a:	8b3b      	ldrh	r3, [r7, #24]
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	61fb      	str	r3, [r7, #28]
 800ff6a:	88fb      	ldrh	r3, [r7, #6]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d002      	beq.n	800ff76 <pbuf_copy_partial+0xca>
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1c4      	bne.n	800ff00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ff76:	8afb      	ldrh	r3, [r7, #22]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3720      	adds	r7, #32
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	0801d4bc 	.word	0x0801d4bc
 800ff84:	0801d804 	.word	0x0801d804
 800ff88:	0801d51c 	.word	0x0801d51c
 800ff8c:	0801d824 	.word	0x0801d824

0800ff90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	603a      	str	r2, [r7, #0]
 800ff9a:	71fb      	strb	r3, [r7, #7]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	8919      	ldrh	r1, [r3, #8]
 800ffa4:	88ba      	ldrh	r2, [r7, #4]
 800ffa6:	79fb      	ldrb	r3, [r7, #7]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff faa5 	bl	800f4f8 <pbuf_alloc>
 800ffae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <pbuf_clone+0x2a>
    return NULL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	e011      	b.n	800ffde <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ffba:	6839      	ldr	r1, [r7, #0]
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f7ff fea3 	bl	800fd08 <pbuf_copy>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ffc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d006      	beq.n	800ffdc <pbuf_clone+0x4c>
 800ffce:	4b06      	ldr	r3, [pc, #24]	@ (800ffe8 <pbuf_clone+0x58>)
 800ffd0:	f240 5224 	movw	r2, #1316	@ 0x524
 800ffd4:	4905      	ldr	r1, [pc, #20]	@ (800ffec <pbuf_clone+0x5c>)
 800ffd6:	4806      	ldr	r0, [pc, #24]	@ (800fff0 <pbuf_clone+0x60>)
 800ffd8:	f009 febc 	bl	8019d54 <iprintf>
  return q;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	0801d4bc 	.word	0x0801d4bc
 800ffec:	0801d930 	.word	0x0801d930
 800fff0:	0801d51c 	.word	0x0801d51c

0800fff4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fff8:	f009 f974 	bl	80192e4 <rand>
 800fffc:	4603      	mov	r3, r0
 800fffe:	b29b      	uxth	r3, r3
 8010000:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010004:	b29b      	uxth	r3, r3
 8010006:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801000a:	b29a      	uxth	r2, r3
 801000c:	4b01      	ldr	r3, [pc, #4]	@ (8010014 <tcp_init+0x20>)
 801000e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010010:	bf00      	nop
 8010012:	bd80      	pop	{r7, pc}
 8010014:	20000010 	.word	0x20000010

08010018 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	7d1b      	ldrb	r3, [r3, #20]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d105      	bne.n	8010034 <tcp_free+0x1c>
 8010028:	4b06      	ldr	r3, [pc, #24]	@ (8010044 <tcp_free+0x2c>)
 801002a:	22d4      	movs	r2, #212	@ 0xd4
 801002c:	4906      	ldr	r1, [pc, #24]	@ (8010048 <tcp_free+0x30>)
 801002e:	4807      	ldr	r0, [pc, #28]	@ (801004c <tcp_free+0x34>)
 8010030:	f009 fe90 	bl	8019d54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010034:	6879      	ldr	r1, [r7, #4]
 8010036:	2001      	movs	r0, #1
 8010038:	f7fe fe9e 	bl	800ed78 <memp_free>
}
 801003c:	bf00      	nop
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	0801d9bc 	.word	0x0801d9bc
 8010048:	0801d9ec 	.word	0x0801d9ec
 801004c:	0801da00 	.word	0x0801da00

08010050 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7d1b      	ldrb	r3, [r3, #20]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d105      	bne.n	801006c <tcp_free_listen+0x1c>
 8010060:	4b06      	ldr	r3, [pc, #24]	@ (801007c <tcp_free_listen+0x2c>)
 8010062:	22df      	movs	r2, #223	@ 0xdf
 8010064:	4906      	ldr	r1, [pc, #24]	@ (8010080 <tcp_free_listen+0x30>)
 8010066:	4807      	ldr	r0, [pc, #28]	@ (8010084 <tcp_free_listen+0x34>)
 8010068:	f009 fe74 	bl	8019d54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801006c:	6879      	ldr	r1, [r7, #4]
 801006e:	2002      	movs	r0, #2
 8010070:	f7fe fe82 	bl	800ed78 <memp_free>
}
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801d9bc 	.word	0x0801d9bc
 8010080:	0801da28 	.word	0x0801da28
 8010084:	0801da00 	.word	0x0801da00

08010088 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801008c:	f001 f8a8 	bl	80111e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010090:	4b07      	ldr	r3, [pc, #28]	@ (80100b0 <tcp_tmr+0x28>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	3301      	adds	r3, #1
 8010096:	b2da      	uxtb	r2, r3
 8010098:	4b05      	ldr	r3, [pc, #20]	@ (80100b0 <tcp_tmr+0x28>)
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	4b04      	ldr	r3, [pc, #16]	@ (80100b0 <tcp_tmr+0x28>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	f003 0301 	and.w	r3, r3, #1
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80100a8:	f000 fd58 	bl	8010b5c <tcp_slowtmr>
  }
}
 80100ac:	bf00      	nop
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	20011d91 	.word	0x20011d91

080100b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <tcp_remove_listener+0x1c>
 80100c4:	4b0d      	ldr	r3, [pc, #52]	@ (80100fc <tcp_remove_listener+0x48>)
 80100c6:	22ff      	movs	r2, #255	@ 0xff
 80100c8:	490d      	ldr	r1, [pc, #52]	@ (8010100 <tcp_remove_listener+0x4c>)
 80100ca:	480e      	ldr	r0, [pc, #56]	@ (8010104 <tcp_remove_listener+0x50>)
 80100cc:	f009 fe42 	bl	8019d54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	e00a      	b.n	80100ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d102      	bne.n	80100e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2200      	movs	r2, #0
 80100e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	60fb      	str	r3, [r7, #12]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1f1      	bne.n	80100d6 <tcp_remove_listener+0x22>
    }
  }
}
 80100f2:	bf00      	nop
 80100f4:	bf00      	nop
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	0801d9bc 	.word	0x0801d9bc
 8010100:	0801da44 	.word	0x0801da44
 8010104:	0801da00 	.word	0x0801da00

08010108 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <tcp_listen_closed+0x1c>
 8010116:	4b14      	ldr	r3, [pc, #80]	@ (8010168 <tcp_listen_closed+0x60>)
 8010118:	f240 1211 	movw	r2, #273	@ 0x111
 801011c:	4913      	ldr	r1, [pc, #76]	@ (801016c <tcp_listen_closed+0x64>)
 801011e:	4814      	ldr	r0, [pc, #80]	@ (8010170 <tcp_listen_closed+0x68>)
 8010120:	f009 fe18 	bl	8019d54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7d1b      	ldrb	r3, [r3, #20]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d006      	beq.n	801013a <tcp_listen_closed+0x32>
 801012c:	4b0e      	ldr	r3, [pc, #56]	@ (8010168 <tcp_listen_closed+0x60>)
 801012e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010132:	4910      	ldr	r1, [pc, #64]	@ (8010174 <tcp_listen_closed+0x6c>)
 8010134:	480e      	ldr	r0, [pc, #56]	@ (8010170 <tcp_listen_closed+0x68>)
 8010136:	f009 fe0d 	bl	8019d54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801013a:	2301      	movs	r3, #1
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	e00b      	b.n	8010158 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010140:	4a0d      	ldr	r2, [pc, #52]	@ (8010178 <tcp_listen_closed+0x70>)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff ffb1 	bl	80100b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3301      	adds	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b03      	cmp	r3, #3
 801015c:	d9f0      	bls.n	8010140 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801015e:	bf00      	nop
 8010160:	bf00      	nop
 8010162:	3710      	adds	r7, #16
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	0801d9bc 	.word	0x0801d9bc
 801016c:	0801da6c 	.word	0x0801da6c
 8010170:	0801da00 	.word	0x0801da00
 8010174:	0801da78 	.word	0x0801da78
 8010178:	0801f9d4 	.word	0x0801f9d4

0801017c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801017c:	b5b0      	push	{r4, r5, r7, lr}
 801017e:	b088      	sub	sp, #32
 8010180:	af04      	add	r7, sp, #16
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <tcp_close_shutdown+0x20>
 801018e:	4b63      	ldr	r3, [pc, #396]	@ (801031c <tcp_close_shutdown+0x1a0>)
 8010190:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010194:	4962      	ldr	r1, [pc, #392]	@ (8010320 <tcp_close_shutdown+0x1a4>)
 8010196:	4863      	ldr	r0, [pc, #396]	@ (8010324 <tcp_close_shutdown+0x1a8>)
 8010198:	f009 fddc 	bl	8019d54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801019c:	78fb      	ldrb	r3, [r7, #3]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d066      	beq.n	8010270 <tcp_close_shutdown+0xf4>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	7d1b      	ldrb	r3, [r3, #20]
 80101a6:	2b04      	cmp	r3, #4
 80101a8:	d003      	beq.n	80101b2 <tcp_close_shutdown+0x36>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	7d1b      	ldrb	r3, [r3, #20]
 80101ae:	2b07      	cmp	r3, #7
 80101b0:	d15e      	bne.n	8010270 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d104      	bne.n	80101c4 <tcp_close_shutdown+0x48>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80101c2:	d055      	beq.n	8010270 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8b5b      	ldrh	r3, [r3, #26]
 80101c8:	f003 0310 	and.w	r3, r3, #16
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d106      	bne.n	80101de <tcp_close_shutdown+0x62>
 80101d0:	4b52      	ldr	r3, [pc, #328]	@ (801031c <tcp_close_shutdown+0x1a0>)
 80101d2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80101d6:	4954      	ldr	r1, [pc, #336]	@ (8010328 <tcp_close_shutdown+0x1ac>)
 80101d8:	4852      	ldr	r0, [pc, #328]	@ (8010324 <tcp_close_shutdown+0x1a8>)
 80101da:	f009 fdbb 	bl	8019d54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80101e6:	687d      	ldr	r5, [r7, #4]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	8ad2      	ldrh	r2, [r2, #22]
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	8b09      	ldrh	r1, [r1, #24]
 80101f4:	9102      	str	r1, [sp, #8]
 80101f6:	9201      	str	r2, [sp, #4]
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	462b      	mov	r3, r5
 80101fc:	4622      	mov	r2, r4
 80101fe:	4601      	mov	r1, r0
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f005 fdb7 	bl	8015d74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f001 fb9a 	bl	8011940 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801020c:	4b47      	ldr	r3, [pc, #284]	@ (801032c <tcp_close_shutdown+0x1b0>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	429a      	cmp	r2, r3
 8010214:	d105      	bne.n	8010222 <tcp_close_shutdown+0xa6>
 8010216:	4b45      	ldr	r3, [pc, #276]	@ (801032c <tcp_close_shutdown+0x1b0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	4a43      	ldr	r2, [pc, #268]	@ (801032c <tcp_close_shutdown+0x1b0>)
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	e013      	b.n	801024a <tcp_close_shutdown+0xce>
 8010222:	4b42      	ldr	r3, [pc, #264]	@ (801032c <tcp_close_shutdown+0x1b0>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	e00c      	b.n	8010244 <tcp_close_shutdown+0xc8>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	429a      	cmp	r2, r3
 8010232:	d104      	bne.n	801023e <tcp_close_shutdown+0xc2>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68da      	ldr	r2, [r3, #12]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	60da      	str	r2, [r3, #12]
 801023c:	e005      	b.n	801024a <tcp_close_shutdown+0xce>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1ef      	bne.n	801022a <tcp_close_shutdown+0xae>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	60da      	str	r2, [r3, #12]
 8010250:	4b37      	ldr	r3, [pc, #220]	@ (8010330 <tcp_close_shutdown+0x1b4>)
 8010252:	2201      	movs	r2, #1
 8010254:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010256:	4b37      	ldr	r3, [pc, #220]	@ (8010334 <tcp_close_shutdown+0x1b8>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	429a      	cmp	r2, r3
 801025e:	d102      	bne.n	8010266 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010260:	f004 f82e 	bl	80142c0 <tcp_trigger_input_pcb_close>
 8010264:	e002      	b.n	801026c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff fed6 	bl	8010018 <tcp_free>
      }
      return ERR_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	e050      	b.n	8010312 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	7d1b      	ldrb	r3, [r3, #20]
 8010274:	2b02      	cmp	r3, #2
 8010276:	d03b      	beq.n	80102f0 <tcp_close_shutdown+0x174>
 8010278:	2b02      	cmp	r3, #2
 801027a:	dc44      	bgt.n	8010306 <tcp_close_shutdown+0x18a>
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <tcp_close_shutdown+0x10a>
 8010280:	2b01      	cmp	r3, #1
 8010282:	d02a      	beq.n	80102da <tcp_close_shutdown+0x15e>
 8010284:	e03f      	b.n	8010306 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8adb      	ldrh	r3, [r3, #22]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d021      	beq.n	80102d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801028e:	4b2a      	ldr	r3, [pc, #168]	@ (8010338 <tcp_close_shutdown+0x1bc>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	429a      	cmp	r2, r3
 8010296:	d105      	bne.n	80102a4 <tcp_close_shutdown+0x128>
 8010298:	4b27      	ldr	r3, [pc, #156]	@ (8010338 <tcp_close_shutdown+0x1bc>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	4a26      	ldr	r2, [pc, #152]	@ (8010338 <tcp_close_shutdown+0x1bc>)
 80102a0:	6013      	str	r3, [r2, #0]
 80102a2:	e013      	b.n	80102cc <tcp_close_shutdown+0x150>
 80102a4:	4b24      	ldr	r3, [pc, #144]	@ (8010338 <tcp_close_shutdown+0x1bc>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	60bb      	str	r3, [r7, #8]
 80102aa:	e00c      	b.n	80102c6 <tcp_close_shutdown+0x14a>
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d104      	bne.n	80102c0 <tcp_close_shutdown+0x144>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	68da      	ldr	r2, [r3, #12]
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	60da      	str	r2, [r3, #12]
 80102be:	e005      	b.n	80102cc <tcp_close_shutdown+0x150>
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	60bb      	str	r3, [r7, #8]
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1ef      	bne.n	80102ac <tcp_close_shutdown+0x130>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff fea0 	bl	8010018 <tcp_free>
      break;
 80102d8:	e01a      	b.n	8010310 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7ff ff14 	bl	8010108 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80102e0:	6879      	ldr	r1, [r7, #4]
 80102e2:	4816      	ldr	r0, [pc, #88]	@ (801033c <tcp_close_shutdown+0x1c0>)
 80102e4:	f001 fb7c 	bl	80119e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7ff feb1 	bl	8010050 <tcp_free_listen>
      break;
 80102ee:	e00f      	b.n	8010310 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	480e      	ldr	r0, [pc, #56]	@ (801032c <tcp_close_shutdown+0x1b0>)
 80102f4:	f001 fb74 	bl	80119e0 <tcp_pcb_remove>
 80102f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010330 <tcp_close_shutdown+0x1b4>)
 80102fa:	2201      	movs	r2, #1
 80102fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f7ff fe8a 	bl	8010018 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010304:	e004      	b.n	8010310 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f81a 	bl	8010340 <tcp_close_shutdown_fin>
 801030c:	4603      	mov	r3, r0
 801030e:	e000      	b.n	8010312 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bdb0      	pop	{r4, r5, r7, pc}
 801031a:	bf00      	nop
 801031c:	0801d9bc 	.word	0x0801d9bc
 8010320:	0801da90 	.word	0x0801da90
 8010324:	0801da00 	.word	0x0801da00
 8010328:	0801dab0 	.word	0x0801dab0
 801032c:	20011d88 	.word	0x20011d88
 8010330:	20011d90 	.word	0x20011d90
 8010334:	20011dc8 	.word	0x20011dc8
 8010338:	20011d80 	.word	0x20011d80
 801033c:	20011d84 	.word	0x20011d84

08010340 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <tcp_close_shutdown_fin+0x1c>
 801034e:	4b2e      	ldr	r3, [pc, #184]	@ (8010408 <tcp_close_shutdown_fin+0xc8>)
 8010350:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010354:	492d      	ldr	r1, [pc, #180]	@ (801040c <tcp_close_shutdown_fin+0xcc>)
 8010356:	482e      	ldr	r0, [pc, #184]	@ (8010410 <tcp_close_shutdown_fin+0xd0>)
 8010358:	f009 fcfc 	bl	8019d54 <iprintf>

  switch (pcb->state) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
 8010360:	2b07      	cmp	r3, #7
 8010362:	d020      	beq.n	80103a6 <tcp_close_shutdown_fin+0x66>
 8010364:	2b07      	cmp	r3, #7
 8010366:	dc2b      	bgt.n	80103c0 <tcp_close_shutdown_fin+0x80>
 8010368:	2b03      	cmp	r3, #3
 801036a:	d002      	beq.n	8010372 <tcp_close_shutdown_fin+0x32>
 801036c:	2b04      	cmp	r3, #4
 801036e:	d00d      	beq.n	801038c <tcp_close_shutdown_fin+0x4c>
 8010370:	e026      	b.n	80103c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f004 fe0c 	bl	8014f90 <tcp_send_fin>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801037c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d11f      	bne.n	80103c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2205      	movs	r2, #5
 8010388:	751a      	strb	r2, [r3, #20]
      }
      break;
 801038a:	e01b      	b.n	80103c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f004 fdff 	bl	8014f90 <tcp_send_fin>
 8010392:	4603      	mov	r3, r0
 8010394:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d114      	bne.n	80103c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2205      	movs	r2, #5
 80103a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80103a4:	e010      	b.n	80103c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f004 fdf2 	bl	8014f90 <tcp_send_fin>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80103b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2209      	movs	r2, #9
 80103bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80103be:	e005      	b.n	80103cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80103c0:	2300      	movs	r3, #0
 80103c2:	e01c      	b.n	80103fe <tcp_close_shutdown_fin+0xbe>
      break;
 80103c4:	bf00      	nop
 80103c6:	e002      	b.n	80103ce <tcp_close_shutdown_fin+0x8e>
      break;
 80103c8:	bf00      	nop
 80103ca:	e000      	b.n	80103ce <tcp_close_shutdown_fin+0x8e>
      break;
 80103cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80103ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d103      	bne.n	80103de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f004 ff18 	bl	801520c <tcp_output>
 80103dc:	e00d      	b.n	80103fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80103de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e6:	d108      	bne.n	80103fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8b5b      	ldrh	r3, [r3, #26]
 80103ec:	f043 0308 	orr.w	r3, r3, #8
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80103f6:	2300      	movs	r3, #0
 80103f8:	e001      	b.n	80103fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80103fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	0801d9bc 	.word	0x0801d9bc
 801040c:	0801da6c 	.word	0x0801da6c
 8010410:	0801da00 	.word	0x0801da00

08010414 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d109      	bne.n	8010436 <tcp_close+0x22>
 8010422:	4b0f      	ldr	r3, [pc, #60]	@ (8010460 <tcp_close+0x4c>)
 8010424:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010428:	490e      	ldr	r1, [pc, #56]	@ (8010464 <tcp_close+0x50>)
 801042a:	480f      	ldr	r0, [pc, #60]	@ (8010468 <tcp_close+0x54>)
 801042c:	f009 fc92 	bl	8019d54 <iprintf>
 8010430:	f06f 030f 	mvn.w	r3, #15
 8010434:	e00f      	b.n	8010456 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	7d1b      	ldrb	r3, [r3, #20]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d006      	beq.n	801044c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	8b5b      	ldrh	r3, [r3, #26]
 8010442:	f043 0310 	orr.w	r3, r3, #16
 8010446:	b29a      	uxth	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801044c:	2101      	movs	r1, #1
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff fe94 	bl	801017c <tcp_close_shutdown>
 8010454:	4603      	mov	r3, r0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	0801d9bc 	.word	0x0801d9bc
 8010464:	0801dacc 	.word	0x0801dacc
 8010468:	0801da00 	.word	0x0801da00

0801046c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d109      	bne.n	8010492 <tcp_shutdown+0x26>
 801047e:	4b26      	ldr	r3, [pc, #152]	@ (8010518 <tcp_shutdown+0xac>)
 8010480:	f240 2207 	movw	r2, #519	@ 0x207
 8010484:	4925      	ldr	r1, [pc, #148]	@ (801051c <tcp_shutdown+0xb0>)
 8010486:	4826      	ldr	r0, [pc, #152]	@ (8010520 <tcp_shutdown+0xb4>)
 8010488:	f009 fc64 	bl	8019d54 <iprintf>
 801048c:	f06f 030f 	mvn.w	r3, #15
 8010490:	e03d      	b.n	801050e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	7d1b      	ldrb	r3, [r3, #20]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d102      	bne.n	80104a0 <tcp_shutdown+0x34>
    return ERR_CONN;
 801049a:	f06f 030a 	mvn.w	r3, #10
 801049e:	e036      	b.n	801050e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d01b      	beq.n	80104de <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f043 0310 	orr.w	r3, r3, #16
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d005      	beq.n	80104c6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80104ba:	2101      	movs	r1, #1
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f7ff fe5d 	bl	801017c <tcp_close_shutdown>
 80104c2:	4603      	mov	r3, r0
 80104c4:	e023      	b.n	801050e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d007      	beq.n	80104de <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ff faf4 	bl	800fac0 <pbuf_free>
      pcb->refused_data = NULL;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2200      	movs	r2, #0
 80104dc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d013      	beq.n	801050c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	7d1b      	ldrb	r3, [r3, #20]
 80104e8:	2b04      	cmp	r3, #4
 80104ea:	dc02      	bgt.n	80104f2 <tcp_shutdown+0x86>
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	da02      	bge.n	80104f6 <tcp_shutdown+0x8a>
 80104f0:	e009      	b.n	8010506 <tcp_shutdown+0x9a>
 80104f2:	2b07      	cmp	r3, #7
 80104f4:	d107      	bne.n	8010506 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	4619      	mov	r1, r3
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f7ff fe3d 	bl	801017c <tcp_close_shutdown>
 8010502:	4603      	mov	r3, r0
 8010504:	e003      	b.n	801050e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8010506:	f06f 030a 	mvn.w	r3, #10
 801050a:	e000      	b.n	801050e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	0801d9bc 	.word	0x0801d9bc
 801051c:	0801dae4 	.word	0x0801dae4
 8010520:	0801da00 	.word	0x0801da00

08010524 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b08e      	sub	sp, #56	@ 0x38
 8010528:	af04      	add	r7, sp, #16
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d107      	bne.n	8010544 <tcp_abandon+0x20>
 8010534:	4b52      	ldr	r3, [pc, #328]	@ (8010680 <tcp_abandon+0x15c>)
 8010536:	f240 223d 	movw	r2, #573	@ 0x23d
 801053a:	4952      	ldr	r1, [pc, #328]	@ (8010684 <tcp_abandon+0x160>)
 801053c:	4852      	ldr	r0, [pc, #328]	@ (8010688 <tcp_abandon+0x164>)
 801053e:	f009 fc09 	bl	8019d54 <iprintf>
 8010542:	e099      	b.n	8010678 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	7d1b      	ldrb	r3, [r3, #20]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d106      	bne.n	801055a <tcp_abandon+0x36>
 801054c:	4b4c      	ldr	r3, [pc, #304]	@ (8010680 <tcp_abandon+0x15c>)
 801054e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010552:	494e      	ldr	r1, [pc, #312]	@ (801068c <tcp_abandon+0x168>)
 8010554:	484c      	ldr	r0, [pc, #304]	@ (8010688 <tcp_abandon+0x164>)
 8010556:	f009 fbfd 	bl	8019d54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	7d1b      	ldrb	r3, [r3, #20]
 801055e:	2b0a      	cmp	r3, #10
 8010560:	d107      	bne.n	8010572 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010562:	6879      	ldr	r1, [r7, #4]
 8010564:	484a      	ldr	r0, [pc, #296]	@ (8010690 <tcp_abandon+0x16c>)
 8010566:	f001 fa3b 	bl	80119e0 <tcp_pcb_remove>
    tcp_free(pcb);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fd54 	bl	8010018 <tcp_free>
 8010570:	e082      	b.n	8010678 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801057e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010584:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801058c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	7d1b      	ldrb	r3, [r3, #20]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d126      	bne.n	80105ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	8adb      	ldrh	r3, [r3, #22]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d02e      	beq.n	8010602 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80105a4:	4b3b      	ldr	r3, [pc, #236]	@ (8010694 <tcp_abandon+0x170>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d105      	bne.n	80105ba <tcp_abandon+0x96>
 80105ae:	4b39      	ldr	r3, [pc, #228]	@ (8010694 <tcp_abandon+0x170>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	4a37      	ldr	r2, [pc, #220]	@ (8010694 <tcp_abandon+0x170>)
 80105b6:	6013      	str	r3, [r2, #0]
 80105b8:	e013      	b.n	80105e2 <tcp_abandon+0xbe>
 80105ba:	4b36      	ldr	r3, [pc, #216]	@ (8010694 <tcp_abandon+0x170>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	61fb      	str	r3, [r7, #28]
 80105c0:	e00c      	b.n	80105dc <tcp_abandon+0xb8>
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d104      	bne.n	80105d6 <tcp_abandon+0xb2>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68da      	ldr	r2, [r3, #12]
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	60da      	str	r2, [r3, #12]
 80105d4:	e005      	b.n	80105e2 <tcp_abandon+0xbe>
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	61fb      	str	r3, [r7, #28]
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1ef      	bne.n	80105c2 <tcp_abandon+0x9e>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	60da      	str	r2, [r3, #12]
 80105e8:	e00b      	b.n	8010602 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8adb      	ldrh	r3, [r3, #22]
 80105f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	4828      	ldr	r0, [pc, #160]	@ (8010698 <tcp_abandon+0x174>)
 80105f8:	f001 f9f2 	bl	80119e0 <tcp_pcb_remove>
 80105fc:	4b27      	ldr	r3, [pc, #156]	@ (801069c <tcp_abandon+0x178>)
 80105fe:	2201      	movs	r2, #1
 8010600:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010606:	2b00      	cmp	r3, #0
 8010608:	d004      	beq.n	8010614 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801060e:	4618      	mov	r0, r3
 8010610:	f000 fec6 	bl	80113a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010618:	2b00      	cmp	r3, #0
 801061a:	d004      	beq.n	8010626 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010620:	4618      	mov	r0, r3
 8010622:	f000 febd 	bl	80113a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801062a:	2b00      	cmp	r3, #0
 801062c:	d004      	beq.n	8010638 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010632:	4618      	mov	r0, r3
 8010634:	f000 feb4 	bl	80113a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00e      	beq.n	801065c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	3304      	adds	r3, #4
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	8b12      	ldrh	r2, [r2, #24]
 8010648:	9202      	str	r2, [sp, #8]
 801064a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801064c:	9201      	str	r2, [sp, #4]
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	460b      	mov	r3, r1
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	69b9      	ldr	r1, [r7, #24]
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f005 fb8c 	bl	8015d74 <tcp_rst>
    }
    last_state = pcb->state;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7d1b      	ldrb	r3, [r3, #20]
 8010660:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7ff fcd8 	bl	8010018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d004      	beq.n	8010678 <tcp_abandon+0x154>
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	f06f 010c 	mvn.w	r1, #12
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	4798      	blx	r3
  }
}
 8010678:	3728      	adds	r7, #40	@ 0x28
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	0801d9bc 	.word	0x0801d9bc
 8010684:	0801db00 	.word	0x0801db00
 8010688:	0801da00 	.word	0x0801da00
 801068c:	0801db1c 	.word	0x0801db1c
 8010690:	20011d8c 	.word	0x20011d8c
 8010694:	20011d80 	.word	0x20011d80
 8010698:	20011d88 	.word	0x20011d88
 801069c:	20011d90 	.word	0x20011d90

080106a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80106a8:	2101      	movs	r1, #1
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7ff ff3a 	bl	8010524 <tcp_abandon>
}
 80106b0:	bf00      	nop
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b088      	sub	sp, #32
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	4613      	mov	r3, r2
 80106c4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80106c6:	2304      	movs	r3, #4
 80106c8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d101      	bne.n	80106d4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80106d0:	4b3e      	ldr	r3, [pc, #248]	@ (80107cc <tcp_bind+0x114>)
 80106d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d109      	bne.n	80106ee <tcp_bind+0x36>
 80106da:	4b3d      	ldr	r3, [pc, #244]	@ (80107d0 <tcp_bind+0x118>)
 80106dc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80106e0:	493c      	ldr	r1, [pc, #240]	@ (80107d4 <tcp_bind+0x11c>)
 80106e2:	483d      	ldr	r0, [pc, #244]	@ (80107d8 <tcp_bind+0x120>)
 80106e4:	f009 fb36 	bl	8019d54 <iprintf>
 80106e8:	f06f 030f 	mvn.w	r3, #15
 80106ec:	e06a      	b.n	80107c4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	7d1b      	ldrb	r3, [r3, #20]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <tcp_bind+0x52>
 80106f6:	4b36      	ldr	r3, [pc, #216]	@ (80107d0 <tcp_bind+0x118>)
 80106f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80106fc:	4937      	ldr	r1, [pc, #220]	@ (80107dc <tcp_bind+0x124>)
 80106fe:	4836      	ldr	r0, [pc, #216]	@ (80107d8 <tcp_bind+0x120>)
 8010700:	f009 fb28 	bl	8019d54 <iprintf>
 8010704:	f06f 0305 	mvn.w	r3, #5
 8010708:	e05c      	b.n	80107c4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801070a:	88fb      	ldrh	r3, [r7, #6]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d109      	bne.n	8010724 <tcp_bind+0x6c>
    port = tcp_new_port();
 8010710:	f000 f9de 	bl	8010ad0 <tcp_new_port>
 8010714:	4603      	mov	r3, r0
 8010716:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d135      	bne.n	801078a <tcp_bind+0xd2>
      return ERR_BUF;
 801071e:	f06f 0301 	mvn.w	r3, #1
 8010722:	e04f      	b.n	80107c4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010724:	2300      	movs	r3, #0
 8010726:	61fb      	str	r3, [r7, #28]
 8010728:	e02b      	b.n	8010782 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801072a:	4a2d      	ldr	r2, [pc, #180]	@ (80107e0 <tcp_bind+0x128>)
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	61bb      	str	r3, [r7, #24]
 8010736:	e01e      	b.n	8010776 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	8adb      	ldrh	r3, [r3, #22]
 801073c:	88fa      	ldrh	r2, [r7, #6]
 801073e:	429a      	cmp	r2, r3
 8010740:	d116      	bne.n	8010770 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010742:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010744:	2b00      	cmp	r3, #0
 8010746:	d010      	beq.n	801076a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00c      	beq.n	801076a <tcp_bind+0xb2>
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d009      	beq.n	801076a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d005      	beq.n	801076a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010766:	429a      	cmp	r2, r3
 8010768:	d102      	bne.n	8010770 <tcp_bind+0xb8>
              return ERR_USE;
 801076a:	f06f 0307 	mvn.w	r3, #7
 801076e:	e029      	b.n	80107c4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	61bb      	str	r3, [r7, #24]
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1dd      	bne.n	8010738 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	3301      	adds	r3, #1
 8010780:	61fb      	str	r3, [r7, #28]
 8010782:	69fa      	ldr	r2, [r7, #28]
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	429a      	cmp	r2, r3
 8010788:	dbcf      	blt.n	801072a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00c      	beq.n	80107aa <tcp_bind+0xf2>
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d008      	beq.n	80107aa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <tcp_bind+0xec>
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	e000      	b.n	80107a6 <tcp_bind+0xee>
 80107a4:	2300      	movs	r3, #0
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	88fa      	ldrh	r2, [r7, #6]
 80107ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80107b0:	4b0c      	ldr	r3, [pc, #48]	@ (80107e4 <tcp_bind+0x12c>)
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	60da      	str	r2, [r3, #12]
 80107b8:	4a0a      	ldr	r2, [pc, #40]	@ (80107e4 <tcp_bind+0x12c>)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6013      	str	r3, [r2, #0]
 80107be:	f005 fc9b 	bl	80160f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80107c2:	2300      	movs	r3, #0
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3720      	adds	r7, #32
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	0801f9fc 	.word	0x0801f9fc
 80107d0:	0801d9bc 	.word	0x0801d9bc
 80107d4:	0801db50 	.word	0x0801db50
 80107d8:	0801da00 	.word	0x0801da00
 80107dc:	0801db68 	.word	0x0801db68
 80107e0:	0801f9d4 	.word	0x0801f9d4
 80107e4:	20011d80 	.word	0x20011d80

080107e8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	4613      	mov	r3, r2
 80107f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <tcp_accept_null+0x22>
 80107fc:	4b07      	ldr	r3, [pc, #28]	@ (801081c <tcp_accept_null+0x34>)
 80107fe:	f240 320f 	movw	r2, #783	@ 0x30f
 8010802:	4907      	ldr	r1, [pc, #28]	@ (8010820 <tcp_accept_null+0x38>)
 8010804:	4807      	ldr	r0, [pc, #28]	@ (8010824 <tcp_accept_null+0x3c>)
 8010806:	f009 faa5 	bl	8019d54 <iprintf>

  tcp_abort(pcb);
 801080a:	68b8      	ldr	r0, [r7, #8]
 801080c:	f7ff ff48 	bl	80106a0 <tcp_abort>

  return ERR_ABRT;
 8010810:	f06f 030c 	mvn.w	r3, #12
}
 8010814:	4618      	mov	r0, r3
 8010816:	3710      	adds	r7, #16
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	0801d9bc 	.word	0x0801d9bc
 8010820:	0801db90 	.word	0x0801db90
 8010824:	0801da00 	.word	0x0801da00

08010828 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b088      	sub	sp, #32
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	460b      	mov	r3, r1
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010836:	2300      	movs	r3, #0
 8010838:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d109      	bne.n	8010854 <tcp_listen_with_backlog_and_err+0x2c>
 8010840:	4b47      	ldr	r3, [pc, #284]	@ (8010960 <tcp_listen_with_backlog_and_err+0x138>)
 8010842:	f240 3259 	movw	r2, #857	@ 0x359
 8010846:	4947      	ldr	r1, [pc, #284]	@ (8010964 <tcp_listen_with_backlog_and_err+0x13c>)
 8010848:	4847      	ldr	r0, [pc, #284]	@ (8010968 <tcp_listen_with_backlog_and_err+0x140>)
 801084a:	f009 fa83 	bl	8019d54 <iprintf>
 801084e:	23f0      	movs	r3, #240	@ 0xf0
 8010850:	76fb      	strb	r3, [r7, #27]
 8010852:	e079      	b.n	8010948 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	7d1b      	ldrb	r3, [r3, #20]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d009      	beq.n	8010870 <tcp_listen_with_backlog_and_err+0x48>
 801085c:	4b40      	ldr	r3, [pc, #256]	@ (8010960 <tcp_listen_with_backlog_and_err+0x138>)
 801085e:	f240 325a 	movw	r2, #858	@ 0x35a
 8010862:	4942      	ldr	r1, [pc, #264]	@ (801096c <tcp_listen_with_backlog_and_err+0x144>)
 8010864:	4840      	ldr	r0, [pc, #256]	@ (8010968 <tcp_listen_with_backlog_and_err+0x140>)
 8010866:	f009 fa75 	bl	8019d54 <iprintf>
 801086a:	23f1      	movs	r3, #241	@ 0xf1
 801086c:	76fb      	strb	r3, [r7, #27]
 801086e:	e06b      	b.n	8010948 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	7d1b      	ldrb	r3, [r3, #20]
 8010874:	2b01      	cmp	r3, #1
 8010876:	d104      	bne.n	8010882 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801087c:	23f7      	movs	r3, #247	@ 0xf7
 801087e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010880:	e062      	b.n	8010948 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010882:	2002      	movs	r0, #2
 8010884:	f7fe fa26 	bl	800ecd4 <memp_malloc>
 8010888:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d102      	bne.n	8010896 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010890:	23ff      	movs	r3, #255	@ 0xff
 8010892:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010894:	e058      	b.n	8010948 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	691a      	ldr	r2, [r3, #16]
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	8ada      	ldrh	r2, [r3, #22]
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	2201      	movs	r2, #1
 80108aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	7d5a      	ldrb	r2, [r3, #21]
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	7a5a      	ldrb	r2, [r3, #9]
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	2200      	movs	r2, #0
 80108c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	7ada      	ldrb	r2, [r3, #11]
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	7a9a      	ldrb	r2, [r3, #10]
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	8adb      	ldrh	r3, [r3, #22]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d021      	beq.n	8010926 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80108e2:	4b23      	ldr	r3, [pc, #140]	@ (8010970 <tcp_listen_with_backlog_and_err+0x148>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d105      	bne.n	80108f8 <tcp_listen_with_backlog_and_err+0xd0>
 80108ec:	4b20      	ldr	r3, [pc, #128]	@ (8010970 <tcp_listen_with_backlog_and_err+0x148>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	4a1f      	ldr	r2, [pc, #124]	@ (8010970 <tcp_listen_with_backlog_and_err+0x148>)
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	e013      	b.n	8010920 <tcp_listen_with_backlog_and_err+0xf8>
 80108f8:	4b1d      	ldr	r3, [pc, #116]	@ (8010970 <tcp_listen_with_backlog_and_err+0x148>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	617b      	str	r3, [r7, #20]
 80108fe:	e00c      	b.n	801091a <tcp_listen_with_backlog_and_err+0xf2>
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	429a      	cmp	r2, r3
 8010908:	d104      	bne.n	8010914 <tcp_listen_with_backlog_and_err+0xec>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	68da      	ldr	r2, [r3, #12]
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	60da      	str	r2, [r3, #12]
 8010912:	e005      	b.n	8010920 <tcp_listen_with_backlog_and_err+0xf8>
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	617b      	str	r3, [r7, #20]
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1ef      	bne.n	8010900 <tcp_listen_with_backlog_and_err+0xd8>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fb76 	bl	8010018 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	4a11      	ldr	r2, [pc, #68]	@ (8010974 <tcp_listen_with_backlog_and_err+0x14c>)
 8010930:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010932:	4b11      	ldr	r3, [pc, #68]	@ (8010978 <tcp_listen_with_backlog_and_err+0x150>)
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	60da      	str	r2, [r3, #12]
 801093a:	4a0f      	ldr	r2, [pc, #60]	@ (8010978 <tcp_listen_with_backlog_and_err+0x150>)
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	6013      	str	r3, [r2, #0]
 8010940:	f005 fbda 	bl	80160f8 <tcp_timer_needed>
  res = ERR_OK;
 8010944:	2300      	movs	r3, #0
 8010946:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d002      	beq.n	8010954 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7efa      	ldrb	r2, [r7, #27]
 8010952:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010954:	69fb      	ldr	r3, [r7, #28]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3720      	adds	r7, #32
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	0801d9bc 	.word	0x0801d9bc
 8010964:	0801dbb0 	.word	0x0801dbb0
 8010968:	0801da00 	.word	0x0801da00
 801096c:	0801dbe0 	.word	0x0801dbe0
 8010970:	20011d80 	.word	0x20011d80
 8010974:	080107e9 	.word	0x080107e9
 8010978:	20011d84 	.word	0x20011d84

0801097c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <tcp_update_rcv_ann_wnd+0x1c>
 801098a:	4b25      	ldr	r3, [pc, #148]	@ (8010a20 <tcp_update_rcv_ann_wnd+0xa4>)
 801098c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010990:	4924      	ldr	r1, [pc, #144]	@ (8010a24 <tcp_update_rcv_ann_wnd+0xa8>)
 8010992:	4825      	ldr	r0, [pc, #148]	@ (8010a28 <tcp_update_rcv_ann_wnd+0xac>)
 8010994:	f009 f9de 	bl	8019d54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80109a0:	4413      	add	r3, r2
 80109a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80109ac:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80109b0:	bf28      	it	cs
 80109b2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80109b6:	b292      	uxth	r2, r2
 80109b8:	4413      	add	r3, r2
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	2b00      	cmp	r3, #0
 80109c0:	db08      	blt.n	80109d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	e020      	b.n	8010a16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	2b00      	cmp	r3, #0
 80109e0:	dd03      	ble.n	80109ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80109e8:	e014      	b.n	8010a14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f2:	1ad3      	subs	r3, r2, r3
 80109f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109fc:	d306      	bcc.n	8010a0c <tcp_update_rcv_ann_wnd+0x90>
 80109fe:	4b08      	ldr	r3, [pc, #32]	@ (8010a20 <tcp_update_rcv_ann_wnd+0xa4>)
 8010a00:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8010a04:	4909      	ldr	r1, [pc, #36]	@ (8010a2c <tcp_update_rcv_ann_wnd+0xb0>)
 8010a06:	4808      	ldr	r0, [pc, #32]	@ (8010a28 <tcp_update_rcv_ann_wnd+0xac>)
 8010a08:	f009 f9a4 	bl	8019d54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8010a14:	2300      	movs	r3, #0
  }
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	0801d9bc 	.word	0x0801d9bc
 8010a24:	0801dc18 	.word	0x0801dc18
 8010a28:	0801da00 	.word	0x0801da00
 8010a2c:	0801dc3c 	.word	0x0801dc3c

08010a30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d107      	bne.n	8010a52 <tcp_recved+0x22>
 8010a42:	4b1f      	ldr	r3, [pc, #124]	@ (8010ac0 <tcp_recved+0x90>)
 8010a44:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010a48:	491e      	ldr	r1, [pc, #120]	@ (8010ac4 <tcp_recved+0x94>)
 8010a4a:	481f      	ldr	r0, [pc, #124]	@ (8010ac8 <tcp_recved+0x98>)
 8010a4c:	f009 f982 	bl	8019d54 <iprintf>
 8010a50:	e032      	b.n	8010ab8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	7d1b      	ldrb	r3, [r3, #20]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d106      	bne.n	8010a68 <tcp_recved+0x38>
 8010a5a:	4b19      	ldr	r3, [pc, #100]	@ (8010ac0 <tcp_recved+0x90>)
 8010a5c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010a60:	491a      	ldr	r1, [pc, #104]	@ (8010acc <tcp_recved+0x9c>)
 8010a62:	4819      	ldr	r0, [pc, #100]	@ (8010ac8 <tcp_recved+0x98>)
 8010a64:	f009 f976 	bl	8019d54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010a6c:	887b      	ldrh	r3, [r7, #2]
 8010a6e:	4413      	add	r3, r2
 8010a70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010a72:	89fb      	ldrh	r3, [r7, #14]
 8010a74:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010a78:	d804      	bhi.n	8010a84 <tcp_recved+0x54>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a7e:	89fa      	ldrh	r2, [r7, #14]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d204      	bcs.n	8010a8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010a8c:	e002      	b.n	8010a94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	89fa      	ldrh	r2, [r7, #14]
 8010a92:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7ff ff71 	bl	801097c <tcp_update_rcv_ann_wnd>
 8010a9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010aa2:	d309      	bcc.n	8010ab8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8b5b      	ldrh	r3, [r3, #26]
 8010aa8:	f043 0302 	orr.w	r3, r3, #2
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f004 fbaa 	bl	801520c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	0801d9bc 	.word	0x0801d9bc
 8010ac4:	0801dc58 	.word	0x0801dc58
 8010ac8:	0801da00 	.word	0x0801da00
 8010acc:	0801dc70 	.word	0x0801dc70

08010ad0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010ada:	4b1e      	ldr	r3, [pc, #120]	@ (8010b54 <tcp_new_port+0x84>)
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8010b54 <tcp_new_port+0x84>)
 8010ae4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8010b54 <tcp_new_port+0x84>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d103      	bne.n	8010afa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010af2:	4b18      	ldr	r3, [pc, #96]	@ (8010b54 <tcp_new_port+0x84>)
 8010af4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010af8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010afa:	2300      	movs	r3, #0
 8010afc:	71fb      	strb	r3, [r7, #7]
 8010afe:	e01e      	b.n	8010b3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010b00:	79fb      	ldrb	r3, [r7, #7]
 8010b02:	4a15      	ldr	r2, [pc, #84]	@ (8010b58 <tcp_new_port+0x88>)
 8010b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	603b      	str	r3, [r7, #0]
 8010b0c:	e011      	b.n	8010b32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	8ada      	ldrh	r2, [r3, #22]
 8010b12:	4b10      	ldr	r3, [pc, #64]	@ (8010b54 <tcp_new_port+0x84>)
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d108      	bne.n	8010b2c <tcp_new_port+0x5c>
        n++;
 8010b1a:	88bb      	ldrh	r3, [r7, #4]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010b20:	88bb      	ldrh	r3, [r7, #4]
 8010b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010b26:	d3d8      	bcc.n	8010ada <tcp_new_port+0xa>
          return 0;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	e00d      	b.n	8010b48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	603b      	str	r3, [r7, #0]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1ea      	bne.n	8010b0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	71fb      	strb	r3, [r7, #7]
 8010b3e:	79fb      	ldrb	r3, [r7, #7]
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d9dd      	bls.n	8010b00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010b44:	4b03      	ldr	r3, [pc, #12]	@ (8010b54 <tcp_new_port+0x84>)
 8010b46:	881b      	ldrh	r3, [r3, #0]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	20000010 	.word	0x20000010
 8010b58:	0801f9d4 	.word	0x0801f9d4

08010b5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010b5c:	b5b0      	push	{r4, r5, r7, lr}
 8010b5e:	b090      	sub	sp, #64	@ 0x40
 8010b60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010b62:	2300      	movs	r3, #0
 8010b64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8010b68:	4b95      	ldr	r3, [pc, #596]	@ (8010dc0 <tcp_slowtmr+0x264>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	4a94      	ldr	r2, [pc, #592]	@ (8010dc0 <tcp_slowtmr+0x264>)
 8010b70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010b72:	4b94      	ldr	r3, [pc, #592]	@ (8010dc4 <tcp_slowtmr+0x268>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	3301      	adds	r3, #1
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4b92      	ldr	r3, [pc, #584]	@ (8010dc4 <tcp_slowtmr+0x268>)
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	e000      	b.n	8010b82 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010b80:	bf00      	nop
  prev = NULL;
 8010b82:	2300      	movs	r3, #0
 8010b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010b86:	4b90      	ldr	r3, [pc, #576]	@ (8010dc8 <tcp_slowtmr+0x26c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010b8c:	e29d      	b.n	80110ca <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b90:	7d1b      	ldrb	r3, [r3, #20]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <tcp_slowtmr+0x48>
 8010b96:	4b8d      	ldr	r3, [pc, #564]	@ (8010dcc <tcp_slowtmr+0x270>)
 8010b98:	f240 42be 	movw	r2, #1214	@ 0x4be
 8010b9c:	498c      	ldr	r1, [pc, #560]	@ (8010dd0 <tcp_slowtmr+0x274>)
 8010b9e:	488d      	ldr	r0, [pc, #564]	@ (8010dd4 <tcp_slowtmr+0x278>)
 8010ba0:	f009 f8d8 	bl	8019d54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba6:	7d1b      	ldrb	r3, [r3, #20]
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d106      	bne.n	8010bba <tcp_slowtmr+0x5e>
 8010bac:	4b87      	ldr	r3, [pc, #540]	@ (8010dcc <tcp_slowtmr+0x270>)
 8010bae:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010bb2:	4989      	ldr	r1, [pc, #548]	@ (8010dd8 <tcp_slowtmr+0x27c>)
 8010bb4:	4887      	ldr	r0, [pc, #540]	@ (8010dd4 <tcp_slowtmr+0x278>)
 8010bb6:	f009 f8cd 	bl	8019d54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bbc:	7d1b      	ldrb	r3, [r3, #20]
 8010bbe:	2b0a      	cmp	r3, #10
 8010bc0:	d106      	bne.n	8010bd0 <tcp_slowtmr+0x74>
 8010bc2:	4b82      	ldr	r3, [pc, #520]	@ (8010dcc <tcp_slowtmr+0x270>)
 8010bc4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010bc8:	4984      	ldr	r1, [pc, #528]	@ (8010ddc <tcp_slowtmr+0x280>)
 8010bca:	4882      	ldr	r0, [pc, #520]	@ (8010dd4 <tcp_slowtmr+0x278>)
 8010bcc:	f009 f8c2 	bl	8019d54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd2:	7f9a      	ldrb	r2, [r3, #30]
 8010bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8010dc4 <tcp_slowtmr+0x268>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d105      	bne.n	8010be8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8010bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bde:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010be6:	e270      	b.n	80110ca <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010be8:	4b76      	ldr	r3, [pc, #472]	@ (8010dc4 <tcp_slowtmr+0x268>)
 8010bea:	781a      	ldrb	r2, [r3, #0]
 8010bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bee:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d10a      	bne.n	8010c1a <tcp_slowtmr+0xbe>
 8010c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c0a:	2b05      	cmp	r3, #5
 8010c0c:	d905      	bls.n	8010c1a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c12:	3301      	adds	r3, #1
 8010c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c18:	e11e      	b.n	8010e58 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c20:	2b0b      	cmp	r3, #11
 8010c22:	d905      	bls.n	8010c30 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8010c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c28:	3301      	adds	r3, #1
 8010c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c2e:	e113      	b.n	8010e58 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8010c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d075      	beq.n	8010d26 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d006      	beq.n	8010c50 <tcp_slowtmr+0xf4>
 8010c42:	4b62      	ldr	r3, [pc, #392]	@ (8010dcc <tcp_slowtmr+0x270>)
 8010c44:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8010c48:	4965      	ldr	r1, [pc, #404]	@ (8010de0 <tcp_slowtmr+0x284>)
 8010c4a:	4862      	ldr	r0, [pc, #392]	@ (8010dd4 <tcp_slowtmr+0x278>)
 8010c4c:	f009 f882 	bl	8019d54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d106      	bne.n	8010c66 <tcp_slowtmr+0x10a>
 8010c58:	4b5c      	ldr	r3, [pc, #368]	@ (8010dcc <tcp_slowtmr+0x270>)
 8010c5a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8010c5e:	4961      	ldr	r1, [pc, #388]	@ (8010de4 <tcp_slowtmr+0x288>)
 8010c60:	485c      	ldr	r0, [pc, #368]	@ (8010dd4 <tcp_slowtmr+0x278>)
 8010c62:	f009 f877 	bl	8019d54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c68:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010c6c:	2b0b      	cmp	r3, #11
 8010c6e:	d905      	bls.n	8010c7c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c74:	3301      	adds	r3, #1
 8010c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c7a:	e0ed      	b.n	8010e58 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010c82:	3b01      	subs	r3, #1
 8010c84:	4a58      	ldr	r2, [pc, #352]	@ (8010de8 <tcp_slowtmr+0x28c>)
 8010c86:	5cd3      	ldrb	r3, [r2, r3]
 8010c88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010c90:	7c7a      	ldrb	r2, [r7, #17]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d907      	bls.n	8010ca6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010cac:	7c7a      	ldrb	r2, [r7, #17]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f200 80d2 	bhi.w	8010e58 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d108      	bne.n	8010cd4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cc4:	f005 f94a 	bl	8015f5c <tcp_zero_window_probe>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d014      	beq.n	8010cf8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8010cce:	2300      	movs	r3, #0
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	e011      	b.n	8010cf8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cde:	f004 f80f 	bl	8014d00 <tcp_split_unsent_seg>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d107      	bne.n	8010cf8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010ce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cea:	f004 fa8f 	bl	801520c <tcp_output>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d101      	bne.n	8010cf8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f000 80ac 	beq.w	8010e58 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d02:	2200      	movs	r2, #0
 8010d04:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010d0e:	2b06      	cmp	r3, #6
 8010d10:	f200 80a2 	bhi.w	8010e58 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d16:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d20:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010d24:	e098      	b.n	8010e58 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	db0f      	blt.n	8010d50 <tcp_slowtmr+0x1f4>
 8010d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010d36:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d008      	beq.n	8010d50 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8010d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	3301      	adds	r3, #1
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	b21a      	sxth	r2, r3
 8010d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d4e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d52:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8010d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d58:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	db7b      	blt.n	8010e58 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010d60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d62:	f004 fd47 	bl	80157f4 <tcp_rexmit_rto_prepare>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d007      	beq.n	8010d7c <tcp_slowtmr+0x220>
 8010d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d171      	bne.n	8010e58 <tcp_slowtmr+0x2fc>
 8010d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d06d      	beq.n	8010e58 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8010d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b02      	cmp	r3, #2
 8010d82:	d03a      	beq.n	8010dfa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d8a:	2b0c      	cmp	r3, #12
 8010d8c:	bf28      	it	cs
 8010d8e:	230c      	movcs	r3, #12
 8010d90:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010d98:	10db      	asrs	r3, r3, #3
 8010d9a:	b21b      	sxth	r3, r3
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010da4:	4413      	add	r3, r2
 8010da6:	7efa      	ldrb	r2, [r7, #27]
 8010da8:	4910      	ldr	r1, [pc, #64]	@ (8010dec <tcp_slowtmr+0x290>)
 8010daa:	5c8a      	ldrb	r2, [r1, r2]
 8010dac:	4093      	lsls	r3, r2
 8010dae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010db6:	4293      	cmp	r3, r2
 8010db8:	dc1a      	bgt.n	8010df0 <tcp_slowtmr+0x294>
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	b21a      	sxth	r2, r3
 8010dbe:	e019      	b.n	8010df4 <tcp_slowtmr+0x298>
 8010dc0:	20011d7c 	.word	0x20011d7c
 8010dc4:	20011d92 	.word	0x20011d92
 8010dc8:	20011d88 	.word	0x20011d88
 8010dcc:	0801d9bc 	.word	0x0801d9bc
 8010dd0:	0801dd00 	.word	0x0801dd00
 8010dd4:	0801da00 	.word	0x0801da00
 8010dd8:	0801dd2c 	.word	0x0801dd2c
 8010ddc:	0801dd58 	.word	0x0801dd58
 8010de0:	0801dd88 	.word	0x0801dd88
 8010de4:	0801ddbc 	.word	0x0801ddbc
 8010de8:	0801f9cc 	.word	0x0801f9cc
 8010dec:	0801f9bc 	.word	0x0801f9bc
 8010df0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8010dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	bf28      	it	cs
 8010e10:	4613      	movcs	r3, r2
 8010e12:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010e14:	8a7b      	ldrh	r3, [r7, #18]
 8010e16:	085b      	lsrs	r3, r3, #1
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d206      	bcs.n	8010e40 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e36:	005b      	lsls	r3, r3, #1
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e42:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8010e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010e52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e54:	f004 fd3e 	bl	80158d4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	7d1b      	ldrb	r3, [r3, #20]
 8010e5c:	2b06      	cmp	r3, #6
 8010e5e:	d111      	bne.n	8010e84 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f003 0310 	and.w	r3, r3, #16
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00b      	beq.n	8010e84 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e72:	6a1b      	ldr	r3, [r3, #32]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	2b28      	cmp	r3, #40	@ 0x28
 8010e78:	d904      	bls.n	8010e84 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e7e:	3301      	adds	r3, #1
 8010e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e86:	7a5b      	ldrb	r3, [r3, #9]
 8010e88:	f003 0308 	and.w	r3, r3, #8
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d04a      	beq.n	8010f26 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e92:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010e94:	2b04      	cmp	r3, #4
 8010e96:	d003      	beq.n	8010ea0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e9a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010e9c:	2b07      	cmp	r3, #7
 8010e9e:	d142      	bne.n	8010f26 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea6:	6a1b      	ldr	r3, [r3, #32]
 8010ea8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eac:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80110e4 <tcp_slowtmr+0x588>)
 8010eb2:	440b      	add	r3, r1
 8010eb4:	498c      	ldr	r1, [pc, #560]	@ (80110e8 <tcp_slowtmr+0x58c>)
 8010eb6:	fba1 1303 	umull	r1, r3, r1, r3
 8010eba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d90a      	bls.n	8010ed6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010eca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ece:	3301      	adds	r3, #1
 8010ed0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010ed4:	e027      	b.n	8010f26 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ed6:	4b82      	ldr	r3, [pc, #520]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010eec:	4618      	mov	r0, r3
 8010eee:	4b7f      	ldr	r3, [pc, #508]	@ (80110ec <tcp_slowtmr+0x590>)
 8010ef0:	fb00 f303 	mul.w	r3, r0, r3
 8010ef4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010ef6:	497c      	ldr	r1, [pc, #496]	@ (80110e8 <tcp_slowtmr+0x58c>)
 8010ef8:	fba1 1303 	umull	r1, r3, r1, r3
 8010efc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d911      	bls.n	8010f26 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010f02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f04:	f004 ffea 	bl	8015edc <tcp_keepalive>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010f0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d107      	bne.n	8010f26 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f18:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f22:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d011      	beq.n	8010f52 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f34:	6a1b      	ldr	r3, [r3, #32]
 8010f36:	1ad2      	subs	r2, r2, r3
 8010f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010f3e:	4619      	mov	r1, r3
 8010f40:	460b      	mov	r3, r1
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	440b      	add	r3, r1
 8010f46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d302      	bcc.n	8010f52 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f4e:	f000 feab 	bl	8011ca8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f54:	7d1b      	ldrb	r3, [r3, #20]
 8010f56:	2b03      	cmp	r3, #3
 8010f58:	d10b      	bne.n	8010f72 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010f5a:	4b61      	ldr	r3, [pc, #388]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	2b28      	cmp	r3, #40	@ 0x28
 8010f66:	d904      	bls.n	8010f72 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f74:	7d1b      	ldrb	r3, [r3, #20]
 8010f76:	2b09      	cmp	r3, #9
 8010f78:	d10b      	bne.n	8010f92 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010f7a:	4b59      	ldr	r3, [pc, #356]	@ (80110e0 <tcp_slowtmr+0x584>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f80:	6a1b      	ldr	r3, [r3, #32]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	2bf0      	cmp	r3, #240	@ 0xf0
 8010f86:	d904      	bls.n	8010f92 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d060      	beq.n	801105c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fa0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010fa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010fa4:	f000 fccc 	bl	8011940 <tcp_pcb_purge>
      if (prev != NULL) {
 8010fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d010      	beq.n	8010fd0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010fae:	4b50      	ldr	r3, [pc, #320]	@ (80110f0 <tcp_slowtmr+0x594>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d106      	bne.n	8010fc6 <tcp_slowtmr+0x46a>
 8010fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80110f4 <tcp_slowtmr+0x598>)
 8010fba:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010fbe:	494e      	ldr	r1, [pc, #312]	@ (80110f8 <tcp_slowtmr+0x59c>)
 8010fc0:	484e      	ldr	r0, [pc, #312]	@ (80110fc <tcp_slowtmr+0x5a0>)
 8010fc2:	f008 fec7 	bl	8019d54 <iprintf>
        prev->next = pcb->next;
 8010fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fc8:	68da      	ldr	r2, [r3, #12]
 8010fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fcc:	60da      	str	r2, [r3, #12]
 8010fce:	e00f      	b.n	8010ff0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010fd0:	4b47      	ldr	r3, [pc, #284]	@ (80110f0 <tcp_slowtmr+0x594>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d006      	beq.n	8010fe8 <tcp_slowtmr+0x48c>
 8010fda:	4b46      	ldr	r3, [pc, #280]	@ (80110f4 <tcp_slowtmr+0x598>)
 8010fdc:	f240 5271 	movw	r2, #1393	@ 0x571
 8010fe0:	4947      	ldr	r1, [pc, #284]	@ (8011100 <tcp_slowtmr+0x5a4>)
 8010fe2:	4846      	ldr	r0, [pc, #280]	@ (80110fc <tcp_slowtmr+0x5a0>)
 8010fe4:	f008 feb6 	bl	8019d54 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	4a40      	ldr	r2, [pc, #256]	@ (80110f0 <tcp_slowtmr+0x594>)
 8010fee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d013      	beq.n	8011020 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ffa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ffe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011000:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011004:	3304      	adds	r3, #4
 8011006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011008:	8ad2      	ldrh	r2, [r2, #22]
 801100a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801100c:	8b09      	ldrh	r1, [r1, #24]
 801100e:	9102      	str	r1, [sp, #8]
 8011010:	9201      	str	r2, [sp, #4]
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	462b      	mov	r3, r5
 8011016:	4622      	mov	r2, r4
 8011018:	4601      	mov	r1, r0
 801101a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801101c:	f004 feaa 	bl	8015d74 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011028:	7d1b      	ldrb	r3, [r3, #20]
 801102a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801102e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011036:	6838      	ldr	r0, [r7, #0]
 8011038:	f7fe ffee 	bl	8010018 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801103c:	4b31      	ldr	r3, [pc, #196]	@ (8011104 <tcp_slowtmr+0x5a8>)
 801103e:	2200      	movs	r2, #0
 8011040:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <tcp_slowtmr+0x4f6>
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f06f 010c 	mvn.w	r1, #12
 801104e:	68b8      	ldr	r0, [r7, #8]
 8011050:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011052:	4b2c      	ldr	r3, [pc, #176]	@ (8011104 <tcp_slowtmr+0x5a8>)
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d037      	beq.n	80110ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801105a:	e592      	b.n	8010b82 <tcp_slowtmr+0x26>
      prev = pcb;
 801105c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801105e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011068:	7f1b      	ldrb	r3, [r3, #28]
 801106a:	3301      	adds	r3, #1
 801106c:	b2da      	uxtb	r2, r3
 801106e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011070:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011074:	7f1a      	ldrb	r2, [r3, #28]
 8011076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011078:	7f5b      	ldrb	r3, [r3, #29]
 801107a:	429a      	cmp	r2, r3
 801107c:	d325      	bcc.n	80110ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011080:	2200      	movs	r2, #0
 8011082:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011084:	4b1f      	ldr	r3, [pc, #124]	@ (8011104 <tcp_slowtmr+0x5a8>)
 8011086:	2200      	movs	r2, #0
 8011088:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801108a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011090:	2b00      	cmp	r3, #0
 8011092:	d00b      	beq.n	80110ac <tcp_slowtmr+0x550>
 8011094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801109a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801109c:	6912      	ldr	r2, [r2, #16]
 801109e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80110a0:	4610      	mov	r0, r2
 80110a2:	4798      	blx	r3
 80110a4:	4603      	mov	r3, r0
 80110a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80110aa:	e002      	b.n	80110b2 <tcp_slowtmr+0x556>
 80110ac:	2300      	movs	r3, #0
 80110ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80110b2:	4b14      	ldr	r3, [pc, #80]	@ (8011104 <tcp_slowtmr+0x5a8>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f47f ad62 	bne.w	8010b80 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80110bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d102      	bne.n	80110ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80110c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110c6:	f004 f8a1 	bl	801520c <tcp_output>
  while (pcb != NULL) {
 80110ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f47f ad5e 	bne.w	8010b8e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80110d2:	2300      	movs	r3, #0
 80110d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80110d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011108 <tcp_slowtmr+0x5ac>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80110dc:	e069      	b.n	80111b2 <tcp_slowtmr+0x656>
 80110de:	bf00      	nop
 80110e0:	20011d7c 	.word	0x20011d7c
 80110e4:	000a4cb8 	.word	0x000a4cb8
 80110e8:	10624dd3 	.word	0x10624dd3
 80110ec:	000124f8 	.word	0x000124f8
 80110f0:	20011d88 	.word	0x20011d88
 80110f4:	0801d9bc 	.word	0x0801d9bc
 80110f8:	0801ddf4 	.word	0x0801ddf4
 80110fc:	0801da00 	.word	0x0801da00
 8011100:	0801de20 	.word	0x0801de20
 8011104:	20011d90 	.word	0x20011d90
 8011108:	20011d8c 	.word	0x20011d8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801110c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801110e:	7d1b      	ldrb	r3, [r3, #20]
 8011110:	2b0a      	cmp	r3, #10
 8011112:	d006      	beq.n	8011122 <tcp_slowtmr+0x5c6>
 8011114:	4b2b      	ldr	r3, [pc, #172]	@ (80111c4 <tcp_slowtmr+0x668>)
 8011116:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801111a:	492b      	ldr	r1, [pc, #172]	@ (80111c8 <tcp_slowtmr+0x66c>)
 801111c:	482b      	ldr	r0, [pc, #172]	@ (80111cc <tcp_slowtmr+0x670>)
 801111e:	f008 fe19 	bl	8019d54 <iprintf>
    pcb_remove = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011128:	4b29      	ldr	r3, [pc, #164]	@ (80111d0 <tcp_slowtmr+0x674>)
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801112e:	6a1b      	ldr	r3, [r3, #32]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	2bf0      	cmp	r3, #240	@ 0xf0
 8011134:	d904      	bls.n	8011140 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801113a:	3301      	adds	r3, #1
 801113c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011144:	2b00      	cmp	r3, #0
 8011146:	d02f      	beq.n	80111a8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011148:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801114a:	f000 fbf9 	bl	8011940 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801114e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011150:	2b00      	cmp	r3, #0
 8011152:	d010      	beq.n	8011176 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011154:	4b1f      	ldr	r3, [pc, #124]	@ (80111d4 <tcp_slowtmr+0x678>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801115a:	429a      	cmp	r2, r3
 801115c:	d106      	bne.n	801116c <tcp_slowtmr+0x610>
 801115e:	4b19      	ldr	r3, [pc, #100]	@ (80111c4 <tcp_slowtmr+0x668>)
 8011160:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011164:	491c      	ldr	r1, [pc, #112]	@ (80111d8 <tcp_slowtmr+0x67c>)
 8011166:	4819      	ldr	r0, [pc, #100]	@ (80111cc <tcp_slowtmr+0x670>)
 8011168:	f008 fdf4 	bl	8019d54 <iprintf>
        prev->next = pcb->next;
 801116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116e:	68da      	ldr	r2, [r3, #12]
 8011170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011172:	60da      	str	r2, [r3, #12]
 8011174:	e00f      	b.n	8011196 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011176:	4b17      	ldr	r3, [pc, #92]	@ (80111d4 <tcp_slowtmr+0x678>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801117c:	429a      	cmp	r2, r3
 801117e:	d006      	beq.n	801118e <tcp_slowtmr+0x632>
 8011180:	4b10      	ldr	r3, [pc, #64]	@ (80111c4 <tcp_slowtmr+0x668>)
 8011182:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011186:	4915      	ldr	r1, [pc, #84]	@ (80111dc <tcp_slowtmr+0x680>)
 8011188:	4810      	ldr	r0, [pc, #64]	@ (80111cc <tcp_slowtmr+0x670>)
 801118a:	f008 fde3 	bl	8019d54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801118e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	4a10      	ldr	r2, [pc, #64]	@ (80111d4 <tcp_slowtmr+0x678>)
 8011194:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011198:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801119a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80111a0:	69f8      	ldr	r0, [r7, #28]
 80111a2:	f7fe ff39 	bl	8010018 <tcp_free>
 80111a6:	e004      	b.n	80111b2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80111a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80111ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80111b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1a9      	bne.n	801110c <tcp_slowtmr+0x5b0>
    }
  }
}
 80111b8:	bf00      	nop
 80111ba:	bf00      	nop
 80111bc:	3730      	adds	r7, #48	@ 0x30
 80111be:	46bd      	mov	sp, r7
 80111c0:	bdb0      	pop	{r4, r5, r7, pc}
 80111c2:	bf00      	nop
 80111c4:	0801d9bc 	.word	0x0801d9bc
 80111c8:	0801de4c 	.word	0x0801de4c
 80111cc:	0801da00 	.word	0x0801da00
 80111d0:	20011d7c 	.word	0x20011d7c
 80111d4:	20011d8c 	.word	0x20011d8c
 80111d8:	0801de7c 	.word	0x0801de7c
 80111dc:	0801dea4 	.word	0x0801dea4

080111e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80111e6:	4b2d      	ldr	r3, [pc, #180]	@ (801129c <tcp_fasttmr+0xbc>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	3301      	adds	r3, #1
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4b2b      	ldr	r3, [pc, #172]	@ (801129c <tcp_fasttmr+0xbc>)
 80111f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80111f2:	4b2b      	ldr	r3, [pc, #172]	@ (80112a0 <tcp_fasttmr+0xc0>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80111f8:	e048      	b.n	801128c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	7f9a      	ldrb	r2, [r3, #30]
 80111fe:	4b27      	ldr	r3, [pc, #156]	@ (801129c <tcp_fasttmr+0xbc>)
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	d03f      	beq.n	8011286 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011206:	4b25      	ldr	r3, [pc, #148]	@ (801129c <tcp_fasttmr+0xbc>)
 8011208:	781a      	ldrb	r2, [r3, #0]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	8b5b      	ldrh	r3, [r3, #26]
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	d010      	beq.n	801123c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	8b5b      	ldrh	r3, [r3, #26]
 801121e:	f043 0302 	orr.w	r3, r3, #2
 8011222:	b29a      	uxth	r2, r3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f003 ffef 	bl	801520c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8b5b      	ldrh	r3, [r3, #26]
 8011232:	f023 0303 	bic.w	r3, r3, #3
 8011236:	b29a      	uxth	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	8b5b      	ldrh	r3, [r3, #26]
 8011240:	f003 0308 	and.w	r3, r3, #8
 8011244:	2b00      	cmp	r3, #0
 8011246:	d009      	beq.n	801125c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8b5b      	ldrh	r3, [r3, #26]
 801124c:	f023 0308 	bic.w	r3, r3, #8
 8011250:	b29a      	uxth	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff f872 	bl	8010340 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00a      	beq.n	8011280 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801126a:	4b0e      	ldr	r3, [pc, #56]	@ (80112a4 <tcp_fasttmr+0xc4>)
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 f819 	bl	80112a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011276:	4b0b      	ldr	r3, [pc, #44]	@ (80112a4 <tcp_fasttmr+0xc4>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d000      	beq.n	8011280 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801127e:	e7b8      	b.n	80111f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	607b      	str	r3, [r7, #4]
 8011284:	e002      	b.n	801128c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1b3      	bne.n	80111fa <tcp_fasttmr+0x1a>
    }
  }
}
 8011292:	bf00      	nop
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20011d92 	.word	0x20011d92
 80112a0:	20011d88 	.word	0x20011d88
 80112a4:	20011d90 	.word	0x20011d90

080112a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d109      	bne.n	80112ca <tcp_process_refused_data+0x22>
 80112b6:	4b37      	ldr	r3, [pc, #220]	@ (8011394 <tcp_process_refused_data+0xec>)
 80112b8:	f240 6209 	movw	r2, #1545	@ 0x609
 80112bc:	4936      	ldr	r1, [pc, #216]	@ (8011398 <tcp_process_refused_data+0xf0>)
 80112be:	4837      	ldr	r0, [pc, #220]	@ (801139c <tcp_process_refused_data+0xf4>)
 80112c0:	f008 fd48 	bl	8019d54 <iprintf>
 80112c4:	f06f 030f 	mvn.w	r3, #15
 80112c8:	e060      	b.n	801138c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112ce:	7b5b      	ldrb	r3, [r3, #13]
 80112d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00b      	beq.n	8011300 <tcp_process_refused_data+0x58>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6918      	ldr	r0, [r3, #16]
 80112f2:	2300      	movs	r3, #0
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	47a0      	blx	r4
 80112fa:	4603      	mov	r3, r0
 80112fc:	73fb      	strb	r3, [r7, #15]
 80112fe:	e007      	b.n	8011310 <tcp_process_refused_data+0x68>
 8011300:	2300      	movs	r3, #0
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	6879      	ldr	r1, [r7, #4]
 8011306:	2000      	movs	r0, #0
 8011308:	f000 f8a4 	bl	8011454 <tcp_recv_null>
 801130c:	4603      	mov	r3, r0
 801130e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d12a      	bne.n	801136e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011318:	7bbb      	ldrb	r3, [r7, #14]
 801131a:	f003 0320 	and.w	r3, r3, #32
 801131e:	2b00      	cmp	r3, #0
 8011320:	d033      	beq.n	801138a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011326:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801132a:	d005      	beq.n	8011338 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011330:	3301      	adds	r3, #1
 8011332:	b29a      	uxth	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801133e:	2b00      	cmp	r3, #0
 8011340:	d00b      	beq.n	801135a <tcp_process_refused_data+0xb2>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6918      	ldr	r0, [r3, #16]
 801134c:	2300      	movs	r3, #0
 801134e:	2200      	movs	r2, #0
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	47a0      	blx	r4
 8011354:	4603      	mov	r3, r0
 8011356:	73fb      	strb	r3, [r7, #15]
 8011358:	e001      	b.n	801135e <tcp_process_refused_data+0xb6>
 801135a:	2300      	movs	r3, #0
 801135c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011362:	f113 0f0d 	cmn.w	r3, #13
 8011366:	d110      	bne.n	801138a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011368:	f06f 030c 	mvn.w	r3, #12
 801136c:	e00e      	b.n	801138c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011372:	f113 0f0d 	cmn.w	r3, #13
 8011376:	d102      	bne.n	801137e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011378:	f06f 030c 	mvn.w	r3, #12
 801137c:	e006      	b.n	801138c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011384:	f06f 0304 	mvn.w	r3, #4
 8011388:	e000      	b.n	801138c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3714      	adds	r7, #20
 8011390:	46bd      	mov	sp, r7
 8011392:	bd90      	pop	{r4, r7, pc}
 8011394:	0801d9bc 	.word	0x0801d9bc
 8011398:	0801decc 	.word	0x0801decc
 801139c:	0801da00 	.word	0x0801da00

080113a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80113a8:	e007      	b.n	80113ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 f80a 	bl	80113ca <tcp_seg_free>
    seg = next;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1f4      	bne.n	80113aa <tcp_segs_free+0xa>
  }
}
 80113c0:	bf00      	nop
 80113c2:	bf00      	nop
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}

080113ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b082      	sub	sp, #8
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00c      	beq.n	80113f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d004      	beq.n	80113ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fe fb6b 	bl	800fac0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80113ea:	6879      	ldr	r1, [r7, #4]
 80113ec:	2003      	movs	r0, #3
 80113ee:	f7fd fcc3 	bl	800ed78 <memp_free>
  }
}
 80113f2:	bf00      	nop
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
	...

080113fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d106      	bne.n	8011418 <tcp_seg_copy+0x1c>
 801140a:	4b0f      	ldr	r3, [pc, #60]	@ (8011448 <tcp_seg_copy+0x4c>)
 801140c:	f240 6282 	movw	r2, #1666	@ 0x682
 8011410:	490e      	ldr	r1, [pc, #56]	@ (801144c <tcp_seg_copy+0x50>)
 8011412:	480f      	ldr	r0, [pc, #60]	@ (8011450 <tcp_seg_copy+0x54>)
 8011414:	f008 fc9e 	bl	8019d54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011418:	2003      	movs	r0, #3
 801141a:	f7fd fc5b 	bl	800ecd4 <memp_malloc>
 801141e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d101      	bne.n	801142a <tcp_seg_copy+0x2e>
    return NULL;
 8011426:	2300      	movs	r3, #0
 8011428:	e00a      	b.n	8011440 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801142a:	2210      	movs	r2, #16
 801142c:	6879      	ldr	r1, [r7, #4]
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f008 ff0f 	bl	801a252 <memcpy>
  pbuf_ref(cseg->p);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	4618      	mov	r0, r3
 801143a:	f7fe fbe7 	bl	800fc0c <pbuf_ref>
  return cseg;
 801143e:	68fb      	ldr	r3, [r7, #12]
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	0801d9bc 	.word	0x0801d9bc
 801144c:	0801df10 	.word	0x0801df10
 8011450:	0801da00 	.word	0x0801da00

08011454 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d109      	bne.n	801147c <tcp_recv_null+0x28>
 8011468:	4b12      	ldr	r3, [pc, #72]	@ (80114b4 <tcp_recv_null+0x60>)
 801146a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801146e:	4912      	ldr	r1, [pc, #72]	@ (80114b8 <tcp_recv_null+0x64>)
 8011470:	4812      	ldr	r0, [pc, #72]	@ (80114bc <tcp_recv_null+0x68>)
 8011472:	f008 fc6f 	bl	8019d54 <iprintf>
 8011476:	f06f 030f 	mvn.w	r3, #15
 801147a:	e016      	b.n	80114aa <tcp_recv_null+0x56>

  if (p != NULL) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d009      	beq.n	8011496 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	891b      	ldrh	r3, [r3, #8]
 8011486:	4619      	mov	r1, r3
 8011488:	68b8      	ldr	r0, [r7, #8]
 801148a:	f7ff fad1 	bl	8010a30 <tcp_recved>
    pbuf_free(p);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7fe fb16 	bl	800fac0 <pbuf_free>
 8011494:	e008      	b.n	80114a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d104      	bne.n	80114a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801149e:	68b8      	ldr	r0, [r7, #8]
 80114a0:	f7fe ffb8 	bl	8010414 <tcp_close>
 80114a4:	4603      	mov	r3, r0
 80114a6:	e000      	b.n	80114aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80114a8:	2300      	movs	r3, #0
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	0801d9bc 	.word	0x0801d9bc
 80114b8:	0801df2c 	.word	0x0801df2c
 80114bc:	0801da00 	.word	0x0801da00

080114c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	4603      	mov	r3, r0
 80114c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80114ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	db01      	blt.n	80114d6 <tcp_kill_prio+0x16>
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	e000      	b.n	80114d8 <tcp_kill_prio+0x18>
 80114d6:	237f      	movs	r3, #127	@ 0x7f
 80114d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80114da:	7afb      	ldrb	r3, [r7, #11]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d034      	beq.n	801154a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80114e0:	7afb      	ldrb	r3, [r7, #11]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80114ee:	4b19      	ldr	r3, [pc, #100]	@ (8011554 <tcp_kill_prio+0x94>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	617b      	str	r3, [r7, #20]
 80114f4:	e01f      	b.n	8011536 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	7d5b      	ldrb	r3, [r3, #21]
 80114fa:	7afa      	ldrb	r2, [r7, #11]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d80c      	bhi.n	801151a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011504:	7afa      	ldrb	r2, [r7, #11]
 8011506:	429a      	cmp	r2, r3
 8011508:	d112      	bne.n	8011530 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801150a:	4b13      	ldr	r3, [pc, #76]	@ (8011558 <tcp_kill_prio+0x98>)
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	6a1b      	ldr	r3, [r3, #32]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	429a      	cmp	r2, r3
 8011518:	d80a      	bhi.n	8011530 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801151a:	4b0f      	ldr	r3, [pc, #60]	@ (8011558 <tcp_kill_prio+0x98>)
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	7d5b      	ldrb	r3, [r3, #21]
 801152e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	617b      	str	r3, [r7, #20]
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d1dc      	bne.n	80114f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d004      	beq.n	801154c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011542:	6938      	ldr	r0, [r7, #16]
 8011544:	f7ff f8ac 	bl	80106a0 <tcp_abort>
 8011548:	e000      	b.n	801154c <tcp_kill_prio+0x8c>
    return;
 801154a:	bf00      	nop
  }
}
 801154c:	3718      	adds	r7, #24
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20011d88 	.word	0x20011d88
 8011558:	20011d7c 	.word	0x20011d7c

0801155c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b086      	sub	sp, #24
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011566:	79fb      	ldrb	r3, [r7, #7]
 8011568:	2b08      	cmp	r3, #8
 801156a:	d009      	beq.n	8011580 <tcp_kill_state+0x24>
 801156c:	79fb      	ldrb	r3, [r7, #7]
 801156e:	2b09      	cmp	r3, #9
 8011570:	d006      	beq.n	8011580 <tcp_kill_state+0x24>
 8011572:	4b1a      	ldr	r3, [pc, #104]	@ (80115dc <tcp_kill_state+0x80>)
 8011574:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011578:	4919      	ldr	r1, [pc, #100]	@ (80115e0 <tcp_kill_state+0x84>)
 801157a:	481a      	ldr	r0, [pc, #104]	@ (80115e4 <tcp_kill_state+0x88>)
 801157c:	f008 fbea 	bl	8019d54 <iprintf>

  inactivity = 0;
 8011580:	2300      	movs	r3, #0
 8011582:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011584:	2300      	movs	r3, #0
 8011586:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011588:	4b17      	ldr	r3, [pc, #92]	@ (80115e8 <tcp_kill_state+0x8c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	617b      	str	r3, [r7, #20]
 801158e:	e017      	b.n	80115c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	7d1b      	ldrb	r3, [r3, #20]
 8011594:	79fa      	ldrb	r2, [r7, #7]
 8011596:	429a      	cmp	r2, r3
 8011598:	d10f      	bne.n	80115ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801159a:	4b14      	ldr	r3, [pc, #80]	@ (80115ec <tcp_kill_state+0x90>)
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	6a1b      	ldr	r3, [r3, #32]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d807      	bhi.n	80115ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80115aa:	4b10      	ldr	r3, [pc, #64]	@ (80115ec <tcp_kill_state+0x90>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	6a1b      	ldr	r3, [r3, #32]
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	617b      	str	r3, [r7, #20]
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d1e4      	bne.n	8011590 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d003      	beq.n	80115d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80115cc:	2100      	movs	r1, #0
 80115ce:	6938      	ldr	r0, [r7, #16]
 80115d0:	f7fe ffa8 	bl	8010524 <tcp_abandon>
  }
}
 80115d4:	bf00      	nop
 80115d6:	3718      	adds	r7, #24
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	0801d9bc 	.word	0x0801d9bc
 80115e0:	0801df48 	.word	0x0801df48
 80115e4:	0801da00 	.word	0x0801da00
 80115e8:	20011d88 	.word	0x20011d88
 80115ec:	20011d7c 	.word	0x20011d7c

080115f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80115fe:	4b12      	ldr	r3, [pc, #72]	@ (8011648 <tcp_kill_timewait+0x58>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	60fb      	str	r3, [r7, #12]
 8011604:	e012      	b.n	801162c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011606:	4b11      	ldr	r3, [pc, #68]	@ (801164c <tcp_kill_timewait+0x5c>)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	1ad3      	subs	r3, r2, r3
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	429a      	cmp	r2, r3
 8011614:	d807      	bhi.n	8011626 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011616:	4b0d      	ldr	r3, [pc, #52]	@ (801164c <tcp_kill_timewait+0x5c>)
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6a1b      	ldr	r3, [r3, #32]
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	60fb      	str	r3, [r7, #12]
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1e9      	bne.n	8011606 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011638:	68b8      	ldr	r0, [r7, #8]
 801163a:	f7ff f831 	bl	80106a0 <tcp_abort>
  }
}
 801163e:	bf00      	nop
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	20011d8c 	.word	0x20011d8c
 801164c:	20011d7c 	.word	0x20011d7c

08011650 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011656:	4b10      	ldr	r3, [pc, #64]	@ (8011698 <tcp_handle_closepend+0x48>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801165c:	e014      	b.n	8011688 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	8b5b      	ldrh	r3, [r3, #26]
 8011668:	f003 0308 	and.w	r3, r3, #8
 801166c:	2b00      	cmp	r3, #0
 801166e:	d009      	beq.n	8011684 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	8b5b      	ldrh	r3, [r3, #26]
 8011674:	f023 0308 	bic.w	r3, r3, #8
 8011678:	b29a      	uxth	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7fe fe5e 	bl	8010340 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d1e7      	bne.n	801165e <tcp_handle_closepend+0xe>
  }
}
 801168e:	bf00      	nop
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	20011d88 	.word	0x20011d88

0801169c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	4603      	mov	r3, r0
 80116a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116a6:	2001      	movs	r0, #1
 80116a8:	f7fd fb14 	bl	800ecd4 <memp_malloc>
 80116ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d126      	bne.n	8011702 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80116b4:	f7ff ffcc 	bl	8011650 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80116b8:	f7ff ff9a 	bl	80115f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116bc:	2001      	movs	r0, #1
 80116be:	f7fd fb09 	bl	800ecd4 <memp_malloc>
 80116c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d11b      	bne.n	8011702 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80116ca:	2009      	movs	r0, #9
 80116cc:	f7ff ff46 	bl	801155c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116d0:	2001      	movs	r0, #1
 80116d2:	f7fd faff 	bl	800ecd4 <memp_malloc>
 80116d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d111      	bne.n	8011702 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80116de:	2008      	movs	r0, #8
 80116e0:	f7ff ff3c 	bl	801155c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116e4:	2001      	movs	r0, #1
 80116e6:	f7fd faf5 	bl	800ecd4 <memp_malloc>
 80116ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d107      	bne.n	8011702 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7ff fee3 	bl	80114c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116fa:	2001      	movs	r0, #1
 80116fc:	f7fd faea 	bl	800ecd4 <memp_malloc>
 8011700:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d03f      	beq.n	8011788 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011708:	229c      	movs	r2, #156	@ 0x9c
 801170a:	2100      	movs	r1, #0
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	f008 fce7 	bl	801a0e0 <memset>
    pcb->prio = prio;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	79fa      	ldrb	r2, [r7, #7]
 8011716:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801171e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	22ff      	movs	r2, #255	@ 0xff
 8011736:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801173e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2206      	movs	r2, #6
 8011744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2206      	movs	r2, #6
 801174c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011754:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2201      	movs	r2, #1
 801175a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801175e:	4b0d      	ldr	r3, [pc, #52]	@ (8011794 <tcp_alloc+0xf8>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011766:	4b0c      	ldr	r3, [pc, #48]	@ (8011798 <tcp_alloc+0xfc>)
 8011768:	781a      	ldrb	r2, [r3, #0]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011774:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	4a08      	ldr	r2, [pc, #32]	@ (801179c <tcp_alloc+0x100>)
 801177c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4a07      	ldr	r2, [pc, #28]	@ (80117a0 <tcp_alloc+0x104>)
 8011784:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011788:	68fb      	ldr	r3, [r7, #12]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20011d7c 	.word	0x20011d7c
 8011798:	20011d92 	.word	0x20011d92
 801179c:	08011455 	.word	0x08011455
 80117a0:	006ddd00 	.word	0x006ddd00

080117a4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	4603      	mov	r3, r0
 80117ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80117ae:	2040      	movs	r0, #64	@ 0x40
 80117b0:	f7ff ff74 	bl	801169c <tcp_alloc>
 80117b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80117b6:	68fb      	ldr	r3, [r7, #12]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	611a      	str	r2, [r3, #16]
  }
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
	...

080117e4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00e      	beq.n	8011812 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	7d1b      	ldrb	r3, [r3, #20]
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d106      	bne.n	801180a <tcp_recv+0x26>
 80117fc:	4b07      	ldr	r3, [pc, #28]	@ (801181c <tcp_recv+0x38>)
 80117fe:	f240 72df 	movw	r2, #2015	@ 0x7df
 8011802:	4907      	ldr	r1, [pc, #28]	@ (8011820 <tcp_recv+0x3c>)
 8011804:	4807      	ldr	r0, [pc, #28]	@ (8011824 <tcp_recv+0x40>)
 8011806:	f008 faa5 	bl	8019d54 <iprintf>
    pcb->recv = recv;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8011812:	bf00      	nop
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	0801d9bc 	.word	0x0801d9bc
 8011820:	0801df58 	.word	0x0801df58
 8011824:	0801da00 	.word	0x0801da00

08011828 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00e      	beq.n	8011856 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7d1b      	ldrb	r3, [r3, #20]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d106      	bne.n	801184e <tcp_sent+0x26>
 8011840:	4b07      	ldr	r3, [pc, #28]	@ (8011860 <tcp_sent+0x38>)
 8011842:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8011846:	4907      	ldr	r1, [pc, #28]	@ (8011864 <tcp_sent+0x3c>)
 8011848:	4807      	ldr	r0, [pc, #28]	@ (8011868 <tcp_sent+0x40>)
 801184a:	f008 fa83 	bl	8019d54 <iprintf>
    pcb->sent = sent;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8011856:	bf00      	nop
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	0801d9bc 	.word	0x0801d9bc
 8011864:	0801df80 	.word	0x0801df80
 8011868:	0801da00 	.word	0x0801da00

0801186c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00e      	beq.n	801189a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	2b01      	cmp	r3, #1
 8011882:	d106      	bne.n	8011892 <tcp_err+0x26>
 8011884:	4b07      	ldr	r3, [pc, #28]	@ (80118a4 <tcp_err+0x38>)
 8011886:	f640 020d 	movw	r2, #2061	@ 0x80d
 801188a:	4907      	ldr	r1, [pc, #28]	@ (80118a8 <tcp_err+0x3c>)
 801188c:	4807      	ldr	r0, [pc, #28]	@ (80118ac <tcp_err+0x40>)
 801188e:	f008 fa61 	bl	8019d54 <iprintf>
    pcb->errf = err;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801189a:	bf00      	nop
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	0801d9bc 	.word	0x0801d9bc
 80118a8:	0801dfa8 	.word	0x0801dfa8
 80118ac:	0801da00 	.word	0x0801da00

080118b0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d008      	beq.n	80118d2 <tcp_accept+0x22>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d104      	bne.n	80118d2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	619a      	str	r2, [r3, #24]
  }
}
 80118d2:	bf00      	nop
 80118d4:	3714      	adds	r7, #20
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr
	...

080118e0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	4613      	mov	r3, r2
 80118ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d107      	bne.n	8011904 <tcp_poll+0x24>
 80118f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011930 <tcp_poll+0x50>)
 80118f6:	f640 023d 	movw	r2, #2109	@ 0x83d
 80118fa:	490e      	ldr	r1, [pc, #56]	@ (8011934 <tcp_poll+0x54>)
 80118fc:	480e      	ldr	r0, [pc, #56]	@ (8011938 <tcp_poll+0x58>)
 80118fe:	f008 fa29 	bl	8019d54 <iprintf>
 8011902:	e011      	b.n	8011928 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	7d1b      	ldrb	r3, [r3, #20]
 8011908:	2b01      	cmp	r3, #1
 801190a:	d106      	bne.n	801191a <tcp_poll+0x3a>
 801190c:	4b08      	ldr	r3, [pc, #32]	@ (8011930 <tcp_poll+0x50>)
 801190e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8011912:	490a      	ldr	r1, [pc, #40]	@ (801193c <tcp_poll+0x5c>)
 8011914:	4808      	ldr	r0, [pc, #32]	@ (8011938 <tcp_poll+0x58>)
 8011916:	f008 fa1d 	bl	8019d54 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	79fa      	ldrb	r2, [r7, #7]
 8011926:	775a      	strb	r2, [r3, #29]
}
 8011928:	3710      	adds	r7, #16
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	0801d9bc 	.word	0x0801d9bc
 8011934:	0801dfd0 	.word	0x0801dfd0
 8011938:	0801da00 	.word	0x0801da00
 801193c:	0801dfe8 	.word	0x0801dfe8

08011940 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <tcp_pcb_purge+0x1e>
 801194e:	4b21      	ldr	r3, [pc, #132]	@ (80119d4 <tcp_pcb_purge+0x94>)
 8011950:	f640 0251 	movw	r2, #2129	@ 0x851
 8011954:	4920      	ldr	r1, [pc, #128]	@ (80119d8 <tcp_pcb_purge+0x98>)
 8011956:	4821      	ldr	r0, [pc, #132]	@ (80119dc <tcp_pcb_purge+0x9c>)
 8011958:	f008 f9fc 	bl	8019d54 <iprintf>
 801195c:	e037      	b.n	80119ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	7d1b      	ldrb	r3, [r3, #20]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d033      	beq.n	80119ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801196a:	2b0a      	cmp	r3, #10
 801196c:	d02f      	beq.n	80119ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011972:	2b01      	cmp	r3, #1
 8011974:	d02b      	beq.n	80119ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801197a:	2b00      	cmp	r3, #0
 801197c:	d007      	beq.n	801198e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011982:	4618      	mov	r0, r3
 8011984:	f7fe f89c 	bl	800fac0 <pbuf_free>
      pcb->refused_data = NULL;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011992:	2b00      	cmp	r3, #0
 8011994:	d002      	beq.n	801199c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f986 	bl	8011ca8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119a2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7ff fcf9 	bl	80113a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7ff fcf4 	bl	80113a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0801d9bc 	.word	0x0801d9bc
 80119d8:	0801e008 	.word	0x0801e008
 80119dc:	0801da00 	.word	0x0801da00

080119e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d106      	bne.n	80119fe <tcp_pcb_remove+0x1e>
 80119f0:	4b3e      	ldr	r3, [pc, #248]	@ (8011aec <tcp_pcb_remove+0x10c>)
 80119f2:	f640 0283 	movw	r2, #2179	@ 0x883
 80119f6:	493e      	ldr	r1, [pc, #248]	@ (8011af0 <tcp_pcb_remove+0x110>)
 80119f8:	483e      	ldr	r0, [pc, #248]	@ (8011af4 <tcp_pcb_remove+0x114>)
 80119fa:	f008 f9ab 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d106      	bne.n	8011a12 <tcp_pcb_remove+0x32>
 8011a04:	4b39      	ldr	r3, [pc, #228]	@ (8011aec <tcp_pcb_remove+0x10c>)
 8011a06:	f640 0284 	movw	r2, #2180	@ 0x884
 8011a0a:	493b      	ldr	r1, [pc, #236]	@ (8011af8 <tcp_pcb_remove+0x118>)
 8011a0c:	4839      	ldr	r0, [pc, #228]	@ (8011af4 <tcp_pcb_remove+0x114>)
 8011a0e:	f008 f9a1 	bl	8019d54 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d105      	bne.n	8011a28 <tcp_pcb_remove+0x48>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	68da      	ldr	r2, [r3, #12]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	e013      	b.n	8011a50 <tcp_pcb_remove+0x70>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	60fb      	str	r3, [r7, #12]
 8011a2e:	e00c      	b.n	8011a4a <tcp_pcb_remove+0x6a>
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	683a      	ldr	r2, [r7, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d104      	bne.n	8011a44 <tcp_pcb_remove+0x64>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	68da      	ldr	r2, [r3, #12]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	60da      	str	r2, [r3, #12]
 8011a42:	e005      	b.n	8011a50 <tcp_pcb_remove+0x70>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1ef      	bne.n	8011a30 <tcp_pcb_remove+0x50>
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	2200      	movs	r2, #0
 8011a54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011a56:	6838      	ldr	r0, [r7, #0]
 8011a58:	f7ff ff72 	bl	8011940 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	7d1b      	ldrb	r3, [r3, #20]
 8011a60:	2b0a      	cmp	r3, #10
 8011a62:	d013      	beq.n	8011a8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d00f      	beq.n	8011a8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	8b5b      	ldrh	r3, [r3, #26]
 8011a70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d009      	beq.n	8011a8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	8b5b      	ldrh	r3, [r3, #26]
 8011a7c:	f043 0302 	orr.w	r3, r3, #2
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a86:	6838      	ldr	r0, [r7, #0]
 8011a88:	f003 fbc0 	bl	801520c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	7d1b      	ldrb	r3, [r3, #20]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d020      	beq.n	8011ad6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d006      	beq.n	8011aaa <tcp_pcb_remove+0xca>
 8011a9c:	4b13      	ldr	r3, [pc, #76]	@ (8011aec <tcp_pcb_remove+0x10c>)
 8011a9e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011aa2:	4916      	ldr	r1, [pc, #88]	@ (8011afc <tcp_pcb_remove+0x11c>)
 8011aa4:	4813      	ldr	r0, [pc, #76]	@ (8011af4 <tcp_pcb_remove+0x114>)
 8011aa6:	f008 f955 	bl	8019d54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d006      	beq.n	8011ac0 <tcp_pcb_remove+0xe0>
 8011ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8011aec <tcp_pcb_remove+0x10c>)
 8011ab4:	f640 0294 	movw	r2, #2196	@ 0x894
 8011ab8:	4911      	ldr	r1, [pc, #68]	@ (8011b00 <tcp_pcb_remove+0x120>)
 8011aba:	480e      	ldr	r0, [pc, #56]	@ (8011af4 <tcp_pcb_remove+0x114>)
 8011abc:	f008 f94a 	bl	8019d54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d006      	beq.n	8011ad6 <tcp_pcb_remove+0xf6>
 8011ac8:	4b08      	ldr	r3, [pc, #32]	@ (8011aec <tcp_pcb_remove+0x10c>)
 8011aca:	f640 0296 	movw	r2, #2198	@ 0x896
 8011ace:	490d      	ldr	r1, [pc, #52]	@ (8011b04 <tcp_pcb_remove+0x124>)
 8011ad0:	4808      	ldr	r0, [pc, #32]	@ (8011af4 <tcp_pcb_remove+0x114>)
 8011ad2:	f008 f93f 	bl	8019d54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011ae2:	bf00      	nop
 8011ae4:	3710      	adds	r7, #16
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	0801d9bc 	.word	0x0801d9bc
 8011af0:	0801e024 	.word	0x0801e024
 8011af4:	0801da00 	.word	0x0801da00
 8011af8:	0801e040 	.word	0x0801e040
 8011afc:	0801e060 	.word	0x0801e060
 8011b00:	0801e078 	.word	0x0801e078
 8011b04:	0801e094 	.word	0x0801e094

08011b08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d106      	bne.n	8011b24 <tcp_next_iss+0x1c>
 8011b16:	4b0a      	ldr	r3, [pc, #40]	@ (8011b40 <tcp_next_iss+0x38>)
 8011b18:	f640 02af 	movw	r2, #2223	@ 0x8af
 8011b1c:	4909      	ldr	r1, [pc, #36]	@ (8011b44 <tcp_next_iss+0x3c>)
 8011b1e:	480a      	ldr	r0, [pc, #40]	@ (8011b48 <tcp_next_iss+0x40>)
 8011b20:	f008 f918 	bl	8019d54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011b24:	4b09      	ldr	r3, [pc, #36]	@ (8011b4c <tcp_next_iss+0x44>)
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	4b09      	ldr	r3, [pc, #36]	@ (8011b50 <tcp_next_iss+0x48>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4413      	add	r3, r2
 8011b2e:	4a07      	ldr	r2, [pc, #28]	@ (8011b4c <tcp_next_iss+0x44>)
 8011b30:	6013      	str	r3, [r2, #0]
  return iss;
 8011b32:	4b06      	ldr	r3, [pc, #24]	@ (8011b4c <tcp_next_iss+0x44>)
 8011b34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	0801d9bc 	.word	0x0801d9bc
 8011b44:	0801e0ac 	.word	0x0801e0ac
 8011b48:	0801da00 	.word	0x0801da00
 8011b4c:	20000014 	.word	0x20000014
 8011b50:	20011d7c 	.word	0x20011d7c

08011b54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
 8011b60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d106      	bne.n	8011b76 <tcp_eff_send_mss_netif+0x22>
 8011b68:	4b14      	ldr	r3, [pc, #80]	@ (8011bbc <tcp_eff_send_mss_netif+0x68>)
 8011b6a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8011b6e:	4914      	ldr	r1, [pc, #80]	@ (8011bc0 <tcp_eff_send_mss_netif+0x6c>)
 8011b70:	4814      	ldr	r0, [pc, #80]	@ (8011bc4 <tcp_eff_send_mss_netif+0x70>)
 8011b72:	f008 f8ef 	bl	8019d54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011b7c:	89fb      	ldrh	r3, [r7, #14]
 8011b7e:	e019      	b.n	8011bb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011b84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011b86:	8afb      	ldrh	r3, [r7, #22]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d012      	beq.n	8011bb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011b8c:	2328      	movs	r3, #40	@ 0x28
 8011b8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011b90:	8afa      	ldrh	r2, [r7, #22]
 8011b92:	8abb      	ldrh	r3, [r7, #20]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d904      	bls.n	8011ba2 <tcp_eff_send_mss_netif+0x4e>
 8011b98:	8afa      	ldrh	r2, [r7, #22]
 8011b9a:	8abb      	ldrh	r3, [r7, #20]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	e000      	b.n	8011ba4 <tcp_eff_send_mss_netif+0x50>
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011ba6:	8a7a      	ldrh	r2, [r7, #18]
 8011ba8:	89fb      	ldrh	r3, [r7, #14]
 8011baa:	4293      	cmp	r3, r2
 8011bac:	bf28      	it	cs
 8011bae:	4613      	movcs	r3, r2
 8011bb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3718      	adds	r7, #24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	0801d9bc 	.word	0x0801d9bc
 8011bc0:	0801e0c8 	.word	0x0801e0c8
 8011bc4:	0801da00 	.word	0x0801da00

08011bc8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d119      	bne.n	8011c10 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011bdc:	4b10      	ldr	r3, [pc, #64]	@ (8011c20 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011bde:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011be2:	4910      	ldr	r1, [pc, #64]	@ (8011c24 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011be4:	4810      	ldr	r0, [pc, #64]	@ (8011c28 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011be6:	f008 f8b5 	bl	8019d54 <iprintf>

  while (pcb != NULL) {
 8011bea:	e011      	b.n	8011c10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d108      	bne.n	8011c0a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f7fe fd4e 	bl	80106a0 <tcp_abort>
      pcb = next;
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	60fb      	str	r3, [r7, #12]
 8011c08:	e002      	b.n	8011c10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1ea      	bne.n	8011bec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011c16:	bf00      	nop
 8011c18:	bf00      	nop
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	0801d9bc 	.word	0x0801d9bc
 8011c24:	0801e0f0 	.word	0x0801e0f0
 8011c28:	0801da00 	.word	0x0801da00

08011c2c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d02a      	beq.n	8011c92 <tcp_netif_ip_addr_changed+0x66>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d026      	beq.n	8011c92 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011c44:	4b15      	ldr	r3, [pc, #84]	@ (8011c9c <tcp_netif_ip_addr_changed+0x70>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4619      	mov	r1, r3
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff ffbc 	bl	8011bc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011c50:	4b13      	ldr	r3, [pc, #76]	@ (8011ca0 <tcp_netif_ip_addr_changed+0x74>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4619      	mov	r1, r3
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7ff ffb6 	bl	8011bc8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d017      	beq.n	8011c92 <tcp_netif_ip_addr_changed+0x66>
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d013      	beq.n	8011c92 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ca4 <tcp_netif_ip_addr_changed+0x78>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	e00c      	b.n	8011c8c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d103      	bne.n	8011c86 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1ef      	bne.n	8011c72 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011c92:	bf00      	nop
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	20011d88 	.word	0x20011d88
 8011ca0:	20011d80 	.word	0x20011d80
 8011ca4:	20011d84 	.word	0x20011d84

08011ca8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff fb6f 	bl	80113a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011cc8:	bf00      	nop
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011cd0:	b590      	push	{r4, r7, lr}
 8011cd2:	b08d      	sub	sp, #52	@ 0x34
 8011cd4:	af04      	add	r7, sp, #16
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d105      	bne.n	8011cec <tcp_input+0x1c>
 8011ce0:	4b9b      	ldr	r3, [pc, #620]	@ (8011f50 <tcp_input+0x280>)
 8011ce2:	2283      	movs	r2, #131	@ 0x83
 8011ce4:	499b      	ldr	r1, [pc, #620]	@ (8011f54 <tcp_input+0x284>)
 8011ce6:	489c      	ldr	r0, [pc, #624]	@ (8011f58 <tcp_input+0x288>)
 8011ce8:	f008 f834 	bl	8019d54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	4a9a      	ldr	r2, [pc, #616]	@ (8011f5c <tcp_input+0x28c>)
 8011cf2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	895b      	ldrh	r3, [r3, #10]
 8011cf8:	2b13      	cmp	r3, #19
 8011cfa:	f240 83d1 	bls.w	80124a0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011cfe:	4b98      	ldr	r3, [pc, #608]	@ (8011f60 <tcp_input+0x290>)
 8011d00:	695b      	ldr	r3, [r3, #20]
 8011d02:	4a97      	ldr	r2, [pc, #604]	@ (8011f60 <tcp_input+0x290>)
 8011d04:	6812      	ldr	r2, [r2, #0]
 8011d06:	4611      	mov	r1, r2
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f006 f9df 	bl	80180cc <ip4_addr_isbroadcast_u32>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f040 83c7 	bne.w	80124a4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011d16:	4b92      	ldr	r3, [pc, #584]	@ (8011f60 <tcp_input+0x290>)
 8011d18:	695b      	ldr	r3, [r3, #20]
 8011d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011d1e:	2be0      	cmp	r3, #224	@ 0xe0
 8011d20:	f000 83c0 	beq.w	80124a4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011d24:	4b8d      	ldr	r3, [pc, #564]	@ (8011f5c <tcp_input+0x28c>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fc fb1b 	bl	800e368 <lwip_htons>
 8011d32:	4603      	mov	r3, r0
 8011d34:	0b1b      	lsrs	r3, r3, #12
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011d3e:	7cbb      	ldrb	r3, [r7, #18]
 8011d40:	2b13      	cmp	r3, #19
 8011d42:	f240 83b1 	bls.w	80124a8 <tcp_input+0x7d8>
 8011d46:	7cbb      	ldrb	r3, [r7, #18]
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	891b      	ldrh	r3, [r3, #8]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	f200 83aa 	bhi.w	80124a8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011d54:	7cbb      	ldrb	r3, [r7, #18]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	3b14      	subs	r3, #20
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	4b81      	ldr	r3, [pc, #516]	@ (8011f64 <tcp_input+0x294>)
 8011d5e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011d60:	4b81      	ldr	r3, [pc, #516]	@ (8011f68 <tcp_input+0x298>)
 8011d62:	2200      	movs	r2, #0
 8011d64:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	895a      	ldrh	r2, [r3, #10]
 8011d6a:	7cbb      	ldrb	r3, [r7, #18]
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d309      	bcc.n	8011d86 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011d72:	4b7c      	ldr	r3, [pc, #496]	@ (8011f64 <tcp_input+0x294>)
 8011d74:	881a      	ldrh	r2, [r3, #0]
 8011d76:	4b7d      	ldr	r3, [pc, #500]	@ (8011f6c <tcp_input+0x29c>)
 8011d78:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011d7a:	7cbb      	ldrb	r3, [r7, #18]
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7fd fe18 	bl	800f9b4 <pbuf_remove_header>
 8011d84:	e04e      	b.n	8011e24 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d105      	bne.n	8011d9a <tcp_input+0xca>
 8011d8e:	4b70      	ldr	r3, [pc, #448]	@ (8011f50 <tcp_input+0x280>)
 8011d90:	22c2      	movs	r2, #194	@ 0xc2
 8011d92:	4977      	ldr	r1, [pc, #476]	@ (8011f70 <tcp_input+0x2a0>)
 8011d94:	4870      	ldr	r0, [pc, #448]	@ (8011f58 <tcp_input+0x288>)
 8011d96:	f007 ffdd 	bl	8019d54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011d9a:	2114      	movs	r1, #20
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f7fd fe09 	bl	800f9b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	895a      	ldrh	r2, [r3, #10]
 8011da6:	4b71      	ldr	r3, [pc, #452]	@ (8011f6c <tcp_input+0x29c>)
 8011da8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011daa:	4b6e      	ldr	r3, [pc, #440]	@ (8011f64 <tcp_input+0x294>)
 8011dac:	881a      	ldrh	r2, [r3, #0]
 8011dae:	4b6f      	ldr	r3, [pc, #444]	@ (8011f6c <tcp_input+0x29c>)
 8011db0:	881b      	ldrh	r3, [r3, #0]
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011db6:	4b6d      	ldr	r3, [pc, #436]	@ (8011f6c <tcp_input+0x29c>)
 8011db8:	881b      	ldrh	r3, [r3, #0]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7fd fdf9 	bl	800f9b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	895b      	ldrh	r3, [r3, #10]
 8011dc8:	8a3a      	ldrh	r2, [r7, #16]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	f200 836e 	bhi.w	80124ac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	4a64      	ldr	r2, [pc, #400]	@ (8011f68 <tcp_input+0x298>)
 8011dd8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	8a3a      	ldrh	r2, [r7, #16]
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fd fde6 	bl	800f9b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	891a      	ldrh	r2, [r3, #8]
 8011dec:	8a3b      	ldrh	r3, [r7, #16]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	895b      	ldrh	r3, [r3, #10]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d005      	beq.n	8011e0a <tcp_input+0x13a>
 8011dfe:	4b54      	ldr	r3, [pc, #336]	@ (8011f50 <tcp_input+0x280>)
 8011e00:	22df      	movs	r2, #223	@ 0xdf
 8011e02:	495c      	ldr	r1, [pc, #368]	@ (8011f74 <tcp_input+0x2a4>)
 8011e04:	4854      	ldr	r0, [pc, #336]	@ (8011f58 <tcp_input+0x288>)
 8011e06:	f007 ffa5 	bl	8019d54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	891a      	ldrh	r2, [r3, #8]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	891b      	ldrh	r3, [r3, #8]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d005      	beq.n	8011e24 <tcp_input+0x154>
 8011e18:	4b4d      	ldr	r3, [pc, #308]	@ (8011f50 <tcp_input+0x280>)
 8011e1a:	22e0      	movs	r2, #224	@ 0xe0
 8011e1c:	4956      	ldr	r1, [pc, #344]	@ (8011f78 <tcp_input+0x2a8>)
 8011e1e:	484e      	ldr	r0, [pc, #312]	@ (8011f58 <tcp_input+0x288>)
 8011e20:	f007 ff98 	bl	8019d54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011e24:	4b4d      	ldr	r3, [pc, #308]	@ (8011f5c <tcp_input+0x28c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8011f5c <tcp_input+0x28c>)
 8011e2e:	6814      	ldr	r4, [r2, #0]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fc fa99 	bl	800e368 <lwip_htons>
 8011e36:	4603      	mov	r3, r0
 8011e38:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011e3a:	4b48      	ldr	r3, [pc, #288]	@ (8011f5c <tcp_input+0x28c>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	885b      	ldrh	r3, [r3, #2]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	4a46      	ldr	r2, [pc, #280]	@ (8011f5c <tcp_input+0x28c>)
 8011e44:	6814      	ldr	r4, [r2, #0]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fc fa8e 	bl	800e368 <lwip_htons>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011e50:	4b42      	ldr	r3, [pc, #264]	@ (8011f5c <tcp_input+0x28c>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	4a41      	ldr	r2, [pc, #260]	@ (8011f5c <tcp_input+0x28c>)
 8011e58:	6814      	ldr	r4, [r2, #0]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fc fa99 	bl	800e392 <lwip_htonl>
 8011e60:	4603      	mov	r3, r0
 8011e62:	6063      	str	r3, [r4, #4]
 8011e64:	6863      	ldr	r3, [r4, #4]
 8011e66:	4a45      	ldr	r2, [pc, #276]	@ (8011f7c <tcp_input+0x2ac>)
 8011e68:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8011f5c <tcp_input+0x28c>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	4a3a      	ldr	r2, [pc, #232]	@ (8011f5c <tcp_input+0x28c>)
 8011e72:	6814      	ldr	r4, [r2, #0]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fc fa8c 	bl	800e392 <lwip_htonl>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	60a3      	str	r3, [r4, #8]
 8011e7e:	68a3      	ldr	r3, [r4, #8]
 8011e80:	4a3f      	ldr	r2, [pc, #252]	@ (8011f80 <tcp_input+0x2b0>)
 8011e82:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011e84:	4b35      	ldr	r3, [pc, #212]	@ (8011f5c <tcp_input+0x28c>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	89db      	ldrh	r3, [r3, #14]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	4a33      	ldr	r2, [pc, #204]	@ (8011f5c <tcp_input+0x28c>)
 8011e8e:	6814      	ldr	r4, [r2, #0]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fc fa69 	bl	800e368 <lwip_htons>
 8011e96:	4603      	mov	r3, r0
 8011e98:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011e9a:	4b30      	ldr	r3, [pc, #192]	@ (8011f5c <tcp_input+0x28c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fc fa60 	bl	800e368 <lwip_htons>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	4b34      	ldr	r3, [pc, #208]	@ (8011f84 <tcp_input+0x2b4>)
 8011eb4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	891a      	ldrh	r2, [r3, #8]
 8011eba:	4b33      	ldr	r3, [pc, #204]	@ (8011f88 <tcp_input+0x2b8>)
 8011ebc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011ebe:	4b31      	ldr	r3, [pc, #196]	@ (8011f84 <tcp_input+0x2b4>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	f003 0303 	and.w	r3, r3, #3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00c      	beq.n	8011ee4 <tcp_input+0x214>
    tcplen++;
 8011eca:	4b2f      	ldr	r3, [pc, #188]	@ (8011f88 <tcp_input+0x2b8>)
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8011f88 <tcp_input+0x2b8>)
 8011ed4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	891a      	ldrh	r2, [r3, #8]
 8011eda:	4b2b      	ldr	r3, [pc, #172]	@ (8011f88 <tcp_input+0x2b8>)
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	f200 82e6 	bhi.w	80124b0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ee8:	4b28      	ldr	r3, [pc, #160]	@ (8011f8c <tcp_input+0x2bc>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	61fb      	str	r3, [r7, #28]
 8011eee:	e09d      	b.n	801202c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	7d1b      	ldrb	r3, [r3, #20]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d105      	bne.n	8011f04 <tcp_input+0x234>
 8011ef8:	4b15      	ldr	r3, [pc, #84]	@ (8011f50 <tcp_input+0x280>)
 8011efa:	22fb      	movs	r2, #251	@ 0xfb
 8011efc:	4924      	ldr	r1, [pc, #144]	@ (8011f90 <tcp_input+0x2c0>)
 8011efe:	4816      	ldr	r0, [pc, #88]	@ (8011f58 <tcp_input+0x288>)
 8011f00:	f007 ff28 	bl	8019d54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	7d1b      	ldrb	r3, [r3, #20]
 8011f08:	2b0a      	cmp	r3, #10
 8011f0a:	d105      	bne.n	8011f18 <tcp_input+0x248>
 8011f0c:	4b10      	ldr	r3, [pc, #64]	@ (8011f50 <tcp_input+0x280>)
 8011f0e:	22fc      	movs	r2, #252	@ 0xfc
 8011f10:	4920      	ldr	r1, [pc, #128]	@ (8011f94 <tcp_input+0x2c4>)
 8011f12:	4811      	ldr	r0, [pc, #68]	@ (8011f58 <tcp_input+0x288>)
 8011f14:	f007 ff1e 	bl	8019d54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011f18:	69fb      	ldr	r3, [r7, #28]
 8011f1a:	7d1b      	ldrb	r3, [r3, #20]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d105      	bne.n	8011f2c <tcp_input+0x25c>
 8011f20:	4b0b      	ldr	r3, [pc, #44]	@ (8011f50 <tcp_input+0x280>)
 8011f22:	22fd      	movs	r2, #253	@ 0xfd
 8011f24:	491c      	ldr	r1, [pc, #112]	@ (8011f98 <tcp_input+0x2c8>)
 8011f26:	480c      	ldr	r0, [pc, #48]	@ (8011f58 <tcp_input+0x288>)
 8011f28:	f007 ff14 	bl	8019d54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	7a1b      	ldrb	r3, [r3, #8]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d033      	beq.n	8011f9c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	7a1a      	ldrb	r2, [r3, #8]
 8011f38:	4b09      	ldr	r3, [pc, #36]	@ (8011f60 <tcp_input+0x290>)
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f40:	3301      	adds	r3, #1
 8011f42:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d029      	beq.n	8011f9c <tcp_input+0x2cc>
      prev = pcb;
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	61bb      	str	r3, [r7, #24]
      continue;
 8011f4c:	e06b      	b.n	8012026 <tcp_input+0x356>
 8011f4e:	bf00      	nop
 8011f50:	0801e124 	.word	0x0801e124
 8011f54:	0801e158 	.word	0x0801e158
 8011f58:	0801e170 	.word	0x0801e170
 8011f5c:	20011da4 	.word	0x20011da4
 8011f60:	2000c468 	.word	0x2000c468
 8011f64:	20011da8 	.word	0x20011da8
 8011f68:	20011dac 	.word	0x20011dac
 8011f6c:	20011daa 	.word	0x20011daa
 8011f70:	0801e198 	.word	0x0801e198
 8011f74:	0801e1a8 	.word	0x0801e1a8
 8011f78:	0801e1b4 	.word	0x0801e1b4
 8011f7c:	20011db4 	.word	0x20011db4
 8011f80:	20011db8 	.word	0x20011db8
 8011f84:	20011dc0 	.word	0x20011dc0
 8011f88:	20011dbe 	.word	0x20011dbe
 8011f8c:	20011d88 	.word	0x20011d88
 8011f90:	0801e1d4 	.word	0x0801e1d4
 8011f94:	0801e1fc 	.word	0x0801e1fc
 8011f98:	0801e228 	.word	0x0801e228
    }

    if (pcb->remote_port == tcphdr->src &&
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	8b1a      	ldrh	r2, [r3, #24]
 8011fa0:	4b72      	ldr	r3, [pc, #456]	@ (801216c <tcp_input+0x49c>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d13a      	bne.n	8012022 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	8ada      	ldrh	r2, [r3, #22]
 8011fb0:	4b6e      	ldr	r3, [pc, #440]	@ (801216c <tcp_input+0x49c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	885b      	ldrh	r3, [r3, #2]
 8011fb6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d132      	bne.n	8012022 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	685a      	ldr	r2, [r3, #4]
 8011fc0:	4b6b      	ldr	r3, [pc, #428]	@ (8012170 <tcp_input+0x4a0>)
 8011fc2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d12c      	bne.n	8012022 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	4b68      	ldr	r3, [pc, #416]	@ (8012170 <tcp_input+0x4a0>)
 8011fce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d126      	bne.n	8012022 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	69fa      	ldr	r2, [r7, #28]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d106      	bne.n	8011fec <tcp_input+0x31c>
 8011fde:	4b65      	ldr	r3, [pc, #404]	@ (8012174 <tcp_input+0x4a4>)
 8011fe0:	f240 120d 	movw	r2, #269	@ 0x10d
 8011fe4:	4964      	ldr	r1, [pc, #400]	@ (8012178 <tcp_input+0x4a8>)
 8011fe6:	4865      	ldr	r0, [pc, #404]	@ (801217c <tcp_input+0x4ac>)
 8011fe8:	f007 feb4 	bl	8019d54 <iprintf>
      if (prev != NULL) {
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00a      	beq.n	8012008 <tcp_input+0x338>
        prev->next = pcb->next;
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	68da      	ldr	r2, [r3, #12]
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011ffa:	4b61      	ldr	r3, [pc, #388]	@ (8012180 <tcp_input+0x4b0>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012002:	4a5f      	ldr	r2, [pc, #380]	@ (8012180 <tcp_input+0x4b0>)
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	69fa      	ldr	r2, [r7, #28]
 801200e:	429a      	cmp	r2, r3
 8012010:	d111      	bne.n	8012036 <tcp_input+0x366>
 8012012:	4b58      	ldr	r3, [pc, #352]	@ (8012174 <tcp_input+0x4a4>)
 8012014:	f240 1215 	movw	r2, #277	@ 0x115
 8012018:	495a      	ldr	r1, [pc, #360]	@ (8012184 <tcp_input+0x4b4>)
 801201a:	4858      	ldr	r0, [pc, #352]	@ (801217c <tcp_input+0x4ac>)
 801201c:	f007 fe9a 	bl	8019d54 <iprintf>
      break;
 8012020:	e009      	b.n	8012036 <tcp_input+0x366>
    }
    prev = pcb;
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	61fb      	str	r3, [r7, #28]
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	f47f af5e 	bne.w	8011ef0 <tcp_input+0x220>
 8012034:	e000      	b.n	8012038 <tcp_input+0x368>
      break;
 8012036:	bf00      	nop
  }

  if (pcb == NULL) {
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f040 80aa 	bne.w	8012194 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012040:	4b51      	ldr	r3, [pc, #324]	@ (8012188 <tcp_input+0x4b8>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	61fb      	str	r3, [r7, #28]
 8012046:	e03f      	b.n	80120c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	7d1b      	ldrb	r3, [r3, #20]
 801204c:	2b0a      	cmp	r3, #10
 801204e:	d006      	beq.n	801205e <tcp_input+0x38e>
 8012050:	4b48      	ldr	r3, [pc, #288]	@ (8012174 <tcp_input+0x4a4>)
 8012052:	f240 121f 	movw	r2, #287	@ 0x11f
 8012056:	494d      	ldr	r1, [pc, #308]	@ (801218c <tcp_input+0x4bc>)
 8012058:	4848      	ldr	r0, [pc, #288]	@ (801217c <tcp_input+0x4ac>)
 801205a:	f007 fe7b 	bl	8019d54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	7a1b      	ldrb	r3, [r3, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d009      	beq.n	801207a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	7a1a      	ldrb	r2, [r3, #8]
 801206a:	4b41      	ldr	r3, [pc, #260]	@ (8012170 <tcp_input+0x4a0>)
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012072:	3301      	adds	r3, #1
 8012074:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012076:	429a      	cmp	r2, r3
 8012078:	d122      	bne.n	80120c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	8b1a      	ldrh	r2, [r3, #24]
 801207e:	4b3b      	ldr	r3, [pc, #236]	@ (801216c <tcp_input+0x49c>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	881b      	ldrh	r3, [r3, #0]
 8012084:	b29b      	uxth	r3, r3
 8012086:	429a      	cmp	r2, r3
 8012088:	d11b      	bne.n	80120c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	8ada      	ldrh	r2, [r3, #22]
 801208e:	4b37      	ldr	r3, [pc, #220]	@ (801216c <tcp_input+0x49c>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	885b      	ldrh	r3, [r3, #2]
 8012094:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012096:	429a      	cmp	r2, r3
 8012098:	d113      	bne.n	80120c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	685a      	ldr	r2, [r3, #4]
 801209e:	4b34      	ldr	r3, [pc, #208]	@ (8012170 <tcp_input+0x4a0>)
 80120a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d10d      	bne.n	80120c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	4b31      	ldr	r3, [pc, #196]	@ (8012170 <tcp_input+0x4a0>)
 80120ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d107      	bne.n	80120c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80120b2:	69f8      	ldr	r0, [r7, #28]
 80120b4:	f000 fb56 	bl	8012764 <tcp_timewait_input>
        }
        pbuf_free(p);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7fd fd01 	bl	800fac0 <pbuf_free>
        return;
 80120be:	e1fd      	b.n	80124bc <tcp_input+0x7ec>
        continue;
 80120c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	61fb      	str	r3, [r7, #28]
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d1bc      	bne.n	8012048 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80120ce:	2300      	movs	r3, #0
 80120d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80120d2:	4b2f      	ldr	r3, [pc, #188]	@ (8012190 <tcp_input+0x4c0>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	617b      	str	r3, [r7, #20]
 80120d8:	e02a      	b.n	8012130 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	7a1b      	ldrb	r3, [r3, #8]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00c      	beq.n	80120fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	7a1a      	ldrb	r2, [r3, #8]
 80120e6:	4b22      	ldr	r3, [pc, #136]	@ (8012170 <tcp_input+0x4a0>)
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120ee:	3301      	adds	r3, #1
 80120f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d002      	beq.n	80120fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	61bb      	str	r3, [r7, #24]
        continue;
 80120fa:	e016      	b.n	801212a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	8ada      	ldrh	r2, [r3, #22]
 8012100:	4b1a      	ldr	r3, [pc, #104]	@ (801216c <tcp_input+0x49c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	885b      	ldrh	r3, [r3, #2]
 8012106:	b29b      	uxth	r3, r3
 8012108:	429a      	cmp	r2, r3
 801210a:	d10c      	bne.n	8012126 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	4b17      	ldr	r3, [pc, #92]	@ (8012170 <tcp_input+0x4a0>)
 8012112:	695b      	ldr	r3, [r3, #20]
 8012114:	429a      	cmp	r2, r3
 8012116:	d00f      	beq.n	8012138 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00d      	beq.n	801213a <tcp_input+0x46a>
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d009      	beq.n	801213a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	617b      	str	r3, [r7, #20]
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1d1      	bne.n	80120da <tcp_input+0x40a>
 8012136:	e000      	b.n	801213a <tcp_input+0x46a>
            break;
 8012138:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d029      	beq.n	8012194 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012140:	69bb      	ldr	r3, [r7, #24]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d00a      	beq.n	801215c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	68da      	ldr	r2, [r3, #12]
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801214e:	4b10      	ldr	r3, [pc, #64]	@ (8012190 <tcp_input+0x4c0>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012156:	4a0e      	ldr	r2, [pc, #56]	@ (8012190 <tcp_input+0x4c0>)
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801215c:	6978      	ldr	r0, [r7, #20]
 801215e:	f000 fa03 	bl	8012568 <tcp_listen_input>
      }
      pbuf_free(p);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7fd fcac 	bl	800fac0 <pbuf_free>
      return;
 8012168:	e1a8      	b.n	80124bc <tcp_input+0x7ec>
 801216a:	bf00      	nop
 801216c:	20011da4 	.word	0x20011da4
 8012170:	2000c468 	.word	0x2000c468
 8012174:	0801e124 	.word	0x0801e124
 8012178:	0801e250 	.word	0x0801e250
 801217c:	0801e170 	.word	0x0801e170
 8012180:	20011d88 	.word	0x20011d88
 8012184:	0801e27c 	.word	0x0801e27c
 8012188:	20011d8c 	.word	0x20011d8c
 801218c:	0801e2a8 	.word	0x0801e2a8
 8012190:	20011d84 	.word	0x20011d84
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 8158 	beq.w	801244c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801219c:	4b95      	ldr	r3, [pc, #596]	@ (80123f4 <tcp_input+0x724>)
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	891a      	ldrh	r2, [r3, #8]
 80121a6:	4b93      	ldr	r3, [pc, #588]	@ (80123f4 <tcp_input+0x724>)
 80121a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80121aa:	4a92      	ldr	r2, [pc, #584]	@ (80123f4 <tcp_input+0x724>)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80121b0:	4b91      	ldr	r3, [pc, #580]	@ (80123f8 <tcp_input+0x728>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4a8f      	ldr	r2, [pc, #572]	@ (80123f4 <tcp_input+0x724>)
 80121b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80121b8:	4b90      	ldr	r3, [pc, #576]	@ (80123fc <tcp_input+0x72c>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80121be:	4b90      	ldr	r3, [pc, #576]	@ (8012400 <tcp_input+0x730>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80121c4:	4b8f      	ldr	r3, [pc, #572]	@ (8012404 <tcp_input+0x734>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80121ca:	4b8f      	ldr	r3, [pc, #572]	@ (8012408 <tcp_input+0x738>)
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	f003 0308 	and.w	r3, r3, #8
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d006      	beq.n	80121e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	7b5b      	ldrb	r3, [r3, #13]
 80121da:	f043 0301 	orr.w	r3, r3, #1
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d017      	beq.n	801221c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80121ec:	69f8      	ldr	r0, [r7, #28]
 80121ee:	f7ff f85b 	bl	80112a8 <tcp_process_refused_data>
 80121f2:	4603      	mov	r3, r0
 80121f4:	f113 0f0d 	cmn.w	r3, #13
 80121f8:	d007      	beq.n	801220a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00c      	beq.n	801221c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012202:	4b82      	ldr	r3, [pc, #520]	@ (801240c <tcp_input+0x73c>)
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d008      	beq.n	801221c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801220e:	2b00      	cmp	r3, #0
 8012210:	f040 80e3 	bne.w	80123da <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012214:	69f8      	ldr	r0, [r7, #28]
 8012216:	f003 fdff 	bl	8015e18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801221a:	e0de      	b.n	80123da <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801221c:	4a7c      	ldr	r2, [pc, #496]	@ (8012410 <tcp_input+0x740>)
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012222:	69f8      	ldr	r0, [r7, #28]
 8012224:	f000 fb18 	bl	8012858 <tcp_process>
 8012228:	4603      	mov	r3, r0
 801222a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801222c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012230:	f113 0f0d 	cmn.w	r3, #13
 8012234:	f000 80d3 	beq.w	80123de <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012238:	4b71      	ldr	r3, [pc, #452]	@ (8012400 <tcp_input+0x730>)
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	f003 0308 	and.w	r3, r3, #8
 8012240:	2b00      	cmp	r3, #0
 8012242:	d015      	beq.n	8012270 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801224a:	2b00      	cmp	r3, #0
 801224c:	d008      	beq.n	8012260 <tcp_input+0x590>
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012254:	69fa      	ldr	r2, [r7, #28]
 8012256:	6912      	ldr	r2, [r2, #16]
 8012258:	f06f 010d 	mvn.w	r1, #13
 801225c:	4610      	mov	r0, r2
 801225e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012260:	69f9      	ldr	r1, [r7, #28]
 8012262:	486c      	ldr	r0, [pc, #432]	@ (8012414 <tcp_input+0x744>)
 8012264:	f7ff fbbc 	bl	80119e0 <tcp_pcb_remove>
        tcp_free(pcb);
 8012268:	69f8      	ldr	r0, [r7, #28]
 801226a:	f7fd fed5 	bl	8010018 <tcp_free>
 801226e:	e0da      	b.n	8012426 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012270:	2300      	movs	r3, #0
 8012272:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012274:	4b63      	ldr	r3, [pc, #396]	@ (8012404 <tcp_input+0x734>)
 8012276:	881b      	ldrh	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d01d      	beq.n	80122b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801227c:	4b61      	ldr	r3, [pc, #388]	@ (8012404 <tcp_input+0x734>)
 801227e:	881b      	ldrh	r3, [r3, #0]
 8012280:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00a      	beq.n	80122a2 <tcp_input+0x5d2>
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	6910      	ldr	r0, [r2, #16]
 8012296:	89fa      	ldrh	r2, [r7, #14]
 8012298:	69f9      	ldr	r1, [r7, #28]
 801229a:	4798      	blx	r3
 801229c:	4603      	mov	r3, r0
 801229e:	74fb      	strb	r3, [r7, #19]
 80122a0:	e001      	b.n	80122a6 <tcp_input+0x5d6>
 80122a2:	2300      	movs	r3, #0
 80122a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80122a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122aa:	f113 0f0d 	cmn.w	r3, #13
 80122ae:	f000 8098 	beq.w	80123e2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80122b2:	4b54      	ldr	r3, [pc, #336]	@ (8012404 <tcp_input+0x734>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80122b8:	69f8      	ldr	r0, [r7, #28]
 80122ba:	f000 f915 	bl	80124e8 <tcp_input_delayed_close>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f040 8090 	bne.w	80123e6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80122c6:	4b4d      	ldr	r3, [pc, #308]	@ (80123fc <tcp_input+0x72c>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d041      	beq.n	8012352 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d006      	beq.n	80122e4 <tcp_input+0x614>
 80122d6:	4b50      	ldr	r3, [pc, #320]	@ (8012418 <tcp_input+0x748>)
 80122d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80122dc:	494f      	ldr	r1, [pc, #316]	@ (801241c <tcp_input+0x74c>)
 80122de:	4850      	ldr	r0, [pc, #320]	@ (8012420 <tcp_input+0x750>)
 80122e0:	f007 fd38 	bl	8019d54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	8b5b      	ldrh	r3, [r3, #26]
 80122e8:	f003 0310 	and.w	r3, r3, #16
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d008      	beq.n	8012302 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80122f0:	4b42      	ldr	r3, [pc, #264]	@ (80123fc <tcp_input+0x72c>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fd fbe3 	bl	800fac0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80122fa:	69f8      	ldr	r0, [r7, #28]
 80122fc:	f7fe f9d0 	bl	80106a0 <tcp_abort>
            goto aborted;
 8012300:	e091      	b.n	8012426 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00c      	beq.n	8012326 <tcp_input+0x656>
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	6918      	ldr	r0, [r3, #16]
 8012316:	4b39      	ldr	r3, [pc, #228]	@ (80123fc <tcp_input+0x72c>)
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	2300      	movs	r3, #0
 801231c:	69f9      	ldr	r1, [r7, #28]
 801231e:	47a0      	blx	r4
 8012320:	4603      	mov	r3, r0
 8012322:	74fb      	strb	r3, [r7, #19]
 8012324:	e008      	b.n	8012338 <tcp_input+0x668>
 8012326:	4b35      	ldr	r3, [pc, #212]	@ (80123fc <tcp_input+0x72c>)
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	2300      	movs	r3, #0
 801232c:	69f9      	ldr	r1, [r7, #28]
 801232e:	2000      	movs	r0, #0
 8012330:	f7ff f890 	bl	8011454 <tcp_recv_null>
 8012334:	4603      	mov	r3, r0
 8012336:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801233c:	f113 0f0d 	cmn.w	r3, #13
 8012340:	d053      	beq.n	80123ea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801234a:	4b2c      	ldr	r3, [pc, #176]	@ (80123fc <tcp_input+0x72c>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012352:	4b2b      	ldr	r3, [pc, #172]	@ (8012400 <tcp_input+0x730>)
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	f003 0320 	and.w	r3, r3, #32
 801235a:	2b00      	cmp	r3, #0
 801235c:	d030      	beq.n	80123c0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012362:	2b00      	cmp	r3, #0
 8012364:	d009      	beq.n	801237a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801236a:	7b5a      	ldrb	r2, [r3, #13]
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012370:	f042 0220 	orr.w	r2, r2, #32
 8012374:	b2d2      	uxtb	r2, r2
 8012376:	735a      	strb	r2, [r3, #13]
 8012378:	e022      	b.n	80123c0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801237e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012382:	d005      	beq.n	8012390 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012388:	3301      	adds	r3, #1
 801238a:	b29a      	uxth	r2, r3
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00b      	beq.n	80123b2 <tcp_input+0x6e2>
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	6918      	ldr	r0, [r3, #16]
 80123a4:	2300      	movs	r3, #0
 80123a6:	2200      	movs	r2, #0
 80123a8:	69f9      	ldr	r1, [r7, #28]
 80123aa:	47a0      	blx	r4
 80123ac:	4603      	mov	r3, r0
 80123ae:	74fb      	strb	r3, [r7, #19]
 80123b0:	e001      	b.n	80123b6 <tcp_input+0x6e6>
 80123b2:	2300      	movs	r3, #0
 80123b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80123b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123ba:	f113 0f0d 	cmn.w	r3, #13
 80123be:	d016      	beq.n	80123ee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80123c0:	4b13      	ldr	r3, [pc, #76]	@ (8012410 <tcp_input+0x740>)
 80123c2:	2200      	movs	r2, #0
 80123c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80123c6:	69f8      	ldr	r0, [r7, #28]
 80123c8:	f000 f88e 	bl	80124e8 <tcp_input_delayed_close>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d128      	bne.n	8012424 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80123d2:	69f8      	ldr	r0, [r7, #28]
 80123d4:	f002 ff1a 	bl	801520c <tcp_output>
 80123d8:	e025      	b.n	8012426 <tcp_input+0x756>
        goto aborted;
 80123da:	bf00      	nop
 80123dc:	e023      	b.n	8012426 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80123de:	bf00      	nop
 80123e0:	e021      	b.n	8012426 <tcp_input+0x756>
              goto aborted;
 80123e2:	bf00      	nop
 80123e4:	e01f      	b.n	8012426 <tcp_input+0x756>
          goto aborted;
 80123e6:	bf00      	nop
 80123e8:	e01d      	b.n	8012426 <tcp_input+0x756>
            goto aborted;
 80123ea:	bf00      	nop
 80123ec:	e01b      	b.n	8012426 <tcp_input+0x756>
              goto aborted;
 80123ee:	bf00      	nop
 80123f0:	e019      	b.n	8012426 <tcp_input+0x756>
 80123f2:	bf00      	nop
 80123f4:	20011d94 	.word	0x20011d94
 80123f8:	20011da4 	.word	0x20011da4
 80123fc:	20011dc4 	.word	0x20011dc4
 8012400:	20011dc1 	.word	0x20011dc1
 8012404:	20011dbc 	.word	0x20011dbc
 8012408:	20011dc0 	.word	0x20011dc0
 801240c:	20011dbe 	.word	0x20011dbe
 8012410:	20011dc8 	.word	0x20011dc8
 8012414:	20011d88 	.word	0x20011d88
 8012418:	0801e124 	.word	0x0801e124
 801241c:	0801e2d8 	.word	0x0801e2d8
 8012420:	0801e170 	.word	0x0801e170
          goto aborted;
 8012424:	bf00      	nop
    tcp_input_pcb = NULL;
 8012426:	4b27      	ldr	r3, [pc, #156]	@ (80124c4 <tcp_input+0x7f4>)
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801242c:	4b26      	ldr	r3, [pc, #152]	@ (80124c8 <tcp_input+0x7f8>)
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012432:	4b26      	ldr	r3, [pc, #152]	@ (80124cc <tcp_input+0x7fc>)
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d03f      	beq.n	80124ba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801243a:	4b24      	ldr	r3, [pc, #144]	@ (80124cc <tcp_input+0x7fc>)
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	4618      	mov	r0, r3
 8012440:	f7fd fb3e 	bl	800fac0 <pbuf_free>
      inseg.p = NULL;
 8012444:	4b21      	ldr	r3, [pc, #132]	@ (80124cc <tcp_input+0x7fc>)
 8012446:	2200      	movs	r2, #0
 8012448:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801244a:	e036      	b.n	80124ba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801244c:	4b20      	ldr	r3, [pc, #128]	@ (80124d0 <tcp_input+0x800>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	899b      	ldrh	r3, [r3, #12]
 8012452:	b29b      	uxth	r3, r3
 8012454:	4618      	mov	r0, r3
 8012456:	f7fb ff87 	bl	800e368 <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	b2db      	uxtb	r3, r3
 801245e:	f003 0304 	and.w	r3, r3, #4
 8012462:	2b00      	cmp	r3, #0
 8012464:	d118      	bne.n	8012498 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012466:	4b1b      	ldr	r3, [pc, #108]	@ (80124d4 <tcp_input+0x804>)
 8012468:	6819      	ldr	r1, [r3, #0]
 801246a:	4b1b      	ldr	r3, [pc, #108]	@ (80124d8 <tcp_input+0x808>)
 801246c:	881b      	ldrh	r3, [r3, #0]
 801246e:	461a      	mov	r2, r3
 8012470:	4b1a      	ldr	r3, [pc, #104]	@ (80124dc <tcp_input+0x80c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012476:	4b16      	ldr	r3, [pc, #88]	@ (80124d0 <tcp_input+0x800>)
 8012478:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801247a:	885b      	ldrh	r3, [r3, #2]
 801247c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801247e:	4a14      	ldr	r2, [pc, #80]	@ (80124d0 <tcp_input+0x800>)
 8012480:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012482:	8812      	ldrh	r2, [r2, #0]
 8012484:	b292      	uxth	r2, r2
 8012486:	9202      	str	r2, [sp, #8]
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	4b15      	ldr	r3, [pc, #84]	@ (80124e0 <tcp_input+0x810>)
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4b15      	ldr	r3, [pc, #84]	@ (80124e4 <tcp_input+0x814>)
 8012490:	4602      	mov	r2, r0
 8012492:	2000      	movs	r0, #0
 8012494:	f003 fc6e 	bl	8015d74 <tcp_rst>
    pbuf_free(p);
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7fd fb11 	bl	800fac0 <pbuf_free>
  return;
 801249e:	e00c      	b.n	80124ba <tcp_input+0x7ea>
    goto dropped;
 80124a0:	bf00      	nop
 80124a2:	e006      	b.n	80124b2 <tcp_input+0x7e2>
    goto dropped;
 80124a4:	bf00      	nop
 80124a6:	e004      	b.n	80124b2 <tcp_input+0x7e2>
    goto dropped;
 80124a8:	bf00      	nop
 80124aa:	e002      	b.n	80124b2 <tcp_input+0x7e2>
      goto dropped;
 80124ac:	bf00      	nop
 80124ae:	e000      	b.n	80124b2 <tcp_input+0x7e2>
      goto dropped;
 80124b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f7fd fb04 	bl	800fac0 <pbuf_free>
 80124b8:	e000      	b.n	80124bc <tcp_input+0x7ec>
  return;
 80124ba:	bf00      	nop
}
 80124bc:	3724      	adds	r7, #36	@ 0x24
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd90      	pop	{r4, r7, pc}
 80124c2:	bf00      	nop
 80124c4:	20011dc8 	.word	0x20011dc8
 80124c8:	20011dc4 	.word	0x20011dc4
 80124cc:	20011d94 	.word	0x20011d94
 80124d0:	20011da4 	.word	0x20011da4
 80124d4:	20011db8 	.word	0x20011db8
 80124d8:	20011dbe 	.word	0x20011dbe
 80124dc:	20011db4 	.word	0x20011db4
 80124e0:	2000c478 	.word	0x2000c478
 80124e4:	2000c47c 	.word	0x2000c47c

080124e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <tcp_input_delayed_close+0x1c>
 80124f6:	4b17      	ldr	r3, [pc, #92]	@ (8012554 <tcp_input_delayed_close+0x6c>)
 80124f8:	f240 225a 	movw	r2, #602	@ 0x25a
 80124fc:	4916      	ldr	r1, [pc, #88]	@ (8012558 <tcp_input_delayed_close+0x70>)
 80124fe:	4817      	ldr	r0, [pc, #92]	@ (801255c <tcp_input_delayed_close+0x74>)
 8012500:	f007 fc28 	bl	8019d54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012504:	4b16      	ldr	r3, [pc, #88]	@ (8012560 <tcp_input_delayed_close+0x78>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f003 0310 	and.w	r3, r3, #16
 801250c:	2b00      	cmp	r3, #0
 801250e:	d01c      	beq.n	801254a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	8b5b      	ldrh	r3, [r3, #26]
 8012514:	f003 0310 	and.w	r3, r3, #16
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10d      	bne.n	8012538 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012522:	2b00      	cmp	r3, #0
 8012524:	d008      	beq.n	8012538 <tcp_input_delayed_close+0x50>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	6912      	ldr	r2, [r2, #16]
 8012530:	f06f 010e 	mvn.w	r1, #14
 8012534:	4610      	mov	r0, r2
 8012536:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012538:	6879      	ldr	r1, [r7, #4]
 801253a:	480a      	ldr	r0, [pc, #40]	@ (8012564 <tcp_input_delayed_close+0x7c>)
 801253c:	f7ff fa50 	bl	80119e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7fd fd69 	bl	8010018 <tcp_free>
    return 1;
 8012546:	2301      	movs	r3, #1
 8012548:	e000      	b.n	801254c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801254a:	2300      	movs	r3, #0
}
 801254c:	4618      	mov	r0, r3
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}
 8012554:	0801e124 	.word	0x0801e124
 8012558:	0801e2f4 	.word	0x0801e2f4
 801255c:	0801e170 	.word	0x0801e170
 8012560:	20011dc1 	.word	0x20011dc1
 8012564:	20011d88 	.word	0x20011d88

08012568 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012568:	b590      	push	{r4, r7, lr}
 801256a:	b08b      	sub	sp, #44	@ 0x2c
 801256c:	af04      	add	r7, sp, #16
 801256e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012570:	4b6f      	ldr	r3, [pc, #444]	@ (8012730 <tcp_listen_input+0x1c8>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	f003 0304 	and.w	r3, r3, #4
 8012578:	2b00      	cmp	r3, #0
 801257a:	f040 80d2 	bne.w	8012722 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d106      	bne.n	8012592 <tcp_listen_input+0x2a>
 8012584:	4b6b      	ldr	r3, [pc, #428]	@ (8012734 <tcp_listen_input+0x1cc>)
 8012586:	f240 2281 	movw	r2, #641	@ 0x281
 801258a:	496b      	ldr	r1, [pc, #428]	@ (8012738 <tcp_listen_input+0x1d0>)
 801258c:	486b      	ldr	r0, [pc, #428]	@ (801273c <tcp_listen_input+0x1d4>)
 801258e:	f007 fbe1 	bl	8019d54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012592:	4b67      	ldr	r3, [pc, #412]	@ (8012730 <tcp_listen_input+0x1c8>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	f003 0310 	and.w	r3, r3, #16
 801259a:	2b00      	cmp	r3, #0
 801259c:	d019      	beq.n	80125d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801259e:	4b68      	ldr	r3, [pc, #416]	@ (8012740 <tcp_listen_input+0x1d8>)
 80125a0:	6819      	ldr	r1, [r3, #0]
 80125a2:	4b68      	ldr	r3, [pc, #416]	@ (8012744 <tcp_listen_input+0x1dc>)
 80125a4:	881b      	ldrh	r3, [r3, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	4b67      	ldr	r3, [pc, #412]	@ (8012748 <tcp_listen_input+0x1e0>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125ae:	4b67      	ldr	r3, [pc, #412]	@ (801274c <tcp_listen_input+0x1e4>)
 80125b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125b2:	885b      	ldrh	r3, [r3, #2]
 80125b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125b6:	4a65      	ldr	r2, [pc, #404]	@ (801274c <tcp_listen_input+0x1e4>)
 80125b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125ba:	8812      	ldrh	r2, [r2, #0]
 80125bc:	b292      	uxth	r2, r2
 80125be:	9202      	str	r2, [sp, #8]
 80125c0:	9301      	str	r3, [sp, #4]
 80125c2:	4b63      	ldr	r3, [pc, #396]	@ (8012750 <tcp_listen_input+0x1e8>)
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	4b63      	ldr	r3, [pc, #396]	@ (8012754 <tcp_listen_input+0x1ec>)
 80125c8:	4602      	mov	r2, r0
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f003 fbd2 	bl	8015d74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80125d0:	e0a9      	b.n	8012726 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80125d2:	4b57      	ldr	r3, [pc, #348]	@ (8012730 <tcp_listen_input+0x1c8>)
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f003 0302 	and.w	r3, r3, #2
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f000 80a3 	beq.w	8012726 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	7d5b      	ldrb	r3, [r3, #21]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff f859 	bl	801169c <tcp_alloc>
 80125ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d111      	bne.n	8012616 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d00a      	beq.n	8012610 <tcp_listen_input+0xa8>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	699b      	ldr	r3, [r3, #24]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	6910      	ldr	r0, [r2, #16]
 8012602:	f04f 32ff 	mov.w	r2, #4294967295
 8012606:	2100      	movs	r1, #0
 8012608:	4798      	blx	r3
 801260a:	4603      	mov	r3, r0
 801260c:	73bb      	strb	r3, [r7, #14]
      return;
 801260e:	e08b      	b.n	8012728 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012610:	23f0      	movs	r3, #240	@ 0xf0
 8012612:	73bb      	strb	r3, [r7, #14]
      return;
 8012614:	e088      	b.n	8012728 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012616:	4b50      	ldr	r3, [pc, #320]	@ (8012758 <tcp_listen_input+0x1f0>)
 8012618:	695a      	ldr	r2, [r3, #20]
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801261e:	4b4e      	ldr	r3, [pc, #312]	@ (8012758 <tcp_listen_input+0x1f0>)
 8012620:	691a      	ldr	r2, [r3, #16]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8ada      	ldrh	r2, [r3, #22]
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801262e:	4b47      	ldr	r3, [pc, #284]	@ (801274c <tcp_listen_input+0x1e4>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	b29a      	uxth	r2, r3
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2203      	movs	r2, #3
 801263e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012640:	4b41      	ldr	r3, [pc, #260]	@ (8012748 <tcp_listen_input+0x1e0>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	1c5a      	adds	r2, r3, #1
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012652:	6978      	ldr	r0, [r7, #20]
 8012654:	f7ff fa58 	bl	8011b08 <tcp_next_iss>
 8012658:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	693a      	ldr	r2, [r7, #16]
 801265e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	693a      	ldr	r2, [r7, #16]
 8012664:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	693a      	ldr	r2, [r7, #16]
 801266a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	693a      	ldr	r2, [r7, #16]
 8012670:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012672:	4b35      	ldr	r3, [pc, #212]	@ (8012748 <tcp_listen_input+0x1e0>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	1e5a      	subs	r2, r3, #1
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	691a      	ldr	r2, [r3, #16]
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7a5b      	ldrb	r3, [r3, #9]
 801268e:	f003 030c 	and.w	r3, r3, #12
 8012692:	b2da      	uxtb	r2, r3
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	7a1a      	ldrb	r2, [r3, #8]
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80126a0:	4b2e      	ldr	r3, [pc, #184]	@ (801275c <tcp_listen_input+0x1f4>)
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	60da      	str	r2, [r3, #12]
 80126a8:	4a2c      	ldr	r2, [pc, #176]	@ (801275c <tcp_listen_input+0x1f4>)
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	6013      	str	r3, [r2, #0]
 80126ae:	f003 fd23 	bl	80160f8 <tcp_timer_needed>
 80126b2:	4b2b      	ldr	r3, [pc, #172]	@ (8012760 <tcp_listen_input+0x1f8>)
 80126b4:	2201      	movs	r2, #1
 80126b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80126b8:	6978      	ldr	r0, [r7, #20]
 80126ba:	f001 fd8b 	bl	80141d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80126be:	4b23      	ldr	r3, [pc, #140]	@ (801274c <tcp_listen_input+0x1e4>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	89db      	ldrh	r3, [r3, #14]
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	3304      	adds	r3, #4
 80126e0:	4618      	mov	r0, r3
 80126e2:	f005 fa5d 	bl	8017ba0 <ip4_route>
 80126e6:	4601      	mov	r1, r0
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	3304      	adds	r3, #4
 80126ec:	461a      	mov	r2, r3
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7ff fa30 	bl	8011b54 <tcp_eff_send_mss_netif>
 80126f4:	4603      	mov	r3, r0
 80126f6:	461a      	mov	r2, r3
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80126fc:	2112      	movs	r1, #18
 80126fe:	6978      	ldr	r0, [r7, #20]
 8012700:	f002 fc96 	bl	8015030 <tcp_enqueue_flags>
 8012704:	4603      	mov	r3, r0
 8012706:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d004      	beq.n	801271a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012710:	2100      	movs	r1, #0
 8012712:	6978      	ldr	r0, [r7, #20]
 8012714:	f7fd ff06 	bl	8010524 <tcp_abandon>
      return;
 8012718:	e006      	b.n	8012728 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801271a:	6978      	ldr	r0, [r7, #20]
 801271c:	f002 fd76 	bl	801520c <tcp_output>
  return;
 8012720:	e001      	b.n	8012726 <tcp_listen_input+0x1be>
    return;
 8012722:	bf00      	nop
 8012724:	e000      	b.n	8012728 <tcp_listen_input+0x1c0>
  return;
 8012726:	bf00      	nop
}
 8012728:	371c      	adds	r7, #28
 801272a:	46bd      	mov	sp, r7
 801272c:	bd90      	pop	{r4, r7, pc}
 801272e:	bf00      	nop
 8012730:	20011dc0 	.word	0x20011dc0
 8012734:	0801e124 	.word	0x0801e124
 8012738:	0801e31c 	.word	0x0801e31c
 801273c:	0801e170 	.word	0x0801e170
 8012740:	20011db8 	.word	0x20011db8
 8012744:	20011dbe 	.word	0x20011dbe
 8012748:	20011db4 	.word	0x20011db4
 801274c:	20011da4 	.word	0x20011da4
 8012750:	2000c478 	.word	0x2000c478
 8012754:	2000c47c 	.word	0x2000c47c
 8012758:	2000c468 	.word	0x2000c468
 801275c:	20011d88 	.word	0x20011d88
 8012760:	20011d90 	.word	0x20011d90

08012764 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af04      	add	r7, sp, #16
 801276a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801276c:	4b2f      	ldr	r3, [pc, #188]	@ (801282c <tcp_timewait_input+0xc8>)
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	f003 0304 	and.w	r3, r3, #4
 8012774:	2b00      	cmp	r3, #0
 8012776:	d153      	bne.n	8012820 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <tcp_timewait_input+0x28>
 801277e:	4b2c      	ldr	r3, [pc, #176]	@ (8012830 <tcp_timewait_input+0xcc>)
 8012780:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012784:	492b      	ldr	r1, [pc, #172]	@ (8012834 <tcp_timewait_input+0xd0>)
 8012786:	482c      	ldr	r0, [pc, #176]	@ (8012838 <tcp_timewait_input+0xd4>)
 8012788:	f007 fae4 	bl	8019d54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801278c:	4b27      	ldr	r3, [pc, #156]	@ (801282c <tcp_timewait_input+0xc8>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f003 0302 	and.w	r3, r3, #2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d02a      	beq.n	80127ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012798:	4b28      	ldr	r3, [pc, #160]	@ (801283c <tcp_timewait_input+0xd8>)
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127a0:	1ad3      	subs	r3, r2, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	db2d      	blt.n	8012802 <tcp_timewait_input+0x9e>
 80127a6:	4b25      	ldr	r3, [pc, #148]	@ (801283c <tcp_timewait_input+0xd8>)
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80127b2:	440b      	add	r3, r1
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	dc23      	bgt.n	8012802 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127ba:	4b21      	ldr	r3, [pc, #132]	@ (8012840 <tcp_timewait_input+0xdc>)
 80127bc:	6819      	ldr	r1, [r3, #0]
 80127be:	4b21      	ldr	r3, [pc, #132]	@ (8012844 <tcp_timewait_input+0xe0>)
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	461a      	mov	r2, r3
 80127c4:	4b1d      	ldr	r3, [pc, #116]	@ (801283c <tcp_timewait_input+0xd8>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127ca:	4b1f      	ldr	r3, [pc, #124]	@ (8012848 <tcp_timewait_input+0xe4>)
 80127cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127ce:	885b      	ldrh	r3, [r3, #2]
 80127d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127d2:	4a1d      	ldr	r2, [pc, #116]	@ (8012848 <tcp_timewait_input+0xe4>)
 80127d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127d6:	8812      	ldrh	r2, [r2, #0]
 80127d8:	b292      	uxth	r2, r2
 80127da:	9202      	str	r2, [sp, #8]
 80127dc:	9301      	str	r3, [sp, #4]
 80127de:	4b1b      	ldr	r3, [pc, #108]	@ (801284c <tcp_timewait_input+0xe8>)
 80127e0:	9300      	str	r3, [sp, #0]
 80127e2:	4b1b      	ldr	r3, [pc, #108]	@ (8012850 <tcp_timewait_input+0xec>)
 80127e4:	4602      	mov	r2, r0
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f003 fac4 	bl	8015d74 <tcp_rst>
      return;
 80127ec:	e01b      	b.n	8012826 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80127ee:	4b0f      	ldr	r3, [pc, #60]	@ (801282c <tcp_timewait_input+0xc8>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	f003 0301 	and.w	r3, r3, #1
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d003      	beq.n	8012802 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80127fa:	4b16      	ldr	r3, [pc, #88]	@ (8012854 <tcp_timewait_input+0xf0>)
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012802:	4b10      	ldr	r3, [pc, #64]	@ (8012844 <tcp_timewait_input+0xe0>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00c      	beq.n	8012824 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	8b5b      	ldrh	r3, [r3, #26]
 801280e:	f043 0302 	orr.w	r3, r3, #2
 8012812:	b29a      	uxth	r2, r3
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f002 fcf7 	bl	801520c <tcp_output>
  }
  return;
 801281e:	e001      	b.n	8012824 <tcp_timewait_input+0xc0>
    return;
 8012820:	bf00      	nop
 8012822:	e000      	b.n	8012826 <tcp_timewait_input+0xc2>
  return;
 8012824:	bf00      	nop
}
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	20011dc0 	.word	0x20011dc0
 8012830:	0801e124 	.word	0x0801e124
 8012834:	0801e33c 	.word	0x0801e33c
 8012838:	0801e170 	.word	0x0801e170
 801283c:	20011db4 	.word	0x20011db4
 8012840:	20011db8 	.word	0x20011db8
 8012844:	20011dbe 	.word	0x20011dbe
 8012848:	20011da4 	.word	0x20011da4
 801284c:	2000c478 	.word	0x2000c478
 8012850:	2000c47c 	.word	0x2000c47c
 8012854:	20011d7c 	.word	0x20011d7c

08012858 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012858:	b590      	push	{r4, r7, lr}
 801285a:	b08d      	sub	sp, #52	@ 0x34
 801285c:	af04      	add	r7, sp, #16
 801285e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012860:	2300      	movs	r3, #0
 8012862:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012864:	2300      	movs	r3, #0
 8012866:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <tcp_process+0x24>
 801286e:	4b9d      	ldr	r3, [pc, #628]	@ (8012ae4 <tcp_process+0x28c>)
 8012870:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012874:	499c      	ldr	r1, [pc, #624]	@ (8012ae8 <tcp_process+0x290>)
 8012876:	489d      	ldr	r0, [pc, #628]	@ (8012aec <tcp_process+0x294>)
 8012878:	f007 fa6c 	bl	8019d54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801287c:	4b9c      	ldr	r3, [pc, #624]	@ (8012af0 <tcp_process+0x298>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	f003 0304 	and.w	r3, r3, #4
 8012884:	2b00      	cmp	r3, #0
 8012886:	d04e      	beq.n	8012926 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	7d1b      	ldrb	r3, [r3, #20]
 801288c:	2b02      	cmp	r3, #2
 801288e:	d108      	bne.n	80128a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012894:	4b97      	ldr	r3, [pc, #604]	@ (8012af4 <tcp_process+0x29c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	429a      	cmp	r2, r3
 801289a:	d123      	bne.n	80128e4 <tcp_process+0x8c>
        acceptable = 1;
 801289c:	2301      	movs	r3, #1
 801289e:	76fb      	strb	r3, [r7, #27]
 80128a0:	e020      	b.n	80128e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128a6:	4b94      	ldr	r3, [pc, #592]	@ (8012af8 <tcp_process+0x2a0>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d102      	bne.n	80128b4 <tcp_process+0x5c>
        acceptable = 1;
 80128ae:	2301      	movs	r3, #1
 80128b0:	76fb      	strb	r3, [r7, #27]
 80128b2:	e017      	b.n	80128e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80128b4:	4b90      	ldr	r3, [pc, #576]	@ (8012af8 <tcp_process+0x2a0>)
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	db10      	blt.n	80128e4 <tcp_process+0x8c>
 80128c2:	4b8d      	ldr	r3, [pc, #564]	@ (8012af8 <tcp_process+0x2a0>)
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ca:	6879      	ldr	r1, [r7, #4]
 80128cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80128ce:	440b      	add	r3, r1
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	dc06      	bgt.n	80128e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	8b5b      	ldrh	r3, [r3, #26]
 80128da:	f043 0302 	orr.w	r3, r3, #2
 80128de:	b29a      	uxth	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80128e4:	7efb      	ldrb	r3, [r7, #27]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d01b      	beq.n	8012922 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	7d1b      	ldrb	r3, [r3, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <tcp_process+0xa8>
 80128f2:	4b7c      	ldr	r3, [pc, #496]	@ (8012ae4 <tcp_process+0x28c>)
 80128f4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80128f8:	4980      	ldr	r1, [pc, #512]	@ (8012afc <tcp_process+0x2a4>)
 80128fa:	487c      	ldr	r0, [pc, #496]	@ (8012aec <tcp_process+0x294>)
 80128fc:	f007 fa2a 	bl	8019d54 <iprintf>
      recv_flags |= TF_RESET;
 8012900:	4b7f      	ldr	r3, [pc, #508]	@ (8012b00 <tcp_process+0x2a8>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	f043 0308 	orr.w	r3, r3, #8
 8012908:	b2da      	uxtb	r2, r3
 801290a:	4b7d      	ldr	r3, [pc, #500]	@ (8012b00 <tcp_process+0x2a8>)
 801290c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	8b5b      	ldrh	r3, [r3, #26]
 8012912:	f023 0301 	bic.w	r3, r3, #1
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801291c:	f06f 030d 	mvn.w	r3, #13
 8012920:	e37a      	b.n	8013018 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012922:	2300      	movs	r3, #0
 8012924:	e378      	b.n	8013018 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012926:	4b72      	ldr	r3, [pc, #456]	@ (8012af0 <tcp_process+0x298>)
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	f003 0302 	and.w	r3, r3, #2
 801292e:	2b00      	cmp	r3, #0
 8012930:	d010      	beq.n	8012954 <tcp_process+0xfc>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	7d1b      	ldrb	r3, [r3, #20]
 8012936:	2b02      	cmp	r3, #2
 8012938:	d00c      	beq.n	8012954 <tcp_process+0xfc>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	7d1b      	ldrb	r3, [r3, #20]
 801293e:	2b03      	cmp	r3, #3
 8012940:	d008      	beq.n	8012954 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	8b5b      	ldrh	r3, [r3, #26]
 8012946:	f043 0302 	orr.w	r3, r3, #2
 801294a:	b29a      	uxth	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012950:	2300      	movs	r3, #0
 8012952:	e361      	b.n	8013018 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	8b5b      	ldrh	r3, [r3, #26]
 8012958:	f003 0310 	and.w	r3, r3, #16
 801295c:	2b00      	cmp	r3, #0
 801295e:	d103      	bne.n	8012968 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012960:	4b68      	ldr	r3, [pc, #416]	@ (8012b04 <tcp_process+0x2ac>)
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f001 fc2b 	bl	80141d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	7d1b      	ldrb	r3, [r3, #20]
 8012982:	3b02      	subs	r3, #2
 8012984:	2b07      	cmp	r3, #7
 8012986:	f200 8337 	bhi.w	8012ff8 <tcp_process+0x7a0>
 801298a:	a201      	add	r2, pc, #4	@ (adr r2, 8012990 <tcp_process+0x138>)
 801298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012990:	080129b1 	.word	0x080129b1
 8012994:	08012be1 	.word	0x08012be1
 8012998:	08012d59 	.word	0x08012d59
 801299c:	08012d83 	.word	0x08012d83
 80129a0:	08012ea7 	.word	0x08012ea7
 80129a4:	08012d59 	.word	0x08012d59
 80129a8:	08012f33 	.word	0x08012f33
 80129ac:	08012fc3 	.word	0x08012fc3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80129b0:	4b4f      	ldr	r3, [pc, #316]	@ (8012af0 <tcp_process+0x298>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	f003 0310 	and.w	r3, r3, #16
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f000 80e4 	beq.w	8012b86 <tcp_process+0x32e>
 80129be:	4b4c      	ldr	r3, [pc, #304]	@ (8012af0 <tcp_process+0x298>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	f003 0302 	and.w	r3, r3, #2
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	f000 80dd 	beq.w	8012b86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	4b48      	ldr	r3, [pc, #288]	@ (8012af4 <tcp_process+0x29c>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	f040 80d5 	bne.w	8012b86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80129dc:	4b46      	ldr	r3, [pc, #280]	@ (8012af8 <tcp_process+0x2a0>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	1c5a      	adds	r2, r3, #1
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80129ee:	4b41      	ldr	r3, [pc, #260]	@ (8012af4 <tcp_process+0x29c>)
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80129f6:	4b44      	ldr	r3, [pc, #272]	@ (8012b08 <tcp_process+0x2b0>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	89db      	ldrh	r3, [r3, #14]
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012a10:	4b39      	ldr	r3, [pc, #228]	@ (8012af8 <tcp_process+0x2a0>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	1e5a      	subs	r2, r3, #1
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2204      	movs	r2, #4
 8012a1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3304      	adds	r3, #4
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f005 f8b9 	bl	8017ba0 <ip4_route>
 8012a2e:	4601      	mov	r1, r0
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3304      	adds	r3, #4
 8012a34:	461a      	mov	r2, r3
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ff f88c 	bl	8011b54 <tcp_eff_send_mss_netif>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	461a      	mov	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a48:	009a      	lsls	r2, r3, #2
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012a54:	428b      	cmp	r3, r1
 8012a56:	bf38      	it	cc
 8012a58:	460b      	movcc	r3, r1
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d204      	bcs.n	8012a68 <tcp_process+0x210>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	e00d      	b.n	8012a84 <tcp_process+0x22c>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a6c:	005b      	lsls	r3, r3, #1
 8012a6e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d904      	bls.n	8012a80 <tcp_process+0x228>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	e001      	b.n	8012a84 <tcp_process+0x22c>
 8012a80:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d106      	bne.n	8012aa2 <tcp_process+0x24a>
 8012a94:	4b13      	ldr	r3, [pc, #76]	@ (8012ae4 <tcp_process+0x28c>)
 8012a96:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8012a9a:	491c      	ldr	r1, [pc, #112]	@ (8012b0c <tcp_process+0x2b4>)
 8012a9c:	4813      	ldr	r0, [pc, #76]	@ (8012aec <tcp_process+0x294>)
 8012a9e:	f007 f959 	bl	8019d54 <iprintf>
        --pcb->snd_queuelen;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ab6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d12a      	bne.n	8012b14 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ac2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <tcp_process+0x280>
 8012aca:	4b06      	ldr	r3, [pc, #24]	@ (8012ae4 <tcp_process+0x28c>)
 8012acc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012ad0:	490f      	ldr	r1, [pc, #60]	@ (8012b10 <tcp_process+0x2b8>)
 8012ad2:	4806      	ldr	r0, [pc, #24]	@ (8012aec <tcp_process+0x294>)
 8012ad4:	f007 f93e 	bl	8019d54 <iprintf>
          pcb->unsent = rseg->next;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012ae0:	e01c      	b.n	8012b1c <tcp_process+0x2c4>
 8012ae2:	bf00      	nop
 8012ae4:	0801e124 	.word	0x0801e124
 8012ae8:	0801e35c 	.word	0x0801e35c
 8012aec:	0801e170 	.word	0x0801e170
 8012af0:	20011dc0 	.word	0x20011dc0
 8012af4:	20011db8 	.word	0x20011db8
 8012af8:	20011db4 	.word	0x20011db4
 8012afc:	0801e378 	.word	0x0801e378
 8012b00:	20011dc1 	.word	0x20011dc1
 8012b04:	20011d7c 	.word	0x20011d7c
 8012b08:	20011da4 	.word	0x20011da4
 8012b0c:	0801e398 	.word	0x0801e398
 8012b10:	0801e3b0 	.word	0x0801e3b0
        } else {
          pcb->unacked = rseg->next;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8012b1c:	69f8      	ldr	r0, [r7, #28]
 8012b1e:	f7fe fc54 	bl	80113ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d104      	bne.n	8012b34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b30:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012b32:	e006      	b.n	8012b42 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00a      	beq.n	8012b62 <tcp_process+0x30a>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	6910      	ldr	r0, [r2, #16]
 8012b56:	2200      	movs	r2, #0
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	4798      	blx	r3
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	76bb      	strb	r3, [r7, #26]
 8012b60:	e001      	b.n	8012b66 <tcp_process+0x30e>
 8012b62:	2300      	movs	r3, #0
 8012b64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012b66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012b6a:	f113 0f0d 	cmn.w	r3, #13
 8012b6e:	d102      	bne.n	8012b76 <tcp_process+0x31e>
          return ERR_ABRT;
 8012b70:	f06f 030c 	mvn.w	r3, #12
 8012b74:	e250      	b.n	8013018 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	8b5b      	ldrh	r3, [r3, #26]
 8012b7a:	f043 0302 	orr.w	r3, r3, #2
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012b84:	e23a      	b.n	8012ffc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012b86:	4b98      	ldr	r3, [pc, #608]	@ (8012de8 <tcp_process+0x590>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	f003 0310 	and.w	r3, r3, #16
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f000 8234 	beq.w	8012ffc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b94:	4b95      	ldr	r3, [pc, #596]	@ (8012dec <tcp_process+0x594>)
 8012b96:	6819      	ldr	r1, [r3, #0]
 8012b98:	4b95      	ldr	r3, [pc, #596]	@ (8012df0 <tcp_process+0x598>)
 8012b9a:	881b      	ldrh	r3, [r3, #0]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	4b95      	ldr	r3, [pc, #596]	@ (8012df4 <tcp_process+0x59c>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ba4:	4b94      	ldr	r3, [pc, #592]	@ (8012df8 <tcp_process+0x5a0>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ba8:	885b      	ldrh	r3, [r3, #2]
 8012baa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bac:	4a92      	ldr	r2, [pc, #584]	@ (8012df8 <tcp_process+0x5a0>)
 8012bae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bb0:	8812      	ldrh	r2, [r2, #0]
 8012bb2:	b292      	uxth	r2, r2
 8012bb4:	9202      	str	r2, [sp, #8]
 8012bb6:	9301      	str	r3, [sp, #4]
 8012bb8:	4b90      	ldr	r3, [pc, #576]	@ (8012dfc <tcp_process+0x5a4>)
 8012bba:	9300      	str	r3, [sp, #0]
 8012bbc:	4b90      	ldr	r3, [pc, #576]	@ (8012e00 <tcp_process+0x5a8>)
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f003 f8d7 	bl	8015d74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012bcc:	2b05      	cmp	r3, #5
 8012bce:	f200 8215 	bhi.w	8012ffc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f002 fea3 	bl	8015924 <tcp_rexmit_rto>
      break;
 8012bde:	e20d      	b.n	8012ffc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012be0:	4b81      	ldr	r3, [pc, #516]	@ (8012de8 <tcp_process+0x590>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	f003 0310 	and.w	r3, r3, #16
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f000 80a1 	beq.w	8012d30 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bee:	4b7f      	ldr	r3, [pc, #508]	@ (8012dec <tcp_process+0x594>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bf6:	1ad3      	subs	r3, r2, r3
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	db7e      	blt.n	8012cfc <tcp_process+0x4a4>
 8012bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8012dec <tcp_process+0x594>)
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dc77      	bgt.n	8012cfc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2204      	movs	r2, #4
 8012c10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012c1a:	23fa      	movs	r3, #250	@ 0xfa
 8012c1c:	76bb      	strb	r3, [r7, #26]
 8012c1e:	e01d      	b.n	8012c5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c24:	699b      	ldr	r3, [r3, #24]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d106      	bne.n	8012c38 <tcp_process+0x3e0>
 8012c2a:	4b76      	ldr	r3, [pc, #472]	@ (8012e04 <tcp_process+0x5ac>)
 8012c2c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012c30:	4975      	ldr	r1, [pc, #468]	@ (8012e08 <tcp_process+0x5b0>)
 8012c32:	4876      	ldr	r0, [pc, #472]	@ (8012e0c <tcp_process+0x5b4>)
 8012c34:	f007 f88e 	bl	8019d54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c3c:	699b      	ldr	r3, [r3, #24]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d00a      	beq.n	8012c58 <tcp_process+0x400>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	6910      	ldr	r0, [r2, #16]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	4798      	blx	r3
 8012c52:	4603      	mov	r3, r0
 8012c54:	76bb      	strb	r3, [r7, #26]
 8012c56:	e001      	b.n	8012c5c <tcp_process+0x404>
 8012c58:	23f0      	movs	r3, #240	@ 0xf0
 8012c5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012c5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d00a      	beq.n	8012c7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012c64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012c68:	f113 0f0d 	cmn.w	r3, #13
 8012c6c:	d002      	beq.n	8012c74 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7fd fd16 	bl	80106a0 <tcp_abort>
            }
            return ERR_ABRT;
 8012c74:	f06f 030c 	mvn.w	r3, #12
 8012c78:	e1ce      	b.n	8013018 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 fae0 	bl	8013240 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012c80:	4b63      	ldr	r3, [pc, #396]	@ (8012e10 <tcp_process+0x5b8>)
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d005      	beq.n	8012c94 <tcp_process+0x43c>
            recv_acked--;
 8012c88:	4b61      	ldr	r3, [pc, #388]	@ (8012e10 <tcp_process+0x5b8>)
 8012c8a:	881b      	ldrh	r3, [r3, #0]
 8012c8c:	3b01      	subs	r3, #1
 8012c8e:	b29a      	uxth	r2, r3
 8012c90:	4b5f      	ldr	r3, [pc, #380]	@ (8012e10 <tcp_process+0x5b8>)
 8012c92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c98:	009a      	lsls	r2, r3, #2
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012ca4:	428b      	cmp	r3, r1
 8012ca6:	bf38      	it	cc
 8012ca8:	460b      	movcc	r3, r1
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d204      	bcs.n	8012cb8 <tcp_process+0x460>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	e00d      	b.n	8012cd4 <tcp_process+0x47c>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d904      	bls.n	8012cd0 <tcp_process+0x478>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012cca:	005b      	lsls	r3, r3, #1
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	e001      	b.n	8012cd4 <tcp_process+0x47c>
 8012cd0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012cda:	4b4e      	ldr	r3, [pc, #312]	@ (8012e14 <tcp_process+0x5bc>)
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	f003 0320 	and.w	r3, r3, #32
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d037      	beq.n	8012d56 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	8b5b      	ldrh	r3, [r3, #26]
 8012cea:	f043 0302 	orr.w	r3, r3, #2
 8012cee:	b29a      	uxth	r2, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2207      	movs	r2, #7
 8012cf8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012cfa:	e02c      	b.n	8012d56 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8012dec <tcp_process+0x594>)
 8012cfe:	6819      	ldr	r1, [r3, #0]
 8012d00:	4b3b      	ldr	r3, [pc, #236]	@ (8012df0 <tcp_process+0x598>)
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	461a      	mov	r2, r3
 8012d06:	4b3b      	ldr	r3, [pc, #236]	@ (8012df4 <tcp_process+0x59c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8012df8 <tcp_process+0x5a0>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d10:	885b      	ldrh	r3, [r3, #2]
 8012d12:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d14:	4a38      	ldr	r2, [pc, #224]	@ (8012df8 <tcp_process+0x5a0>)
 8012d16:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d18:	8812      	ldrh	r2, [r2, #0]
 8012d1a:	b292      	uxth	r2, r2
 8012d1c:	9202      	str	r2, [sp, #8]
 8012d1e:	9301      	str	r3, [sp, #4]
 8012d20:	4b36      	ldr	r3, [pc, #216]	@ (8012dfc <tcp_process+0x5a4>)
 8012d22:	9300      	str	r3, [sp, #0]
 8012d24:	4b36      	ldr	r3, [pc, #216]	@ (8012e00 <tcp_process+0x5a8>)
 8012d26:	4602      	mov	r2, r0
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f003 f823 	bl	8015d74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012d2e:	e167      	b.n	8013000 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012d30:	4b2d      	ldr	r3, [pc, #180]	@ (8012de8 <tcp_process+0x590>)
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	f003 0302 	and.w	r3, r3, #2
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f000 8161 	beq.w	8013000 <tcp_process+0x7a8>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d42:	1e5a      	subs	r2, r3, #1
 8012d44:	4b2b      	ldr	r3, [pc, #172]	@ (8012df4 <tcp_process+0x59c>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	f040 8159 	bne.w	8013000 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f002 fe0a 	bl	8015968 <tcp_rexmit>
      break;
 8012d54:	e154      	b.n	8013000 <tcp_process+0x7a8>
 8012d56:	e153      	b.n	8013000 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 fa71 	bl	8013240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8012e14 <tcp_process+0x5bc>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	f003 0320 	and.w	r3, r3, #32
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f000 814c 	beq.w	8013004 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	8b5b      	ldrh	r3, [r3, #26]
 8012d70:	f043 0302 	orr.w	r3, r3, #2
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d80:	e140      	b.n	8013004 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f000 fa5c 	bl	8013240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012d88:	4b22      	ldr	r3, [pc, #136]	@ (8012e14 <tcp_process+0x5bc>)
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	f003 0320 	and.w	r3, r3, #32
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d071      	beq.n	8012e78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012d94:	4b14      	ldr	r3, [pc, #80]	@ (8012de8 <tcp_process+0x590>)
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	f003 0310 	and.w	r3, r3, #16
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d060      	beq.n	8012e62 <tcp_process+0x60a>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012da4:	4b11      	ldr	r3, [pc, #68]	@ (8012dec <tcp_process+0x594>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d15a      	bne.n	8012e62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d156      	bne.n	8012e62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	8b5b      	ldrh	r3, [r3, #26]
 8012db8:	f043 0302 	orr.w	r3, r3, #2
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7fe fdbc 	bl	8011940 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012dc8:	4b13      	ldr	r3, [pc, #76]	@ (8012e18 <tcp_process+0x5c0>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d105      	bne.n	8012dde <tcp_process+0x586>
 8012dd2:	4b11      	ldr	r3, [pc, #68]	@ (8012e18 <tcp_process+0x5c0>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8012e18 <tcp_process+0x5c0>)
 8012dda:	6013      	str	r3, [r2, #0]
 8012ddc:	e02e      	b.n	8012e3c <tcp_process+0x5e4>
 8012dde:	4b0e      	ldr	r3, [pc, #56]	@ (8012e18 <tcp_process+0x5c0>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	617b      	str	r3, [r7, #20]
 8012de4:	e027      	b.n	8012e36 <tcp_process+0x5de>
 8012de6:	bf00      	nop
 8012de8:	20011dc0 	.word	0x20011dc0
 8012dec:	20011db8 	.word	0x20011db8
 8012df0:	20011dbe 	.word	0x20011dbe
 8012df4:	20011db4 	.word	0x20011db4
 8012df8:	20011da4 	.word	0x20011da4
 8012dfc:	2000c478 	.word	0x2000c478
 8012e00:	2000c47c 	.word	0x2000c47c
 8012e04:	0801e124 	.word	0x0801e124
 8012e08:	0801e3c4 	.word	0x0801e3c4
 8012e0c:	0801e170 	.word	0x0801e170
 8012e10:	20011dbc 	.word	0x20011dbc
 8012e14:	20011dc1 	.word	0x20011dc1
 8012e18:	20011d88 	.word	0x20011d88
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	68db      	ldr	r3, [r3, #12]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d104      	bne.n	8012e30 <tcp_process+0x5d8>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	68da      	ldr	r2, [r3, #12]
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	60da      	str	r2, [r3, #12]
 8012e2e:	e005      	b.n	8012e3c <tcp_process+0x5e4>
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d1ef      	bne.n	8012e1c <tcp_process+0x5c4>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	60da      	str	r2, [r3, #12]
 8012e42:	4b77      	ldr	r3, [pc, #476]	@ (8013020 <tcp_process+0x7c8>)
 8012e44:	2201      	movs	r2, #1
 8012e46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	220a      	movs	r2, #10
 8012e4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012e4e:	4b75      	ldr	r3, [pc, #468]	@ (8013024 <tcp_process+0x7cc>)
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	60da      	str	r2, [r3, #12]
 8012e56:	4a73      	ldr	r2, [pc, #460]	@ (8013024 <tcp_process+0x7cc>)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	f003 f94c 	bl	80160f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012e60:	e0d2      	b.n	8013008 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	8b5b      	ldrh	r3, [r3, #26]
 8012e66:	f043 0302 	orr.w	r3, r3, #2
 8012e6a:	b29a      	uxth	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2208      	movs	r2, #8
 8012e74:	751a      	strb	r2, [r3, #20]
      break;
 8012e76:	e0c7      	b.n	8013008 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e78:	4b6b      	ldr	r3, [pc, #428]	@ (8013028 <tcp_process+0x7d0>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f003 0310 	and.w	r3, r3, #16
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 80c1 	beq.w	8013008 <tcp_process+0x7b0>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e8a:	4b68      	ldr	r3, [pc, #416]	@ (801302c <tcp_process+0x7d4>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	f040 80ba 	bne.w	8013008 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f040 80b5 	bne.w	8013008 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2206      	movs	r2, #6
 8012ea2:	751a      	strb	r2, [r3, #20]
      break;
 8012ea4:	e0b0      	b.n	8013008 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 f9ca 	bl	8013240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012eac:	4b60      	ldr	r3, [pc, #384]	@ (8013030 <tcp_process+0x7d8>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 0320 	and.w	r3, r3, #32
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	f000 80a9 	beq.w	801300c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8b5b      	ldrh	r3, [r3, #26]
 8012ebe:	f043 0302 	orr.w	r3, r3, #2
 8012ec2:	b29a      	uxth	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7fe fd39 	bl	8011940 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012ece:	4b59      	ldr	r3, [pc, #356]	@ (8013034 <tcp_process+0x7dc>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d105      	bne.n	8012ee4 <tcp_process+0x68c>
 8012ed8:	4b56      	ldr	r3, [pc, #344]	@ (8013034 <tcp_process+0x7dc>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	4a55      	ldr	r2, [pc, #340]	@ (8013034 <tcp_process+0x7dc>)
 8012ee0:	6013      	str	r3, [r2, #0]
 8012ee2:	e013      	b.n	8012f0c <tcp_process+0x6b4>
 8012ee4:	4b53      	ldr	r3, [pc, #332]	@ (8013034 <tcp_process+0x7dc>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	613b      	str	r3, [r7, #16]
 8012eea:	e00c      	b.n	8012f06 <tcp_process+0x6ae>
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d104      	bne.n	8012f00 <tcp_process+0x6a8>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	68da      	ldr	r2, [r3, #12]
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	60da      	str	r2, [r3, #12]
 8012efe:	e005      	b.n	8012f0c <tcp_process+0x6b4>
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	613b      	str	r3, [r7, #16]
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1ef      	bne.n	8012eec <tcp_process+0x694>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	60da      	str	r2, [r3, #12]
 8012f12:	4b43      	ldr	r3, [pc, #268]	@ (8013020 <tcp_process+0x7c8>)
 8012f14:	2201      	movs	r2, #1
 8012f16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	220a      	movs	r2, #10
 8012f1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012f1e:	4b41      	ldr	r3, [pc, #260]	@ (8013024 <tcp_process+0x7cc>)
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	60da      	str	r2, [r3, #12]
 8012f26:	4a3f      	ldr	r2, [pc, #252]	@ (8013024 <tcp_process+0x7cc>)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6013      	str	r3, [r2, #0]
 8012f2c:	f003 f8e4 	bl	80160f8 <tcp_timer_needed>
      }
      break;
 8012f30:	e06c      	b.n	801300c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 f984 	bl	8013240 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012f38:	4b3b      	ldr	r3, [pc, #236]	@ (8013028 <tcp_process+0x7d0>)
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	f003 0310 	and.w	r3, r3, #16
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d065      	beq.n	8013010 <tcp_process+0x7b8>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012f48:	4b38      	ldr	r3, [pc, #224]	@ (801302c <tcp_process+0x7d4>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d15f      	bne.n	8013010 <tcp_process+0x7b8>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d15b      	bne.n	8013010 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7fe fcf1 	bl	8011940 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012f5e:	4b35      	ldr	r3, [pc, #212]	@ (8013034 <tcp_process+0x7dc>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d105      	bne.n	8012f74 <tcp_process+0x71c>
 8012f68:	4b32      	ldr	r3, [pc, #200]	@ (8013034 <tcp_process+0x7dc>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	4a31      	ldr	r2, [pc, #196]	@ (8013034 <tcp_process+0x7dc>)
 8012f70:	6013      	str	r3, [r2, #0]
 8012f72:	e013      	b.n	8012f9c <tcp_process+0x744>
 8012f74:	4b2f      	ldr	r3, [pc, #188]	@ (8013034 <tcp_process+0x7dc>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e00c      	b.n	8012f96 <tcp_process+0x73e>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d104      	bne.n	8012f90 <tcp_process+0x738>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	68da      	ldr	r2, [r3, #12]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	60da      	str	r2, [r3, #12]
 8012f8e:	e005      	b.n	8012f9c <tcp_process+0x744>
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	60fb      	str	r3, [r7, #12]
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d1ef      	bne.n	8012f7c <tcp_process+0x724>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	60da      	str	r2, [r3, #12]
 8012fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8013020 <tcp_process+0x7c8>)
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	220a      	movs	r2, #10
 8012fac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012fae:	4b1d      	ldr	r3, [pc, #116]	@ (8013024 <tcp_process+0x7cc>)
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	60da      	str	r2, [r3, #12]
 8012fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8013024 <tcp_process+0x7cc>)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	f003 f89c 	bl	80160f8 <tcp_timer_needed>
      }
      break;
 8012fc0:	e026      	b.n	8013010 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f93c 	bl	8013240 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012fc8:	4b17      	ldr	r3, [pc, #92]	@ (8013028 <tcp_process+0x7d0>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	f003 0310 	and.w	r3, r3, #16
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d01f      	beq.n	8013014 <tcp_process+0x7bc>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012fd8:	4b14      	ldr	r3, [pc, #80]	@ (801302c <tcp_process+0x7d4>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d119      	bne.n	8013014 <tcp_process+0x7bc>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d115      	bne.n	8013014 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012fe8:	4b11      	ldr	r3, [pc, #68]	@ (8013030 <tcp_process+0x7d8>)
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	f043 0310 	orr.w	r3, r3, #16
 8012ff0:	b2da      	uxtb	r2, r3
 8012ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8013030 <tcp_process+0x7d8>)
 8012ff4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012ff6:	e00d      	b.n	8013014 <tcp_process+0x7bc>
    default:
      break;
 8012ff8:	bf00      	nop
 8012ffa:	e00c      	b.n	8013016 <tcp_process+0x7be>
      break;
 8012ffc:	bf00      	nop
 8012ffe:	e00a      	b.n	8013016 <tcp_process+0x7be>
      break;
 8013000:	bf00      	nop
 8013002:	e008      	b.n	8013016 <tcp_process+0x7be>
      break;
 8013004:	bf00      	nop
 8013006:	e006      	b.n	8013016 <tcp_process+0x7be>
      break;
 8013008:	bf00      	nop
 801300a:	e004      	b.n	8013016 <tcp_process+0x7be>
      break;
 801300c:	bf00      	nop
 801300e:	e002      	b.n	8013016 <tcp_process+0x7be>
      break;
 8013010:	bf00      	nop
 8013012:	e000      	b.n	8013016 <tcp_process+0x7be>
      break;
 8013014:	bf00      	nop
  }
  return ERR_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3724      	adds	r7, #36	@ 0x24
 801301c:	46bd      	mov	sp, r7
 801301e:	bd90      	pop	{r4, r7, pc}
 8013020:	20011d90 	.word	0x20011d90
 8013024:	20011d8c 	.word	0x20011d8c
 8013028:	20011dc0 	.word	0x20011dc0
 801302c:	20011db8 	.word	0x20011db8
 8013030:	20011dc1 	.word	0x20011dc1
 8013034:	20011d88 	.word	0x20011d88

08013038 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013038:	b590      	push	{r4, r7, lr}
 801303a:	b085      	sub	sp, #20
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d106      	bne.n	8013056 <tcp_oos_insert_segment+0x1e>
 8013048:	4b3b      	ldr	r3, [pc, #236]	@ (8013138 <tcp_oos_insert_segment+0x100>)
 801304a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801304e:	493b      	ldr	r1, [pc, #236]	@ (801313c <tcp_oos_insert_segment+0x104>)
 8013050:	483b      	ldr	r0, [pc, #236]	@ (8013140 <tcp_oos_insert_segment+0x108>)
 8013052:	f006 fe7f 	bl	8019d54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	899b      	ldrh	r3, [r3, #12]
 801305c:	b29b      	uxth	r3, r3
 801305e:	4618      	mov	r0, r3
 8013060:	f7fb f982 	bl	800e368 <lwip_htons>
 8013064:	4603      	mov	r3, r0
 8013066:	b2db      	uxtb	r3, r3
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d028      	beq.n	80130c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013070:	6838      	ldr	r0, [r7, #0]
 8013072:	f7fe f995 	bl	80113a0 <tcp_segs_free>
    next = NULL;
 8013076:	2300      	movs	r3, #0
 8013078:	603b      	str	r3, [r7, #0]
 801307a:	e056      	b.n	801312a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	899b      	ldrh	r3, [r3, #12]
 8013082:	b29b      	uxth	r3, r3
 8013084:	4618      	mov	r0, r3
 8013086:	f7fb f96f 	bl	800e368 <lwip_htons>
 801308a:	4603      	mov	r3, r0
 801308c:	b2db      	uxtb	r3, r3
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00d      	beq.n	80130b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	899b      	ldrh	r3, [r3, #12]
 801309c:	b29c      	uxth	r4, r3
 801309e:	2001      	movs	r0, #1
 80130a0:	f7fb f962 	bl	800e368 <lwip_htons>
 80130a4:	4603      	mov	r3, r0
 80130a6:	461a      	mov	r2, r3
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	4322      	orrs	r2, r4
 80130ae:	b292      	uxth	r2, r2
 80130b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80130bc:	68f8      	ldr	r0, [r7, #12]
 80130be:	f7fe f984 	bl	80113ca <tcp_seg_free>
    while (next &&
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00e      	beq.n	80130e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	891b      	ldrh	r3, [r3, #8]
 80130cc:	461a      	mov	r2, r3
 80130ce:	4b1d      	ldr	r3, [pc, #116]	@ (8013144 <tcp_oos_insert_segment+0x10c>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	441a      	add	r2, r3
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	68db      	ldr	r3, [r3, #12]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	6839      	ldr	r1, [r7, #0]
 80130dc:	8909      	ldrh	r1, [r1, #8]
 80130de:	440b      	add	r3, r1
 80130e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	daca      	bge.n	801307c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d01e      	beq.n	801312a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	891b      	ldrh	r3, [r3, #8]
 80130f0:	461a      	mov	r2, r3
 80130f2:	4b14      	ldr	r3, [pc, #80]	@ (8013144 <tcp_oos_insert_segment+0x10c>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	441a      	add	r2, r3
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013100:	2b00      	cmp	r3, #0
 8013102:	dd12      	ble.n	801312a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	b29a      	uxth	r2, r3
 801310c:	4b0d      	ldr	r3, [pc, #52]	@ (8013144 <tcp_oos_insert_segment+0x10c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	b29b      	uxth	r3, r3
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	b29a      	uxth	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	891b      	ldrh	r3, [r3, #8]
 8013122:	4619      	mov	r1, r3
 8013124:	4610      	mov	r0, r2
 8013126:	f7fc fb45 	bl	800f7b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	683a      	ldr	r2, [r7, #0]
 801312e:	601a      	str	r2, [r3, #0]
}
 8013130:	bf00      	nop
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	bd90      	pop	{r4, r7, pc}
 8013138:	0801e124 	.word	0x0801e124
 801313c:	0801e3e4 	.word	0x0801e3e4
 8013140:	0801e170 	.word	0x0801e170
 8013144:	20011db4 	.word	0x20011db4

08013148 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013148:	b5b0      	push	{r4, r5, r7, lr}
 801314a:	b086      	sub	sp, #24
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
 8013154:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013156:	e03e      	b.n	80131d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	4618      	mov	r0, r3
 8013168:	f7fc fd38 	bl	800fbdc <pbuf_clen>
 801316c:	4603      	mov	r3, r0
 801316e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013176:	8a7a      	ldrh	r2, [r7, #18]
 8013178:	429a      	cmp	r2, r3
 801317a:	d906      	bls.n	801318a <tcp_free_acked_segments+0x42>
 801317c:	4b2a      	ldr	r3, [pc, #168]	@ (8013228 <tcp_free_acked_segments+0xe0>)
 801317e:	f240 4257 	movw	r2, #1111	@ 0x457
 8013182:	492a      	ldr	r1, [pc, #168]	@ (801322c <tcp_free_acked_segments+0xe4>)
 8013184:	482a      	ldr	r0, [pc, #168]	@ (8013230 <tcp_free_acked_segments+0xe8>)
 8013186:	f006 fde5 	bl	8019d54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013190:	8a7b      	ldrh	r3, [r7, #18]
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	b29a      	uxth	r2, r3
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	891a      	ldrh	r2, [r3, #8]
 80131a0:	4b24      	ldr	r3, [pc, #144]	@ (8013234 <tcp_free_acked_segments+0xec>)
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	4413      	add	r3, r2
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	4b22      	ldr	r3, [pc, #136]	@ (8013234 <tcp_free_acked_segments+0xec>)
 80131aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80131ac:	6978      	ldr	r0, [r7, #20]
 80131ae:	f7fe f90c 	bl	80113ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d00c      	beq.n	80131d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d109      	bne.n	80131d6 <tcp_free_acked_segments+0x8e>
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d106      	bne.n	80131d6 <tcp_free_acked_segments+0x8e>
 80131c8:	4b17      	ldr	r3, [pc, #92]	@ (8013228 <tcp_free_acked_segments+0xe0>)
 80131ca:	f240 4261 	movw	r2, #1121	@ 0x461
 80131ce:	491a      	ldr	r1, [pc, #104]	@ (8013238 <tcp_free_acked_segments+0xf0>)
 80131d0:	4817      	ldr	r0, [pc, #92]	@ (8013230 <tcp_free_acked_segments+0xe8>)
 80131d2:	f006 fdbf 	bl	8019d54 <iprintf>
  while (seg_list != NULL &&
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d020      	beq.n	801321e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	68db      	ldr	r3, [r3, #12]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fb f8d5 	bl	800e392 <lwip_htonl>
 80131e8:	4604      	mov	r4, r0
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	891b      	ldrh	r3, [r3, #8]
 80131ee:	461d      	mov	r5, r3
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fb f8b5 	bl	800e368 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	b2db      	uxtb	r3, r3
 8013202:	f003 0303 	and.w	r3, r3, #3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <tcp_free_acked_segments+0xc6>
 801320a:	2301      	movs	r3, #1
 801320c:	e000      	b.n	8013210 <tcp_free_acked_segments+0xc8>
 801320e:	2300      	movs	r3, #0
 8013210:	442b      	add	r3, r5
 8013212:	18e2      	adds	r2, r4, r3
 8013214:	4b09      	ldr	r3, [pc, #36]	@ (801323c <tcp_free_acked_segments+0xf4>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801321a:	2b00      	cmp	r3, #0
 801321c:	dd9c      	ble.n	8013158 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801321e:	68bb      	ldr	r3, [r7, #8]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3718      	adds	r7, #24
 8013224:	46bd      	mov	sp, r7
 8013226:	bdb0      	pop	{r4, r5, r7, pc}
 8013228:	0801e124 	.word	0x0801e124
 801322c:	0801e40c 	.word	0x0801e40c
 8013230:	0801e170 	.word	0x0801e170
 8013234:	20011dbc 	.word	0x20011dbc
 8013238:	0801e434 	.word	0x0801e434
 801323c:	20011db8 	.word	0x20011db8

08013240 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013240:	b5b0      	push	{r4, r5, r7, lr}
 8013242:	b094      	sub	sp, #80	@ 0x50
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d106      	bne.n	8013260 <tcp_receive+0x20>
 8013252:	4b91      	ldr	r3, [pc, #580]	@ (8013498 <tcp_receive+0x258>)
 8013254:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013258:	4990      	ldr	r1, [pc, #576]	@ (801349c <tcp_receive+0x25c>)
 801325a:	4891      	ldr	r0, [pc, #580]	@ (80134a0 <tcp_receive+0x260>)
 801325c:	f006 fd7a 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	7d1b      	ldrb	r3, [r3, #20]
 8013264:	2b03      	cmp	r3, #3
 8013266:	d806      	bhi.n	8013276 <tcp_receive+0x36>
 8013268:	4b8b      	ldr	r3, [pc, #556]	@ (8013498 <tcp_receive+0x258>)
 801326a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801326e:	498d      	ldr	r1, [pc, #564]	@ (80134a4 <tcp_receive+0x264>)
 8013270:	488b      	ldr	r0, [pc, #556]	@ (80134a0 <tcp_receive+0x260>)
 8013272:	f006 fd6f 	bl	8019d54 <iprintf>

  if (flags & TCP_ACK) {
 8013276:	4b8c      	ldr	r3, [pc, #560]	@ (80134a8 <tcp_receive+0x268>)
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	f003 0310 	and.w	r3, r3, #16
 801327e:	2b00      	cmp	r3, #0
 8013280:	f000 8264 	beq.w	801374c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801328a:	461a      	mov	r2, r3
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013290:	4413      	add	r3, r2
 8013292:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013298:	4b84      	ldr	r3, [pc, #528]	@ (80134ac <tcp_receive+0x26c>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	1ad3      	subs	r3, r2, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	db1b      	blt.n	80132da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80132a6:	4b81      	ldr	r3, [pc, #516]	@ (80134ac <tcp_receive+0x26c>)
 80132a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d106      	bne.n	80132bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80132b2:	4b7f      	ldr	r3, [pc, #508]	@ (80134b0 <tcp_receive+0x270>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	db0e      	blt.n	80132da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80132c0:	4b7b      	ldr	r3, [pc, #492]	@ (80134b0 <tcp_receive+0x270>)
 80132c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d125      	bne.n	8013314 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80132c8:	4b7a      	ldr	r3, [pc, #488]	@ (80134b4 <tcp_receive+0x274>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	89db      	ldrh	r3, [r3, #14]
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d91c      	bls.n	8013314 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80132da:	4b76      	ldr	r3, [pc, #472]	@ (80134b4 <tcp_receive+0x274>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	89db      	ldrh	r3, [r3, #14]
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d205      	bcs.n	8013304 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013304:	4b69      	ldr	r3, [pc, #420]	@ (80134ac <tcp_receive+0x26c>)
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801330c:	4b68      	ldr	r3, [pc, #416]	@ (80134b0 <tcp_receive+0x270>)
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013314:	4b66      	ldr	r3, [pc, #408]	@ (80134b0 <tcp_receive+0x270>)
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801331c:	1ad3      	subs	r3, r2, r3
 801331e:	2b00      	cmp	r3, #0
 8013320:	dc58      	bgt.n	80133d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013322:	4b65      	ldr	r3, [pc, #404]	@ (80134b8 <tcp_receive+0x278>)
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d14b      	bne.n	80133c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013334:	4413      	add	r3, r2
 8013336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013338:	429a      	cmp	r2, r3
 801333a:	d142      	bne.n	80133c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013342:	2b00      	cmp	r3, #0
 8013344:	db3d      	blt.n	80133c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801334a:	4b59      	ldr	r3, [pc, #356]	@ (80134b0 <tcp_receive+0x270>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	429a      	cmp	r2, r3
 8013350:	d137      	bne.n	80133c2 <tcp_receive+0x182>
              found_dupack = 1;
 8013352:	2301      	movs	r3, #1
 8013354:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801335c:	2bff      	cmp	r3, #255	@ 0xff
 801335e:	d007      	beq.n	8013370 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013366:	3301      	adds	r3, #1
 8013368:	b2da      	uxtb	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013376:	2b03      	cmp	r3, #3
 8013378:	d91b      	bls.n	80133b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013384:	4413      	add	r3, r2
 8013386:	b29a      	uxth	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801338e:	429a      	cmp	r2, r3
 8013390:	d30a      	bcc.n	80133a8 <tcp_receive+0x168>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801339c:	4413      	add	r3, r2
 801339e:	b29a      	uxth	r2, r3
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80133a6:	e004      	b.n	80133b2 <tcp_receive+0x172>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80133b8:	2b02      	cmp	r3, #2
 80133ba:	d902      	bls.n	80133c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f002 fb3f 	bl	8015a40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80133c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f040 8161 	bne.w	801368c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80133d2:	e15b      	b.n	801368c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80133d4:	4b36      	ldr	r3, [pc, #216]	@ (80134b0 <tcp_receive+0x270>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133dc:	1ad3      	subs	r3, r2, r3
 80133de:	3b01      	subs	r3, #1
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	f2c0 814e 	blt.w	8013682 <tcp_receive+0x442>
 80133e6:	4b32      	ldr	r3, [pc, #200]	@ (80134b0 <tcp_receive+0x270>)
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f300 8146 	bgt.w	8013682 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	8b5b      	ldrh	r3, [r3, #26]
 80133fa:	f003 0304 	and.w	r3, r3, #4
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d010      	beq.n	8013424 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	8b5b      	ldrh	r3, [r3, #26]
 8013406:	f023 0304 	bic.w	r3, r3, #4
 801340a:	b29a      	uxth	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2200      	movs	r2, #0
 8013428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013432:	10db      	asrs	r3, r3, #3
 8013434:	b21b      	sxth	r3, r3
 8013436:	b29a      	uxth	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801343e:	b29b      	uxth	r3, r3
 8013440:	4413      	add	r3, r2
 8013442:	b29b      	uxth	r3, r3
 8013444:	b21a      	sxth	r2, r3
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801344c:	4b18      	ldr	r3, [pc, #96]	@ (80134b0 <tcp_receive+0x270>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	b29a      	uxth	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013456:	b29b      	uxth	r3, r3
 8013458:	1ad3      	subs	r3, r2, r3
 801345a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013464:	4b12      	ldr	r3, [pc, #72]	@ (80134b0 <tcp_receive+0x270>)
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	7d1b      	ldrb	r3, [r3, #20]
 8013470:	2b03      	cmp	r3, #3
 8013472:	f240 8097 	bls.w	80135a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013482:	429a      	cmp	r2, r3
 8013484:	d245      	bcs.n	8013512 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	8b5b      	ldrh	r3, [r3, #26]
 801348a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801348e:	2b00      	cmp	r3, #0
 8013490:	d014      	beq.n	80134bc <tcp_receive+0x27c>
 8013492:	2301      	movs	r3, #1
 8013494:	e013      	b.n	80134be <tcp_receive+0x27e>
 8013496:	bf00      	nop
 8013498:	0801e124 	.word	0x0801e124
 801349c:	0801e454 	.word	0x0801e454
 80134a0:	0801e170 	.word	0x0801e170
 80134a4:	0801e470 	.word	0x0801e470
 80134a8:	20011dc0 	.word	0x20011dc0
 80134ac:	20011db4 	.word	0x20011db4
 80134b0:	20011db8 	.word	0x20011db8
 80134b4:	20011da4 	.word	0x20011da4
 80134b8:	20011dbe 	.word	0x20011dbe
 80134bc:	2302      	movs	r3, #2
 80134be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80134c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134cc:	fb12 f303 	smulbb	r3, r2, r3
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80134d4:	4293      	cmp	r3, r2
 80134d6:	bf28      	it	cs
 80134d8:	4613      	movcs	r3, r2
 80134da:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80134e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80134e4:	4413      	add	r3, r2
 80134e6:	b29a      	uxth	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d309      	bcc.n	8013506 <tcp_receive+0x2c6>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80134f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80134fa:	4413      	add	r3, r2
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013504:	e04e      	b.n	80135a4 <tcp_receive+0x364>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801350c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013510:	e048      	b.n	80135a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013518:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801351a:	4413      	add	r3, r2
 801351c:	b29a      	uxth	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013524:	429a      	cmp	r2, r3
 8013526:	d309      	bcc.n	801353c <tcp_receive+0x2fc>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801352e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013530:	4413      	add	r3, r2
 8013532:	b29a      	uxth	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801353a:	e004      	b.n	8013546 <tcp_receive+0x306>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013552:	429a      	cmp	r2, r3
 8013554:	d326      	bcc.n	80135a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	b29a      	uxth	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013576:	4413      	add	r3, r2
 8013578:	b29a      	uxth	r2, r3
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013580:	429a      	cmp	r2, r3
 8013582:	d30a      	bcc.n	801359a <tcp_receive+0x35a>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801358e:	4413      	add	r3, r2
 8013590:	b29a      	uxth	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013598:	e004      	b.n	80135a4 <tcp_receive+0x364>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80135a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135ac:	4a98      	ldr	r2, [pc, #608]	@ (8013810 <tcp_receive+0x5d0>)
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff fdca 	bl	8013148 <tcp_free_acked_segments>
 80135b4:	4602      	mov	r2, r0
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135c2:	4a94      	ldr	r2, [pc, #592]	@ (8013814 <tcp_receive+0x5d4>)
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff fdbf 	bl	8013148 <tcp_free_acked_segments>
 80135ca:	4602      	mov	r2, r0
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d104      	bne.n	80135e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80135de:	861a      	strh	r2, [r3, #48]	@ 0x30
 80135e0:	e002      	b.n	80135e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2200      	movs	r2, #0
 80135e6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2200      	movs	r2, #0
 80135ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d103      	bne.n	80135fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2200      	movs	r2, #0
 80135fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013604:	4b84      	ldr	r3, [pc, #528]	@ (8013818 <tcp_receive+0x5d8>)
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	4413      	add	r3, r2
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8b5b      	ldrh	r3, [r3, #26]
 8013616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801361a:	2b00      	cmp	r3, #0
 801361c:	d035      	beq.n	801368a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013622:	2b00      	cmp	r3, #0
 8013624:	d118      	bne.n	8013658 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00c      	beq.n	8013648 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	4618      	mov	r0, r3
 801363c:	f7fa fea9 	bl	800e392 <lwip_htonl>
 8013640:	4603      	mov	r3, r0
 8013642:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013644:	2b00      	cmp	r3, #0
 8013646:	dc20      	bgt.n	801368a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	8b5b      	ldrh	r3, [r3, #26]
 801364c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013650:	b29a      	uxth	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013656:	e018      	b.n	801368a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013660:	68db      	ldr	r3, [r3, #12]
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	4618      	mov	r0, r3
 8013666:	f7fa fe94 	bl	800e392 <lwip_htonl>
 801366a:	4603      	mov	r3, r0
 801366c:	1ae3      	subs	r3, r4, r3
 801366e:	2b00      	cmp	r3, #0
 8013670:	dc0b      	bgt.n	801368a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	8b5b      	ldrh	r3, [r3, #26]
 8013676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801367a:	b29a      	uxth	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013680:	e003      	b.n	801368a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f002 fbc8 	bl	8015e18 <tcp_send_empty_ack>
 8013688:	e000      	b.n	801368c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801368a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013690:	2b00      	cmp	r3, #0
 8013692:	d05b      	beq.n	801374c <tcp_receive+0x50c>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013698:	4b60      	ldr	r3, [pc, #384]	@ (801381c <tcp_receive+0x5dc>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	1ad3      	subs	r3, r2, r3
 801369e:	2b00      	cmp	r3, #0
 80136a0:	da54      	bge.n	801374c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80136a2:	4b5f      	ldr	r3, [pc, #380]	@ (8013820 <tcp_receive+0x5e0>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80136b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80136c0:	10db      	asrs	r3, r3, #3
 80136c2:	b21b      	sxth	r3, r3
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80136da:	4413      	add	r3, r2
 80136dc:	b29b      	uxth	r3, r3
 80136de:	b21a      	sxth	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80136e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	da05      	bge.n	80136f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80136ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80136f0:	425b      	negs	r3, r3
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80136f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013702:	109b      	asrs	r3, r3, #2
 8013704:	b21b      	sxth	r3, r3
 8013706:	b29b      	uxth	r3, r3
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	b29b      	uxth	r3, r3
 801370c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013716:	b29a      	uxth	r2, r3
 8013718:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801371c:	4413      	add	r3, r2
 801371e:	b29b      	uxth	r3, r3
 8013720:	b21a      	sxth	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801372c:	10db      	asrs	r3, r3, #3
 801372e:	b21b      	sxth	r3, r3
 8013730:	b29a      	uxth	r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013738:	b29b      	uxth	r3, r3
 801373a:	4413      	add	r3, r2
 801373c:	b29b      	uxth	r3, r3
 801373e:	b21a      	sxth	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2200      	movs	r2, #0
 801374a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801374c:	4b35      	ldr	r3, [pc, #212]	@ (8013824 <tcp_receive+0x5e4>)
 801374e:	881b      	ldrh	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	f000 84df 	beq.w	8014114 <tcp_receive+0xed4>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	7d1b      	ldrb	r3, [r3, #20]
 801375a:	2b06      	cmp	r3, #6
 801375c:	f200 84da 	bhi.w	8014114 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013764:	4b30      	ldr	r3, [pc, #192]	@ (8013828 <tcp_receive+0x5e8>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	1ad3      	subs	r3, r2, r3
 801376a:	3b01      	subs	r3, #1
 801376c:	2b00      	cmp	r3, #0
 801376e:	f2c0 808f 	blt.w	8013890 <tcp_receive+0x650>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013776:	4b2b      	ldr	r3, [pc, #172]	@ (8013824 <tcp_receive+0x5e4>)
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	4619      	mov	r1, r3
 801377c:	4b2a      	ldr	r3, [pc, #168]	@ (8013828 <tcp_receive+0x5e8>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	440b      	add	r3, r1
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	3301      	adds	r3, #1
 8013786:	2b00      	cmp	r3, #0
 8013788:	f300 8082 	bgt.w	8013890 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801378c:	4b27      	ldr	r3, [pc, #156]	@ (801382c <tcp_receive+0x5ec>)
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013796:	4b24      	ldr	r3, [pc, #144]	@ (8013828 <tcp_receive+0x5e8>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801379e:	4b23      	ldr	r3, [pc, #140]	@ (801382c <tcp_receive+0x5ec>)
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d106      	bne.n	80137b4 <tcp_receive+0x574>
 80137a6:	4b22      	ldr	r3, [pc, #136]	@ (8013830 <tcp_receive+0x5f0>)
 80137a8:	f240 5294 	movw	r2, #1428	@ 0x594
 80137ac:	4921      	ldr	r1, [pc, #132]	@ (8013834 <tcp_receive+0x5f4>)
 80137ae:	4822      	ldr	r0, [pc, #136]	@ (8013838 <tcp_receive+0x5f8>)
 80137b0:	f006 fad0 	bl	8019d54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80137b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d906      	bls.n	80137cc <tcp_receive+0x58c>
 80137be:	4b1c      	ldr	r3, [pc, #112]	@ (8013830 <tcp_receive+0x5f0>)
 80137c0:	f240 5295 	movw	r2, #1429	@ 0x595
 80137c4:	491d      	ldr	r1, [pc, #116]	@ (801383c <tcp_receive+0x5fc>)
 80137c6:	481c      	ldr	r0, [pc, #112]	@ (8013838 <tcp_receive+0x5f8>)
 80137c8:	f006 fac4 	bl	8019d54 <iprintf>
      off = (u16_t)off32;
 80137cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80137d2:	4b16      	ldr	r3, [pc, #88]	@ (801382c <tcp_receive+0x5ec>)
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	891b      	ldrh	r3, [r3, #8]
 80137d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80137dc:	429a      	cmp	r2, r3
 80137de:	d906      	bls.n	80137ee <tcp_receive+0x5ae>
 80137e0:	4b13      	ldr	r3, [pc, #76]	@ (8013830 <tcp_receive+0x5f0>)
 80137e2:	f240 5297 	movw	r2, #1431	@ 0x597
 80137e6:	4916      	ldr	r1, [pc, #88]	@ (8013840 <tcp_receive+0x600>)
 80137e8:	4813      	ldr	r0, [pc, #76]	@ (8013838 <tcp_receive+0x5f8>)
 80137ea:	f006 fab3 	bl	8019d54 <iprintf>
      inseg.len -= off;
 80137ee:	4b0f      	ldr	r3, [pc, #60]	@ (801382c <tcp_receive+0x5ec>)
 80137f0:	891a      	ldrh	r2, [r3, #8]
 80137f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80137f6:	1ad3      	subs	r3, r2, r3
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	4b0c      	ldr	r3, [pc, #48]	@ (801382c <tcp_receive+0x5ec>)
 80137fc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80137fe:	4b0b      	ldr	r3, [pc, #44]	@ (801382c <tcp_receive+0x5ec>)
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	891a      	ldrh	r2, [r3, #8]
 8013804:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013808:	1ad3      	subs	r3, r2, r3
 801380a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801380c:	e02a      	b.n	8013864 <tcp_receive+0x624>
 801380e:	bf00      	nop
 8013810:	0801e48c 	.word	0x0801e48c
 8013814:	0801e494 	.word	0x0801e494
 8013818:	20011dbc 	.word	0x20011dbc
 801381c:	20011db8 	.word	0x20011db8
 8013820:	20011d7c 	.word	0x20011d7c
 8013824:	20011dbe 	.word	0x20011dbe
 8013828:	20011db4 	.word	0x20011db4
 801382c:	20011d94 	.word	0x20011d94
 8013830:	0801e124 	.word	0x0801e124
 8013834:	0801e49c 	.word	0x0801e49c
 8013838:	0801e170 	.word	0x0801e170
 801383c:	0801e4ac 	.word	0x0801e4ac
 8013840:	0801e4bc 	.word	0x0801e4bc
        off -= p->len;
 8013844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013846:	895b      	ldrh	r3, [r3, #10]
 8013848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013854:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013856:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801385a:	2200      	movs	r2, #0
 801385c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801385e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013866:	895b      	ldrh	r3, [r3, #10]
 8013868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801386c:	429a      	cmp	r2, r3
 801386e:	d8e9      	bhi.n	8013844 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013874:	4619      	mov	r1, r3
 8013876:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013878:	f7fc f89c 	bl	800f9b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013880:	4a90      	ldr	r2, [pc, #576]	@ (8013ac4 <tcp_receive+0x884>)
 8013882:	6013      	str	r3, [r2, #0]
 8013884:	4b90      	ldr	r3, [pc, #576]	@ (8013ac8 <tcp_receive+0x888>)
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	4a8e      	ldr	r2, [pc, #568]	@ (8013ac4 <tcp_receive+0x884>)
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801388e:	e00d      	b.n	80138ac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013890:	4b8c      	ldr	r3, [pc, #560]	@ (8013ac4 <tcp_receive+0x884>)
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	2b00      	cmp	r3, #0
 801389c:	da06      	bge.n	80138ac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	8b5b      	ldrh	r3, [r3, #26]
 80138a2:	f043 0302 	orr.w	r3, r3, #2
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80138ac:	4b85      	ldr	r3, [pc, #532]	@ (8013ac4 <tcp_receive+0x884>)
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f2c0 8427 	blt.w	801410a <tcp_receive+0xeca>
 80138bc:	4b81      	ldr	r3, [pc, #516]	@ (8013ac4 <tcp_receive+0x884>)
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c4:	6879      	ldr	r1, [r7, #4]
 80138c6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80138c8:	440b      	add	r3, r1
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	3301      	adds	r3, #1
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f300 841b 	bgt.w	801410a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80138d8:	4b7a      	ldr	r3, [pc, #488]	@ (8013ac4 <tcp_receive+0x884>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	429a      	cmp	r2, r3
 80138de:	f040 8298 	bne.w	8013e12 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80138e2:	4b79      	ldr	r3, [pc, #484]	@ (8013ac8 <tcp_receive+0x888>)
 80138e4:	891c      	ldrh	r4, [r3, #8]
 80138e6:	4b78      	ldr	r3, [pc, #480]	@ (8013ac8 <tcp_receive+0x888>)
 80138e8:	68db      	ldr	r3, [r3, #12]
 80138ea:	899b      	ldrh	r3, [r3, #12]
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fa fd3a 	bl	800e368 <lwip_htons>
 80138f4:	4603      	mov	r3, r0
 80138f6:	b2db      	uxtb	r3, r3
 80138f8:	f003 0303 	and.w	r3, r3, #3
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d001      	beq.n	8013904 <tcp_receive+0x6c4>
 8013900:	2301      	movs	r3, #1
 8013902:	e000      	b.n	8013906 <tcp_receive+0x6c6>
 8013904:	2300      	movs	r3, #0
 8013906:	4423      	add	r3, r4
 8013908:	b29a      	uxth	r2, r3
 801390a:	4b70      	ldr	r3, [pc, #448]	@ (8013acc <tcp_receive+0x88c>)
 801390c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013912:	4b6e      	ldr	r3, [pc, #440]	@ (8013acc <tcp_receive+0x88c>)
 8013914:	881b      	ldrh	r3, [r3, #0]
 8013916:	429a      	cmp	r2, r3
 8013918:	d274      	bcs.n	8013a04 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801391a:	4b6b      	ldr	r3, [pc, #428]	@ (8013ac8 <tcp_receive+0x888>)
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	899b      	ldrh	r3, [r3, #12]
 8013920:	b29b      	uxth	r3, r3
 8013922:	4618      	mov	r0, r3
 8013924:	f7fa fd20 	bl	800e368 <lwip_htons>
 8013928:	4603      	mov	r3, r0
 801392a:	b2db      	uxtb	r3, r3
 801392c:	f003 0301 	and.w	r3, r3, #1
 8013930:	2b00      	cmp	r3, #0
 8013932:	d01e      	beq.n	8013972 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013934:	4b64      	ldr	r3, [pc, #400]	@ (8013ac8 <tcp_receive+0x888>)
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	899b      	ldrh	r3, [r3, #12]
 801393a:	b29b      	uxth	r3, r3
 801393c:	b21b      	sxth	r3, r3
 801393e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013942:	b21c      	sxth	r4, r3
 8013944:	4b60      	ldr	r3, [pc, #384]	@ (8013ac8 <tcp_receive+0x888>)
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	899b      	ldrh	r3, [r3, #12]
 801394a:	b29b      	uxth	r3, r3
 801394c:	4618      	mov	r0, r3
 801394e:	f7fa fd0b 	bl	800e368 <lwip_htons>
 8013952:	4603      	mov	r3, r0
 8013954:	b2db      	uxtb	r3, r3
 8013956:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801395a:	b29b      	uxth	r3, r3
 801395c:	4618      	mov	r0, r3
 801395e:	f7fa fd03 	bl	800e368 <lwip_htons>
 8013962:	4603      	mov	r3, r0
 8013964:	b21b      	sxth	r3, r3
 8013966:	4323      	orrs	r3, r4
 8013968:	b21a      	sxth	r2, r3
 801396a:	4b57      	ldr	r3, [pc, #348]	@ (8013ac8 <tcp_receive+0x888>)
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	b292      	uxth	r2, r2
 8013970:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013976:	4b54      	ldr	r3, [pc, #336]	@ (8013ac8 <tcp_receive+0x888>)
 8013978:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801397a:	4b53      	ldr	r3, [pc, #332]	@ (8013ac8 <tcp_receive+0x888>)
 801397c:	68db      	ldr	r3, [r3, #12]
 801397e:	899b      	ldrh	r3, [r3, #12]
 8013980:	b29b      	uxth	r3, r3
 8013982:	4618      	mov	r0, r3
 8013984:	f7fa fcf0 	bl	800e368 <lwip_htons>
 8013988:	4603      	mov	r3, r0
 801398a:	b2db      	uxtb	r3, r3
 801398c:	f003 0302 	and.w	r3, r3, #2
 8013990:	2b00      	cmp	r3, #0
 8013992:	d005      	beq.n	80139a0 <tcp_receive+0x760>
            inseg.len -= 1;
 8013994:	4b4c      	ldr	r3, [pc, #304]	@ (8013ac8 <tcp_receive+0x888>)
 8013996:	891b      	ldrh	r3, [r3, #8]
 8013998:	3b01      	subs	r3, #1
 801399a:	b29a      	uxth	r2, r3
 801399c:	4b4a      	ldr	r3, [pc, #296]	@ (8013ac8 <tcp_receive+0x888>)
 801399e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80139a0:	4b49      	ldr	r3, [pc, #292]	@ (8013ac8 <tcp_receive+0x888>)
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	4a48      	ldr	r2, [pc, #288]	@ (8013ac8 <tcp_receive+0x888>)
 80139a6:	8912      	ldrh	r2, [r2, #8]
 80139a8:	4611      	mov	r1, r2
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fb ff02 	bl	800f7b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80139b0:	4b45      	ldr	r3, [pc, #276]	@ (8013ac8 <tcp_receive+0x888>)
 80139b2:	891c      	ldrh	r4, [r3, #8]
 80139b4:	4b44      	ldr	r3, [pc, #272]	@ (8013ac8 <tcp_receive+0x888>)
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	899b      	ldrh	r3, [r3, #12]
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fa fcd3 	bl	800e368 <lwip_htons>
 80139c2:	4603      	mov	r3, r0
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	f003 0303 	and.w	r3, r3, #3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d001      	beq.n	80139d2 <tcp_receive+0x792>
 80139ce:	2301      	movs	r3, #1
 80139d0:	e000      	b.n	80139d4 <tcp_receive+0x794>
 80139d2:	2300      	movs	r3, #0
 80139d4:	4423      	add	r3, r4
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	4b3c      	ldr	r3, [pc, #240]	@ (8013acc <tcp_receive+0x88c>)
 80139da:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80139dc:	4b3b      	ldr	r3, [pc, #236]	@ (8013acc <tcp_receive+0x88c>)
 80139de:	881b      	ldrh	r3, [r3, #0]
 80139e0:	461a      	mov	r2, r3
 80139e2:	4b38      	ldr	r3, [pc, #224]	@ (8013ac4 <tcp_receive+0x884>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	441a      	add	r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ec:	6879      	ldr	r1, [r7, #4]
 80139ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80139f0:	440b      	add	r3, r1
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d006      	beq.n	8013a04 <tcp_receive+0x7c4>
 80139f6:	4b36      	ldr	r3, [pc, #216]	@ (8013ad0 <tcp_receive+0x890>)
 80139f8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80139fc:	4935      	ldr	r1, [pc, #212]	@ (8013ad4 <tcp_receive+0x894>)
 80139fe:	4836      	ldr	r0, [pc, #216]	@ (8013ad8 <tcp_receive+0x898>)
 8013a00:	f006 f9a8 	bl	8019d54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 80e6 	beq.w	8013bda <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8013ac8 <tcp_receive+0x888>)
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	899b      	ldrh	r3, [r3, #12]
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fa fca6 	bl	800e368 <lwip_htons>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	f003 0301 	and.w	r3, r3, #1
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d010      	beq.n	8013a4a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013a28:	e00a      	b.n	8013a40 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a2e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7fd fcc5 	bl	80113ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d1f0      	bne.n	8013a2a <tcp_receive+0x7ea>
 8013a48:	e0c7      	b.n	8013bda <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013a50:	e051      	b.n	8013af6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a54:	68db      	ldr	r3, [r3, #12]
 8013a56:	899b      	ldrh	r3, [r3, #12]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fa fc84 	bl	800e368 <lwip_htons>
 8013a60:	4603      	mov	r3, r0
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	f003 0301 	and.w	r3, r3, #1
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d03c      	beq.n	8013ae6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013a6c:	4b16      	ldr	r3, [pc, #88]	@ (8013ac8 <tcp_receive+0x888>)
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	899b      	ldrh	r3, [r3, #12]
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fa fc77 	bl	800e368 <lwip_htons>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d12f      	bne.n	8013ae6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013a86:	4b10      	ldr	r3, [pc, #64]	@ (8013ac8 <tcp_receive+0x888>)
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	899b      	ldrh	r3, [r3, #12]
 8013a8c:	b29c      	uxth	r4, r3
 8013a8e:	2001      	movs	r0, #1
 8013a90:	f7fa fc6a 	bl	800e368 <lwip_htons>
 8013a94:	4603      	mov	r3, r0
 8013a96:	461a      	mov	r2, r3
 8013a98:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac8 <tcp_receive+0x888>)
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	4322      	orrs	r2, r4
 8013a9e:	b292      	uxth	r2, r2
 8013aa0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013aa2:	4b09      	ldr	r3, [pc, #36]	@ (8013ac8 <tcp_receive+0x888>)
 8013aa4:	891c      	ldrh	r4, [r3, #8]
 8013aa6:	4b08      	ldr	r3, [pc, #32]	@ (8013ac8 <tcp_receive+0x888>)
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	899b      	ldrh	r3, [r3, #12]
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fa fc5a 	bl	800e368 <lwip_htons>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	f003 0303 	and.w	r3, r3, #3
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00d      	beq.n	8013adc <tcp_receive+0x89c>
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	e00c      	b.n	8013ade <tcp_receive+0x89e>
 8013ac4:	20011db4 	.word	0x20011db4
 8013ac8:	20011d94 	.word	0x20011d94
 8013acc:	20011dbe 	.word	0x20011dbe
 8013ad0:	0801e124 	.word	0x0801e124
 8013ad4:	0801e4cc 	.word	0x0801e4cc
 8013ad8:	0801e170 	.word	0x0801e170
 8013adc:	2300      	movs	r3, #0
 8013ade:	4423      	add	r3, r4
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	4b98      	ldr	r3, [pc, #608]	@ (8013d44 <tcp_receive+0xb04>)
 8013ae4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ae8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013af0:	6938      	ldr	r0, [r7, #16]
 8013af2:	f7fd fc6a 	bl	80113ca <tcp_seg_free>
            while (next &&
 8013af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00e      	beq.n	8013b1a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013afc:	4b91      	ldr	r3, [pc, #580]	@ (8013d44 <tcp_receive+0xb04>)
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	461a      	mov	r2, r3
 8013b02:	4b91      	ldr	r3, [pc, #580]	@ (8013d48 <tcp_receive+0xb08>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	441a      	add	r2, r3
 8013b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013b10:	8909      	ldrh	r1, [r1, #8]
 8013b12:	440b      	add	r3, r1
 8013b14:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	da9b      	bge.n	8013a52 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d059      	beq.n	8013bd4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013b20:	4b88      	ldr	r3, [pc, #544]	@ (8013d44 <tcp_receive+0xb04>)
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	461a      	mov	r2, r3
 8013b26:	4b88      	ldr	r3, [pc, #544]	@ (8013d48 <tcp_receive+0xb08>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	441a      	add	r2, r3
 8013b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	dd4d      	ble.n	8013bd4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	4b81      	ldr	r3, [pc, #516]	@ (8013d48 <tcp_receive+0xb08>)
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	1ad3      	subs	r3, r2, r3
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	4b80      	ldr	r3, [pc, #512]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b4c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	899b      	ldrh	r3, [r3, #12]
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fa fc06 	bl	800e368 <lwip_htons>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	f003 0302 	and.w	r3, r3, #2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d005      	beq.n	8013b74 <tcp_receive+0x934>
                inseg.len -= 1;
 8013b68:	4b78      	ldr	r3, [pc, #480]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b6a:	891b      	ldrh	r3, [r3, #8]
 8013b6c:	3b01      	subs	r3, #1
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	4b76      	ldr	r3, [pc, #472]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b72:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013b74:	4b75      	ldr	r3, [pc, #468]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	4a74      	ldr	r2, [pc, #464]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b7a:	8912      	ldrh	r2, [r2, #8]
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fb fe18 	bl	800f7b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013b84:	4b71      	ldr	r3, [pc, #452]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b86:	891c      	ldrh	r4, [r3, #8]
 8013b88:	4b70      	ldr	r3, [pc, #448]	@ (8013d4c <tcp_receive+0xb0c>)
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	899b      	ldrh	r3, [r3, #12]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7fa fbe9 	bl	800e368 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	f003 0303 	and.w	r3, r3, #3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <tcp_receive+0x966>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e000      	b.n	8013ba8 <tcp_receive+0x968>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	4423      	add	r3, r4
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	4b65      	ldr	r3, [pc, #404]	@ (8013d44 <tcp_receive+0xb04>)
 8013bae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013bb0:	4b64      	ldr	r3, [pc, #400]	@ (8013d44 <tcp_receive+0xb04>)
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	4b64      	ldr	r3, [pc, #400]	@ (8013d48 <tcp_receive+0xb08>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	441a      	add	r2, r3
 8013bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d006      	beq.n	8013bd4 <tcp_receive+0x994>
 8013bc6:	4b62      	ldr	r3, [pc, #392]	@ (8013d50 <tcp_receive+0xb10>)
 8013bc8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8013bcc:	4961      	ldr	r1, [pc, #388]	@ (8013d54 <tcp_receive+0xb14>)
 8013bce:	4862      	ldr	r0, [pc, #392]	@ (8013d58 <tcp_receive+0xb18>)
 8013bd0:	f006 f8c0 	bl	8019d54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013bd8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013bda:	4b5a      	ldr	r3, [pc, #360]	@ (8013d44 <tcp_receive+0xb04>)
 8013bdc:	881b      	ldrh	r3, [r3, #0]
 8013bde:	461a      	mov	r2, r3
 8013be0:	4b59      	ldr	r3, [pc, #356]	@ (8013d48 <tcp_receive+0xb08>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	441a      	add	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013bee:	4b55      	ldr	r3, [pc, #340]	@ (8013d44 <tcp_receive+0xb04>)
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d206      	bcs.n	8013c04 <tcp_receive+0x9c4>
 8013bf6:	4b56      	ldr	r3, [pc, #344]	@ (8013d50 <tcp_receive+0xb10>)
 8013bf8:	f240 6207 	movw	r2, #1543	@ 0x607
 8013bfc:	4957      	ldr	r1, [pc, #348]	@ (8013d5c <tcp_receive+0xb1c>)
 8013bfe:	4856      	ldr	r0, [pc, #344]	@ (8013d58 <tcp_receive+0xb18>)
 8013c00:	f006 f8a8 	bl	8019d54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013c08:	4b4e      	ldr	r3, [pc, #312]	@ (8013d44 <tcp_receive+0xb04>)
 8013c0a:	881b      	ldrh	r3, [r3, #0]
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7fc feb1 	bl	801097c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8013d4c <tcp_receive+0xb0c>)
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	891b      	ldrh	r3, [r3, #8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d006      	beq.n	8013c32 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013c24:	4b49      	ldr	r3, [pc, #292]	@ (8013d4c <tcp_receive+0xb0c>)
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	4a4d      	ldr	r2, [pc, #308]	@ (8013d60 <tcp_receive+0xb20>)
 8013c2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013c2c:	4b47      	ldr	r3, [pc, #284]	@ (8013d4c <tcp_receive+0xb0c>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c32:	4b46      	ldr	r3, [pc, #280]	@ (8013d4c <tcp_receive+0xb0c>)
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	899b      	ldrh	r3, [r3, #12]
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fa fb94 	bl	800e368 <lwip_htons>
 8013c40:	4603      	mov	r3, r0
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	f003 0301 	and.w	r3, r3, #1
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f000 80b8 	beq.w	8013dbe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013c4e:	4b45      	ldr	r3, [pc, #276]	@ (8013d64 <tcp_receive+0xb24>)
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	f043 0320 	orr.w	r3, r3, #32
 8013c56:	b2da      	uxtb	r2, r3
 8013c58:	4b42      	ldr	r3, [pc, #264]	@ (8013d64 <tcp_receive+0xb24>)
 8013c5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013c5c:	e0af      	b.n	8013dbe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	4a36      	ldr	r2, [pc, #216]	@ (8013d48 <tcp_receive+0xb08>)
 8013c6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	891b      	ldrh	r3, [r3, #8]
 8013c74:	461c      	mov	r4, r3
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	899b      	ldrh	r3, [r3, #12]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fa fb72 	bl	800e368 <lwip_htons>
 8013c84:	4603      	mov	r3, r0
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	f003 0303 	and.w	r3, r3, #3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <tcp_receive+0xa54>
 8013c90:	2301      	movs	r3, #1
 8013c92:	e000      	b.n	8013c96 <tcp_receive+0xa56>
 8013c94:	2300      	movs	r3, #0
 8013c96:	191a      	adds	r2, r3, r4
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c9c:	441a      	add	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ca6:	461c      	mov	r4, r3
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	891b      	ldrh	r3, [r3, #8]
 8013cac:	461d      	mov	r5, r3
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	899b      	ldrh	r3, [r3, #12]
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fa fb56 	bl	800e368 <lwip_htons>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	f003 0303 	and.w	r3, r3, #3
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d001      	beq.n	8013ccc <tcp_receive+0xa8c>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e000      	b.n	8013cce <tcp_receive+0xa8e>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	442b      	add	r3, r5
 8013cd0:	429c      	cmp	r4, r3
 8013cd2:	d206      	bcs.n	8013ce2 <tcp_receive+0xaa2>
 8013cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8013d50 <tcp_receive+0xb10>)
 8013cd6:	f240 622b 	movw	r2, #1579	@ 0x62b
 8013cda:	4923      	ldr	r1, [pc, #140]	@ (8013d68 <tcp_receive+0xb28>)
 8013cdc:	481e      	ldr	r0, [pc, #120]	@ (8013d58 <tcp_receive+0xb18>)
 8013cde:	f006 f839 	bl	8019d54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	891b      	ldrh	r3, [r3, #8]
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	899b      	ldrh	r3, [r3, #12]
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fa fb39 	bl	800e368 <lwip_htons>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	f003 0303 	and.w	r3, r3, #3
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d001      	beq.n	8013d06 <tcp_receive+0xac6>
 8013d02:	2301      	movs	r3, #1
 8013d04:	e000      	b.n	8013d08 <tcp_receive+0xac8>
 8013d06:	2300      	movs	r3, #0
 8013d08:	1919      	adds	r1, r3, r4
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013d0e:	b28b      	uxth	r3, r1
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7fc fe2f 	bl	801097c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	891b      	ldrh	r3, [r3, #8]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d028      	beq.n	8013d7a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013d28:	4b0d      	ldr	r3, [pc, #52]	@ (8013d60 <tcp_receive+0xb20>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d01d      	beq.n	8013d6c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013d30:	4b0b      	ldr	r3, [pc, #44]	@ (8013d60 <tcp_receive+0xb20>)
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	4619      	mov	r1, r3
 8013d3a:	4610      	mov	r0, r2
 8013d3c:	f7fb ff8e 	bl	800fc5c <pbuf_cat>
 8013d40:	e018      	b.n	8013d74 <tcp_receive+0xb34>
 8013d42:	bf00      	nop
 8013d44:	20011dbe 	.word	0x20011dbe
 8013d48:	20011db4 	.word	0x20011db4
 8013d4c:	20011d94 	.word	0x20011d94
 8013d50:	0801e124 	.word	0x0801e124
 8013d54:	0801e504 	.word	0x0801e504
 8013d58:	0801e170 	.word	0x0801e170
 8013d5c:	0801e540 	.word	0x0801e540
 8013d60:	20011dc4 	.word	0x20011dc4
 8013d64:	20011dc1 	.word	0x20011dc1
 8013d68:	0801e560 	.word	0x0801e560
            } else {
              recv_data = cseg->p;
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	4a70      	ldr	r2, [pc, #448]	@ (8013f34 <tcp_receive+0xcf4>)
 8013d72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	2200      	movs	r2, #0
 8013d78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	899b      	ldrh	r3, [r3, #12]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fa faf0 	bl	800e368 <lwip_htons>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	f003 0301 	and.w	r3, r3, #1
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d00d      	beq.n	8013db0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013d94:	4b68      	ldr	r3, [pc, #416]	@ (8013f38 <tcp_receive+0xcf8>)
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	f043 0320 	orr.w	r3, r3, #32
 8013d9c:	b2da      	uxtb	r2, r3
 8013d9e:	4b66      	ldr	r3, [pc, #408]	@ (8013f38 <tcp_receive+0xcf8>)
 8013da0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	7d1b      	ldrb	r3, [r3, #20]
 8013da6:	2b04      	cmp	r3, #4
 8013da8:	d102      	bne.n	8013db0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2207      	movs	r2, #7
 8013dae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013db8:	68b8      	ldr	r0, [r7, #8]
 8013dba:	f7fd fb06 	bl	80113ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d008      	beq.n	8013dd8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	685a      	ldr	r2, [r3, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	f43f af43 	beq.w	8013c5e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	8b5b      	ldrh	r3, [r3, #26]
 8013ddc:	f003 0301 	and.w	r3, r3, #1
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d00e      	beq.n	8013e02 <tcp_receive+0xbc2>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	8b5b      	ldrh	r3, [r3, #26]
 8013de8:	f023 0301 	bic.w	r3, r3, #1
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	835a      	strh	r2, [r3, #26]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	8b5b      	ldrh	r3, [r3, #26]
 8013df6:	f043 0302 	orr.w	r3, r3, #2
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013e00:	e187      	b.n	8014112 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	8b5b      	ldrh	r3, [r3, #26]
 8013e06:	f043 0301 	orr.w	r3, r3, #1
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013e10:	e17f      	b.n	8014112 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d106      	bne.n	8013e28 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013e1a:	4848      	ldr	r0, [pc, #288]	@ (8013f3c <tcp_receive+0xcfc>)
 8013e1c:	f7fd faee 	bl	80113fc <tcp_seg_copy>
 8013e20:	4602      	mov	r2, r0
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	675a      	str	r2, [r3, #116]	@ 0x74
 8013e26:	e16c      	b.n	8014102 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013e32:	e156      	b.n	80140e2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	685a      	ldr	r2, [r3, #4]
 8013e3a:	4b41      	ldr	r3, [pc, #260]	@ (8013f40 <tcp_receive+0xd00>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d11d      	bne.n	8013e7e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013e42:	4b3e      	ldr	r3, [pc, #248]	@ (8013f3c <tcp_receive+0xcfc>)
 8013e44:	891a      	ldrh	r2, [r3, #8]
 8013e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e48:	891b      	ldrh	r3, [r3, #8]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	f240 814e 	bls.w	80140ec <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e50:	483a      	ldr	r0, [pc, #232]	@ (8013f3c <tcp_receive+0xcfc>)
 8013e52:	f7fd fad3 	bl	80113fc <tcp_seg_copy>
 8013e56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 8148 	beq.w	80140f0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d003      	beq.n	8013e6e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e68:	697a      	ldr	r2, [r7, #20]
 8013e6a:	601a      	str	r2, [r3, #0]
 8013e6c:	e002      	b.n	8013e74 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	697a      	ldr	r2, [r7, #20]
 8013e72:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013e74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013e76:	6978      	ldr	r0, [r7, #20]
 8013e78:	f7ff f8de 	bl	8013038 <tcp_oos_insert_segment>
                }
                break;
 8013e7c:	e138      	b.n	80140f0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d117      	bne.n	8013eb4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013e84:	4b2e      	ldr	r3, [pc, #184]	@ (8013f40 <tcp_receive+0xd00>)
 8013e86:	681a      	ldr	r2, [r3, #0]
 8013e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	1ad3      	subs	r3, r2, r3
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	da57      	bge.n	8013f44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e94:	4829      	ldr	r0, [pc, #164]	@ (8013f3c <tcp_receive+0xcfc>)
 8013e96:	f7fd fab1 	bl	80113fc <tcp_seg_copy>
 8013e9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	f000 8128 	beq.w	80140f4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	69ba      	ldr	r2, [r7, #24]
 8013ea8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013eaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013eac:	69b8      	ldr	r0, [r7, #24]
 8013eae:	f7ff f8c3 	bl	8013038 <tcp_oos_insert_segment>
                  }
                  break;
 8013eb2:	e11f      	b.n	80140f4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013eb4:	4b22      	ldr	r3, [pc, #136]	@ (8013f40 <tcp_receive+0xd00>)
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	1ad3      	subs	r3, r2, r3
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	db3e      	blt.n	8013f44 <tcp_receive+0xd04>
 8013ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8013f40 <tcp_receive+0xd00>)
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ecc:	68db      	ldr	r3, [r3, #12]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	dc35      	bgt.n	8013f44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013ed8:	4818      	ldr	r0, [pc, #96]	@ (8013f3c <tcp_receive+0xcfc>)
 8013eda:	f7fd fa8f 	bl	80113fc <tcp_seg_copy>
 8013ede:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f000 8108 	beq.w	80140f8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ef0:	8912      	ldrh	r2, [r2, #8]
 8013ef2:	441a      	add	r2, r3
 8013ef4:	4b12      	ldr	r3, [pc, #72]	@ (8013f40 <tcp_receive+0xd00>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	1ad3      	subs	r3, r2, r3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	dd12      	ble.n	8013f24 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013efe:	4b10      	ldr	r3, [pc, #64]	@ (8013f40 <tcp_receive+0xd00>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f16:	685a      	ldr	r2, [r3, #4]
 8013f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f1a:	891b      	ldrh	r3, [r3, #8]
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4610      	mov	r0, r2
 8013f20:	f7fb fc48 	bl	800f7b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f26:	69fa      	ldr	r2, [r7, #28]
 8013f28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013f2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013f2c:	69f8      	ldr	r0, [r7, #28]
 8013f2e:	f7ff f883 	bl	8013038 <tcp_oos_insert_segment>
                  }
                  break;
 8013f32:	e0e1      	b.n	80140f8 <tcp_receive+0xeb8>
 8013f34:	20011dc4 	.word	0x20011dc4
 8013f38:	20011dc1 	.word	0x20011dc1
 8013f3c:	20011d94 	.word	0x20011d94
 8013f40:	20011db4 	.word	0x20011db4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f46:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f040 80c5 	bne.w	80140dc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013f52:	4b7f      	ldr	r3, [pc, #508]	@ (8014150 <tcp_receive+0xf10>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f340 80bc 	ble.w	80140dc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f66:	68db      	ldr	r3, [r3, #12]
 8013f68:	899b      	ldrh	r3, [r3, #12]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fa f9fb 	bl	800e368 <lwip_htons>
 8013f72:	4603      	mov	r3, r0
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	f003 0301 	and.w	r3, r3, #1
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f040 80be 	bne.w	80140fc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013f80:	4874      	ldr	r0, [pc, #464]	@ (8014154 <tcp_receive+0xf14>)
 8013f82:	f7fd fa3b 	bl	80113fc <tcp_seg_copy>
 8013f86:	4602      	mov	r2, r0
 8013f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f000 80b5 	beq.w	8014100 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f9e:	8912      	ldrh	r2, [r2, #8]
 8013fa0:	441a      	add	r2, r3
 8013fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8014150 <tcp_receive+0xf10>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	1ad3      	subs	r3, r2, r3
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	dd12      	ble.n	8013fd2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013fac:	4b68      	ldr	r3, [pc, #416]	@ (8014150 <tcp_receive+0xf10>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	685b      	ldr	r3, [r3, #4]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc4:	685a      	ldr	r2, [r3, #4]
 8013fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc8:	891b      	ldrh	r3, [r3, #8]
 8013fca:	4619      	mov	r1, r3
 8013fcc:	4610      	mov	r0, r2
 8013fce:	f7fb fbf1 	bl	800f7b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013fd2:	4b61      	ldr	r3, [pc, #388]	@ (8014158 <tcp_receive+0xf18>)
 8013fd4:	881b      	ldrh	r3, [r3, #0]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8014150 <tcp_receive+0xf10>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	441a      	add	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fe2:	6879      	ldr	r1, [r7, #4]
 8013fe4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013fe6:	440b      	add	r3, r1
 8013fe8:	1ad3      	subs	r3, r2, r3
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f340 8088 	ble.w	8014100 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	68db      	ldr	r3, [r3, #12]
 8013ff6:	899b      	ldrh	r3, [r3, #12]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7fa f9b4 	bl	800e368 <lwip_htons>
 8014000:	4603      	mov	r3, r0
 8014002:	b2db      	uxtb	r3, r3
 8014004:	f003 0301 	and.w	r3, r3, #1
 8014008:	2b00      	cmp	r3, #0
 801400a:	d021      	beq.n	8014050 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	899b      	ldrh	r3, [r3, #12]
 8014014:	b29b      	uxth	r3, r3
 8014016:	b21b      	sxth	r3, r3
 8014018:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801401c:	b21c      	sxth	r4, r3
 801401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	899b      	ldrh	r3, [r3, #12]
 8014026:	b29b      	uxth	r3, r3
 8014028:	4618      	mov	r0, r3
 801402a:	f7fa f99d 	bl	800e368 <lwip_htons>
 801402e:	4603      	mov	r3, r0
 8014030:	b2db      	uxtb	r3, r3
 8014032:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014036:	b29b      	uxth	r3, r3
 8014038:	4618      	mov	r0, r3
 801403a:	f7fa f995 	bl	800e368 <lwip_htons>
 801403e:	4603      	mov	r3, r0
 8014040:	b21b      	sxth	r3, r3
 8014042:	4323      	orrs	r3, r4
 8014044:	b21a      	sxth	r2, r3
 8014046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	b292      	uxth	r2, r2
 801404e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014054:	b29a      	uxth	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801405a:	4413      	add	r3, r2
 801405c:	b299      	uxth	r1, r3
 801405e:	4b3c      	ldr	r3, [pc, #240]	@ (8014150 <tcp_receive+0xf10>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	b29a      	uxth	r2, r3
 8014064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	1a8a      	subs	r2, r1, r2
 801406a:	b292      	uxth	r2, r2
 801406c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	685a      	ldr	r2, [r3, #4]
 8014074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	891b      	ldrh	r3, [r3, #8]
 801407a:	4619      	mov	r1, r3
 801407c:	4610      	mov	r0, r2
 801407e:	f7fb fb99 	bl	800f7b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	891c      	ldrh	r4, [r3, #8]
 8014088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	899b      	ldrh	r3, [r3, #12]
 8014090:	b29b      	uxth	r3, r3
 8014092:	4618      	mov	r0, r3
 8014094:	f7fa f968 	bl	800e368 <lwip_htons>
 8014098:	4603      	mov	r3, r0
 801409a:	b2db      	uxtb	r3, r3
 801409c:	f003 0303 	and.w	r3, r3, #3
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d001      	beq.n	80140a8 <tcp_receive+0xe68>
 80140a4:	2301      	movs	r3, #1
 80140a6:	e000      	b.n	80140aa <tcp_receive+0xe6a>
 80140a8:	2300      	movs	r3, #0
 80140aa:	4423      	add	r3, r4
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	4b2a      	ldr	r3, [pc, #168]	@ (8014158 <tcp_receive+0xf18>)
 80140b0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80140b2:	4b29      	ldr	r3, [pc, #164]	@ (8014158 <tcp_receive+0xf18>)
 80140b4:	881b      	ldrh	r3, [r3, #0]
 80140b6:	461a      	mov	r2, r3
 80140b8:	4b25      	ldr	r3, [pc, #148]	@ (8014150 <tcp_receive+0xf10>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	441a      	add	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140c2:	6879      	ldr	r1, [r7, #4]
 80140c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80140c6:	440b      	add	r3, r1
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d019      	beq.n	8014100 <tcp_receive+0xec0>
 80140cc:	4b23      	ldr	r3, [pc, #140]	@ (801415c <tcp_receive+0xf1c>)
 80140ce:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80140d2:	4923      	ldr	r1, [pc, #140]	@ (8014160 <tcp_receive+0xf20>)
 80140d4:	4823      	ldr	r0, [pc, #140]	@ (8014164 <tcp_receive+0xf24>)
 80140d6:	f005 fe3d 	bl	8019d54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80140da:	e011      	b.n	8014100 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80140dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80140e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	f47f aea5 	bne.w	8013e34 <tcp_receive+0xbf4>
 80140ea:	e00a      	b.n	8014102 <tcp_receive+0xec2>
                break;
 80140ec:	bf00      	nop
 80140ee:	e008      	b.n	8014102 <tcp_receive+0xec2>
                break;
 80140f0:	bf00      	nop
 80140f2:	e006      	b.n	8014102 <tcp_receive+0xec2>
                  break;
 80140f4:	bf00      	nop
 80140f6:	e004      	b.n	8014102 <tcp_receive+0xec2>
                  break;
 80140f8:	bf00      	nop
 80140fa:	e002      	b.n	8014102 <tcp_receive+0xec2>
                  break;
 80140fc:	bf00      	nop
 80140fe:	e000      	b.n	8014102 <tcp_receive+0xec2>
                break;
 8014100:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f001 fe88 	bl	8015e18 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014108:	e003      	b.n	8014112 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f001 fe84 	bl	8015e18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014110:	e01a      	b.n	8014148 <tcp_receive+0xf08>
 8014112:	e019      	b.n	8014148 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014114:	4b0e      	ldr	r3, [pc, #56]	@ (8014150 <tcp_receive+0xf10>)
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	db0a      	blt.n	8014138 <tcp_receive+0xef8>
 8014122:	4b0b      	ldr	r3, [pc, #44]	@ (8014150 <tcp_receive+0xf10>)
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801412a:	6879      	ldr	r1, [r7, #4]
 801412c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801412e:	440b      	add	r3, r1
 8014130:	1ad3      	subs	r3, r2, r3
 8014132:	3301      	adds	r3, #1
 8014134:	2b00      	cmp	r3, #0
 8014136:	dd07      	ble.n	8014148 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	8b5b      	ldrh	r3, [r3, #26]
 801413c:	f043 0302 	orr.w	r3, r3, #2
 8014140:	b29a      	uxth	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014146:	e7ff      	b.n	8014148 <tcp_receive+0xf08>
 8014148:	bf00      	nop
 801414a:	3750      	adds	r7, #80	@ 0x50
 801414c:	46bd      	mov	sp, r7
 801414e:	bdb0      	pop	{r4, r5, r7, pc}
 8014150:	20011db4 	.word	0x20011db4
 8014154:	20011d94 	.word	0x20011d94
 8014158:	20011dbe 	.word	0x20011dbe
 801415c:	0801e124 	.word	0x0801e124
 8014160:	0801e4cc 	.word	0x0801e4cc
 8014164:	0801e170 	.word	0x0801e170

08014168 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801416e:	4b15      	ldr	r3, [pc, #84]	@ (80141c4 <tcp_get_next_optbyte+0x5c>)
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	1c5a      	adds	r2, r3, #1
 8014174:	b291      	uxth	r1, r2
 8014176:	4a13      	ldr	r2, [pc, #76]	@ (80141c4 <tcp_get_next_optbyte+0x5c>)
 8014178:	8011      	strh	r1, [r2, #0]
 801417a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801417c:	4b12      	ldr	r3, [pc, #72]	@ (80141c8 <tcp_get_next_optbyte+0x60>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d004      	beq.n	801418e <tcp_get_next_optbyte+0x26>
 8014184:	4b11      	ldr	r3, [pc, #68]	@ (80141cc <tcp_get_next_optbyte+0x64>)
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	88fa      	ldrh	r2, [r7, #6]
 801418a:	429a      	cmp	r2, r3
 801418c:	d208      	bcs.n	80141a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801418e:	4b10      	ldr	r3, [pc, #64]	@ (80141d0 <tcp_get_next_optbyte+0x68>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	3314      	adds	r3, #20
 8014194:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014196:	88fb      	ldrh	r3, [r7, #6]
 8014198:	683a      	ldr	r2, [r7, #0]
 801419a:	4413      	add	r3, r2
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	e00b      	b.n	80141b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	b2da      	uxtb	r2, r3
 80141a4:	4b09      	ldr	r3, [pc, #36]	@ (80141cc <tcp_get_next_optbyte+0x64>)
 80141a6:	881b      	ldrh	r3, [r3, #0]
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	1ad3      	subs	r3, r2, r3
 80141ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80141ae:	4b06      	ldr	r3, [pc, #24]	@ (80141c8 <tcp_get_next_optbyte+0x60>)
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	797b      	ldrb	r3, [r7, #5]
 80141b4:	4413      	add	r3, r2
 80141b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr
 80141c4:	20011db0 	.word	0x20011db0
 80141c8:	20011dac 	.word	0x20011dac
 80141cc:	20011daa 	.word	0x20011daa
 80141d0:	20011da4 	.word	0x20011da4

080141d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <tcp_parseopt+0x1c>
 80141e2:	4b32      	ldr	r3, [pc, #200]	@ (80142ac <tcp_parseopt+0xd8>)
 80141e4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80141e8:	4931      	ldr	r1, [pc, #196]	@ (80142b0 <tcp_parseopt+0xdc>)
 80141ea:	4832      	ldr	r0, [pc, #200]	@ (80142b4 <tcp_parseopt+0xe0>)
 80141ec:	f005 fdb2 	bl	8019d54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80141f0:	4b31      	ldr	r3, [pc, #196]	@ (80142b8 <tcp_parseopt+0xe4>)
 80141f2:	881b      	ldrh	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d056      	beq.n	80142a6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80141f8:	4b30      	ldr	r3, [pc, #192]	@ (80142bc <tcp_parseopt+0xe8>)
 80141fa:	2200      	movs	r2, #0
 80141fc:	801a      	strh	r2, [r3, #0]
 80141fe:	e046      	b.n	801428e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014200:	f7ff ffb2 	bl	8014168 <tcp_get_next_optbyte>
 8014204:	4603      	mov	r3, r0
 8014206:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014208:	7bfb      	ldrb	r3, [r7, #15]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d006      	beq.n	801421c <tcp_parseopt+0x48>
 801420e:	2b02      	cmp	r3, #2
 8014210:	dc2a      	bgt.n	8014268 <tcp_parseopt+0x94>
 8014212:	2b00      	cmp	r3, #0
 8014214:	d042      	beq.n	801429c <tcp_parseopt+0xc8>
 8014216:	2b01      	cmp	r3, #1
 8014218:	d038      	beq.n	801428c <tcp_parseopt+0xb8>
 801421a:	e025      	b.n	8014268 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801421c:	f7ff ffa4 	bl	8014168 <tcp_get_next_optbyte>
 8014220:	4603      	mov	r3, r0
 8014222:	2b04      	cmp	r3, #4
 8014224:	d13c      	bne.n	80142a0 <tcp_parseopt+0xcc>
 8014226:	4b25      	ldr	r3, [pc, #148]	@ (80142bc <tcp_parseopt+0xe8>)
 8014228:	881b      	ldrh	r3, [r3, #0]
 801422a:	3301      	adds	r3, #1
 801422c:	4a22      	ldr	r2, [pc, #136]	@ (80142b8 <tcp_parseopt+0xe4>)
 801422e:	8812      	ldrh	r2, [r2, #0]
 8014230:	4293      	cmp	r3, r2
 8014232:	da35      	bge.n	80142a0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014234:	f7ff ff98 	bl	8014168 <tcp_get_next_optbyte>
 8014238:	4603      	mov	r3, r0
 801423a:	021b      	lsls	r3, r3, #8
 801423c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801423e:	f7ff ff93 	bl	8014168 <tcp_get_next_optbyte>
 8014242:	4603      	mov	r3, r0
 8014244:	461a      	mov	r2, r3
 8014246:	89bb      	ldrh	r3, [r7, #12]
 8014248:	4313      	orrs	r3, r2
 801424a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801424c:	89bb      	ldrh	r3, [r7, #12]
 801424e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014252:	d804      	bhi.n	801425e <tcp_parseopt+0x8a>
 8014254:	89bb      	ldrh	r3, [r7, #12]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d001      	beq.n	801425e <tcp_parseopt+0x8a>
 801425a:	89ba      	ldrh	r2, [r7, #12]
 801425c:	e001      	b.n	8014262 <tcp_parseopt+0x8e>
 801425e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014266:	e012      	b.n	801428e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014268:	f7ff ff7e 	bl	8014168 <tcp_get_next_optbyte>
 801426c:	4603      	mov	r3, r0
 801426e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014270:	7afb      	ldrb	r3, [r7, #11]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d916      	bls.n	80142a4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014276:	7afb      	ldrb	r3, [r7, #11]
 8014278:	b29a      	uxth	r2, r3
 801427a:	4b10      	ldr	r3, [pc, #64]	@ (80142bc <tcp_parseopt+0xe8>)
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	4413      	add	r3, r2
 8014280:	b29b      	uxth	r3, r3
 8014282:	3b02      	subs	r3, #2
 8014284:	b29a      	uxth	r2, r3
 8014286:	4b0d      	ldr	r3, [pc, #52]	@ (80142bc <tcp_parseopt+0xe8>)
 8014288:	801a      	strh	r2, [r3, #0]
 801428a:	e000      	b.n	801428e <tcp_parseopt+0xba>
          break;
 801428c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801428e:	4b0b      	ldr	r3, [pc, #44]	@ (80142bc <tcp_parseopt+0xe8>)
 8014290:	881a      	ldrh	r2, [r3, #0]
 8014292:	4b09      	ldr	r3, [pc, #36]	@ (80142b8 <tcp_parseopt+0xe4>)
 8014294:	881b      	ldrh	r3, [r3, #0]
 8014296:	429a      	cmp	r2, r3
 8014298:	d3b2      	bcc.n	8014200 <tcp_parseopt+0x2c>
 801429a:	e004      	b.n	80142a6 <tcp_parseopt+0xd2>
          return;
 801429c:	bf00      	nop
 801429e:	e002      	b.n	80142a6 <tcp_parseopt+0xd2>
            return;
 80142a0:	bf00      	nop
 80142a2:	e000      	b.n	80142a6 <tcp_parseopt+0xd2>
            return;
 80142a4:	bf00      	nop
      }
    }
  }
}
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	0801e124 	.word	0x0801e124
 80142b0:	0801e588 	.word	0x0801e588
 80142b4:	0801e170 	.word	0x0801e170
 80142b8:	20011da8 	.word	0x20011da8
 80142bc:	20011db0 	.word	0x20011db0

080142c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80142c0:	b480      	push	{r7}
 80142c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80142c4:	4b05      	ldr	r3, [pc, #20]	@ (80142dc <tcp_trigger_input_pcb_close+0x1c>)
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	f043 0310 	orr.w	r3, r3, #16
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	4b03      	ldr	r3, [pc, #12]	@ (80142dc <tcp_trigger_input_pcb_close+0x1c>)
 80142d0:	701a      	strb	r2, [r3, #0]
}
 80142d2:	bf00      	nop
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr
 80142dc:	20011dc1 	.word	0x20011dc1

080142e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d00a      	beq.n	8014308 <tcp_route+0x28>
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	7a1b      	ldrb	r3, [r3, #8]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d006      	beq.n	8014308 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	7a1b      	ldrb	r3, [r3, #8]
 80142fe:	4618      	mov	r0, r3
 8014300:	f7fb f850 	bl	800f3a4 <netif_get_by_index>
 8014304:	4603      	mov	r3, r0
 8014306:	e003      	b.n	8014310 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f003 fc49 	bl	8017ba0 <ip4_route>
 801430e:	4603      	mov	r3, r0
  }
}
 8014310:	4618      	mov	r0, r3
 8014312:	3710      	adds	r7, #16
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014318:	b590      	push	{r4, r7, lr}
 801431a:	b087      	sub	sp, #28
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	603b      	str	r3, [r7, #0]
 8014324:	4613      	mov	r3, r2
 8014326:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d105      	bne.n	801433a <tcp_create_segment+0x22>
 801432e:	4b43      	ldr	r3, [pc, #268]	@ (801443c <tcp_create_segment+0x124>)
 8014330:	22a3      	movs	r2, #163	@ 0xa3
 8014332:	4943      	ldr	r1, [pc, #268]	@ (8014440 <tcp_create_segment+0x128>)
 8014334:	4843      	ldr	r0, [pc, #268]	@ (8014444 <tcp_create_segment+0x12c>)
 8014336:	f005 fd0d 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d105      	bne.n	801434c <tcp_create_segment+0x34>
 8014340:	4b3e      	ldr	r3, [pc, #248]	@ (801443c <tcp_create_segment+0x124>)
 8014342:	22a4      	movs	r2, #164	@ 0xa4
 8014344:	4940      	ldr	r1, [pc, #256]	@ (8014448 <tcp_create_segment+0x130>)
 8014346:	483f      	ldr	r0, [pc, #252]	@ (8014444 <tcp_create_segment+0x12c>)
 8014348:	f005 fd04 	bl	8019d54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801434c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f003 0304 	and.w	r3, r3, #4
 8014358:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801435a:	2003      	movs	r0, #3
 801435c:	f7fa fcba 	bl	800ecd4 <memp_malloc>
 8014360:	6138      	str	r0, [r7, #16]
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d104      	bne.n	8014372 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014368:	68b8      	ldr	r0, [r7, #8]
 801436a:	f7fb fba9 	bl	800fac0 <pbuf_free>
    return NULL;
 801436e:	2300      	movs	r3, #0
 8014370:	e060      	b.n	8014434 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014378:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	2200      	movs	r2, #0
 801437e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	68ba      	ldr	r2, [r7, #8]
 8014384:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	891a      	ldrh	r2, [r3, #8]
 801438a:	7dfb      	ldrb	r3, [r7, #23]
 801438c:	b29b      	uxth	r3, r3
 801438e:	429a      	cmp	r2, r3
 8014390:	d205      	bcs.n	801439e <tcp_create_segment+0x86>
 8014392:	4b2a      	ldr	r3, [pc, #168]	@ (801443c <tcp_create_segment+0x124>)
 8014394:	22b0      	movs	r2, #176	@ 0xb0
 8014396:	492d      	ldr	r1, [pc, #180]	@ (801444c <tcp_create_segment+0x134>)
 8014398:	482a      	ldr	r0, [pc, #168]	@ (8014444 <tcp_create_segment+0x12c>)
 801439a:	f005 fcdb 	bl	8019d54 <iprintf>
  seg->len = p->tot_len - optlen;
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	891a      	ldrh	r2, [r3, #8]
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80143ae:	2114      	movs	r1, #20
 80143b0:	68b8      	ldr	r0, [r7, #8]
 80143b2:	f7fb faef 	bl	800f994 <pbuf_add_header>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d004      	beq.n	80143c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80143bc:	6938      	ldr	r0, [r7, #16]
 80143be:	f7fd f804 	bl	80113ca <tcp_seg_free>
    return NULL;
 80143c2:	2300      	movs	r3, #0
 80143c4:	e036      	b.n	8014434 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	685a      	ldr	r2, [r3, #4]
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	8ada      	ldrh	r2, [r3, #22]
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	68dc      	ldr	r4, [r3, #12]
 80143d8:	4610      	mov	r0, r2
 80143da:	f7f9 ffc5 	bl	800e368 <lwip_htons>
 80143de:	4603      	mov	r3, r0
 80143e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	8b1a      	ldrh	r2, [r3, #24]
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	68dc      	ldr	r4, [r3, #12]
 80143ea:	4610      	mov	r0, r2
 80143ec:	f7f9 ffbc 	bl	800e368 <lwip_htons>
 80143f0:	4603      	mov	r3, r0
 80143f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	68dc      	ldr	r4, [r3, #12]
 80143f8:	6838      	ldr	r0, [r7, #0]
 80143fa:	f7f9 ffca 	bl	800e392 <lwip_htonl>
 80143fe:	4603      	mov	r3, r0
 8014400:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014402:	7dfb      	ldrb	r3, [r7, #23]
 8014404:	089b      	lsrs	r3, r3, #2
 8014406:	b2db      	uxtb	r3, r3
 8014408:	3305      	adds	r3, #5
 801440a:	b29b      	uxth	r3, r3
 801440c:	031b      	lsls	r3, r3, #12
 801440e:	b29a      	uxth	r2, r3
 8014410:	79fb      	ldrb	r3, [r7, #7]
 8014412:	b29b      	uxth	r3, r3
 8014414:	4313      	orrs	r3, r2
 8014416:	b29a      	uxth	r2, r3
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	68dc      	ldr	r4, [r3, #12]
 801441c:	4610      	mov	r0, r2
 801441e:	f7f9 ffa3 	bl	800e368 <lwip_htons>
 8014422:	4603      	mov	r3, r0
 8014424:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	2200      	movs	r2, #0
 801442c:	749a      	strb	r2, [r3, #18]
 801442e:	2200      	movs	r2, #0
 8014430:	74da      	strb	r2, [r3, #19]
  return seg;
 8014432:	693b      	ldr	r3, [r7, #16]
}
 8014434:	4618      	mov	r0, r3
 8014436:	371c      	adds	r7, #28
 8014438:	46bd      	mov	sp, r7
 801443a:	bd90      	pop	{r4, r7, pc}
 801443c:	0801e5a4 	.word	0x0801e5a4
 8014440:	0801e5d8 	.word	0x0801e5d8
 8014444:	0801e5f8 	.word	0x0801e5f8
 8014448:	0801e620 	.word	0x0801e620
 801444c:	0801e644 	.word	0x0801e644

08014450 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b086      	sub	sp, #24
 8014454:	af00      	add	r7, sp, #0
 8014456:	607b      	str	r3, [r7, #4]
 8014458:	4603      	mov	r3, r0
 801445a:	73fb      	strb	r3, [r7, #15]
 801445c:	460b      	mov	r3, r1
 801445e:	81bb      	strh	r3, [r7, #12]
 8014460:	4613      	mov	r3, r2
 8014462:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014464:	89bb      	ldrh	r3, [r7, #12]
 8014466:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d105      	bne.n	801447a <tcp_pbuf_prealloc+0x2a>
 801446e:	4b30      	ldr	r3, [pc, #192]	@ (8014530 <tcp_pbuf_prealloc+0xe0>)
 8014470:	22e8      	movs	r2, #232	@ 0xe8
 8014472:	4930      	ldr	r1, [pc, #192]	@ (8014534 <tcp_pbuf_prealloc+0xe4>)
 8014474:	4830      	ldr	r0, [pc, #192]	@ (8014538 <tcp_pbuf_prealloc+0xe8>)
 8014476:	f005 fc6d 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801447a:	6a3b      	ldr	r3, [r7, #32]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d105      	bne.n	801448c <tcp_pbuf_prealloc+0x3c>
 8014480:	4b2b      	ldr	r3, [pc, #172]	@ (8014530 <tcp_pbuf_prealloc+0xe0>)
 8014482:	22e9      	movs	r2, #233	@ 0xe9
 8014484:	492d      	ldr	r1, [pc, #180]	@ (801453c <tcp_pbuf_prealloc+0xec>)
 8014486:	482c      	ldr	r0, [pc, #176]	@ (8014538 <tcp_pbuf_prealloc+0xe8>)
 8014488:	f005 fc64 	bl	8019d54 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801448c:	89ba      	ldrh	r2, [r7, #12]
 801448e:	897b      	ldrh	r3, [r7, #10]
 8014490:	429a      	cmp	r2, r3
 8014492:	d221      	bcs.n	80144d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014498:	f003 0302 	and.w	r3, r3, #2
 801449c:	2b00      	cmp	r3, #0
 801449e:	d111      	bne.n	80144c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	8b5b      	ldrh	r3, [r3, #26]
 80144a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d115      	bne.n	80144d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80144ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d007      	beq.n	80144c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80144b4:	6a3b      	ldr	r3, [r7, #32]
 80144b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d103      	bne.n	80144c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d009      	beq.n	80144d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80144c4:	89bb      	ldrh	r3, [r7, #12]
 80144c6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80144ca:	f023 0203 	bic.w	r2, r3, #3
 80144ce:	897b      	ldrh	r3, [r7, #10]
 80144d0:	4293      	cmp	r3, r2
 80144d2:	bf28      	it	cs
 80144d4:	4613      	movcs	r3, r2
 80144d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80144d8:	8af9      	ldrh	r1, [r7, #22]
 80144da:	7bfb      	ldrb	r3, [r7, #15]
 80144dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7fb f809 	bl	800f4f8 <pbuf_alloc>
 80144e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d101      	bne.n	80144f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80144ee:	2300      	movs	r3, #0
 80144f0:	e019      	b.n	8014526 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d006      	beq.n	8014508 <tcp_pbuf_prealloc+0xb8>
 80144fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014530 <tcp_pbuf_prealloc+0xe0>)
 80144fc:	f240 120b 	movw	r2, #267	@ 0x10b
 8014500:	490f      	ldr	r1, [pc, #60]	@ (8014540 <tcp_pbuf_prealloc+0xf0>)
 8014502:	480d      	ldr	r0, [pc, #52]	@ (8014538 <tcp_pbuf_prealloc+0xe8>)
 8014504:	f005 fc26 	bl	8019d54 <iprintf>
  *oversize = p->len - length;
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	895a      	ldrh	r2, [r3, #10]
 801450c:	89bb      	ldrh	r3, [r7, #12]
 801450e:	1ad3      	subs	r3, r2, r3
 8014510:	b29a      	uxth	r2, r3
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	89ba      	ldrh	r2, [r7, #12]
 801451a:	811a      	strh	r2, [r3, #8]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	891a      	ldrh	r2, [r3, #8]
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	815a      	strh	r2, [r3, #10]
  return p;
 8014524:	693b      	ldr	r3, [r7, #16]
}
 8014526:	4618      	mov	r0, r3
 8014528:	3718      	adds	r7, #24
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	0801e5a4 	.word	0x0801e5a4
 8014534:	0801e65c 	.word	0x0801e65c
 8014538:	0801e5f8 	.word	0x0801e5f8
 801453c:	0801e680 	.word	0x0801e680
 8014540:	0801e6a0 	.word	0x0801e6a0

08014544 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	460b      	mov	r3, r1
 801454e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <tcp_write_checks+0x20>
 8014556:	4b33      	ldr	r3, [pc, #204]	@ (8014624 <tcp_write_checks+0xe0>)
 8014558:	f240 1233 	movw	r2, #307	@ 0x133
 801455c:	4932      	ldr	r1, [pc, #200]	@ (8014628 <tcp_write_checks+0xe4>)
 801455e:	4833      	ldr	r0, [pc, #204]	@ (801462c <tcp_write_checks+0xe8>)
 8014560:	f005 fbf8 	bl	8019d54 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7d1b      	ldrb	r3, [r3, #20]
 8014568:	2b04      	cmp	r3, #4
 801456a:	d00e      	beq.n	801458a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014570:	2b07      	cmp	r3, #7
 8014572:	d00a      	beq.n	801458a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014578:	2b02      	cmp	r3, #2
 801457a:	d006      	beq.n	801458a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014580:	2b03      	cmp	r3, #3
 8014582:	d002      	beq.n	801458a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014584:	f06f 030a 	mvn.w	r3, #10
 8014588:	e048      	b.n	801461c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801458a:	887b      	ldrh	r3, [r7, #2]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <tcp_write_checks+0x50>
    return ERR_OK;
 8014590:	2300      	movs	r3, #0
 8014592:	e043      	b.n	801461c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801459a:	887a      	ldrh	r2, [r7, #2]
 801459c:	429a      	cmp	r2, r3
 801459e:	d909      	bls.n	80145b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	8b5b      	ldrh	r3, [r3, #26]
 80145a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80145ae:	f04f 33ff 	mov.w	r3, #4294967295
 80145b2:	e033      	b.n	801461c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80145ba:	2b08      	cmp	r3, #8
 80145bc:	d909      	bls.n	80145d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	8b5b      	ldrh	r3, [r3, #26]
 80145c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80145cc:	f04f 33ff 	mov.w	r3, #4294967295
 80145d0:	e024      	b.n	801461c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d00f      	beq.n	80145fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d11a      	bne.n	801461a <tcp_write_checks+0xd6>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d116      	bne.n	801461a <tcp_write_checks+0xd6>
 80145ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014624 <tcp_write_checks+0xe0>)
 80145ee:	f240 1255 	movw	r2, #341	@ 0x155
 80145f2:	490f      	ldr	r1, [pc, #60]	@ (8014630 <tcp_write_checks+0xec>)
 80145f4:	480d      	ldr	r0, [pc, #52]	@ (801462c <tcp_write_checks+0xe8>)
 80145f6:	f005 fbad 	bl	8019d54 <iprintf>
 80145fa:	e00e      	b.n	801461a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014600:	2b00      	cmp	r3, #0
 8014602:	d103      	bne.n	801460c <tcp_write_checks+0xc8>
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014608:	2b00      	cmp	r3, #0
 801460a:	d006      	beq.n	801461a <tcp_write_checks+0xd6>
 801460c:	4b05      	ldr	r3, [pc, #20]	@ (8014624 <tcp_write_checks+0xe0>)
 801460e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8014612:	4908      	ldr	r1, [pc, #32]	@ (8014634 <tcp_write_checks+0xf0>)
 8014614:	4805      	ldr	r0, [pc, #20]	@ (801462c <tcp_write_checks+0xe8>)
 8014616:	f005 fb9d 	bl	8019d54 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	0801e5a4 	.word	0x0801e5a4
 8014628:	0801e6b4 	.word	0x0801e6b4
 801462c:	0801e5f8 	.word	0x0801e5f8
 8014630:	0801e6d4 	.word	0x0801e6d4
 8014634:	0801e710 	.word	0x0801e710

08014638 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014638:	b590      	push	{r4, r7, lr}
 801463a:	b09b      	sub	sp, #108	@ 0x6c
 801463c:	af04      	add	r7, sp, #16
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	4611      	mov	r1, r2
 8014644:	461a      	mov	r2, r3
 8014646:	460b      	mov	r3, r1
 8014648:	80fb      	strh	r3, [r7, #6]
 801464a:	4613      	mov	r3, r2
 801464c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801464e:	2300      	movs	r3, #0
 8014650:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014652:	2300      	movs	r3, #0
 8014654:	653b      	str	r3, [r7, #80]	@ 0x50
 8014656:	2300      	movs	r3, #0
 8014658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801465a:	2300      	movs	r3, #0
 801465c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801465e:	2300      	movs	r3, #0
 8014660:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014662:	2300      	movs	r3, #0
 8014664:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014668:	2300      	movs	r3, #0
 801466a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014672:	2300      	movs	r3, #0
 8014674:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014676:	2300      	movs	r3, #0
 8014678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d109      	bne.n	8014694 <tcp_write+0x5c>
 8014680:	4ba4      	ldr	r3, [pc, #656]	@ (8014914 <tcp_write+0x2dc>)
 8014682:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8014686:	49a4      	ldr	r1, [pc, #656]	@ (8014918 <tcp_write+0x2e0>)
 8014688:	48a4      	ldr	r0, [pc, #656]	@ (801491c <tcp_write+0x2e4>)
 801468a:	f005 fb63 	bl	8019d54 <iprintf>
 801468e:	f06f 030f 	mvn.w	r3, #15
 8014692:	e32a      	b.n	8014cea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801469a:	085b      	lsrs	r3, r3, #1
 801469c:	b29a      	uxth	r2, r3
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80146a2:	4293      	cmp	r3, r2
 80146a4:	bf28      	it	cs
 80146a6:	4613      	movcs	r3, r2
 80146a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80146aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d102      	bne.n	80146b6 <tcp_write+0x7e>
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80146b4:	e000      	b.n	80146b8 <tcp_write+0x80>
 80146b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d109      	bne.n	80146d4 <tcp_write+0x9c>
 80146c0:	4b94      	ldr	r3, [pc, #592]	@ (8014914 <tcp_write+0x2dc>)
 80146c2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80146c6:	4996      	ldr	r1, [pc, #600]	@ (8014920 <tcp_write+0x2e8>)
 80146c8:	4894      	ldr	r0, [pc, #592]	@ (801491c <tcp_write+0x2e4>)
 80146ca:	f005 fb43 	bl	8019d54 <iprintf>
 80146ce:	f06f 030f 	mvn.w	r3, #15
 80146d2:	e30a      	b.n	8014cea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80146d4:	88fb      	ldrh	r3, [r7, #6]
 80146d6:	4619      	mov	r1, r3
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f7ff ff33 	bl	8014544 <tcp_write_checks>
 80146de:	4603      	mov	r3, r0
 80146e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80146e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <tcp_write+0xba>
    return err;
 80146ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80146f0:	e2fb      	b.n	8014cea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80146f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80146fc:	2300      	movs	r3, #0
 80146fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 80f6 	beq.w	80148f8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014710:	653b      	str	r3, [r7, #80]	@ 0x50
 8014712:	e002      	b.n	801471a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801471a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1f8      	bne.n	8014714 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014724:	7a9b      	ldrb	r3, [r3, #10]
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	b29b      	uxth	r3, r3
 801472a:	f003 0304 	and.w	r3, r3, #4
 801472e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014730:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014734:	891b      	ldrh	r3, [r3, #8]
 8014736:	4619      	mov	r1, r3
 8014738:	8c3b      	ldrh	r3, [r7, #32]
 801473a:	440b      	add	r3, r1
 801473c:	429a      	cmp	r2, r3
 801473e:	da06      	bge.n	801474e <tcp_write+0x116>
 8014740:	4b74      	ldr	r3, [pc, #464]	@ (8014914 <tcp_write+0x2dc>)
 8014742:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014746:	4977      	ldr	r1, [pc, #476]	@ (8014924 <tcp_write+0x2ec>)
 8014748:	4874      	ldr	r0, [pc, #464]	@ (801491c <tcp_write+0x2e4>)
 801474a:	f005 fb03 	bl	8019d54 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801474e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014750:	891a      	ldrh	r2, [r3, #8]
 8014752:	8c3b      	ldrh	r3, [r7, #32]
 8014754:	4413      	add	r3, r2
 8014756:	b29b      	uxth	r3, r3
 8014758:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014764:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014766:	8a7b      	ldrh	r3, [r7, #18]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d026      	beq.n	80147ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801476c:	8a7b      	ldrh	r3, [r7, #18]
 801476e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014770:	429a      	cmp	r2, r3
 8014772:	d206      	bcs.n	8014782 <tcp_write+0x14a>
 8014774:	4b67      	ldr	r3, [pc, #412]	@ (8014914 <tcp_write+0x2dc>)
 8014776:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801477a:	496b      	ldr	r1, [pc, #428]	@ (8014928 <tcp_write+0x2f0>)
 801477c:	4867      	ldr	r0, [pc, #412]	@ (801491c <tcp_write+0x2e4>)
 801477e:	f005 fae9 	bl	8019d54 <iprintf>
      seg = last_unsent;
 8014782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014784:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014786:	8a7b      	ldrh	r3, [r7, #18]
 8014788:	88fa      	ldrh	r2, [r7, #6]
 801478a:	4293      	cmp	r3, r2
 801478c:	bf28      	it	cs
 801478e:	4613      	movcs	r3, r2
 8014790:	b29b      	uxth	r3, r3
 8014792:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014794:	4293      	cmp	r3, r2
 8014796:	bf28      	it	cs
 8014798:	4613      	movcs	r3, r2
 801479a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801479c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80147a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80147a2:	4413      	add	r3, r2
 80147a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80147a8:	8a7a      	ldrh	r2, [r7, #18]
 80147aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80147b2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80147b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80147b6:	1ad3      	subs	r3, r2, r3
 80147b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80147ba:	8a7b      	ldrh	r3, [r7, #18]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d00b      	beq.n	80147d8 <tcp_write+0x1a0>
 80147c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80147c4:	88fb      	ldrh	r3, [r7, #6]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d006      	beq.n	80147d8 <tcp_write+0x1a0>
 80147ca:	4b52      	ldr	r3, [pc, #328]	@ (8014914 <tcp_write+0x2dc>)
 80147cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147d0:	4956      	ldr	r1, [pc, #344]	@ (801492c <tcp_write+0x2f4>)
 80147d2:	4852      	ldr	r0, [pc, #328]	@ (801491c <tcp_write+0x2e4>)
 80147d4:	f005 fabe 	bl	8019d54 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80147d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80147dc:	88fb      	ldrh	r3, [r7, #6]
 80147de:	429a      	cmp	r2, r3
 80147e0:	f080 8167 	bcs.w	8014ab2 <tcp_write+0x47a>
 80147e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	f000 8163 	beq.w	8014ab2 <tcp_write+0x47a>
 80147ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147ee:	891b      	ldrh	r3, [r3, #8]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 815e 	beq.w	8014ab2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80147f6:	88fa      	ldrh	r2, [r7, #6]
 80147f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147fc:	1ad2      	subs	r2, r2, r3
 80147fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014800:	4293      	cmp	r3, r2
 8014802:	bfa8      	it	ge
 8014804:	4613      	movge	r3, r2
 8014806:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801480a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801480c:	797b      	ldrb	r3, [r7, #5]
 801480e:	f003 0301 	and.w	r3, r3, #1
 8014812:	2b00      	cmp	r3, #0
 8014814:	d027      	beq.n	8014866 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014816:	f107 0012 	add.w	r0, r7, #18
 801481a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801481c:	8bf9      	ldrh	r1, [r7, #30]
 801481e:	2301      	movs	r3, #1
 8014820:	9302      	str	r3, [sp, #8]
 8014822:	797b      	ldrb	r3, [r7, #5]
 8014824:	9301      	str	r3, [sp, #4]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	9300      	str	r3, [sp, #0]
 801482a:	4603      	mov	r3, r0
 801482c:	2000      	movs	r0, #0
 801482e:	f7ff fe0f 	bl	8014450 <tcp_pbuf_prealloc>
 8014832:	6578      	str	r0, [r7, #84]	@ 0x54
 8014834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014836:	2b00      	cmp	r3, #0
 8014838:	f000 8225 	beq.w	8014c86 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801483c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801483e:	6858      	ldr	r0, [r3, #4]
 8014840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014844:	68ba      	ldr	r2, [r7, #8]
 8014846:	4413      	add	r3, r2
 8014848:	8bfa      	ldrh	r2, [r7, #30]
 801484a:	4619      	mov	r1, r3
 801484c:	f005 fd01 	bl	801a252 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014850:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014852:	f7fb f9c3 	bl	800fbdc <pbuf_clen>
 8014856:	4603      	mov	r3, r0
 8014858:	461a      	mov	r2, r3
 801485a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801485e:	4413      	add	r3, r2
 8014860:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014864:	e041      	b.n	80148ea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	637b      	str	r3, [r7, #52]	@ 0x34
 801486c:	e002      	b.n	8014874 <tcp_write+0x23c>
 801486e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	637b      	str	r3, [r7, #52]	@ 0x34
 8014874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1f8      	bne.n	801486e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801487c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801487e:	7b1b      	ldrb	r3, [r3, #12]
 8014880:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014884:	2b00      	cmp	r3, #0
 8014886:	d115      	bne.n	80148b4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801488e:	8952      	ldrh	r2, [r2, #10]
 8014890:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	429a      	cmp	r2, r3
 8014896:	d10d      	bne.n	80148b4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801489c:	2b00      	cmp	r3, #0
 801489e:	d006      	beq.n	80148ae <tcp_write+0x276>
 80148a0:	4b1c      	ldr	r3, [pc, #112]	@ (8014914 <tcp_write+0x2dc>)
 80148a2:	f240 2231 	movw	r2, #561	@ 0x231
 80148a6:	4922      	ldr	r1, [pc, #136]	@ (8014930 <tcp_write+0x2f8>)
 80148a8:	481c      	ldr	r0, [pc, #112]	@ (801491c <tcp_write+0x2e4>)
 80148aa:	f005 fa53 	bl	8019d54 <iprintf>
          extendlen = seglen;
 80148ae:	8bfb      	ldrh	r3, [r7, #30]
 80148b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80148b2:	e01a      	b.n	80148ea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80148b4:	8bfb      	ldrh	r3, [r7, #30]
 80148b6:	2201      	movs	r2, #1
 80148b8:	4619      	mov	r1, r3
 80148ba:	2000      	movs	r0, #0
 80148bc:	f7fa fe1c 	bl	800f4f8 <pbuf_alloc>
 80148c0:	6578      	str	r0, [r7, #84]	@ 0x54
 80148c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f000 81e0 	beq.w	8014c8a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80148ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	441a      	add	r2, r3
 80148d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80148d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80148d8:	f7fb f980 	bl	800fbdc <pbuf_clen>
 80148dc:	4603      	mov	r3, r0
 80148de:	461a      	mov	r2, r3
 80148e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80148e4:	4413      	add	r3, r2
 80148e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80148ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80148ee:	8bfb      	ldrh	r3, [r7, #30]
 80148f0:	4413      	add	r3, r2
 80148f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80148f6:	e0dc      	b.n	8014ab2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f000 80d7 	beq.w	8014ab2 <tcp_write+0x47a>
 8014904:	4b03      	ldr	r3, [pc, #12]	@ (8014914 <tcp_write+0x2dc>)
 8014906:	f240 224a 	movw	r2, #586	@ 0x24a
 801490a:	490a      	ldr	r1, [pc, #40]	@ (8014934 <tcp_write+0x2fc>)
 801490c:	4803      	ldr	r0, [pc, #12]	@ (801491c <tcp_write+0x2e4>)
 801490e:	f005 fa21 	bl	8019d54 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014912:	e0ce      	b.n	8014ab2 <tcp_write+0x47a>
 8014914:	0801e5a4 	.word	0x0801e5a4
 8014918:	0801e744 	.word	0x0801e744
 801491c:	0801e5f8 	.word	0x0801e5f8
 8014920:	0801e75c 	.word	0x0801e75c
 8014924:	0801e790 	.word	0x0801e790
 8014928:	0801e7a8 	.word	0x0801e7a8
 801492c:	0801e7c8 	.word	0x0801e7c8
 8014930:	0801e7e8 	.word	0x0801e7e8
 8014934:	0801e814 	.word	0x0801e814
    struct pbuf *p;
    u16_t left = len - pos;
 8014938:	88fa      	ldrh	r2, [r7, #6]
 801493a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014942:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014946:	b29b      	uxth	r3, r3
 8014948:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801494e:	8b7a      	ldrh	r2, [r7, #26]
 8014950:	8bbb      	ldrh	r3, [r7, #28]
 8014952:	4293      	cmp	r3, r2
 8014954:	bf28      	it	cs
 8014956:	4613      	movcs	r3, r2
 8014958:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801495a:	797b      	ldrb	r3, [r7, #5]
 801495c:	f003 0301 	and.w	r3, r3, #1
 8014960:	2b00      	cmp	r3, #0
 8014962:	d036      	beq.n	80149d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014964:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014968:	b29a      	uxth	r2, r3
 801496a:	8b3b      	ldrh	r3, [r7, #24]
 801496c:	4413      	add	r3, r2
 801496e:	b299      	uxth	r1, r3
 8014970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014972:	2b00      	cmp	r3, #0
 8014974:	bf0c      	ite	eq
 8014976:	2301      	moveq	r3, #1
 8014978:	2300      	movne	r3, #0
 801497a:	b2db      	uxtb	r3, r3
 801497c:	f107 0012 	add.w	r0, r7, #18
 8014980:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014982:	9302      	str	r3, [sp, #8]
 8014984:	797b      	ldrb	r3, [r7, #5]
 8014986:	9301      	str	r3, [sp, #4]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	4603      	mov	r3, r0
 801498e:	2036      	movs	r0, #54	@ 0x36
 8014990:	f7ff fd5e 	bl	8014450 <tcp_pbuf_prealloc>
 8014994:	6338      	str	r0, [r7, #48]	@ 0x30
 8014996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 8178 	beq.w	8014c8e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a0:	895b      	ldrh	r3, [r3, #10]
 80149a2:	8b3a      	ldrh	r2, [r7, #24]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d906      	bls.n	80149b6 <tcp_write+0x37e>
 80149a8:	4b8c      	ldr	r3, [pc, #560]	@ (8014bdc <tcp_write+0x5a4>)
 80149aa:	f240 2266 	movw	r2, #614	@ 0x266
 80149ae:	498c      	ldr	r1, [pc, #560]	@ (8014be0 <tcp_write+0x5a8>)
 80149b0:	488c      	ldr	r0, [pc, #560]	@ (8014be4 <tcp_write+0x5ac>)
 80149b2:	f005 f9cf 	bl	8019d54 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80149b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b8:	685a      	ldr	r2, [r3, #4]
 80149ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80149be:	18d0      	adds	r0, r2, r3
 80149c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	4413      	add	r3, r2
 80149c8:	8b3a      	ldrh	r2, [r7, #24]
 80149ca:	4619      	mov	r1, r3
 80149cc:	f005 fc41 	bl	801a252 <memcpy>
 80149d0:	e02f      	b.n	8014a32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80149d2:	8a7b      	ldrh	r3, [r7, #18]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d006      	beq.n	80149e6 <tcp_write+0x3ae>
 80149d8:	4b80      	ldr	r3, [pc, #512]	@ (8014bdc <tcp_write+0x5a4>)
 80149da:	f240 2271 	movw	r2, #625	@ 0x271
 80149de:	4982      	ldr	r1, [pc, #520]	@ (8014be8 <tcp_write+0x5b0>)
 80149e0:	4880      	ldr	r0, [pc, #512]	@ (8014be4 <tcp_write+0x5ac>)
 80149e2:	f005 f9b7 	bl	8019d54 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80149e6:	8b3b      	ldrh	r3, [r7, #24]
 80149e8:	2201      	movs	r2, #1
 80149ea:	4619      	mov	r1, r3
 80149ec:	2036      	movs	r0, #54	@ 0x36
 80149ee:	f7fa fd83 	bl	800f4f8 <pbuf_alloc>
 80149f2:	6178      	str	r0, [r7, #20]
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f000 814b 	beq.w	8014c92 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80149fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	441a      	add	r2, r3
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014a08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014a12:	4619      	mov	r1, r3
 8014a14:	2036      	movs	r0, #54	@ 0x36
 8014a16:	f7fa fd6f 	bl	800f4f8 <pbuf_alloc>
 8014a1a:	6338      	str	r0, [r7, #48]	@ 0x30
 8014a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d103      	bne.n	8014a2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014a22:	6978      	ldr	r0, [r7, #20]
 8014a24:	f7fb f84c 	bl	800fac0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014a28:	e136      	b.n	8014c98 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014a2a:	6979      	ldr	r1, [r7, #20]
 8014a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a2e:	f7fb f915 	bl	800fc5c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a34:	f7fb f8d2 	bl	800fbdc <pbuf_clen>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014a40:	4413      	add	r3, r2
 8014a42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014a46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014a4a:	2b09      	cmp	r3, #9
 8014a4c:	d903      	bls.n	8014a56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a50:	f7fb f836 	bl	800fac0 <pbuf_free>
      goto memerr;
 8014a54:	e120      	b.n	8014c98 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014a5e:	441a      	add	r2, r3
 8014a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	4613      	mov	r3, r2
 8014a68:	2200      	movs	r2, #0
 8014a6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f7ff fc53 	bl	8014318 <tcp_create_segment>
 8014a72:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f000 810d 	beq.w	8014c96 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d102      	bne.n	8014a88 <tcp_write+0x450>
      queue = seg;
 8014a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a86:	e00c      	b.n	8014aa2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d106      	bne.n	8014a9c <tcp_write+0x464>
 8014a8e:	4b53      	ldr	r3, [pc, #332]	@ (8014bdc <tcp_write+0x5a4>)
 8014a90:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014a94:	4955      	ldr	r1, [pc, #340]	@ (8014bec <tcp_write+0x5b4>)
 8014a96:	4853      	ldr	r0, [pc, #332]	@ (8014be4 <tcp_write+0x5ac>)
 8014a98:	f005 f95c 	bl	8019d54 <iprintf>
      prev_seg->next = seg;
 8014a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014aa0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014aa4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014aaa:	8b3b      	ldrh	r3, [r7, #24]
 8014aac:	4413      	add	r3, r2
 8014aae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014ab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014ab6:	88fb      	ldrh	r3, [r7, #6]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	f4ff af3d 	bcc.w	8014938 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014abe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d02c      	beq.n	8014b1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ac6:	685b      	ldr	r3, [r3, #4]
 8014ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014aca:	e01e      	b.n	8014b0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8014acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ace:	891a      	ldrh	r2, [r3, #8]
 8014ad0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ad2:	4413      	add	r3, r2
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ad8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d110      	bne.n	8014b04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014ae8:	8952      	ldrh	r2, [r2, #10]
 8014aea:	4413      	add	r3, r2
 8014aec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014aee:	68b9      	ldr	r1, [r7, #8]
 8014af0:	4618      	mov	r0, r3
 8014af2:	f005 fbae 	bl	801a252 <memcpy>
        p->len += oversize_used;
 8014af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af8:	895a      	ldrh	r2, [r3, #10]
 8014afa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014afc:	4413      	add	r3, r2
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d1dd      	bne.n	8014acc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b12:	891a      	ldrh	r2, [r3, #8]
 8014b14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014b16:	4413      	add	r3, r2
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014b1e:	8a7a      	ldrh	r2, [r7, #18]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d018      	beq.n	8014b5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <tcp_write+0x508>
 8014b32:	4b2a      	ldr	r3, [pc, #168]	@ (8014bdc <tcp_write+0x5a4>)
 8014b34:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8014b38:	492d      	ldr	r1, [pc, #180]	@ (8014bf0 <tcp_write+0x5b8>)
 8014b3a:	482a      	ldr	r0, [pc, #168]	@ (8014be4 <tcp_write+0x5ac>)
 8014b3c:	f005 f90a 	bl	8019d54 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fb f888 	bl	800fc5c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b4e:	891a      	ldrh	r2, [r3, #8]
 8014b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b52:	891b      	ldrh	r3, [r3, #8]
 8014b54:	4413      	add	r3, r2
 8014b56:	b29a      	uxth	r2, r3
 8014b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b5a:	811a      	strh	r2, [r3, #8]
 8014b5c:	e037      	b.n	8014bce <tcp_write+0x596>
  } else if (extendlen > 0) {
 8014b5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d034      	beq.n	8014bce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d003      	beq.n	8014b72 <tcp_write+0x53a>
 8014b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <tcp_write+0x548>
 8014b72:	4b1a      	ldr	r3, [pc, #104]	@ (8014bdc <tcp_write+0x5a4>)
 8014b74:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014b78:	491e      	ldr	r1, [pc, #120]	@ (8014bf4 <tcp_write+0x5bc>)
 8014b7a:	481a      	ldr	r0, [pc, #104]	@ (8014be4 <tcp_write+0x5ac>)
 8014b7c:	f005 f8ea 	bl	8019d54 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b86:	e009      	b.n	8014b9c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b8a:	891a      	ldrh	r2, [r3, #8]
 8014b8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b8e:	4413      	add	r3, r2
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d1f1      	bne.n	8014b88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba6:	891a      	ldrh	r2, [r3, #8]
 8014ba8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014baa:	4413      	add	r3, r2
 8014bac:	b29a      	uxth	r2, r3
 8014bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bb0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bb4:	895a      	ldrh	r2, [r3, #10]
 8014bb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bb8:	4413      	add	r3, r2
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bc2:	891a      	ldrh	r2, [r3, #8]
 8014bc4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bc6:	4413      	add	r3, r2
 8014bc8:	b29a      	uxth	r2, r3
 8014bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d111      	bne.n	8014bf8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014bda:	e010      	b.n	8014bfe <tcp_write+0x5c6>
 8014bdc:	0801e5a4 	.word	0x0801e5a4
 8014be0:	0801e844 	.word	0x0801e844
 8014be4:	0801e5f8 	.word	0x0801e5f8
 8014be8:	0801e884 	.word	0x0801e884
 8014bec:	0801e894 	.word	0x0801e894
 8014bf0:	0801e8a8 	.word	0x0801e8a8
 8014bf4:	0801e8e0 	.word	0x0801e8e0
  } else {
    last_unsent->next = queue;
 8014bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014bfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c02:	88fb      	ldrh	r3, [r7, #6]
 8014c04:	441a      	add	r2, r3
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014c10:	88fb      	ldrh	r3, [r7, #6]
 8014c12:	1ad3      	subs	r3, r2, r3
 8014c14:	b29a      	uxth	r2, r3
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014c22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d00e      	beq.n	8014c4e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d10a      	bne.n	8014c4e <tcp_write+0x616>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d106      	bne.n	8014c4e <tcp_write+0x616>
 8014c40:	4b2c      	ldr	r3, [pc, #176]	@ (8014cf4 <tcp_write+0x6bc>)
 8014c42:	f240 3212 	movw	r2, #786	@ 0x312
 8014c46:	492c      	ldr	r1, [pc, #176]	@ (8014cf8 <tcp_write+0x6c0>)
 8014c48:	482c      	ldr	r0, [pc, #176]	@ (8014cfc <tcp_write+0x6c4>)
 8014c4a:	f005 f883 	bl	8019d54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d016      	beq.n	8014c82 <tcp_write+0x64a>
 8014c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d012      	beq.n	8014c82 <tcp_write+0x64a>
 8014c5c:	797b      	ldrb	r3, [r7, #5]
 8014c5e:	f003 0302 	and.w	r3, r3, #2
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d10d      	bne.n	8014c82 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	899b      	ldrh	r3, [r3, #12]
 8014c6c:	b29c      	uxth	r4, r3
 8014c6e:	2008      	movs	r0, #8
 8014c70:	f7f9 fb7a 	bl	800e368 <lwip_htons>
 8014c74:	4603      	mov	r3, r0
 8014c76:	461a      	mov	r2, r3
 8014c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	4322      	orrs	r2, r4
 8014c7e:	b292      	uxth	r2, r2
 8014c80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	e031      	b.n	8014cea <tcp_write+0x6b2>
          goto memerr;
 8014c86:	bf00      	nop
 8014c88:	e006      	b.n	8014c98 <tcp_write+0x660>
            goto memerr;
 8014c8a:	bf00      	nop
 8014c8c:	e004      	b.n	8014c98 <tcp_write+0x660>
        goto memerr;
 8014c8e:	bf00      	nop
 8014c90:	e002      	b.n	8014c98 <tcp_write+0x660>
        goto memerr;
 8014c92:	bf00      	nop
 8014c94:	e000      	b.n	8014c98 <tcp_write+0x660>
      goto memerr;
 8014c96:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	8b5b      	ldrh	r3, [r3, #26]
 8014c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d002      	beq.n	8014cb2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8014cac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014cae:	f7fa ff07 	bl	800fac0 <pbuf_free>
  }
  if (queue != NULL) {
 8014cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <tcp_write+0x686>
    tcp_segs_free(queue);
 8014cb8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014cba:	f7fc fb71 	bl	80113a0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d00e      	beq.n	8014ce6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d10a      	bne.n	8014ce6 <tcp_write+0x6ae>
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d106      	bne.n	8014ce6 <tcp_write+0x6ae>
 8014cd8:	4b06      	ldr	r3, [pc, #24]	@ (8014cf4 <tcp_write+0x6bc>)
 8014cda:	f240 3227 	movw	r2, #807	@ 0x327
 8014cde:	4906      	ldr	r1, [pc, #24]	@ (8014cf8 <tcp_write+0x6c0>)
 8014ce0:	4806      	ldr	r0, [pc, #24]	@ (8014cfc <tcp_write+0x6c4>)
 8014ce2:	f005 f837 	bl	8019d54 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	375c      	adds	r7, #92	@ 0x5c
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd90      	pop	{r4, r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	0801e5a4 	.word	0x0801e5a4
 8014cf8:	0801e918 	.word	0x0801e918
 8014cfc:	0801e5f8 	.word	0x0801e5f8

08014d00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014d00:	b590      	push	{r4, r7, lr}
 8014d02:	b08b      	sub	sp, #44	@ 0x2c
 8014d04:	af02      	add	r7, sp, #8
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	61fb      	str	r3, [r7, #28]
 8014d10:	2300      	movs	r3, #0
 8014d12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014d14:	2300      	movs	r3, #0
 8014d16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d106      	bne.n	8014d2c <tcp_split_unsent_seg+0x2c>
 8014d1e:	4b95      	ldr	r3, [pc, #596]	@ (8014f74 <tcp_split_unsent_seg+0x274>)
 8014d20:	f240 324b 	movw	r2, #843	@ 0x34b
 8014d24:	4994      	ldr	r1, [pc, #592]	@ (8014f78 <tcp_split_unsent_seg+0x278>)
 8014d26:	4895      	ldr	r0, [pc, #596]	@ (8014f7c <tcp_split_unsent_seg+0x27c>)
 8014d28:	f005 f814 	bl	8019d54 <iprintf>

  useg = pcb->unsent;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d102      	bne.n	8014d3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014d38:	f04f 33ff 	mov.w	r3, #4294967295
 8014d3c:	e116      	b.n	8014f6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014d3e:	887b      	ldrh	r3, [r7, #2]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d109      	bne.n	8014d58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014d44:	4b8b      	ldr	r3, [pc, #556]	@ (8014f74 <tcp_split_unsent_seg+0x274>)
 8014d46:	f240 3253 	movw	r2, #851	@ 0x353
 8014d4a:	498d      	ldr	r1, [pc, #564]	@ (8014f80 <tcp_split_unsent_seg+0x280>)
 8014d4c:	488b      	ldr	r0, [pc, #556]	@ (8014f7c <tcp_split_unsent_seg+0x27c>)
 8014d4e:	f005 f801 	bl	8019d54 <iprintf>
    return ERR_VAL;
 8014d52:	f06f 0305 	mvn.w	r3, #5
 8014d56:	e109      	b.n	8014f6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	891b      	ldrh	r3, [r3, #8]
 8014d5c:	887a      	ldrh	r2, [r7, #2]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d301      	bcc.n	8014d66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014d62:	2300      	movs	r3, #0
 8014d64:	e102      	b.n	8014f6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d6a:	887a      	ldrh	r2, [r7, #2]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d906      	bls.n	8014d7e <tcp_split_unsent_seg+0x7e>
 8014d70:	4b80      	ldr	r3, [pc, #512]	@ (8014f74 <tcp_split_unsent_seg+0x274>)
 8014d72:	f240 325b 	movw	r2, #859	@ 0x35b
 8014d76:	4983      	ldr	r1, [pc, #524]	@ (8014f84 <tcp_split_unsent_seg+0x284>)
 8014d78:	4880      	ldr	r0, [pc, #512]	@ (8014f7c <tcp_split_unsent_seg+0x27c>)
 8014d7a:	f004 ffeb 	bl	8019d54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	891b      	ldrh	r3, [r3, #8]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d106      	bne.n	8014d94 <tcp_split_unsent_seg+0x94>
 8014d86:	4b7b      	ldr	r3, [pc, #492]	@ (8014f74 <tcp_split_unsent_seg+0x274>)
 8014d88:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014d8c:	497e      	ldr	r1, [pc, #504]	@ (8014f88 <tcp_split_unsent_seg+0x288>)
 8014d8e:	487b      	ldr	r0, [pc, #492]	@ (8014f7c <tcp_split_unsent_seg+0x27c>)
 8014d90:	f004 ffe0 	bl	8019d54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	7a9b      	ldrb	r3, [r3, #10]
 8014d98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014d9a:	7bfb      	ldrb	r3, [r7, #15]
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	f003 0304 	and.w	r3, r3, #4
 8014da4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	891a      	ldrh	r2, [r3, #8]
 8014daa:	887b      	ldrh	r3, [r7, #2]
 8014dac:	1ad3      	subs	r3, r2, r3
 8014dae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014db0:	7bbb      	ldrb	r3, [r7, #14]
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	89bb      	ldrh	r3, [r7, #12]
 8014db6:	4413      	add	r3, r2
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	2036      	movs	r0, #54	@ 0x36
 8014dc2:	f7fa fb99 	bl	800f4f8 <pbuf_alloc>
 8014dc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 80b7 	beq.w	8014f3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	891a      	ldrh	r2, [r3, #8]
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	891b      	ldrh	r3, [r3, #8]
 8014dda:	1ad3      	subs	r3, r2, r3
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	887b      	ldrh	r3, [r7, #2]
 8014de0:	4413      	add	r3, r2
 8014de2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	6858      	ldr	r0, [r3, #4]
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	685a      	ldr	r2, [r3, #4]
 8014dec:	7bbb      	ldrb	r3, [r7, #14]
 8014dee:	18d1      	adds	r1, r2, r3
 8014df0:	897b      	ldrh	r3, [r7, #10]
 8014df2:	89ba      	ldrh	r2, [r7, #12]
 8014df4:	f7fb f85a 	bl	800feac <pbuf_copy_partial>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	89bb      	ldrh	r3, [r7, #12]
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	f040 809f 	bne.w	8014f42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	899b      	ldrh	r3, [r3, #12]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f9 faab 	bl	800e368 <lwip_htons>
 8014e12:	4603      	mov	r3, r0
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014e1a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014e20:	7efb      	ldrb	r3, [r7, #27]
 8014e22:	f003 0308 	and.w	r3, r3, #8
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d007      	beq.n	8014e3a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014e2a:	7efb      	ldrb	r3, [r7, #27]
 8014e2c:	f023 0308 	bic.w	r3, r3, #8
 8014e30:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014e32:	7ebb      	ldrb	r3, [r7, #26]
 8014e34:	f043 0308 	orr.w	r3, r3, #8
 8014e38:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014e3a:	7efb      	ldrb	r3, [r7, #27]
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d007      	beq.n	8014e54 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014e44:	7efb      	ldrb	r3, [r7, #27]
 8014e46:	f023 0301 	bic.w	r3, r3, #1
 8014e4a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014e4c:	7ebb      	ldrb	r3, [r7, #26]
 8014e4e:	f043 0301 	orr.w	r3, r3, #1
 8014e52:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f9 fa99 	bl	800e392 <lwip_htonl>
 8014e60:	4602      	mov	r2, r0
 8014e62:	887b      	ldrh	r3, [r7, #2]
 8014e64:	18d1      	adds	r1, r2, r3
 8014e66:	7eba      	ldrb	r2, [r7, #26]
 8014e68:	7bfb      	ldrb	r3, [r7, #15]
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	6939      	ldr	r1, [r7, #16]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff fa51 	bl	8014318 <tcp_create_segment>
 8014e76:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d063      	beq.n	8014f46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7fa feaa 	bl	800fbdc <pbuf_clen>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	6858      	ldr	r0, [r3, #4]
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	891a      	ldrh	r2, [r3, #8]
 8014ea6:	89bb      	ldrh	r3, [r7, #12]
 8014ea8:	1ad3      	subs	r3, r2, r3
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	4619      	mov	r1, r3
 8014eae:	f7fa fc81 	bl	800f7b4 <pbuf_realloc>
  useg->len -= remainder;
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	891a      	ldrh	r2, [r3, #8]
 8014eb6:	89bb      	ldrh	r3, [r7, #12]
 8014eb8:	1ad3      	subs	r3, r2, r3
 8014eba:	b29a      	uxth	r2, r3
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	899b      	ldrh	r3, [r3, #12]
 8014ec6:	b29c      	uxth	r4, r3
 8014ec8:	7efb      	ldrb	r3, [r7, #27]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7f9 fa4b 	bl	800e368 <lwip_htons>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	4322      	orrs	r2, r4
 8014edc:	b292      	uxth	r2, r2
 8014ede:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7fa fe79 	bl	800fbdc <pbuf_clen>
 8014eea:	4603      	mov	r3, r0
 8014eec:	461a      	mov	r2, r3
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ef4:	4413      	add	r3, r2
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014efe:	69fb      	ldr	r3, [r7, #28]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fa fe6a 	bl	800fbdc <pbuf_clen>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f12:	4413      	add	r3, r2
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	69fa      	ldr	r2, [r7, #28]
 8014f28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d103      	bne.n	8014f3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2200      	movs	r2, #0
 8014f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e016      	b.n	8014f6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014f3e:	bf00      	nop
 8014f40:	e002      	b.n	8014f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014f42:	bf00      	nop
 8014f44:	e000      	b.n	8014f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014f46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d006      	beq.n	8014f5c <tcp_split_unsent_seg+0x25c>
 8014f4e:	4b09      	ldr	r3, [pc, #36]	@ (8014f74 <tcp_split_unsent_seg+0x274>)
 8014f50:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014f54:	490d      	ldr	r1, [pc, #52]	@ (8014f8c <tcp_split_unsent_seg+0x28c>)
 8014f56:	4809      	ldr	r0, [pc, #36]	@ (8014f7c <tcp_split_unsent_seg+0x27c>)
 8014f58:	f004 fefc 	bl	8019d54 <iprintf>
  if (p != NULL) {
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d002      	beq.n	8014f68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014f62:	6938      	ldr	r0, [r7, #16]
 8014f64:	f7fa fdac 	bl	800fac0 <pbuf_free>
  }

  return ERR_MEM;
 8014f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3724      	adds	r7, #36	@ 0x24
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd90      	pop	{r4, r7, pc}
 8014f74:	0801e5a4 	.word	0x0801e5a4
 8014f78:	0801e938 	.word	0x0801e938
 8014f7c:	0801e5f8 	.word	0x0801e5f8
 8014f80:	0801e95c 	.word	0x0801e95c
 8014f84:	0801e980 	.word	0x0801e980
 8014f88:	0801e990 	.word	0x0801e990
 8014f8c:	0801e9a0 	.word	0x0801e9a0

08014f90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014f90:	b590      	push	{r4, r7, lr}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_send_fin+0x1c>
 8014f9e:	4b21      	ldr	r3, [pc, #132]	@ (8015024 <tcp_send_fin+0x94>)
 8014fa0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014fa4:	4920      	ldr	r1, [pc, #128]	@ (8015028 <tcp_send_fin+0x98>)
 8014fa6:	4821      	ldr	r0, [pc, #132]	@ (801502c <tcp_send_fin+0x9c>)
 8014fa8:	f004 fed4 	bl	8019d54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d02e      	beq.n	8015012 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fb8:	60fb      	str	r3, [r7, #12]
 8014fba:	e002      	b.n	8014fc2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1f8      	bne.n	8014fbc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	68db      	ldr	r3, [r3, #12]
 8014fce:	899b      	ldrh	r3, [r3, #12]
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7f9 f9c8 	bl	800e368 <lwip_htons>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	f003 0307 	and.w	r3, r3, #7
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d116      	bne.n	8015012 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	68db      	ldr	r3, [r3, #12]
 8014fe8:	899b      	ldrh	r3, [r3, #12]
 8014fea:	b29c      	uxth	r4, r3
 8014fec:	2001      	movs	r0, #1
 8014fee:	f7f9 f9bb 	bl	800e368 <lwip_htons>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	4322      	orrs	r2, r4
 8014ffc:	b292      	uxth	r2, r2
 8014ffe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	8b5b      	ldrh	r3, [r3, #26]
 8015004:	f043 0320 	orr.w	r3, r3, #32
 8015008:	b29a      	uxth	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801500e:	2300      	movs	r3, #0
 8015010:	e004      	b.n	801501c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015012:	2101      	movs	r1, #1
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 f80b 	bl	8015030 <tcp_enqueue_flags>
 801501a:	4603      	mov	r3, r0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3714      	adds	r7, #20
 8015020:	46bd      	mov	sp, r7
 8015022:	bd90      	pop	{r4, r7, pc}
 8015024:	0801e5a4 	.word	0x0801e5a4
 8015028:	0801e9ac 	.word	0x0801e9ac
 801502c:	0801e5f8 	.word	0x0801e5f8

08015030 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b08a      	sub	sp, #40	@ 0x28
 8015034:	af02      	add	r7, sp, #8
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	460b      	mov	r3, r1
 801503a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801503c:	2300      	movs	r3, #0
 801503e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015040:	2300      	movs	r3, #0
 8015042:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015044:	78fb      	ldrb	r3, [r7, #3]
 8015046:	f003 0303 	and.w	r3, r3, #3
 801504a:	2b00      	cmp	r3, #0
 801504c:	d106      	bne.n	801505c <tcp_enqueue_flags+0x2c>
 801504e:	4b67      	ldr	r3, [pc, #412]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 8015050:	f240 4211 	movw	r2, #1041	@ 0x411
 8015054:	4966      	ldr	r1, [pc, #408]	@ (80151f0 <tcp_enqueue_flags+0x1c0>)
 8015056:	4867      	ldr	r0, [pc, #412]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 8015058:	f004 fe7c 	bl	8019d54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d106      	bne.n	8015070 <tcp_enqueue_flags+0x40>
 8015062:	4b62      	ldr	r3, [pc, #392]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 8015064:	f240 4213 	movw	r2, #1043	@ 0x413
 8015068:	4963      	ldr	r1, [pc, #396]	@ (80151f8 <tcp_enqueue_flags+0x1c8>)
 801506a:	4862      	ldr	r0, [pc, #392]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 801506c:	f004 fe72 	bl	8019d54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015070:	78fb      	ldrb	r3, [r7, #3]
 8015072:	f003 0302 	and.w	r3, r3, #2
 8015076:	2b00      	cmp	r3, #0
 8015078:	d001      	beq.n	801507e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801507a:	2301      	movs	r3, #1
 801507c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801507e:	7ffb      	ldrb	r3, [r7, #31]
 8015080:	009b      	lsls	r3, r3, #2
 8015082:	b2db      	uxtb	r3, r3
 8015084:	f003 0304 	and.w	r3, r3, #4
 8015088:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	b29b      	uxth	r3, r3
 801508e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015092:	4619      	mov	r1, r3
 8015094:	2036      	movs	r0, #54	@ 0x36
 8015096:	f7fa fa2f 	bl	800f4f8 <pbuf_alloc>
 801509a:	6138      	str	r0, [r7, #16]
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d109      	bne.n	80150b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	8b5b      	ldrh	r3, [r3, #26]
 80150a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150aa:	b29a      	uxth	r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80150b0:	f04f 33ff 	mov.w	r3, #4294967295
 80150b4:	e095      	b.n	80151e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	895a      	ldrh	r2, [r3, #10]
 80150ba:	7dfb      	ldrb	r3, [r7, #23]
 80150bc:	b29b      	uxth	r3, r3
 80150be:	429a      	cmp	r2, r3
 80150c0:	d206      	bcs.n	80150d0 <tcp_enqueue_flags+0xa0>
 80150c2:	4b4a      	ldr	r3, [pc, #296]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 80150c4:	f240 4239 	movw	r2, #1081	@ 0x439
 80150c8:	494c      	ldr	r1, [pc, #304]	@ (80151fc <tcp_enqueue_flags+0x1cc>)
 80150ca:	484a      	ldr	r0, [pc, #296]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 80150cc:	f004 fe42 	bl	8019d54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80150d4:	78fa      	ldrb	r2, [r7, #3]
 80150d6:	7ffb      	ldrb	r3, [r7, #31]
 80150d8:	9300      	str	r3, [sp, #0]
 80150da:	460b      	mov	r3, r1
 80150dc:	6939      	ldr	r1, [r7, #16]
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f7ff f91a 	bl	8014318 <tcp_create_segment>
 80150e4:	60f8      	str	r0, [r7, #12]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d109      	bne.n	8015100 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	8b5b      	ldrh	r3, [r3, #26]
 80150f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80150fa:	f04f 33ff 	mov.w	r3, #4294967295
 80150fe:	e070      	b.n	80151e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	68db      	ldr	r3, [r3, #12]
 8015104:	f003 0303 	and.w	r3, r3, #3
 8015108:	2b00      	cmp	r3, #0
 801510a:	d006      	beq.n	801511a <tcp_enqueue_flags+0xea>
 801510c:	4b37      	ldr	r3, [pc, #220]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 801510e:	f240 4242 	movw	r2, #1090	@ 0x442
 8015112:	493b      	ldr	r1, [pc, #236]	@ (8015200 <tcp_enqueue_flags+0x1d0>)
 8015114:	4837      	ldr	r0, [pc, #220]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 8015116:	f004 fe1d 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	891b      	ldrh	r3, [r3, #8]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d006      	beq.n	8015130 <tcp_enqueue_flags+0x100>
 8015122:	4b32      	ldr	r3, [pc, #200]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 8015124:	f240 4243 	movw	r2, #1091	@ 0x443
 8015128:	4936      	ldr	r1, [pc, #216]	@ (8015204 <tcp_enqueue_flags+0x1d4>)
 801512a:	4832      	ldr	r0, [pc, #200]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 801512c:	f004 fe12 	bl	8019d54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015134:	2b00      	cmp	r3, #0
 8015136:	d103      	bne.n	8015140 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	68fa      	ldr	r2, [r7, #12]
 801513c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801513e:	e00d      	b.n	801515c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015144:	61bb      	str	r3, [r7, #24]
 8015146:	e002      	b.n	801514e <tcp_enqueue_flags+0x11e>
 8015148:	69bb      	ldr	r3, [r7, #24]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	61bb      	str	r3, [r7, #24]
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1f8      	bne.n	8015148 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	68fa      	ldr	r2, [r7, #12]
 801515a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2200      	movs	r2, #0
 8015160:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015164:	78fb      	ldrb	r3, [r7, #3]
 8015166:	f003 0302 	and.w	r3, r3, #2
 801516a:	2b00      	cmp	r3, #0
 801516c:	d104      	bne.n	8015178 <tcp_enqueue_flags+0x148>
 801516e:	78fb      	ldrb	r3, [r7, #3]
 8015170:	f003 0301 	and.w	r3, r3, #1
 8015174:	2b00      	cmp	r3, #0
 8015176:	d004      	beq.n	8015182 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015182:	78fb      	ldrb	r3, [r7, #3]
 8015184:	f003 0301 	and.w	r3, r3, #1
 8015188:	2b00      	cmp	r3, #0
 801518a:	d006      	beq.n	801519a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	8b5b      	ldrh	r3, [r3, #26]
 8015190:	f043 0320 	orr.w	r3, r3, #32
 8015194:	b29a      	uxth	r2, r3
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fa fd1c 	bl	800fbdc <pbuf_clen>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151ae:	4413      	add	r3, r2
 80151b0:	b29a      	uxth	r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00e      	beq.n	80151e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d10a      	bne.n	80151e0 <tcp_enqueue_flags+0x1b0>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d106      	bne.n	80151e0 <tcp_enqueue_flags+0x1b0>
 80151d2:	4b06      	ldr	r3, [pc, #24]	@ (80151ec <tcp_enqueue_flags+0x1bc>)
 80151d4:	f240 4265 	movw	r2, #1125	@ 0x465
 80151d8:	490b      	ldr	r1, [pc, #44]	@ (8015208 <tcp_enqueue_flags+0x1d8>)
 80151da:	4806      	ldr	r0, [pc, #24]	@ (80151f4 <tcp_enqueue_flags+0x1c4>)
 80151dc:	f004 fdba 	bl	8019d54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80151e0:	2300      	movs	r3, #0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3720      	adds	r7, #32
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	0801e5a4 	.word	0x0801e5a4
 80151f0:	0801e9c8 	.word	0x0801e9c8
 80151f4:	0801e5f8 	.word	0x0801e5f8
 80151f8:	0801ea20 	.word	0x0801ea20
 80151fc:	0801ea40 	.word	0x0801ea40
 8015200:	0801ea7c 	.word	0x0801ea7c
 8015204:	0801ea94 	.word	0x0801ea94
 8015208:	0801eac0 	.word	0x0801eac0

0801520c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801520c:	b5b0      	push	{r4, r5, r7, lr}
 801520e:	b08a      	sub	sp, #40	@ 0x28
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d106      	bne.n	8015228 <tcp_output+0x1c>
 801521a:	4b8a      	ldr	r3, [pc, #552]	@ (8015444 <tcp_output+0x238>)
 801521c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8015220:	4989      	ldr	r1, [pc, #548]	@ (8015448 <tcp_output+0x23c>)
 8015222:	488a      	ldr	r0, [pc, #552]	@ (801544c <tcp_output+0x240>)
 8015224:	f004 fd96 	bl	8019d54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	7d1b      	ldrb	r3, [r3, #20]
 801522c:	2b01      	cmp	r3, #1
 801522e:	d106      	bne.n	801523e <tcp_output+0x32>
 8015230:	4b84      	ldr	r3, [pc, #528]	@ (8015444 <tcp_output+0x238>)
 8015232:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8015236:	4986      	ldr	r1, [pc, #536]	@ (8015450 <tcp_output+0x244>)
 8015238:	4884      	ldr	r0, [pc, #528]	@ (801544c <tcp_output+0x240>)
 801523a:	f004 fd8b 	bl	8019d54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801523e:	4b85      	ldr	r3, [pc, #532]	@ (8015454 <tcp_output+0x248>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	429a      	cmp	r2, r3
 8015246:	d101      	bne.n	801524c <tcp_output+0x40>
    return ERR_OK;
 8015248:	2300      	movs	r3, #0
 801524a:	e1ce      	b.n	80155ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015258:	4293      	cmp	r3, r2
 801525a:	bf28      	it	cs
 801525c:	4613      	movcs	r3, r2
 801525e:	b29b      	uxth	r3, r3
 8015260:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801526a:	2b00      	cmp	r3, #0
 801526c:	d10b      	bne.n	8015286 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	8b5b      	ldrh	r3, [r3, #26]
 8015272:	f003 0302 	and.w	r3, r3, #2
 8015276:	2b00      	cmp	r3, #0
 8015278:	f000 81aa 	beq.w	80155d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f000 fdcb 	bl	8015e18 <tcp_send_empty_ack>
 8015282:	4603      	mov	r3, r0
 8015284:	e1b1      	b.n	80155ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015286:	6879      	ldr	r1, [r7, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	3304      	adds	r3, #4
 801528c:	461a      	mov	r2, r3
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ff f826 	bl	80142e0 <tcp_route>
 8015294:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d102      	bne.n	80152a2 <tcp_output+0x96>
    return ERR_RTE;
 801529c:	f06f 0303 	mvn.w	r3, #3
 80152a0:	e1a3      	b.n	80155ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d003      	beq.n	80152b0 <tcp_output+0xa4>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d111      	bne.n	80152d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d002      	beq.n	80152bc <tcp_output+0xb0>
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	3304      	adds	r3, #4
 80152ba:	e000      	b.n	80152be <tcp_output+0xb2>
 80152bc:	2300      	movs	r3, #0
 80152be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d102      	bne.n	80152cc <tcp_output+0xc0>
      return ERR_RTE;
 80152c6:	f06f 0303 	mvn.w	r3, #3
 80152ca:	e18e      	b.n	80155ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80152d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	4618      	mov	r0, r3
 80152dc:	f7f9 f859 	bl	800e392 <lwip_htonl>
 80152e0:	4602      	mov	r2, r0
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152e6:	1ad3      	subs	r3, r2, r3
 80152e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152ea:	8912      	ldrh	r2, [r2, #8]
 80152ec:	4413      	add	r3, r2
 80152ee:	69ba      	ldr	r2, [r7, #24]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d227      	bcs.n	8015344 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80152fa:	461a      	mov	r2, r3
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	4293      	cmp	r3, r2
 8015300:	d114      	bne.n	801532c <tcp_output+0x120>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015306:	2b00      	cmp	r3, #0
 8015308:	d110      	bne.n	801532c <tcp_output+0x120>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015310:	2b00      	cmp	r3, #0
 8015312:	d10b      	bne.n	801532c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2200      	movs	r2, #0
 8015318:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2201      	movs	r2, #1
 8015320:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2200      	movs	r2, #0
 8015328:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	8b5b      	ldrh	r3, [r3, #26]
 8015330:	f003 0302 	and.w	r3, r3, #2
 8015334:	2b00      	cmp	r3, #0
 8015336:	f000 814d 	beq.w	80155d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f000 fd6c 	bl	8015e18 <tcp_send_empty_ack>
 8015340:	4603      	mov	r3, r0
 8015342:	e152      	b.n	80155ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2200      	movs	r2, #0
 8015348:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015350:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015352:	6a3b      	ldr	r3, [r7, #32]
 8015354:	2b00      	cmp	r3, #0
 8015356:	f000 811c 	beq.w	8015592 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801535a:	e002      	b.n	8015362 <tcp_output+0x156>
 801535c:	6a3b      	ldr	r3, [r7, #32]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	623b      	str	r3, [r7, #32]
 8015362:	6a3b      	ldr	r3, [r7, #32]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1f8      	bne.n	801535c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801536a:	e112      	b.n	8015592 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536e:	68db      	ldr	r3, [r3, #12]
 8015370:	899b      	ldrh	r3, [r3, #12]
 8015372:	b29b      	uxth	r3, r3
 8015374:	4618      	mov	r0, r3
 8015376:	f7f8 fff7 	bl	800e368 <lwip_htons>
 801537a:	4603      	mov	r3, r0
 801537c:	b2db      	uxtb	r3, r3
 801537e:	f003 0304 	and.w	r3, r3, #4
 8015382:	2b00      	cmp	r3, #0
 8015384:	d006      	beq.n	8015394 <tcp_output+0x188>
 8015386:	4b2f      	ldr	r3, [pc, #188]	@ (8015444 <tcp_output+0x238>)
 8015388:	f240 5236 	movw	r2, #1334	@ 0x536
 801538c:	4932      	ldr	r1, [pc, #200]	@ (8015458 <tcp_output+0x24c>)
 801538e:	482f      	ldr	r0, [pc, #188]	@ (801544c <tcp_output+0x240>)
 8015390:	f004 fce0 	bl	8019d54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015398:	2b00      	cmp	r3, #0
 801539a:	d01f      	beq.n	80153dc <tcp_output+0x1d0>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	8b5b      	ldrh	r3, [r3, #26]
 80153a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d119      	bne.n	80153dc <tcp_output+0x1d0>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d00b      	beq.n	80153c8 <tcp_output+0x1bc>
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d110      	bne.n	80153dc <tcp_output+0x1d0>
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153be:	891a      	ldrh	r2, [r3, #8]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d209      	bcs.n	80153dc <tcp_output+0x1d0>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d004      	beq.n	80153dc <tcp_output+0x1d0>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80153d8:	2b08      	cmp	r3, #8
 80153da:	d901      	bls.n	80153e0 <tcp_output+0x1d4>
 80153dc:	2301      	movs	r3, #1
 80153de:	e000      	b.n	80153e2 <tcp_output+0x1d6>
 80153e0:	2300      	movs	r3, #0
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d106      	bne.n	80153f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	8b5b      	ldrh	r3, [r3, #26]
 80153ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f000 80e4 	beq.w	80155bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	7d1b      	ldrb	r3, [r3, #20]
 80153f8:	2b02      	cmp	r3, #2
 80153fa:	d00d      	beq.n	8015418 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80153fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	899b      	ldrh	r3, [r3, #12]
 8015402:	b29c      	uxth	r4, r3
 8015404:	2010      	movs	r0, #16
 8015406:	f7f8 ffaf 	bl	800e368 <lwip_htons>
 801540a:	4603      	mov	r3, r0
 801540c:	461a      	mov	r2, r3
 801540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	4322      	orrs	r2, r4
 8015414:	b292      	uxth	r2, r2
 8015416:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015418:	697a      	ldr	r2, [r7, #20]
 801541a:	6879      	ldr	r1, [r7, #4]
 801541c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801541e:	f000 f909 	bl	8015634 <tcp_output_segment>
 8015422:	4603      	mov	r3, r0
 8015424:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d016      	beq.n	801545c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	8b5b      	ldrh	r3, [r3, #26]
 8015432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015436:	b29a      	uxth	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	835a      	strh	r2, [r3, #26]
      return err;
 801543c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015440:	e0d3      	b.n	80155ea <tcp_output+0x3de>
 8015442:	bf00      	nop
 8015444:	0801e5a4 	.word	0x0801e5a4
 8015448:	0801eae8 	.word	0x0801eae8
 801544c:	0801e5f8 	.word	0x0801e5f8
 8015450:	0801eb00 	.word	0x0801eb00
 8015454:	20011dc8 	.word	0x20011dc8
 8015458:	0801eb28 	.word	0x0801eb28
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	7d1b      	ldrb	r3, [r3, #20]
 8015468:	2b02      	cmp	r3, #2
 801546a:	d006      	beq.n	801547a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	8b5b      	ldrh	r3, [r3, #26]
 8015470:	f023 0303 	bic.w	r3, r3, #3
 8015474:	b29a      	uxth	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547c:	68db      	ldr	r3, [r3, #12]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	4618      	mov	r0, r3
 8015482:	f7f8 ff86 	bl	800e392 <lwip_htonl>
 8015486:	4604      	mov	r4, r0
 8015488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801548a:	891b      	ldrh	r3, [r3, #8]
 801548c:	461d      	mov	r5, r3
 801548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	899b      	ldrh	r3, [r3, #12]
 8015494:	b29b      	uxth	r3, r3
 8015496:	4618      	mov	r0, r3
 8015498:	f7f8 ff66 	bl	800e368 <lwip_htons>
 801549c:	4603      	mov	r3, r0
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	f003 0303 	and.w	r3, r3, #3
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d001      	beq.n	80154ac <tcp_output+0x2a0>
 80154a8:	2301      	movs	r3, #1
 80154aa:	e000      	b.n	80154ae <tcp_output+0x2a2>
 80154ac:	2300      	movs	r3, #0
 80154ae:	442b      	add	r3, r5
 80154b0:	4423      	add	r3, r4
 80154b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	1ad3      	subs	r3, r2, r3
 80154bc:	2b00      	cmp	r3, #0
 80154be:	da02      	bge.n	80154c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80154c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c8:	891b      	ldrh	r3, [r3, #8]
 80154ca:	461c      	mov	r4, r3
 80154cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	899b      	ldrh	r3, [r3, #12]
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7f8 ff47 	bl	800e368 <lwip_htons>
 80154da:	4603      	mov	r3, r0
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	f003 0303 	and.w	r3, r3, #3
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d001      	beq.n	80154ea <tcp_output+0x2de>
 80154e6:	2301      	movs	r3, #1
 80154e8:	e000      	b.n	80154ec <tcp_output+0x2e0>
 80154ea:	2300      	movs	r3, #0
 80154ec:	4423      	add	r3, r4
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d049      	beq.n	8015586 <tcp_output+0x37a>
      seg->next = NULL;
 80154f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f4:	2200      	movs	r2, #0
 80154f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d105      	bne.n	801550c <tcp_output+0x300>
        pcb->unacked = seg;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015504:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015508:	623b      	str	r3, [r7, #32]
 801550a:	e03f      	b.n	801558c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	4618      	mov	r0, r3
 8015514:	f7f8 ff3d 	bl	800e392 <lwip_htonl>
 8015518:	4604      	mov	r4, r0
 801551a:	6a3b      	ldr	r3, [r7, #32]
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	4618      	mov	r0, r3
 8015522:	f7f8 ff36 	bl	800e392 <lwip_htonl>
 8015526:	4603      	mov	r3, r0
 8015528:	1ae3      	subs	r3, r4, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	da24      	bge.n	8015578 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	3370      	adds	r3, #112	@ 0x70
 8015532:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015534:	e002      	b.n	801553c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d011      	beq.n	8015568 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	68db      	ldr	r3, [r3, #12]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	f7f8 ff20 	bl	800e392 <lwip_htonl>
 8015552:	4604      	mov	r4, r0
 8015554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	4618      	mov	r0, r3
 801555c:	f7f8 ff19 	bl	800e392 <lwip_htonl>
 8015560:	4603      	mov	r3, r0
 8015562:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015564:	2b00      	cmp	r3, #0
 8015566:	dbe6      	blt.n	8015536 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	681a      	ldr	r2, [r3, #0]
 801556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801556e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015574:	601a      	str	r2, [r3, #0]
 8015576:	e009      	b.n	801558c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015578:	6a3b      	ldr	r3, [r7, #32]
 801557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801557c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801557e:	6a3b      	ldr	r3, [r7, #32]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	623b      	str	r3, [r7, #32]
 8015584:	e002      	b.n	801558c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015588:	f7fb ff1f 	bl	80113ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015590:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015594:	2b00      	cmp	r3, #0
 8015596:	d012      	beq.n	80155be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7f8 fef7 	bl	800e392 <lwip_htonl>
 80155a4:	4602      	mov	r2, r0
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155aa:	1ad3      	subs	r3, r2, r3
 80155ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155ae:	8912      	ldrh	r2, [r2, #8]
 80155b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80155b2:	69ba      	ldr	r2, [r7, #24]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	f4bf aed9 	bcs.w	801536c <tcp_output+0x160>
 80155ba:	e000      	b.n	80155be <tcp_output+0x3b2>
      break;
 80155bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d108      	bne.n	80155d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2200      	movs	r2, #0
 80155ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80155ce:	e004      	b.n	80155da <tcp_output+0x3ce>
    goto output_done;
 80155d0:	bf00      	nop
 80155d2:	e002      	b.n	80155da <tcp_output+0x3ce>
    goto output_done;
 80155d4:	bf00      	nop
 80155d6:	e000      	b.n	80155da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80155d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8b5b      	ldrh	r3, [r3, #26]
 80155de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80155e8:	2300      	movs	r3, #0
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3728      	adds	r7, #40	@ 0x28
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bdb0      	pop	{r4, r5, r7, pc}
 80155f2:	bf00      	nop

080155f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d106      	bne.n	8015610 <tcp_output_segment_busy+0x1c>
 8015602:	4b09      	ldr	r3, [pc, #36]	@ (8015628 <tcp_output_segment_busy+0x34>)
 8015604:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015608:	4908      	ldr	r1, [pc, #32]	@ (801562c <tcp_output_segment_busy+0x38>)
 801560a:	4809      	ldr	r0, [pc, #36]	@ (8015630 <tcp_output_segment_busy+0x3c>)
 801560c:	f004 fba2 	bl	8019d54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	7b9b      	ldrb	r3, [r3, #14]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d001      	beq.n	801561e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801561a:	2301      	movs	r3, #1
 801561c:	e000      	b.n	8015620 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801561e:	2300      	movs	r3, #0
}
 8015620:	4618      	mov	r0, r3
 8015622:	3708      	adds	r7, #8
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}
 8015628:	0801e5a4 	.word	0x0801e5a4
 801562c:	0801eb40 	.word	0x0801eb40
 8015630:	0801e5f8 	.word	0x0801e5f8

08015634 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015634:	b5b0      	push	{r4, r5, r7, lr}
 8015636:	b08c      	sub	sp, #48	@ 0x30
 8015638:	af04      	add	r7, sp, #16
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d106      	bne.n	8015654 <tcp_output_segment+0x20>
 8015646:	4b64      	ldr	r3, [pc, #400]	@ (80157d8 <tcp_output_segment+0x1a4>)
 8015648:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801564c:	4963      	ldr	r1, [pc, #396]	@ (80157dc <tcp_output_segment+0x1a8>)
 801564e:	4864      	ldr	r0, [pc, #400]	@ (80157e0 <tcp_output_segment+0x1ac>)
 8015650:	f004 fb80 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d106      	bne.n	8015668 <tcp_output_segment+0x34>
 801565a:	4b5f      	ldr	r3, [pc, #380]	@ (80157d8 <tcp_output_segment+0x1a4>)
 801565c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015660:	4960      	ldr	r1, [pc, #384]	@ (80157e4 <tcp_output_segment+0x1b0>)
 8015662:	485f      	ldr	r0, [pc, #380]	@ (80157e0 <tcp_output_segment+0x1ac>)
 8015664:	f004 fb76 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d106      	bne.n	801567c <tcp_output_segment+0x48>
 801566e:	4b5a      	ldr	r3, [pc, #360]	@ (80157d8 <tcp_output_segment+0x1a4>)
 8015670:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015674:	495c      	ldr	r1, [pc, #368]	@ (80157e8 <tcp_output_segment+0x1b4>)
 8015676:	485a      	ldr	r0, [pc, #360]	@ (80157e0 <tcp_output_segment+0x1ac>)
 8015678:	f004 fb6c 	bl	8019d54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801567c:	68f8      	ldr	r0, [r7, #12]
 801567e:	f7ff ffb9 	bl	80155f4 <tcp_output_segment_busy>
 8015682:	4603      	mov	r3, r0
 8015684:	2b00      	cmp	r3, #0
 8015686:	d001      	beq.n	801568c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015688:	2300      	movs	r3, #0
 801568a:	e0a1      	b.n	80157d0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	68dc      	ldr	r4, [r3, #12]
 8015694:	4610      	mov	r0, r2
 8015696:	f7f8 fe7c 	bl	800e392 <lwip_htonl>
 801569a:	4603      	mov	r3, r0
 801569c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	68dc      	ldr	r4, [r3, #12]
 80156a6:	4610      	mov	r0, r2
 80156a8:	f7f8 fe5e 	bl	800e368 <lwip_htons>
 80156ac:	4603      	mov	r3, r0
 80156ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156b4:	68ba      	ldr	r2, [r7, #8]
 80156b6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80156b8:	441a      	add	r2, r3
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	68db      	ldr	r3, [r3, #12]
 80156c2:	3314      	adds	r3, #20
 80156c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	7a9b      	ldrb	r3, [r3, #10]
 80156ca:	f003 0301 	and.w	r3, r3, #1
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d015      	beq.n	80156fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	3304      	adds	r3, #4
 80156d6:	461a      	mov	r2, r3
 80156d8:	6879      	ldr	r1, [r7, #4]
 80156da:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80156de:	f7fc fa39 	bl	8011b54 <tcp_eff_send_mss_netif>
 80156e2:	4603      	mov	r3, r0
 80156e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80156e6:	8b7b      	ldrh	r3, [r7, #26]
 80156e8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7f8 fe50 	bl	800e392 <lwip_htonl>
 80156f2:	4602      	mov	r2, r0
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	3304      	adds	r3, #4
 80156fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015704:	2b00      	cmp	r3, #0
 8015706:	da02      	bge.n	801570e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	2200      	movs	r2, #0
 801570c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015712:	2b00      	cmp	r3, #0
 8015714:	d10c      	bne.n	8015730 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015716:	4b35      	ldr	r3, [pc, #212]	@ (80157ec <tcp_output_segment+0x1b8>)
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	4618      	mov	r0, r3
 8015726:	f7f8 fe34 	bl	800e392 <lwip_htonl>
 801572a:	4602      	mov	r2, r0
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	68da      	ldr	r2, [r3, #12]
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	1ad3      	subs	r3, r2, r3
 801573c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	8959      	ldrh	r1, [r3, #10]
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	8b3a      	ldrh	r2, [r7, #24]
 801574a:	1a8a      	subs	r2, r1, r2
 801574c:	b292      	uxth	r2, r2
 801574e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	685b      	ldr	r3, [r3, #4]
 8015754:	8919      	ldrh	r1, [r3, #8]
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	8b3a      	ldrh	r2, [r7, #24]
 801575c:	1a8a      	subs	r2, r1, r2
 801575e:	b292      	uxth	r2, r2
 8015760:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	68fa      	ldr	r2, [r7, #12]
 8015768:	68d2      	ldr	r2, [r2, #12]
 801576a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	68db      	ldr	r3, [r3, #12]
 8015770:	2200      	movs	r2, #0
 8015772:	741a      	strb	r2, [r3, #16]
 8015774:	2200      	movs	r2, #0
 8015776:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	68da      	ldr	r2, [r3, #12]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	7a9b      	ldrb	r3, [r3, #10]
 8015780:	f003 0301 	and.w	r3, r3, #1
 8015784:	2b00      	cmp	r3, #0
 8015786:	d001      	beq.n	801578c <tcp_output_segment+0x158>
 8015788:	2318      	movs	r3, #24
 801578a:	e000      	b.n	801578e <tcp_output_segment+0x15a>
 801578c:	2314      	movs	r3, #20
 801578e:	4413      	add	r3, r2
 8015790:	69fa      	ldr	r2, [r7, #28]
 8015792:	429a      	cmp	r2, r3
 8015794:	d006      	beq.n	80157a4 <tcp_output_segment+0x170>
 8015796:	4b10      	ldr	r3, [pc, #64]	@ (80157d8 <tcp_output_segment+0x1a4>)
 8015798:	f240 621c 	movw	r2, #1564	@ 0x61c
 801579c:	4914      	ldr	r1, [pc, #80]	@ (80157f0 <tcp_output_segment+0x1bc>)
 801579e:	4810      	ldr	r0, [pc, #64]	@ (80157e0 <tcp_output_segment+0x1ac>)
 80157a0:	f004 fad8 	bl	8019d54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6858      	ldr	r0, [r3, #4]
 80157a8:	68b9      	ldr	r1, [r7, #8]
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	1d1c      	adds	r4, r3, #4
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	7add      	ldrb	r5, [r3, #11]
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	7a9b      	ldrb	r3, [r3, #10]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	9202      	str	r2, [sp, #8]
 80157ba:	2206      	movs	r2, #6
 80157bc:	9201      	str	r2, [sp, #4]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	462b      	mov	r3, r5
 80157c2:	4622      	mov	r2, r4
 80157c4:	f002 fbaa 	bl	8017f1c <ip4_output_if>
 80157c8:	4603      	mov	r3, r0
 80157ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80157cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3720      	adds	r7, #32
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bdb0      	pop	{r4, r5, r7, pc}
 80157d8:	0801e5a4 	.word	0x0801e5a4
 80157dc:	0801eb68 	.word	0x0801eb68
 80157e0:	0801e5f8 	.word	0x0801e5f8
 80157e4:	0801eb88 	.word	0x0801eb88
 80157e8:	0801eba8 	.word	0x0801eba8
 80157ec:	20011d7c 	.word	0x20011d7c
 80157f0:	0801ebcc 	.word	0x0801ebcc

080157f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80157f4:	b5b0      	push	{r4, r5, r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d106      	bne.n	8015810 <tcp_rexmit_rto_prepare+0x1c>
 8015802:	4b31      	ldr	r3, [pc, #196]	@ (80158c8 <tcp_rexmit_rto_prepare+0xd4>)
 8015804:	f240 6263 	movw	r2, #1635	@ 0x663
 8015808:	4930      	ldr	r1, [pc, #192]	@ (80158cc <tcp_rexmit_rto_prepare+0xd8>)
 801580a:	4831      	ldr	r0, [pc, #196]	@ (80158d0 <tcp_rexmit_rto_prepare+0xdc>)
 801580c:	f004 faa2 	bl	8019d54 <iprintf>

  if (pcb->unacked == NULL) {
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015814:	2b00      	cmp	r3, #0
 8015816:	d102      	bne.n	801581e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015818:	f06f 0305 	mvn.w	r3, #5
 801581c:	e050      	b.n	80158c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015822:	60fb      	str	r3, [r7, #12]
 8015824:	e00b      	b.n	801583e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015826:	68f8      	ldr	r0, [r7, #12]
 8015828:	f7ff fee4 	bl	80155f4 <tcp_output_segment_busy>
 801582c:	4603      	mov	r3, r0
 801582e:	2b00      	cmp	r3, #0
 8015830:	d002      	beq.n	8015838 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015832:	f06f 0305 	mvn.w	r3, #5
 8015836:	e043      	b.n	80158c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	60fb      	str	r3, [r7, #12]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1ef      	bne.n	8015826 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f7ff fed4 	bl	80155f4 <tcp_output_segment_busy>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d002      	beq.n	8015858 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015852:	f06f 0305 	mvn.w	r3, #5
 8015856:	e033      	b.n	80158c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	8b5b      	ldrh	r3, [r3, #26]
 8015872:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015876:	b29a      	uxth	r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	4618      	mov	r0, r3
 8015884:	f7f8 fd85 	bl	800e392 <lwip_htonl>
 8015888:	4604      	mov	r4, r0
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	891b      	ldrh	r3, [r3, #8]
 801588e:	461d      	mov	r5, r3
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	899b      	ldrh	r3, [r3, #12]
 8015896:	b29b      	uxth	r3, r3
 8015898:	4618      	mov	r0, r3
 801589a:	f7f8 fd65 	bl	800e368 <lwip_htons>
 801589e:	4603      	mov	r3, r0
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	f003 0303 	and.w	r3, r3, #3
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <tcp_rexmit_rto_prepare+0xba>
 80158aa:	2301      	movs	r3, #1
 80158ac:	e000      	b.n	80158b0 <tcp_rexmit_rto_prepare+0xbc>
 80158ae:	2300      	movs	r3, #0
 80158b0:	442b      	add	r3, r5
 80158b2:	18e2      	adds	r2, r4, r3
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80158be:	2300      	movs	r3, #0
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3710      	adds	r7, #16
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bdb0      	pop	{r4, r5, r7, pc}
 80158c8:	0801e5a4 	.word	0x0801e5a4
 80158cc:	0801ebe0 	.word	0x0801ebe0
 80158d0:	0801e5f8 	.word	0x0801e5f8

080158d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d106      	bne.n	80158f0 <tcp_rexmit_rto_commit+0x1c>
 80158e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015918 <tcp_rexmit_rto_commit+0x44>)
 80158e4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80158e8:	490c      	ldr	r1, [pc, #48]	@ (801591c <tcp_rexmit_rto_commit+0x48>)
 80158ea:	480d      	ldr	r0, [pc, #52]	@ (8015920 <tcp_rexmit_rto_commit+0x4c>)
 80158ec:	f004 fa32 	bl	8019d54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80158f6:	2bff      	cmp	r3, #255	@ 0xff
 80158f8:	d007      	beq.n	801590a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015900:	3301      	adds	r3, #1
 8015902:	b2da      	uxtb	r2, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f7ff fc7e 	bl	801520c <tcp_output>
}
 8015910:	bf00      	nop
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	0801e5a4 	.word	0x0801e5a4
 801591c:	0801ec04 	.word	0x0801ec04
 8015920:	0801e5f8 	.word	0x0801e5f8

08015924 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d106      	bne.n	8015940 <tcp_rexmit_rto+0x1c>
 8015932:	4b0a      	ldr	r3, [pc, #40]	@ (801595c <tcp_rexmit_rto+0x38>)
 8015934:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015938:	4909      	ldr	r1, [pc, #36]	@ (8015960 <tcp_rexmit_rto+0x3c>)
 801593a:	480a      	ldr	r0, [pc, #40]	@ (8015964 <tcp_rexmit_rto+0x40>)
 801593c:	f004 fa0a 	bl	8019d54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff ff57 	bl	80157f4 <tcp_rexmit_rto_prepare>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f7ff ffc1 	bl	80158d4 <tcp_rexmit_rto_commit>
  }
}
 8015952:	bf00      	nop
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	0801e5a4 	.word	0x0801e5a4
 8015960:	0801ec28 	.word	0x0801ec28
 8015964:	0801e5f8 	.word	0x0801e5f8

08015968 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015968:	b590      	push	{r4, r7, lr}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d106      	bne.n	8015984 <tcp_rexmit+0x1c>
 8015976:	4b2f      	ldr	r3, [pc, #188]	@ (8015a34 <tcp_rexmit+0xcc>)
 8015978:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801597c:	492e      	ldr	r1, [pc, #184]	@ (8015a38 <tcp_rexmit+0xd0>)
 801597e:	482f      	ldr	r0, [pc, #188]	@ (8015a3c <tcp_rexmit+0xd4>)
 8015980:	f004 f9e8 	bl	8019d54 <iprintf>

  if (pcb->unacked == NULL) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015988:	2b00      	cmp	r3, #0
 801598a:	d102      	bne.n	8015992 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801598c:	f06f 0305 	mvn.w	r3, #5
 8015990:	e04c      	b.n	8015a2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015996:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015998:	68b8      	ldr	r0, [r7, #8]
 801599a:	f7ff fe2b 	bl	80155f4 <tcp_output_segment_busy>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d002      	beq.n	80159aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80159a4:	f06f 0305 	mvn.w	r3, #5
 80159a8:	e040      	b.n	8015a2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	336c      	adds	r3, #108	@ 0x6c
 80159b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159b8:	e002      	b.n	80159c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d011      	beq.n	80159ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7f8 fcde 	bl	800e392 <lwip_htonl>
 80159d6:	4604      	mov	r4, r0
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	4618      	mov	r0, r3
 80159e0:	f7f8 fcd7 	bl	800e392 <lwip_htonl>
 80159e4:	4603      	mov	r3, r0
 80159e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dbe6      	blt.n	80159ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	681a      	ldr	r2, [r3, #0]
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	68ba      	ldr	r2, [r7, #8]
 80159f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d103      	bne.n	8015a0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2200      	movs	r2, #0
 8015a06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a10:	2bff      	cmp	r3, #255	@ 0xff
 8015a12:	d007      	beq.n	8015a24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	b2da      	uxtb	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2200      	movs	r2, #0
 8015a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015a2a:	2300      	movs	r3, #0
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3714      	adds	r7, #20
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd90      	pop	{r4, r7, pc}
 8015a34:	0801e5a4 	.word	0x0801e5a4
 8015a38:	0801ec44 	.word	0x0801ec44
 8015a3c:	0801e5f8 	.word	0x0801e5f8

08015a40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <tcp_rexmit_fast+0x1c>
 8015a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8015af8 <tcp_rexmit_fast+0xb8>)
 8015a50:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015a54:	4929      	ldr	r1, [pc, #164]	@ (8015afc <tcp_rexmit_fast+0xbc>)
 8015a56:	482a      	ldr	r0, [pc, #168]	@ (8015b00 <tcp_rexmit_fast+0xc0>)
 8015a58:	f004 f97c 	bl	8019d54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d045      	beq.n	8015af0 <tcp_rexmit_fast+0xb0>
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	8b5b      	ldrh	r3, [r3, #26]
 8015a68:	f003 0304 	and.w	r3, r3, #4
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d13f      	bne.n	8015af0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7ff ff79 	bl	8015968 <tcp_rexmit>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d139      	bne.n	8015af0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015a88:	4293      	cmp	r3, r2
 8015a8a:	bf28      	it	cs
 8015a8c:	4613      	movcs	r3, r2
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	da00      	bge.n	8015a96 <tcp_rexmit_fast+0x56>
 8015a94:	3301      	adds	r3, #1
 8015a96:	105b      	asrs	r3, r3, #1
 8015a98:	b29a      	uxth	r2, r3
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015aac:	005b      	lsls	r3, r3, #1
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d206      	bcs.n	8015ac0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ab6:	005b      	lsls	r3, r3, #1
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015aca:	4619      	mov	r1, r3
 8015acc:	0049      	lsls	r1, r1, #1
 8015ace:	440b      	add	r3, r1
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	4413      	add	r3, r2
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	8b5b      	ldrh	r3, [r3, #26]
 8015ae0:	f043 0304 	orr.w	r3, r3, #4
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2200      	movs	r2, #0
 8015aee:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	0801e5a4 	.word	0x0801e5a4
 8015afc:	0801ec5c 	.word	0x0801ec5c
 8015b00:	0801e5f8 	.word	0x0801e5f8

08015b04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b086      	sub	sp, #24
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	607b      	str	r3, [r7, #4]
 8015b0e:	460b      	mov	r3, r1
 8015b10:	817b      	strh	r3, [r7, #10]
 8015b12:	4613      	mov	r3, r2
 8015b14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015b16:	897a      	ldrh	r2, [r7, #10]
 8015b18:	893b      	ldrh	r3, [r7, #8]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	b29b      	uxth	r3, r3
 8015b1e:	3314      	adds	r3, #20
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015b26:	4619      	mov	r1, r3
 8015b28:	2022      	movs	r0, #34	@ 0x22
 8015b2a:	f7f9 fce5 	bl	800f4f8 <pbuf_alloc>
 8015b2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d04d      	beq.n	8015bd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015b36:	897b      	ldrh	r3, [r7, #10]
 8015b38:	3313      	adds	r3, #19
 8015b3a:	697a      	ldr	r2, [r7, #20]
 8015b3c:	8952      	ldrh	r2, [r2, #10]
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	db06      	blt.n	8015b50 <tcp_output_alloc_header_common+0x4c>
 8015b42:	4b26      	ldr	r3, [pc, #152]	@ (8015bdc <tcp_output_alloc_header_common+0xd8>)
 8015b44:	f240 7223 	movw	r2, #1827	@ 0x723
 8015b48:	4925      	ldr	r1, [pc, #148]	@ (8015be0 <tcp_output_alloc_header_common+0xdc>)
 8015b4a:	4826      	ldr	r0, [pc, #152]	@ (8015be4 <tcp_output_alloc_header_common+0xe0>)
 8015b4c:	f004 f902 	bl	8019d54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015b56:	8c3b      	ldrh	r3, [r7, #32]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7f8 fc05 	bl	800e368 <lwip_htons>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	461a      	mov	r2, r3
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7f8 fbfd 	bl	800e368 <lwip_htons>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	461a      	mov	r2, r3
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	f7f8 fc08 	bl	800e392 <lwip_htonl>
 8015b82:	4602      	mov	r2, r0
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015b88:	897b      	ldrh	r3, [r7, #10]
 8015b8a:	089b      	lsrs	r3, r3, #2
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	3305      	adds	r3, #5
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	031b      	lsls	r3, r3, #12
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7f8 fbe1 	bl	800e368 <lwip_htons>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	461a      	mov	r2, r3
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015bae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f8 fbd9 	bl	800e368 <lwip_htons>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	461a      	mov	r2, r3
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	741a      	strb	r2, [r3, #16]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	749a      	strb	r2, [r3, #18]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015bd2:	697b      	ldr	r3, [r7, #20]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0801e5a4 	.word	0x0801e5a4
 8015be0:	0801ec7c 	.word	0x0801ec7c
 8015be4:	0801e5f8 	.word	0x0801e5f8

08015be8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015be8:	b5b0      	push	{r4, r5, r7, lr}
 8015bea:	b08a      	sub	sp, #40	@ 0x28
 8015bec:	af04      	add	r7, sp, #16
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	607b      	str	r3, [r7, #4]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	817b      	strh	r3, [r7, #10]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <tcp_output_alloc_header+0x26>
 8015c00:	4b15      	ldr	r3, [pc, #84]	@ (8015c58 <tcp_output_alloc_header+0x70>)
 8015c02:	f240 7242 	movw	r2, #1858	@ 0x742
 8015c06:	4915      	ldr	r1, [pc, #84]	@ (8015c5c <tcp_output_alloc_header+0x74>)
 8015c08:	4815      	ldr	r0, [pc, #84]	@ (8015c60 <tcp_output_alloc_header+0x78>)
 8015c0a:	f004 f8a3 	bl	8019d54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	8adb      	ldrh	r3, [r3, #22]
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	8b12      	ldrh	r2, [r2, #24]
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015c1e:	893d      	ldrh	r5, [r7, #8]
 8015c20:	897c      	ldrh	r4, [r7, #10]
 8015c22:	9103      	str	r1, [sp, #12]
 8015c24:	2110      	movs	r1, #16
 8015c26:	9102      	str	r1, [sp, #8]
 8015c28:	9201      	str	r2, [sp, #4]
 8015c2a:	9300      	str	r3, [sp, #0]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	462a      	mov	r2, r5
 8015c30:	4621      	mov	r1, r4
 8015c32:	f7ff ff67 	bl	8015b04 <tcp_output_alloc_header_common>
 8015c36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d006      	beq.n	8015c4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c42:	68fa      	ldr	r2, [r7, #12]
 8015c44:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015c46:	441a      	add	r2, r3
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015c4c:	697b      	ldr	r3, [r7, #20]
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3718      	adds	r7, #24
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bdb0      	pop	{r4, r5, r7, pc}
 8015c56:	bf00      	nop
 8015c58:	0801e5a4 	.word	0x0801e5a4
 8015c5c:	0801ecac 	.word	0x0801ecac
 8015c60:	0801e5f8 	.word	0x0801e5f8

08015c64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b088      	sub	sp, #32
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	4611      	mov	r1, r2
 8015c70:	461a      	mov	r2, r3
 8015c72:	460b      	mov	r3, r1
 8015c74:	71fb      	strb	r3, [r7, #7]
 8015c76:	4613      	mov	r3, r2
 8015c78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d106      	bne.n	8015c92 <tcp_output_fill_options+0x2e>
 8015c84:	4b12      	ldr	r3, [pc, #72]	@ (8015cd0 <tcp_output_fill_options+0x6c>)
 8015c86:	f240 7256 	movw	r2, #1878	@ 0x756
 8015c8a:	4912      	ldr	r1, [pc, #72]	@ (8015cd4 <tcp_output_fill_options+0x70>)
 8015c8c:	4812      	ldr	r0, [pc, #72]	@ (8015cd8 <tcp_output_fill_options+0x74>)
 8015c8e:	f004 f861 	bl	8019d54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	685b      	ldr	r3, [r3, #4]
 8015c96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	3314      	adds	r3, #20
 8015c9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015c9e:	8bfb      	ldrh	r3, [r7, #30]
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	79fb      	ldrb	r3, [r7, #7]
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	f003 0304 	and.w	r3, r3, #4
 8015cac:	4413      	add	r3, r2
 8015cae:	3314      	adds	r3, #20
 8015cb0:	69ba      	ldr	r2, [r7, #24]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	697a      	ldr	r2, [r7, #20]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d006      	beq.n	8015cc8 <tcp_output_fill_options+0x64>
 8015cba:	4b05      	ldr	r3, [pc, #20]	@ (8015cd0 <tcp_output_fill_options+0x6c>)
 8015cbc:	f240 7275 	movw	r2, #1909	@ 0x775
 8015cc0:	4906      	ldr	r1, [pc, #24]	@ (8015cdc <tcp_output_fill_options+0x78>)
 8015cc2:	4805      	ldr	r0, [pc, #20]	@ (8015cd8 <tcp_output_fill_options+0x74>)
 8015cc4:	f004 f846 	bl	8019d54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015cc8:	bf00      	nop
 8015cca:	3720      	adds	r7, #32
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	0801e5a4 	.word	0x0801e5a4
 8015cd4:	0801ecd4 	.word	0x0801ecd4
 8015cd8:	0801e5f8 	.word	0x0801e5f8
 8015cdc:	0801ebcc 	.word	0x0801ebcc

08015ce0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08a      	sub	sp, #40	@ 0x28
 8015ce4:	af04      	add	r7, sp, #16
 8015ce6:	60f8      	str	r0, [r7, #12]
 8015ce8:	60b9      	str	r1, [r7, #8]
 8015cea:	607a      	str	r2, [r7, #4]
 8015cec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d106      	bne.n	8015d02 <tcp_output_control_segment+0x22>
 8015cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8015d68 <tcp_output_control_segment+0x88>)
 8015cf6:	f240 7287 	movw	r2, #1927	@ 0x787
 8015cfa:	491c      	ldr	r1, [pc, #112]	@ (8015d6c <tcp_output_control_segment+0x8c>)
 8015cfc:	481c      	ldr	r0, [pc, #112]	@ (8015d70 <tcp_output_control_segment+0x90>)
 8015cfe:	f004 f829 	bl	8019d54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015d02:	683a      	ldr	r2, [r7, #0]
 8015d04:	6879      	ldr	r1, [r7, #4]
 8015d06:	68f8      	ldr	r0, [r7, #12]
 8015d08:	f7fe faea 	bl	80142e0 <tcp_route>
 8015d0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d102      	bne.n	8015d1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015d14:	23fc      	movs	r3, #252	@ 0xfc
 8015d16:	75fb      	strb	r3, [r7, #23]
 8015d18:	e01c      	b.n	8015d54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d006      	beq.n	8015d2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	7adb      	ldrb	r3, [r3, #11]
 8015d24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	7a9b      	ldrb	r3, [r3, #10]
 8015d2a:	757b      	strb	r3, [r7, #21]
 8015d2c:	e003      	b.n	8015d36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015d2e:	23ff      	movs	r3, #255	@ 0xff
 8015d30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015d32:	2300      	movs	r3, #0
 8015d34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015d36:	7dba      	ldrb	r2, [r7, #22]
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	9302      	str	r3, [sp, #8]
 8015d3c:	2306      	movs	r3, #6
 8015d3e:	9301      	str	r3, [sp, #4]
 8015d40:	7d7b      	ldrb	r3, [r7, #21]
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	4613      	mov	r3, r2
 8015d46:	683a      	ldr	r2, [r7, #0]
 8015d48:	6879      	ldr	r1, [r7, #4]
 8015d4a:	68b8      	ldr	r0, [r7, #8]
 8015d4c:	f002 f8e6 	bl	8017f1c <ip4_output_if>
 8015d50:	4603      	mov	r3, r0
 8015d52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015d54:	68b8      	ldr	r0, [r7, #8]
 8015d56:	f7f9 feb3 	bl	800fac0 <pbuf_free>
  return err;
 8015d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3718      	adds	r7, #24
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	0801e5a4 	.word	0x0801e5a4
 8015d6c:	0801ecfc 	.word	0x0801ecfc
 8015d70:	0801e5f8 	.word	0x0801e5f8

08015d74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015d74:	b590      	push	{r4, r7, lr}
 8015d76:	b08b      	sub	sp, #44	@ 0x2c
 8015d78:	af04      	add	r7, sp, #16
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d106      	bne.n	8015d96 <tcp_rst+0x22>
 8015d88:	4b1f      	ldr	r3, [pc, #124]	@ (8015e08 <tcp_rst+0x94>)
 8015d8a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015d8e:	491f      	ldr	r1, [pc, #124]	@ (8015e0c <tcp_rst+0x98>)
 8015d90:	481f      	ldr	r0, [pc, #124]	@ (8015e10 <tcp_rst+0x9c>)
 8015d92:	f003 ffdf 	bl	8019d54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d106      	bne.n	8015daa <tcp_rst+0x36>
 8015d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8015e08 <tcp_rst+0x94>)
 8015d9e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015da2:	491c      	ldr	r1, [pc, #112]	@ (8015e14 <tcp_rst+0xa0>)
 8015da4:	481a      	ldr	r0, [pc, #104]	@ (8015e10 <tcp_rst+0x9c>)
 8015da6:	f003 ffd5 	bl	8019d54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015daa:	2300      	movs	r3, #0
 8015dac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015dae:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015db2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015db4:	7dfb      	ldrb	r3, [r7, #23]
 8015db6:	b29c      	uxth	r4, r3
 8015db8:	68b8      	ldr	r0, [r7, #8]
 8015dba:	f7f8 faea 	bl	800e392 <lwip_htonl>
 8015dbe:	4602      	mov	r2, r0
 8015dc0:	8abb      	ldrh	r3, [r7, #20]
 8015dc2:	9303      	str	r3, [sp, #12]
 8015dc4:	2314      	movs	r3, #20
 8015dc6:	9302      	str	r3, [sp, #8]
 8015dc8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	4613      	mov	r3, r2
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	4621      	mov	r1, r4
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f7ff fe94 	bl	8015b04 <tcp_output_alloc_header_common>
 8015ddc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00c      	beq.n	8015dfe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015de4:	7dfb      	ldrb	r3, [r7, #23]
 8015de6:	2200      	movs	r2, #0
 8015de8:	6939      	ldr	r1, [r7, #16]
 8015dea:	68f8      	ldr	r0, [r7, #12]
 8015dec:	f7ff ff3a 	bl	8015c64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	6939      	ldr	r1, [r7, #16]
 8015df6:	68f8      	ldr	r0, [r7, #12]
 8015df8:	f7ff ff72 	bl	8015ce0 <tcp_output_control_segment>
 8015dfc:	e000      	b.n	8015e00 <tcp_rst+0x8c>
    return;
 8015dfe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015e00:	371c      	adds	r7, #28
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd90      	pop	{r4, r7, pc}
 8015e06:	bf00      	nop
 8015e08:	0801e5a4 	.word	0x0801e5a4
 8015e0c:	0801ed28 	.word	0x0801ed28
 8015e10:	0801e5f8 	.word	0x0801e5f8
 8015e14:	0801ed44 	.word	0x0801ed44

08015e18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015e18:	b590      	push	{r4, r7, lr}
 8015e1a:	b087      	sub	sp, #28
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015e20:	2300      	movs	r3, #0
 8015e22:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015e24:	2300      	movs	r3, #0
 8015e26:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d106      	bne.n	8015e3c <tcp_send_empty_ack+0x24>
 8015e2e:	4b28      	ldr	r3, [pc, #160]	@ (8015ed0 <tcp_send_empty_ack+0xb8>)
 8015e30:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015e34:	4927      	ldr	r1, [pc, #156]	@ (8015ed4 <tcp_send_empty_ack+0xbc>)
 8015e36:	4828      	ldr	r0, [pc, #160]	@ (8015ed8 <tcp_send_empty_ack+0xc0>)
 8015e38:	f003 ff8c 	bl	8019d54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015e3c:	7dfb      	ldrb	r3, [r7, #23]
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	f003 0304 	and.w	r3, r3, #4
 8015e46:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015e48:	7d7b      	ldrb	r3, [r7, #21]
 8015e4a:	b29c      	uxth	r4, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7f8 fa9e 	bl	800e392 <lwip_htonl>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2200      	movs	r2, #0
 8015e5a:	4621      	mov	r1, r4
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f7ff fec3 	bl	8015be8 <tcp_output_alloc_header>
 8015e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d109      	bne.n	8015e7e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	8b5b      	ldrh	r3, [r3, #26]
 8015e6e:	f043 0303 	orr.w	r3, r3, #3
 8015e72:	b29a      	uxth	r2, r3
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015e78:	f06f 0301 	mvn.w	r3, #1
 8015e7c:	e023      	b.n	8015ec6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015e7e:	7dbb      	ldrb	r3, [r7, #22]
 8015e80:	7dfa      	ldrb	r2, [r7, #23]
 8015e82:	6939      	ldr	r1, [r7, #16]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7ff feed 	bl	8015c64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	3304      	adds	r3, #4
 8015e90:	6939      	ldr	r1, [r7, #16]
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff ff24 	bl	8015ce0 <tcp_output_control_segment>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d007      	beq.n	8015eb4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	8b5b      	ldrh	r3, [r3, #26]
 8015ea8:	f043 0303 	orr.w	r3, r3, #3
 8015eac:	b29a      	uxth	r2, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	835a      	strh	r2, [r3, #26]
 8015eb2:	e006      	b.n	8015ec2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	8b5b      	ldrh	r3, [r3, #26]
 8015eb8:	f023 0303 	bic.w	r3, r3, #3
 8015ebc:	b29a      	uxth	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	371c      	adds	r7, #28
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd90      	pop	{r4, r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801e5a4 	.word	0x0801e5a4
 8015ed4:	0801ed60 	.word	0x0801ed60
 8015ed8:	0801e5f8 	.word	0x0801e5f8

08015edc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015edc:	b590      	push	{r4, r7, lr}
 8015ede:	b087      	sub	sp, #28
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d106      	bne.n	8015efc <tcp_keepalive+0x20>
 8015eee:	4b18      	ldr	r3, [pc, #96]	@ (8015f50 <tcp_keepalive+0x74>)
 8015ef0:	f640 0224 	movw	r2, #2084	@ 0x824
 8015ef4:	4917      	ldr	r1, [pc, #92]	@ (8015f54 <tcp_keepalive+0x78>)
 8015ef6:	4818      	ldr	r0, [pc, #96]	@ (8015f58 <tcp_keepalive+0x7c>)
 8015ef8:	f003 ff2c 	bl	8019d54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015efc:	7dfb      	ldrb	r3, [r7, #23]
 8015efe:	b29c      	uxth	r4, r3
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015f04:	3b01      	subs	r3, #1
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7f8 fa43 	bl	800e392 <lwip_htonl>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2200      	movs	r2, #0
 8015f10:	4621      	mov	r1, r4
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7ff fe68 	bl	8015be8 <tcp_output_alloc_header>
 8015f18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d102      	bne.n	8015f26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015f20:	f04f 33ff 	mov.w	r3, #4294967295
 8015f24:	e010      	b.n	8015f48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	6939      	ldr	r1, [r7, #16]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7ff fe99 	bl	8015c64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	3304      	adds	r3, #4
 8015f38:	6939      	ldr	r1, [r7, #16]
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f7ff fed0 	bl	8015ce0 <tcp_output_control_segment>
 8015f40:	4603      	mov	r3, r0
 8015f42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	371c      	adds	r7, #28
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd90      	pop	{r4, r7, pc}
 8015f50:	0801e5a4 	.word	0x0801e5a4
 8015f54:	0801ed80 	.word	0x0801ed80
 8015f58:	0801e5f8 	.word	0x0801e5f8

08015f5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015f5c:	b590      	push	{r4, r7, lr}
 8015f5e:	b08b      	sub	sp, #44	@ 0x2c
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f64:	2300      	movs	r3, #0
 8015f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d106      	bne.n	8015f7e <tcp_zero_window_probe+0x22>
 8015f70:	4b4c      	ldr	r3, [pc, #304]	@ (80160a4 <tcp_zero_window_probe+0x148>)
 8015f72:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015f76:	494c      	ldr	r1, [pc, #304]	@ (80160a8 <tcp_zero_window_probe+0x14c>)
 8015f78:	484c      	ldr	r0, [pc, #304]	@ (80160ac <tcp_zero_window_probe+0x150>)
 8015f7a:	f003 feeb 	bl	8019d54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015f84:	6a3b      	ldr	r3, [r7, #32]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d101      	bne.n	8015f8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	e086      	b.n	801609c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015f94:	2bff      	cmp	r3, #255	@ 0xff
 8015f96:	d007      	beq.n	8015fa8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	b2da      	uxtb	r2, r3
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015fa8:	6a3b      	ldr	r3, [r7, #32]
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	899b      	ldrh	r3, [r3, #12]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f8 f9d9 	bl	800e368 <lwip_htons>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	f003 0301 	and.w	r3, r3, #1
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d005      	beq.n	8015fce <tcp_zero_window_probe+0x72>
 8015fc2:	6a3b      	ldr	r3, [r7, #32]
 8015fc4:	891b      	ldrh	r3, [r3, #8]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d101      	bne.n	8015fce <tcp_zero_window_probe+0x72>
 8015fca:	2301      	movs	r3, #1
 8015fcc:	e000      	b.n	8015fd0 <tcp_zero_window_probe+0x74>
 8015fce:	2300      	movs	r3, #0
 8015fd0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015fd2:	7ffb      	ldrb	r3, [r7, #31]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	bf0c      	ite	eq
 8015fd8:	2301      	moveq	r3, #1
 8015fda:	2300      	movne	r3, #0
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fe4:	b299      	uxth	r1, r3
 8015fe6:	6a3b      	ldr	r3, [r7, #32]
 8015fe8:	68db      	ldr	r3, [r3, #12]
 8015fea:	685b      	ldr	r3, [r3, #4]
 8015fec:	8bba      	ldrh	r2, [r7, #28]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7ff fdfa 	bl	8015be8 <tcp_output_alloc_header>
 8015ff4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d102      	bne.n	8016002 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8016000:	e04c      	b.n	801609c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016008:	7ffb      	ldrb	r3, [r7, #31]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d011      	beq.n	8016032 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	899b      	ldrh	r3, [r3, #12]
 8016012:	b29b      	uxth	r3, r3
 8016014:	b21b      	sxth	r3, r3
 8016016:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801601a:	b21c      	sxth	r4, r3
 801601c:	2011      	movs	r0, #17
 801601e:	f7f8 f9a3 	bl	800e368 <lwip_htons>
 8016022:	4603      	mov	r3, r0
 8016024:	b21b      	sxth	r3, r3
 8016026:	4323      	orrs	r3, r4
 8016028:	b21b      	sxth	r3, r3
 801602a:	b29a      	uxth	r2, r3
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	819a      	strh	r2, [r3, #12]
 8016030:	e010      	b.n	8016054 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	3314      	adds	r3, #20
 8016038:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801603a:	6a3b      	ldr	r3, [r7, #32]
 801603c:	6858      	ldr	r0, [r3, #4]
 801603e:	6a3b      	ldr	r3, [r7, #32]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	891a      	ldrh	r2, [r3, #8]
 8016044:	6a3b      	ldr	r3, [r7, #32]
 8016046:	891b      	ldrh	r3, [r3, #8]
 8016048:	1ad3      	subs	r3, r2, r3
 801604a:	b29b      	uxth	r3, r3
 801604c:	2201      	movs	r2, #1
 801604e:	6939      	ldr	r1, [r7, #16]
 8016050:	f7f9 ff2c 	bl	800feac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016054:	6a3b      	ldr	r3, [r7, #32]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	4618      	mov	r0, r3
 801605c:	f7f8 f999 	bl	800e392 <lwip_htonl>
 8016060:	4603      	mov	r3, r0
 8016062:	3301      	adds	r3, #1
 8016064:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	1ad3      	subs	r3, r2, r3
 801606e:	2b00      	cmp	r3, #0
 8016070:	da02      	bge.n	8016078 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	68fa      	ldr	r2, [r7, #12]
 8016076:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801607c:	2200      	movs	r2, #0
 801607e:	69b9      	ldr	r1, [r7, #24]
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff fdef 	bl	8015c64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	3304      	adds	r3, #4
 801608c:	69b9      	ldr	r1, [r7, #24]
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff fe26 	bl	8015ce0 <tcp_output_control_segment>
 8016094:	4603      	mov	r3, r0
 8016096:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016098:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801609c:	4618      	mov	r0, r3
 801609e:	372c      	adds	r7, #44	@ 0x2c
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd90      	pop	{r4, r7, pc}
 80160a4:	0801e5a4 	.word	0x0801e5a4
 80160a8:	0801ed9c 	.word	0x0801ed9c
 80160ac:	0801e5f8 	.word	0x0801e5f8

080160b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80160b8:	f7f9 ffe6 	bl	8010088 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80160bc:	4b0a      	ldr	r3, [pc, #40]	@ (80160e8 <tcpip_tcp_timer+0x38>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <tcpip_tcp_timer+0x1c>
 80160c4:	4b09      	ldr	r3, [pc, #36]	@ (80160ec <tcpip_tcp_timer+0x3c>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d005      	beq.n	80160d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80160cc:	2200      	movs	r2, #0
 80160ce:	4908      	ldr	r1, [pc, #32]	@ (80160f0 <tcpip_tcp_timer+0x40>)
 80160d0:	20fa      	movs	r0, #250	@ 0xfa
 80160d2:	f000 f8f3 	bl	80162bc <sys_timeout>
 80160d6:	e003      	b.n	80160e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80160d8:	4b06      	ldr	r3, [pc, #24]	@ (80160f4 <tcpip_tcp_timer+0x44>)
 80160da:	2200      	movs	r2, #0
 80160dc:	601a      	str	r2, [r3, #0]
  }
}
 80160de:	bf00      	nop
 80160e0:	bf00      	nop
 80160e2:	3708      	adds	r7, #8
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	20011d88 	.word	0x20011d88
 80160ec:	20011d8c 	.word	0x20011d8c
 80160f0:	080160b1 	.word	0x080160b1
 80160f4:	20011dd4 	.word	0x20011dd4

080160f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80160fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016128 <tcp_timer_needed+0x30>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d10f      	bne.n	8016124 <tcp_timer_needed+0x2c>
 8016104:	4b09      	ldr	r3, [pc, #36]	@ (801612c <tcp_timer_needed+0x34>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d103      	bne.n	8016114 <tcp_timer_needed+0x1c>
 801610c:	4b08      	ldr	r3, [pc, #32]	@ (8016130 <tcp_timer_needed+0x38>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d007      	beq.n	8016124 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016114:	4b04      	ldr	r3, [pc, #16]	@ (8016128 <tcp_timer_needed+0x30>)
 8016116:	2201      	movs	r2, #1
 8016118:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801611a:	2200      	movs	r2, #0
 801611c:	4905      	ldr	r1, [pc, #20]	@ (8016134 <tcp_timer_needed+0x3c>)
 801611e:	20fa      	movs	r0, #250	@ 0xfa
 8016120:	f000 f8cc 	bl	80162bc <sys_timeout>
  }
}
 8016124:	bf00      	nop
 8016126:	bd80      	pop	{r7, pc}
 8016128:	20011dd4 	.word	0x20011dd4
 801612c:	20011d88 	.word	0x20011d88
 8016130:	20011d8c 	.word	0x20011d8c
 8016134:	080160b1 	.word	0x080160b1

08016138 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b086      	sub	sp, #24
 801613c:	af00      	add	r7, sp, #0
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	60b9      	str	r1, [r7, #8]
 8016142:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016144:	200a      	movs	r0, #10
 8016146:	f7f8 fdc5 	bl	800ecd4 <memp_malloc>
 801614a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d109      	bne.n	8016166 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d151      	bne.n	80161fc <sys_timeout_abs+0xc4>
 8016158:	4b2a      	ldr	r3, [pc, #168]	@ (8016204 <sys_timeout_abs+0xcc>)
 801615a:	22be      	movs	r2, #190	@ 0xbe
 801615c:	492a      	ldr	r1, [pc, #168]	@ (8016208 <sys_timeout_abs+0xd0>)
 801615e:	482b      	ldr	r0, [pc, #172]	@ (801620c <sys_timeout_abs+0xd4>)
 8016160:	f003 fdf8 	bl	8019d54 <iprintf>
    return;
 8016164:	e04a      	b.n	80161fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	2200      	movs	r2, #0
 801616a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	68fa      	ldr	r2, [r7, #12]
 801617c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801617e:	4b24      	ldr	r3, [pc, #144]	@ (8016210 <sys_timeout_abs+0xd8>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d103      	bne.n	801618e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016186:	4a22      	ldr	r2, [pc, #136]	@ (8016210 <sys_timeout_abs+0xd8>)
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	6013      	str	r3, [r2, #0]
    return;
 801618c:	e037      	b.n	80161fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	685a      	ldr	r2, [r3, #4]
 8016192:	4b1f      	ldr	r3, [pc, #124]	@ (8016210 <sys_timeout_abs+0xd8>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	0fdb      	lsrs	r3, r3, #31
 801619c:	f003 0301 	and.w	r3, r3, #1
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d007      	beq.n	80161b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80161a6:	4b1a      	ldr	r3, [pc, #104]	@ (8016210 <sys_timeout_abs+0xd8>)
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80161ae:	4a18      	ldr	r2, [pc, #96]	@ (8016210 <sys_timeout_abs+0xd8>)
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	6013      	str	r3, [r2, #0]
 80161b4:	e023      	b.n	80161fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80161b6:	4b16      	ldr	r3, [pc, #88]	@ (8016210 <sys_timeout_abs+0xd8>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	617b      	str	r3, [r7, #20]
 80161bc:	e01a      	b.n	80161f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d00b      	beq.n	80161de <sys_timeout_abs+0xa6>
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	685a      	ldr	r2, [r3, #4]
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	1ad3      	subs	r3, r2, r3
 80161d2:	0fdb      	lsrs	r3, r3, #31
 80161d4:	f003 0301 	and.w	r3, r3, #1
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d007      	beq.n	80161ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	693a      	ldr	r2, [r7, #16]
 80161ea:	601a      	str	r2, [r3, #0]
        break;
 80161ec:	e007      	b.n	80161fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80161ee:	697b      	ldr	r3, [r7, #20]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	617b      	str	r3, [r7, #20]
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d1e1      	bne.n	80161be <sys_timeout_abs+0x86>
 80161fa:	e000      	b.n	80161fe <sys_timeout_abs+0xc6>
    return;
 80161fc:	bf00      	nop
      }
    }
  }
}
 80161fe:	3718      	adds	r7, #24
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}
 8016204:	0801edc0 	.word	0x0801edc0
 8016208:	0801edf4 	.word	0x0801edf4
 801620c:	0801ee34 	.word	0x0801ee34
 8016210:	20011dcc 	.word	0x20011dcc

08016214 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	4798      	blx	r3

  now = sys_now();
 8016226:	f7f0 ff6f 	bl	8007108 <sys_now>
 801622a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	4b0f      	ldr	r3, [pc, #60]	@ (8016270 <lwip_cyclic_timer+0x5c>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4413      	add	r3, r2
 8016236:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	0fdb      	lsrs	r3, r3, #31
 8016240:	f003 0301 	and.w	r3, r3, #1
 8016244:	b2db      	uxtb	r3, r3
 8016246:	2b00      	cmp	r3, #0
 8016248:	d009      	beq.n	801625e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	681a      	ldr	r2, [r3, #0]
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	4413      	add	r3, r2
 8016252:	687a      	ldr	r2, [r7, #4]
 8016254:	4907      	ldr	r1, [pc, #28]	@ (8016274 <lwip_cyclic_timer+0x60>)
 8016256:	4618      	mov	r0, r3
 8016258:	f7ff ff6e 	bl	8016138 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801625c:	e004      	b.n	8016268 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	4904      	ldr	r1, [pc, #16]	@ (8016274 <lwip_cyclic_timer+0x60>)
 8016262:	68f8      	ldr	r0, [r7, #12]
 8016264:	f7ff ff68 	bl	8016138 <sys_timeout_abs>
}
 8016268:	bf00      	nop
 801626a:	3718      	adds	r7, #24
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}
 8016270:	20011dd0 	.word	0x20011dd0
 8016274:	08016215 	.word	0x08016215

08016278 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801627e:	2301      	movs	r3, #1
 8016280:	607b      	str	r3, [r7, #4]
 8016282:	e00e      	b.n	80162a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016284:	4a0b      	ldr	r2, [pc, #44]	@ (80162b4 <sys_timeouts_init+0x3c>)
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	00db      	lsls	r3, r3, #3
 8016290:	4a08      	ldr	r2, [pc, #32]	@ (80162b4 <sys_timeouts_init+0x3c>)
 8016292:	4413      	add	r3, r2
 8016294:	461a      	mov	r2, r3
 8016296:	4908      	ldr	r1, [pc, #32]	@ (80162b8 <sys_timeouts_init+0x40>)
 8016298:	f000 f810 	bl	80162bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	3301      	adds	r3, #1
 80162a0:	607b      	str	r3, [r7, #4]
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b02      	cmp	r3, #2
 80162a6:	d9ed      	bls.n	8016284 <sys_timeouts_init+0xc>
  }
}
 80162a8:	bf00      	nop
 80162aa:	bf00      	nop
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
 80162b2:	bf00      	nop
 80162b4:	0801f9e4 	.word	0x0801f9e4
 80162b8:	08016215 	.word	0x08016215

080162bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b086      	sub	sp, #24
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80162ce:	d306      	bcc.n	80162de <sys_timeout+0x22>
 80162d0:	4b0a      	ldr	r3, [pc, #40]	@ (80162fc <sys_timeout+0x40>)
 80162d2:	f240 1229 	movw	r2, #297	@ 0x129
 80162d6:	490a      	ldr	r1, [pc, #40]	@ (8016300 <sys_timeout+0x44>)
 80162d8:	480a      	ldr	r0, [pc, #40]	@ (8016304 <sys_timeout+0x48>)
 80162da:	f003 fd3b 	bl	8019d54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80162de:	f7f0 ff13 	bl	8007108 <sys_now>
 80162e2:	4602      	mov	r2, r0
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	4413      	add	r3, r2
 80162e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	68b9      	ldr	r1, [r7, #8]
 80162ee:	6978      	ldr	r0, [r7, #20]
 80162f0:	f7ff ff22 	bl	8016138 <sys_timeout_abs>
#endif
}
 80162f4:	bf00      	nop
 80162f6:	3718      	adds	r7, #24
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	0801edc0 	.word	0x0801edc0
 8016300:	0801ee5c 	.word	0x0801ee5c
 8016304:	0801ee34 	.word	0x0801ee34

08016308 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801630e:	f7f0 fefb 	bl	8007108 <sys_now>
 8016312:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016314:	4b17      	ldr	r3, [pc, #92]	@ (8016374 <sys_check_timeouts+0x6c>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d022      	beq.n	8016366 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	1ad3      	subs	r3, r2, r3
 8016328:	0fdb      	lsrs	r3, r3, #31
 801632a:	f003 0301 	and.w	r3, r3, #1
 801632e:	b2db      	uxtb	r3, r3
 8016330:	2b00      	cmp	r3, #0
 8016332:	d11a      	bne.n	801636a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	4a0e      	ldr	r2, [pc, #56]	@ (8016374 <sys_check_timeouts+0x6c>)
 801633a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	689b      	ldr	r3, [r3, #8]
 8016340:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	68db      	ldr	r3, [r3, #12]
 8016346:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	4a0a      	ldr	r2, [pc, #40]	@ (8016378 <sys_check_timeouts+0x70>)
 801634e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016350:	68b9      	ldr	r1, [r7, #8]
 8016352:	200a      	movs	r0, #10
 8016354:	f7f8 fd10 	bl	800ed78 <memp_free>
    if (handler != NULL) {
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d0da      	beq.n	8016314 <sys_check_timeouts+0xc>
      handler(arg);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6838      	ldr	r0, [r7, #0]
 8016362:	4798      	blx	r3
  do {
 8016364:	e7d6      	b.n	8016314 <sys_check_timeouts+0xc>
      return;
 8016366:	bf00      	nop
 8016368:	e000      	b.n	801636c <sys_check_timeouts+0x64>
      return;
 801636a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801636c:	3710      	adds	r7, #16
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	20011dcc 	.word	0x20011dcc
 8016378:	20011dd0 	.word	0x20011dd0

0801637c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016382:	4b16      	ldr	r3, [pc, #88]	@ (80163dc <sys_timeouts_sleeptime+0x60>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d102      	bne.n	8016390 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801638a:	f04f 33ff 	mov.w	r3, #4294967295
 801638e:	e020      	b.n	80163d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016390:	f7f0 feba 	bl	8007108 <sys_now>
 8016394:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016396:	4b11      	ldr	r3, [pc, #68]	@ (80163dc <sys_timeouts_sleeptime+0x60>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	685a      	ldr	r2, [r3, #4]
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	1ad3      	subs	r3, r2, r3
 80163a0:	0fdb      	lsrs	r3, r3, #31
 80163a2:	f003 0301 	and.w	r3, r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d001      	beq.n	80163b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80163ac:	2300      	movs	r3, #0
 80163ae:	e010      	b.n	80163d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80163b0:	4b0a      	ldr	r3, [pc, #40]	@ (80163dc <sys_timeouts_sleeptime+0x60>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	685a      	ldr	r2, [r3, #4]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	da06      	bge.n	80163d0 <sys_timeouts_sleeptime+0x54>
 80163c2:	4b07      	ldr	r3, [pc, #28]	@ (80163e0 <sys_timeouts_sleeptime+0x64>)
 80163c4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80163c8:	4906      	ldr	r1, [pc, #24]	@ (80163e4 <sys_timeouts_sleeptime+0x68>)
 80163ca:	4807      	ldr	r0, [pc, #28]	@ (80163e8 <sys_timeouts_sleeptime+0x6c>)
 80163cc:	f003 fcc2 	bl	8019d54 <iprintf>
    return ret;
 80163d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3708      	adds	r7, #8
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	20011dcc 	.word	0x20011dcc
 80163e0:	0801edc0 	.word	0x0801edc0
 80163e4:	0801ee94 	.word	0x0801ee94
 80163e8:	0801ee34 	.word	0x0801ee34

080163ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80163f0:	f002 ff78 	bl	80192e4 <rand>
 80163f4:	4603      	mov	r3, r0
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016402:	b29a      	uxth	r2, r3
 8016404:	4b01      	ldr	r3, [pc, #4]	@ (801640c <udp_init+0x20>)
 8016406:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016408:	bf00      	nop
 801640a:	bd80      	pop	{r7, pc}
 801640c:	20000018 	.word	0x20000018

08016410 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016410:	b480      	push	{r7}
 8016412:	b083      	sub	sp, #12
 8016414:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016416:	2300      	movs	r3, #0
 8016418:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801641a:	4b17      	ldr	r3, [pc, #92]	@ (8016478 <udp_new_port+0x68>)
 801641c:	881b      	ldrh	r3, [r3, #0]
 801641e:	1c5a      	adds	r2, r3, #1
 8016420:	b291      	uxth	r1, r2
 8016422:	4a15      	ldr	r2, [pc, #84]	@ (8016478 <udp_new_port+0x68>)
 8016424:	8011      	strh	r1, [r2, #0]
 8016426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801642a:	4293      	cmp	r3, r2
 801642c:	d103      	bne.n	8016436 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801642e:	4b12      	ldr	r3, [pc, #72]	@ (8016478 <udp_new_port+0x68>)
 8016430:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016434:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016436:	4b11      	ldr	r3, [pc, #68]	@ (801647c <udp_new_port+0x6c>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	603b      	str	r3, [r7, #0]
 801643c:	e011      	b.n	8016462 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	8a5a      	ldrh	r2, [r3, #18]
 8016442:	4b0d      	ldr	r3, [pc, #52]	@ (8016478 <udp_new_port+0x68>)
 8016444:	881b      	ldrh	r3, [r3, #0]
 8016446:	429a      	cmp	r2, r3
 8016448:	d108      	bne.n	801645c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801644a:	88fb      	ldrh	r3, [r7, #6]
 801644c:	3301      	adds	r3, #1
 801644e:	80fb      	strh	r3, [r7, #6]
 8016450:	88fb      	ldrh	r3, [r7, #6]
 8016452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016456:	d3e0      	bcc.n	801641a <udp_new_port+0xa>
        return 0;
 8016458:	2300      	movs	r3, #0
 801645a:	e007      	b.n	801646c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	603b      	str	r3, [r7, #0]
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1ea      	bne.n	801643e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016468:	4b03      	ldr	r3, [pc, #12]	@ (8016478 <udp_new_port+0x68>)
 801646a:	881b      	ldrh	r3, [r3, #0]
}
 801646c:	4618      	mov	r0, r3
 801646e:	370c      	adds	r7, #12
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr
 8016478:	20000018 	.word	0x20000018
 801647c:	20011dd8 	.word	0x20011dd8

08016480 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	4613      	mov	r3, r2
 801648c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d105      	bne.n	80164a0 <udp_input_local_match+0x20>
 8016494:	4b27      	ldr	r3, [pc, #156]	@ (8016534 <udp_input_local_match+0xb4>)
 8016496:	2287      	movs	r2, #135	@ 0x87
 8016498:	4927      	ldr	r1, [pc, #156]	@ (8016538 <udp_input_local_match+0xb8>)
 801649a:	4828      	ldr	r0, [pc, #160]	@ (801653c <udp_input_local_match+0xbc>)
 801649c:	f003 fc5a 	bl	8019d54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d105      	bne.n	80164b2 <udp_input_local_match+0x32>
 80164a6:	4b23      	ldr	r3, [pc, #140]	@ (8016534 <udp_input_local_match+0xb4>)
 80164a8:	2288      	movs	r2, #136	@ 0x88
 80164aa:	4925      	ldr	r1, [pc, #148]	@ (8016540 <udp_input_local_match+0xc0>)
 80164ac:	4823      	ldr	r0, [pc, #140]	@ (801653c <udp_input_local_match+0xbc>)
 80164ae:	f003 fc51 	bl	8019d54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	7a1b      	ldrb	r3, [r3, #8]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00b      	beq.n	80164d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	7a1a      	ldrb	r2, [r3, #8]
 80164be:	4b21      	ldr	r3, [pc, #132]	@ (8016544 <udp_input_local_match+0xc4>)
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164c6:	3301      	adds	r3, #1
 80164c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d001      	beq.n	80164d2 <udp_input_local_match+0x52>
    return 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	e02b      	b.n	801652a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80164d2:	79fb      	ldrb	r3, [r7, #7]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d018      	beq.n	801650a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d013      	beq.n	8016506 <udp_input_local_match+0x86>
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d00f      	beq.n	8016506 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80164e6:	4b17      	ldr	r3, [pc, #92]	@ (8016544 <udp_input_local_match+0xc4>)
 80164e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80164ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ee:	d00a      	beq.n	8016506 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681a      	ldr	r2, [r3, #0]
 80164f4:	4b13      	ldr	r3, [pc, #76]	@ (8016544 <udp_input_local_match+0xc4>)
 80164f6:	695b      	ldr	r3, [r3, #20]
 80164f8:	405a      	eors	r2, r3
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	3308      	adds	r3, #8
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016502:	2b00      	cmp	r3, #0
 8016504:	d110      	bne.n	8016528 <udp_input_local_match+0xa8>
          return 1;
 8016506:	2301      	movs	r3, #1
 8016508:	e00f      	b.n	801652a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d009      	beq.n	8016524 <udp_input_local_match+0xa4>
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d005      	beq.n	8016524 <udp_input_local_match+0xa4>
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	4b09      	ldr	r3, [pc, #36]	@ (8016544 <udp_input_local_match+0xc4>)
 801651e:	695b      	ldr	r3, [r3, #20]
 8016520:	429a      	cmp	r2, r3
 8016522:	d101      	bne.n	8016528 <udp_input_local_match+0xa8>
        return 1;
 8016524:	2301      	movs	r3, #1
 8016526:	e000      	b.n	801652a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016528:	2300      	movs	r3, #0
}
 801652a:	4618      	mov	r0, r3
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	0801eea8 	.word	0x0801eea8
 8016538:	0801eed8 	.word	0x0801eed8
 801653c:	0801eefc 	.word	0x0801eefc
 8016540:	0801ef24 	.word	0x0801ef24
 8016544:	2000c468 	.word	0x2000c468

08016548 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016548:	b590      	push	{r4, r7, lr}
 801654a:	b08d      	sub	sp, #52	@ 0x34
 801654c:	af02      	add	r7, sp, #8
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016552:	2300      	movs	r3, #0
 8016554:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d105      	bne.n	8016568 <udp_input+0x20>
 801655c:	4b7c      	ldr	r3, [pc, #496]	@ (8016750 <udp_input+0x208>)
 801655e:	22cf      	movs	r2, #207	@ 0xcf
 8016560:	497c      	ldr	r1, [pc, #496]	@ (8016754 <udp_input+0x20c>)
 8016562:	487d      	ldr	r0, [pc, #500]	@ (8016758 <udp_input+0x210>)
 8016564:	f003 fbf6 	bl	8019d54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d105      	bne.n	801657a <udp_input+0x32>
 801656e:	4b78      	ldr	r3, [pc, #480]	@ (8016750 <udp_input+0x208>)
 8016570:	22d0      	movs	r2, #208	@ 0xd0
 8016572:	497a      	ldr	r1, [pc, #488]	@ (801675c <udp_input+0x214>)
 8016574:	4878      	ldr	r0, [pc, #480]	@ (8016758 <udp_input+0x210>)
 8016576:	f003 fbed 	bl	8019d54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	895b      	ldrh	r3, [r3, #10]
 801657e:	2b07      	cmp	r3, #7
 8016580:	d803      	bhi.n	801658a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f7f9 fa9c 	bl	800fac0 <pbuf_free>
    goto end;
 8016588:	e0de      	b.n	8016748 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016590:	4b73      	ldr	r3, [pc, #460]	@ (8016760 <udp_input+0x218>)
 8016592:	695b      	ldr	r3, [r3, #20]
 8016594:	4a72      	ldr	r2, [pc, #456]	@ (8016760 <udp_input+0x218>)
 8016596:	6812      	ldr	r2, [r2, #0]
 8016598:	4611      	mov	r1, r2
 801659a:	4618      	mov	r0, r3
 801659c:	f001 fd96 	bl	80180cc <ip4_addr_isbroadcast_u32>
 80165a0:	4603      	mov	r3, r0
 80165a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f7 fedc 	bl	800e368 <lwip_htons>
 80165b0:	4603      	mov	r3, r0
 80165b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	885b      	ldrh	r3, [r3, #2]
 80165b8:	b29b      	uxth	r3, r3
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7f7 fed4 	bl	800e368 <lwip_htons>
 80165c0:	4603      	mov	r3, r0
 80165c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80165c4:	2300      	movs	r3, #0
 80165c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80165c8:	2300      	movs	r3, #0
 80165ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80165cc:	2300      	movs	r3, #0
 80165ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80165d0:	4b64      	ldr	r3, [pc, #400]	@ (8016764 <udp_input+0x21c>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80165d6:	e054      	b.n	8016682 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80165d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165da:	8a5b      	ldrh	r3, [r3, #18]
 80165dc:	89fa      	ldrh	r2, [r7, #14]
 80165de:	429a      	cmp	r2, r3
 80165e0:	d14a      	bne.n	8016678 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80165e2:	7cfb      	ldrb	r3, [r7, #19]
 80165e4:	461a      	mov	r2, r3
 80165e6:	6839      	ldr	r1, [r7, #0]
 80165e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80165ea:	f7ff ff49 	bl	8016480 <udp_input_local_match>
 80165ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d041      	beq.n	8016678 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80165f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f6:	7c1b      	ldrb	r3, [r3, #16]
 80165f8:	f003 0304 	and.w	r3, r3, #4
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d11d      	bne.n	801663c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d102      	bne.n	801660c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016608:	61fb      	str	r3, [r7, #28]
 801660a:	e017      	b.n	801663c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801660c:	7cfb      	ldrb	r3, [r7, #19]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d014      	beq.n	801663c <udp_input+0xf4>
 8016612:	4b53      	ldr	r3, [pc, #332]	@ (8016760 <udp_input+0x218>)
 8016614:	695b      	ldr	r3, [r3, #20]
 8016616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801661a:	d10f      	bne.n	801663c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	681a      	ldr	r2, [r3, #0]
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	3304      	adds	r3, #4
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	429a      	cmp	r2, r3
 8016628:	d008      	beq.n	801663c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	3304      	adds	r3, #4
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	429a      	cmp	r2, r3
 8016636:	d101      	bne.n	801663c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801663a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801663e:	8a9b      	ldrh	r3, [r3, #20]
 8016640:	8a3a      	ldrh	r2, [r7, #16]
 8016642:	429a      	cmp	r2, r3
 8016644:	d118      	bne.n	8016678 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016648:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801664a:	2b00      	cmp	r3, #0
 801664c:	d005      	beq.n	801665a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016650:	685a      	ldr	r2, [r3, #4]
 8016652:	4b43      	ldr	r3, [pc, #268]	@ (8016760 <udp_input+0x218>)
 8016654:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016656:	429a      	cmp	r2, r3
 8016658:	d10e      	bne.n	8016678 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801665a:	6a3b      	ldr	r3, [r7, #32]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d014      	beq.n	801668a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016662:	68da      	ldr	r2, [r3, #12]
 8016664:	6a3b      	ldr	r3, [r7, #32]
 8016666:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016668:	4b3e      	ldr	r3, [pc, #248]	@ (8016764 <udp_input+0x21c>)
 801666a:	681a      	ldr	r2, [r3, #0]
 801666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016670:	4a3c      	ldr	r2, [pc, #240]	@ (8016764 <udp_input+0x21c>)
 8016672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016674:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016676:	e008      	b.n	801668a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801667a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801667e:	68db      	ldr	r3, [r3, #12]
 8016680:	627b      	str	r3, [r7, #36]	@ 0x24
 8016682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016684:	2b00      	cmp	r3, #0
 8016686:	d1a7      	bne.n	80165d8 <udp_input+0x90>
 8016688:	e000      	b.n	801668c <udp_input+0x144>
        break;
 801668a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668e:	2b00      	cmp	r3, #0
 8016690:	d101      	bne.n	8016696 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	2b00      	cmp	r3, #0
 801669a:	d002      	beq.n	80166a2 <udp_input+0x15a>
    for_us = 1;
 801669c:	2301      	movs	r3, #1
 801669e:	76fb      	strb	r3, [r7, #27]
 80166a0:	e00a      	b.n	80166b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	3304      	adds	r3, #4
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	4b2d      	ldr	r3, [pc, #180]	@ (8016760 <udp_input+0x218>)
 80166aa:	695b      	ldr	r3, [r3, #20]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	bf0c      	ite	eq
 80166b0:	2301      	moveq	r3, #1
 80166b2:	2300      	movne	r3, #0
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80166b8:	7efb      	ldrb	r3, [r7, #27]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d041      	beq.n	8016742 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80166be:	2108      	movs	r1, #8
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7f9 f977 	bl	800f9b4 <pbuf_remove_header>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00a      	beq.n	80166e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80166cc:	4b20      	ldr	r3, [pc, #128]	@ (8016750 <udp_input+0x208>)
 80166ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80166d2:	4925      	ldr	r1, [pc, #148]	@ (8016768 <udp_input+0x220>)
 80166d4:	4820      	ldr	r0, [pc, #128]	@ (8016758 <udp_input+0x210>)
 80166d6:	f003 fb3d 	bl	8019d54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f7f9 f9f0 	bl	800fac0 <pbuf_free>
      goto end;
 80166e0:	e032      	b.n	8016748 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80166e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d012      	beq.n	801670e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80166e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ea:	699b      	ldr	r3, [r3, #24]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00a      	beq.n	8016706 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80166f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f2:	699c      	ldr	r4, [r3, #24]
 80166f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f6:	69d8      	ldr	r0, [r3, #28]
 80166f8:	8a3b      	ldrh	r3, [r7, #16]
 80166fa:	9300      	str	r3, [sp, #0]
 80166fc:	4b1b      	ldr	r3, [pc, #108]	@ (801676c <udp_input+0x224>)
 80166fe:	687a      	ldr	r2, [r7, #4]
 8016700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016702:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016704:	e021      	b.n	801674a <udp_input+0x202>
        pbuf_free(p);
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f7f9 f9da 	bl	800fac0 <pbuf_free>
        goto end;
 801670c:	e01c      	b.n	8016748 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801670e:	7cfb      	ldrb	r3, [r7, #19]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d112      	bne.n	801673a <udp_input+0x1f2>
 8016714:	4b12      	ldr	r3, [pc, #72]	@ (8016760 <udp_input+0x218>)
 8016716:	695b      	ldr	r3, [r3, #20]
 8016718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801671c:	2be0      	cmp	r3, #224	@ 0xe0
 801671e:	d00c      	beq.n	801673a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016720:	4b0f      	ldr	r3, [pc, #60]	@ (8016760 <udp_input+0x218>)
 8016722:	899b      	ldrh	r3, [r3, #12]
 8016724:	3308      	adds	r3, #8
 8016726:	b29b      	uxth	r3, r3
 8016728:	b21b      	sxth	r3, r3
 801672a:	4619      	mov	r1, r3
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f7f9 f9b4 	bl	800fa9a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016732:	2103      	movs	r1, #3
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f001 f9a9 	bl	8017a8c <icmp_dest_unreach>
      pbuf_free(p);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f7f9 f9c0 	bl	800fac0 <pbuf_free>
  return;
 8016740:	e003      	b.n	801674a <udp_input+0x202>
    pbuf_free(p);
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f7f9 f9bc 	bl	800fac0 <pbuf_free>
  return;
 8016748:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801674a:	372c      	adds	r7, #44	@ 0x2c
 801674c:	46bd      	mov	sp, r7
 801674e:	bd90      	pop	{r4, r7, pc}
 8016750:	0801eea8 	.word	0x0801eea8
 8016754:	0801ef4c 	.word	0x0801ef4c
 8016758:	0801eefc 	.word	0x0801eefc
 801675c:	0801ef64 	.word	0x0801ef64
 8016760:	2000c468 	.word	0x2000c468
 8016764:	20011dd8 	.word	0x20011dd8
 8016768:	0801ef80 	.word	0x0801ef80
 801676c:	2000c478 	.word	0x2000c478

08016770 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	4613      	mov	r3, r2
 801677c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d101      	bne.n	8016788 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016784:	4b39      	ldr	r3, [pc, #228]	@ (801686c <udp_bind+0xfc>)
 8016786:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d109      	bne.n	80167a2 <udp_bind+0x32>
 801678e:	4b38      	ldr	r3, [pc, #224]	@ (8016870 <udp_bind+0x100>)
 8016790:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016794:	4937      	ldr	r1, [pc, #220]	@ (8016874 <udp_bind+0x104>)
 8016796:	4838      	ldr	r0, [pc, #224]	@ (8016878 <udp_bind+0x108>)
 8016798:	f003 fadc 	bl	8019d54 <iprintf>
 801679c:	f06f 030f 	mvn.w	r3, #15
 80167a0:	e060      	b.n	8016864 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80167a2:	2300      	movs	r3, #0
 80167a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167a6:	4b35      	ldr	r3, [pc, #212]	@ (801687c <udp_bind+0x10c>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	617b      	str	r3, [r7, #20]
 80167ac:	e009      	b.n	80167c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d102      	bne.n	80167bc <udp_bind+0x4c>
      rebind = 1;
 80167b6:	2301      	movs	r3, #1
 80167b8:	74fb      	strb	r3, [r7, #19]
      break;
 80167ba:	e005      	b.n	80167c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	617b      	str	r3, [r7, #20]
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d1f2      	bne.n	80167ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80167c8:	88fb      	ldrh	r3, [r7, #6]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d109      	bne.n	80167e2 <udp_bind+0x72>
    port = udp_new_port();
 80167ce:	f7ff fe1f 	bl	8016410 <udp_new_port>
 80167d2:	4603      	mov	r3, r0
 80167d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80167d6:	88fb      	ldrh	r3, [r7, #6]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d12c      	bne.n	8016836 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80167dc:	f06f 0307 	mvn.w	r3, #7
 80167e0:	e040      	b.n	8016864 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167e2:	4b26      	ldr	r3, [pc, #152]	@ (801687c <udp_bind+0x10c>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	617b      	str	r3, [r7, #20]
 80167e8:	e022      	b.n	8016830 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80167ea:	68fa      	ldr	r2, [r7, #12]
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d01b      	beq.n	801682a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	8a5b      	ldrh	r3, [r3, #18]
 80167f6:	88fa      	ldrh	r2, [r7, #6]
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d116      	bne.n	801682a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	681a      	ldr	r2, [r3, #0]
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016804:	429a      	cmp	r2, r3
 8016806:	d00d      	beq.n	8016824 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00a      	beq.n	8016824 <udp_bind+0xb4>
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d006      	beq.n	8016824 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016816:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016818:	2b00      	cmp	r3, #0
 801681a:	d003      	beq.n	8016824 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d102      	bne.n	801682a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016824:	f06f 0307 	mvn.w	r3, #7
 8016828:	e01c      	b.n	8016864 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	68db      	ldr	r3, [r3, #12]
 801682e:	617b      	str	r3, [r7, #20]
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1d9      	bne.n	80167ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016836:	68bb      	ldr	r3, [r7, #8]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d002      	beq.n	8016842 <udp_bind+0xd2>
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	e000      	b.n	8016844 <udp_bind+0xd4>
 8016842:	2300      	movs	r3, #0
 8016844:	68fa      	ldr	r2, [r7, #12]
 8016846:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	88fa      	ldrh	r2, [r7, #6]
 801684c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801684e:	7cfb      	ldrb	r3, [r7, #19]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d106      	bne.n	8016862 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016854:	4b09      	ldr	r3, [pc, #36]	@ (801687c <udp_bind+0x10c>)
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801685c:	4a07      	ldr	r2, [pc, #28]	@ (801687c <udp_bind+0x10c>)
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	0801f9fc 	.word	0x0801f9fc
 8016870:	0801eea8 	.word	0x0801eea8
 8016874:	0801f170 	.word	0x0801f170
 8016878:	0801eefc 	.word	0x0801eefc
 801687c:	20011dd8 	.word	0x20011dd8

08016880 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b084      	sub	sp, #16
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d107      	bne.n	80168a2 <udp_recv+0x22>
 8016892:	4b08      	ldr	r3, [pc, #32]	@ (80168b4 <udp_recv+0x34>)
 8016894:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016898:	4907      	ldr	r1, [pc, #28]	@ (80168b8 <udp_recv+0x38>)
 801689a:	4808      	ldr	r0, [pc, #32]	@ (80168bc <udp_recv+0x3c>)
 801689c:	f003 fa5a 	bl	8019d54 <iprintf>
 80168a0:	e005      	b.n	80168ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	68ba      	ldr	r2, [r7, #8]
 80168a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	61da      	str	r2, [r3, #28]
}
 80168ae:	3710      	adds	r7, #16
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	0801eea8 	.word	0x0801eea8
 80168b8:	0801f1dc 	.word	0x0801f1dc
 80168bc:	0801eefc 	.word	0x0801eefc

080168c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d107      	bne.n	80168de <udp_remove+0x1e>
 80168ce:	4b19      	ldr	r3, [pc, #100]	@ (8016934 <udp_remove+0x74>)
 80168d0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80168d4:	4918      	ldr	r1, [pc, #96]	@ (8016938 <udp_remove+0x78>)
 80168d6:	4819      	ldr	r0, [pc, #100]	@ (801693c <udp_remove+0x7c>)
 80168d8:	f003 fa3c 	bl	8019d54 <iprintf>
 80168dc:	e026      	b.n	801692c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80168de:	4b18      	ldr	r3, [pc, #96]	@ (8016940 <udp_remove+0x80>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d105      	bne.n	80168f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80168e8:	4b15      	ldr	r3, [pc, #84]	@ (8016940 <udp_remove+0x80>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	68db      	ldr	r3, [r3, #12]
 80168ee:	4a14      	ldr	r2, [pc, #80]	@ (8016940 <udp_remove+0x80>)
 80168f0:	6013      	str	r3, [r2, #0]
 80168f2:	e017      	b.n	8016924 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80168f4:	4b12      	ldr	r3, [pc, #72]	@ (8016940 <udp_remove+0x80>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	60fb      	str	r3, [r7, #12]
 80168fa:	e010      	b.n	801691e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d009      	beq.n	8016918 <udp_remove+0x58>
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	429a      	cmp	r2, r3
 801690c:	d104      	bne.n	8016918 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	68da      	ldr	r2, [r3, #12]
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	60da      	str	r2, [r3, #12]
        break;
 8016916:	e005      	b.n	8016924 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	60fb      	str	r3, [r7, #12]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d1eb      	bne.n	80168fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016924:	6879      	ldr	r1, [r7, #4]
 8016926:	2000      	movs	r0, #0
 8016928:	f7f8 fa26 	bl	800ed78 <memp_free>
}
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	0801eea8 	.word	0x0801eea8
 8016938:	0801f1f4 	.word	0x0801f1f4
 801693c:	0801eefc 	.word	0x0801eefc
 8016940:	20011dd8 	.word	0x20011dd8

08016944 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801694a:	2000      	movs	r0, #0
 801694c:	f7f8 f9c2 	bl	800ecd4 <memp_malloc>
 8016950:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d007      	beq.n	8016968 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016958:	2220      	movs	r2, #32
 801695a:	2100      	movs	r1, #0
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f003 fbbf 	bl	801a0e0 <memset>
    pcb->ttl = UDP_TTL;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	22ff      	movs	r2, #255	@ 0xff
 8016966:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016968:	687b      	ldr	r3, [r7, #4]
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b084      	sub	sp, #16
 8016976:	af00      	add	r7, sp, #0
 8016978:	4603      	mov	r3, r0
 801697a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801697c:	f7ff ffe2 	bl	8016944 <udp_new>
 8016980:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016982:	68fb      	ldr	r3, [r7, #12]
}
 8016984:	4618      	mov	r0, r3
 8016986:	3710      	adds	r7, #16
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801698c:	b480      	push	{r7}
 801698e:	b085      	sub	sp, #20
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d01e      	beq.n	80169da <udp_netif_ip_addr_changed+0x4e>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d01a      	beq.n	80169da <udp_netif_ip_addr_changed+0x4e>
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d017      	beq.n	80169da <udp_netif_ip_addr_changed+0x4e>
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d013      	beq.n	80169da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80169b2:	4b0d      	ldr	r3, [pc, #52]	@ (80169e8 <udp_netif_ip_addr_changed+0x5c>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	60fb      	str	r3, [r7, #12]
 80169b8:	e00c      	b.n	80169d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	429a      	cmp	r2, r3
 80169c4:	d103      	bne.n	80169ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	68db      	ldr	r3, [r3, #12]
 80169d2:	60fb      	str	r3, [r7, #12]
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1ef      	bne.n	80169ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80169da:	bf00      	nop
 80169dc:	3714      	adds	r7, #20
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr
 80169e6:	bf00      	nop
 80169e8:	20011dd8 	.word	0x20011dd8

080169ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80169f4:	4915      	ldr	r1, [pc, #84]	@ (8016a4c <etharp_free_entry+0x60>)
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	4613      	mov	r3, r2
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	4413      	add	r3, r2
 80169fe:	00db      	lsls	r3, r3, #3
 8016a00:	440b      	add	r3, r1
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d013      	beq.n	8016a30 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016a08:	4910      	ldr	r1, [pc, #64]	@ (8016a4c <etharp_free_entry+0x60>)
 8016a0a:	687a      	ldr	r2, [r7, #4]
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	005b      	lsls	r3, r3, #1
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7f9 f851 	bl	800fac0 <pbuf_free>
    arp_table[i].q = NULL;
 8016a1e:	490b      	ldr	r1, [pc, #44]	@ (8016a4c <etharp_free_entry+0x60>)
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	4613      	mov	r3, r2
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	4413      	add	r3, r2
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	440b      	add	r3, r1
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016a30:	4906      	ldr	r1, [pc, #24]	@ (8016a4c <etharp_free_entry+0x60>)
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	4613      	mov	r3, r2
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	4413      	add	r3, r2
 8016a3a:	00db      	lsls	r3, r3, #3
 8016a3c:	440b      	add	r3, r1
 8016a3e:	3314      	adds	r3, #20
 8016a40:	2200      	movs	r2, #0
 8016a42:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016a44:	bf00      	nop
 8016a46:	3708      	adds	r7, #8
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	20011ddc 	.word	0x20011ddc

08016a50 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a56:	2300      	movs	r3, #0
 8016a58:	607b      	str	r3, [r7, #4]
 8016a5a:	e096      	b.n	8016b8a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016a5c:	494f      	ldr	r1, [pc, #316]	@ (8016b9c <etharp_tmr+0x14c>)
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	4613      	mov	r3, r2
 8016a62:	005b      	lsls	r3, r3, #1
 8016a64:	4413      	add	r3, r2
 8016a66:	00db      	lsls	r3, r3, #3
 8016a68:	440b      	add	r3, r1
 8016a6a:	3314      	adds	r3, #20
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016a70:	78fb      	ldrb	r3, [r7, #3]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	f000 8086 	beq.w	8016b84 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016a78:	4948      	ldr	r1, [pc, #288]	@ (8016b9c <etharp_tmr+0x14c>)
 8016a7a:	687a      	ldr	r2, [r7, #4]
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	005b      	lsls	r3, r3, #1
 8016a80:	4413      	add	r3, r2
 8016a82:	00db      	lsls	r3, r3, #3
 8016a84:	440b      	add	r3, r1
 8016a86:	3312      	adds	r3, #18
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	b298      	uxth	r0, r3
 8016a8e:	4943      	ldr	r1, [pc, #268]	@ (8016b9c <etharp_tmr+0x14c>)
 8016a90:	687a      	ldr	r2, [r7, #4]
 8016a92:	4613      	mov	r3, r2
 8016a94:	005b      	lsls	r3, r3, #1
 8016a96:	4413      	add	r3, r2
 8016a98:	00db      	lsls	r3, r3, #3
 8016a9a:	440b      	add	r3, r1
 8016a9c:	3312      	adds	r3, #18
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016aa2:	493e      	ldr	r1, [pc, #248]	@ (8016b9c <etharp_tmr+0x14c>)
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	4413      	add	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	440b      	add	r3, r1
 8016ab0:	3312      	adds	r3, #18
 8016ab2:	881b      	ldrh	r3, [r3, #0]
 8016ab4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016ab8:	d215      	bcs.n	8016ae6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016aba:	4938      	ldr	r1, [pc, #224]	@ (8016b9c <etharp_tmr+0x14c>)
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	4613      	mov	r3, r2
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	4413      	add	r3, r2
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	440b      	add	r3, r1
 8016ac8:	3314      	adds	r3, #20
 8016aca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d10e      	bne.n	8016aee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ad0:	4932      	ldr	r1, [pc, #200]	@ (8016b9c <etharp_tmr+0x14c>)
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3312      	adds	r3, #18
 8016ae0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ae2:	2b04      	cmp	r3, #4
 8016ae4:	d903      	bls.n	8016aee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7ff ff80 	bl	80169ec <etharp_free_entry>
 8016aec:	e04a      	b.n	8016b84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016aee:	492b      	ldr	r1, [pc, #172]	@ (8016b9c <etharp_tmr+0x14c>)
 8016af0:	687a      	ldr	r2, [r7, #4]
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	440b      	add	r3, r1
 8016afc:	3314      	adds	r3, #20
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	2b03      	cmp	r3, #3
 8016b02:	d10a      	bne.n	8016b1a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016b04:	4925      	ldr	r1, [pc, #148]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	4613      	mov	r3, r2
 8016b0a:	005b      	lsls	r3, r3, #1
 8016b0c:	4413      	add	r3, r2
 8016b0e:	00db      	lsls	r3, r3, #3
 8016b10:	440b      	add	r3, r1
 8016b12:	3314      	adds	r3, #20
 8016b14:	2204      	movs	r2, #4
 8016b16:	701a      	strb	r2, [r3, #0]
 8016b18:	e034      	b.n	8016b84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016b1a:	4920      	ldr	r1, [pc, #128]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	005b      	lsls	r3, r3, #1
 8016b22:	4413      	add	r3, r2
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	440b      	add	r3, r1
 8016b28:	3314      	adds	r3, #20
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b04      	cmp	r3, #4
 8016b2e:	d10a      	bne.n	8016b46 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016b30:	491a      	ldr	r1, [pc, #104]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3314      	adds	r3, #20
 8016b40:	2202      	movs	r2, #2
 8016b42:	701a      	strb	r2, [r3, #0]
 8016b44:	e01e      	b.n	8016b84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016b46:	4915      	ldr	r1, [pc, #84]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	4613      	mov	r3, r2
 8016b4c:	005b      	lsls	r3, r3, #1
 8016b4e:	4413      	add	r3, r2
 8016b50:	00db      	lsls	r3, r3, #3
 8016b52:	440b      	add	r3, r1
 8016b54:	3314      	adds	r3, #20
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d113      	bne.n	8016b84 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016b5c:	490f      	ldr	r1, [pc, #60]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	4613      	mov	r3, r2
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	4413      	add	r3, r2
 8016b66:	00db      	lsls	r3, r3, #3
 8016b68:	440b      	add	r3, r1
 8016b6a:	3308      	adds	r3, #8
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	4613      	mov	r3, r2
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4413      	add	r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	4a08      	ldr	r2, [pc, #32]	@ (8016b9c <etharp_tmr+0x14c>)
 8016b7a:	4413      	add	r3, r2
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	4619      	mov	r1, r3
 8016b80:	f000 fe6e 	bl	8017860 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	3301      	adds	r3, #1
 8016b88:	607b      	str	r3, [r7, #4]
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b09      	cmp	r3, #9
 8016b8e:	f77f af65 	ble.w	8016a5c <etharp_tmr+0xc>
      }
    }
  }
}
 8016b92:	bf00      	nop
 8016b94:	bf00      	nop
 8016b96:	3708      	adds	r7, #8
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}
 8016b9c:	20011ddc 	.word	0x20011ddc

08016ba0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b08a      	sub	sp, #40	@ 0x28
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	460b      	mov	r3, r1
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016bae:	230a      	movs	r3, #10
 8016bb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016bb2:	230a      	movs	r3, #10
 8016bb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016bb6:	230a      	movs	r3, #10
 8016bb8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016bbe:	230a      	movs	r3, #10
 8016bc0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	83bb      	strh	r3, [r7, #28]
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	837b      	strh	r3, [r7, #26]
 8016bca:	2300      	movs	r3, #0
 8016bcc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bce:	2300      	movs	r3, #0
 8016bd0:	843b      	strh	r3, [r7, #32]
 8016bd2:	e0ae      	b.n	8016d32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016bd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bd8:	49a6      	ldr	r1, [pc, #664]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016bda:	4613      	mov	r3, r2
 8016bdc:	005b      	lsls	r3, r3, #1
 8016bde:	4413      	add	r3, r2
 8016be0:	00db      	lsls	r3, r3, #3
 8016be2:	440b      	add	r3, r1
 8016be4:	3314      	adds	r3, #20
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016bea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016bee:	2b0a      	cmp	r3, #10
 8016bf0:	d105      	bne.n	8016bfe <etharp_find_entry+0x5e>
 8016bf2:	7dfb      	ldrb	r3, [r7, #23]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d102      	bne.n	8016bfe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016bf8:	8c3b      	ldrh	r3, [r7, #32]
 8016bfa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016bfc:	e095      	b.n	8016d2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016bfe:	7dfb      	ldrb	r3, [r7, #23]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f000 8092 	beq.w	8016d2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016c06:	7dfb      	ldrb	r3, [r7, #23]
 8016c08:	2b01      	cmp	r3, #1
 8016c0a:	d009      	beq.n	8016c20 <etharp_find_entry+0x80>
 8016c0c:	7dfb      	ldrb	r3, [r7, #23]
 8016c0e:	2b01      	cmp	r3, #1
 8016c10:	d806      	bhi.n	8016c20 <etharp_find_entry+0x80>
 8016c12:	4b99      	ldr	r3, [pc, #612]	@ (8016e78 <etharp_find_entry+0x2d8>)
 8016c14:	f240 1223 	movw	r2, #291	@ 0x123
 8016c18:	4998      	ldr	r1, [pc, #608]	@ (8016e7c <etharp_find_entry+0x2dc>)
 8016c1a:	4899      	ldr	r0, [pc, #612]	@ (8016e80 <etharp_find_entry+0x2e0>)
 8016c1c:	f003 f89a 	bl	8019d54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d020      	beq.n	8016c68 <etharp_find_entry+0xc8>
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	6819      	ldr	r1, [r3, #0]
 8016c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c2e:	4891      	ldr	r0, [pc, #580]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016c30:	4613      	mov	r3, r2
 8016c32:	005b      	lsls	r3, r3, #1
 8016c34:	4413      	add	r3, r2
 8016c36:	00db      	lsls	r3, r3, #3
 8016c38:	4403      	add	r3, r0
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4299      	cmp	r1, r3
 8016c40:	d112      	bne.n	8016c68 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d00c      	beq.n	8016c62 <etharp_find_entry+0xc2>
 8016c48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c4c:	4989      	ldr	r1, [pc, #548]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016c4e:	4613      	mov	r3, r2
 8016c50:	005b      	lsls	r3, r3, #1
 8016c52:	4413      	add	r3, r2
 8016c54:	00db      	lsls	r3, r3, #3
 8016c56:	440b      	add	r3, r1
 8016c58:	3308      	adds	r3, #8
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	687a      	ldr	r2, [r7, #4]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d102      	bne.n	8016c68 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016c62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c66:	e100      	b.n	8016e6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016c68:	7dfb      	ldrb	r3, [r7, #23]
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d140      	bne.n	8016cf0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c72:	4980      	ldr	r1, [pc, #512]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016c74:	4613      	mov	r3, r2
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	4413      	add	r3, r2
 8016c7a:	00db      	lsls	r3, r3, #3
 8016c7c:	440b      	add	r3, r1
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d01a      	beq.n	8016cba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016c84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c88:	497a      	ldr	r1, [pc, #488]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016c8a:	4613      	mov	r3, r2
 8016c8c:	005b      	lsls	r3, r3, #1
 8016c8e:	4413      	add	r3, r2
 8016c90:	00db      	lsls	r3, r3, #3
 8016c92:	440b      	add	r3, r1
 8016c94:	3312      	adds	r3, #18
 8016c96:	881b      	ldrh	r3, [r3, #0]
 8016c98:	8bba      	ldrh	r2, [r7, #28]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d845      	bhi.n	8016d2a <etharp_find_entry+0x18a>
            old_queue = i;
 8016c9e:	8c3b      	ldrh	r3, [r7, #32]
 8016ca0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016ca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ca6:	4973      	ldr	r1, [pc, #460]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016ca8:	4613      	mov	r3, r2
 8016caa:	005b      	lsls	r3, r3, #1
 8016cac:	4413      	add	r3, r2
 8016cae:	00db      	lsls	r3, r3, #3
 8016cb0:	440b      	add	r3, r1
 8016cb2:	3312      	adds	r3, #18
 8016cb4:	881b      	ldrh	r3, [r3, #0]
 8016cb6:	83bb      	strh	r3, [r7, #28]
 8016cb8:	e037      	b.n	8016d2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016cba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cbe:	496d      	ldr	r1, [pc, #436]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	440b      	add	r3, r1
 8016cca:	3312      	adds	r3, #18
 8016ccc:	881b      	ldrh	r3, [r3, #0]
 8016cce:	8b7a      	ldrh	r2, [r7, #26]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d82a      	bhi.n	8016d2a <etharp_find_entry+0x18a>
            old_pending = i;
 8016cd4:	8c3b      	ldrh	r3, [r7, #32]
 8016cd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016cd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cdc:	4965      	ldr	r1, [pc, #404]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016cde:	4613      	mov	r3, r2
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4413      	add	r3, r2
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	440b      	add	r3, r1
 8016ce8:	3312      	adds	r3, #18
 8016cea:	881b      	ldrh	r3, [r3, #0]
 8016cec:	837b      	strh	r3, [r7, #26]
 8016cee:	e01c      	b.n	8016d2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016cf0:	7dfb      	ldrb	r3, [r7, #23]
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d919      	bls.n	8016d2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016cf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cfa:	495e      	ldr	r1, [pc, #376]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	005b      	lsls	r3, r3, #1
 8016d00:	4413      	add	r3, r2
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	440b      	add	r3, r1
 8016d06:	3312      	adds	r3, #18
 8016d08:	881b      	ldrh	r3, [r3, #0]
 8016d0a:	8b3a      	ldrh	r2, [r7, #24]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d80c      	bhi.n	8016d2a <etharp_find_entry+0x18a>
            old_stable = i;
 8016d10:	8c3b      	ldrh	r3, [r7, #32]
 8016d12:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016d14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d18:	4956      	ldr	r1, [pc, #344]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	005b      	lsls	r3, r3, #1
 8016d1e:	4413      	add	r3, r2
 8016d20:	00db      	lsls	r3, r3, #3
 8016d22:	440b      	add	r3, r1
 8016d24:	3312      	adds	r3, #18
 8016d26:	881b      	ldrh	r3, [r3, #0]
 8016d28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d2a:	8c3b      	ldrh	r3, [r7, #32]
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	843b      	strh	r3, [r7, #32]
 8016d32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d36:	2b09      	cmp	r3, #9
 8016d38:	f77f af4c 	ble.w	8016bd4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016d3c:	7afb      	ldrb	r3, [r7, #11]
 8016d3e:	f003 0302 	and.w	r3, r3, #2
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d108      	bne.n	8016d58 <etharp_find_entry+0x1b8>
 8016d46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016d4a:	2b0a      	cmp	r3, #10
 8016d4c:	d107      	bne.n	8016d5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016d4e:	7afb      	ldrb	r3, [r7, #11]
 8016d50:	f003 0301 	and.w	r3, r3, #1
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d102      	bne.n	8016d5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016d58:	f04f 33ff 	mov.w	r3, #4294967295
 8016d5c:	e085      	b.n	8016e6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016d5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016d62:	2b09      	cmp	r3, #9
 8016d64:	dc02      	bgt.n	8016d6c <etharp_find_entry+0x1cc>
    i = empty;
 8016d66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016d68:	843b      	strh	r3, [r7, #32]
 8016d6a:	e039      	b.n	8016de0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016d6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016d70:	2b09      	cmp	r3, #9
 8016d72:	dc14      	bgt.n	8016d9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016d76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016d78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d7c:	493d      	ldr	r1, [pc, #244]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016d7e:	4613      	mov	r3, r2
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4413      	add	r3, r2
 8016d84:	00db      	lsls	r3, r3, #3
 8016d86:	440b      	add	r3, r1
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d018      	beq.n	8016dc0 <etharp_find_entry+0x220>
 8016d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8016e78 <etharp_find_entry+0x2d8>)
 8016d90:	f240 126d 	movw	r2, #365	@ 0x16d
 8016d94:	493b      	ldr	r1, [pc, #236]	@ (8016e84 <etharp_find_entry+0x2e4>)
 8016d96:	483a      	ldr	r0, [pc, #232]	@ (8016e80 <etharp_find_entry+0x2e0>)
 8016d98:	f002 ffdc 	bl	8019d54 <iprintf>
 8016d9c:	e010      	b.n	8016dc0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016d9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016da2:	2b09      	cmp	r3, #9
 8016da4:	dc02      	bgt.n	8016dac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016da6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016da8:	843b      	strh	r3, [r7, #32]
 8016daa:	e009      	b.n	8016dc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016dac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016db0:	2b09      	cmp	r3, #9
 8016db2:	dc02      	bgt.n	8016dba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016db4:	8bfb      	ldrh	r3, [r7, #30]
 8016db6:	843b      	strh	r3, [r7, #32]
 8016db8:	e002      	b.n	8016dc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016dba:	f04f 33ff 	mov.w	r3, #4294967295
 8016dbe:	e054      	b.n	8016e6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016dc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016dc4:	2b09      	cmp	r3, #9
 8016dc6:	dd06      	ble.n	8016dd6 <etharp_find_entry+0x236>
 8016dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8016e78 <etharp_find_entry+0x2d8>)
 8016dca:	f240 127f 	movw	r2, #383	@ 0x17f
 8016dce:	492e      	ldr	r1, [pc, #184]	@ (8016e88 <etharp_find_entry+0x2e8>)
 8016dd0:	482b      	ldr	r0, [pc, #172]	@ (8016e80 <etharp_find_entry+0x2e0>)
 8016dd2:	f002 ffbf 	bl	8019d54 <iprintf>
    etharp_free_entry(i);
 8016dd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7ff fe06 	bl	80169ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016de0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016de4:	2b09      	cmp	r3, #9
 8016de6:	dd06      	ble.n	8016df6 <etharp_find_entry+0x256>
 8016de8:	4b23      	ldr	r3, [pc, #140]	@ (8016e78 <etharp_find_entry+0x2d8>)
 8016dea:	f240 1283 	movw	r2, #387	@ 0x183
 8016dee:	4926      	ldr	r1, [pc, #152]	@ (8016e88 <etharp_find_entry+0x2e8>)
 8016df0:	4823      	ldr	r0, [pc, #140]	@ (8016e80 <etharp_find_entry+0x2e0>)
 8016df2:	f002 ffaf 	bl	8019d54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dfa:	491e      	ldr	r1, [pc, #120]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016dfc:	4613      	mov	r3, r2
 8016dfe:	005b      	lsls	r3, r3, #1
 8016e00:	4413      	add	r3, r2
 8016e02:	00db      	lsls	r3, r3, #3
 8016e04:	440b      	add	r3, r1
 8016e06:	3314      	adds	r3, #20
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d006      	beq.n	8016e1c <etharp_find_entry+0x27c>
 8016e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8016e78 <etharp_find_entry+0x2d8>)
 8016e10:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016e14:	491d      	ldr	r1, [pc, #116]	@ (8016e8c <etharp_find_entry+0x2ec>)
 8016e16:	481a      	ldr	r0, [pc, #104]	@ (8016e80 <etharp_find_entry+0x2e0>)
 8016e18:	f002 ff9c 	bl	8019d54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d00b      	beq.n	8016e3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	6819      	ldr	r1, [r3, #0]
 8016e2a:	4812      	ldr	r0, [pc, #72]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	005b      	lsls	r3, r3, #1
 8016e30:	4413      	add	r3, r2
 8016e32:	00db      	lsls	r3, r3, #3
 8016e34:	4403      	add	r3, r0
 8016e36:	3304      	adds	r3, #4
 8016e38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016e3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e3e:	490d      	ldr	r1, [pc, #52]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016e40:	4613      	mov	r3, r2
 8016e42:	005b      	lsls	r3, r3, #1
 8016e44:	4413      	add	r3, r2
 8016e46:	00db      	lsls	r3, r3, #3
 8016e48:	440b      	add	r3, r1
 8016e4a:	3312      	adds	r3, #18
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016e50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e54:	4907      	ldr	r1, [pc, #28]	@ (8016e74 <etharp_find_entry+0x2d4>)
 8016e56:	4613      	mov	r3, r2
 8016e58:	005b      	lsls	r3, r3, #1
 8016e5a:	4413      	add	r3, r2
 8016e5c:	00db      	lsls	r3, r3, #3
 8016e5e:	440b      	add	r3, r1
 8016e60:	3308      	adds	r3, #8
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016e66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3728      	adds	r7, #40	@ 0x28
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	20011ddc 	.word	0x20011ddc
 8016e78:	0801f20c 	.word	0x0801f20c
 8016e7c:	0801f244 	.word	0x0801f244
 8016e80:	0801f284 	.word	0x0801f284
 8016e84:	0801f2ac 	.word	0x0801f2ac
 8016e88:	0801f2c4 	.word	0x0801f2c4
 8016e8c:	0801f2d8 	.word	0x0801f2d8

08016e90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af02      	add	r7, sp, #8
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016ea4:	2b06      	cmp	r3, #6
 8016ea6:	d006      	beq.n	8016eb6 <etharp_update_arp_entry+0x26>
 8016ea8:	4b48      	ldr	r3, [pc, #288]	@ (8016fcc <etharp_update_arp_entry+0x13c>)
 8016eaa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016eae:	4948      	ldr	r1, [pc, #288]	@ (8016fd0 <etharp_update_arp_entry+0x140>)
 8016eb0:	4848      	ldr	r0, [pc, #288]	@ (8016fd4 <etharp_update_arp_entry+0x144>)
 8016eb2:	f002 ff4f 	bl	8019d54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d012      	beq.n	8016ee2 <etharp_update_arp_entry+0x52>
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d00e      	beq.n	8016ee2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	68f9      	ldr	r1, [r7, #12]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f001 f8fe 	bl	80180cc <ip4_addr_isbroadcast_u32>
 8016ed0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d105      	bne.n	8016ee2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ede:	2be0      	cmp	r3, #224	@ 0xe0
 8016ee0:	d102      	bne.n	8016ee8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ee2:	f06f 030f 	mvn.w	r3, #15
 8016ee6:	e06c      	b.n	8016fc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016ee8:	78fb      	ldrb	r3, [r7, #3]
 8016eea:	68fa      	ldr	r2, [r7, #12]
 8016eec:	4619      	mov	r1, r3
 8016eee:	68b8      	ldr	r0, [r7, #8]
 8016ef0:	f7ff fe56 	bl	8016ba0 <etharp_find_entry>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016ef8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	da02      	bge.n	8016f06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016f00:	8afb      	ldrh	r3, [r7, #22]
 8016f02:	b25b      	sxtb	r3, r3
 8016f04:	e05d      	b.n	8016fc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016f06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f0a:	4933      	ldr	r1, [pc, #204]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	4413      	add	r3, r2
 8016f12:	00db      	lsls	r3, r3, #3
 8016f14:	440b      	add	r3, r1
 8016f16:	3314      	adds	r3, #20
 8016f18:	2202      	movs	r2, #2
 8016f1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016f1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f20:	492d      	ldr	r1, [pc, #180]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f22:	4613      	mov	r3, r2
 8016f24:	005b      	lsls	r3, r3, #1
 8016f26:	4413      	add	r3, r2
 8016f28:	00db      	lsls	r3, r3, #3
 8016f2a:	440b      	add	r3, r1
 8016f2c:	3308      	adds	r3, #8
 8016f2e:	68fa      	ldr	r2, [r7, #12]
 8016f30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016f32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	3308      	adds	r3, #8
 8016f40:	4a25      	ldr	r2, [pc, #148]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f42:	4413      	add	r3, r2
 8016f44:	3304      	adds	r3, #4
 8016f46:	2206      	movs	r2, #6
 8016f48:	6879      	ldr	r1, [r7, #4]
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f003 f981 	bl	801a252 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016f50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f54:	4920      	ldr	r1, [pc, #128]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f56:	4613      	mov	r3, r2
 8016f58:	005b      	lsls	r3, r3, #1
 8016f5a:	4413      	add	r3, r2
 8016f5c:	00db      	lsls	r3, r3, #3
 8016f5e:	440b      	add	r3, r1
 8016f60:	3312      	adds	r3, #18
 8016f62:	2200      	movs	r2, #0
 8016f64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016f66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f6a:	491b      	ldr	r1, [pc, #108]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	005b      	lsls	r3, r3, #1
 8016f70:	4413      	add	r3, r2
 8016f72:	00db      	lsls	r3, r3, #3
 8016f74:	440b      	add	r3, r1
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d021      	beq.n	8016fc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f80:	4915      	ldr	r1, [pc, #84]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f82:	4613      	mov	r3, r2
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	4413      	add	r3, r2
 8016f88:	00db      	lsls	r3, r3, #3
 8016f8a:	440b      	add	r3, r1
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016f90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f94:	4910      	ldr	r1, [pc, #64]	@ (8016fd8 <etharp_update_arp_entry+0x148>)
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	440b      	add	r3, r1
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016faa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016fae:	9300      	str	r3, [sp, #0]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	6939      	ldr	r1, [r7, #16]
 8016fb4:	68f8      	ldr	r0, [r7, #12]
 8016fb6:	f001 ff97 	bl	8018ee8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016fba:	6938      	ldr	r0, [r7, #16]
 8016fbc:	f7f8 fd80 	bl	800fac0 <pbuf_free>
  }
  return ERR_OK;
 8016fc0:	2300      	movs	r3, #0
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3718      	adds	r7, #24
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	0801f20c 	.word	0x0801f20c
 8016fd0:	0801f304 	.word	0x0801f304
 8016fd4:	0801f284 	.word	0x0801f284
 8016fd8:	20011ddc 	.word	0x20011ddc

08016fdc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	60fb      	str	r3, [r7, #12]
 8016fe8:	e01e      	b.n	8017028 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016fea:	4913      	ldr	r1, [pc, #76]	@ (8017038 <etharp_cleanup_netif+0x5c>)
 8016fec:	68fa      	ldr	r2, [r7, #12]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	4413      	add	r3, r2
 8016ff4:	00db      	lsls	r3, r3, #3
 8016ff6:	440b      	add	r3, r1
 8016ff8:	3314      	adds	r3, #20
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016ffe:	7afb      	ldrb	r3, [r7, #11]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d00e      	beq.n	8017022 <etharp_cleanup_netif+0x46>
 8017004:	490c      	ldr	r1, [pc, #48]	@ (8017038 <etharp_cleanup_netif+0x5c>)
 8017006:	68fa      	ldr	r2, [r7, #12]
 8017008:	4613      	mov	r3, r2
 801700a:	005b      	lsls	r3, r3, #1
 801700c:	4413      	add	r3, r2
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	440b      	add	r3, r1
 8017012:	3308      	adds	r3, #8
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	687a      	ldr	r2, [r7, #4]
 8017018:	429a      	cmp	r2, r3
 801701a:	d102      	bne.n	8017022 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801701c:	68f8      	ldr	r0, [r7, #12]
 801701e:	f7ff fce5 	bl	80169ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	3301      	adds	r3, #1
 8017026:	60fb      	str	r3, [r7, #12]
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	2b09      	cmp	r3, #9
 801702c:	dddd      	ble.n	8016fea <etharp_cleanup_netif+0xe>
    }
  }
}
 801702e:	bf00      	nop
 8017030:	bf00      	nop
 8017032:	3710      	adds	r7, #16
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	20011ddc 	.word	0x20011ddc

0801703c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801703c:	b5b0      	push	{r4, r5, r7, lr}
 801703e:	b08a      	sub	sp, #40	@ 0x28
 8017040:	af04      	add	r7, sp, #16
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d107      	bne.n	801705c <etharp_input+0x20>
 801704c:	4b3d      	ldr	r3, [pc, #244]	@ (8017144 <etharp_input+0x108>)
 801704e:	f240 228a 	movw	r2, #650	@ 0x28a
 8017052:	493d      	ldr	r1, [pc, #244]	@ (8017148 <etharp_input+0x10c>)
 8017054:	483d      	ldr	r0, [pc, #244]	@ (801714c <etharp_input+0x110>)
 8017056:	f002 fe7d 	bl	8019d54 <iprintf>
 801705a:	e06f      	b.n	801713c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	b29b      	uxth	r3, r3
 8017068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801706c:	d10c      	bne.n	8017088 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017072:	2b06      	cmp	r3, #6
 8017074:	d108      	bne.n	8017088 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801707a:	2b04      	cmp	r3, #4
 801707c:	d104      	bne.n	8017088 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	885b      	ldrh	r3, [r3, #2]
 8017082:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017084:	2b08      	cmp	r3, #8
 8017086:	d003      	beq.n	8017090 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f7f8 fd19 	bl	800fac0 <pbuf_free>
    return;
 801708e:	e055      	b.n	801713c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	330e      	adds	r3, #14
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	3318      	adds	r3, #24
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	3304      	adds	r3, #4
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d102      	bne.n	80170b0 <etharp_input+0x74>
    for_us = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	75fb      	strb	r3, [r7, #23]
 80170ae:	e009      	b.n	80170c4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80170b0:	68ba      	ldr	r2, [r7, #8]
 80170b2:	683b      	ldr	r3, [r7, #0]
 80170b4:	3304      	adds	r3, #4
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	bf0c      	ite	eq
 80170bc:	2301      	moveq	r3, #1
 80170be:	2300      	movne	r3, #0
 80170c0:	b2db      	uxtb	r3, r3
 80170c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80170c4:	693b      	ldr	r3, [r7, #16]
 80170c6:	f103 0208 	add.w	r2, r3, #8
 80170ca:	7dfb      	ldrb	r3, [r7, #23]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d001      	beq.n	80170d4 <etharp_input+0x98>
 80170d0:	2301      	movs	r3, #1
 80170d2:	e000      	b.n	80170d6 <etharp_input+0x9a>
 80170d4:	2302      	movs	r3, #2
 80170d6:	f107 010c 	add.w	r1, r7, #12
 80170da:	6838      	ldr	r0, [r7, #0]
 80170dc:	f7ff fed8 	bl	8016e90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	88db      	ldrh	r3, [r3, #6]
 80170e4:	b29b      	uxth	r3, r3
 80170e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80170ea:	d003      	beq.n	80170f4 <etharp_input+0xb8>
 80170ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170f0:	d01e      	beq.n	8017130 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80170f2:	e020      	b.n	8017136 <etharp_input+0xfa>
      if (for_us) {
 80170f4:	7dfb      	ldrb	r3, [r7, #23]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d01c      	beq.n	8017134 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017110:	693a      	ldr	r2, [r7, #16]
 8017112:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017114:	2102      	movs	r1, #2
 8017116:	9103      	str	r1, [sp, #12]
 8017118:	f107 010c 	add.w	r1, r7, #12
 801711c:	9102      	str	r1, [sp, #8]
 801711e:	9201      	str	r2, [sp, #4]
 8017120:	9300      	str	r3, [sp, #0]
 8017122:	462b      	mov	r3, r5
 8017124:	4622      	mov	r2, r4
 8017126:	4601      	mov	r1, r0
 8017128:	6838      	ldr	r0, [r7, #0]
 801712a:	f000 faeb 	bl	8017704 <etharp_raw>
      break;
 801712e:	e001      	b.n	8017134 <etharp_input+0xf8>
      break;
 8017130:	bf00      	nop
 8017132:	e000      	b.n	8017136 <etharp_input+0xfa>
      break;
 8017134:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f7f8 fcc2 	bl	800fac0 <pbuf_free>
}
 801713c:	3718      	adds	r7, #24
 801713e:	46bd      	mov	sp, r7
 8017140:	bdb0      	pop	{r4, r5, r7, pc}
 8017142:	bf00      	nop
 8017144:	0801f20c 	.word	0x0801f20c
 8017148:	0801f35c 	.word	0x0801f35c
 801714c:	0801f284 	.word	0x0801f284

08017150 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b086      	sub	sp, #24
 8017154:	af02      	add	r7, sp, #8
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	4613      	mov	r3, r2
 801715c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801715e:	79fa      	ldrb	r2, [r7, #7]
 8017160:	4944      	ldr	r1, [pc, #272]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 8017162:	4613      	mov	r3, r2
 8017164:	005b      	lsls	r3, r3, #1
 8017166:	4413      	add	r3, r2
 8017168:	00db      	lsls	r3, r3, #3
 801716a:	440b      	add	r3, r1
 801716c:	3314      	adds	r3, #20
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	2b01      	cmp	r3, #1
 8017172:	d806      	bhi.n	8017182 <etharp_output_to_arp_index+0x32>
 8017174:	4b40      	ldr	r3, [pc, #256]	@ (8017278 <etharp_output_to_arp_index+0x128>)
 8017176:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801717a:	4940      	ldr	r1, [pc, #256]	@ (801727c <etharp_output_to_arp_index+0x12c>)
 801717c:	4840      	ldr	r0, [pc, #256]	@ (8017280 <etharp_output_to_arp_index+0x130>)
 801717e:	f002 fde9 	bl	8019d54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017182:	79fa      	ldrb	r2, [r7, #7]
 8017184:	493b      	ldr	r1, [pc, #236]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 8017186:	4613      	mov	r3, r2
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	4413      	add	r3, r2
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	440b      	add	r3, r1
 8017190:	3314      	adds	r3, #20
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	2b02      	cmp	r3, #2
 8017196:	d153      	bne.n	8017240 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017198:	79fa      	ldrb	r2, [r7, #7]
 801719a:	4936      	ldr	r1, [pc, #216]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 801719c:	4613      	mov	r3, r2
 801719e:	005b      	lsls	r3, r3, #1
 80171a0:	4413      	add	r3, r2
 80171a2:	00db      	lsls	r3, r3, #3
 80171a4:	440b      	add	r3, r1
 80171a6:	3312      	adds	r3, #18
 80171a8:	881b      	ldrh	r3, [r3, #0]
 80171aa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80171ae:	d919      	bls.n	80171e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80171b0:	79fa      	ldrb	r2, [r7, #7]
 80171b2:	4613      	mov	r3, r2
 80171b4:	005b      	lsls	r3, r3, #1
 80171b6:	4413      	add	r3, r2
 80171b8:	00db      	lsls	r3, r3, #3
 80171ba:	4a2e      	ldr	r2, [pc, #184]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 80171bc:	4413      	add	r3, r2
 80171be:	3304      	adds	r3, #4
 80171c0:	4619      	mov	r1, r3
 80171c2:	68f8      	ldr	r0, [r7, #12]
 80171c4:	f000 fb4c 	bl	8017860 <etharp_request>
 80171c8:	4603      	mov	r3, r0
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d138      	bne.n	8017240 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80171ce:	79fa      	ldrb	r2, [r7, #7]
 80171d0:	4928      	ldr	r1, [pc, #160]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 80171d2:	4613      	mov	r3, r2
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	4413      	add	r3, r2
 80171d8:	00db      	lsls	r3, r3, #3
 80171da:	440b      	add	r3, r1
 80171dc:	3314      	adds	r3, #20
 80171de:	2203      	movs	r2, #3
 80171e0:	701a      	strb	r2, [r3, #0]
 80171e2:	e02d      	b.n	8017240 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80171e4:	79fa      	ldrb	r2, [r7, #7]
 80171e6:	4923      	ldr	r1, [pc, #140]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 80171e8:	4613      	mov	r3, r2
 80171ea:	005b      	lsls	r3, r3, #1
 80171ec:	4413      	add	r3, r2
 80171ee:	00db      	lsls	r3, r3, #3
 80171f0:	440b      	add	r3, r1
 80171f2:	3312      	adds	r3, #18
 80171f4:	881b      	ldrh	r3, [r3, #0]
 80171f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80171fa:	d321      	bcc.n	8017240 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80171fc:	79fa      	ldrb	r2, [r7, #7]
 80171fe:	4613      	mov	r3, r2
 8017200:	005b      	lsls	r3, r3, #1
 8017202:	4413      	add	r3, r2
 8017204:	00db      	lsls	r3, r3, #3
 8017206:	4a1b      	ldr	r2, [pc, #108]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 8017208:	4413      	add	r3, r2
 801720a:	1d19      	adds	r1, r3, #4
 801720c:	79fa      	ldrb	r2, [r7, #7]
 801720e:	4613      	mov	r3, r2
 8017210:	005b      	lsls	r3, r3, #1
 8017212:	4413      	add	r3, r2
 8017214:	00db      	lsls	r3, r3, #3
 8017216:	3308      	adds	r3, #8
 8017218:	4a16      	ldr	r2, [pc, #88]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 801721a:	4413      	add	r3, r2
 801721c:	3304      	adds	r3, #4
 801721e:	461a      	mov	r2, r3
 8017220:	68f8      	ldr	r0, [r7, #12]
 8017222:	f000 fafb 	bl	801781c <etharp_request_dst>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d109      	bne.n	8017240 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801722c:	79fa      	ldrb	r2, [r7, #7]
 801722e:	4911      	ldr	r1, [pc, #68]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 8017230:	4613      	mov	r3, r2
 8017232:	005b      	lsls	r3, r3, #1
 8017234:	4413      	add	r3, r2
 8017236:	00db      	lsls	r3, r3, #3
 8017238:	440b      	add	r3, r1
 801723a:	3314      	adds	r3, #20
 801723c:	2203      	movs	r2, #3
 801723e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8017246:	79fa      	ldrb	r2, [r7, #7]
 8017248:	4613      	mov	r3, r2
 801724a:	005b      	lsls	r3, r3, #1
 801724c:	4413      	add	r3, r2
 801724e:	00db      	lsls	r3, r3, #3
 8017250:	3308      	adds	r3, #8
 8017252:	4a08      	ldr	r2, [pc, #32]	@ (8017274 <etharp_output_to_arp_index+0x124>)
 8017254:	4413      	add	r3, r2
 8017256:	3304      	adds	r3, #4
 8017258:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801725c:	9200      	str	r2, [sp, #0]
 801725e:	460a      	mov	r2, r1
 8017260:	68b9      	ldr	r1, [r7, #8]
 8017262:	68f8      	ldr	r0, [r7, #12]
 8017264:	f001 fe40 	bl	8018ee8 <ethernet_output>
 8017268:	4603      	mov	r3, r0
}
 801726a:	4618      	mov	r0, r3
 801726c:	3710      	adds	r7, #16
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	20011ddc 	.word	0x20011ddc
 8017278:	0801f20c 	.word	0x0801f20c
 801727c:	0801f37c 	.word	0x0801f37c
 8017280:	0801f284 	.word	0x0801f284

08017284 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b08a      	sub	sp, #40	@ 0x28
 8017288:	af02      	add	r7, sp, #8
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d106      	bne.n	80172a8 <etharp_output+0x24>
 801729a:	4b73      	ldr	r3, [pc, #460]	@ (8017468 <etharp_output+0x1e4>)
 801729c:	f240 321e 	movw	r2, #798	@ 0x31e
 80172a0:	4972      	ldr	r1, [pc, #456]	@ (801746c <etharp_output+0x1e8>)
 80172a2:	4873      	ldr	r0, [pc, #460]	@ (8017470 <etharp_output+0x1ec>)
 80172a4:	f002 fd56 	bl	8019d54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80172a8:	68bb      	ldr	r3, [r7, #8]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d106      	bne.n	80172bc <etharp_output+0x38>
 80172ae:	4b6e      	ldr	r3, [pc, #440]	@ (8017468 <etharp_output+0x1e4>)
 80172b0:	f240 321f 	movw	r2, #799	@ 0x31f
 80172b4:	496f      	ldr	r1, [pc, #444]	@ (8017474 <etharp_output+0x1f0>)
 80172b6:	486e      	ldr	r0, [pc, #440]	@ (8017470 <etharp_output+0x1ec>)
 80172b8:	f002 fd4c 	bl	8019d54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d106      	bne.n	80172d0 <etharp_output+0x4c>
 80172c2:	4b69      	ldr	r3, [pc, #420]	@ (8017468 <etharp_output+0x1e4>)
 80172c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80172c8:	496b      	ldr	r1, [pc, #428]	@ (8017478 <etharp_output+0x1f4>)
 80172ca:	4869      	ldr	r0, [pc, #420]	@ (8017470 <etharp_output+0x1ec>)
 80172cc:	f002 fd42 	bl	8019d54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	68f9      	ldr	r1, [r7, #12]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f000 fef8 	bl	80180cc <ip4_addr_isbroadcast_u32>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d002      	beq.n	80172e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80172e2:	4b66      	ldr	r3, [pc, #408]	@ (801747c <etharp_output+0x1f8>)
 80172e4:	61fb      	str	r3, [r7, #28]
 80172e6:	e0af      	b.n	8017448 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172f0:	2be0      	cmp	r3, #224	@ 0xe0
 80172f2:	d118      	bne.n	8017326 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80172f4:	2301      	movs	r3, #1
 80172f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80172f8:	2300      	movs	r3, #0
 80172fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80172fc:	235e      	movs	r3, #94	@ 0x5e
 80172fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	3301      	adds	r3, #1
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801730a:	b2db      	uxtb	r3, r3
 801730c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	3302      	adds	r3, #2
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	3303      	adds	r3, #3
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801731e:	f107 0310 	add.w	r3, r7, #16
 8017322:	61fb      	str	r3, [r7, #28]
 8017324:	e090      	b.n	8017448 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	3304      	adds	r3, #4
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	405a      	eors	r2, r3
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	3308      	adds	r3, #8
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	4013      	ands	r3, r2
 801733a:	2b00      	cmp	r3, #0
 801733c:	d012      	beq.n	8017364 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017344:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017348:	4293      	cmp	r3, r2
 801734a:	d00b      	beq.n	8017364 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	330c      	adds	r3, #12
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d003      	beq.n	801735e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	330c      	adds	r3, #12
 801735a:	61bb      	str	r3, [r7, #24]
 801735c:	e002      	b.n	8017364 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801735e:	f06f 0303 	mvn.w	r3, #3
 8017362:	e07d      	b.n	8017460 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017364:	4b46      	ldr	r3, [pc, #280]	@ (8017480 <etharp_output+0x1fc>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	4619      	mov	r1, r3
 801736a:	4a46      	ldr	r2, [pc, #280]	@ (8017484 <etharp_output+0x200>)
 801736c:	460b      	mov	r3, r1
 801736e:	005b      	lsls	r3, r3, #1
 8017370:	440b      	add	r3, r1
 8017372:	00db      	lsls	r3, r3, #3
 8017374:	4413      	add	r3, r2
 8017376:	3314      	adds	r3, #20
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	2b01      	cmp	r3, #1
 801737c:	d925      	bls.n	80173ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801737e:	4b40      	ldr	r3, [pc, #256]	@ (8017480 <etharp_output+0x1fc>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	4619      	mov	r1, r3
 8017384:	4a3f      	ldr	r2, [pc, #252]	@ (8017484 <etharp_output+0x200>)
 8017386:	460b      	mov	r3, r1
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	440b      	add	r3, r1
 801738c:	00db      	lsls	r3, r3, #3
 801738e:	4413      	add	r3, r2
 8017390:	3308      	adds	r3, #8
 8017392:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	429a      	cmp	r2, r3
 8017398:	d117      	bne.n	80173ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	4b38      	ldr	r3, [pc, #224]	@ (8017480 <etharp_output+0x1fc>)
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	4618      	mov	r0, r3
 80173a4:	4937      	ldr	r1, [pc, #220]	@ (8017484 <etharp_output+0x200>)
 80173a6:	4603      	mov	r3, r0
 80173a8:	005b      	lsls	r3, r3, #1
 80173aa:	4403      	add	r3, r0
 80173ac:	00db      	lsls	r3, r3, #3
 80173ae:	440b      	add	r3, r1
 80173b0:	3304      	adds	r3, #4
 80173b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80173b4:	429a      	cmp	r2, r3
 80173b6:	d108      	bne.n	80173ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80173b8:	4b31      	ldr	r3, [pc, #196]	@ (8017480 <etharp_output+0x1fc>)
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	461a      	mov	r2, r3
 80173be:	68b9      	ldr	r1, [r7, #8]
 80173c0:	68f8      	ldr	r0, [r7, #12]
 80173c2:	f7ff fec5 	bl	8017150 <etharp_output_to_arp_index>
 80173c6:	4603      	mov	r3, r0
 80173c8:	e04a      	b.n	8017460 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80173ca:	2300      	movs	r3, #0
 80173cc:	75fb      	strb	r3, [r7, #23]
 80173ce:	e031      	b.n	8017434 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80173d0:	7dfa      	ldrb	r2, [r7, #23]
 80173d2:	492c      	ldr	r1, [pc, #176]	@ (8017484 <etharp_output+0x200>)
 80173d4:	4613      	mov	r3, r2
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	4413      	add	r3, r2
 80173da:	00db      	lsls	r3, r3, #3
 80173dc:	440b      	add	r3, r1
 80173de:	3314      	adds	r3, #20
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	2b01      	cmp	r3, #1
 80173e4:	d923      	bls.n	801742e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80173e6:	7dfa      	ldrb	r2, [r7, #23]
 80173e8:	4926      	ldr	r1, [pc, #152]	@ (8017484 <etharp_output+0x200>)
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	440b      	add	r3, r1
 80173f4:	3308      	adds	r3, #8
 80173f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80173f8:	68fa      	ldr	r2, [r7, #12]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	d117      	bne.n	801742e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80173fe:	69bb      	ldr	r3, [r7, #24]
 8017400:	6819      	ldr	r1, [r3, #0]
 8017402:	7dfa      	ldrb	r2, [r7, #23]
 8017404:	481f      	ldr	r0, [pc, #124]	@ (8017484 <etharp_output+0x200>)
 8017406:	4613      	mov	r3, r2
 8017408:	005b      	lsls	r3, r3, #1
 801740a:	4413      	add	r3, r2
 801740c:	00db      	lsls	r3, r3, #3
 801740e:	4403      	add	r3, r0
 8017410:	3304      	adds	r3, #4
 8017412:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017414:	4299      	cmp	r1, r3
 8017416:	d10a      	bne.n	801742e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017418:	4a19      	ldr	r2, [pc, #100]	@ (8017480 <etharp_output+0x1fc>)
 801741a:	7dfb      	ldrb	r3, [r7, #23]
 801741c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801741e:	7dfb      	ldrb	r3, [r7, #23]
 8017420:	461a      	mov	r2, r3
 8017422:	68b9      	ldr	r1, [r7, #8]
 8017424:	68f8      	ldr	r0, [r7, #12]
 8017426:	f7ff fe93 	bl	8017150 <etharp_output_to_arp_index>
 801742a:	4603      	mov	r3, r0
 801742c:	e018      	b.n	8017460 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801742e:	7dfb      	ldrb	r3, [r7, #23]
 8017430:	3301      	adds	r3, #1
 8017432:	75fb      	strb	r3, [r7, #23]
 8017434:	7dfb      	ldrb	r3, [r7, #23]
 8017436:	2b09      	cmp	r3, #9
 8017438:	d9ca      	bls.n	80173d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801743a:	68ba      	ldr	r2, [r7, #8]
 801743c:	69b9      	ldr	r1, [r7, #24]
 801743e:	68f8      	ldr	r0, [r7, #12]
 8017440:	f000 f822 	bl	8017488 <etharp_query>
 8017444:	4603      	mov	r3, r0
 8017446:	e00b      	b.n	8017460 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801744e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017452:	9300      	str	r3, [sp, #0]
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	68b9      	ldr	r1, [r7, #8]
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f001 fd45 	bl	8018ee8 <ethernet_output>
 801745e:	4603      	mov	r3, r0
}
 8017460:	4618      	mov	r0, r3
 8017462:	3720      	adds	r7, #32
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}
 8017468:	0801f20c 	.word	0x0801f20c
 801746c:	0801f35c 	.word	0x0801f35c
 8017470:	0801f284 	.word	0x0801f284
 8017474:	0801f3ac 	.word	0x0801f3ac
 8017478:	0801f34c 	.word	0x0801f34c
 801747c:	0801fa00 	.word	0x0801fa00
 8017480:	20011ecc 	.word	0x20011ecc
 8017484:	20011ddc 	.word	0x20011ddc

08017488 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b08c      	sub	sp, #48	@ 0x30
 801748c:	af02      	add	r7, sp, #8
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	3326      	adds	r3, #38	@ 0x26
 8017498:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801749a:	23ff      	movs	r3, #255	@ 0xff
 801749c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80174a0:	2300      	movs	r3, #0
 80174a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	68f9      	ldr	r1, [r7, #12]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f000 fe0e 	bl	80180cc <ip4_addr_isbroadcast_u32>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d10c      	bne.n	80174d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80174be:	2be0      	cmp	r3, #224	@ 0xe0
 80174c0:	d006      	beq.n	80174d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d003      	beq.n	80174d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80174c8:	68bb      	ldr	r3, [r7, #8]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d102      	bne.n	80174d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80174d0:	f06f 030f 	mvn.w	r3, #15
 80174d4:	e101      	b.n	80176da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80174d6:	68fa      	ldr	r2, [r7, #12]
 80174d8:	2101      	movs	r1, #1
 80174da:	68b8      	ldr	r0, [r7, #8]
 80174dc:	f7ff fb60 	bl	8016ba0 <etharp_find_entry>
 80174e0:	4603      	mov	r3, r0
 80174e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80174e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	da02      	bge.n	80174f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80174ec:	8a7b      	ldrh	r3, [r7, #18]
 80174ee:	b25b      	sxtb	r3, r3
 80174f0:	e0f3      	b.n	80176da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80174f2:	8a7b      	ldrh	r3, [r7, #18]
 80174f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80174f6:	d906      	bls.n	8017506 <etharp_query+0x7e>
 80174f8:	4b7a      	ldr	r3, [pc, #488]	@ (80176e4 <etharp_query+0x25c>)
 80174fa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80174fe:	497a      	ldr	r1, [pc, #488]	@ (80176e8 <etharp_query+0x260>)
 8017500:	487a      	ldr	r0, [pc, #488]	@ (80176ec <etharp_query+0x264>)
 8017502:	f002 fc27 	bl	8019d54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017506:	8a7b      	ldrh	r3, [r7, #18]
 8017508:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801750a:	7c7a      	ldrb	r2, [r7, #17]
 801750c:	4978      	ldr	r1, [pc, #480]	@ (80176f0 <etharp_query+0x268>)
 801750e:	4613      	mov	r3, r2
 8017510:	005b      	lsls	r3, r3, #1
 8017512:	4413      	add	r3, r2
 8017514:	00db      	lsls	r3, r3, #3
 8017516:	440b      	add	r3, r1
 8017518:	3314      	adds	r3, #20
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d115      	bne.n	801754c <etharp_query+0xc4>
    is_new_entry = 1;
 8017520:	2301      	movs	r3, #1
 8017522:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017524:	7c7a      	ldrb	r2, [r7, #17]
 8017526:	4972      	ldr	r1, [pc, #456]	@ (80176f0 <etharp_query+0x268>)
 8017528:	4613      	mov	r3, r2
 801752a:	005b      	lsls	r3, r3, #1
 801752c:	4413      	add	r3, r2
 801752e:	00db      	lsls	r3, r3, #3
 8017530:	440b      	add	r3, r1
 8017532:	3314      	adds	r3, #20
 8017534:	2201      	movs	r2, #1
 8017536:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017538:	7c7a      	ldrb	r2, [r7, #17]
 801753a:	496d      	ldr	r1, [pc, #436]	@ (80176f0 <etharp_query+0x268>)
 801753c:	4613      	mov	r3, r2
 801753e:	005b      	lsls	r3, r3, #1
 8017540:	4413      	add	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	440b      	add	r3, r1
 8017546:	3308      	adds	r3, #8
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801754c:	7c7a      	ldrb	r2, [r7, #17]
 801754e:	4968      	ldr	r1, [pc, #416]	@ (80176f0 <etharp_query+0x268>)
 8017550:	4613      	mov	r3, r2
 8017552:	005b      	lsls	r3, r3, #1
 8017554:	4413      	add	r3, r2
 8017556:	00db      	lsls	r3, r3, #3
 8017558:	440b      	add	r3, r1
 801755a:	3314      	adds	r3, #20
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	2b01      	cmp	r3, #1
 8017560:	d011      	beq.n	8017586 <etharp_query+0xfe>
 8017562:	7c7a      	ldrb	r2, [r7, #17]
 8017564:	4962      	ldr	r1, [pc, #392]	@ (80176f0 <etharp_query+0x268>)
 8017566:	4613      	mov	r3, r2
 8017568:	005b      	lsls	r3, r3, #1
 801756a:	4413      	add	r3, r2
 801756c:	00db      	lsls	r3, r3, #3
 801756e:	440b      	add	r3, r1
 8017570:	3314      	adds	r3, #20
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	2b01      	cmp	r3, #1
 8017576:	d806      	bhi.n	8017586 <etharp_query+0xfe>
 8017578:	4b5a      	ldr	r3, [pc, #360]	@ (80176e4 <etharp_query+0x25c>)
 801757a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801757e:	495d      	ldr	r1, [pc, #372]	@ (80176f4 <etharp_query+0x26c>)
 8017580:	485a      	ldr	r0, [pc, #360]	@ (80176ec <etharp_query+0x264>)
 8017582:	f002 fbe7 	bl	8019d54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017586:	6a3b      	ldr	r3, [r7, #32]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d102      	bne.n	8017592 <etharp_query+0x10a>
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d10c      	bne.n	80175ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017592:	68b9      	ldr	r1, [r7, #8]
 8017594:	68f8      	ldr	r0, [r7, #12]
 8017596:	f000 f963 	bl	8017860 <etharp_request>
 801759a:	4603      	mov	r3, r0
 801759c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d102      	bne.n	80175ac <etharp_query+0x124>
      return result;
 80175a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80175aa:	e096      	b.n	80176da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d106      	bne.n	80175c0 <etharp_query+0x138>
 80175b2:	4b4c      	ldr	r3, [pc, #304]	@ (80176e4 <etharp_query+0x25c>)
 80175b4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80175b8:	494f      	ldr	r1, [pc, #316]	@ (80176f8 <etharp_query+0x270>)
 80175ba:	484c      	ldr	r0, [pc, #304]	@ (80176ec <etharp_query+0x264>)
 80175bc:	f002 fbca 	bl	8019d54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80175c0:	7c7a      	ldrb	r2, [r7, #17]
 80175c2:	494b      	ldr	r1, [pc, #300]	@ (80176f0 <etharp_query+0x268>)
 80175c4:	4613      	mov	r3, r2
 80175c6:	005b      	lsls	r3, r3, #1
 80175c8:	4413      	add	r3, r2
 80175ca:	00db      	lsls	r3, r3, #3
 80175cc:	440b      	add	r3, r1
 80175ce:	3314      	adds	r3, #20
 80175d0:	781b      	ldrb	r3, [r3, #0]
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	d917      	bls.n	8017606 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80175d6:	4a49      	ldr	r2, [pc, #292]	@ (80176fc <etharp_query+0x274>)
 80175d8:	7c7b      	ldrb	r3, [r7, #17]
 80175da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80175dc:	7c7a      	ldrb	r2, [r7, #17]
 80175de:	4613      	mov	r3, r2
 80175e0:	005b      	lsls	r3, r3, #1
 80175e2:	4413      	add	r3, r2
 80175e4:	00db      	lsls	r3, r3, #3
 80175e6:	3308      	adds	r3, #8
 80175e8:	4a41      	ldr	r2, [pc, #260]	@ (80176f0 <etharp_query+0x268>)
 80175ea:	4413      	add	r3, r2
 80175ec:	3304      	adds	r3, #4
 80175ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80175f2:	9200      	str	r2, [sp, #0]
 80175f4:	697a      	ldr	r2, [r7, #20]
 80175f6:	6879      	ldr	r1, [r7, #4]
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f001 fc75 	bl	8018ee8 <ethernet_output>
 80175fe:	4603      	mov	r3, r0
 8017600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017604:	e067      	b.n	80176d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017606:	7c7a      	ldrb	r2, [r7, #17]
 8017608:	4939      	ldr	r1, [pc, #228]	@ (80176f0 <etharp_query+0x268>)
 801760a:	4613      	mov	r3, r2
 801760c:	005b      	lsls	r3, r3, #1
 801760e:	4413      	add	r3, r2
 8017610:	00db      	lsls	r3, r3, #3
 8017612:	440b      	add	r3, r1
 8017614:	3314      	adds	r3, #20
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	2b01      	cmp	r3, #1
 801761a:	d15c      	bne.n	80176d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801761c:	2300      	movs	r3, #0
 801761e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017624:	e01c      	b.n	8017660 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017626:	69fb      	ldr	r3, [r7, #28]
 8017628:	895a      	ldrh	r2, [r3, #10]
 801762a:	69fb      	ldr	r3, [r7, #28]
 801762c:	891b      	ldrh	r3, [r3, #8]
 801762e:	429a      	cmp	r2, r3
 8017630:	d10a      	bne.n	8017648 <etharp_query+0x1c0>
 8017632:	69fb      	ldr	r3, [r7, #28]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d006      	beq.n	8017648 <etharp_query+0x1c0>
 801763a:	4b2a      	ldr	r3, [pc, #168]	@ (80176e4 <etharp_query+0x25c>)
 801763c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017640:	492f      	ldr	r1, [pc, #188]	@ (8017700 <etharp_query+0x278>)
 8017642:	482a      	ldr	r0, [pc, #168]	@ (80176ec <etharp_query+0x264>)
 8017644:	f002 fb86 	bl	8019d54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017648:	69fb      	ldr	r3, [r7, #28]
 801764a:	7b1b      	ldrb	r3, [r3, #12]
 801764c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017650:	2b00      	cmp	r3, #0
 8017652:	d002      	beq.n	801765a <etharp_query+0x1d2>
        copy_needed = 1;
 8017654:	2301      	movs	r3, #1
 8017656:	61bb      	str	r3, [r7, #24]
        break;
 8017658:	e005      	b.n	8017666 <etharp_query+0x1de>
      }
      p = p->next;
 801765a:	69fb      	ldr	r3, [r7, #28]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d1df      	bne.n	8017626 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017666:	69bb      	ldr	r3, [r7, #24]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d007      	beq.n	801767c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8017672:	200e      	movs	r0, #14
 8017674:	f7f8 fc8c 	bl	800ff90 <pbuf_clone>
 8017678:	61f8      	str	r0, [r7, #28]
 801767a:	e004      	b.n	8017686 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017680:	69f8      	ldr	r0, [r7, #28]
 8017682:	f7f8 fac3 	bl	800fc0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d021      	beq.n	80176d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801768c:	7c7a      	ldrb	r2, [r7, #17]
 801768e:	4918      	ldr	r1, [pc, #96]	@ (80176f0 <etharp_query+0x268>)
 8017690:	4613      	mov	r3, r2
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	4413      	add	r3, r2
 8017696:	00db      	lsls	r3, r3, #3
 8017698:	440b      	add	r3, r1
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d00a      	beq.n	80176b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80176a0:	7c7a      	ldrb	r2, [r7, #17]
 80176a2:	4913      	ldr	r1, [pc, #76]	@ (80176f0 <etharp_query+0x268>)
 80176a4:	4613      	mov	r3, r2
 80176a6:	005b      	lsls	r3, r3, #1
 80176a8:	4413      	add	r3, r2
 80176aa:	00db      	lsls	r3, r3, #3
 80176ac:	440b      	add	r3, r1
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7f8 fa05 	bl	800fac0 <pbuf_free>
      }
      arp_table[i].q = p;
 80176b6:	7c7a      	ldrb	r2, [r7, #17]
 80176b8:	490d      	ldr	r1, [pc, #52]	@ (80176f0 <etharp_query+0x268>)
 80176ba:	4613      	mov	r3, r2
 80176bc:	005b      	lsls	r3, r3, #1
 80176be:	4413      	add	r3, r2
 80176c0:	00db      	lsls	r3, r3, #3
 80176c2:	440b      	add	r3, r1
 80176c4:	69fa      	ldr	r2, [r7, #28]
 80176c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80176c8:	2300      	movs	r3, #0
 80176ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80176ce:	e002      	b.n	80176d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80176d0:	23ff      	movs	r3, #255	@ 0xff
 80176d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80176d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3728      	adds	r7, #40	@ 0x28
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}
 80176e2:	bf00      	nop
 80176e4:	0801f20c 	.word	0x0801f20c
 80176e8:	0801f3b8 	.word	0x0801f3b8
 80176ec:	0801f284 	.word	0x0801f284
 80176f0:	20011ddc 	.word	0x20011ddc
 80176f4:	0801f3c8 	.word	0x0801f3c8
 80176f8:	0801f3ac 	.word	0x0801f3ac
 80176fc:	20011ecc 	.word	0x20011ecc
 8017700:	0801f3f0 	.word	0x0801f3f0

08017704 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b08a      	sub	sp, #40	@ 0x28
 8017708:	af02      	add	r7, sp, #8
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
 8017710:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017712:	2300      	movs	r3, #0
 8017714:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d106      	bne.n	801772a <etharp_raw+0x26>
 801771c:	4b3a      	ldr	r3, [pc, #232]	@ (8017808 <etharp_raw+0x104>)
 801771e:	f240 4257 	movw	r2, #1111	@ 0x457
 8017722:	493a      	ldr	r1, [pc, #232]	@ (801780c <etharp_raw+0x108>)
 8017724:	483a      	ldr	r0, [pc, #232]	@ (8017810 <etharp_raw+0x10c>)
 8017726:	f002 fb15 	bl	8019d54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801772a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801772e:	211c      	movs	r1, #28
 8017730:	200e      	movs	r0, #14
 8017732:	f7f7 fee1 	bl	800f4f8 <pbuf_alloc>
 8017736:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017738:	69bb      	ldr	r3, [r7, #24]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d102      	bne.n	8017744 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801773e:	f04f 33ff 	mov.w	r3, #4294967295
 8017742:	e05d      	b.n	8017800 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	895b      	ldrh	r3, [r3, #10]
 8017748:	2b1b      	cmp	r3, #27
 801774a:	d806      	bhi.n	801775a <etharp_raw+0x56>
 801774c:	4b2e      	ldr	r3, [pc, #184]	@ (8017808 <etharp_raw+0x104>)
 801774e:	f240 4262 	movw	r2, #1122	@ 0x462
 8017752:	4930      	ldr	r1, [pc, #192]	@ (8017814 <etharp_raw+0x110>)
 8017754:	482e      	ldr	r0, [pc, #184]	@ (8017810 <etharp_raw+0x10c>)
 8017756:	f002 fafd 	bl	8019d54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801775a:	69bb      	ldr	r3, [r7, #24]
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017760:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017762:	4618      	mov	r0, r3
 8017764:	f7f6 fe00 	bl	800e368 <lwip_htons>
 8017768:	4603      	mov	r3, r0
 801776a:	461a      	mov	r2, r3
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017776:	2b06      	cmp	r3, #6
 8017778:	d006      	beq.n	8017788 <etharp_raw+0x84>
 801777a:	4b23      	ldr	r3, [pc, #140]	@ (8017808 <etharp_raw+0x104>)
 801777c:	f240 4269 	movw	r2, #1129	@ 0x469
 8017780:	4925      	ldr	r1, [pc, #148]	@ (8017818 <etharp_raw+0x114>)
 8017782:	4823      	ldr	r0, [pc, #140]	@ (8017810 <etharp_raw+0x10c>)
 8017784:	f002 fae6 	bl	8019d54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	3308      	adds	r3, #8
 801778c:	2206      	movs	r2, #6
 801778e:	6839      	ldr	r1, [r7, #0]
 8017790:	4618      	mov	r0, r3
 8017792:	f002 fd5e 	bl	801a252 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	3312      	adds	r3, #18
 801779a:	2206      	movs	r2, #6
 801779c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801779e:	4618      	mov	r0, r3
 80177a0:	f002 fd57 	bl	801a252 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80177a4:	697b      	ldr	r3, [r7, #20]
 80177a6:	330e      	adds	r3, #14
 80177a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80177aa:	6812      	ldr	r2, [r2, #0]
 80177ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80177ae:	697b      	ldr	r3, [r7, #20]
 80177b0:	3318      	adds	r3, #24
 80177b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177b4:	6812      	ldr	r2, [r2, #0]
 80177b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	2200      	movs	r2, #0
 80177bc:	701a      	strb	r2, [r3, #0]
 80177be:	2200      	movs	r2, #0
 80177c0:	f042 0201 	orr.w	r2, r2, #1
 80177c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80177c6:	697b      	ldr	r3, [r7, #20]
 80177c8:	2200      	movs	r2, #0
 80177ca:	f042 0208 	orr.w	r2, r2, #8
 80177ce:	709a      	strb	r2, [r3, #2]
 80177d0:	2200      	movs	r2, #0
 80177d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	2206      	movs	r2, #6
 80177d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	2204      	movs	r2, #4
 80177de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80177e0:	f640 0306 	movw	r3, #2054	@ 0x806
 80177e4:	9300      	str	r3, [sp, #0]
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	68ba      	ldr	r2, [r7, #8]
 80177ea:	69b9      	ldr	r1, [r7, #24]
 80177ec:	68f8      	ldr	r0, [r7, #12]
 80177ee:	f001 fb7b 	bl	8018ee8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80177f2:	69b8      	ldr	r0, [r7, #24]
 80177f4:	f7f8 f964 	bl	800fac0 <pbuf_free>
  p = NULL;
 80177f8:	2300      	movs	r3, #0
 80177fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80177fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017800:	4618      	mov	r0, r3
 8017802:	3720      	adds	r7, #32
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	0801f20c 	.word	0x0801f20c
 801780c:	0801f35c 	.word	0x0801f35c
 8017810:	0801f284 	.word	0x0801f284
 8017814:	0801f40c 	.word	0x0801f40c
 8017818:	0801f440 	.word	0x0801f440

0801781c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b088      	sub	sp, #32
 8017820:	af04      	add	r7, sp, #16
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017838:	2201      	movs	r2, #1
 801783a:	9203      	str	r2, [sp, #12]
 801783c:	68ba      	ldr	r2, [r7, #8]
 801783e:	9202      	str	r2, [sp, #8]
 8017840:	4a06      	ldr	r2, [pc, #24]	@ (801785c <etharp_request_dst+0x40>)
 8017842:	9201      	str	r2, [sp, #4]
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	4603      	mov	r3, r0
 8017848:	687a      	ldr	r2, [r7, #4]
 801784a:	68f8      	ldr	r0, [r7, #12]
 801784c:	f7ff ff5a 	bl	8017704 <etharp_raw>
 8017850:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017852:	4618      	mov	r0, r3
 8017854:	3710      	adds	r7, #16
 8017856:	46bd      	mov	sp, r7
 8017858:	bd80      	pop	{r7, pc}
 801785a:	bf00      	nop
 801785c:	0801fa08 	.word	0x0801fa08

08017860 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801786a:	4a05      	ldr	r2, [pc, #20]	@ (8017880 <etharp_request+0x20>)
 801786c:	6839      	ldr	r1, [r7, #0]
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f7ff ffd4 	bl	801781c <etharp_request_dst>
 8017874:	4603      	mov	r3, r0
}
 8017876:	4618      	mov	r0, r3
 8017878:	3708      	adds	r7, #8
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	0801fa00 	.word	0x0801fa00

08017884 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b08e      	sub	sp, #56	@ 0x38
 8017888:	af04      	add	r7, sp, #16
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801788e:	4b79      	ldr	r3, [pc, #484]	@ (8017a74 <icmp_input+0x1f0>)
 8017890:	689b      	ldr	r3, [r3, #8]
 8017892:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017896:	781b      	ldrb	r3, [r3, #0]
 8017898:	f003 030f 	and.w	r3, r3, #15
 801789c:	b2db      	uxtb	r3, r3
 801789e:	009b      	lsls	r3, r3, #2
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80178a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80178a6:	2b13      	cmp	r3, #19
 80178a8:	f240 80cd 	bls.w	8017a46 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	895b      	ldrh	r3, [r3, #10]
 80178b0:	2b03      	cmp	r3, #3
 80178b2:	f240 80ca 	bls.w	8017a4a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80178c0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	f000 80b7 	beq.w	8017a38 <icmp_input+0x1b4>
 80178ca:	2b08      	cmp	r3, #8
 80178cc:	f040 80b7 	bne.w	8017a3e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80178d0:	4b69      	ldr	r3, [pc, #420]	@ (8017a78 <icmp_input+0x1f4>)
 80178d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80178d4:	4b67      	ldr	r3, [pc, #412]	@ (8017a74 <icmp_input+0x1f0>)
 80178d6:	695b      	ldr	r3, [r3, #20]
 80178d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80178dc:	2be0      	cmp	r3, #224	@ 0xe0
 80178de:	f000 80bb 	beq.w	8017a58 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80178e2:	4b64      	ldr	r3, [pc, #400]	@ (8017a74 <icmp_input+0x1f0>)
 80178e4:	695b      	ldr	r3, [r3, #20]
 80178e6:	4a63      	ldr	r2, [pc, #396]	@ (8017a74 <icmp_input+0x1f0>)
 80178e8:	6812      	ldr	r2, [r2, #0]
 80178ea:	4611      	mov	r1, r2
 80178ec:	4618      	mov	r0, r3
 80178ee:	f000 fbed 	bl	80180cc <ip4_addr_isbroadcast_u32>
 80178f2:	4603      	mov	r3, r0
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f040 80b1 	bne.w	8017a5c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	891b      	ldrh	r3, [r3, #8]
 80178fe:	2b07      	cmp	r3, #7
 8017900:	f240 80a5 	bls.w	8017a4e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017904:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017906:	330e      	adds	r3, #14
 8017908:	4619      	mov	r1, r3
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7f8 f842 	bl	800f994 <pbuf_add_header>
 8017910:	4603      	mov	r3, r0
 8017912:	2b00      	cmp	r3, #0
 8017914:	d04b      	beq.n	80179ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	891a      	ldrh	r2, [r3, #8]
 801791a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801791c:	4413      	add	r3, r2
 801791e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	891b      	ldrh	r3, [r3, #8]
 8017924:	8b7a      	ldrh	r2, [r7, #26]
 8017926:	429a      	cmp	r2, r3
 8017928:	f0c0 809a 	bcc.w	8017a60 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801792c:	8b7b      	ldrh	r3, [r7, #26]
 801792e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017932:	4619      	mov	r1, r3
 8017934:	200e      	movs	r0, #14
 8017936:	f7f7 fddf 	bl	800f4f8 <pbuf_alloc>
 801793a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801793c:	697b      	ldr	r3, [r7, #20]
 801793e:	2b00      	cmp	r3, #0
 8017940:	f000 8090 	beq.w	8017a64 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	895b      	ldrh	r3, [r3, #10]
 8017948:	461a      	mov	r2, r3
 801794a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801794c:	3308      	adds	r3, #8
 801794e:	429a      	cmp	r2, r3
 8017950:	d203      	bcs.n	801795a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017952:	6978      	ldr	r0, [r7, #20]
 8017954:	f7f8 f8b4 	bl	800fac0 <pbuf_free>
          goto icmperr;
 8017958:	e085      	b.n	8017a66 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017962:	4618      	mov	r0, r3
 8017964:	f002 fc75 	bl	801a252 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801796a:	4619      	mov	r1, r3
 801796c:	6978      	ldr	r0, [r7, #20]
 801796e:	f7f8 f821 	bl	800f9b4 <pbuf_remove_header>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d009      	beq.n	801798c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017978:	4b40      	ldr	r3, [pc, #256]	@ (8017a7c <icmp_input+0x1f8>)
 801797a:	22b6      	movs	r2, #182	@ 0xb6
 801797c:	4940      	ldr	r1, [pc, #256]	@ (8017a80 <icmp_input+0x1fc>)
 801797e:	4841      	ldr	r0, [pc, #260]	@ (8017a84 <icmp_input+0x200>)
 8017980:	f002 f9e8 	bl	8019d54 <iprintf>
          pbuf_free(r);
 8017984:	6978      	ldr	r0, [r7, #20]
 8017986:	f7f8 f89b 	bl	800fac0 <pbuf_free>
          goto icmperr;
 801798a:	e06c      	b.n	8017a66 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801798c:	6879      	ldr	r1, [r7, #4]
 801798e:	6978      	ldr	r0, [r7, #20]
 8017990:	f7f8 f9ba 	bl	800fd08 <pbuf_copy>
 8017994:	4603      	mov	r3, r0
 8017996:	2b00      	cmp	r3, #0
 8017998:	d003      	beq.n	80179a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801799a:	6978      	ldr	r0, [r7, #20]
 801799c:	f7f8 f890 	bl	800fac0 <pbuf_free>
          goto icmperr;
 80179a0:	e061      	b.n	8017a66 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7f8 f88c 	bl	800fac0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	607b      	str	r3, [r7, #4]
 80179ac:	e00f      	b.n	80179ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80179ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80179b0:	330e      	adds	r3, #14
 80179b2:	4619      	mov	r1, r3
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7f7 fffd 	bl	800f9b4 <pbuf_remove_header>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d006      	beq.n	80179ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80179c0:	4b2e      	ldr	r3, [pc, #184]	@ (8017a7c <icmp_input+0x1f8>)
 80179c2:	22c7      	movs	r2, #199	@ 0xc7
 80179c4:	4930      	ldr	r1, [pc, #192]	@ (8017a88 <icmp_input+0x204>)
 80179c6:	482f      	ldr	r0, [pc, #188]	@ (8017a84 <icmp_input+0x200>)
 80179c8:	f002 f9c4 	bl	8019d54 <iprintf>
          goto icmperr;
 80179cc:	e04b      	b.n	8017a66 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80179d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80179d6:	4619      	mov	r1, r3
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7f7 ffdb 	bl	800f994 <pbuf_add_header>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d12b      	bne.n	8017a3c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80179ea:	69fb      	ldr	r3, [r7, #28]
 80179ec:	681a      	ldr	r2, [r3, #0]
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80179f2:	4b20      	ldr	r3, [pc, #128]	@ (8017a74 <icmp_input+0x1f0>)
 80179f4:	691a      	ldr	r2, [r3, #16]
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80179fa:	693b      	ldr	r3, [r7, #16]
 80179fc:	2200      	movs	r2, #0
 80179fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	2200      	movs	r2, #0
 8017a04:	709a      	strb	r2, [r3, #2]
 8017a06:	2200      	movs	r2, #0
 8017a08:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	22ff      	movs	r2, #255	@ 0xff
 8017a0e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	2200      	movs	r2, #0
 8017a14:	729a      	strb	r2, [r3, #10]
 8017a16:	2200      	movs	r2, #0
 8017a18:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	9302      	str	r3, [sp, #8]
 8017a1e:	2301      	movs	r3, #1
 8017a20:	9301      	str	r3, [sp, #4]
 8017a22:	2300      	movs	r3, #0
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	23ff      	movs	r3, #255	@ 0xff
 8017a28:	2200      	movs	r2, #0
 8017a2a:	69f9      	ldr	r1, [r7, #28]
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f000 fa75 	bl	8017f1c <ip4_output_if>
 8017a32:	4603      	mov	r3, r0
 8017a34:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017a36:	e001      	b.n	8017a3c <icmp_input+0x1b8>
      break;
 8017a38:	bf00      	nop
 8017a3a:	e000      	b.n	8017a3e <icmp_input+0x1ba>
      break;
 8017a3c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7f8 f83e 	bl	800fac0 <pbuf_free>
  return;
 8017a44:	e013      	b.n	8017a6e <icmp_input+0x1ea>
    goto lenerr;
 8017a46:	bf00      	nop
 8017a48:	e002      	b.n	8017a50 <icmp_input+0x1cc>
    goto lenerr;
 8017a4a:	bf00      	nop
 8017a4c:	e000      	b.n	8017a50 <icmp_input+0x1cc>
        goto lenerr;
 8017a4e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017a50:	6878      	ldr	r0, [r7, #4]
 8017a52:	f7f8 f835 	bl	800fac0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017a56:	e00a      	b.n	8017a6e <icmp_input+0x1ea>
        goto icmperr;
 8017a58:	bf00      	nop
 8017a5a:	e004      	b.n	8017a66 <icmp_input+0x1e2>
        goto icmperr;
 8017a5c:	bf00      	nop
 8017a5e:	e002      	b.n	8017a66 <icmp_input+0x1e2>
          goto icmperr;
 8017a60:	bf00      	nop
 8017a62:	e000      	b.n	8017a66 <icmp_input+0x1e2>
          goto icmperr;
 8017a64:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f7f8 f82a 	bl	800fac0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017a6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017a6e:	3728      	adds	r7, #40	@ 0x28
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	2000c468 	.word	0x2000c468
 8017a78:	2000c47c 	.word	0x2000c47c
 8017a7c:	0801f484 	.word	0x0801f484
 8017a80:	0801f4bc 	.word	0x0801f4bc
 8017a84:	0801f4f4 	.word	0x0801f4f4
 8017a88:	0801f51c 	.word	0x0801f51c

08017a8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b082      	sub	sp, #8
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
 8017a94:	460b      	mov	r3, r1
 8017a96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017a98:	78fb      	ldrb	r3, [r7, #3]
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	2103      	movs	r1, #3
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f000 f814 	bl	8017acc <icmp_send_response>
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ab8:	78fb      	ldrb	r3, [r7, #3]
 8017aba:	461a      	mov	r2, r3
 8017abc:	210b      	movs	r1, #11
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f000 f804 	bl	8017acc <icmp_send_response>
}
 8017ac4:	bf00      	nop
 8017ac6:	3708      	adds	r7, #8
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	bd80      	pop	{r7, pc}

08017acc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b08c      	sub	sp, #48	@ 0x30
 8017ad0:	af04      	add	r7, sp, #16
 8017ad2:	6078      	str	r0, [r7, #4]
 8017ad4:	460b      	mov	r3, r1
 8017ad6:	70fb      	strb	r3, [r7, #3]
 8017ad8:	4613      	mov	r3, r2
 8017ada:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017adc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017ae0:	2124      	movs	r1, #36	@ 0x24
 8017ae2:	2022      	movs	r0, #34	@ 0x22
 8017ae4:	f7f7 fd08 	bl	800f4f8 <pbuf_alloc>
 8017ae8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d04c      	beq.n	8017b8a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	895b      	ldrh	r3, [r3, #10]
 8017af4:	2b23      	cmp	r3, #35	@ 0x23
 8017af6:	d806      	bhi.n	8017b06 <icmp_send_response+0x3a>
 8017af8:	4b26      	ldr	r3, [pc, #152]	@ (8017b94 <icmp_send_response+0xc8>)
 8017afa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017afe:	4926      	ldr	r1, [pc, #152]	@ (8017b98 <icmp_send_response+0xcc>)
 8017b00:	4826      	ldr	r0, [pc, #152]	@ (8017b9c <icmp_send_response+0xd0>)
 8017b02:	f002 f927 	bl	8019d54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	78fa      	ldrb	r2, [r7, #3]
 8017b16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017b18:	697b      	ldr	r3, [r7, #20]
 8017b1a:	78ba      	ldrb	r2, [r7, #2]
 8017b1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017b1e:	697b      	ldr	r3, [r7, #20]
 8017b20:	2200      	movs	r2, #0
 8017b22:	711a      	strb	r2, [r3, #4]
 8017b24:	2200      	movs	r2, #0
 8017b26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017b28:	697b      	ldr	r3, [r7, #20]
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	719a      	strb	r2, [r3, #6]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	685b      	ldr	r3, [r3, #4]
 8017b36:	f103 0008 	add.w	r0, r3, #8
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	685b      	ldr	r3, [r3, #4]
 8017b3e:	221c      	movs	r2, #28
 8017b40:	4619      	mov	r1, r3
 8017b42:	f002 fb86 	bl	801a252 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017b46:	69bb      	ldr	r3, [r7, #24]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017b4c:	f107 030c 	add.w	r3, r7, #12
 8017b50:	4618      	mov	r0, r3
 8017b52:	f000 f825 	bl	8017ba0 <ip4_route>
 8017b56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d011      	beq.n	8017b82 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	2200      	movs	r2, #0
 8017b62:	709a      	strb	r2, [r3, #2]
 8017b64:	2200      	movs	r2, #0
 8017b66:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017b68:	f107 020c 	add.w	r2, r7, #12
 8017b6c:	693b      	ldr	r3, [r7, #16]
 8017b6e:	9302      	str	r3, [sp, #8]
 8017b70:	2301      	movs	r3, #1
 8017b72:	9301      	str	r3, [sp, #4]
 8017b74:	2300      	movs	r3, #0
 8017b76:	9300      	str	r3, [sp, #0]
 8017b78:	23ff      	movs	r3, #255	@ 0xff
 8017b7a:	2100      	movs	r1, #0
 8017b7c:	69f8      	ldr	r0, [r7, #28]
 8017b7e:	f000 f9cd 	bl	8017f1c <ip4_output_if>
  }
  pbuf_free(q);
 8017b82:	69f8      	ldr	r0, [r7, #28]
 8017b84:	f7f7 ff9c 	bl	800fac0 <pbuf_free>
 8017b88:	e000      	b.n	8017b8c <icmp_send_response+0xc0>
    return;
 8017b8a:	bf00      	nop
}
 8017b8c:	3720      	adds	r7, #32
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	0801f484 	.word	0x0801f484
 8017b98:	0801f550 	.word	0x0801f550
 8017b9c:	0801f4f4 	.word	0x0801f4f4

08017ba0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017ba0:	b480      	push	{r7}
 8017ba2:	b085      	sub	sp, #20
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017ba8:	4b33      	ldr	r3, [pc, #204]	@ (8017c78 <ip4_route+0xd8>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	60fb      	str	r3, [r7, #12]
 8017bae:	e036      	b.n	8017c1e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bb6:	f003 0301 	and.w	r3, r3, #1
 8017bba:	b2db      	uxtb	r3, r3
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d02b      	beq.n	8017c18 <ip4_route+0x78>
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bc6:	089b      	lsrs	r3, r3, #2
 8017bc8:	f003 0301 	and.w	r3, r3, #1
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d022      	beq.n	8017c18 <ip4_route+0x78>
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	3304      	adds	r3, #4
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d01d      	beq.n	8017c18 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681a      	ldr	r2, [r3, #0]
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	3304      	adds	r3, #4
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	405a      	eors	r2, r3
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	3308      	adds	r3, #8
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	4013      	ands	r3, r2
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d101      	bne.n	8017bf8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	e038      	b.n	8017c6a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bfe:	f003 0302 	and.w	r3, r3, #2
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d108      	bne.n	8017c18 <ip4_route+0x78>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	330c      	adds	r3, #12
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d101      	bne.n	8017c18 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	e028      	b.n	8017c6a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	60fb      	str	r3, [r7, #12]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d1c5      	bne.n	8017bb0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c24:	4b15      	ldr	r3, [pc, #84]	@ (8017c7c <ip4_route+0xdc>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d01a      	beq.n	8017c62 <ip4_route+0xc2>
 8017c2c:	4b13      	ldr	r3, [pc, #76]	@ (8017c7c <ip4_route+0xdc>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c34:	f003 0301 	and.w	r3, r3, #1
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d012      	beq.n	8017c62 <ip4_route+0xc2>
 8017c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8017c7c <ip4_route+0xdc>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c44:	f003 0304 	and.w	r3, r3, #4
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d00a      	beq.n	8017c62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8017c7c <ip4_route+0xdc>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	3304      	adds	r3, #4
 8017c52:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d004      	beq.n	8017c62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	b2db      	uxtb	r3, r3
 8017c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c60:	d101      	bne.n	8017c66 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	e001      	b.n	8017c6a <ip4_route+0xca>
  }

  return netif_default;
 8017c66:	4b05      	ldr	r3, [pc, #20]	@ (8017c7c <ip4_route+0xdc>)
 8017c68:	681b      	ldr	r3, [r3, #0]
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3714      	adds	r7, #20
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c74:	4770      	bx	lr
 8017c76:	bf00      	nop
 8017c78:	20011d70 	.word	0x20011d70
 8017c7c:	20011d74 	.word	0x20011d74

08017c80 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c8e:	f003 0301 	and.w	r3, r3, #1
 8017c92:	b2db      	uxtb	r3, r3
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d016      	beq.n	8017cc6 <ip4_input_accept+0x46>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	3304      	adds	r3, #4
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d011      	beq.n	8017cc6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8017cd0 <ip4_input_accept+0x50>)
 8017ca4:	695a      	ldr	r2, [r3, #20]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3304      	adds	r3, #4
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d008      	beq.n	8017cc2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017cb0:	4b07      	ldr	r3, [pc, #28]	@ (8017cd0 <ip4_input_accept+0x50>)
 8017cb2:	695b      	ldr	r3, [r3, #20]
 8017cb4:	6879      	ldr	r1, [r7, #4]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f000 fa08 	bl	80180cc <ip4_addr_isbroadcast_u32>
 8017cbc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d001      	beq.n	8017cc6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	e000      	b.n	8017cc8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017cc6:	2300      	movs	r3, #0
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3708      	adds	r7, #8
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	2000c468 	.word	0x2000c468

08017cd4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b086      	sub	sp, #24
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	091b      	lsrs	r3, r3, #4
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	2b04      	cmp	r3, #4
 8017cee:	d004      	beq.n	8017cfa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017cf0:	6878      	ldr	r0, [r7, #4]
 8017cf2:	f7f7 fee5 	bl	800fac0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	e107      	b.n	8017f0a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017cfa:	697b      	ldr	r3, [r7, #20]
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	f003 030f 	and.w	r3, r3, #15
 8017d02:	b2db      	uxtb	r3, r3
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	b2db      	uxtb	r3, r3
 8017d08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	885b      	ldrh	r3, [r3, #2]
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7f6 fb29 	bl	800e368 <lwip_htons>
 8017d16:	4603      	mov	r3, r0
 8017d18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	891b      	ldrh	r3, [r3, #8]
 8017d1e:	89ba      	ldrh	r2, [r7, #12]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d204      	bcs.n	8017d2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017d24:	89bb      	ldrh	r3, [r7, #12]
 8017d26:	4619      	mov	r1, r3
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7f7 fd43 	bl	800f7b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	895b      	ldrh	r3, [r3, #10]
 8017d32:	89fa      	ldrh	r2, [r7, #14]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d807      	bhi.n	8017d48 <ip4_input+0x74>
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	891b      	ldrh	r3, [r3, #8]
 8017d3c:	89ba      	ldrh	r2, [r7, #12]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d802      	bhi.n	8017d48 <ip4_input+0x74>
 8017d42:	89fb      	ldrh	r3, [r7, #14]
 8017d44:	2b13      	cmp	r3, #19
 8017d46:	d804      	bhi.n	8017d52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017d48:	6878      	ldr	r0, [r7, #4]
 8017d4a:	f7f7 feb9 	bl	800fac0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	e0db      	b.n	8017f0a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	691b      	ldr	r3, [r3, #16]
 8017d56:	4a6f      	ldr	r2, [pc, #444]	@ (8017f14 <ip4_input+0x240>)
 8017d58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017d5a:	697b      	ldr	r3, [r7, #20]
 8017d5c:	68db      	ldr	r3, [r3, #12]
 8017d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8017f14 <ip4_input+0x240>)
 8017d60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d62:	4b6c      	ldr	r3, [pc, #432]	@ (8017f14 <ip4_input+0x240>)
 8017d64:	695b      	ldr	r3, [r3, #20]
 8017d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017d6a:	2be0      	cmp	r3, #224	@ 0xe0
 8017d6c:	d112      	bne.n	8017d94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d74:	f003 0301 	and.w	r3, r3, #1
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d007      	beq.n	8017d8e <ip4_input+0xba>
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	3304      	adds	r3, #4
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d002      	beq.n	8017d8e <ip4_input+0xba>
      netif = inp;
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	613b      	str	r3, [r7, #16]
 8017d8c:	e02a      	b.n	8017de4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	613b      	str	r3, [r7, #16]
 8017d92:	e027      	b.n	8017de4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017d94:	6838      	ldr	r0, [r7, #0]
 8017d96:	f7ff ff73 	bl	8017c80 <ip4_input_accept>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d002      	beq.n	8017da6 <ip4_input+0xd2>
      netif = inp;
 8017da0:	683b      	ldr	r3, [r7, #0]
 8017da2:	613b      	str	r3, [r7, #16]
 8017da4:	e01e      	b.n	8017de4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017da6:	2300      	movs	r3, #0
 8017da8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017daa:	4b5a      	ldr	r3, [pc, #360]	@ (8017f14 <ip4_input+0x240>)
 8017dac:	695b      	ldr	r3, [r3, #20]
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8017db2:	d017      	beq.n	8017de4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017db4:	4b58      	ldr	r3, [pc, #352]	@ (8017f18 <ip4_input+0x244>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	613b      	str	r3, [r7, #16]
 8017dba:	e00e      	b.n	8017dda <ip4_input+0x106>
          if (netif == inp) {
 8017dbc:	693a      	ldr	r2, [r7, #16]
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d006      	beq.n	8017dd2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017dc4:	6938      	ldr	r0, [r7, #16]
 8017dc6:	f7ff ff5b 	bl	8017c80 <ip4_input_accept>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d108      	bne.n	8017de2 <ip4_input+0x10e>
 8017dd0:	e000      	b.n	8017dd4 <ip4_input+0x100>
            continue;
 8017dd2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	613b      	str	r3, [r7, #16]
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d1ed      	bne.n	8017dbc <ip4_input+0xe8>
 8017de0:	e000      	b.n	8017de4 <ip4_input+0x110>
            break;
 8017de2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017de4:	4b4b      	ldr	r3, [pc, #300]	@ (8017f14 <ip4_input+0x240>)
 8017de6:	691b      	ldr	r3, [r3, #16]
 8017de8:	6839      	ldr	r1, [r7, #0]
 8017dea:	4618      	mov	r0, r3
 8017dec:	f000 f96e 	bl	80180cc <ip4_addr_isbroadcast_u32>
 8017df0:	4603      	mov	r3, r0
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d105      	bne.n	8017e02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017df6:	4b47      	ldr	r3, [pc, #284]	@ (8017f14 <ip4_input+0x240>)
 8017df8:	691b      	ldr	r3, [r3, #16]
 8017dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017dfe:	2be0      	cmp	r3, #224	@ 0xe0
 8017e00:	d104      	bne.n	8017e0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f7f7 fe5c 	bl	800fac0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	e07e      	b.n	8017f0a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d104      	bne.n	8017e1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f7f7 fe54 	bl	800fac0 <pbuf_free>
    return ERR_OK;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	e076      	b.n	8017f0a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	88db      	ldrh	r3, [r3, #6]
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	461a      	mov	r2, r3
 8017e24:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017e28:	4013      	ands	r3, r2
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d00b      	beq.n	8017e46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f000 fc92 	bl	8018758 <ip4_reass>
 8017e34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d101      	bne.n	8017e40 <ip4_input+0x16c>
      return ERR_OK;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	e064      	b.n	8017f0a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017e46:	4a33      	ldr	r2, [pc, #204]	@ (8017f14 <ip4_input+0x240>)
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017e4c:	4a31      	ldr	r2, [pc, #196]	@ (8017f14 <ip4_input+0x240>)
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017e52:	4a30      	ldr	r2, [pc, #192]	@ (8017f14 <ip4_input+0x240>)
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	f003 030f 	and.w	r3, r3, #15
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	009b      	lsls	r3, r3, #2
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	461a      	mov	r2, r3
 8017e68:	4b2a      	ldr	r3, [pc, #168]	@ (8017f14 <ip4_input+0x240>)
 8017e6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017e6c:	89fb      	ldrh	r3, [r7, #14]
 8017e6e:	4619      	mov	r1, r3
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7f7 fd9f 	bl	800f9b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	7a5b      	ldrb	r3, [r3, #9]
 8017e7a:	2b11      	cmp	r3, #17
 8017e7c:	d006      	beq.n	8017e8c <ip4_input+0x1b8>
 8017e7e:	2b11      	cmp	r3, #17
 8017e80:	dc13      	bgt.n	8017eaa <ip4_input+0x1d6>
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d00c      	beq.n	8017ea0 <ip4_input+0x1cc>
 8017e86:	2b06      	cmp	r3, #6
 8017e88:	d005      	beq.n	8017e96 <ip4_input+0x1c2>
 8017e8a:	e00e      	b.n	8017eaa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017e8c:	6839      	ldr	r1, [r7, #0]
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f7fe fb5a 	bl	8016548 <udp_input>
        break;
 8017e94:	e026      	b.n	8017ee4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017e96:	6839      	ldr	r1, [r7, #0]
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7f9 ff19 	bl	8011cd0 <tcp_input>
        break;
 8017e9e:	e021      	b.n	8017ee4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017ea0:	6839      	ldr	r1, [r7, #0]
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f7ff fcee 	bl	8017884 <icmp_input>
        break;
 8017ea8:	e01c      	b.n	8017ee4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8017f14 <ip4_input+0x240>)
 8017eac:	695b      	ldr	r3, [r3, #20]
 8017eae:	6939      	ldr	r1, [r7, #16]
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f000 f90b 	bl	80180cc <ip4_addr_isbroadcast_u32>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d10f      	bne.n	8017edc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017ebc:	4b15      	ldr	r3, [pc, #84]	@ (8017f14 <ip4_input+0x240>)
 8017ebe:	695b      	ldr	r3, [r3, #20]
 8017ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017ec4:	2be0      	cmp	r3, #224	@ 0xe0
 8017ec6:	d009      	beq.n	8017edc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017ec8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017ecc:	4619      	mov	r1, r3
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f7f7 fde3 	bl	800fa9a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017ed4:	2102      	movs	r1, #2
 8017ed6:	6878      	ldr	r0, [r7, #4]
 8017ed8:	f7ff fdd8 	bl	8017a8c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017edc:	6878      	ldr	r0, [r7, #4]
 8017ede:	f7f7 fdef 	bl	800fac0 <pbuf_free>
        break;
 8017ee2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8017f14 <ip4_input+0x240>)
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017eea:	4b0a      	ldr	r3, [pc, #40]	@ (8017f14 <ip4_input+0x240>)
 8017eec:	2200      	movs	r2, #0
 8017eee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017ef0:	4b08      	ldr	r3, [pc, #32]	@ (8017f14 <ip4_input+0x240>)
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017ef6:	4b07      	ldr	r3, [pc, #28]	@ (8017f14 <ip4_input+0x240>)
 8017ef8:	2200      	movs	r2, #0
 8017efa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017efc:	4b05      	ldr	r3, [pc, #20]	@ (8017f14 <ip4_input+0x240>)
 8017efe:	2200      	movs	r2, #0
 8017f00:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017f02:	4b04      	ldr	r3, [pc, #16]	@ (8017f14 <ip4_input+0x240>)
 8017f04:	2200      	movs	r2, #0
 8017f06:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3718      	adds	r7, #24
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	2000c468 	.word	0x2000c468
 8017f18:	20011d70 	.word	0x20011d70

08017f1c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b08a      	sub	sp, #40	@ 0x28
 8017f20:	af04      	add	r7, sp, #16
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
 8017f28:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d009      	beq.n	8017f48 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017f34:	68bb      	ldr	r3, [r7, #8]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d003      	beq.n	8017f42 <ip4_output_if+0x26>
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d102      	bne.n	8017f48 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f44:	3304      	adds	r3, #4
 8017f46:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017f48:	78fa      	ldrb	r2, [r7, #3]
 8017f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f4c:	9302      	str	r3, [sp, #8]
 8017f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017f52:	9301      	str	r3, [sp, #4]
 8017f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f58:	9300      	str	r3, [sp, #0]
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	687a      	ldr	r2, [r7, #4]
 8017f5e:	6979      	ldr	r1, [r7, #20]
 8017f60:	68f8      	ldr	r0, [r7, #12]
 8017f62:	f000 f805 	bl	8017f70 <ip4_output_if_src>
 8017f66:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3718      	adds	r7, #24
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b088      	sub	sp, #32
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	607a      	str	r2, [r7, #4]
 8017f7c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	7b9b      	ldrb	r3, [r3, #14]
 8017f82:	2b01      	cmp	r3, #1
 8017f84:	d006      	beq.n	8017f94 <ip4_output_if_src+0x24>
 8017f86:	4b4b      	ldr	r3, [pc, #300]	@ (80180b4 <ip4_output_if_src+0x144>)
 8017f88:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017f8c:	494a      	ldr	r1, [pc, #296]	@ (80180b8 <ip4_output_if_src+0x148>)
 8017f8e:	484b      	ldr	r0, [pc, #300]	@ (80180bc <ip4_output_if_src+0x14c>)
 8017f90:	f001 fee0 	bl	8019d54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d060      	beq.n	801805c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017f9a:	2314      	movs	r3, #20
 8017f9c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017f9e:	2114      	movs	r1, #20
 8017fa0:	68f8      	ldr	r0, [r7, #12]
 8017fa2:	f7f7 fcf7 	bl	800f994 <pbuf_add_header>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d002      	beq.n	8017fb2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017fac:	f06f 0301 	mvn.w	r3, #1
 8017fb0:	e07c      	b.n	80180ac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	895b      	ldrh	r3, [r3, #10]
 8017fbc:	2b13      	cmp	r3, #19
 8017fbe:	d806      	bhi.n	8017fce <ip4_output_if_src+0x5e>
 8017fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80180b4 <ip4_output_if_src+0x144>)
 8017fc2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017fc6:	493e      	ldr	r1, [pc, #248]	@ (80180c0 <ip4_output_if_src+0x150>)
 8017fc8:	483c      	ldr	r0, [pc, #240]	@ (80180bc <ip4_output_if_src+0x14c>)
 8017fca:	f001 fec3 	bl	8019d54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017fce:	69fb      	ldr	r3, [r7, #28]
 8017fd0:	78fa      	ldrb	r2, [r7, #3]
 8017fd2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017fda:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681a      	ldr	r2, [r3, #0]
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017fe4:	8b7b      	ldrh	r3, [r7, #26]
 8017fe6:	089b      	lsrs	r3, r3, #2
 8017fe8:	b29b      	uxth	r3, r3
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ff0:	b2da      	uxtb	r2, r3
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017ffc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	891b      	ldrh	r3, [r3, #8]
 8018002:	4618      	mov	r0, r3
 8018004:	f7f6 f9b0 	bl	800e368 <lwip_htons>
 8018008:	4603      	mov	r3, r0
 801800a:	461a      	mov	r2, r3
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018010:	69fb      	ldr	r3, [r7, #28]
 8018012:	2200      	movs	r2, #0
 8018014:	719a      	strb	r2, [r3, #6]
 8018016:	2200      	movs	r2, #0
 8018018:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801801a:	4b2a      	ldr	r3, [pc, #168]	@ (80180c4 <ip4_output_if_src+0x154>)
 801801c:	881b      	ldrh	r3, [r3, #0]
 801801e:	4618      	mov	r0, r3
 8018020:	f7f6 f9a2 	bl	800e368 <lwip_htons>
 8018024:	4603      	mov	r3, r0
 8018026:	461a      	mov	r2, r3
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801802c:	4b25      	ldr	r3, [pc, #148]	@ (80180c4 <ip4_output_if_src+0x154>)
 801802e:	881b      	ldrh	r3, [r3, #0]
 8018030:	3301      	adds	r3, #1
 8018032:	b29a      	uxth	r2, r3
 8018034:	4b23      	ldr	r3, [pc, #140]	@ (80180c4 <ip4_output_if_src+0x154>)
 8018036:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d104      	bne.n	8018048 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801803e:	4b22      	ldr	r3, [pc, #136]	@ (80180c8 <ip4_output_if_src+0x158>)
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	69fb      	ldr	r3, [r7, #28]
 8018044:	60da      	str	r2, [r3, #12]
 8018046:	e003      	b.n	8018050 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	681a      	ldr	r2, [r3, #0]
 801804c:	69fb      	ldr	r3, [r7, #28]
 801804e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	2200      	movs	r2, #0
 8018054:	729a      	strb	r2, [r3, #10]
 8018056:	2200      	movs	r2, #0
 8018058:	72da      	strb	r2, [r3, #11]
 801805a:	e00f      	b.n	801807c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	895b      	ldrh	r3, [r3, #10]
 8018060:	2b13      	cmp	r3, #19
 8018062:	d802      	bhi.n	801806a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018064:	f06f 0301 	mvn.w	r3, #1
 8018068:	e020      	b.n	80180ac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	691b      	ldr	r3, [r3, #16]
 8018074:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018076:	f107 0314 	add.w	r3, r7, #20
 801807a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801807e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018080:	2b00      	cmp	r3, #0
 8018082:	d00c      	beq.n	801809e <ip4_output_if_src+0x12e>
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	891a      	ldrh	r2, [r3, #8]
 8018088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801808a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801808c:	429a      	cmp	r2, r3
 801808e:	d906      	bls.n	801809e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018094:	68f8      	ldr	r0, [r7, #12]
 8018096:	f000 fd53 	bl	8018b40 <ip4_frag>
 801809a:	4603      	mov	r3, r0
 801809c:	e006      	b.n	80180ac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180a0:	695b      	ldr	r3, [r3, #20]
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	68f9      	ldr	r1, [r7, #12]
 80180a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80180a8:	4798      	blx	r3
 80180aa:	4603      	mov	r3, r0
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3720      	adds	r7, #32
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	0801f57c 	.word	0x0801f57c
 80180b8:	0801f5b0 	.word	0x0801f5b0
 80180bc:	0801f5bc 	.word	0x0801f5bc
 80180c0:	0801f5e4 	.word	0x0801f5e4
 80180c4:	20011ece 	.word	0x20011ece
 80180c8:	0801f9fc 	.word	0x0801f9fc

080180cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80180cc:	b480      	push	{r7}
 80180ce:	b085      	sub	sp, #20
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180e0:	d002      	beq.n	80180e8 <ip4_addr_isbroadcast_u32+0x1c>
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d101      	bne.n	80180ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80180e8:	2301      	movs	r3, #1
 80180ea:	e02a      	b.n	8018142 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80180f2:	f003 0302 	and.w	r3, r3, #2
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d101      	bne.n	80180fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80180fa:	2300      	movs	r3, #0
 80180fc:	e021      	b.n	8018142 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	3304      	adds	r3, #4
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	687a      	ldr	r2, [r7, #4]
 8018106:	429a      	cmp	r2, r3
 8018108:	d101      	bne.n	801810e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801810a:	2300      	movs	r3, #0
 801810c:	e019      	b.n	8018142 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801810e:	68fa      	ldr	r2, [r7, #12]
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	3304      	adds	r3, #4
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	405a      	eors	r2, r3
 8018118:	683b      	ldr	r3, [r7, #0]
 801811a:	3308      	adds	r3, #8
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	4013      	ands	r3, r2
 8018120:	2b00      	cmp	r3, #0
 8018122:	d10d      	bne.n	8018140 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	3308      	adds	r3, #8
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	43da      	mvns	r2, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	3308      	adds	r3, #8
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018138:	429a      	cmp	r2, r3
 801813a:	d101      	bne.n	8018140 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801813c:	2301      	movs	r3, #1
 801813e:	e000      	b.n	8018142 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018140:	2300      	movs	r3, #0
  }
}
 8018142:	4618      	mov	r0, r3
 8018144:	3714      	adds	r7, #20
 8018146:	46bd      	mov	sp, r7
 8018148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801814c:	4770      	bx	lr
	...

08018150 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b084      	sub	sp, #16
 8018154:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018156:	2300      	movs	r3, #0
 8018158:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801815a:	4b12      	ldr	r3, [pc, #72]	@ (80181a4 <ip_reass_tmr+0x54>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018160:	e018      	b.n	8018194 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	7fdb      	ldrb	r3, [r3, #31]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00b      	beq.n	8018182 <ip_reass_tmr+0x32>
      r->timer--;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	7fdb      	ldrb	r3, [r3, #31]
 801816e:	3b01      	subs	r3, #1
 8018170:	b2da      	uxtb	r2, r3
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	60fb      	str	r3, [r7, #12]
 8018180:	e008      	b.n	8018194 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801818c:	68b9      	ldr	r1, [r7, #8]
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f000 f80a 	bl	80181a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d1e3      	bne.n	8018162 <ip_reass_tmr+0x12>
    }
  }
}
 801819a:	bf00      	nop
 801819c:	bf00      	nop
 801819e:	3710      	adds	r7, #16
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}
 80181a4:	20011ed0 	.word	0x20011ed0

080181a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b088      	sub	sp, #32
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80181b2:	2300      	movs	r3, #0
 80181b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80181b6:	683a      	ldr	r2, [r7, #0]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d105      	bne.n	80181ca <ip_reass_free_complete_datagram+0x22>
 80181be:	4b45      	ldr	r3, [pc, #276]	@ (80182d4 <ip_reass_free_complete_datagram+0x12c>)
 80181c0:	22ab      	movs	r2, #171	@ 0xab
 80181c2:	4945      	ldr	r1, [pc, #276]	@ (80182d8 <ip_reass_free_complete_datagram+0x130>)
 80181c4:	4845      	ldr	r0, [pc, #276]	@ (80182dc <ip_reass_free_complete_datagram+0x134>)
 80181c6:	f001 fdc5 	bl	8019d54 <iprintf>
  if (prev != NULL) {
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d00a      	beq.n	80181e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80181d0:	683b      	ldr	r3, [r7, #0]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d005      	beq.n	80181e6 <ip_reass_free_complete_datagram+0x3e>
 80181da:	4b3e      	ldr	r3, [pc, #248]	@ (80182d4 <ip_reass_free_complete_datagram+0x12c>)
 80181dc:	22ad      	movs	r2, #173	@ 0xad
 80181de:	4940      	ldr	r1, [pc, #256]	@ (80182e0 <ip_reass_free_complete_datagram+0x138>)
 80181e0:	483e      	ldr	r0, [pc, #248]	@ (80182dc <ip_reass_free_complete_datagram+0x134>)
 80181e2:	f001 fdb7 	bl	8019d54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80181ee:	697b      	ldr	r3, [r7, #20]
 80181f0:	889b      	ldrh	r3, [r3, #4]
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d12a      	bne.n	801824e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	681a      	ldr	r2, [r3, #0]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	6858      	ldr	r0, [r3, #4]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	3308      	adds	r3, #8
 801820e:	2214      	movs	r2, #20
 8018210:	4619      	mov	r1, r3
 8018212:	f002 f81e 	bl	801a252 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018216:	2101      	movs	r1, #1
 8018218:	69b8      	ldr	r0, [r7, #24]
 801821a:	f7ff fc47 	bl	8017aac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801821e:	69b8      	ldr	r0, [r7, #24]
 8018220:	f7f7 fcdc 	bl	800fbdc <pbuf_clen>
 8018224:	4603      	mov	r3, r0
 8018226:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018228:	8bfa      	ldrh	r2, [r7, #30]
 801822a:	8a7b      	ldrh	r3, [r7, #18]
 801822c:	4413      	add	r3, r2
 801822e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018232:	db05      	blt.n	8018240 <ip_reass_free_complete_datagram+0x98>
 8018234:	4b27      	ldr	r3, [pc, #156]	@ (80182d4 <ip_reass_free_complete_datagram+0x12c>)
 8018236:	22bc      	movs	r2, #188	@ 0xbc
 8018238:	492a      	ldr	r1, [pc, #168]	@ (80182e4 <ip_reass_free_complete_datagram+0x13c>)
 801823a:	4828      	ldr	r0, [pc, #160]	@ (80182dc <ip_reass_free_complete_datagram+0x134>)
 801823c:	f001 fd8a 	bl	8019d54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018240:	8bfa      	ldrh	r2, [r7, #30]
 8018242:	8a7b      	ldrh	r3, [r7, #18]
 8018244:	4413      	add	r3, r2
 8018246:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018248:	69b8      	ldr	r0, [r7, #24]
 801824a:	f7f7 fc39 	bl	800fac0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	685b      	ldr	r3, [r3, #4]
 8018252:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018254:	e01f      	b.n	8018296 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018256:	69bb      	ldr	r3, [r7, #24]
 8018258:	685b      	ldr	r3, [r3, #4]
 801825a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801825c:	69bb      	ldr	r3, [r7, #24]
 801825e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018266:	68f8      	ldr	r0, [r7, #12]
 8018268:	f7f7 fcb8 	bl	800fbdc <pbuf_clen>
 801826c:	4603      	mov	r3, r0
 801826e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018270:	8bfa      	ldrh	r2, [r7, #30]
 8018272:	8a7b      	ldrh	r3, [r7, #18]
 8018274:	4413      	add	r3, r2
 8018276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801827a:	db05      	blt.n	8018288 <ip_reass_free_complete_datagram+0xe0>
 801827c:	4b15      	ldr	r3, [pc, #84]	@ (80182d4 <ip_reass_free_complete_datagram+0x12c>)
 801827e:	22cc      	movs	r2, #204	@ 0xcc
 8018280:	4918      	ldr	r1, [pc, #96]	@ (80182e4 <ip_reass_free_complete_datagram+0x13c>)
 8018282:	4816      	ldr	r0, [pc, #88]	@ (80182dc <ip_reass_free_complete_datagram+0x134>)
 8018284:	f001 fd66 	bl	8019d54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018288:	8bfa      	ldrh	r2, [r7, #30]
 801828a:	8a7b      	ldrh	r3, [r7, #18]
 801828c:	4413      	add	r3, r2
 801828e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018290:	68f8      	ldr	r0, [r7, #12]
 8018292:	f7f7 fc15 	bl	800fac0 <pbuf_free>
  while (p != NULL) {
 8018296:	69bb      	ldr	r3, [r7, #24]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d1dc      	bne.n	8018256 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801829c:	6839      	ldr	r1, [r7, #0]
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	f000 f8c2 	bl	8018428 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80182a4:	4b10      	ldr	r3, [pc, #64]	@ (80182e8 <ip_reass_free_complete_datagram+0x140>)
 80182a6:	881b      	ldrh	r3, [r3, #0]
 80182a8:	8bfa      	ldrh	r2, [r7, #30]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d905      	bls.n	80182ba <ip_reass_free_complete_datagram+0x112>
 80182ae:	4b09      	ldr	r3, [pc, #36]	@ (80182d4 <ip_reass_free_complete_datagram+0x12c>)
 80182b0:	22d2      	movs	r2, #210	@ 0xd2
 80182b2:	490e      	ldr	r1, [pc, #56]	@ (80182ec <ip_reass_free_complete_datagram+0x144>)
 80182b4:	4809      	ldr	r0, [pc, #36]	@ (80182dc <ip_reass_free_complete_datagram+0x134>)
 80182b6:	f001 fd4d 	bl	8019d54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80182ba:	4b0b      	ldr	r3, [pc, #44]	@ (80182e8 <ip_reass_free_complete_datagram+0x140>)
 80182bc:	881a      	ldrh	r2, [r3, #0]
 80182be:	8bfb      	ldrh	r3, [r7, #30]
 80182c0:	1ad3      	subs	r3, r2, r3
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	4b08      	ldr	r3, [pc, #32]	@ (80182e8 <ip_reass_free_complete_datagram+0x140>)
 80182c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80182c8:	8bfb      	ldrh	r3, [r7, #30]
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3720      	adds	r7, #32
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	0801f614 	.word	0x0801f614
 80182d8:	0801f650 	.word	0x0801f650
 80182dc:	0801f65c 	.word	0x0801f65c
 80182e0:	0801f684 	.word	0x0801f684
 80182e4:	0801f698 	.word	0x0801f698
 80182e8:	20011ed4 	.word	0x20011ed4
 80182ec:	0801f6b8 	.word	0x0801f6b8

080182f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b08a      	sub	sp, #40	@ 0x28
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
 80182f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80182fa:	2300      	movs	r3, #0
 80182fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80182fe:	2300      	movs	r3, #0
 8018300:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018302:	2300      	movs	r3, #0
 8018304:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018306:	2300      	movs	r3, #0
 8018308:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801830a:	2300      	movs	r3, #0
 801830c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801830e:	4b28      	ldr	r3, [pc, #160]	@ (80183b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018314:	e030      	b.n	8018378 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018318:	695a      	ldr	r2, [r3, #20]
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	68db      	ldr	r3, [r3, #12]
 801831e:	429a      	cmp	r2, r3
 8018320:	d10c      	bne.n	801833c <ip_reass_remove_oldest_datagram+0x4c>
 8018322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018324:	699a      	ldr	r2, [r3, #24]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	691b      	ldr	r3, [r3, #16]
 801832a:	429a      	cmp	r2, r3
 801832c:	d106      	bne.n	801833c <ip_reass_remove_oldest_datagram+0x4c>
 801832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018330:	899a      	ldrh	r2, [r3, #12]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	889b      	ldrh	r3, [r3, #4]
 8018336:	b29b      	uxth	r3, r3
 8018338:	429a      	cmp	r2, r3
 801833a:	d014      	beq.n	8018366 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801833c:	693b      	ldr	r3, [r7, #16]
 801833e:	3301      	adds	r3, #1
 8018340:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018342:	6a3b      	ldr	r3, [r7, #32]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d104      	bne.n	8018352 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801834a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	61bb      	str	r3, [r7, #24]
 8018350:	e009      	b.n	8018366 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018354:	7fda      	ldrb	r2, [r3, #31]
 8018356:	6a3b      	ldr	r3, [r7, #32]
 8018358:	7fdb      	ldrb	r3, [r3, #31]
 801835a:	429a      	cmp	r2, r3
 801835c:	d803      	bhi.n	8018366 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018360:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018362:	69fb      	ldr	r3, [r7, #28]
 8018364:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d001      	beq.n	8018372 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018370:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801837a:	2b00      	cmp	r3, #0
 801837c:	d1cb      	bne.n	8018316 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d008      	beq.n	8018396 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018384:	69b9      	ldr	r1, [r7, #24]
 8018386:	6a38      	ldr	r0, [r7, #32]
 8018388:	f7ff ff0e 	bl	80181a8 <ip_reass_free_complete_datagram>
 801838c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801838e:	697a      	ldr	r2, [r7, #20]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	4413      	add	r3, r2
 8018394:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018396:	697a      	ldr	r2, [r7, #20]
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	429a      	cmp	r2, r3
 801839c:	da02      	bge.n	80183a4 <ip_reass_remove_oldest_datagram+0xb4>
 801839e:	693b      	ldr	r3, [r7, #16]
 80183a0:	2b01      	cmp	r3, #1
 80183a2:	dcac      	bgt.n	80182fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80183a4:	697b      	ldr	r3, [r7, #20]
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3728      	adds	r7, #40	@ 0x28
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	20011ed0 	.word	0x20011ed0

080183b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b084      	sub	sp, #16
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
 80183bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80183be:	2004      	movs	r0, #4
 80183c0:	f7f6 fc88 	bl	800ecd4 <memp_malloc>
 80183c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d110      	bne.n	80183ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80183cc:	6839      	ldr	r1, [r7, #0]
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f7ff ff8e 	bl	80182f0 <ip_reass_remove_oldest_datagram>
 80183d4:	4602      	mov	r2, r0
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	4293      	cmp	r3, r2
 80183da:	dc03      	bgt.n	80183e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80183dc:	2004      	movs	r0, #4
 80183de:	f7f6 fc79 	bl	800ecd4 <memp_malloc>
 80183e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d101      	bne.n	80183ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80183ea:	2300      	movs	r3, #0
 80183ec:	e016      	b.n	801841c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80183ee:	2220      	movs	r2, #32
 80183f0:	2100      	movs	r1, #0
 80183f2:	68f8      	ldr	r0, [r7, #12]
 80183f4:	f001 fe74 	bl	801a0e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	220f      	movs	r2, #15
 80183fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80183fe:	4b09      	ldr	r3, [pc, #36]	@ (8018424 <ip_reass_enqueue_new_datagram+0x70>)
 8018400:	681a      	ldr	r2, [r3, #0]
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018406:	4a07      	ldr	r2, [pc, #28]	@ (8018424 <ip_reass_enqueue_new_datagram+0x70>)
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	3308      	adds	r3, #8
 8018410:	2214      	movs	r2, #20
 8018412:	6879      	ldr	r1, [r7, #4]
 8018414:	4618      	mov	r0, r3
 8018416:	f001 ff1c 	bl	801a252 <memcpy>
  return ipr;
 801841a:	68fb      	ldr	r3, [r7, #12]
}
 801841c:	4618      	mov	r0, r3
 801841e:	3710      	adds	r7, #16
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	20011ed0 	.word	0x20011ed0

08018428 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
 8018430:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018432:	4b10      	ldr	r3, [pc, #64]	@ (8018474 <ip_reass_dequeue_datagram+0x4c>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	687a      	ldr	r2, [r7, #4]
 8018438:	429a      	cmp	r2, r3
 801843a:	d104      	bne.n	8018446 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	4a0c      	ldr	r2, [pc, #48]	@ (8018474 <ip_reass_dequeue_datagram+0x4c>)
 8018442:	6013      	str	r3, [r2, #0]
 8018444:	e00d      	b.n	8018462 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018446:	683b      	ldr	r3, [r7, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d106      	bne.n	801845a <ip_reass_dequeue_datagram+0x32>
 801844c:	4b0a      	ldr	r3, [pc, #40]	@ (8018478 <ip_reass_dequeue_datagram+0x50>)
 801844e:	f240 1245 	movw	r2, #325	@ 0x145
 8018452:	490a      	ldr	r1, [pc, #40]	@ (801847c <ip_reass_dequeue_datagram+0x54>)
 8018454:	480a      	ldr	r0, [pc, #40]	@ (8018480 <ip_reass_dequeue_datagram+0x58>)
 8018456:	f001 fc7d 	bl	8019d54 <iprintf>
    prev->next = ipr->next;
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018462:	6879      	ldr	r1, [r7, #4]
 8018464:	2004      	movs	r0, #4
 8018466:	f7f6 fc87 	bl	800ed78 <memp_free>
}
 801846a:	bf00      	nop
 801846c:	3708      	adds	r7, #8
 801846e:	46bd      	mov	sp, r7
 8018470:	bd80      	pop	{r7, pc}
 8018472:	bf00      	nop
 8018474:	20011ed0 	.word	0x20011ed0
 8018478:	0801f614 	.word	0x0801f614
 801847c:	0801f6dc 	.word	0x0801f6dc
 8018480:	0801f65c 	.word	0x0801f65c

08018484 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b08c      	sub	sp, #48	@ 0x30
 8018488:	af00      	add	r7, sp, #0
 801848a:	60f8      	str	r0, [r7, #12]
 801848c:	60b9      	str	r1, [r7, #8]
 801848e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018490:	2300      	movs	r3, #0
 8018492:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018494:	2301      	movs	r3, #1
 8018496:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801849e:	69fb      	ldr	r3, [r7, #28]
 80184a0:	885b      	ldrh	r3, [r3, #2]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f5 ff5f 	bl	800e368 <lwip_htons>
 80184aa:	4603      	mov	r3, r0
 80184ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80184ae:	69fb      	ldr	r3, [r7, #28]
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	f003 030f 	and.w	r3, r3, #15
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	009b      	lsls	r3, r3, #2
 80184ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80184bc:	7e7b      	ldrb	r3, [r7, #25]
 80184be:	b29b      	uxth	r3, r3
 80184c0:	8b7a      	ldrh	r2, [r7, #26]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d202      	bcs.n	80184cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80184c6:	f04f 33ff 	mov.w	r3, #4294967295
 80184ca:	e135      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80184cc:	7e7b      	ldrb	r3, [r7, #25]
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	8b7a      	ldrh	r2, [r7, #26]
 80184d2:	1ad3      	subs	r3, r2, r3
 80184d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80184d6:	69fb      	ldr	r3, [r7, #28]
 80184d8:	88db      	ldrh	r3, [r3, #6]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f5 ff43 	bl	800e368 <lwip_htons>
 80184e2:	4603      	mov	r3, r0
 80184e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	00db      	lsls	r3, r3, #3
 80184ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	685b      	ldr	r3, [r3, #4]
 80184f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80184f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184f6:	2200      	movs	r2, #0
 80184f8:	701a      	strb	r2, [r3, #0]
 80184fa:	2200      	movs	r2, #0
 80184fc:	705a      	strb	r2, [r3, #1]
 80184fe:	2200      	movs	r2, #0
 8018500:	709a      	strb	r2, [r3, #2]
 8018502:	2200      	movs	r2, #0
 8018504:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018508:	8afa      	ldrh	r2, [r7, #22]
 801850a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801850c:	8afa      	ldrh	r2, [r7, #22]
 801850e:	8b7b      	ldrh	r3, [r7, #26]
 8018510:	4413      	add	r3, r2
 8018512:	b29a      	uxth	r2, r3
 8018514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018516:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801851a:	88db      	ldrh	r3, [r3, #6]
 801851c:	b29b      	uxth	r3, r3
 801851e:	8afa      	ldrh	r2, [r7, #22]
 8018520:	429a      	cmp	r2, r3
 8018522:	d902      	bls.n	801852a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018524:	f04f 33ff 	mov.w	r3, #4294967295
 8018528:	e106      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	685b      	ldr	r3, [r3, #4]
 801852e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018530:	e068      	b.n	8018604 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018534:	685b      	ldr	r3, [r3, #4]
 8018536:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801853a:	889b      	ldrh	r3, [r3, #4]
 801853c:	b29a      	uxth	r2, r3
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	889b      	ldrh	r3, [r3, #4]
 8018542:	b29b      	uxth	r3, r3
 8018544:	429a      	cmp	r2, r3
 8018546:	d235      	bcs.n	80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801854a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801854c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018550:	2b00      	cmp	r3, #0
 8018552:	d020      	beq.n	8018596 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018556:	889b      	ldrh	r3, [r3, #4]
 8018558:	b29a      	uxth	r2, r3
 801855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801855c:	88db      	ldrh	r3, [r3, #6]
 801855e:	b29b      	uxth	r3, r3
 8018560:	429a      	cmp	r2, r3
 8018562:	d307      	bcc.n	8018574 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018566:	88db      	ldrh	r3, [r3, #6]
 8018568:	b29a      	uxth	r2, r3
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	889b      	ldrh	r3, [r3, #4]
 801856e:	b29b      	uxth	r3, r3
 8018570:	429a      	cmp	r2, r3
 8018572:	d902      	bls.n	801857a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018574:	f04f 33ff 	mov.w	r3, #4294967295
 8018578:	e0de      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801857c:	68ba      	ldr	r2, [r7, #8]
 801857e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018582:	88db      	ldrh	r3, [r3, #6]
 8018584:	b29a      	uxth	r2, r3
 8018586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018588:	889b      	ldrh	r3, [r3, #4]
 801858a:	b29b      	uxth	r3, r3
 801858c:	429a      	cmp	r2, r3
 801858e:	d03d      	beq.n	801860c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018590:	2300      	movs	r3, #0
 8018592:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018594:	e03a      	b.n	801860c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018598:	88db      	ldrh	r3, [r3, #6]
 801859a:	b29a      	uxth	r2, r3
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	889b      	ldrh	r3, [r3, #4]
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d902      	bls.n	80185ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185a6:	f04f 33ff 	mov.w	r3, #4294967295
 80185aa:	e0c5      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	68ba      	ldr	r2, [r7, #8]
 80185b0:	605a      	str	r2, [r3, #4]
      break;
 80185b2:	e02b      	b.n	801860c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80185b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185b6:	889b      	ldrh	r3, [r3, #4]
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	693b      	ldr	r3, [r7, #16]
 80185bc:	889b      	ldrh	r3, [r3, #4]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	429a      	cmp	r2, r3
 80185c2:	d102      	bne.n	80185ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185c4:	f04f 33ff 	mov.w	r3, #4294967295
 80185c8:	e0b6      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80185ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185cc:	889b      	ldrh	r3, [r3, #4]
 80185ce:	b29a      	uxth	r2, r3
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	88db      	ldrh	r3, [r3, #6]
 80185d4:	b29b      	uxth	r3, r3
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d202      	bcs.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185da:	f04f 33ff 	mov.w	r3, #4294967295
 80185de:	e0ab      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80185e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d009      	beq.n	80185fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80185e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e8:	88db      	ldrh	r3, [r3, #6]
 80185ea:	b29a      	uxth	r2, r3
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	889b      	ldrh	r3, [r3, #4]
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d001      	beq.n	80185fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80185f6:	2300      	movs	r3, #0
 80185f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018606:	2b00      	cmp	r3, #0
 8018608:	d193      	bne.n	8018532 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801860a:	e000      	b.n	801860e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801860c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018610:	2b00      	cmp	r3, #0
 8018612:	d12d      	bne.n	8018670 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018616:	2b00      	cmp	r3, #0
 8018618:	d01c      	beq.n	8018654 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801861c:	88db      	ldrh	r3, [r3, #6]
 801861e:	b29a      	uxth	r2, r3
 8018620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018622:	889b      	ldrh	r3, [r3, #4]
 8018624:	b29b      	uxth	r3, r3
 8018626:	429a      	cmp	r2, r3
 8018628:	d906      	bls.n	8018638 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801862a:	4b45      	ldr	r3, [pc, #276]	@ (8018740 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801862c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018630:	4944      	ldr	r1, [pc, #272]	@ (8018744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018632:	4845      	ldr	r0, [pc, #276]	@ (8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018634:	f001 fb8e 	bl	8019d54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801863a:	68ba      	ldr	r2, [r7, #8]
 801863c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018640:	88db      	ldrh	r3, [r3, #6]
 8018642:	b29a      	uxth	r2, r3
 8018644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018646:	889b      	ldrh	r3, [r3, #4]
 8018648:	b29b      	uxth	r3, r3
 801864a:	429a      	cmp	r2, r3
 801864c:	d010      	beq.n	8018670 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801864e:	2300      	movs	r3, #0
 8018650:	623b      	str	r3, [r7, #32]
 8018652:	e00d      	b.n	8018670 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d006      	beq.n	801866a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801865c:	4b38      	ldr	r3, [pc, #224]	@ (8018740 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801865e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018662:	493a      	ldr	r1, [pc, #232]	@ (801874c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018664:	4838      	ldr	r0, [pc, #224]	@ (8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018666:	f001 fb75 	bl	8019d54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	68ba      	ldr	r2, [r7, #8]
 801866e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d105      	bne.n	8018682 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	7f9b      	ldrb	r3, [r3, #30]
 801867a:	f003 0301 	and.w	r3, r3, #1
 801867e:	2b00      	cmp	r3, #0
 8018680:	d059      	beq.n	8018736 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018682:	6a3b      	ldr	r3, [r7, #32]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d04f      	beq.n	8018728 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d006      	beq.n	801869e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	685b      	ldr	r3, [r3, #4]
 8018694:	685b      	ldr	r3, [r3, #4]
 8018696:	889b      	ldrh	r3, [r3, #4]
 8018698:	b29b      	uxth	r3, r3
 801869a:	2b00      	cmp	r3, #0
 801869c:	d002      	beq.n	80186a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801869e:	2300      	movs	r3, #0
 80186a0:	623b      	str	r3, [r7, #32]
 80186a2:	e041      	b.n	8018728 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80186a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186a6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80186a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80186ae:	e012      	b.n	80186d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80186b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80186b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186b8:	88db      	ldrh	r3, [r3, #6]
 80186ba:	b29a      	uxth	r2, r3
 80186bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186be:	889b      	ldrh	r3, [r3, #4]
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d002      	beq.n	80186cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80186c6:	2300      	movs	r3, #0
 80186c8:	623b      	str	r3, [r7, #32]
            break;
 80186ca:	e007      	b.n	80186dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80186cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ce:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80186d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80186d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d1e9      	bne.n	80186b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80186dc:	6a3b      	ldr	r3, [r7, #32]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d022      	beq.n	8018728 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d106      	bne.n	80186f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80186ea:	4b15      	ldr	r3, [pc, #84]	@ (8018740 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186ec:	f240 12df 	movw	r2, #479	@ 0x1df
 80186f0:	4917      	ldr	r1, [pc, #92]	@ (8018750 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80186f2:	4815      	ldr	r0, [pc, #84]	@ (8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186f4:	f001 fb2e 	bl	8019d54 <iprintf>
          LWIP_ASSERT("sanity check",
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	685b      	ldr	r3, [r3, #4]
 80186fc:	685b      	ldr	r3, [r3, #4]
 80186fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018700:	429a      	cmp	r2, r3
 8018702:	d106      	bne.n	8018712 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018704:	4b0e      	ldr	r3, [pc, #56]	@ (8018740 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018706:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801870a:	4911      	ldr	r1, [pc, #68]	@ (8018750 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801870c:	480e      	ldr	r0, [pc, #56]	@ (8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801870e:	f001 fb21 	bl	8019d54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d006      	beq.n	8018728 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801871a:	4b09      	ldr	r3, [pc, #36]	@ (8018740 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801871c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018720:	490c      	ldr	r1, [pc, #48]	@ (8018754 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018722:	4809      	ldr	r0, [pc, #36]	@ (8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018724:	f001 fb16 	bl	8019d54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018728:	6a3b      	ldr	r3, [r7, #32]
 801872a:	2b00      	cmp	r3, #0
 801872c:	bf14      	ite	ne
 801872e:	2301      	movne	r3, #1
 8018730:	2300      	moveq	r3, #0
 8018732:	b2db      	uxtb	r3, r3
 8018734:	e000      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018736:	2300      	movs	r3, #0
}
 8018738:	4618      	mov	r0, r3
 801873a:	3730      	adds	r7, #48	@ 0x30
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	0801f614 	.word	0x0801f614
 8018744:	0801f6f8 	.word	0x0801f6f8
 8018748:	0801f65c 	.word	0x0801f65c
 801874c:	0801f718 	.word	0x0801f718
 8018750:	0801f750 	.word	0x0801f750
 8018754:	0801f760 	.word	0x0801f760

08018758 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b08e      	sub	sp, #56	@ 0x38
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	685b      	ldr	r3, [r3, #4]
 8018764:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	f003 030f 	and.w	r3, r3, #15
 801876e:	b2db      	uxtb	r3, r3
 8018770:	009b      	lsls	r3, r3, #2
 8018772:	b2db      	uxtb	r3, r3
 8018774:	2b14      	cmp	r3, #20
 8018776:	f040 8171 	bne.w	8018a5c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801877c:	88db      	ldrh	r3, [r3, #6]
 801877e:	b29b      	uxth	r3, r3
 8018780:	4618      	mov	r0, r3
 8018782:	f7f5 fdf1 	bl	800e368 <lwip_htons>
 8018786:	4603      	mov	r3, r0
 8018788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801878c:	b29b      	uxth	r3, r3
 801878e:	00db      	lsls	r3, r3, #3
 8018790:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018794:	885b      	ldrh	r3, [r3, #2]
 8018796:	b29b      	uxth	r3, r3
 8018798:	4618      	mov	r0, r3
 801879a:	f7f5 fde5 	bl	800e368 <lwip_htons>
 801879e:	4603      	mov	r3, r0
 80187a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80187a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187a4:	781b      	ldrb	r3, [r3, #0]
 80187a6:	f003 030f 	and.w	r3, r3, #15
 80187aa:	b2db      	uxtb	r3, r3
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80187b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80187ba:	429a      	cmp	r2, r3
 80187bc:	f0c0 8150 	bcc.w	8018a60 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80187c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80187c8:	1ad3      	subs	r3, r2, r3
 80187ca:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	f7f7 fa05 	bl	800fbdc <pbuf_clen>
 80187d2:	4603      	mov	r3, r0
 80187d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80187d6:	4b8c      	ldr	r3, [pc, #560]	@ (8018a08 <ip4_reass+0x2b0>)
 80187d8:	881b      	ldrh	r3, [r3, #0]
 80187da:	461a      	mov	r2, r3
 80187dc:	8c3b      	ldrh	r3, [r7, #32]
 80187de:	4413      	add	r3, r2
 80187e0:	2b0a      	cmp	r3, #10
 80187e2:	dd10      	ble.n	8018806 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80187e4:	8c3b      	ldrh	r3, [r7, #32]
 80187e6:	4619      	mov	r1, r3
 80187e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187ea:	f7ff fd81 	bl	80182f0 <ip_reass_remove_oldest_datagram>
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f000 8137 	beq.w	8018a64 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80187f6:	4b84      	ldr	r3, [pc, #528]	@ (8018a08 <ip4_reass+0x2b0>)
 80187f8:	881b      	ldrh	r3, [r3, #0]
 80187fa:	461a      	mov	r2, r3
 80187fc:	8c3b      	ldrh	r3, [r7, #32]
 80187fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018800:	2b0a      	cmp	r3, #10
 8018802:	f300 812f 	bgt.w	8018a64 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018806:	4b81      	ldr	r3, [pc, #516]	@ (8018a0c <ip4_reass+0x2b4>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	633b      	str	r3, [r7, #48]	@ 0x30
 801880c:	e015      	b.n	801883a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018810:	695a      	ldr	r2, [r3, #20]
 8018812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018814:	68db      	ldr	r3, [r3, #12]
 8018816:	429a      	cmp	r2, r3
 8018818:	d10c      	bne.n	8018834 <ip4_reass+0xdc>
 801881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801881c:	699a      	ldr	r2, [r3, #24]
 801881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018820:	691b      	ldr	r3, [r3, #16]
 8018822:	429a      	cmp	r2, r3
 8018824:	d106      	bne.n	8018834 <ip4_reass+0xdc>
 8018826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018828:	899a      	ldrh	r2, [r3, #12]
 801882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801882c:	889b      	ldrh	r3, [r3, #4]
 801882e:	b29b      	uxth	r3, r3
 8018830:	429a      	cmp	r2, r3
 8018832:	d006      	beq.n	8018842 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	633b      	str	r3, [r7, #48]	@ 0x30
 801883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801883c:	2b00      	cmp	r3, #0
 801883e:	d1e6      	bne.n	801880e <ip4_reass+0xb6>
 8018840:	e000      	b.n	8018844 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018842:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018846:	2b00      	cmp	r3, #0
 8018848:	d109      	bne.n	801885e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801884a:	8c3b      	ldrh	r3, [r7, #32]
 801884c:	4619      	mov	r1, r3
 801884e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018850:	f7ff fdb0 	bl	80183b4 <ip_reass_enqueue_new_datagram>
 8018854:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018858:	2b00      	cmp	r3, #0
 801885a:	d11c      	bne.n	8018896 <ip4_reass+0x13e>
      goto nullreturn;
 801885c:	e105      	b.n	8018a6a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018860:	88db      	ldrh	r3, [r3, #6]
 8018862:	b29b      	uxth	r3, r3
 8018864:	4618      	mov	r0, r3
 8018866:	f7f5 fd7f 	bl	800e368 <lwip_htons>
 801886a:	4603      	mov	r3, r0
 801886c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018870:	2b00      	cmp	r3, #0
 8018872:	d110      	bne.n	8018896 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018876:	89db      	ldrh	r3, [r3, #14]
 8018878:	4618      	mov	r0, r3
 801887a:	f7f5 fd75 	bl	800e368 <lwip_htons>
 801887e:	4603      	mov	r3, r0
 8018880:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018884:	2b00      	cmp	r3, #0
 8018886:	d006      	beq.n	8018896 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801888a:	3308      	adds	r3, #8
 801888c:	2214      	movs	r2, #20
 801888e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018890:	4618      	mov	r0, r3
 8018892:	f001 fcde 	bl	801a252 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018898:	88db      	ldrh	r3, [r3, #6]
 801889a:	b29b      	uxth	r3, r3
 801889c:	f003 0320 	and.w	r3, r3, #32
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	bf0c      	ite	eq
 80188a4:	2301      	moveq	r3, #1
 80188a6:	2300      	movne	r3, #0
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d00e      	beq.n	80188d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80188b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80188b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188b6:	4413      	add	r3, r2
 80188b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80188ba:	8b7a      	ldrh	r2, [r7, #26]
 80188bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80188be:	429a      	cmp	r2, r3
 80188c0:	f0c0 80a0 	bcc.w	8018a04 <ip4_reass+0x2ac>
 80188c4:	8b7b      	ldrh	r3, [r7, #26]
 80188c6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80188ca:	4293      	cmp	r3, r2
 80188cc:	f200 809a 	bhi.w	8018a04 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80188d0:	69fa      	ldr	r2, [r7, #28]
 80188d2:	6879      	ldr	r1, [r7, #4]
 80188d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80188d6:	f7ff fdd5 	bl	8018484 <ip_reass_chain_frag_into_datagram_and_validate>
 80188da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188e2:	f000 809b 	beq.w	8018a1c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80188e6:	4b48      	ldr	r3, [pc, #288]	@ (8018a08 <ip4_reass+0x2b0>)
 80188e8:	881a      	ldrh	r2, [r3, #0]
 80188ea:	8c3b      	ldrh	r3, [r7, #32]
 80188ec:	4413      	add	r3, r2
 80188ee:	b29a      	uxth	r2, r3
 80188f0:	4b45      	ldr	r3, [pc, #276]	@ (8018a08 <ip4_reass+0x2b0>)
 80188f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80188f4:	69fb      	ldr	r3, [r7, #28]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d00d      	beq.n	8018916 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80188fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80188fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188fe:	4413      	add	r3, r2
 8018900:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018904:	8a7a      	ldrh	r2, [r7, #18]
 8018906:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801890a:	7f9b      	ldrb	r3, [r3, #30]
 801890c:	f043 0301 	orr.w	r3, r3, #1
 8018910:	b2da      	uxtb	r2, r3
 8018912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018914:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	2b01      	cmp	r3, #1
 801891a:	d171      	bne.n	8018a00 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801891e:	8b9b      	ldrh	r3, [r3, #28]
 8018920:	3314      	adds	r3, #20
 8018922:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018930:	685b      	ldr	r3, [r3, #4]
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018938:	3308      	adds	r3, #8
 801893a:	2214      	movs	r2, #20
 801893c:	4619      	mov	r1, r3
 801893e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018940:	f001 fc87 	bl	801a252 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018944:	8a3b      	ldrh	r3, [r7, #16]
 8018946:	4618      	mov	r0, r3
 8018948:	f7f5 fd0e 	bl	800e368 <lwip_htons>
 801894c:	4603      	mov	r3, r0
 801894e:	461a      	mov	r2, r3
 8018950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018952:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018956:	2200      	movs	r2, #0
 8018958:	719a      	strb	r2, [r3, #6]
 801895a:	2200      	movs	r2, #0
 801895c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018960:	2200      	movs	r2, #0
 8018962:	729a      	strb	r2, [r3, #10]
 8018964:	2200      	movs	r2, #0
 8018966:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801896a:	685b      	ldr	r3, [r3, #4]
 801896c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801896e:	e00d      	b.n	801898c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018972:	685b      	ldr	r3, [r3, #4]
 8018974:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018976:	2114      	movs	r1, #20
 8018978:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801897a:	f7f7 f81b 	bl	800f9b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801897e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f7f7 f96b 	bl	800fc5c <pbuf_cat>
      r = iprh->next_pbuf;
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801898e:	2b00      	cmp	r3, #0
 8018990:	d1ee      	bne.n	8018970 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018992:	4b1e      	ldr	r3, [pc, #120]	@ (8018a0c <ip4_reass+0x2b4>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018998:	429a      	cmp	r2, r3
 801899a:	d102      	bne.n	80189a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801899c:	2300      	movs	r3, #0
 801899e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80189a0:	e010      	b.n	80189c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80189a2:	4b1a      	ldr	r3, [pc, #104]	@ (8018a0c <ip4_reass+0x2b4>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80189a8:	e007      	b.n	80189ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80189aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d006      	beq.n	80189c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80189b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80189ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d1f4      	bne.n	80189aa <ip4_reass+0x252>
 80189c0:	e000      	b.n	80189c4 <ip4_reass+0x26c>
          break;
 80189c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80189c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80189c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189c8:	f7ff fd2e 	bl	8018428 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80189cc:	6878      	ldr	r0, [r7, #4]
 80189ce:	f7f7 f905 	bl	800fbdc <pbuf_clen>
 80189d2:	4603      	mov	r3, r0
 80189d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80189d6:	4b0c      	ldr	r3, [pc, #48]	@ (8018a08 <ip4_reass+0x2b0>)
 80189d8:	881b      	ldrh	r3, [r3, #0]
 80189da:	8c3a      	ldrh	r2, [r7, #32]
 80189dc:	429a      	cmp	r2, r3
 80189de:	d906      	bls.n	80189ee <ip4_reass+0x296>
 80189e0:	4b0b      	ldr	r3, [pc, #44]	@ (8018a10 <ip4_reass+0x2b8>)
 80189e2:	f240 229b 	movw	r2, #667	@ 0x29b
 80189e6:	490b      	ldr	r1, [pc, #44]	@ (8018a14 <ip4_reass+0x2bc>)
 80189e8:	480b      	ldr	r0, [pc, #44]	@ (8018a18 <ip4_reass+0x2c0>)
 80189ea:	f001 f9b3 	bl	8019d54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80189ee:	4b06      	ldr	r3, [pc, #24]	@ (8018a08 <ip4_reass+0x2b0>)
 80189f0:	881a      	ldrh	r2, [r3, #0]
 80189f2:	8c3b      	ldrh	r3, [r7, #32]
 80189f4:	1ad3      	subs	r3, r2, r3
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	4b03      	ldr	r3, [pc, #12]	@ (8018a08 <ip4_reass+0x2b0>)
 80189fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	e038      	b.n	8018a72 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018a00:	2300      	movs	r3, #0
 8018a02:	e036      	b.n	8018a72 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018a04:	bf00      	nop
 8018a06:	e00a      	b.n	8018a1e <ip4_reass+0x2c6>
 8018a08:	20011ed4 	.word	0x20011ed4
 8018a0c:	20011ed0 	.word	0x20011ed0
 8018a10:	0801f614 	.word	0x0801f614
 8018a14:	0801f784 	.word	0x0801f784
 8018a18:	0801f65c 	.word	0x0801f65c
    goto nullreturn_ipr;
 8018a1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d106      	bne.n	8018a32 <ip4_reass+0x2da>
 8018a24:	4b15      	ldr	r3, [pc, #84]	@ (8018a7c <ip4_reass+0x324>)
 8018a26:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018a2a:	4915      	ldr	r1, [pc, #84]	@ (8018a80 <ip4_reass+0x328>)
 8018a2c:	4815      	ldr	r0, [pc, #84]	@ (8018a84 <ip4_reass+0x32c>)
 8018a2e:	f001 f991 	bl	8019d54 <iprintf>
  if (ipr->p == NULL) {
 8018a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d116      	bne.n	8018a68 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018a3a:	4b13      	ldr	r3, [pc, #76]	@ (8018a88 <ip4_reass+0x330>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d006      	beq.n	8018a52 <ip4_reass+0x2fa>
 8018a44:	4b0d      	ldr	r3, [pc, #52]	@ (8018a7c <ip4_reass+0x324>)
 8018a46:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018a4a:	4910      	ldr	r1, [pc, #64]	@ (8018a8c <ip4_reass+0x334>)
 8018a4c:	480d      	ldr	r0, [pc, #52]	@ (8018a84 <ip4_reass+0x32c>)
 8018a4e:	f001 f981 	bl	8019d54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018a52:	2100      	movs	r1, #0
 8018a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018a56:	f7ff fce7 	bl	8018428 <ip_reass_dequeue_datagram>
 8018a5a:	e006      	b.n	8018a6a <ip4_reass+0x312>
    goto nullreturn;
 8018a5c:	bf00      	nop
 8018a5e:	e004      	b.n	8018a6a <ip4_reass+0x312>
    goto nullreturn;
 8018a60:	bf00      	nop
 8018a62:	e002      	b.n	8018a6a <ip4_reass+0x312>
      goto nullreturn;
 8018a64:	bf00      	nop
 8018a66:	e000      	b.n	8018a6a <ip4_reass+0x312>
  }

nullreturn:
 8018a68:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f7f7 f828 	bl	800fac0 <pbuf_free>
  return NULL;
 8018a70:	2300      	movs	r3, #0
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3738      	adds	r7, #56	@ 0x38
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	0801f614 	.word	0x0801f614
 8018a80:	0801f7a0 	.word	0x0801f7a0
 8018a84:	0801f65c 	.word	0x0801f65c
 8018a88:	20011ed0 	.word	0x20011ed0
 8018a8c:	0801f7ac 	.word	0x0801f7ac

08018a90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018a94:	2005      	movs	r0, #5
 8018a96:	f7f6 f91d 	bl	800ecd4 <memp_malloc>
 8018a9a:	4603      	mov	r3, r0
}
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	bd80      	pop	{r7, pc}

08018aa0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d106      	bne.n	8018abc <ip_frag_free_pbuf_custom_ref+0x1c>
 8018aae:	4b07      	ldr	r3, [pc, #28]	@ (8018acc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018ab0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018ab4:	4906      	ldr	r1, [pc, #24]	@ (8018ad0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018ab6:	4807      	ldr	r0, [pc, #28]	@ (8018ad4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018ab8:	f001 f94c 	bl	8019d54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018abc:	6879      	ldr	r1, [r7, #4]
 8018abe:	2005      	movs	r0, #5
 8018ac0:	f7f6 f95a 	bl	800ed78 <memp_free>
}
 8018ac4:	bf00      	nop
 8018ac6:	3708      	adds	r7, #8
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	bd80      	pop	{r7, pc}
 8018acc:	0801f614 	.word	0x0801f614
 8018ad0:	0801f7cc 	.word	0x0801f7cc
 8018ad4:	0801f65c 	.word	0x0801f65c

08018ad8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d106      	bne.n	8018af8 <ipfrag_free_pbuf_custom+0x20>
 8018aea:	4b11      	ldr	r3, [pc, #68]	@ (8018b30 <ipfrag_free_pbuf_custom+0x58>)
 8018aec:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018af0:	4910      	ldr	r1, [pc, #64]	@ (8018b34 <ipfrag_free_pbuf_custom+0x5c>)
 8018af2:	4811      	ldr	r0, [pc, #68]	@ (8018b38 <ipfrag_free_pbuf_custom+0x60>)
 8018af4:	f001 f92e 	bl	8019d54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018af8:	68fa      	ldr	r2, [r7, #12]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	429a      	cmp	r2, r3
 8018afe:	d006      	beq.n	8018b0e <ipfrag_free_pbuf_custom+0x36>
 8018b00:	4b0b      	ldr	r3, [pc, #44]	@ (8018b30 <ipfrag_free_pbuf_custom+0x58>)
 8018b02:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018b06:	490d      	ldr	r1, [pc, #52]	@ (8018b3c <ipfrag_free_pbuf_custom+0x64>)
 8018b08:	480b      	ldr	r0, [pc, #44]	@ (8018b38 <ipfrag_free_pbuf_custom+0x60>)
 8018b0a:	f001 f923 	bl	8019d54 <iprintf>
  if (pcr->original != NULL) {
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	695b      	ldr	r3, [r3, #20]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d004      	beq.n	8018b20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	695b      	ldr	r3, [r3, #20]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7f6 ffd0 	bl	800fac0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018b20:	68f8      	ldr	r0, [r7, #12]
 8018b22:	f7ff ffbd 	bl	8018aa0 <ip_frag_free_pbuf_custom_ref>
}
 8018b26:	bf00      	nop
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	bf00      	nop
 8018b30:	0801f614 	.word	0x0801f614
 8018b34:	0801f7d8 	.word	0x0801f7d8
 8018b38:	0801f65c 	.word	0x0801f65c
 8018b3c:	0801f7e4 	.word	0x0801f7e4

08018b40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b094      	sub	sp, #80	@ 0x50
 8018b44:	af02      	add	r7, sp, #8
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018b56:	3b14      	subs	r3, #20
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	da00      	bge.n	8018b5e <ip4_frag+0x1e>
 8018b5c:	3307      	adds	r3, #7
 8018b5e:	10db      	asrs	r3, r3, #3
 8018b60:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018b62:	2314      	movs	r3, #20
 8018b64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	f003 030f 	and.w	r3, r3, #15
 8018b78:	b2db      	uxtb	r3, r3
 8018b7a:	009b      	lsls	r3, r3, #2
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	2b14      	cmp	r3, #20
 8018b80:	d002      	beq.n	8018b88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018b82:	f06f 0305 	mvn.w	r3, #5
 8018b86:	e110      	b.n	8018daa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	895b      	ldrh	r3, [r3, #10]
 8018b8c:	2b13      	cmp	r3, #19
 8018b8e:	d809      	bhi.n	8018ba4 <ip4_frag+0x64>
 8018b90:	4b88      	ldr	r3, [pc, #544]	@ (8018db4 <ip4_frag+0x274>)
 8018b92:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018b96:	4988      	ldr	r1, [pc, #544]	@ (8018db8 <ip4_frag+0x278>)
 8018b98:	4888      	ldr	r0, [pc, #544]	@ (8018dbc <ip4_frag+0x27c>)
 8018b9a:	f001 f8db 	bl	8019d54 <iprintf>
 8018b9e:	f06f 0305 	mvn.w	r3, #5
 8018ba2:	e102      	b.n	8018daa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ba6:	88db      	ldrh	r3, [r3, #6]
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7f5 fbdc 	bl	800e368 <lwip_htons>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018bb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018bbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	891b      	ldrh	r3, [r3, #8]
 8018bca:	3b14      	subs	r3, #20
 8018bcc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018bd0:	e0e1      	b.n	8018d96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018bd2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018bd4:	00db      	lsls	r3, r3, #3
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	bf28      	it	cs
 8018be0:	4613      	movcs	r3, r2
 8018be2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018be4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018be8:	2114      	movs	r1, #20
 8018bea:	200e      	movs	r0, #14
 8018bec:	f7f6 fc84 	bl	800f4f8 <pbuf_alloc>
 8018bf0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f000 80d5 	beq.w	8018da4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bfc:	895b      	ldrh	r3, [r3, #10]
 8018bfe:	2b13      	cmp	r3, #19
 8018c00:	d806      	bhi.n	8018c10 <ip4_frag+0xd0>
 8018c02:	4b6c      	ldr	r3, [pc, #432]	@ (8018db4 <ip4_frag+0x274>)
 8018c04:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018c08:	496d      	ldr	r1, [pc, #436]	@ (8018dc0 <ip4_frag+0x280>)
 8018c0a:	486c      	ldr	r0, [pc, #432]	@ (8018dbc <ip4_frag+0x27c>)
 8018c0c:	f001 f8a2 	bl	8019d54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	2214      	movs	r2, #20
 8018c16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f001 fb1a 	bl	801a252 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c20:	685b      	ldr	r3, [r3, #4]
 8018c22:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018c24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018c26:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018c2a:	e064      	b.n	8018cf6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	895a      	ldrh	r2, [r3, #10]
 8018c30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c32:	1ad3      	subs	r3, r2, r3
 8018c34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	895b      	ldrh	r3, [r3, #10]
 8018c3a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d906      	bls.n	8018c4e <ip4_frag+0x10e>
 8018c40:	4b5c      	ldr	r3, [pc, #368]	@ (8018db4 <ip4_frag+0x274>)
 8018c42:	f240 322d 	movw	r2, #813	@ 0x32d
 8018c46:	495f      	ldr	r1, [pc, #380]	@ (8018dc4 <ip4_frag+0x284>)
 8018c48:	485c      	ldr	r0, [pc, #368]	@ (8018dbc <ip4_frag+0x27c>)
 8018c4a:	f001 f883 	bl	8019d54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018c4e:	8bfa      	ldrh	r2, [r7, #30]
 8018c50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c54:	4293      	cmp	r3, r2
 8018c56:	bf28      	it	cs
 8018c58:	4613      	movcs	r3, r2
 8018c5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018c5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d105      	bne.n	8018c72 <ip4_frag+0x132>
        poff = 0;
 8018c66:	2300      	movs	r3, #0
 8018c68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	60fb      	str	r3, [r7, #12]
        continue;
 8018c70:	e041      	b.n	8018cf6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018c72:	f7ff ff0d 	bl	8018a90 <ip_frag_alloc_pbuf_custom_ref>
 8018c76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018c78:	69bb      	ldr	r3, [r7, #24]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d103      	bne.n	8018c86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018c7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c80:	f7f6 ff1e 	bl	800fac0 <pbuf_free>
        goto memerr;
 8018c84:	e08f      	b.n	8018da6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018c86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018c8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c8e:	4413      	add	r3, r2
 8018c90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018c94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018c98:	9201      	str	r2, [sp, #4]
 8018c9a:	9300      	str	r3, [sp, #0]
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	2241      	movs	r2, #65	@ 0x41
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	f7f6 fd53 	bl	800f74c <pbuf_alloced_custom>
 8018ca6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d106      	bne.n	8018cbc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018cae:	69b8      	ldr	r0, [r7, #24]
 8018cb0:	f7ff fef6 	bl	8018aa0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018cb6:	f7f6 ff03 	bl	800fac0 <pbuf_free>
        goto memerr;
 8018cba:	e074      	b.n	8018da6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018cbc:	68f8      	ldr	r0, [r7, #12]
 8018cbe:	f7f6 ffa5 	bl	800fc0c <pbuf_ref>
      pcr->original = p;
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	68fa      	ldr	r2, [r7, #12]
 8018cc6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018cc8:	69bb      	ldr	r3, [r7, #24]
 8018cca:	4a3f      	ldr	r2, [pc, #252]	@ (8018dc8 <ip4_frag+0x288>)
 8018ccc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018cce:	6979      	ldr	r1, [r7, #20]
 8018cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018cd2:	f7f6 ffc3 	bl	800fc5c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018cd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018cda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018cde:	1ad3      	subs	r3, r2, r3
 8018ce0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018ce4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d004      	beq.n	8018cf6 <ip4_frag+0x1b6>
        poff = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018cf6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d196      	bne.n	8018c2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018cfe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018d00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018d04:	4413      	add	r3, r2
 8018d06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018d0c:	f1a3 0213 	sub.w	r2, r3, #19
 8018d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d14:	429a      	cmp	r2, r3
 8018d16:	bfcc      	ite	gt
 8018d18:	2301      	movgt	r3, #1
 8018d1a:	2300      	movle	r3, #0
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018d2a:	6a3b      	ldr	r3, [r7, #32]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d002      	beq.n	8018d36 <ip4_frag+0x1f6>
 8018d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d003      	beq.n	8018d3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018d36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018d38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018d3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018d3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7f5 fb11 	bl	800e368 <lwip_htons>
 8018d46:	4603      	mov	r3, r0
 8018d48:	461a      	mov	r2, r3
 8018d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018d4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018d50:	3314      	adds	r3, #20
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7f5 fb07 	bl	800e368 <lwip_htons>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d64:	2200      	movs	r2, #0
 8018d66:	729a      	strb	r2, [r3, #10]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	695b      	ldr	r3, [r3, #20]
 8018d70:	687a      	ldr	r2, [r7, #4]
 8018d72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d74:	68b8      	ldr	r0, [r7, #8]
 8018d76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018d7a:	f7f6 fea1 	bl	800fac0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018d7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018d84:	1ad3      	subs	r3, r2, r3
 8018d86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018d8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018d8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018d90:	4413      	add	r3, r2
 8018d92:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018d96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	f47f af19 	bne.w	8018bd2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018da0:	2300      	movs	r3, #0
 8018da2:	e002      	b.n	8018daa <ip4_frag+0x26a>
      goto memerr;
 8018da4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3748      	adds	r7, #72	@ 0x48
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	0801f614 	.word	0x0801f614
 8018db8:	0801f7f0 	.word	0x0801f7f0
 8018dbc:	0801f65c 	.word	0x0801f65c
 8018dc0:	0801f80c 	.word	0x0801f80c
 8018dc4:	0801f82c 	.word	0x0801f82c
 8018dc8:	08018ad9 	.word	0x08018ad9

08018dcc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b086      	sub	sp, #24
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018dd6:	230e      	movs	r3, #14
 8018dd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	895b      	ldrh	r3, [r3, #10]
 8018dde:	2b0e      	cmp	r3, #14
 8018de0:	d96e      	bls.n	8018ec0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	7bdb      	ldrb	r3, [r3, #15]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d106      	bne.n	8018df8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018df0:	3301      	adds	r3, #1
 8018df2:	b2da      	uxtb	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	685b      	ldr	r3, [r3, #4]
 8018dfc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018dfe:	693b      	ldr	r3, [r7, #16]
 8018e00:	7b1a      	ldrb	r2, [r3, #12]
 8018e02:	7b5b      	ldrb	r3, [r3, #13]
 8018e04:	021b      	lsls	r3, r3, #8
 8018e06:	4313      	orrs	r3, r2
 8018e08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018e0a:	693b      	ldr	r3, [r7, #16]
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	f003 0301 	and.w	r3, r3, #1
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d023      	beq.n	8018e5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	2b01      	cmp	r3, #1
 8018e1c:	d10f      	bne.n	8018e3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018e1e:	693b      	ldr	r3, [r7, #16]
 8018e20:	785b      	ldrb	r3, [r3, #1]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d11b      	bne.n	8018e5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018e26:	693b      	ldr	r3, [r7, #16]
 8018e28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018e2a:	2b5e      	cmp	r3, #94	@ 0x5e
 8018e2c:	d117      	bne.n	8018e5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	7b5b      	ldrb	r3, [r3, #13]
 8018e32:	f043 0310 	orr.w	r3, r3, #16
 8018e36:	b2da      	uxtb	r2, r3
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	735a      	strb	r2, [r3, #13]
 8018e3c:	e00f      	b.n	8018e5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018e3e:	693b      	ldr	r3, [r7, #16]
 8018e40:	2206      	movs	r2, #6
 8018e42:	4928      	ldr	r1, [pc, #160]	@ (8018ee4 <ethernet_input+0x118>)
 8018e44:	4618      	mov	r0, r3
 8018e46:	f001 f921 	bl	801a08c <memcmp>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d106      	bne.n	8018e5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	7b5b      	ldrb	r3, [r3, #13]
 8018e54:	f043 0308 	orr.w	r3, r3, #8
 8018e58:	b2da      	uxtb	r2, r3
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018e5e:	89fb      	ldrh	r3, [r7, #14]
 8018e60:	2b08      	cmp	r3, #8
 8018e62:	d003      	beq.n	8018e6c <ethernet_input+0xa0>
 8018e64:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018e68:	d014      	beq.n	8018e94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018e6a:	e032      	b.n	8018ed2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018e72:	f003 0308 	and.w	r3, r3, #8
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d024      	beq.n	8018ec4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018e7a:	8afb      	ldrh	r3, [r7, #22]
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f7f6 fd98 	bl	800f9b4 <pbuf_remove_header>
 8018e84:	4603      	mov	r3, r0
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d11e      	bne.n	8018ec8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018e8a:	6839      	ldr	r1, [r7, #0]
 8018e8c:	6878      	ldr	r0, [r7, #4]
 8018e8e:	f7fe ff21 	bl	8017cd4 <ip4_input>
      break;
 8018e92:	e013      	b.n	8018ebc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018e94:	683b      	ldr	r3, [r7, #0]
 8018e96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018e9a:	f003 0308 	and.w	r3, r3, #8
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d014      	beq.n	8018ecc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018ea2:	8afb      	ldrh	r3, [r7, #22]
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	6878      	ldr	r0, [r7, #4]
 8018ea8:	f7f6 fd84 	bl	800f9b4 <pbuf_remove_header>
 8018eac:	4603      	mov	r3, r0
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d10e      	bne.n	8018ed0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018eb2:	6839      	ldr	r1, [r7, #0]
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f7fe f8c1 	bl	801703c <etharp_input>
      break;
 8018eba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	e00c      	b.n	8018eda <ethernet_input+0x10e>
    goto free_and_return;
 8018ec0:	bf00      	nop
 8018ec2:	e006      	b.n	8018ed2 <ethernet_input+0x106>
        goto free_and_return;
 8018ec4:	bf00      	nop
 8018ec6:	e004      	b.n	8018ed2 <ethernet_input+0x106>
        goto free_and_return;
 8018ec8:	bf00      	nop
 8018eca:	e002      	b.n	8018ed2 <ethernet_input+0x106>
        goto free_and_return;
 8018ecc:	bf00      	nop
 8018ece:	e000      	b.n	8018ed2 <ethernet_input+0x106>
        goto free_and_return;
 8018ed0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7f6 fdf4 	bl	800fac0 <pbuf_free>
  return ERR_OK;
 8018ed8:	2300      	movs	r3, #0
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3718      	adds	r7, #24
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	0801fa00 	.word	0x0801fa00

08018ee8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b086      	sub	sp, #24
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	607a      	str	r2, [r7, #4]
 8018ef4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018ef6:	8c3b      	ldrh	r3, [r7, #32]
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7f5 fa35 	bl	800e368 <lwip_htons>
 8018efe:	4603      	mov	r3, r0
 8018f00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018f02:	210e      	movs	r1, #14
 8018f04:	68b8      	ldr	r0, [r7, #8]
 8018f06:	f7f6 fd45 	bl	800f994 <pbuf_add_header>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d125      	bne.n	8018f5c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	685b      	ldr	r3, [r3, #4]
 8018f14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	8afa      	ldrh	r2, [r7, #22]
 8018f1a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	2206      	movs	r2, #6
 8018f20:	6839      	ldr	r1, [r7, #0]
 8018f22:	4618      	mov	r0, r3
 8018f24:	f001 f995 	bl	801a252 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	3306      	adds	r3, #6
 8018f2c:	2206      	movs	r2, #6
 8018f2e:	6879      	ldr	r1, [r7, #4]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f001 f98e 	bl	801a252 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018f3c:	2b06      	cmp	r3, #6
 8018f3e:	d006      	beq.n	8018f4e <ethernet_output+0x66>
 8018f40:	4b0a      	ldr	r3, [pc, #40]	@ (8018f6c <ethernet_output+0x84>)
 8018f42:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018f46:	490a      	ldr	r1, [pc, #40]	@ (8018f70 <ethernet_output+0x88>)
 8018f48:	480a      	ldr	r0, [pc, #40]	@ (8018f74 <ethernet_output+0x8c>)
 8018f4a:	f000 ff03 	bl	8019d54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	699b      	ldr	r3, [r3, #24]
 8018f52:	68b9      	ldr	r1, [r7, #8]
 8018f54:	68f8      	ldr	r0, [r7, #12]
 8018f56:	4798      	blx	r3
 8018f58:	4603      	mov	r3, r0
 8018f5a:	e002      	b.n	8018f62 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018f5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018f5e:	f06f 0301 	mvn.w	r3, #1
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3718      	adds	r7, #24
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	0801f83c 	.word	0x0801f83c
 8018f70:	0801f874 	.word	0x0801f874
 8018f74:	0801f8a8 	.word	0x0801f8a8

08018f78 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b082      	sub	sp, #8
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
 8018f80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	2200      	movs	r2, #0
 8018f86:	2104      	movs	r1, #4
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f7ee fdcd 	bl	8007b28 <osMessageQueueNew>
 8018f8e:	4602      	mov	r2, r0
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d102      	bne.n	8018fa2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018fa0:	e000      	b.n	8018fa4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018fa2:	2300      	movs	r3, #0
}
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3708      	adds	r7, #8
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}

08018fac <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7ee ff21 	bl	8007e00 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7ee ff4e 	bl	8007e64 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018fc8:	bf00      	nop
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b084      	sub	sp, #16
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6818      	ldr	r0, [r3, #0]
 8018fde:	4639      	mov	r1, r7
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	f7ee fe26 	bl	8007c34 <osMessageQueuePut>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d102      	bne.n	8018ff4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018fee:	2300      	movs	r3, #0
 8018ff0:	73fb      	strb	r3, [r7, #15]
 8018ff2:	e001      	b.n	8018ff8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018ff4:	23ff      	movs	r3, #255	@ 0xff
 8018ff6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	3710      	adds	r7, #16
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b086      	sub	sp, #24
 8019008:	af00      	add	r7, sp, #0
 801900a:	60f8      	str	r0, [r7, #12]
 801900c:	60b9      	str	r1, [r7, #8]
 801900e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019010:	f7ee f9b6 	bl	8007380 <osKernelGetTickCount>
 8019014:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d013      	beq.n	8019044 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	6818      	ldr	r0, [r3, #0]
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2200      	movs	r2, #0
 8019024:	68b9      	ldr	r1, [r7, #8]
 8019026:	f7ee fe79 	bl	8007d1c <osMessageQueueGet>
 801902a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801902c:	693b      	ldr	r3, [r7, #16]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d105      	bne.n	801903e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019032:	f7ee f9a5 	bl	8007380 <osKernelGetTickCount>
 8019036:	4602      	mov	r2, r0
 8019038:	697b      	ldr	r3, [r7, #20]
 801903a:	1ad3      	subs	r3, r2, r3
 801903c:	e00f      	b.n	801905e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801903e:	f04f 33ff 	mov.w	r3, #4294967295
 8019042:	e00c      	b.n	801905e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	6818      	ldr	r0, [r3, #0]
 8019048:	f04f 33ff 	mov.w	r3, #4294967295
 801904c:	2200      	movs	r2, #0
 801904e:	68b9      	ldr	r1, [r7, #8]
 8019050:	f7ee fe64 	bl	8007d1c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019054:	f7ee f994 	bl	8007380 <osKernelGetTickCount>
 8019058:	4602      	mov	r2, r0
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801905e:	4618      	mov	r0, r3
 8019060:	3718      	adds	r7, #24
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}

08019066 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019066:	b580      	push	{r7, lr}
 8019068:	b082      	sub	sp, #8
 801906a:	af00      	add	r7, sp, #0
 801906c:	6078      	str	r0, [r7, #4]
 801906e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6818      	ldr	r0, [r3, #0]
 8019074:	2300      	movs	r3, #0
 8019076:	2200      	movs	r2, #0
 8019078:	6839      	ldr	r1, [r7, #0]
 801907a:	f7ee fe4f 	bl	8007d1c <osMessageQueueGet>
 801907e:	4603      	mov	r3, r0
 8019080:	2b00      	cmp	r3, #0
 8019082:	d101      	bne.n	8019088 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019084:	2300      	movs	r3, #0
 8019086:	e001      	b.n	801908c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019088:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801908c:	4618      	mov	r0, r3
 801908e:	3708      	adds	r7, #8
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}

08019094 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019094:	b480      	push	{r7}
 8019096:	b083      	sub	sp, #12
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d101      	bne.n	80190a8 <sys_mbox_valid+0x14>
    return 0;
 80190a4:	2300      	movs	r3, #0
 80190a6:	e000      	b.n	80190aa <sys_mbox_valid+0x16>
  else
    return 1;
 80190a8:	2301      	movs	r3, #1
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	370c      	adds	r7, #12
 80190ae:	46bd      	mov	sp, r7
 80190b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b4:	4770      	bx	lr

080190b6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80190b6:	b480      	push	{r7}
 80190b8:	b083      	sub	sp, #12
 80190ba:	af00      	add	r7, sp, #0
 80190bc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2200      	movs	r2, #0
 80190c2:	601a      	str	r2, [r3, #0]
}
 80190c4:	bf00      	nop
 80190c6:	370c      	adds	r7, #12
 80190c8:	46bd      	mov	sp, r7
 80190ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ce:	4770      	bx	lr

080190d0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b082      	sub	sp, #8
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
 80190d8:	460b      	mov	r3, r1
 80190da:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80190dc:	78fb      	ldrb	r3, [r7, #3]
 80190de:	2200      	movs	r2, #0
 80190e0:	4619      	mov	r1, r3
 80190e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80190e6:	f7ee fb8f 	bl	8007808 <osSemaphoreNew>
 80190ea:	4602      	mov	r2, r0
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d102      	bne.n	80190fe <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80190f8:	f04f 33ff 	mov.w	r3, #4294967295
 80190fc:	e009      	b.n	8019112 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80190fe:	78fb      	ldrb	r3, [r7, #3]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d105      	bne.n	8019110 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	2100      	movs	r1, #0
 801910a:	4618      	mov	r0, r3
 801910c:	f7ee fc18 	bl	8007940 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019110:	2300      	movs	r3, #0
}
 8019112:	4618      	mov	r0, r3
 8019114:	3708      	adds	r7, #8
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}

0801911a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801911a:	b580      	push	{r7, lr}
 801911c:	b084      	sub	sp, #16
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
 8019122:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8019124:	f7ee f92c 	bl	8007380 <osKernelGetTickCount>
 8019128:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d011      	beq.n	8019154 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	6839      	ldr	r1, [r7, #0]
 8019136:	4618      	mov	r0, r3
 8019138:	f7ee fc02 	bl	8007940 <osSemaphoreAcquire>
 801913c:	4603      	mov	r3, r0
 801913e:	2b00      	cmp	r3, #0
 8019140:	d105      	bne.n	801914e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8019142:	f7ee f91d 	bl	8007380 <osKernelGetTickCount>
 8019146:	4602      	mov	r2, r0
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	1ad3      	subs	r3, r2, r3
 801914c:	e012      	b.n	8019174 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801914e:	f04f 33ff 	mov.w	r3, #4294967295
 8019152:	e00f      	b.n	8019174 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019154:	bf00      	nop
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f04f 31ff 	mov.w	r1, #4294967295
 801915e:	4618      	mov	r0, r3
 8019160:	f7ee fbee 	bl	8007940 <osSemaphoreAcquire>
 8019164:	4603      	mov	r3, r0
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1f5      	bne.n	8019156 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801916a:	f7ee f909 	bl	8007380 <osKernelGetTickCount>
 801916e:	4602      	mov	r2, r0
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019174:	4618      	mov	r0, r3
 8019176:	3710      	adds	r7, #16
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}

0801917c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	4618      	mov	r0, r3
 801918a:	f7ee fc3f 	bl	8007a0c <osSemaphoreRelease>
}
 801918e:	bf00      	nop
 8019190:	3708      	adds	r7, #8
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}

08019196 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019196:	b580      	push	{r7, lr}
 8019198:	b082      	sub	sp, #8
 801919a:	af00      	add	r7, sp, #0
 801919c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7ee fc8a 	bl	8007abc <osSemaphoreDelete>
}
 80191a8:	bf00      	nop
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80191b0:	b480      	push	{r7}
 80191b2:	b083      	sub	sp, #12
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d101      	bne.n	80191c4 <sys_sem_valid+0x14>
    return 0;
 80191c0:	2300      	movs	r3, #0
 80191c2:	e000      	b.n	80191c6 <sys_sem_valid+0x16>
  else
    return 1;
 80191c4:	2301      	movs	r3, #1
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	370c      	adds	r7, #12
 80191ca:	46bd      	mov	sp, r7
 80191cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d0:	4770      	bx	lr

080191d2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80191d2:	b480      	push	{r7}
 80191d4:	b083      	sub	sp, #12
 80191d6:	af00      	add	r7, sp, #0
 80191d8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2200      	movs	r2, #0
 80191de:	601a      	str	r2, [r3, #0]
}
 80191e0:	bf00      	nop
 80191e2:	370c      	adds	r7, #12
 80191e4:	46bd      	mov	sp, r7
 80191e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ea:	4770      	bx	lr

080191ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80191f0:	2000      	movs	r0, #0
 80191f2:	f7ee f9c1 	bl	8007578 <osMutexNew>
 80191f6:	4603      	mov	r3, r0
 80191f8:	4a01      	ldr	r2, [pc, #4]	@ (8019200 <sys_init+0x14>)
 80191fa:	6013      	str	r3, [r2, #0]
#endif
}
 80191fc:	bf00      	nop
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	20011edc 	.word	0x20011edc

08019204 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019204:	b580      	push	{r7, lr}
 8019206:	b082      	sub	sp, #8
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801920c:	2000      	movs	r0, #0
 801920e:	f7ee f9b3 	bl	8007578 <osMutexNew>
 8019212:	4602      	mov	r2, r0
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d102      	bne.n	8019226 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019220:	f04f 33ff 	mov.w	r3, #4294967295
 8019224:	e000      	b.n	8019228 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019226:	2300      	movs	r3, #0
}
 8019228:	4618      	mov	r0, r3
 801922a:	3708      	adds	r7, #8
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}

08019230 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b082      	sub	sp, #8
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f04f 31ff 	mov.w	r1, #4294967295
 8019240:	4618      	mov	r0, r3
 8019242:	f7ee fa33 	bl	80076ac <osMutexAcquire>
#endif
}
 8019246:	bf00      	nop
 8019248:	3708      	adds	r7, #8
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}

0801924e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801924e:	b580      	push	{r7, lr}
 8019250:	b082      	sub	sp, #8
 8019252:	af00      	add	r7, sp, #0
 8019254:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4618      	mov	r0, r3
 801925c:	f7ee fa84 	bl	8007768 <osMutexRelease>
}
 8019260:	bf00      	nop
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}

08019268 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b08e      	sub	sp, #56	@ 0x38
 801926c:	af00      	add	r7, sp, #0
 801926e:	60f8      	str	r0, [r7, #12]
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	607a      	str	r2, [r7, #4]
 8019274:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019276:	f107 0314 	add.w	r3, r7, #20
 801927a:	2224      	movs	r2, #36	@ 0x24
 801927c:	2100      	movs	r1, #0
 801927e:	4618      	mov	r0, r3
 8019280:	f000 ff2e 	bl	801a0e0 <memset>
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	617b      	str	r3, [r7, #20]
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801928c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801928e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019290:	f107 0314 	add.w	r3, r7, #20
 8019294:	461a      	mov	r2, r3
 8019296:	6879      	ldr	r1, [r7, #4]
 8019298:	68b8      	ldr	r0, [r7, #8]
 801929a:	f7ee f899 	bl	80073d0 <osThreadNew>
 801929e:	4603      	mov	r3, r0
#endif
}
 80192a0:	4618      	mov	r0, r3
 80192a2:	3738      	adds	r7, #56	@ 0x38
 80192a4:	46bd      	mov	sp, r7
 80192a6:	bd80      	pop	{r7, pc}

080192a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80192ac:	4b04      	ldr	r3, [pc, #16]	@ (80192c0 <sys_arch_protect+0x18>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	f04f 31ff 	mov.w	r1, #4294967295
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7ee f9f9 	bl	80076ac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80192ba:	2301      	movs	r3, #1
}
 80192bc:	4618      	mov	r0, r3
 80192be:	bd80      	pop	{r7, pc}
 80192c0:	20011edc 	.word	0x20011edc

080192c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80192cc:	4b04      	ldr	r3, [pc, #16]	@ (80192e0 <sys_arch_unprotect+0x1c>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7ee fa49 	bl	8007768 <osMutexRelease>
}
 80192d6:	bf00      	nop
 80192d8:	3708      	adds	r7, #8
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
 80192de:	bf00      	nop
 80192e0:	20011edc 	.word	0x20011edc

080192e4 <rand>:
 80192e4:	4b16      	ldr	r3, [pc, #88]	@ (8019340 <rand+0x5c>)
 80192e6:	b510      	push	{r4, lr}
 80192e8:	681c      	ldr	r4, [r3, #0]
 80192ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80192ec:	b9b3      	cbnz	r3, 801931c <rand+0x38>
 80192ee:	2018      	movs	r0, #24
 80192f0:	f001 fe06 	bl	801af00 <malloc>
 80192f4:	4602      	mov	r2, r0
 80192f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80192f8:	b920      	cbnz	r0, 8019304 <rand+0x20>
 80192fa:	4b12      	ldr	r3, [pc, #72]	@ (8019344 <rand+0x60>)
 80192fc:	4812      	ldr	r0, [pc, #72]	@ (8019348 <rand+0x64>)
 80192fe:	2152      	movs	r1, #82	@ 0x52
 8019300:	f000 ffb6 	bl	801a270 <__assert_func>
 8019304:	4911      	ldr	r1, [pc, #68]	@ (801934c <rand+0x68>)
 8019306:	4b12      	ldr	r3, [pc, #72]	@ (8019350 <rand+0x6c>)
 8019308:	e9c0 1300 	strd	r1, r3, [r0]
 801930c:	4b11      	ldr	r3, [pc, #68]	@ (8019354 <rand+0x70>)
 801930e:	6083      	str	r3, [r0, #8]
 8019310:	230b      	movs	r3, #11
 8019312:	8183      	strh	r3, [r0, #12]
 8019314:	2100      	movs	r1, #0
 8019316:	2001      	movs	r0, #1
 8019318:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801931c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801931e:	480e      	ldr	r0, [pc, #56]	@ (8019358 <rand+0x74>)
 8019320:	690b      	ldr	r3, [r1, #16]
 8019322:	694c      	ldr	r4, [r1, #20]
 8019324:	4a0d      	ldr	r2, [pc, #52]	@ (801935c <rand+0x78>)
 8019326:	4358      	muls	r0, r3
 8019328:	fb02 0004 	mla	r0, r2, r4, r0
 801932c:	fba3 3202 	umull	r3, r2, r3, r2
 8019330:	3301      	adds	r3, #1
 8019332:	eb40 0002 	adc.w	r0, r0, r2
 8019336:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801933a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801933e:	bd10      	pop	{r4, pc}
 8019340:	20000028 	.word	0x20000028
 8019344:	0801fa0e 	.word	0x0801fa0e
 8019348:	0801fa25 	.word	0x0801fa25
 801934c:	abcd330e 	.word	0xabcd330e
 8019350:	e66d1234 	.word	0xe66d1234
 8019354:	0005deec 	.word	0x0005deec
 8019358:	5851f42d 	.word	0x5851f42d
 801935c:	4c957f2d 	.word	0x4c957f2d

08019360 <__cvt>:
 8019360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019362:	ed2d 8b02 	vpush	{d8}
 8019366:	eeb0 8b40 	vmov.f64	d8, d0
 801936a:	b085      	sub	sp, #20
 801936c:	4617      	mov	r7, r2
 801936e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019370:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019372:	ee18 2a90 	vmov	r2, s17
 8019376:	f025 0520 	bic.w	r5, r5, #32
 801937a:	2a00      	cmp	r2, #0
 801937c:	bfb6      	itet	lt
 801937e:	222d      	movlt	r2, #45	@ 0x2d
 8019380:	2200      	movge	r2, #0
 8019382:	eeb1 8b40 	vneglt.f64	d8, d0
 8019386:	2d46      	cmp	r5, #70	@ 0x46
 8019388:	460c      	mov	r4, r1
 801938a:	701a      	strb	r2, [r3, #0]
 801938c:	d004      	beq.n	8019398 <__cvt+0x38>
 801938e:	2d45      	cmp	r5, #69	@ 0x45
 8019390:	d100      	bne.n	8019394 <__cvt+0x34>
 8019392:	3401      	adds	r4, #1
 8019394:	2102      	movs	r1, #2
 8019396:	e000      	b.n	801939a <__cvt+0x3a>
 8019398:	2103      	movs	r1, #3
 801939a:	ab03      	add	r3, sp, #12
 801939c:	9301      	str	r3, [sp, #4]
 801939e:	ab02      	add	r3, sp, #8
 80193a0:	9300      	str	r3, [sp, #0]
 80193a2:	4622      	mov	r2, r4
 80193a4:	4633      	mov	r3, r6
 80193a6:	eeb0 0b48 	vmov.f64	d0, d8
 80193aa:	f001 f809 	bl	801a3c0 <_dtoa_r>
 80193ae:	2d47      	cmp	r5, #71	@ 0x47
 80193b0:	d114      	bne.n	80193dc <__cvt+0x7c>
 80193b2:	07fb      	lsls	r3, r7, #31
 80193b4:	d50a      	bpl.n	80193cc <__cvt+0x6c>
 80193b6:	1902      	adds	r2, r0, r4
 80193b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80193bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193c0:	bf08      	it	eq
 80193c2:	9203      	streq	r2, [sp, #12]
 80193c4:	2130      	movs	r1, #48	@ 0x30
 80193c6:	9b03      	ldr	r3, [sp, #12]
 80193c8:	4293      	cmp	r3, r2
 80193ca:	d319      	bcc.n	8019400 <__cvt+0xa0>
 80193cc:	9b03      	ldr	r3, [sp, #12]
 80193ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80193d0:	1a1b      	subs	r3, r3, r0
 80193d2:	6013      	str	r3, [r2, #0]
 80193d4:	b005      	add	sp, #20
 80193d6:	ecbd 8b02 	vpop	{d8}
 80193da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193dc:	2d46      	cmp	r5, #70	@ 0x46
 80193de:	eb00 0204 	add.w	r2, r0, r4
 80193e2:	d1e9      	bne.n	80193b8 <__cvt+0x58>
 80193e4:	7803      	ldrb	r3, [r0, #0]
 80193e6:	2b30      	cmp	r3, #48	@ 0x30
 80193e8:	d107      	bne.n	80193fa <__cvt+0x9a>
 80193ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80193ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f2:	bf1c      	itt	ne
 80193f4:	f1c4 0401 	rsbne	r4, r4, #1
 80193f8:	6034      	strne	r4, [r6, #0]
 80193fa:	6833      	ldr	r3, [r6, #0]
 80193fc:	441a      	add	r2, r3
 80193fe:	e7db      	b.n	80193b8 <__cvt+0x58>
 8019400:	1c5c      	adds	r4, r3, #1
 8019402:	9403      	str	r4, [sp, #12]
 8019404:	7019      	strb	r1, [r3, #0]
 8019406:	e7de      	b.n	80193c6 <__cvt+0x66>

08019408 <__exponent>:
 8019408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801940a:	2900      	cmp	r1, #0
 801940c:	bfba      	itte	lt
 801940e:	4249      	neglt	r1, r1
 8019410:	232d      	movlt	r3, #45	@ 0x2d
 8019412:	232b      	movge	r3, #43	@ 0x2b
 8019414:	2909      	cmp	r1, #9
 8019416:	7002      	strb	r2, [r0, #0]
 8019418:	7043      	strb	r3, [r0, #1]
 801941a:	dd29      	ble.n	8019470 <__exponent+0x68>
 801941c:	f10d 0307 	add.w	r3, sp, #7
 8019420:	461d      	mov	r5, r3
 8019422:	270a      	movs	r7, #10
 8019424:	461a      	mov	r2, r3
 8019426:	fbb1 f6f7 	udiv	r6, r1, r7
 801942a:	fb07 1416 	mls	r4, r7, r6, r1
 801942e:	3430      	adds	r4, #48	@ 0x30
 8019430:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019434:	460c      	mov	r4, r1
 8019436:	2c63      	cmp	r4, #99	@ 0x63
 8019438:	f103 33ff 	add.w	r3, r3, #4294967295
 801943c:	4631      	mov	r1, r6
 801943e:	dcf1      	bgt.n	8019424 <__exponent+0x1c>
 8019440:	3130      	adds	r1, #48	@ 0x30
 8019442:	1e94      	subs	r4, r2, #2
 8019444:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019448:	1c41      	adds	r1, r0, #1
 801944a:	4623      	mov	r3, r4
 801944c:	42ab      	cmp	r3, r5
 801944e:	d30a      	bcc.n	8019466 <__exponent+0x5e>
 8019450:	f10d 0309 	add.w	r3, sp, #9
 8019454:	1a9b      	subs	r3, r3, r2
 8019456:	42ac      	cmp	r4, r5
 8019458:	bf88      	it	hi
 801945a:	2300      	movhi	r3, #0
 801945c:	3302      	adds	r3, #2
 801945e:	4403      	add	r3, r0
 8019460:	1a18      	subs	r0, r3, r0
 8019462:	b003      	add	sp, #12
 8019464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019466:	f813 6b01 	ldrb.w	r6, [r3], #1
 801946a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801946e:	e7ed      	b.n	801944c <__exponent+0x44>
 8019470:	2330      	movs	r3, #48	@ 0x30
 8019472:	3130      	adds	r1, #48	@ 0x30
 8019474:	7083      	strb	r3, [r0, #2]
 8019476:	70c1      	strb	r1, [r0, #3]
 8019478:	1d03      	adds	r3, r0, #4
 801947a:	e7f1      	b.n	8019460 <__exponent+0x58>
 801947c:	0000      	movs	r0, r0
	...

08019480 <_printf_float>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	b08d      	sub	sp, #52	@ 0x34
 8019486:	460c      	mov	r4, r1
 8019488:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801948c:	4616      	mov	r6, r2
 801948e:	461f      	mov	r7, r3
 8019490:	4605      	mov	r5, r0
 8019492:	f000 fe65 	bl	801a160 <_localeconv_r>
 8019496:	f8d0 b000 	ldr.w	fp, [r0]
 801949a:	4658      	mov	r0, fp
 801949c:	f7e6 ff20 	bl	80002e0 <strlen>
 80194a0:	2300      	movs	r3, #0
 80194a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80194a4:	f8d8 3000 	ldr.w	r3, [r8]
 80194a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80194ac:	6822      	ldr	r2, [r4, #0]
 80194ae:	9005      	str	r0, [sp, #20]
 80194b0:	3307      	adds	r3, #7
 80194b2:	f023 0307 	bic.w	r3, r3, #7
 80194b6:	f103 0108 	add.w	r1, r3, #8
 80194ba:	f8c8 1000 	str.w	r1, [r8]
 80194be:	ed93 0b00 	vldr	d0, [r3]
 80194c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019720 <_printf_float+0x2a0>
 80194c6:	eeb0 7bc0 	vabs.f64	d7, d0
 80194ca:	eeb4 7b46 	vcmp.f64	d7, d6
 80194ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80194d6:	dd24      	ble.n	8019522 <_printf_float+0xa2>
 80194d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80194dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194e0:	d502      	bpl.n	80194e8 <_printf_float+0x68>
 80194e2:	232d      	movs	r3, #45	@ 0x2d
 80194e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80194e8:	498f      	ldr	r1, [pc, #572]	@ (8019728 <_printf_float+0x2a8>)
 80194ea:	4b90      	ldr	r3, [pc, #576]	@ (801972c <_printf_float+0x2ac>)
 80194ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80194f0:	bf94      	ite	ls
 80194f2:	4688      	movls	r8, r1
 80194f4:	4698      	movhi	r8, r3
 80194f6:	f022 0204 	bic.w	r2, r2, #4
 80194fa:	2303      	movs	r3, #3
 80194fc:	6123      	str	r3, [r4, #16]
 80194fe:	6022      	str	r2, [r4, #0]
 8019500:	f04f 0a00 	mov.w	sl, #0
 8019504:	9700      	str	r7, [sp, #0]
 8019506:	4633      	mov	r3, r6
 8019508:	aa0b      	add	r2, sp, #44	@ 0x2c
 801950a:	4621      	mov	r1, r4
 801950c:	4628      	mov	r0, r5
 801950e:	f000 f9d1 	bl	80198b4 <_printf_common>
 8019512:	3001      	adds	r0, #1
 8019514:	f040 8089 	bne.w	801962a <_printf_float+0x1aa>
 8019518:	f04f 30ff 	mov.w	r0, #4294967295
 801951c:	b00d      	add	sp, #52	@ 0x34
 801951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019522:	eeb4 0b40 	vcmp.f64	d0, d0
 8019526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952a:	d709      	bvc.n	8019540 <_printf_float+0xc0>
 801952c:	ee10 3a90 	vmov	r3, s1
 8019530:	2b00      	cmp	r3, #0
 8019532:	bfbc      	itt	lt
 8019534:	232d      	movlt	r3, #45	@ 0x2d
 8019536:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801953a:	497d      	ldr	r1, [pc, #500]	@ (8019730 <_printf_float+0x2b0>)
 801953c:	4b7d      	ldr	r3, [pc, #500]	@ (8019734 <_printf_float+0x2b4>)
 801953e:	e7d5      	b.n	80194ec <_printf_float+0x6c>
 8019540:	6863      	ldr	r3, [r4, #4]
 8019542:	1c59      	adds	r1, r3, #1
 8019544:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019548:	d139      	bne.n	80195be <_printf_float+0x13e>
 801954a:	2306      	movs	r3, #6
 801954c:	6063      	str	r3, [r4, #4]
 801954e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019552:	2300      	movs	r3, #0
 8019554:	6022      	str	r2, [r4, #0]
 8019556:	9303      	str	r3, [sp, #12]
 8019558:	ab0a      	add	r3, sp, #40	@ 0x28
 801955a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801955e:	ab09      	add	r3, sp, #36	@ 0x24
 8019560:	9300      	str	r3, [sp, #0]
 8019562:	6861      	ldr	r1, [r4, #4]
 8019564:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019568:	4628      	mov	r0, r5
 801956a:	f7ff fef9 	bl	8019360 <__cvt>
 801956e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019574:	4680      	mov	r8, r0
 8019576:	d129      	bne.n	80195cc <_printf_float+0x14c>
 8019578:	1cc8      	adds	r0, r1, #3
 801957a:	db02      	blt.n	8019582 <_printf_float+0x102>
 801957c:	6863      	ldr	r3, [r4, #4]
 801957e:	4299      	cmp	r1, r3
 8019580:	dd41      	ble.n	8019606 <_printf_float+0x186>
 8019582:	f1a9 0902 	sub.w	r9, r9, #2
 8019586:	fa5f f989 	uxtb.w	r9, r9
 801958a:	3901      	subs	r1, #1
 801958c:	464a      	mov	r2, r9
 801958e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019592:	9109      	str	r1, [sp, #36]	@ 0x24
 8019594:	f7ff ff38 	bl	8019408 <__exponent>
 8019598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801959a:	1813      	adds	r3, r2, r0
 801959c:	2a01      	cmp	r2, #1
 801959e:	4682      	mov	sl, r0
 80195a0:	6123      	str	r3, [r4, #16]
 80195a2:	dc02      	bgt.n	80195aa <_printf_float+0x12a>
 80195a4:	6822      	ldr	r2, [r4, #0]
 80195a6:	07d2      	lsls	r2, r2, #31
 80195a8:	d501      	bpl.n	80195ae <_printf_float+0x12e>
 80195aa:	3301      	adds	r3, #1
 80195ac:	6123      	str	r3, [r4, #16]
 80195ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d0a6      	beq.n	8019504 <_printf_float+0x84>
 80195b6:	232d      	movs	r3, #45	@ 0x2d
 80195b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80195bc:	e7a2      	b.n	8019504 <_printf_float+0x84>
 80195be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80195c2:	d1c4      	bne.n	801954e <_printf_float+0xce>
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d1c2      	bne.n	801954e <_printf_float+0xce>
 80195c8:	2301      	movs	r3, #1
 80195ca:	e7bf      	b.n	801954c <_printf_float+0xcc>
 80195cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80195d0:	d9db      	bls.n	801958a <_printf_float+0x10a>
 80195d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80195d6:	d118      	bne.n	801960a <_printf_float+0x18a>
 80195d8:	2900      	cmp	r1, #0
 80195da:	6863      	ldr	r3, [r4, #4]
 80195dc:	dd0b      	ble.n	80195f6 <_printf_float+0x176>
 80195de:	6121      	str	r1, [r4, #16]
 80195e0:	b913      	cbnz	r3, 80195e8 <_printf_float+0x168>
 80195e2:	6822      	ldr	r2, [r4, #0]
 80195e4:	07d0      	lsls	r0, r2, #31
 80195e6:	d502      	bpl.n	80195ee <_printf_float+0x16e>
 80195e8:	3301      	adds	r3, #1
 80195ea:	440b      	add	r3, r1
 80195ec:	6123      	str	r3, [r4, #16]
 80195ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80195f0:	f04f 0a00 	mov.w	sl, #0
 80195f4:	e7db      	b.n	80195ae <_printf_float+0x12e>
 80195f6:	b913      	cbnz	r3, 80195fe <_printf_float+0x17e>
 80195f8:	6822      	ldr	r2, [r4, #0]
 80195fa:	07d2      	lsls	r2, r2, #31
 80195fc:	d501      	bpl.n	8019602 <_printf_float+0x182>
 80195fe:	3302      	adds	r3, #2
 8019600:	e7f4      	b.n	80195ec <_printf_float+0x16c>
 8019602:	2301      	movs	r3, #1
 8019604:	e7f2      	b.n	80195ec <_printf_float+0x16c>
 8019606:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801960a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801960c:	4299      	cmp	r1, r3
 801960e:	db05      	blt.n	801961c <_printf_float+0x19c>
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	6121      	str	r1, [r4, #16]
 8019614:	07d8      	lsls	r0, r3, #31
 8019616:	d5ea      	bpl.n	80195ee <_printf_float+0x16e>
 8019618:	1c4b      	adds	r3, r1, #1
 801961a:	e7e7      	b.n	80195ec <_printf_float+0x16c>
 801961c:	2900      	cmp	r1, #0
 801961e:	bfd4      	ite	le
 8019620:	f1c1 0202 	rsble	r2, r1, #2
 8019624:	2201      	movgt	r2, #1
 8019626:	4413      	add	r3, r2
 8019628:	e7e0      	b.n	80195ec <_printf_float+0x16c>
 801962a:	6823      	ldr	r3, [r4, #0]
 801962c:	055a      	lsls	r2, r3, #21
 801962e:	d407      	bmi.n	8019640 <_printf_float+0x1c0>
 8019630:	6923      	ldr	r3, [r4, #16]
 8019632:	4642      	mov	r2, r8
 8019634:	4631      	mov	r1, r6
 8019636:	4628      	mov	r0, r5
 8019638:	47b8      	blx	r7
 801963a:	3001      	adds	r0, #1
 801963c:	d12a      	bne.n	8019694 <_printf_float+0x214>
 801963e:	e76b      	b.n	8019518 <_printf_float+0x98>
 8019640:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019644:	f240 80e0 	bls.w	8019808 <_printf_float+0x388>
 8019648:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801964c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019654:	d133      	bne.n	80196be <_printf_float+0x23e>
 8019656:	4a38      	ldr	r2, [pc, #224]	@ (8019738 <_printf_float+0x2b8>)
 8019658:	2301      	movs	r3, #1
 801965a:	4631      	mov	r1, r6
 801965c:	4628      	mov	r0, r5
 801965e:	47b8      	blx	r7
 8019660:	3001      	adds	r0, #1
 8019662:	f43f af59 	beq.w	8019518 <_printf_float+0x98>
 8019666:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801966a:	4543      	cmp	r3, r8
 801966c:	db02      	blt.n	8019674 <_printf_float+0x1f4>
 801966e:	6823      	ldr	r3, [r4, #0]
 8019670:	07d8      	lsls	r0, r3, #31
 8019672:	d50f      	bpl.n	8019694 <_printf_float+0x214>
 8019674:	9b05      	ldr	r3, [sp, #20]
 8019676:	465a      	mov	r2, fp
 8019678:	4631      	mov	r1, r6
 801967a:	4628      	mov	r0, r5
 801967c:	47b8      	blx	r7
 801967e:	3001      	adds	r0, #1
 8019680:	f43f af4a 	beq.w	8019518 <_printf_float+0x98>
 8019684:	f04f 0900 	mov.w	r9, #0
 8019688:	f108 38ff 	add.w	r8, r8, #4294967295
 801968c:	f104 0a1a 	add.w	sl, r4, #26
 8019690:	45c8      	cmp	r8, r9
 8019692:	dc09      	bgt.n	80196a8 <_printf_float+0x228>
 8019694:	6823      	ldr	r3, [r4, #0]
 8019696:	079b      	lsls	r3, r3, #30
 8019698:	f100 8107 	bmi.w	80198aa <_printf_float+0x42a>
 801969c:	68e0      	ldr	r0, [r4, #12]
 801969e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80196a0:	4298      	cmp	r0, r3
 80196a2:	bfb8      	it	lt
 80196a4:	4618      	movlt	r0, r3
 80196a6:	e739      	b.n	801951c <_printf_float+0x9c>
 80196a8:	2301      	movs	r3, #1
 80196aa:	4652      	mov	r2, sl
 80196ac:	4631      	mov	r1, r6
 80196ae:	4628      	mov	r0, r5
 80196b0:	47b8      	blx	r7
 80196b2:	3001      	adds	r0, #1
 80196b4:	f43f af30 	beq.w	8019518 <_printf_float+0x98>
 80196b8:	f109 0901 	add.w	r9, r9, #1
 80196bc:	e7e8      	b.n	8019690 <_printf_float+0x210>
 80196be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	dc3b      	bgt.n	801973c <_printf_float+0x2bc>
 80196c4:	4a1c      	ldr	r2, [pc, #112]	@ (8019738 <_printf_float+0x2b8>)
 80196c6:	2301      	movs	r3, #1
 80196c8:	4631      	mov	r1, r6
 80196ca:	4628      	mov	r0, r5
 80196cc:	47b8      	blx	r7
 80196ce:	3001      	adds	r0, #1
 80196d0:	f43f af22 	beq.w	8019518 <_printf_float+0x98>
 80196d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80196d8:	ea59 0303 	orrs.w	r3, r9, r3
 80196dc:	d102      	bne.n	80196e4 <_printf_float+0x264>
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	07d9      	lsls	r1, r3, #31
 80196e2:	d5d7      	bpl.n	8019694 <_printf_float+0x214>
 80196e4:	9b05      	ldr	r3, [sp, #20]
 80196e6:	465a      	mov	r2, fp
 80196e8:	4631      	mov	r1, r6
 80196ea:	4628      	mov	r0, r5
 80196ec:	47b8      	blx	r7
 80196ee:	3001      	adds	r0, #1
 80196f0:	f43f af12 	beq.w	8019518 <_printf_float+0x98>
 80196f4:	f04f 0a00 	mov.w	sl, #0
 80196f8:	f104 0b1a 	add.w	fp, r4, #26
 80196fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196fe:	425b      	negs	r3, r3
 8019700:	4553      	cmp	r3, sl
 8019702:	dc01      	bgt.n	8019708 <_printf_float+0x288>
 8019704:	464b      	mov	r3, r9
 8019706:	e794      	b.n	8019632 <_printf_float+0x1b2>
 8019708:	2301      	movs	r3, #1
 801970a:	465a      	mov	r2, fp
 801970c:	4631      	mov	r1, r6
 801970e:	4628      	mov	r0, r5
 8019710:	47b8      	blx	r7
 8019712:	3001      	adds	r0, #1
 8019714:	f43f af00 	beq.w	8019518 <_printf_float+0x98>
 8019718:	f10a 0a01 	add.w	sl, sl, #1
 801971c:	e7ee      	b.n	80196fc <_printf_float+0x27c>
 801971e:	bf00      	nop
 8019720:	ffffffff 	.word	0xffffffff
 8019724:	7fefffff 	.word	0x7fefffff
 8019728:	0801fb7e 	.word	0x0801fb7e
 801972c:	0801fb82 	.word	0x0801fb82
 8019730:	0801fb86 	.word	0x0801fb86
 8019734:	0801fb8a 	.word	0x0801fb8a
 8019738:	0801fb8e 	.word	0x0801fb8e
 801973c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801973e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019742:	4553      	cmp	r3, sl
 8019744:	bfa8      	it	ge
 8019746:	4653      	movge	r3, sl
 8019748:	2b00      	cmp	r3, #0
 801974a:	4699      	mov	r9, r3
 801974c:	dc37      	bgt.n	80197be <_printf_float+0x33e>
 801974e:	2300      	movs	r3, #0
 8019750:	9307      	str	r3, [sp, #28]
 8019752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019756:	f104 021a 	add.w	r2, r4, #26
 801975a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801975c:	9907      	ldr	r1, [sp, #28]
 801975e:	9306      	str	r3, [sp, #24]
 8019760:	eba3 0309 	sub.w	r3, r3, r9
 8019764:	428b      	cmp	r3, r1
 8019766:	dc31      	bgt.n	80197cc <_printf_float+0x34c>
 8019768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801976a:	459a      	cmp	sl, r3
 801976c:	dc3b      	bgt.n	80197e6 <_printf_float+0x366>
 801976e:	6823      	ldr	r3, [r4, #0]
 8019770:	07da      	lsls	r2, r3, #31
 8019772:	d438      	bmi.n	80197e6 <_printf_float+0x366>
 8019774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019776:	ebaa 0903 	sub.w	r9, sl, r3
 801977a:	9b06      	ldr	r3, [sp, #24]
 801977c:	ebaa 0303 	sub.w	r3, sl, r3
 8019780:	4599      	cmp	r9, r3
 8019782:	bfa8      	it	ge
 8019784:	4699      	movge	r9, r3
 8019786:	f1b9 0f00 	cmp.w	r9, #0
 801978a:	dc34      	bgt.n	80197f6 <_printf_float+0x376>
 801978c:	f04f 0800 	mov.w	r8, #0
 8019790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019794:	f104 0b1a 	add.w	fp, r4, #26
 8019798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801979a:	ebaa 0303 	sub.w	r3, sl, r3
 801979e:	eba3 0309 	sub.w	r3, r3, r9
 80197a2:	4543      	cmp	r3, r8
 80197a4:	f77f af76 	ble.w	8019694 <_printf_float+0x214>
 80197a8:	2301      	movs	r3, #1
 80197aa:	465a      	mov	r2, fp
 80197ac:	4631      	mov	r1, r6
 80197ae:	4628      	mov	r0, r5
 80197b0:	47b8      	blx	r7
 80197b2:	3001      	adds	r0, #1
 80197b4:	f43f aeb0 	beq.w	8019518 <_printf_float+0x98>
 80197b8:	f108 0801 	add.w	r8, r8, #1
 80197bc:	e7ec      	b.n	8019798 <_printf_float+0x318>
 80197be:	4642      	mov	r2, r8
 80197c0:	4631      	mov	r1, r6
 80197c2:	4628      	mov	r0, r5
 80197c4:	47b8      	blx	r7
 80197c6:	3001      	adds	r0, #1
 80197c8:	d1c1      	bne.n	801974e <_printf_float+0x2ce>
 80197ca:	e6a5      	b.n	8019518 <_printf_float+0x98>
 80197cc:	2301      	movs	r3, #1
 80197ce:	4631      	mov	r1, r6
 80197d0:	4628      	mov	r0, r5
 80197d2:	9206      	str	r2, [sp, #24]
 80197d4:	47b8      	blx	r7
 80197d6:	3001      	adds	r0, #1
 80197d8:	f43f ae9e 	beq.w	8019518 <_printf_float+0x98>
 80197dc:	9b07      	ldr	r3, [sp, #28]
 80197de:	9a06      	ldr	r2, [sp, #24]
 80197e0:	3301      	adds	r3, #1
 80197e2:	9307      	str	r3, [sp, #28]
 80197e4:	e7b9      	b.n	801975a <_printf_float+0x2da>
 80197e6:	9b05      	ldr	r3, [sp, #20]
 80197e8:	465a      	mov	r2, fp
 80197ea:	4631      	mov	r1, r6
 80197ec:	4628      	mov	r0, r5
 80197ee:	47b8      	blx	r7
 80197f0:	3001      	adds	r0, #1
 80197f2:	d1bf      	bne.n	8019774 <_printf_float+0x2f4>
 80197f4:	e690      	b.n	8019518 <_printf_float+0x98>
 80197f6:	9a06      	ldr	r2, [sp, #24]
 80197f8:	464b      	mov	r3, r9
 80197fa:	4442      	add	r2, r8
 80197fc:	4631      	mov	r1, r6
 80197fe:	4628      	mov	r0, r5
 8019800:	47b8      	blx	r7
 8019802:	3001      	adds	r0, #1
 8019804:	d1c2      	bne.n	801978c <_printf_float+0x30c>
 8019806:	e687      	b.n	8019518 <_printf_float+0x98>
 8019808:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801980c:	f1b9 0f01 	cmp.w	r9, #1
 8019810:	dc01      	bgt.n	8019816 <_printf_float+0x396>
 8019812:	07db      	lsls	r3, r3, #31
 8019814:	d536      	bpl.n	8019884 <_printf_float+0x404>
 8019816:	2301      	movs	r3, #1
 8019818:	4642      	mov	r2, r8
 801981a:	4631      	mov	r1, r6
 801981c:	4628      	mov	r0, r5
 801981e:	47b8      	blx	r7
 8019820:	3001      	adds	r0, #1
 8019822:	f43f ae79 	beq.w	8019518 <_printf_float+0x98>
 8019826:	9b05      	ldr	r3, [sp, #20]
 8019828:	465a      	mov	r2, fp
 801982a:	4631      	mov	r1, r6
 801982c:	4628      	mov	r0, r5
 801982e:	47b8      	blx	r7
 8019830:	3001      	adds	r0, #1
 8019832:	f43f ae71 	beq.w	8019518 <_printf_float+0x98>
 8019836:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801983a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019842:	f109 39ff 	add.w	r9, r9, #4294967295
 8019846:	d018      	beq.n	801987a <_printf_float+0x3fa>
 8019848:	464b      	mov	r3, r9
 801984a:	f108 0201 	add.w	r2, r8, #1
 801984e:	4631      	mov	r1, r6
 8019850:	4628      	mov	r0, r5
 8019852:	47b8      	blx	r7
 8019854:	3001      	adds	r0, #1
 8019856:	d10c      	bne.n	8019872 <_printf_float+0x3f2>
 8019858:	e65e      	b.n	8019518 <_printf_float+0x98>
 801985a:	2301      	movs	r3, #1
 801985c:	465a      	mov	r2, fp
 801985e:	4631      	mov	r1, r6
 8019860:	4628      	mov	r0, r5
 8019862:	47b8      	blx	r7
 8019864:	3001      	adds	r0, #1
 8019866:	f43f ae57 	beq.w	8019518 <_printf_float+0x98>
 801986a:	f108 0801 	add.w	r8, r8, #1
 801986e:	45c8      	cmp	r8, r9
 8019870:	dbf3      	blt.n	801985a <_printf_float+0x3da>
 8019872:	4653      	mov	r3, sl
 8019874:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019878:	e6dc      	b.n	8019634 <_printf_float+0x1b4>
 801987a:	f04f 0800 	mov.w	r8, #0
 801987e:	f104 0b1a 	add.w	fp, r4, #26
 8019882:	e7f4      	b.n	801986e <_printf_float+0x3ee>
 8019884:	2301      	movs	r3, #1
 8019886:	4642      	mov	r2, r8
 8019888:	e7e1      	b.n	801984e <_printf_float+0x3ce>
 801988a:	2301      	movs	r3, #1
 801988c:	464a      	mov	r2, r9
 801988e:	4631      	mov	r1, r6
 8019890:	4628      	mov	r0, r5
 8019892:	47b8      	blx	r7
 8019894:	3001      	adds	r0, #1
 8019896:	f43f ae3f 	beq.w	8019518 <_printf_float+0x98>
 801989a:	f108 0801 	add.w	r8, r8, #1
 801989e:	68e3      	ldr	r3, [r4, #12]
 80198a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80198a2:	1a5b      	subs	r3, r3, r1
 80198a4:	4543      	cmp	r3, r8
 80198a6:	dcf0      	bgt.n	801988a <_printf_float+0x40a>
 80198a8:	e6f8      	b.n	801969c <_printf_float+0x21c>
 80198aa:	f04f 0800 	mov.w	r8, #0
 80198ae:	f104 0919 	add.w	r9, r4, #25
 80198b2:	e7f4      	b.n	801989e <_printf_float+0x41e>

080198b4 <_printf_common>:
 80198b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198b8:	4616      	mov	r6, r2
 80198ba:	4698      	mov	r8, r3
 80198bc:	688a      	ldr	r2, [r1, #8]
 80198be:	690b      	ldr	r3, [r1, #16]
 80198c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80198c4:	4293      	cmp	r3, r2
 80198c6:	bfb8      	it	lt
 80198c8:	4613      	movlt	r3, r2
 80198ca:	6033      	str	r3, [r6, #0]
 80198cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80198d0:	4607      	mov	r7, r0
 80198d2:	460c      	mov	r4, r1
 80198d4:	b10a      	cbz	r2, 80198da <_printf_common+0x26>
 80198d6:	3301      	adds	r3, #1
 80198d8:	6033      	str	r3, [r6, #0]
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	0699      	lsls	r1, r3, #26
 80198de:	bf42      	ittt	mi
 80198e0:	6833      	ldrmi	r3, [r6, #0]
 80198e2:	3302      	addmi	r3, #2
 80198e4:	6033      	strmi	r3, [r6, #0]
 80198e6:	6825      	ldr	r5, [r4, #0]
 80198e8:	f015 0506 	ands.w	r5, r5, #6
 80198ec:	d106      	bne.n	80198fc <_printf_common+0x48>
 80198ee:	f104 0a19 	add.w	sl, r4, #25
 80198f2:	68e3      	ldr	r3, [r4, #12]
 80198f4:	6832      	ldr	r2, [r6, #0]
 80198f6:	1a9b      	subs	r3, r3, r2
 80198f8:	42ab      	cmp	r3, r5
 80198fa:	dc26      	bgt.n	801994a <_printf_common+0x96>
 80198fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019900:	6822      	ldr	r2, [r4, #0]
 8019902:	3b00      	subs	r3, #0
 8019904:	bf18      	it	ne
 8019906:	2301      	movne	r3, #1
 8019908:	0692      	lsls	r2, r2, #26
 801990a:	d42b      	bmi.n	8019964 <_printf_common+0xb0>
 801990c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019910:	4641      	mov	r1, r8
 8019912:	4638      	mov	r0, r7
 8019914:	47c8      	blx	r9
 8019916:	3001      	adds	r0, #1
 8019918:	d01e      	beq.n	8019958 <_printf_common+0xa4>
 801991a:	6823      	ldr	r3, [r4, #0]
 801991c:	6922      	ldr	r2, [r4, #16]
 801991e:	f003 0306 	and.w	r3, r3, #6
 8019922:	2b04      	cmp	r3, #4
 8019924:	bf02      	ittt	eq
 8019926:	68e5      	ldreq	r5, [r4, #12]
 8019928:	6833      	ldreq	r3, [r6, #0]
 801992a:	1aed      	subeq	r5, r5, r3
 801992c:	68a3      	ldr	r3, [r4, #8]
 801992e:	bf0c      	ite	eq
 8019930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019934:	2500      	movne	r5, #0
 8019936:	4293      	cmp	r3, r2
 8019938:	bfc4      	itt	gt
 801993a:	1a9b      	subgt	r3, r3, r2
 801993c:	18ed      	addgt	r5, r5, r3
 801993e:	2600      	movs	r6, #0
 8019940:	341a      	adds	r4, #26
 8019942:	42b5      	cmp	r5, r6
 8019944:	d11a      	bne.n	801997c <_printf_common+0xc8>
 8019946:	2000      	movs	r0, #0
 8019948:	e008      	b.n	801995c <_printf_common+0xa8>
 801994a:	2301      	movs	r3, #1
 801994c:	4652      	mov	r2, sl
 801994e:	4641      	mov	r1, r8
 8019950:	4638      	mov	r0, r7
 8019952:	47c8      	blx	r9
 8019954:	3001      	adds	r0, #1
 8019956:	d103      	bne.n	8019960 <_printf_common+0xac>
 8019958:	f04f 30ff 	mov.w	r0, #4294967295
 801995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019960:	3501      	adds	r5, #1
 8019962:	e7c6      	b.n	80198f2 <_printf_common+0x3e>
 8019964:	18e1      	adds	r1, r4, r3
 8019966:	1c5a      	adds	r2, r3, #1
 8019968:	2030      	movs	r0, #48	@ 0x30
 801996a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801996e:	4422      	add	r2, r4
 8019970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019978:	3302      	adds	r3, #2
 801997a:	e7c7      	b.n	801990c <_printf_common+0x58>
 801997c:	2301      	movs	r3, #1
 801997e:	4622      	mov	r2, r4
 8019980:	4641      	mov	r1, r8
 8019982:	4638      	mov	r0, r7
 8019984:	47c8      	blx	r9
 8019986:	3001      	adds	r0, #1
 8019988:	d0e6      	beq.n	8019958 <_printf_common+0xa4>
 801998a:	3601      	adds	r6, #1
 801998c:	e7d9      	b.n	8019942 <_printf_common+0x8e>
	...

08019990 <_printf_i>:
 8019990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019994:	7e0f      	ldrb	r7, [r1, #24]
 8019996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019998:	2f78      	cmp	r7, #120	@ 0x78
 801999a:	4691      	mov	r9, r2
 801999c:	4680      	mov	r8, r0
 801999e:	460c      	mov	r4, r1
 80199a0:	469a      	mov	sl, r3
 80199a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80199a6:	d807      	bhi.n	80199b8 <_printf_i+0x28>
 80199a8:	2f62      	cmp	r7, #98	@ 0x62
 80199aa:	d80a      	bhi.n	80199c2 <_printf_i+0x32>
 80199ac:	2f00      	cmp	r7, #0
 80199ae:	f000 80d2 	beq.w	8019b56 <_printf_i+0x1c6>
 80199b2:	2f58      	cmp	r7, #88	@ 0x58
 80199b4:	f000 80b9 	beq.w	8019b2a <_printf_i+0x19a>
 80199b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80199bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80199c0:	e03a      	b.n	8019a38 <_printf_i+0xa8>
 80199c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80199c6:	2b15      	cmp	r3, #21
 80199c8:	d8f6      	bhi.n	80199b8 <_printf_i+0x28>
 80199ca:	a101      	add	r1, pc, #4	@ (adr r1, 80199d0 <_printf_i+0x40>)
 80199cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199d0:	08019a29 	.word	0x08019a29
 80199d4:	08019a3d 	.word	0x08019a3d
 80199d8:	080199b9 	.word	0x080199b9
 80199dc:	080199b9 	.word	0x080199b9
 80199e0:	080199b9 	.word	0x080199b9
 80199e4:	080199b9 	.word	0x080199b9
 80199e8:	08019a3d 	.word	0x08019a3d
 80199ec:	080199b9 	.word	0x080199b9
 80199f0:	080199b9 	.word	0x080199b9
 80199f4:	080199b9 	.word	0x080199b9
 80199f8:	080199b9 	.word	0x080199b9
 80199fc:	08019b3d 	.word	0x08019b3d
 8019a00:	08019a67 	.word	0x08019a67
 8019a04:	08019af7 	.word	0x08019af7
 8019a08:	080199b9 	.word	0x080199b9
 8019a0c:	080199b9 	.word	0x080199b9
 8019a10:	08019b5f 	.word	0x08019b5f
 8019a14:	080199b9 	.word	0x080199b9
 8019a18:	08019a67 	.word	0x08019a67
 8019a1c:	080199b9 	.word	0x080199b9
 8019a20:	080199b9 	.word	0x080199b9
 8019a24:	08019aff 	.word	0x08019aff
 8019a28:	6833      	ldr	r3, [r6, #0]
 8019a2a:	1d1a      	adds	r2, r3, #4
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	6032      	str	r2, [r6, #0]
 8019a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a38:	2301      	movs	r3, #1
 8019a3a:	e09d      	b.n	8019b78 <_printf_i+0x1e8>
 8019a3c:	6833      	ldr	r3, [r6, #0]
 8019a3e:	6820      	ldr	r0, [r4, #0]
 8019a40:	1d19      	adds	r1, r3, #4
 8019a42:	6031      	str	r1, [r6, #0]
 8019a44:	0606      	lsls	r6, r0, #24
 8019a46:	d501      	bpl.n	8019a4c <_printf_i+0xbc>
 8019a48:	681d      	ldr	r5, [r3, #0]
 8019a4a:	e003      	b.n	8019a54 <_printf_i+0xc4>
 8019a4c:	0645      	lsls	r5, r0, #25
 8019a4e:	d5fb      	bpl.n	8019a48 <_printf_i+0xb8>
 8019a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a54:	2d00      	cmp	r5, #0
 8019a56:	da03      	bge.n	8019a60 <_printf_i+0xd0>
 8019a58:	232d      	movs	r3, #45	@ 0x2d
 8019a5a:	426d      	negs	r5, r5
 8019a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a60:	4859      	ldr	r0, [pc, #356]	@ (8019bc8 <_printf_i+0x238>)
 8019a62:	230a      	movs	r3, #10
 8019a64:	e011      	b.n	8019a8a <_printf_i+0xfa>
 8019a66:	6821      	ldr	r1, [r4, #0]
 8019a68:	6833      	ldr	r3, [r6, #0]
 8019a6a:	0608      	lsls	r0, r1, #24
 8019a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a70:	d402      	bmi.n	8019a78 <_printf_i+0xe8>
 8019a72:	0649      	lsls	r1, r1, #25
 8019a74:	bf48      	it	mi
 8019a76:	b2ad      	uxthmi	r5, r5
 8019a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8019a7a:	4853      	ldr	r0, [pc, #332]	@ (8019bc8 <_printf_i+0x238>)
 8019a7c:	6033      	str	r3, [r6, #0]
 8019a7e:	bf14      	ite	ne
 8019a80:	230a      	movne	r3, #10
 8019a82:	2308      	moveq	r3, #8
 8019a84:	2100      	movs	r1, #0
 8019a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019a8a:	6866      	ldr	r6, [r4, #4]
 8019a8c:	60a6      	str	r6, [r4, #8]
 8019a8e:	2e00      	cmp	r6, #0
 8019a90:	bfa2      	ittt	ge
 8019a92:	6821      	ldrge	r1, [r4, #0]
 8019a94:	f021 0104 	bicge.w	r1, r1, #4
 8019a98:	6021      	strge	r1, [r4, #0]
 8019a9a:	b90d      	cbnz	r5, 8019aa0 <_printf_i+0x110>
 8019a9c:	2e00      	cmp	r6, #0
 8019a9e:	d04b      	beq.n	8019b38 <_printf_i+0x1a8>
 8019aa0:	4616      	mov	r6, r2
 8019aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8019aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8019aaa:	5dc7      	ldrb	r7, [r0, r7]
 8019aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ab0:	462f      	mov	r7, r5
 8019ab2:	42bb      	cmp	r3, r7
 8019ab4:	460d      	mov	r5, r1
 8019ab6:	d9f4      	bls.n	8019aa2 <_printf_i+0x112>
 8019ab8:	2b08      	cmp	r3, #8
 8019aba:	d10b      	bne.n	8019ad4 <_printf_i+0x144>
 8019abc:	6823      	ldr	r3, [r4, #0]
 8019abe:	07df      	lsls	r7, r3, #31
 8019ac0:	d508      	bpl.n	8019ad4 <_printf_i+0x144>
 8019ac2:	6923      	ldr	r3, [r4, #16]
 8019ac4:	6861      	ldr	r1, [r4, #4]
 8019ac6:	4299      	cmp	r1, r3
 8019ac8:	bfde      	ittt	le
 8019aca:	2330      	movle	r3, #48	@ 0x30
 8019acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ad0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019ad4:	1b92      	subs	r2, r2, r6
 8019ad6:	6122      	str	r2, [r4, #16]
 8019ad8:	f8cd a000 	str.w	sl, [sp]
 8019adc:	464b      	mov	r3, r9
 8019ade:	aa03      	add	r2, sp, #12
 8019ae0:	4621      	mov	r1, r4
 8019ae2:	4640      	mov	r0, r8
 8019ae4:	f7ff fee6 	bl	80198b4 <_printf_common>
 8019ae8:	3001      	adds	r0, #1
 8019aea:	d14a      	bne.n	8019b82 <_printf_i+0x1f2>
 8019aec:	f04f 30ff 	mov.w	r0, #4294967295
 8019af0:	b004      	add	sp, #16
 8019af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af6:	6823      	ldr	r3, [r4, #0]
 8019af8:	f043 0320 	orr.w	r3, r3, #32
 8019afc:	6023      	str	r3, [r4, #0]
 8019afe:	4833      	ldr	r0, [pc, #204]	@ (8019bcc <_printf_i+0x23c>)
 8019b00:	2778      	movs	r7, #120	@ 0x78
 8019b02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019b06:	6823      	ldr	r3, [r4, #0]
 8019b08:	6831      	ldr	r1, [r6, #0]
 8019b0a:	061f      	lsls	r7, r3, #24
 8019b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019b10:	d402      	bmi.n	8019b18 <_printf_i+0x188>
 8019b12:	065f      	lsls	r7, r3, #25
 8019b14:	bf48      	it	mi
 8019b16:	b2ad      	uxthmi	r5, r5
 8019b18:	6031      	str	r1, [r6, #0]
 8019b1a:	07d9      	lsls	r1, r3, #31
 8019b1c:	bf44      	itt	mi
 8019b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8019b22:	6023      	strmi	r3, [r4, #0]
 8019b24:	b11d      	cbz	r5, 8019b2e <_printf_i+0x19e>
 8019b26:	2310      	movs	r3, #16
 8019b28:	e7ac      	b.n	8019a84 <_printf_i+0xf4>
 8019b2a:	4827      	ldr	r0, [pc, #156]	@ (8019bc8 <_printf_i+0x238>)
 8019b2c:	e7e9      	b.n	8019b02 <_printf_i+0x172>
 8019b2e:	6823      	ldr	r3, [r4, #0]
 8019b30:	f023 0320 	bic.w	r3, r3, #32
 8019b34:	6023      	str	r3, [r4, #0]
 8019b36:	e7f6      	b.n	8019b26 <_printf_i+0x196>
 8019b38:	4616      	mov	r6, r2
 8019b3a:	e7bd      	b.n	8019ab8 <_printf_i+0x128>
 8019b3c:	6833      	ldr	r3, [r6, #0]
 8019b3e:	6825      	ldr	r5, [r4, #0]
 8019b40:	6961      	ldr	r1, [r4, #20]
 8019b42:	1d18      	adds	r0, r3, #4
 8019b44:	6030      	str	r0, [r6, #0]
 8019b46:	062e      	lsls	r6, r5, #24
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	d501      	bpl.n	8019b50 <_printf_i+0x1c0>
 8019b4c:	6019      	str	r1, [r3, #0]
 8019b4e:	e002      	b.n	8019b56 <_printf_i+0x1c6>
 8019b50:	0668      	lsls	r0, r5, #25
 8019b52:	d5fb      	bpl.n	8019b4c <_printf_i+0x1bc>
 8019b54:	8019      	strh	r1, [r3, #0]
 8019b56:	2300      	movs	r3, #0
 8019b58:	6123      	str	r3, [r4, #16]
 8019b5a:	4616      	mov	r6, r2
 8019b5c:	e7bc      	b.n	8019ad8 <_printf_i+0x148>
 8019b5e:	6833      	ldr	r3, [r6, #0]
 8019b60:	1d1a      	adds	r2, r3, #4
 8019b62:	6032      	str	r2, [r6, #0]
 8019b64:	681e      	ldr	r6, [r3, #0]
 8019b66:	6862      	ldr	r2, [r4, #4]
 8019b68:	2100      	movs	r1, #0
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f7e6 fb68 	bl	8000240 <memchr>
 8019b70:	b108      	cbz	r0, 8019b76 <_printf_i+0x1e6>
 8019b72:	1b80      	subs	r0, r0, r6
 8019b74:	6060      	str	r0, [r4, #4]
 8019b76:	6863      	ldr	r3, [r4, #4]
 8019b78:	6123      	str	r3, [r4, #16]
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019b80:	e7aa      	b.n	8019ad8 <_printf_i+0x148>
 8019b82:	6923      	ldr	r3, [r4, #16]
 8019b84:	4632      	mov	r2, r6
 8019b86:	4649      	mov	r1, r9
 8019b88:	4640      	mov	r0, r8
 8019b8a:	47d0      	blx	sl
 8019b8c:	3001      	adds	r0, #1
 8019b8e:	d0ad      	beq.n	8019aec <_printf_i+0x15c>
 8019b90:	6823      	ldr	r3, [r4, #0]
 8019b92:	079b      	lsls	r3, r3, #30
 8019b94:	d413      	bmi.n	8019bbe <_printf_i+0x22e>
 8019b96:	68e0      	ldr	r0, [r4, #12]
 8019b98:	9b03      	ldr	r3, [sp, #12]
 8019b9a:	4298      	cmp	r0, r3
 8019b9c:	bfb8      	it	lt
 8019b9e:	4618      	movlt	r0, r3
 8019ba0:	e7a6      	b.n	8019af0 <_printf_i+0x160>
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	4632      	mov	r2, r6
 8019ba6:	4649      	mov	r1, r9
 8019ba8:	4640      	mov	r0, r8
 8019baa:	47d0      	blx	sl
 8019bac:	3001      	adds	r0, #1
 8019bae:	d09d      	beq.n	8019aec <_printf_i+0x15c>
 8019bb0:	3501      	adds	r5, #1
 8019bb2:	68e3      	ldr	r3, [r4, #12]
 8019bb4:	9903      	ldr	r1, [sp, #12]
 8019bb6:	1a5b      	subs	r3, r3, r1
 8019bb8:	42ab      	cmp	r3, r5
 8019bba:	dcf2      	bgt.n	8019ba2 <_printf_i+0x212>
 8019bbc:	e7eb      	b.n	8019b96 <_printf_i+0x206>
 8019bbe:	2500      	movs	r5, #0
 8019bc0:	f104 0619 	add.w	r6, r4, #25
 8019bc4:	e7f5      	b.n	8019bb2 <_printf_i+0x222>
 8019bc6:	bf00      	nop
 8019bc8:	0801fb90 	.word	0x0801fb90
 8019bcc:	0801fba1 	.word	0x0801fba1

08019bd0 <std>:
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	b510      	push	{r4, lr}
 8019bd4:	4604      	mov	r4, r0
 8019bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8019bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019bde:	6083      	str	r3, [r0, #8]
 8019be0:	8181      	strh	r1, [r0, #12]
 8019be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8019be4:	81c2      	strh	r2, [r0, #14]
 8019be6:	6183      	str	r3, [r0, #24]
 8019be8:	4619      	mov	r1, r3
 8019bea:	2208      	movs	r2, #8
 8019bec:	305c      	adds	r0, #92	@ 0x5c
 8019bee:	f000 fa77 	bl	801a0e0 <memset>
 8019bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8019c28 <std+0x58>)
 8019bf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8019bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8019c2c <std+0x5c>)
 8019bf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8019c30 <std+0x60>)
 8019bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8019c34 <std+0x64>)
 8019c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8019c02:	4b0d      	ldr	r3, [pc, #52]	@ (8019c38 <std+0x68>)
 8019c04:	6224      	str	r4, [r4, #32]
 8019c06:	429c      	cmp	r4, r3
 8019c08:	d006      	beq.n	8019c18 <std+0x48>
 8019c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019c0e:	4294      	cmp	r4, r2
 8019c10:	d002      	beq.n	8019c18 <std+0x48>
 8019c12:	33d0      	adds	r3, #208	@ 0xd0
 8019c14:	429c      	cmp	r4, r3
 8019c16:	d105      	bne.n	8019c24 <std+0x54>
 8019c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c20:	f000 bb0c 	b.w	801a23c <__retarget_lock_init_recursive>
 8019c24:	bd10      	pop	{r4, pc}
 8019c26:	bf00      	nop
 8019c28:	08019edd 	.word	0x08019edd
 8019c2c:	08019eff 	.word	0x08019eff
 8019c30:	08019f37 	.word	0x08019f37
 8019c34:	08019f5b 	.word	0x08019f5b
 8019c38:	20011ee0 	.word	0x20011ee0

08019c3c <stdio_exit_handler>:
 8019c3c:	4a02      	ldr	r2, [pc, #8]	@ (8019c48 <stdio_exit_handler+0xc>)
 8019c3e:	4903      	ldr	r1, [pc, #12]	@ (8019c4c <stdio_exit_handler+0x10>)
 8019c40:	4803      	ldr	r0, [pc, #12]	@ (8019c50 <stdio_exit_handler+0x14>)
 8019c42:	f000 b869 	b.w	8019d18 <_fwalk_sglue>
 8019c46:	bf00      	nop
 8019c48:	2000001c 	.word	0x2000001c
 8019c4c:	0801bdad 	.word	0x0801bdad
 8019c50:	2000002c 	.word	0x2000002c

08019c54 <cleanup_stdio>:
 8019c54:	6841      	ldr	r1, [r0, #4]
 8019c56:	4b0c      	ldr	r3, [pc, #48]	@ (8019c88 <cleanup_stdio+0x34>)
 8019c58:	4299      	cmp	r1, r3
 8019c5a:	b510      	push	{r4, lr}
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	d001      	beq.n	8019c64 <cleanup_stdio+0x10>
 8019c60:	f002 f8a4 	bl	801bdac <_fflush_r>
 8019c64:	68a1      	ldr	r1, [r4, #8]
 8019c66:	4b09      	ldr	r3, [pc, #36]	@ (8019c8c <cleanup_stdio+0x38>)
 8019c68:	4299      	cmp	r1, r3
 8019c6a:	d002      	beq.n	8019c72 <cleanup_stdio+0x1e>
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	f002 f89d 	bl	801bdac <_fflush_r>
 8019c72:	68e1      	ldr	r1, [r4, #12]
 8019c74:	4b06      	ldr	r3, [pc, #24]	@ (8019c90 <cleanup_stdio+0x3c>)
 8019c76:	4299      	cmp	r1, r3
 8019c78:	d004      	beq.n	8019c84 <cleanup_stdio+0x30>
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c80:	f002 b894 	b.w	801bdac <_fflush_r>
 8019c84:	bd10      	pop	{r4, pc}
 8019c86:	bf00      	nop
 8019c88:	20011ee0 	.word	0x20011ee0
 8019c8c:	20011f48 	.word	0x20011f48
 8019c90:	20011fb0 	.word	0x20011fb0

08019c94 <global_stdio_init.part.0>:
 8019c94:	b510      	push	{r4, lr}
 8019c96:	4b0b      	ldr	r3, [pc, #44]	@ (8019cc4 <global_stdio_init.part.0+0x30>)
 8019c98:	4c0b      	ldr	r4, [pc, #44]	@ (8019cc8 <global_stdio_init.part.0+0x34>)
 8019c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8019ccc <global_stdio_init.part.0+0x38>)
 8019c9c:	601a      	str	r2, [r3, #0]
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	2104      	movs	r1, #4
 8019ca4:	f7ff ff94 	bl	8019bd0 <std>
 8019ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019cac:	2201      	movs	r2, #1
 8019cae:	2109      	movs	r1, #9
 8019cb0:	f7ff ff8e 	bl	8019bd0 <std>
 8019cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019cb8:	2202      	movs	r2, #2
 8019cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cbe:	2112      	movs	r1, #18
 8019cc0:	f7ff bf86 	b.w	8019bd0 <std>
 8019cc4:	20012018 	.word	0x20012018
 8019cc8:	20011ee0 	.word	0x20011ee0
 8019ccc:	08019c3d 	.word	0x08019c3d

08019cd0 <__sfp_lock_acquire>:
 8019cd0:	4801      	ldr	r0, [pc, #4]	@ (8019cd8 <__sfp_lock_acquire+0x8>)
 8019cd2:	f000 bab4 	b.w	801a23e <__retarget_lock_acquire_recursive>
 8019cd6:	bf00      	nop
 8019cd8:	2001201d 	.word	0x2001201d

08019cdc <__sfp_lock_release>:
 8019cdc:	4801      	ldr	r0, [pc, #4]	@ (8019ce4 <__sfp_lock_release+0x8>)
 8019cde:	f000 baaf 	b.w	801a240 <__retarget_lock_release_recursive>
 8019ce2:	bf00      	nop
 8019ce4:	2001201d 	.word	0x2001201d

08019ce8 <__sinit>:
 8019ce8:	b510      	push	{r4, lr}
 8019cea:	4604      	mov	r4, r0
 8019cec:	f7ff fff0 	bl	8019cd0 <__sfp_lock_acquire>
 8019cf0:	6a23      	ldr	r3, [r4, #32]
 8019cf2:	b11b      	cbz	r3, 8019cfc <__sinit+0x14>
 8019cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cf8:	f7ff bff0 	b.w	8019cdc <__sfp_lock_release>
 8019cfc:	4b04      	ldr	r3, [pc, #16]	@ (8019d10 <__sinit+0x28>)
 8019cfe:	6223      	str	r3, [r4, #32]
 8019d00:	4b04      	ldr	r3, [pc, #16]	@ (8019d14 <__sinit+0x2c>)
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d1f5      	bne.n	8019cf4 <__sinit+0xc>
 8019d08:	f7ff ffc4 	bl	8019c94 <global_stdio_init.part.0>
 8019d0c:	e7f2      	b.n	8019cf4 <__sinit+0xc>
 8019d0e:	bf00      	nop
 8019d10:	08019c55 	.word	0x08019c55
 8019d14:	20012018 	.word	0x20012018

08019d18 <_fwalk_sglue>:
 8019d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d1c:	4607      	mov	r7, r0
 8019d1e:	4688      	mov	r8, r1
 8019d20:	4614      	mov	r4, r2
 8019d22:	2600      	movs	r6, #0
 8019d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019d28:	f1b9 0901 	subs.w	r9, r9, #1
 8019d2c:	d505      	bpl.n	8019d3a <_fwalk_sglue+0x22>
 8019d2e:	6824      	ldr	r4, [r4, #0]
 8019d30:	2c00      	cmp	r4, #0
 8019d32:	d1f7      	bne.n	8019d24 <_fwalk_sglue+0xc>
 8019d34:	4630      	mov	r0, r6
 8019d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d3a:	89ab      	ldrh	r3, [r5, #12]
 8019d3c:	2b01      	cmp	r3, #1
 8019d3e:	d907      	bls.n	8019d50 <_fwalk_sglue+0x38>
 8019d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019d44:	3301      	adds	r3, #1
 8019d46:	d003      	beq.n	8019d50 <_fwalk_sglue+0x38>
 8019d48:	4629      	mov	r1, r5
 8019d4a:	4638      	mov	r0, r7
 8019d4c:	47c0      	blx	r8
 8019d4e:	4306      	orrs	r6, r0
 8019d50:	3568      	adds	r5, #104	@ 0x68
 8019d52:	e7e9      	b.n	8019d28 <_fwalk_sglue+0x10>

08019d54 <iprintf>:
 8019d54:	b40f      	push	{r0, r1, r2, r3}
 8019d56:	b507      	push	{r0, r1, r2, lr}
 8019d58:	4906      	ldr	r1, [pc, #24]	@ (8019d74 <iprintf+0x20>)
 8019d5a:	ab04      	add	r3, sp, #16
 8019d5c:	6808      	ldr	r0, [r1, #0]
 8019d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d62:	6881      	ldr	r1, [r0, #8]
 8019d64:	9301      	str	r3, [sp, #4]
 8019d66:	f001 fe85 	bl	801ba74 <_vfiprintf_r>
 8019d6a:	b003      	add	sp, #12
 8019d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d70:	b004      	add	sp, #16
 8019d72:	4770      	bx	lr
 8019d74:	20000028 	.word	0x20000028

08019d78 <_puts_r>:
 8019d78:	6a03      	ldr	r3, [r0, #32]
 8019d7a:	b570      	push	{r4, r5, r6, lr}
 8019d7c:	6884      	ldr	r4, [r0, #8]
 8019d7e:	4605      	mov	r5, r0
 8019d80:	460e      	mov	r6, r1
 8019d82:	b90b      	cbnz	r3, 8019d88 <_puts_r+0x10>
 8019d84:	f7ff ffb0 	bl	8019ce8 <__sinit>
 8019d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d8a:	07db      	lsls	r3, r3, #31
 8019d8c:	d405      	bmi.n	8019d9a <_puts_r+0x22>
 8019d8e:	89a3      	ldrh	r3, [r4, #12]
 8019d90:	0598      	lsls	r0, r3, #22
 8019d92:	d402      	bmi.n	8019d9a <_puts_r+0x22>
 8019d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d96:	f000 fa52 	bl	801a23e <__retarget_lock_acquire_recursive>
 8019d9a:	89a3      	ldrh	r3, [r4, #12]
 8019d9c:	0719      	lsls	r1, r3, #28
 8019d9e:	d502      	bpl.n	8019da6 <_puts_r+0x2e>
 8019da0:	6923      	ldr	r3, [r4, #16]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d135      	bne.n	8019e12 <_puts_r+0x9a>
 8019da6:	4621      	mov	r1, r4
 8019da8:	4628      	mov	r0, r5
 8019daa:	f000 f919 	bl	8019fe0 <__swsetup_r>
 8019dae:	b380      	cbz	r0, 8019e12 <_puts_r+0x9a>
 8019db0:	f04f 35ff 	mov.w	r5, #4294967295
 8019db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019db6:	07da      	lsls	r2, r3, #31
 8019db8:	d405      	bmi.n	8019dc6 <_puts_r+0x4e>
 8019dba:	89a3      	ldrh	r3, [r4, #12]
 8019dbc:	059b      	lsls	r3, r3, #22
 8019dbe:	d402      	bmi.n	8019dc6 <_puts_r+0x4e>
 8019dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019dc2:	f000 fa3d 	bl	801a240 <__retarget_lock_release_recursive>
 8019dc6:	4628      	mov	r0, r5
 8019dc8:	bd70      	pop	{r4, r5, r6, pc}
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	da04      	bge.n	8019dd8 <_puts_r+0x60>
 8019dce:	69a2      	ldr	r2, [r4, #24]
 8019dd0:	429a      	cmp	r2, r3
 8019dd2:	dc17      	bgt.n	8019e04 <_puts_r+0x8c>
 8019dd4:	290a      	cmp	r1, #10
 8019dd6:	d015      	beq.n	8019e04 <_puts_r+0x8c>
 8019dd8:	6823      	ldr	r3, [r4, #0]
 8019dda:	1c5a      	adds	r2, r3, #1
 8019ddc:	6022      	str	r2, [r4, #0]
 8019dde:	7019      	strb	r1, [r3, #0]
 8019de0:	68a3      	ldr	r3, [r4, #8]
 8019de2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019de6:	3b01      	subs	r3, #1
 8019de8:	60a3      	str	r3, [r4, #8]
 8019dea:	2900      	cmp	r1, #0
 8019dec:	d1ed      	bne.n	8019dca <_puts_r+0x52>
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	da11      	bge.n	8019e16 <_puts_r+0x9e>
 8019df2:	4622      	mov	r2, r4
 8019df4:	210a      	movs	r1, #10
 8019df6:	4628      	mov	r0, r5
 8019df8:	f000 f8b3 	bl	8019f62 <__swbuf_r>
 8019dfc:	3001      	adds	r0, #1
 8019dfe:	d0d7      	beq.n	8019db0 <_puts_r+0x38>
 8019e00:	250a      	movs	r5, #10
 8019e02:	e7d7      	b.n	8019db4 <_puts_r+0x3c>
 8019e04:	4622      	mov	r2, r4
 8019e06:	4628      	mov	r0, r5
 8019e08:	f000 f8ab 	bl	8019f62 <__swbuf_r>
 8019e0c:	3001      	adds	r0, #1
 8019e0e:	d1e7      	bne.n	8019de0 <_puts_r+0x68>
 8019e10:	e7ce      	b.n	8019db0 <_puts_r+0x38>
 8019e12:	3e01      	subs	r6, #1
 8019e14:	e7e4      	b.n	8019de0 <_puts_r+0x68>
 8019e16:	6823      	ldr	r3, [r4, #0]
 8019e18:	1c5a      	adds	r2, r3, #1
 8019e1a:	6022      	str	r2, [r4, #0]
 8019e1c:	220a      	movs	r2, #10
 8019e1e:	701a      	strb	r2, [r3, #0]
 8019e20:	e7ee      	b.n	8019e00 <_puts_r+0x88>
	...

08019e24 <puts>:
 8019e24:	4b02      	ldr	r3, [pc, #8]	@ (8019e30 <puts+0xc>)
 8019e26:	4601      	mov	r1, r0
 8019e28:	6818      	ldr	r0, [r3, #0]
 8019e2a:	f7ff bfa5 	b.w	8019d78 <_puts_r>
 8019e2e:	bf00      	nop
 8019e30:	20000028 	.word	0x20000028

08019e34 <sniprintf>:
 8019e34:	b40c      	push	{r2, r3}
 8019e36:	b530      	push	{r4, r5, lr}
 8019e38:	4b17      	ldr	r3, [pc, #92]	@ (8019e98 <sniprintf+0x64>)
 8019e3a:	1e0c      	subs	r4, r1, #0
 8019e3c:	681d      	ldr	r5, [r3, #0]
 8019e3e:	b09d      	sub	sp, #116	@ 0x74
 8019e40:	da08      	bge.n	8019e54 <sniprintf+0x20>
 8019e42:	238b      	movs	r3, #139	@ 0x8b
 8019e44:	602b      	str	r3, [r5, #0]
 8019e46:	f04f 30ff 	mov.w	r0, #4294967295
 8019e4a:	b01d      	add	sp, #116	@ 0x74
 8019e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e50:	b002      	add	sp, #8
 8019e52:	4770      	bx	lr
 8019e54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e5c:	bf14      	ite	ne
 8019e5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019e62:	4623      	moveq	r3, r4
 8019e64:	9304      	str	r3, [sp, #16]
 8019e66:	9307      	str	r3, [sp, #28]
 8019e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e6c:	9002      	str	r0, [sp, #8]
 8019e6e:	9006      	str	r0, [sp, #24]
 8019e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e76:	ab21      	add	r3, sp, #132	@ 0x84
 8019e78:	a902      	add	r1, sp, #8
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	9301      	str	r3, [sp, #4]
 8019e7e:	f001 fcd3 	bl	801b828 <_svfiprintf_r>
 8019e82:	1c43      	adds	r3, r0, #1
 8019e84:	bfbc      	itt	lt
 8019e86:	238b      	movlt	r3, #139	@ 0x8b
 8019e88:	602b      	strlt	r3, [r5, #0]
 8019e8a:	2c00      	cmp	r4, #0
 8019e8c:	d0dd      	beq.n	8019e4a <sniprintf+0x16>
 8019e8e:	9b02      	ldr	r3, [sp, #8]
 8019e90:	2200      	movs	r2, #0
 8019e92:	701a      	strb	r2, [r3, #0]
 8019e94:	e7d9      	b.n	8019e4a <sniprintf+0x16>
 8019e96:	bf00      	nop
 8019e98:	20000028 	.word	0x20000028

08019e9c <siprintf>:
 8019e9c:	b40e      	push	{r1, r2, r3}
 8019e9e:	b500      	push	{lr}
 8019ea0:	b09c      	sub	sp, #112	@ 0x70
 8019ea2:	ab1d      	add	r3, sp, #116	@ 0x74
 8019ea4:	9002      	str	r0, [sp, #8]
 8019ea6:	9006      	str	r0, [sp, #24]
 8019ea8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019eac:	4809      	ldr	r0, [pc, #36]	@ (8019ed4 <siprintf+0x38>)
 8019eae:	9107      	str	r1, [sp, #28]
 8019eb0:	9104      	str	r1, [sp, #16]
 8019eb2:	4909      	ldr	r1, [pc, #36]	@ (8019ed8 <siprintf+0x3c>)
 8019eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019eb8:	9105      	str	r1, [sp, #20]
 8019eba:	6800      	ldr	r0, [r0, #0]
 8019ebc:	9301      	str	r3, [sp, #4]
 8019ebe:	a902      	add	r1, sp, #8
 8019ec0:	f001 fcb2 	bl	801b828 <_svfiprintf_r>
 8019ec4:	9b02      	ldr	r3, [sp, #8]
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	701a      	strb	r2, [r3, #0]
 8019eca:	b01c      	add	sp, #112	@ 0x70
 8019ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ed0:	b003      	add	sp, #12
 8019ed2:	4770      	bx	lr
 8019ed4:	20000028 	.word	0x20000028
 8019ed8:	ffff0208 	.word	0xffff0208

08019edc <__sread>:
 8019edc:	b510      	push	{r4, lr}
 8019ede:	460c      	mov	r4, r1
 8019ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ee4:	f000 f962 	bl	801a1ac <_read_r>
 8019ee8:	2800      	cmp	r0, #0
 8019eea:	bfab      	itete	ge
 8019eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019eee:	89a3      	ldrhlt	r3, [r4, #12]
 8019ef0:	181b      	addge	r3, r3, r0
 8019ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019ef6:	bfac      	ite	ge
 8019ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019efa:	81a3      	strhlt	r3, [r4, #12]
 8019efc:	bd10      	pop	{r4, pc}

08019efe <__swrite>:
 8019efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f02:	461f      	mov	r7, r3
 8019f04:	898b      	ldrh	r3, [r1, #12]
 8019f06:	05db      	lsls	r3, r3, #23
 8019f08:	4605      	mov	r5, r0
 8019f0a:	460c      	mov	r4, r1
 8019f0c:	4616      	mov	r6, r2
 8019f0e:	d505      	bpl.n	8019f1c <__swrite+0x1e>
 8019f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f14:	2302      	movs	r3, #2
 8019f16:	2200      	movs	r2, #0
 8019f18:	f000 f936 	bl	801a188 <_lseek_r>
 8019f1c:	89a3      	ldrh	r3, [r4, #12]
 8019f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019f26:	81a3      	strh	r3, [r4, #12]
 8019f28:	4632      	mov	r2, r6
 8019f2a:	463b      	mov	r3, r7
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f32:	f000 b94d 	b.w	801a1d0 <_write_r>

08019f36 <__sseek>:
 8019f36:	b510      	push	{r4, lr}
 8019f38:	460c      	mov	r4, r1
 8019f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f3e:	f000 f923 	bl	801a188 <_lseek_r>
 8019f42:	1c43      	adds	r3, r0, #1
 8019f44:	89a3      	ldrh	r3, [r4, #12]
 8019f46:	bf15      	itete	ne
 8019f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019f52:	81a3      	strheq	r3, [r4, #12]
 8019f54:	bf18      	it	ne
 8019f56:	81a3      	strhne	r3, [r4, #12]
 8019f58:	bd10      	pop	{r4, pc}

08019f5a <__sclose>:
 8019f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f5e:	f000 b903 	b.w	801a168 <_close_r>

08019f62 <__swbuf_r>:
 8019f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f64:	460e      	mov	r6, r1
 8019f66:	4614      	mov	r4, r2
 8019f68:	4605      	mov	r5, r0
 8019f6a:	b118      	cbz	r0, 8019f74 <__swbuf_r+0x12>
 8019f6c:	6a03      	ldr	r3, [r0, #32]
 8019f6e:	b90b      	cbnz	r3, 8019f74 <__swbuf_r+0x12>
 8019f70:	f7ff feba 	bl	8019ce8 <__sinit>
 8019f74:	69a3      	ldr	r3, [r4, #24]
 8019f76:	60a3      	str	r3, [r4, #8]
 8019f78:	89a3      	ldrh	r3, [r4, #12]
 8019f7a:	071a      	lsls	r2, r3, #28
 8019f7c:	d501      	bpl.n	8019f82 <__swbuf_r+0x20>
 8019f7e:	6923      	ldr	r3, [r4, #16]
 8019f80:	b943      	cbnz	r3, 8019f94 <__swbuf_r+0x32>
 8019f82:	4621      	mov	r1, r4
 8019f84:	4628      	mov	r0, r5
 8019f86:	f000 f82b 	bl	8019fe0 <__swsetup_r>
 8019f8a:	b118      	cbz	r0, 8019f94 <__swbuf_r+0x32>
 8019f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8019f90:	4638      	mov	r0, r7
 8019f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f94:	6823      	ldr	r3, [r4, #0]
 8019f96:	6922      	ldr	r2, [r4, #16]
 8019f98:	1a98      	subs	r0, r3, r2
 8019f9a:	6963      	ldr	r3, [r4, #20]
 8019f9c:	b2f6      	uxtb	r6, r6
 8019f9e:	4283      	cmp	r3, r0
 8019fa0:	4637      	mov	r7, r6
 8019fa2:	dc05      	bgt.n	8019fb0 <__swbuf_r+0x4e>
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	4628      	mov	r0, r5
 8019fa8:	f001 ff00 	bl	801bdac <_fflush_r>
 8019fac:	2800      	cmp	r0, #0
 8019fae:	d1ed      	bne.n	8019f8c <__swbuf_r+0x2a>
 8019fb0:	68a3      	ldr	r3, [r4, #8]
 8019fb2:	3b01      	subs	r3, #1
 8019fb4:	60a3      	str	r3, [r4, #8]
 8019fb6:	6823      	ldr	r3, [r4, #0]
 8019fb8:	1c5a      	adds	r2, r3, #1
 8019fba:	6022      	str	r2, [r4, #0]
 8019fbc:	701e      	strb	r6, [r3, #0]
 8019fbe:	6962      	ldr	r2, [r4, #20]
 8019fc0:	1c43      	adds	r3, r0, #1
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d004      	beq.n	8019fd0 <__swbuf_r+0x6e>
 8019fc6:	89a3      	ldrh	r3, [r4, #12]
 8019fc8:	07db      	lsls	r3, r3, #31
 8019fca:	d5e1      	bpl.n	8019f90 <__swbuf_r+0x2e>
 8019fcc:	2e0a      	cmp	r6, #10
 8019fce:	d1df      	bne.n	8019f90 <__swbuf_r+0x2e>
 8019fd0:	4621      	mov	r1, r4
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	f001 feea 	bl	801bdac <_fflush_r>
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	d0d9      	beq.n	8019f90 <__swbuf_r+0x2e>
 8019fdc:	e7d6      	b.n	8019f8c <__swbuf_r+0x2a>
	...

08019fe0 <__swsetup_r>:
 8019fe0:	b538      	push	{r3, r4, r5, lr}
 8019fe2:	4b29      	ldr	r3, [pc, #164]	@ (801a088 <__swsetup_r+0xa8>)
 8019fe4:	4605      	mov	r5, r0
 8019fe6:	6818      	ldr	r0, [r3, #0]
 8019fe8:	460c      	mov	r4, r1
 8019fea:	b118      	cbz	r0, 8019ff4 <__swsetup_r+0x14>
 8019fec:	6a03      	ldr	r3, [r0, #32]
 8019fee:	b90b      	cbnz	r3, 8019ff4 <__swsetup_r+0x14>
 8019ff0:	f7ff fe7a 	bl	8019ce8 <__sinit>
 8019ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ff8:	0719      	lsls	r1, r3, #28
 8019ffa:	d422      	bmi.n	801a042 <__swsetup_r+0x62>
 8019ffc:	06da      	lsls	r2, r3, #27
 8019ffe:	d407      	bmi.n	801a010 <__swsetup_r+0x30>
 801a000:	2209      	movs	r2, #9
 801a002:	602a      	str	r2, [r5, #0]
 801a004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a008:	81a3      	strh	r3, [r4, #12]
 801a00a:	f04f 30ff 	mov.w	r0, #4294967295
 801a00e:	e033      	b.n	801a078 <__swsetup_r+0x98>
 801a010:	0758      	lsls	r0, r3, #29
 801a012:	d512      	bpl.n	801a03a <__swsetup_r+0x5a>
 801a014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a016:	b141      	cbz	r1, 801a02a <__swsetup_r+0x4a>
 801a018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a01c:	4299      	cmp	r1, r3
 801a01e:	d002      	beq.n	801a026 <__swsetup_r+0x46>
 801a020:	4628      	mov	r0, r5
 801a022:	f000 ff23 	bl	801ae6c <_free_r>
 801a026:	2300      	movs	r3, #0
 801a028:	6363      	str	r3, [r4, #52]	@ 0x34
 801a02a:	89a3      	ldrh	r3, [r4, #12]
 801a02c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a030:	81a3      	strh	r3, [r4, #12]
 801a032:	2300      	movs	r3, #0
 801a034:	6063      	str	r3, [r4, #4]
 801a036:	6923      	ldr	r3, [r4, #16]
 801a038:	6023      	str	r3, [r4, #0]
 801a03a:	89a3      	ldrh	r3, [r4, #12]
 801a03c:	f043 0308 	orr.w	r3, r3, #8
 801a040:	81a3      	strh	r3, [r4, #12]
 801a042:	6923      	ldr	r3, [r4, #16]
 801a044:	b94b      	cbnz	r3, 801a05a <__swsetup_r+0x7a>
 801a046:	89a3      	ldrh	r3, [r4, #12]
 801a048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a050:	d003      	beq.n	801a05a <__swsetup_r+0x7a>
 801a052:	4621      	mov	r1, r4
 801a054:	4628      	mov	r0, r5
 801a056:	f001 ff09 	bl	801be6c <__smakebuf_r>
 801a05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a05e:	f013 0201 	ands.w	r2, r3, #1
 801a062:	d00a      	beq.n	801a07a <__swsetup_r+0x9a>
 801a064:	2200      	movs	r2, #0
 801a066:	60a2      	str	r2, [r4, #8]
 801a068:	6962      	ldr	r2, [r4, #20]
 801a06a:	4252      	negs	r2, r2
 801a06c:	61a2      	str	r2, [r4, #24]
 801a06e:	6922      	ldr	r2, [r4, #16]
 801a070:	b942      	cbnz	r2, 801a084 <__swsetup_r+0xa4>
 801a072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a076:	d1c5      	bne.n	801a004 <__swsetup_r+0x24>
 801a078:	bd38      	pop	{r3, r4, r5, pc}
 801a07a:	0799      	lsls	r1, r3, #30
 801a07c:	bf58      	it	pl
 801a07e:	6962      	ldrpl	r2, [r4, #20]
 801a080:	60a2      	str	r2, [r4, #8]
 801a082:	e7f4      	b.n	801a06e <__swsetup_r+0x8e>
 801a084:	2000      	movs	r0, #0
 801a086:	e7f7      	b.n	801a078 <__swsetup_r+0x98>
 801a088:	20000028 	.word	0x20000028

0801a08c <memcmp>:
 801a08c:	b510      	push	{r4, lr}
 801a08e:	3901      	subs	r1, #1
 801a090:	4402      	add	r2, r0
 801a092:	4290      	cmp	r0, r2
 801a094:	d101      	bne.n	801a09a <memcmp+0xe>
 801a096:	2000      	movs	r0, #0
 801a098:	e005      	b.n	801a0a6 <memcmp+0x1a>
 801a09a:	7803      	ldrb	r3, [r0, #0]
 801a09c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a0a0:	42a3      	cmp	r3, r4
 801a0a2:	d001      	beq.n	801a0a8 <memcmp+0x1c>
 801a0a4:	1b18      	subs	r0, r3, r4
 801a0a6:	bd10      	pop	{r4, pc}
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	e7f2      	b.n	801a092 <memcmp+0x6>

0801a0ac <memmove>:
 801a0ac:	4288      	cmp	r0, r1
 801a0ae:	b510      	push	{r4, lr}
 801a0b0:	eb01 0402 	add.w	r4, r1, r2
 801a0b4:	d902      	bls.n	801a0bc <memmove+0x10>
 801a0b6:	4284      	cmp	r4, r0
 801a0b8:	4623      	mov	r3, r4
 801a0ba:	d807      	bhi.n	801a0cc <memmove+0x20>
 801a0bc:	1e43      	subs	r3, r0, #1
 801a0be:	42a1      	cmp	r1, r4
 801a0c0:	d008      	beq.n	801a0d4 <memmove+0x28>
 801a0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a0ca:	e7f8      	b.n	801a0be <memmove+0x12>
 801a0cc:	4402      	add	r2, r0
 801a0ce:	4601      	mov	r1, r0
 801a0d0:	428a      	cmp	r2, r1
 801a0d2:	d100      	bne.n	801a0d6 <memmove+0x2a>
 801a0d4:	bd10      	pop	{r4, pc}
 801a0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a0de:	e7f7      	b.n	801a0d0 <memmove+0x24>

0801a0e0 <memset>:
 801a0e0:	4402      	add	r2, r0
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	4293      	cmp	r3, r2
 801a0e6:	d100      	bne.n	801a0ea <memset+0xa>
 801a0e8:	4770      	bx	lr
 801a0ea:	f803 1b01 	strb.w	r1, [r3], #1
 801a0ee:	e7f9      	b.n	801a0e4 <memset+0x4>

0801a0f0 <strcat>:
 801a0f0:	b510      	push	{r4, lr}
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	7814      	ldrb	r4, [r2, #0]
 801a0f6:	4613      	mov	r3, r2
 801a0f8:	3201      	adds	r2, #1
 801a0fa:	2c00      	cmp	r4, #0
 801a0fc:	d1fa      	bne.n	801a0f4 <strcat+0x4>
 801a0fe:	3b01      	subs	r3, #1
 801a100:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a104:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a108:	2a00      	cmp	r2, #0
 801a10a:	d1f9      	bne.n	801a100 <strcat+0x10>
 801a10c:	bd10      	pop	{r4, pc}

0801a10e <strncpy>:
 801a10e:	b510      	push	{r4, lr}
 801a110:	3901      	subs	r1, #1
 801a112:	4603      	mov	r3, r0
 801a114:	b132      	cbz	r2, 801a124 <strncpy+0x16>
 801a116:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a11a:	f803 4b01 	strb.w	r4, [r3], #1
 801a11e:	3a01      	subs	r2, #1
 801a120:	2c00      	cmp	r4, #0
 801a122:	d1f7      	bne.n	801a114 <strncpy+0x6>
 801a124:	441a      	add	r2, r3
 801a126:	2100      	movs	r1, #0
 801a128:	4293      	cmp	r3, r2
 801a12a:	d100      	bne.n	801a12e <strncpy+0x20>
 801a12c:	bd10      	pop	{r4, pc}
 801a12e:	f803 1b01 	strb.w	r1, [r3], #1
 801a132:	e7f9      	b.n	801a128 <strncpy+0x1a>

0801a134 <strstr>:
 801a134:	780a      	ldrb	r2, [r1, #0]
 801a136:	b570      	push	{r4, r5, r6, lr}
 801a138:	b96a      	cbnz	r2, 801a156 <strstr+0x22>
 801a13a:	bd70      	pop	{r4, r5, r6, pc}
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d109      	bne.n	801a154 <strstr+0x20>
 801a140:	460c      	mov	r4, r1
 801a142:	4605      	mov	r5, r0
 801a144:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d0f6      	beq.n	801a13a <strstr+0x6>
 801a14c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a150:	429e      	cmp	r6, r3
 801a152:	d0f7      	beq.n	801a144 <strstr+0x10>
 801a154:	3001      	adds	r0, #1
 801a156:	7803      	ldrb	r3, [r0, #0]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d1ef      	bne.n	801a13c <strstr+0x8>
 801a15c:	4618      	mov	r0, r3
 801a15e:	e7ec      	b.n	801a13a <strstr+0x6>

0801a160 <_localeconv_r>:
 801a160:	4800      	ldr	r0, [pc, #0]	@ (801a164 <_localeconv_r+0x4>)
 801a162:	4770      	bx	lr
 801a164:	20000168 	.word	0x20000168

0801a168 <_close_r>:
 801a168:	b538      	push	{r3, r4, r5, lr}
 801a16a:	4d06      	ldr	r5, [pc, #24]	@ (801a184 <_close_r+0x1c>)
 801a16c:	2300      	movs	r3, #0
 801a16e:	4604      	mov	r4, r0
 801a170:	4608      	mov	r0, r1
 801a172:	602b      	str	r3, [r5, #0]
 801a174:	f7e7 fadc 	bl	8001730 <_close>
 801a178:	1c43      	adds	r3, r0, #1
 801a17a:	d102      	bne.n	801a182 <_close_r+0x1a>
 801a17c:	682b      	ldr	r3, [r5, #0]
 801a17e:	b103      	cbz	r3, 801a182 <_close_r+0x1a>
 801a180:	6023      	str	r3, [r4, #0]
 801a182:	bd38      	pop	{r3, r4, r5, pc}
 801a184:	20011ed8 	.word	0x20011ed8

0801a188 <_lseek_r>:
 801a188:	b538      	push	{r3, r4, r5, lr}
 801a18a:	4d07      	ldr	r5, [pc, #28]	@ (801a1a8 <_lseek_r+0x20>)
 801a18c:	4604      	mov	r4, r0
 801a18e:	4608      	mov	r0, r1
 801a190:	4611      	mov	r1, r2
 801a192:	2200      	movs	r2, #0
 801a194:	602a      	str	r2, [r5, #0]
 801a196:	461a      	mov	r2, r3
 801a198:	f7e7 faf1 	bl	800177e <_lseek>
 801a19c:	1c43      	adds	r3, r0, #1
 801a19e:	d102      	bne.n	801a1a6 <_lseek_r+0x1e>
 801a1a0:	682b      	ldr	r3, [r5, #0]
 801a1a2:	b103      	cbz	r3, 801a1a6 <_lseek_r+0x1e>
 801a1a4:	6023      	str	r3, [r4, #0]
 801a1a6:	bd38      	pop	{r3, r4, r5, pc}
 801a1a8:	20011ed8 	.word	0x20011ed8

0801a1ac <_read_r>:
 801a1ac:	b538      	push	{r3, r4, r5, lr}
 801a1ae:	4d07      	ldr	r5, [pc, #28]	@ (801a1cc <_read_r+0x20>)
 801a1b0:	4604      	mov	r4, r0
 801a1b2:	4608      	mov	r0, r1
 801a1b4:	4611      	mov	r1, r2
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	602a      	str	r2, [r5, #0]
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	f7e7 fa9b 	bl	80016f6 <_read>
 801a1c0:	1c43      	adds	r3, r0, #1
 801a1c2:	d102      	bne.n	801a1ca <_read_r+0x1e>
 801a1c4:	682b      	ldr	r3, [r5, #0]
 801a1c6:	b103      	cbz	r3, 801a1ca <_read_r+0x1e>
 801a1c8:	6023      	str	r3, [r4, #0]
 801a1ca:	bd38      	pop	{r3, r4, r5, pc}
 801a1cc:	20011ed8 	.word	0x20011ed8

0801a1d0 <_write_r>:
 801a1d0:	b538      	push	{r3, r4, r5, lr}
 801a1d2:	4d07      	ldr	r5, [pc, #28]	@ (801a1f0 <_write_r+0x20>)
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	4608      	mov	r0, r1
 801a1d8:	4611      	mov	r1, r2
 801a1da:	2200      	movs	r2, #0
 801a1dc:	602a      	str	r2, [r5, #0]
 801a1de:	461a      	mov	r2, r3
 801a1e0:	f7e6 fdb0 	bl	8000d44 <_write>
 801a1e4:	1c43      	adds	r3, r0, #1
 801a1e6:	d102      	bne.n	801a1ee <_write_r+0x1e>
 801a1e8:	682b      	ldr	r3, [r5, #0]
 801a1ea:	b103      	cbz	r3, 801a1ee <_write_r+0x1e>
 801a1ec:	6023      	str	r3, [r4, #0]
 801a1ee:	bd38      	pop	{r3, r4, r5, pc}
 801a1f0:	20011ed8 	.word	0x20011ed8

0801a1f4 <__libc_init_array>:
 801a1f4:	b570      	push	{r4, r5, r6, lr}
 801a1f6:	4d0d      	ldr	r5, [pc, #52]	@ (801a22c <__libc_init_array+0x38>)
 801a1f8:	4c0d      	ldr	r4, [pc, #52]	@ (801a230 <__libc_init_array+0x3c>)
 801a1fa:	1b64      	subs	r4, r4, r5
 801a1fc:	10a4      	asrs	r4, r4, #2
 801a1fe:	2600      	movs	r6, #0
 801a200:	42a6      	cmp	r6, r4
 801a202:	d109      	bne.n	801a218 <__libc_init_array+0x24>
 801a204:	4d0b      	ldr	r5, [pc, #44]	@ (801a234 <__libc_init_array+0x40>)
 801a206:	4c0c      	ldr	r4, [pc, #48]	@ (801a238 <__libc_init_array+0x44>)
 801a208:	f001 ff52 	bl	801c0b0 <_init>
 801a20c:	1b64      	subs	r4, r4, r5
 801a20e:	10a4      	asrs	r4, r4, #2
 801a210:	2600      	movs	r6, #0
 801a212:	42a6      	cmp	r6, r4
 801a214:	d105      	bne.n	801a222 <__libc_init_array+0x2e>
 801a216:	bd70      	pop	{r4, r5, r6, pc}
 801a218:	f855 3b04 	ldr.w	r3, [r5], #4
 801a21c:	4798      	blx	r3
 801a21e:	3601      	adds	r6, #1
 801a220:	e7ee      	b.n	801a200 <__libc_init_array+0xc>
 801a222:	f855 3b04 	ldr.w	r3, [r5], #4
 801a226:	4798      	blx	r3
 801a228:	3601      	adds	r6, #1
 801a22a:	e7f2      	b.n	801a212 <__libc_init_array+0x1e>
 801a22c:	0801fde4 	.word	0x0801fde4
 801a230:	0801fde4 	.word	0x0801fde4
 801a234:	0801fde4 	.word	0x0801fde4
 801a238:	0801fde8 	.word	0x0801fde8

0801a23c <__retarget_lock_init_recursive>:
 801a23c:	4770      	bx	lr

0801a23e <__retarget_lock_acquire_recursive>:
 801a23e:	4770      	bx	lr

0801a240 <__retarget_lock_release_recursive>:
 801a240:	4770      	bx	lr

0801a242 <strcpy>:
 801a242:	4603      	mov	r3, r0
 801a244:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a248:	f803 2b01 	strb.w	r2, [r3], #1
 801a24c:	2a00      	cmp	r2, #0
 801a24e:	d1f9      	bne.n	801a244 <strcpy+0x2>
 801a250:	4770      	bx	lr

0801a252 <memcpy>:
 801a252:	440a      	add	r2, r1
 801a254:	4291      	cmp	r1, r2
 801a256:	f100 33ff 	add.w	r3, r0, #4294967295
 801a25a:	d100      	bne.n	801a25e <memcpy+0xc>
 801a25c:	4770      	bx	lr
 801a25e:	b510      	push	{r4, lr}
 801a260:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a264:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a268:	4291      	cmp	r1, r2
 801a26a:	d1f9      	bne.n	801a260 <memcpy+0xe>
 801a26c:	bd10      	pop	{r4, pc}
	...

0801a270 <__assert_func>:
 801a270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a272:	4614      	mov	r4, r2
 801a274:	461a      	mov	r2, r3
 801a276:	4b09      	ldr	r3, [pc, #36]	@ (801a29c <__assert_func+0x2c>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4605      	mov	r5, r0
 801a27c:	68d8      	ldr	r0, [r3, #12]
 801a27e:	b954      	cbnz	r4, 801a296 <__assert_func+0x26>
 801a280:	4b07      	ldr	r3, [pc, #28]	@ (801a2a0 <__assert_func+0x30>)
 801a282:	461c      	mov	r4, r3
 801a284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a288:	9100      	str	r1, [sp, #0]
 801a28a:	462b      	mov	r3, r5
 801a28c:	4905      	ldr	r1, [pc, #20]	@ (801a2a4 <__assert_func+0x34>)
 801a28e:	f001 fdb5 	bl	801bdfc <fiprintf>
 801a292:	f001 fe59 	bl	801bf48 <abort>
 801a296:	4b04      	ldr	r3, [pc, #16]	@ (801a2a8 <__assert_func+0x38>)
 801a298:	e7f4      	b.n	801a284 <__assert_func+0x14>
 801a29a:	bf00      	nop
 801a29c:	20000028 	.word	0x20000028
 801a2a0:	0801fbed 	.word	0x0801fbed
 801a2a4:	0801fbbf 	.word	0x0801fbbf
 801a2a8:	0801fbb2 	.word	0x0801fbb2

0801a2ac <quorem>:
 801a2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b0:	6903      	ldr	r3, [r0, #16]
 801a2b2:	690c      	ldr	r4, [r1, #16]
 801a2b4:	42a3      	cmp	r3, r4
 801a2b6:	4607      	mov	r7, r0
 801a2b8:	db7e      	blt.n	801a3b8 <quorem+0x10c>
 801a2ba:	3c01      	subs	r4, #1
 801a2bc:	f101 0814 	add.w	r8, r1, #20
 801a2c0:	00a3      	lsls	r3, r4, #2
 801a2c2:	f100 0514 	add.w	r5, r0, #20
 801a2c6:	9300      	str	r3, [sp, #0]
 801a2c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a2cc:	9301      	str	r3, [sp, #4]
 801a2ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a2d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a2d6:	3301      	adds	r3, #1
 801a2d8:	429a      	cmp	r2, r3
 801a2da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a2de:	fbb2 f6f3 	udiv	r6, r2, r3
 801a2e2:	d32e      	bcc.n	801a342 <quorem+0x96>
 801a2e4:	f04f 0a00 	mov.w	sl, #0
 801a2e8:	46c4      	mov	ip, r8
 801a2ea:	46ae      	mov	lr, r5
 801a2ec:	46d3      	mov	fp, sl
 801a2ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a2f2:	b298      	uxth	r0, r3
 801a2f4:	fb06 a000 	mla	r0, r6, r0, sl
 801a2f8:	0c02      	lsrs	r2, r0, #16
 801a2fa:	0c1b      	lsrs	r3, r3, #16
 801a2fc:	fb06 2303 	mla	r3, r6, r3, r2
 801a300:	f8de 2000 	ldr.w	r2, [lr]
 801a304:	b280      	uxth	r0, r0
 801a306:	b292      	uxth	r2, r2
 801a308:	1a12      	subs	r2, r2, r0
 801a30a:	445a      	add	r2, fp
 801a30c:	f8de 0000 	ldr.w	r0, [lr]
 801a310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a314:	b29b      	uxth	r3, r3
 801a316:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a31a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a31e:	b292      	uxth	r2, r2
 801a320:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a324:	45e1      	cmp	r9, ip
 801a326:	f84e 2b04 	str.w	r2, [lr], #4
 801a32a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a32e:	d2de      	bcs.n	801a2ee <quorem+0x42>
 801a330:	9b00      	ldr	r3, [sp, #0]
 801a332:	58eb      	ldr	r3, [r5, r3]
 801a334:	b92b      	cbnz	r3, 801a342 <quorem+0x96>
 801a336:	9b01      	ldr	r3, [sp, #4]
 801a338:	3b04      	subs	r3, #4
 801a33a:	429d      	cmp	r5, r3
 801a33c:	461a      	mov	r2, r3
 801a33e:	d32f      	bcc.n	801a3a0 <quorem+0xf4>
 801a340:	613c      	str	r4, [r7, #16]
 801a342:	4638      	mov	r0, r7
 801a344:	f001 f90c 	bl	801b560 <__mcmp>
 801a348:	2800      	cmp	r0, #0
 801a34a:	db25      	blt.n	801a398 <quorem+0xec>
 801a34c:	4629      	mov	r1, r5
 801a34e:	2000      	movs	r0, #0
 801a350:	f858 2b04 	ldr.w	r2, [r8], #4
 801a354:	f8d1 c000 	ldr.w	ip, [r1]
 801a358:	fa1f fe82 	uxth.w	lr, r2
 801a35c:	fa1f f38c 	uxth.w	r3, ip
 801a360:	eba3 030e 	sub.w	r3, r3, lr
 801a364:	4403      	add	r3, r0
 801a366:	0c12      	lsrs	r2, r2, #16
 801a368:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a36c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a370:	b29b      	uxth	r3, r3
 801a372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a376:	45c1      	cmp	r9, r8
 801a378:	f841 3b04 	str.w	r3, [r1], #4
 801a37c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a380:	d2e6      	bcs.n	801a350 <quorem+0xa4>
 801a382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a38a:	b922      	cbnz	r2, 801a396 <quorem+0xea>
 801a38c:	3b04      	subs	r3, #4
 801a38e:	429d      	cmp	r5, r3
 801a390:	461a      	mov	r2, r3
 801a392:	d30b      	bcc.n	801a3ac <quorem+0x100>
 801a394:	613c      	str	r4, [r7, #16]
 801a396:	3601      	adds	r6, #1
 801a398:	4630      	mov	r0, r6
 801a39a:	b003      	add	sp, #12
 801a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a0:	6812      	ldr	r2, [r2, #0]
 801a3a2:	3b04      	subs	r3, #4
 801a3a4:	2a00      	cmp	r2, #0
 801a3a6:	d1cb      	bne.n	801a340 <quorem+0x94>
 801a3a8:	3c01      	subs	r4, #1
 801a3aa:	e7c6      	b.n	801a33a <quorem+0x8e>
 801a3ac:	6812      	ldr	r2, [r2, #0]
 801a3ae:	3b04      	subs	r3, #4
 801a3b0:	2a00      	cmp	r2, #0
 801a3b2:	d1ef      	bne.n	801a394 <quorem+0xe8>
 801a3b4:	3c01      	subs	r4, #1
 801a3b6:	e7ea      	b.n	801a38e <quorem+0xe2>
 801a3b8:	2000      	movs	r0, #0
 801a3ba:	e7ee      	b.n	801a39a <quorem+0xee>
 801a3bc:	0000      	movs	r0, r0
	...

0801a3c0 <_dtoa_r>:
 801a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c4:	ed2d 8b02 	vpush	{d8}
 801a3c8:	69c7      	ldr	r7, [r0, #28]
 801a3ca:	b091      	sub	sp, #68	@ 0x44
 801a3cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a3d0:	ec55 4b10 	vmov	r4, r5, d0
 801a3d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a3d6:	9107      	str	r1, [sp, #28]
 801a3d8:	4681      	mov	r9, r0
 801a3da:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3dc:	930d      	str	r3, [sp, #52]	@ 0x34
 801a3de:	b97f      	cbnz	r7, 801a400 <_dtoa_r+0x40>
 801a3e0:	2010      	movs	r0, #16
 801a3e2:	f000 fd8d 	bl	801af00 <malloc>
 801a3e6:	4602      	mov	r2, r0
 801a3e8:	f8c9 001c 	str.w	r0, [r9, #28]
 801a3ec:	b920      	cbnz	r0, 801a3f8 <_dtoa_r+0x38>
 801a3ee:	4ba0      	ldr	r3, [pc, #640]	@ (801a670 <_dtoa_r+0x2b0>)
 801a3f0:	21ef      	movs	r1, #239	@ 0xef
 801a3f2:	48a0      	ldr	r0, [pc, #640]	@ (801a674 <_dtoa_r+0x2b4>)
 801a3f4:	f7ff ff3c 	bl	801a270 <__assert_func>
 801a3f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a3fc:	6007      	str	r7, [r0, #0]
 801a3fe:	60c7      	str	r7, [r0, #12]
 801a400:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a404:	6819      	ldr	r1, [r3, #0]
 801a406:	b159      	cbz	r1, 801a420 <_dtoa_r+0x60>
 801a408:	685a      	ldr	r2, [r3, #4]
 801a40a:	604a      	str	r2, [r1, #4]
 801a40c:	2301      	movs	r3, #1
 801a40e:	4093      	lsls	r3, r2
 801a410:	608b      	str	r3, [r1, #8]
 801a412:	4648      	mov	r0, r9
 801a414:	f000 fe6a 	bl	801b0ec <_Bfree>
 801a418:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a41c:	2200      	movs	r2, #0
 801a41e:	601a      	str	r2, [r3, #0]
 801a420:	1e2b      	subs	r3, r5, #0
 801a422:	bfbb      	ittet	lt
 801a424:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a428:	9303      	strlt	r3, [sp, #12]
 801a42a:	2300      	movge	r3, #0
 801a42c:	2201      	movlt	r2, #1
 801a42e:	bfac      	ite	ge
 801a430:	6033      	strge	r3, [r6, #0]
 801a432:	6032      	strlt	r2, [r6, #0]
 801a434:	4b90      	ldr	r3, [pc, #576]	@ (801a678 <_dtoa_r+0x2b8>)
 801a436:	9e03      	ldr	r6, [sp, #12]
 801a438:	43b3      	bics	r3, r6
 801a43a:	d110      	bne.n	801a45e <_dtoa_r+0x9e>
 801a43c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a43e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a442:	6013      	str	r3, [r2, #0]
 801a444:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a448:	4323      	orrs	r3, r4
 801a44a:	f000 84de 	beq.w	801ae0a <_dtoa_r+0xa4a>
 801a44e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a450:	4f8a      	ldr	r7, [pc, #552]	@ (801a67c <_dtoa_r+0x2bc>)
 801a452:	2b00      	cmp	r3, #0
 801a454:	f000 84e0 	beq.w	801ae18 <_dtoa_r+0xa58>
 801a458:	1cfb      	adds	r3, r7, #3
 801a45a:	f000 bcdb 	b.w	801ae14 <_dtoa_r+0xa54>
 801a45e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a462:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a46a:	d10a      	bne.n	801a482 <_dtoa_r+0xc2>
 801a46c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a46e:	2301      	movs	r3, #1
 801a470:	6013      	str	r3, [r2, #0]
 801a472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a474:	b113      	cbz	r3, 801a47c <_dtoa_r+0xbc>
 801a476:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a478:	4b81      	ldr	r3, [pc, #516]	@ (801a680 <_dtoa_r+0x2c0>)
 801a47a:	6013      	str	r3, [r2, #0]
 801a47c:	4f81      	ldr	r7, [pc, #516]	@ (801a684 <_dtoa_r+0x2c4>)
 801a47e:	f000 bccb 	b.w	801ae18 <_dtoa_r+0xa58>
 801a482:	aa0e      	add	r2, sp, #56	@ 0x38
 801a484:	a90f      	add	r1, sp, #60	@ 0x3c
 801a486:	4648      	mov	r0, r9
 801a488:	eeb0 0b48 	vmov.f64	d0, d8
 801a48c:	f001 f918 	bl	801b6c0 <__d2b>
 801a490:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a496:	9001      	str	r0, [sp, #4]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d045      	beq.n	801a528 <_dtoa_r+0x168>
 801a49c:	eeb0 7b48 	vmov.f64	d7, d8
 801a4a0:	ee18 1a90 	vmov	r1, s17
 801a4a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a4a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a4ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a4b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a4b4:	2500      	movs	r5, #0
 801a4b6:	ee07 1a90 	vmov	s15, r1
 801a4ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a4be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a658 <_dtoa_r+0x298>
 801a4c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a660 <_dtoa_r+0x2a0>
 801a4ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a4ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a668 <_dtoa_r+0x2a8>
 801a4d2:	ee07 3a90 	vmov	s15, r3
 801a4d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a4da:	eeb0 7b46 	vmov.f64	d7, d6
 801a4de:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a4e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a4e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ee:	ee16 8a90 	vmov	r8, s13
 801a4f2:	d508      	bpl.n	801a506 <_dtoa_r+0x146>
 801a4f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a4f8:	eeb4 6b47 	vcmp.f64	d6, d7
 801a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a500:	bf18      	it	ne
 801a502:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a506:	f1b8 0f16 	cmp.w	r8, #22
 801a50a:	d82b      	bhi.n	801a564 <_dtoa_r+0x1a4>
 801a50c:	495e      	ldr	r1, [pc, #376]	@ (801a688 <_dtoa_r+0x2c8>)
 801a50e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a512:	ed91 7b00 	vldr	d7, [r1]
 801a516:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51e:	d501      	bpl.n	801a524 <_dtoa_r+0x164>
 801a520:	f108 38ff 	add.w	r8, r8, #4294967295
 801a524:	2100      	movs	r1, #0
 801a526:	e01e      	b.n	801a566 <_dtoa_r+0x1a6>
 801a528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a52a:	4413      	add	r3, r2
 801a52c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a530:	2920      	cmp	r1, #32
 801a532:	bfc1      	itttt	gt
 801a534:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a538:	408e      	lslgt	r6, r1
 801a53a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a53e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a542:	bfd6      	itet	le
 801a544:	f1c1 0120 	rsble	r1, r1, #32
 801a548:	4331      	orrgt	r1, r6
 801a54a:	fa04 f101 	lslle.w	r1, r4, r1
 801a54e:	ee07 1a90 	vmov	s15, r1
 801a552:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a556:	3b01      	subs	r3, #1
 801a558:	ee17 1a90 	vmov	r1, s15
 801a55c:	2501      	movs	r5, #1
 801a55e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a562:	e7a8      	b.n	801a4b6 <_dtoa_r+0xf6>
 801a564:	2101      	movs	r1, #1
 801a566:	1ad2      	subs	r2, r2, r3
 801a568:	1e53      	subs	r3, r2, #1
 801a56a:	9306      	str	r3, [sp, #24]
 801a56c:	bf45      	ittet	mi
 801a56e:	f1c2 0301 	rsbmi	r3, r2, #1
 801a572:	9305      	strmi	r3, [sp, #20]
 801a574:	2300      	movpl	r3, #0
 801a576:	2300      	movmi	r3, #0
 801a578:	bf4c      	ite	mi
 801a57a:	9306      	strmi	r3, [sp, #24]
 801a57c:	9305      	strpl	r3, [sp, #20]
 801a57e:	f1b8 0f00 	cmp.w	r8, #0
 801a582:	910c      	str	r1, [sp, #48]	@ 0x30
 801a584:	db18      	blt.n	801a5b8 <_dtoa_r+0x1f8>
 801a586:	9b06      	ldr	r3, [sp, #24]
 801a588:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a58c:	4443      	add	r3, r8
 801a58e:	9306      	str	r3, [sp, #24]
 801a590:	2300      	movs	r3, #0
 801a592:	9a07      	ldr	r2, [sp, #28]
 801a594:	2a09      	cmp	r2, #9
 801a596:	d849      	bhi.n	801a62c <_dtoa_r+0x26c>
 801a598:	2a05      	cmp	r2, #5
 801a59a:	bfc4      	itt	gt
 801a59c:	3a04      	subgt	r2, #4
 801a59e:	9207      	strgt	r2, [sp, #28]
 801a5a0:	9a07      	ldr	r2, [sp, #28]
 801a5a2:	f1a2 0202 	sub.w	r2, r2, #2
 801a5a6:	bfcc      	ite	gt
 801a5a8:	2400      	movgt	r4, #0
 801a5aa:	2401      	movle	r4, #1
 801a5ac:	2a03      	cmp	r2, #3
 801a5ae:	d848      	bhi.n	801a642 <_dtoa_r+0x282>
 801a5b0:	e8df f002 	tbb	[pc, r2]
 801a5b4:	3a2c2e0b 	.word	0x3a2c2e0b
 801a5b8:	9b05      	ldr	r3, [sp, #20]
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	eba3 0308 	sub.w	r3, r3, r8
 801a5c0:	9305      	str	r3, [sp, #20]
 801a5c2:	920a      	str	r2, [sp, #40]	@ 0x28
 801a5c4:	f1c8 0300 	rsb	r3, r8, #0
 801a5c8:	e7e3      	b.n	801a592 <_dtoa_r+0x1d2>
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	9208      	str	r2, [sp, #32]
 801a5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5d0:	2a00      	cmp	r2, #0
 801a5d2:	dc39      	bgt.n	801a648 <_dtoa_r+0x288>
 801a5d4:	f04f 0b01 	mov.w	fp, #1
 801a5d8:	46da      	mov	sl, fp
 801a5da:	465a      	mov	r2, fp
 801a5dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a5e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a5e4:	2100      	movs	r1, #0
 801a5e6:	2004      	movs	r0, #4
 801a5e8:	f100 0614 	add.w	r6, r0, #20
 801a5ec:	4296      	cmp	r6, r2
 801a5ee:	d930      	bls.n	801a652 <_dtoa_r+0x292>
 801a5f0:	6079      	str	r1, [r7, #4]
 801a5f2:	4648      	mov	r0, r9
 801a5f4:	9304      	str	r3, [sp, #16]
 801a5f6:	f000 fd39 	bl	801b06c <_Balloc>
 801a5fa:	9b04      	ldr	r3, [sp, #16]
 801a5fc:	4607      	mov	r7, r0
 801a5fe:	2800      	cmp	r0, #0
 801a600:	d146      	bne.n	801a690 <_dtoa_r+0x2d0>
 801a602:	4b22      	ldr	r3, [pc, #136]	@ (801a68c <_dtoa_r+0x2cc>)
 801a604:	4602      	mov	r2, r0
 801a606:	f240 11af 	movw	r1, #431	@ 0x1af
 801a60a:	e6f2      	b.n	801a3f2 <_dtoa_r+0x32>
 801a60c:	2201      	movs	r2, #1
 801a60e:	e7dd      	b.n	801a5cc <_dtoa_r+0x20c>
 801a610:	2200      	movs	r2, #0
 801a612:	9208      	str	r2, [sp, #32]
 801a614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a616:	eb08 0b02 	add.w	fp, r8, r2
 801a61a:	f10b 0a01 	add.w	sl, fp, #1
 801a61e:	4652      	mov	r2, sl
 801a620:	2a01      	cmp	r2, #1
 801a622:	bfb8      	it	lt
 801a624:	2201      	movlt	r2, #1
 801a626:	e7db      	b.n	801a5e0 <_dtoa_r+0x220>
 801a628:	2201      	movs	r2, #1
 801a62a:	e7f2      	b.n	801a612 <_dtoa_r+0x252>
 801a62c:	2401      	movs	r4, #1
 801a62e:	2200      	movs	r2, #0
 801a630:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a634:	f04f 3bff 	mov.w	fp, #4294967295
 801a638:	2100      	movs	r1, #0
 801a63a:	46da      	mov	sl, fp
 801a63c:	2212      	movs	r2, #18
 801a63e:	9109      	str	r1, [sp, #36]	@ 0x24
 801a640:	e7ce      	b.n	801a5e0 <_dtoa_r+0x220>
 801a642:	2201      	movs	r2, #1
 801a644:	9208      	str	r2, [sp, #32]
 801a646:	e7f5      	b.n	801a634 <_dtoa_r+0x274>
 801a648:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a64c:	46da      	mov	sl, fp
 801a64e:	465a      	mov	r2, fp
 801a650:	e7c6      	b.n	801a5e0 <_dtoa_r+0x220>
 801a652:	3101      	adds	r1, #1
 801a654:	0040      	lsls	r0, r0, #1
 801a656:	e7c7      	b.n	801a5e8 <_dtoa_r+0x228>
 801a658:	636f4361 	.word	0x636f4361
 801a65c:	3fd287a7 	.word	0x3fd287a7
 801a660:	8b60c8b3 	.word	0x8b60c8b3
 801a664:	3fc68a28 	.word	0x3fc68a28
 801a668:	509f79fb 	.word	0x509f79fb
 801a66c:	3fd34413 	.word	0x3fd34413
 801a670:	0801fa0e 	.word	0x0801fa0e
 801a674:	0801fbfb 	.word	0x0801fbfb
 801a678:	7ff00000 	.word	0x7ff00000
 801a67c:	0801fbf7 	.word	0x0801fbf7
 801a680:	0801fb8f 	.word	0x0801fb8f
 801a684:	0801fb8e 	.word	0x0801fb8e
 801a688:	0801fcf8 	.word	0x0801fcf8
 801a68c:	0801fc53 	.word	0x0801fc53
 801a690:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a694:	f1ba 0f0e 	cmp.w	sl, #14
 801a698:	6010      	str	r0, [r2, #0]
 801a69a:	d86f      	bhi.n	801a77c <_dtoa_r+0x3bc>
 801a69c:	2c00      	cmp	r4, #0
 801a69e:	d06d      	beq.n	801a77c <_dtoa_r+0x3bc>
 801a6a0:	f1b8 0f00 	cmp.w	r8, #0
 801a6a4:	f340 80c2 	ble.w	801a82c <_dtoa_r+0x46c>
 801a6a8:	4aca      	ldr	r2, [pc, #808]	@ (801a9d4 <_dtoa_r+0x614>)
 801a6aa:	f008 010f 	and.w	r1, r8, #15
 801a6ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a6b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a6b6:	ed92 7b00 	vldr	d7, [r2]
 801a6ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a6be:	f000 80a9 	beq.w	801a814 <_dtoa_r+0x454>
 801a6c2:	4ac5      	ldr	r2, [pc, #788]	@ (801a9d8 <_dtoa_r+0x618>)
 801a6c4:	ed92 6b08 	vldr	d6, [r2, #32]
 801a6c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a6cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a6d0:	f001 010f 	and.w	r1, r1, #15
 801a6d4:	2203      	movs	r2, #3
 801a6d6:	48c0      	ldr	r0, [pc, #768]	@ (801a9d8 <_dtoa_r+0x618>)
 801a6d8:	2900      	cmp	r1, #0
 801a6da:	f040 809d 	bne.w	801a818 <_dtoa_r+0x458>
 801a6de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a6e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a6ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6f0:	2900      	cmp	r1, #0
 801a6f2:	f000 80c1 	beq.w	801a878 <_dtoa_r+0x4b8>
 801a6f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a6fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a702:	f140 80b9 	bpl.w	801a878 <_dtoa_r+0x4b8>
 801a706:	f1ba 0f00 	cmp.w	sl, #0
 801a70a:	f000 80b5 	beq.w	801a878 <_dtoa_r+0x4b8>
 801a70e:	f1bb 0f00 	cmp.w	fp, #0
 801a712:	dd31      	ble.n	801a778 <_dtoa_r+0x3b8>
 801a714:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a718:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a71c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a720:	f108 31ff 	add.w	r1, r8, #4294967295
 801a724:	9104      	str	r1, [sp, #16]
 801a726:	3201      	adds	r2, #1
 801a728:	465c      	mov	r4, fp
 801a72a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a72e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a732:	ee07 2a90 	vmov	s15, r2
 801a736:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a73a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a73e:	ee15 2a90 	vmov	r2, s11
 801a742:	ec51 0b15 	vmov	r0, r1, d5
 801a746:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a74a:	2c00      	cmp	r4, #0
 801a74c:	f040 8098 	bne.w	801a880 <_dtoa_r+0x4c0>
 801a750:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a754:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a758:	ec41 0b17 	vmov	d7, r0, r1
 801a75c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a764:	f300 8261 	bgt.w	801ac2a <_dtoa_r+0x86a>
 801a768:	eeb1 7b47 	vneg.f64	d7, d7
 801a76c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a774:	f100 80f5 	bmi.w	801a962 <_dtoa_r+0x5a2>
 801a778:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a77c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a77e:	2a00      	cmp	r2, #0
 801a780:	f2c0 812c 	blt.w	801a9dc <_dtoa_r+0x61c>
 801a784:	f1b8 0f0e 	cmp.w	r8, #14
 801a788:	f300 8128 	bgt.w	801a9dc <_dtoa_r+0x61c>
 801a78c:	4b91      	ldr	r3, [pc, #580]	@ (801a9d4 <_dtoa_r+0x614>)
 801a78e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a792:	ed93 6b00 	vldr	d6, [r3]
 801a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a798:	2b00      	cmp	r3, #0
 801a79a:	da03      	bge.n	801a7a4 <_dtoa_r+0x3e4>
 801a79c:	f1ba 0f00 	cmp.w	sl, #0
 801a7a0:	f340 80d2 	ble.w	801a948 <_dtoa_r+0x588>
 801a7a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a7a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a7ac:	463e      	mov	r6, r7
 801a7ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a7b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a7b6:	ee15 3a10 	vmov	r3, s10
 801a7ba:	3330      	adds	r3, #48	@ 0x30
 801a7bc:	f806 3b01 	strb.w	r3, [r6], #1
 801a7c0:	1bf3      	subs	r3, r6, r7
 801a7c2:	459a      	cmp	sl, r3
 801a7c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a7c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a7cc:	f040 80f8 	bne.w	801a9c0 <_dtoa_r+0x600>
 801a7d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a7d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7dc:	f300 80dd 	bgt.w	801a99a <_dtoa_r+0x5da>
 801a7e0:	eeb4 7b46 	vcmp.f64	d7, d6
 801a7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e8:	d104      	bne.n	801a7f4 <_dtoa_r+0x434>
 801a7ea:	ee15 3a10 	vmov	r3, s10
 801a7ee:	07db      	lsls	r3, r3, #31
 801a7f0:	f100 80d3 	bmi.w	801a99a <_dtoa_r+0x5da>
 801a7f4:	9901      	ldr	r1, [sp, #4]
 801a7f6:	4648      	mov	r0, r9
 801a7f8:	f000 fc78 	bl	801b0ec <_Bfree>
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a800:	7033      	strb	r3, [r6, #0]
 801a802:	f108 0301 	add.w	r3, r8, #1
 801a806:	6013      	str	r3, [r2, #0]
 801a808:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	f000 8304 	beq.w	801ae18 <_dtoa_r+0xa58>
 801a810:	601e      	str	r6, [r3, #0]
 801a812:	e301      	b.n	801ae18 <_dtoa_r+0xa58>
 801a814:	2202      	movs	r2, #2
 801a816:	e75e      	b.n	801a6d6 <_dtoa_r+0x316>
 801a818:	07cc      	lsls	r4, r1, #31
 801a81a:	d504      	bpl.n	801a826 <_dtoa_r+0x466>
 801a81c:	ed90 6b00 	vldr	d6, [r0]
 801a820:	3201      	adds	r2, #1
 801a822:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a826:	1049      	asrs	r1, r1, #1
 801a828:	3008      	adds	r0, #8
 801a82a:	e755      	b.n	801a6d8 <_dtoa_r+0x318>
 801a82c:	d022      	beq.n	801a874 <_dtoa_r+0x4b4>
 801a82e:	f1c8 0100 	rsb	r1, r8, #0
 801a832:	4a68      	ldr	r2, [pc, #416]	@ (801a9d4 <_dtoa_r+0x614>)
 801a834:	f001 000f 	and.w	r0, r1, #15
 801a838:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a83c:	ed92 7b00 	vldr	d7, [r2]
 801a840:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a844:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a848:	4863      	ldr	r0, [pc, #396]	@ (801a9d8 <_dtoa_r+0x618>)
 801a84a:	1109      	asrs	r1, r1, #4
 801a84c:	2400      	movs	r4, #0
 801a84e:	2202      	movs	r2, #2
 801a850:	b929      	cbnz	r1, 801a85e <_dtoa_r+0x49e>
 801a852:	2c00      	cmp	r4, #0
 801a854:	f43f af49 	beq.w	801a6ea <_dtoa_r+0x32a>
 801a858:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a85c:	e745      	b.n	801a6ea <_dtoa_r+0x32a>
 801a85e:	07ce      	lsls	r6, r1, #31
 801a860:	d505      	bpl.n	801a86e <_dtoa_r+0x4ae>
 801a862:	ed90 6b00 	vldr	d6, [r0]
 801a866:	3201      	adds	r2, #1
 801a868:	2401      	movs	r4, #1
 801a86a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a86e:	1049      	asrs	r1, r1, #1
 801a870:	3008      	adds	r0, #8
 801a872:	e7ed      	b.n	801a850 <_dtoa_r+0x490>
 801a874:	2202      	movs	r2, #2
 801a876:	e738      	b.n	801a6ea <_dtoa_r+0x32a>
 801a878:	f8cd 8010 	str.w	r8, [sp, #16]
 801a87c:	4654      	mov	r4, sl
 801a87e:	e754      	b.n	801a72a <_dtoa_r+0x36a>
 801a880:	4a54      	ldr	r2, [pc, #336]	@ (801a9d4 <_dtoa_r+0x614>)
 801a882:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a886:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a88a:	9a08      	ldr	r2, [sp, #32]
 801a88c:	ec41 0b17 	vmov	d7, r0, r1
 801a890:	443c      	add	r4, r7
 801a892:	b34a      	cbz	r2, 801a8e8 <_dtoa_r+0x528>
 801a894:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a898:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a89c:	463e      	mov	r6, r7
 801a89e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a8a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a8a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a8aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a8ae:	ee14 2a90 	vmov	r2, s9
 801a8b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a8b6:	3230      	adds	r2, #48	@ 0x30
 801a8b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a8bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8c4:	f806 2b01 	strb.w	r2, [r6], #1
 801a8c8:	d438      	bmi.n	801a93c <_dtoa_r+0x57c>
 801a8ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a8ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d6:	d462      	bmi.n	801a99e <_dtoa_r+0x5de>
 801a8d8:	42a6      	cmp	r6, r4
 801a8da:	f43f af4d 	beq.w	801a778 <_dtoa_r+0x3b8>
 801a8de:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a8e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8e6:	e7e0      	b.n	801a8aa <_dtoa_r+0x4ea>
 801a8e8:	4621      	mov	r1, r4
 801a8ea:	463e      	mov	r6, r7
 801a8ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a8f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a8f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a8f8:	ee14 2a90 	vmov	r2, s9
 801a8fc:	3230      	adds	r2, #48	@ 0x30
 801a8fe:	f806 2b01 	strb.w	r2, [r6], #1
 801a902:	42a6      	cmp	r6, r4
 801a904:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a908:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a90c:	d119      	bne.n	801a942 <_dtoa_r+0x582>
 801a90e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a912:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a916:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a91e:	dc3e      	bgt.n	801a99e <_dtoa_r+0x5de>
 801a920:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a924:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a92c:	f57f af24 	bpl.w	801a778 <_dtoa_r+0x3b8>
 801a930:	460e      	mov	r6, r1
 801a932:	3901      	subs	r1, #1
 801a934:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a938:	2b30      	cmp	r3, #48	@ 0x30
 801a93a:	d0f9      	beq.n	801a930 <_dtoa_r+0x570>
 801a93c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a940:	e758      	b.n	801a7f4 <_dtoa_r+0x434>
 801a942:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a946:	e7d5      	b.n	801a8f4 <_dtoa_r+0x534>
 801a948:	d10b      	bne.n	801a962 <_dtoa_r+0x5a2>
 801a94a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a94e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a952:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a95e:	f2c0 8161 	blt.w	801ac24 <_dtoa_r+0x864>
 801a962:	2400      	movs	r4, #0
 801a964:	4625      	mov	r5, r4
 801a966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a968:	43db      	mvns	r3, r3
 801a96a:	9304      	str	r3, [sp, #16]
 801a96c:	463e      	mov	r6, r7
 801a96e:	f04f 0800 	mov.w	r8, #0
 801a972:	4621      	mov	r1, r4
 801a974:	4648      	mov	r0, r9
 801a976:	f000 fbb9 	bl	801b0ec <_Bfree>
 801a97a:	2d00      	cmp	r5, #0
 801a97c:	d0de      	beq.n	801a93c <_dtoa_r+0x57c>
 801a97e:	f1b8 0f00 	cmp.w	r8, #0
 801a982:	d005      	beq.n	801a990 <_dtoa_r+0x5d0>
 801a984:	45a8      	cmp	r8, r5
 801a986:	d003      	beq.n	801a990 <_dtoa_r+0x5d0>
 801a988:	4641      	mov	r1, r8
 801a98a:	4648      	mov	r0, r9
 801a98c:	f000 fbae 	bl	801b0ec <_Bfree>
 801a990:	4629      	mov	r1, r5
 801a992:	4648      	mov	r0, r9
 801a994:	f000 fbaa 	bl	801b0ec <_Bfree>
 801a998:	e7d0      	b.n	801a93c <_dtoa_r+0x57c>
 801a99a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a99e:	4633      	mov	r3, r6
 801a9a0:	461e      	mov	r6, r3
 801a9a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a9a6:	2a39      	cmp	r2, #57	@ 0x39
 801a9a8:	d106      	bne.n	801a9b8 <_dtoa_r+0x5f8>
 801a9aa:	429f      	cmp	r7, r3
 801a9ac:	d1f8      	bne.n	801a9a0 <_dtoa_r+0x5e0>
 801a9ae:	9a04      	ldr	r2, [sp, #16]
 801a9b0:	3201      	adds	r2, #1
 801a9b2:	9204      	str	r2, [sp, #16]
 801a9b4:	2230      	movs	r2, #48	@ 0x30
 801a9b6:	703a      	strb	r2, [r7, #0]
 801a9b8:	781a      	ldrb	r2, [r3, #0]
 801a9ba:	3201      	adds	r2, #1
 801a9bc:	701a      	strb	r2, [r3, #0]
 801a9be:	e7bd      	b.n	801a93c <_dtoa_r+0x57c>
 801a9c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a9c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9cc:	f47f aeef 	bne.w	801a7ae <_dtoa_r+0x3ee>
 801a9d0:	e710      	b.n	801a7f4 <_dtoa_r+0x434>
 801a9d2:	bf00      	nop
 801a9d4:	0801fcf8 	.word	0x0801fcf8
 801a9d8:	0801fcd0 	.word	0x0801fcd0
 801a9dc:	9908      	ldr	r1, [sp, #32]
 801a9de:	2900      	cmp	r1, #0
 801a9e0:	f000 80e3 	beq.w	801abaa <_dtoa_r+0x7ea>
 801a9e4:	9907      	ldr	r1, [sp, #28]
 801a9e6:	2901      	cmp	r1, #1
 801a9e8:	f300 80c8 	bgt.w	801ab7c <_dtoa_r+0x7bc>
 801a9ec:	2d00      	cmp	r5, #0
 801a9ee:	f000 80c1 	beq.w	801ab74 <_dtoa_r+0x7b4>
 801a9f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a9f6:	9e05      	ldr	r6, [sp, #20]
 801a9f8:	461c      	mov	r4, r3
 801a9fa:	9304      	str	r3, [sp, #16]
 801a9fc:	9b05      	ldr	r3, [sp, #20]
 801a9fe:	4413      	add	r3, r2
 801aa00:	9305      	str	r3, [sp, #20]
 801aa02:	9b06      	ldr	r3, [sp, #24]
 801aa04:	2101      	movs	r1, #1
 801aa06:	4413      	add	r3, r2
 801aa08:	4648      	mov	r0, r9
 801aa0a:	9306      	str	r3, [sp, #24]
 801aa0c:	f000 fc22 	bl	801b254 <__i2b>
 801aa10:	9b04      	ldr	r3, [sp, #16]
 801aa12:	4605      	mov	r5, r0
 801aa14:	b166      	cbz	r6, 801aa30 <_dtoa_r+0x670>
 801aa16:	9a06      	ldr	r2, [sp, #24]
 801aa18:	2a00      	cmp	r2, #0
 801aa1a:	dd09      	ble.n	801aa30 <_dtoa_r+0x670>
 801aa1c:	42b2      	cmp	r2, r6
 801aa1e:	9905      	ldr	r1, [sp, #20]
 801aa20:	bfa8      	it	ge
 801aa22:	4632      	movge	r2, r6
 801aa24:	1a89      	subs	r1, r1, r2
 801aa26:	9105      	str	r1, [sp, #20]
 801aa28:	9906      	ldr	r1, [sp, #24]
 801aa2a:	1ab6      	subs	r6, r6, r2
 801aa2c:	1a8a      	subs	r2, r1, r2
 801aa2e:	9206      	str	r2, [sp, #24]
 801aa30:	b1fb      	cbz	r3, 801aa72 <_dtoa_r+0x6b2>
 801aa32:	9a08      	ldr	r2, [sp, #32]
 801aa34:	2a00      	cmp	r2, #0
 801aa36:	f000 80bc 	beq.w	801abb2 <_dtoa_r+0x7f2>
 801aa3a:	b19c      	cbz	r4, 801aa64 <_dtoa_r+0x6a4>
 801aa3c:	4629      	mov	r1, r5
 801aa3e:	4622      	mov	r2, r4
 801aa40:	4648      	mov	r0, r9
 801aa42:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa44:	f000 fcc6 	bl	801b3d4 <__pow5mult>
 801aa48:	9a01      	ldr	r2, [sp, #4]
 801aa4a:	4601      	mov	r1, r0
 801aa4c:	4605      	mov	r5, r0
 801aa4e:	4648      	mov	r0, r9
 801aa50:	f000 fc16 	bl	801b280 <__multiply>
 801aa54:	9901      	ldr	r1, [sp, #4]
 801aa56:	9004      	str	r0, [sp, #16]
 801aa58:	4648      	mov	r0, r9
 801aa5a:	f000 fb47 	bl	801b0ec <_Bfree>
 801aa5e:	9a04      	ldr	r2, [sp, #16]
 801aa60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa62:	9201      	str	r2, [sp, #4]
 801aa64:	1b1a      	subs	r2, r3, r4
 801aa66:	d004      	beq.n	801aa72 <_dtoa_r+0x6b2>
 801aa68:	9901      	ldr	r1, [sp, #4]
 801aa6a:	4648      	mov	r0, r9
 801aa6c:	f000 fcb2 	bl	801b3d4 <__pow5mult>
 801aa70:	9001      	str	r0, [sp, #4]
 801aa72:	2101      	movs	r1, #1
 801aa74:	4648      	mov	r0, r9
 801aa76:	f000 fbed 	bl	801b254 <__i2b>
 801aa7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa7c:	4604      	mov	r4, r0
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	f000 81d0 	beq.w	801ae24 <_dtoa_r+0xa64>
 801aa84:	461a      	mov	r2, r3
 801aa86:	4601      	mov	r1, r0
 801aa88:	4648      	mov	r0, r9
 801aa8a:	f000 fca3 	bl	801b3d4 <__pow5mult>
 801aa8e:	9b07      	ldr	r3, [sp, #28]
 801aa90:	2b01      	cmp	r3, #1
 801aa92:	4604      	mov	r4, r0
 801aa94:	f300 8095 	bgt.w	801abc2 <_dtoa_r+0x802>
 801aa98:	9b02      	ldr	r3, [sp, #8]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	f040 808b 	bne.w	801abb6 <_dtoa_r+0x7f6>
 801aaa0:	9b03      	ldr	r3, [sp, #12]
 801aaa2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aaa6:	2a00      	cmp	r2, #0
 801aaa8:	f040 8087 	bne.w	801abba <_dtoa_r+0x7fa>
 801aaac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801aab0:	0d12      	lsrs	r2, r2, #20
 801aab2:	0512      	lsls	r2, r2, #20
 801aab4:	2a00      	cmp	r2, #0
 801aab6:	f000 8082 	beq.w	801abbe <_dtoa_r+0x7fe>
 801aaba:	9b05      	ldr	r3, [sp, #20]
 801aabc:	3301      	adds	r3, #1
 801aabe:	9305      	str	r3, [sp, #20]
 801aac0:	9b06      	ldr	r3, [sp, #24]
 801aac2:	3301      	adds	r3, #1
 801aac4:	9306      	str	r3, [sp, #24]
 801aac6:	2301      	movs	r3, #1
 801aac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aaca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aacc:	2b00      	cmp	r3, #0
 801aace:	f000 81af 	beq.w	801ae30 <_dtoa_r+0xa70>
 801aad2:	6922      	ldr	r2, [r4, #16]
 801aad4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aad8:	6910      	ldr	r0, [r2, #16]
 801aada:	f000 fb6f 	bl	801b1bc <__hi0bits>
 801aade:	f1c0 0020 	rsb	r0, r0, #32
 801aae2:	9b06      	ldr	r3, [sp, #24]
 801aae4:	4418      	add	r0, r3
 801aae6:	f010 001f 	ands.w	r0, r0, #31
 801aaea:	d076      	beq.n	801abda <_dtoa_r+0x81a>
 801aaec:	f1c0 0220 	rsb	r2, r0, #32
 801aaf0:	2a04      	cmp	r2, #4
 801aaf2:	dd69      	ble.n	801abc8 <_dtoa_r+0x808>
 801aaf4:	9b05      	ldr	r3, [sp, #20]
 801aaf6:	f1c0 001c 	rsb	r0, r0, #28
 801aafa:	4403      	add	r3, r0
 801aafc:	9305      	str	r3, [sp, #20]
 801aafe:	9b06      	ldr	r3, [sp, #24]
 801ab00:	4406      	add	r6, r0
 801ab02:	4403      	add	r3, r0
 801ab04:	9306      	str	r3, [sp, #24]
 801ab06:	9b05      	ldr	r3, [sp, #20]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	dd05      	ble.n	801ab18 <_dtoa_r+0x758>
 801ab0c:	9901      	ldr	r1, [sp, #4]
 801ab0e:	461a      	mov	r2, r3
 801ab10:	4648      	mov	r0, r9
 801ab12:	f000 fcb9 	bl	801b488 <__lshift>
 801ab16:	9001      	str	r0, [sp, #4]
 801ab18:	9b06      	ldr	r3, [sp, #24]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	dd05      	ble.n	801ab2a <_dtoa_r+0x76a>
 801ab1e:	4621      	mov	r1, r4
 801ab20:	461a      	mov	r2, r3
 801ab22:	4648      	mov	r0, r9
 801ab24:	f000 fcb0 	bl	801b488 <__lshift>
 801ab28:	4604      	mov	r4, r0
 801ab2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d056      	beq.n	801abde <_dtoa_r+0x81e>
 801ab30:	9801      	ldr	r0, [sp, #4]
 801ab32:	4621      	mov	r1, r4
 801ab34:	f000 fd14 	bl	801b560 <__mcmp>
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	da50      	bge.n	801abde <_dtoa_r+0x81e>
 801ab3c:	f108 33ff 	add.w	r3, r8, #4294967295
 801ab40:	9304      	str	r3, [sp, #16]
 801ab42:	9901      	ldr	r1, [sp, #4]
 801ab44:	2300      	movs	r3, #0
 801ab46:	220a      	movs	r2, #10
 801ab48:	4648      	mov	r0, r9
 801ab4a:	f000 faf1 	bl	801b130 <__multadd>
 801ab4e:	9b08      	ldr	r3, [sp, #32]
 801ab50:	9001      	str	r0, [sp, #4]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	f000 816e 	beq.w	801ae34 <_dtoa_r+0xa74>
 801ab58:	4629      	mov	r1, r5
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	220a      	movs	r2, #10
 801ab5e:	4648      	mov	r0, r9
 801ab60:	f000 fae6 	bl	801b130 <__multadd>
 801ab64:	f1bb 0f00 	cmp.w	fp, #0
 801ab68:	4605      	mov	r5, r0
 801ab6a:	dc64      	bgt.n	801ac36 <_dtoa_r+0x876>
 801ab6c:	9b07      	ldr	r3, [sp, #28]
 801ab6e:	2b02      	cmp	r3, #2
 801ab70:	dc3e      	bgt.n	801abf0 <_dtoa_r+0x830>
 801ab72:	e060      	b.n	801ac36 <_dtoa_r+0x876>
 801ab74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ab7a:	e73c      	b.n	801a9f6 <_dtoa_r+0x636>
 801ab7c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801ab80:	42a3      	cmp	r3, r4
 801ab82:	bfbf      	itttt	lt
 801ab84:	1ae2      	sublt	r2, r4, r3
 801ab86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ab88:	189b      	addlt	r3, r3, r2
 801ab8a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801ab8c:	bfae      	itee	ge
 801ab8e:	1b1c      	subge	r4, r3, r4
 801ab90:	4623      	movlt	r3, r4
 801ab92:	2400      	movlt	r4, #0
 801ab94:	f1ba 0f00 	cmp.w	sl, #0
 801ab98:	bfb5      	itete	lt
 801ab9a:	9a05      	ldrlt	r2, [sp, #20]
 801ab9c:	9e05      	ldrge	r6, [sp, #20]
 801ab9e:	eba2 060a 	sublt.w	r6, r2, sl
 801aba2:	4652      	movge	r2, sl
 801aba4:	bfb8      	it	lt
 801aba6:	2200      	movlt	r2, #0
 801aba8:	e727      	b.n	801a9fa <_dtoa_r+0x63a>
 801abaa:	9e05      	ldr	r6, [sp, #20]
 801abac:	9d08      	ldr	r5, [sp, #32]
 801abae:	461c      	mov	r4, r3
 801abb0:	e730      	b.n	801aa14 <_dtoa_r+0x654>
 801abb2:	461a      	mov	r2, r3
 801abb4:	e758      	b.n	801aa68 <_dtoa_r+0x6a8>
 801abb6:	2300      	movs	r3, #0
 801abb8:	e786      	b.n	801aac8 <_dtoa_r+0x708>
 801abba:	9b02      	ldr	r3, [sp, #8]
 801abbc:	e784      	b.n	801aac8 <_dtoa_r+0x708>
 801abbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801abc0:	e783      	b.n	801aaca <_dtoa_r+0x70a>
 801abc2:	2300      	movs	r3, #0
 801abc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801abc6:	e784      	b.n	801aad2 <_dtoa_r+0x712>
 801abc8:	d09d      	beq.n	801ab06 <_dtoa_r+0x746>
 801abca:	9b05      	ldr	r3, [sp, #20]
 801abcc:	321c      	adds	r2, #28
 801abce:	4413      	add	r3, r2
 801abd0:	9305      	str	r3, [sp, #20]
 801abd2:	9b06      	ldr	r3, [sp, #24]
 801abd4:	4416      	add	r6, r2
 801abd6:	4413      	add	r3, r2
 801abd8:	e794      	b.n	801ab04 <_dtoa_r+0x744>
 801abda:	4602      	mov	r2, r0
 801abdc:	e7f5      	b.n	801abca <_dtoa_r+0x80a>
 801abde:	f1ba 0f00 	cmp.w	sl, #0
 801abe2:	f8cd 8010 	str.w	r8, [sp, #16]
 801abe6:	46d3      	mov	fp, sl
 801abe8:	dc21      	bgt.n	801ac2e <_dtoa_r+0x86e>
 801abea:	9b07      	ldr	r3, [sp, #28]
 801abec:	2b02      	cmp	r3, #2
 801abee:	dd1e      	ble.n	801ac2e <_dtoa_r+0x86e>
 801abf0:	f1bb 0f00 	cmp.w	fp, #0
 801abf4:	f47f aeb7 	bne.w	801a966 <_dtoa_r+0x5a6>
 801abf8:	4621      	mov	r1, r4
 801abfa:	465b      	mov	r3, fp
 801abfc:	2205      	movs	r2, #5
 801abfe:	4648      	mov	r0, r9
 801ac00:	f000 fa96 	bl	801b130 <__multadd>
 801ac04:	4601      	mov	r1, r0
 801ac06:	4604      	mov	r4, r0
 801ac08:	9801      	ldr	r0, [sp, #4]
 801ac0a:	f000 fca9 	bl	801b560 <__mcmp>
 801ac0e:	2800      	cmp	r0, #0
 801ac10:	f77f aea9 	ble.w	801a966 <_dtoa_r+0x5a6>
 801ac14:	463e      	mov	r6, r7
 801ac16:	2331      	movs	r3, #49	@ 0x31
 801ac18:	f806 3b01 	strb.w	r3, [r6], #1
 801ac1c:	9b04      	ldr	r3, [sp, #16]
 801ac1e:	3301      	adds	r3, #1
 801ac20:	9304      	str	r3, [sp, #16]
 801ac22:	e6a4      	b.n	801a96e <_dtoa_r+0x5ae>
 801ac24:	f8cd 8010 	str.w	r8, [sp, #16]
 801ac28:	4654      	mov	r4, sl
 801ac2a:	4625      	mov	r5, r4
 801ac2c:	e7f2      	b.n	801ac14 <_dtoa_r+0x854>
 801ac2e:	9b08      	ldr	r3, [sp, #32]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	f000 8103 	beq.w	801ae3c <_dtoa_r+0xa7c>
 801ac36:	2e00      	cmp	r6, #0
 801ac38:	dd05      	ble.n	801ac46 <_dtoa_r+0x886>
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	4632      	mov	r2, r6
 801ac3e:	4648      	mov	r0, r9
 801ac40:	f000 fc22 	bl	801b488 <__lshift>
 801ac44:	4605      	mov	r5, r0
 801ac46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d058      	beq.n	801acfe <_dtoa_r+0x93e>
 801ac4c:	6869      	ldr	r1, [r5, #4]
 801ac4e:	4648      	mov	r0, r9
 801ac50:	f000 fa0c 	bl	801b06c <_Balloc>
 801ac54:	4606      	mov	r6, r0
 801ac56:	b928      	cbnz	r0, 801ac64 <_dtoa_r+0x8a4>
 801ac58:	4b82      	ldr	r3, [pc, #520]	@ (801ae64 <_dtoa_r+0xaa4>)
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ac60:	f7ff bbc7 	b.w	801a3f2 <_dtoa_r+0x32>
 801ac64:	692a      	ldr	r2, [r5, #16]
 801ac66:	3202      	adds	r2, #2
 801ac68:	0092      	lsls	r2, r2, #2
 801ac6a:	f105 010c 	add.w	r1, r5, #12
 801ac6e:	300c      	adds	r0, #12
 801ac70:	f7ff faef 	bl	801a252 <memcpy>
 801ac74:	2201      	movs	r2, #1
 801ac76:	4631      	mov	r1, r6
 801ac78:	4648      	mov	r0, r9
 801ac7a:	f000 fc05 	bl	801b488 <__lshift>
 801ac7e:	1c7b      	adds	r3, r7, #1
 801ac80:	9305      	str	r3, [sp, #20]
 801ac82:	eb07 030b 	add.w	r3, r7, fp
 801ac86:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac88:	9b02      	ldr	r3, [sp, #8]
 801ac8a:	f003 0301 	and.w	r3, r3, #1
 801ac8e:	46a8      	mov	r8, r5
 801ac90:	9308      	str	r3, [sp, #32]
 801ac92:	4605      	mov	r5, r0
 801ac94:	9b05      	ldr	r3, [sp, #20]
 801ac96:	9801      	ldr	r0, [sp, #4]
 801ac98:	4621      	mov	r1, r4
 801ac9a:	f103 3bff 	add.w	fp, r3, #4294967295
 801ac9e:	f7ff fb05 	bl	801a2ac <quorem>
 801aca2:	4641      	mov	r1, r8
 801aca4:	9002      	str	r0, [sp, #8]
 801aca6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801acaa:	9801      	ldr	r0, [sp, #4]
 801acac:	f000 fc58 	bl	801b560 <__mcmp>
 801acb0:	462a      	mov	r2, r5
 801acb2:	9006      	str	r0, [sp, #24]
 801acb4:	4621      	mov	r1, r4
 801acb6:	4648      	mov	r0, r9
 801acb8:	f000 fc6e 	bl	801b598 <__mdiff>
 801acbc:	68c2      	ldr	r2, [r0, #12]
 801acbe:	4606      	mov	r6, r0
 801acc0:	b9fa      	cbnz	r2, 801ad02 <_dtoa_r+0x942>
 801acc2:	4601      	mov	r1, r0
 801acc4:	9801      	ldr	r0, [sp, #4]
 801acc6:	f000 fc4b 	bl	801b560 <__mcmp>
 801acca:	4602      	mov	r2, r0
 801accc:	4631      	mov	r1, r6
 801acce:	4648      	mov	r0, r9
 801acd0:	920a      	str	r2, [sp, #40]	@ 0x28
 801acd2:	f000 fa0b 	bl	801b0ec <_Bfree>
 801acd6:	9b07      	ldr	r3, [sp, #28]
 801acd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801acda:	9e05      	ldr	r6, [sp, #20]
 801acdc:	ea43 0102 	orr.w	r1, r3, r2
 801ace0:	9b08      	ldr	r3, [sp, #32]
 801ace2:	4319      	orrs	r1, r3
 801ace4:	d10f      	bne.n	801ad06 <_dtoa_r+0x946>
 801ace6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801acea:	d028      	beq.n	801ad3e <_dtoa_r+0x97e>
 801acec:	9b06      	ldr	r3, [sp, #24]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	dd02      	ble.n	801acf8 <_dtoa_r+0x938>
 801acf2:	9b02      	ldr	r3, [sp, #8]
 801acf4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801acf8:	f88b a000 	strb.w	sl, [fp]
 801acfc:	e639      	b.n	801a972 <_dtoa_r+0x5b2>
 801acfe:	4628      	mov	r0, r5
 801ad00:	e7bd      	b.n	801ac7e <_dtoa_r+0x8be>
 801ad02:	2201      	movs	r2, #1
 801ad04:	e7e2      	b.n	801accc <_dtoa_r+0x90c>
 801ad06:	9b06      	ldr	r3, [sp, #24]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	db04      	blt.n	801ad16 <_dtoa_r+0x956>
 801ad0c:	9907      	ldr	r1, [sp, #28]
 801ad0e:	430b      	orrs	r3, r1
 801ad10:	9908      	ldr	r1, [sp, #32]
 801ad12:	430b      	orrs	r3, r1
 801ad14:	d120      	bne.n	801ad58 <_dtoa_r+0x998>
 801ad16:	2a00      	cmp	r2, #0
 801ad18:	ddee      	ble.n	801acf8 <_dtoa_r+0x938>
 801ad1a:	9901      	ldr	r1, [sp, #4]
 801ad1c:	2201      	movs	r2, #1
 801ad1e:	4648      	mov	r0, r9
 801ad20:	f000 fbb2 	bl	801b488 <__lshift>
 801ad24:	4621      	mov	r1, r4
 801ad26:	9001      	str	r0, [sp, #4]
 801ad28:	f000 fc1a 	bl	801b560 <__mcmp>
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	dc03      	bgt.n	801ad38 <_dtoa_r+0x978>
 801ad30:	d1e2      	bne.n	801acf8 <_dtoa_r+0x938>
 801ad32:	f01a 0f01 	tst.w	sl, #1
 801ad36:	d0df      	beq.n	801acf8 <_dtoa_r+0x938>
 801ad38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ad3c:	d1d9      	bne.n	801acf2 <_dtoa_r+0x932>
 801ad3e:	2339      	movs	r3, #57	@ 0x39
 801ad40:	f88b 3000 	strb.w	r3, [fp]
 801ad44:	4633      	mov	r3, r6
 801ad46:	461e      	mov	r6, r3
 801ad48:	3b01      	subs	r3, #1
 801ad4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ad4e:	2a39      	cmp	r2, #57	@ 0x39
 801ad50:	d053      	beq.n	801adfa <_dtoa_r+0xa3a>
 801ad52:	3201      	adds	r2, #1
 801ad54:	701a      	strb	r2, [r3, #0]
 801ad56:	e60c      	b.n	801a972 <_dtoa_r+0x5b2>
 801ad58:	2a00      	cmp	r2, #0
 801ad5a:	dd07      	ble.n	801ad6c <_dtoa_r+0x9ac>
 801ad5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ad60:	d0ed      	beq.n	801ad3e <_dtoa_r+0x97e>
 801ad62:	f10a 0301 	add.w	r3, sl, #1
 801ad66:	f88b 3000 	strb.w	r3, [fp]
 801ad6a:	e602      	b.n	801a972 <_dtoa_r+0x5b2>
 801ad6c:	9b05      	ldr	r3, [sp, #20]
 801ad6e:	9a05      	ldr	r2, [sp, #20]
 801ad70:	f803 ac01 	strb.w	sl, [r3, #-1]
 801ad74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d029      	beq.n	801adce <_dtoa_r+0xa0e>
 801ad7a:	9901      	ldr	r1, [sp, #4]
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	220a      	movs	r2, #10
 801ad80:	4648      	mov	r0, r9
 801ad82:	f000 f9d5 	bl	801b130 <__multadd>
 801ad86:	45a8      	cmp	r8, r5
 801ad88:	9001      	str	r0, [sp, #4]
 801ad8a:	f04f 0300 	mov.w	r3, #0
 801ad8e:	f04f 020a 	mov.w	r2, #10
 801ad92:	4641      	mov	r1, r8
 801ad94:	4648      	mov	r0, r9
 801ad96:	d107      	bne.n	801ada8 <_dtoa_r+0x9e8>
 801ad98:	f000 f9ca 	bl	801b130 <__multadd>
 801ad9c:	4680      	mov	r8, r0
 801ad9e:	4605      	mov	r5, r0
 801ada0:	9b05      	ldr	r3, [sp, #20]
 801ada2:	3301      	adds	r3, #1
 801ada4:	9305      	str	r3, [sp, #20]
 801ada6:	e775      	b.n	801ac94 <_dtoa_r+0x8d4>
 801ada8:	f000 f9c2 	bl	801b130 <__multadd>
 801adac:	4629      	mov	r1, r5
 801adae:	4680      	mov	r8, r0
 801adb0:	2300      	movs	r3, #0
 801adb2:	220a      	movs	r2, #10
 801adb4:	4648      	mov	r0, r9
 801adb6:	f000 f9bb 	bl	801b130 <__multadd>
 801adba:	4605      	mov	r5, r0
 801adbc:	e7f0      	b.n	801ada0 <_dtoa_r+0x9e0>
 801adbe:	f1bb 0f00 	cmp.w	fp, #0
 801adc2:	bfcc      	ite	gt
 801adc4:	465e      	movgt	r6, fp
 801adc6:	2601      	movle	r6, #1
 801adc8:	443e      	add	r6, r7
 801adca:	f04f 0800 	mov.w	r8, #0
 801adce:	9901      	ldr	r1, [sp, #4]
 801add0:	2201      	movs	r2, #1
 801add2:	4648      	mov	r0, r9
 801add4:	f000 fb58 	bl	801b488 <__lshift>
 801add8:	4621      	mov	r1, r4
 801adda:	9001      	str	r0, [sp, #4]
 801addc:	f000 fbc0 	bl	801b560 <__mcmp>
 801ade0:	2800      	cmp	r0, #0
 801ade2:	dcaf      	bgt.n	801ad44 <_dtoa_r+0x984>
 801ade4:	d102      	bne.n	801adec <_dtoa_r+0xa2c>
 801ade6:	f01a 0f01 	tst.w	sl, #1
 801adea:	d1ab      	bne.n	801ad44 <_dtoa_r+0x984>
 801adec:	4633      	mov	r3, r6
 801adee:	461e      	mov	r6, r3
 801adf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801adf4:	2a30      	cmp	r2, #48	@ 0x30
 801adf6:	d0fa      	beq.n	801adee <_dtoa_r+0xa2e>
 801adf8:	e5bb      	b.n	801a972 <_dtoa_r+0x5b2>
 801adfa:	429f      	cmp	r7, r3
 801adfc:	d1a3      	bne.n	801ad46 <_dtoa_r+0x986>
 801adfe:	9b04      	ldr	r3, [sp, #16]
 801ae00:	3301      	adds	r3, #1
 801ae02:	9304      	str	r3, [sp, #16]
 801ae04:	2331      	movs	r3, #49	@ 0x31
 801ae06:	703b      	strb	r3, [r7, #0]
 801ae08:	e5b3      	b.n	801a972 <_dtoa_r+0x5b2>
 801ae0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae0c:	4f16      	ldr	r7, [pc, #88]	@ (801ae68 <_dtoa_r+0xaa8>)
 801ae0e:	b11b      	cbz	r3, 801ae18 <_dtoa_r+0xa58>
 801ae10:	f107 0308 	add.w	r3, r7, #8
 801ae14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ae16:	6013      	str	r3, [r2, #0]
 801ae18:	4638      	mov	r0, r7
 801ae1a:	b011      	add	sp, #68	@ 0x44
 801ae1c:	ecbd 8b02 	vpop	{d8}
 801ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae24:	9b07      	ldr	r3, [sp, #28]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	f77f ae36 	ble.w	801aa98 <_dtoa_r+0x6d8>
 801ae2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ae2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae30:	2001      	movs	r0, #1
 801ae32:	e656      	b.n	801aae2 <_dtoa_r+0x722>
 801ae34:	f1bb 0f00 	cmp.w	fp, #0
 801ae38:	f77f aed7 	ble.w	801abea <_dtoa_r+0x82a>
 801ae3c:	463e      	mov	r6, r7
 801ae3e:	9801      	ldr	r0, [sp, #4]
 801ae40:	4621      	mov	r1, r4
 801ae42:	f7ff fa33 	bl	801a2ac <quorem>
 801ae46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ae4a:	f806 ab01 	strb.w	sl, [r6], #1
 801ae4e:	1bf2      	subs	r2, r6, r7
 801ae50:	4593      	cmp	fp, r2
 801ae52:	ddb4      	ble.n	801adbe <_dtoa_r+0x9fe>
 801ae54:	9901      	ldr	r1, [sp, #4]
 801ae56:	2300      	movs	r3, #0
 801ae58:	220a      	movs	r2, #10
 801ae5a:	4648      	mov	r0, r9
 801ae5c:	f000 f968 	bl	801b130 <__multadd>
 801ae60:	9001      	str	r0, [sp, #4]
 801ae62:	e7ec      	b.n	801ae3e <_dtoa_r+0xa7e>
 801ae64:	0801fc53 	.word	0x0801fc53
 801ae68:	0801fbee 	.word	0x0801fbee

0801ae6c <_free_r>:
 801ae6c:	b538      	push	{r3, r4, r5, lr}
 801ae6e:	4605      	mov	r5, r0
 801ae70:	2900      	cmp	r1, #0
 801ae72:	d041      	beq.n	801aef8 <_free_r+0x8c>
 801ae74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae78:	1f0c      	subs	r4, r1, #4
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	bfb8      	it	lt
 801ae7e:	18e4      	addlt	r4, r4, r3
 801ae80:	f000 f8e8 	bl	801b054 <__malloc_lock>
 801ae84:	4a1d      	ldr	r2, [pc, #116]	@ (801aefc <_free_r+0x90>)
 801ae86:	6813      	ldr	r3, [r2, #0]
 801ae88:	b933      	cbnz	r3, 801ae98 <_free_r+0x2c>
 801ae8a:	6063      	str	r3, [r4, #4]
 801ae8c:	6014      	str	r4, [r2, #0]
 801ae8e:	4628      	mov	r0, r5
 801ae90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae94:	f000 b8e4 	b.w	801b060 <__malloc_unlock>
 801ae98:	42a3      	cmp	r3, r4
 801ae9a:	d908      	bls.n	801aeae <_free_r+0x42>
 801ae9c:	6820      	ldr	r0, [r4, #0]
 801ae9e:	1821      	adds	r1, r4, r0
 801aea0:	428b      	cmp	r3, r1
 801aea2:	bf01      	itttt	eq
 801aea4:	6819      	ldreq	r1, [r3, #0]
 801aea6:	685b      	ldreq	r3, [r3, #4]
 801aea8:	1809      	addeq	r1, r1, r0
 801aeaa:	6021      	streq	r1, [r4, #0]
 801aeac:	e7ed      	b.n	801ae8a <_free_r+0x1e>
 801aeae:	461a      	mov	r2, r3
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	b10b      	cbz	r3, 801aeb8 <_free_r+0x4c>
 801aeb4:	42a3      	cmp	r3, r4
 801aeb6:	d9fa      	bls.n	801aeae <_free_r+0x42>
 801aeb8:	6811      	ldr	r1, [r2, #0]
 801aeba:	1850      	adds	r0, r2, r1
 801aebc:	42a0      	cmp	r0, r4
 801aebe:	d10b      	bne.n	801aed8 <_free_r+0x6c>
 801aec0:	6820      	ldr	r0, [r4, #0]
 801aec2:	4401      	add	r1, r0
 801aec4:	1850      	adds	r0, r2, r1
 801aec6:	4283      	cmp	r3, r0
 801aec8:	6011      	str	r1, [r2, #0]
 801aeca:	d1e0      	bne.n	801ae8e <_free_r+0x22>
 801aecc:	6818      	ldr	r0, [r3, #0]
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	6053      	str	r3, [r2, #4]
 801aed2:	4408      	add	r0, r1
 801aed4:	6010      	str	r0, [r2, #0]
 801aed6:	e7da      	b.n	801ae8e <_free_r+0x22>
 801aed8:	d902      	bls.n	801aee0 <_free_r+0x74>
 801aeda:	230c      	movs	r3, #12
 801aedc:	602b      	str	r3, [r5, #0]
 801aede:	e7d6      	b.n	801ae8e <_free_r+0x22>
 801aee0:	6820      	ldr	r0, [r4, #0]
 801aee2:	1821      	adds	r1, r4, r0
 801aee4:	428b      	cmp	r3, r1
 801aee6:	bf04      	itt	eq
 801aee8:	6819      	ldreq	r1, [r3, #0]
 801aeea:	685b      	ldreq	r3, [r3, #4]
 801aeec:	6063      	str	r3, [r4, #4]
 801aeee:	bf04      	itt	eq
 801aef0:	1809      	addeq	r1, r1, r0
 801aef2:	6021      	streq	r1, [r4, #0]
 801aef4:	6054      	str	r4, [r2, #4]
 801aef6:	e7ca      	b.n	801ae8e <_free_r+0x22>
 801aef8:	bd38      	pop	{r3, r4, r5, pc}
 801aefa:	bf00      	nop
 801aefc:	20012024 	.word	0x20012024

0801af00 <malloc>:
 801af00:	4b02      	ldr	r3, [pc, #8]	@ (801af0c <malloc+0xc>)
 801af02:	4601      	mov	r1, r0
 801af04:	6818      	ldr	r0, [r3, #0]
 801af06:	f000 b825 	b.w	801af54 <_malloc_r>
 801af0a:	bf00      	nop
 801af0c:	20000028 	.word	0x20000028

0801af10 <sbrk_aligned>:
 801af10:	b570      	push	{r4, r5, r6, lr}
 801af12:	4e0f      	ldr	r6, [pc, #60]	@ (801af50 <sbrk_aligned+0x40>)
 801af14:	460c      	mov	r4, r1
 801af16:	6831      	ldr	r1, [r6, #0]
 801af18:	4605      	mov	r5, r0
 801af1a:	b911      	cbnz	r1, 801af22 <sbrk_aligned+0x12>
 801af1c:	f001 f804 	bl	801bf28 <_sbrk_r>
 801af20:	6030      	str	r0, [r6, #0]
 801af22:	4621      	mov	r1, r4
 801af24:	4628      	mov	r0, r5
 801af26:	f000 ffff 	bl	801bf28 <_sbrk_r>
 801af2a:	1c43      	adds	r3, r0, #1
 801af2c:	d103      	bne.n	801af36 <sbrk_aligned+0x26>
 801af2e:	f04f 34ff 	mov.w	r4, #4294967295
 801af32:	4620      	mov	r0, r4
 801af34:	bd70      	pop	{r4, r5, r6, pc}
 801af36:	1cc4      	adds	r4, r0, #3
 801af38:	f024 0403 	bic.w	r4, r4, #3
 801af3c:	42a0      	cmp	r0, r4
 801af3e:	d0f8      	beq.n	801af32 <sbrk_aligned+0x22>
 801af40:	1a21      	subs	r1, r4, r0
 801af42:	4628      	mov	r0, r5
 801af44:	f000 fff0 	bl	801bf28 <_sbrk_r>
 801af48:	3001      	adds	r0, #1
 801af4a:	d1f2      	bne.n	801af32 <sbrk_aligned+0x22>
 801af4c:	e7ef      	b.n	801af2e <sbrk_aligned+0x1e>
 801af4e:	bf00      	nop
 801af50:	20012020 	.word	0x20012020

0801af54 <_malloc_r>:
 801af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af58:	1ccd      	adds	r5, r1, #3
 801af5a:	f025 0503 	bic.w	r5, r5, #3
 801af5e:	3508      	adds	r5, #8
 801af60:	2d0c      	cmp	r5, #12
 801af62:	bf38      	it	cc
 801af64:	250c      	movcc	r5, #12
 801af66:	2d00      	cmp	r5, #0
 801af68:	4606      	mov	r6, r0
 801af6a:	db01      	blt.n	801af70 <_malloc_r+0x1c>
 801af6c:	42a9      	cmp	r1, r5
 801af6e:	d904      	bls.n	801af7a <_malloc_r+0x26>
 801af70:	230c      	movs	r3, #12
 801af72:	6033      	str	r3, [r6, #0]
 801af74:	2000      	movs	r0, #0
 801af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b050 <_malloc_r+0xfc>
 801af7e:	f000 f869 	bl	801b054 <__malloc_lock>
 801af82:	f8d8 3000 	ldr.w	r3, [r8]
 801af86:	461c      	mov	r4, r3
 801af88:	bb44      	cbnz	r4, 801afdc <_malloc_r+0x88>
 801af8a:	4629      	mov	r1, r5
 801af8c:	4630      	mov	r0, r6
 801af8e:	f7ff ffbf 	bl	801af10 <sbrk_aligned>
 801af92:	1c43      	adds	r3, r0, #1
 801af94:	4604      	mov	r4, r0
 801af96:	d158      	bne.n	801b04a <_malloc_r+0xf6>
 801af98:	f8d8 4000 	ldr.w	r4, [r8]
 801af9c:	4627      	mov	r7, r4
 801af9e:	2f00      	cmp	r7, #0
 801afa0:	d143      	bne.n	801b02a <_malloc_r+0xd6>
 801afa2:	2c00      	cmp	r4, #0
 801afa4:	d04b      	beq.n	801b03e <_malloc_r+0xea>
 801afa6:	6823      	ldr	r3, [r4, #0]
 801afa8:	4639      	mov	r1, r7
 801afaa:	4630      	mov	r0, r6
 801afac:	eb04 0903 	add.w	r9, r4, r3
 801afb0:	f000 ffba 	bl	801bf28 <_sbrk_r>
 801afb4:	4581      	cmp	r9, r0
 801afb6:	d142      	bne.n	801b03e <_malloc_r+0xea>
 801afb8:	6821      	ldr	r1, [r4, #0]
 801afba:	1a6d      	subs	r5, r5, r1
 801afbc:	4629      	mov	r1, r5
 801afbe:	4630      	mov	r0, r6
 801afc0:	f7ff ffa6 	bl	801af10 <sbrk_aligned>
 801afc4:	3001      	adds	r0, #1
 801afc6:	d03a      	beq.n	801b03e <_malloc_r+0xea>
 801afc8:	6823      	ldr	r3, [r4, #0]
 801afca:	442b      	add	r3, r5
 801afcc:	6023      	str	r3, [r4, #0]
 801afce:	f8d8 3000 	ldr.w	r3, [r8]
 801afd2:	685a      	ldr	r2, [r3, #4]
 801afd4:	bb62      	cbnz	r2, 801b030 <_malloc_r+0xdc>
 801afd6:	f8c8 7000 	str.w	r7, [r8]
 801afda:	e00f      	b.n	801affc <_malloc_r+0xa8>
 801afdc:	6822      	ldr	r2, [r4, #0]
 801afde:	1b52      	subs	r2, r2, r5
 801afe0:	d420      	bmi.n	801b024 <_malloc_r+0xd0>
 801afe2:	2a0b      	cmp	r2, #11
 801afe4:	d917      	bls.n	801b016 <_malloc_r+0xc2>
 801afe6:	1961      	adds	r1, r4, r5
 801afe8:	42a3      	cmp	r3, r4
 801afea:	6025      	str	r5, [r4, #0]
 801afec:	bf18      	it	ne
 801afee:	6059      	strne	r1, [r3, #4]
 801aff0:	6863      	ldr	r3, [r4, #4]
 801aff2:	bf08      	it	eq
 801aff4:	f8c8 1000 	streq.w	r1, [r8]
 801aff8:	5162      	str	r2, [r4, r5]
 801affa:	604b      	str	r3, [r1, #4]
 801affc:	4630      	mov	r0, r6
 801affe:	f000 f82f 	bl	801b060 <__malloc_unlock>
 801b002:	f104 000b 	add.w	r0, r4, #11
 801b006:	1d23      	adds	r3, r4, #4
 801b008:	f020 0007 	bic.w	r0, r0, #7
 801b00c:	1ac2      	subs	r2, r0, r3
 801b00e:	bf1c      	itt	ne
 801b010:	1a1b      	subne	r3, r3, r0
 801b012:	50a3      	strne	r3, [r4, r2]
 801b014:	e7af      	b.n	801af76 <_malloc_r+0x22>
 801b016:	6862      	ldr	r2, [r4, #4]
 801b018:	42a3      	cmp	r3, r4
 801b01a:	bf0c      	ite	eq
 801b01c:	f8c8 2000 	streq.w	r2, [r8]
 801b020:	605a      	strne	r2, [r3, #4]
 801b022:	e7eb      	b.n	801affc <_malloc_r+0xa8>
 801b024:	4623      	mov	r3, r4
 801b026:	6864      	ldr	r4, [r4, #4]
 801b028:	e7ae      	b.n	801af88 <_malloc_r+0x34>
 801b02a:	463c      	mov	r4, r7
 801b02c:	687f      	ldr	r7, [r7, #4]
 801b02e:	e7b6      	b.n	801af9e <_malloc_r+0x4a>
 801b030:	461a      	mov	r2, r3
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	42a3      	cmp	r3, r4
 801b036:	d1fb      	bne.n	801b030 <_malloc_r+0xdc>
 801b038:	2300      	movs	r3, #0
 801b03a:	6053      	str	r3, [r2, #4]
 801b03c:	e7de      	b.n	801affc <_malloc_r+0xa8>
 801b03e:	230c      	movs	r3, #12
 801b040:	6033      	str	r3, [r6, #0]
 801b042:	4630      	mov	r0, r6
 801b044:	f000 f80c 	bl	801b060 <__malloc_unlock>
 801b048:	e794      	b.n	801af74 <_malloc_r+0x20>
 801b04a:	6005      	str	r5, [r0, #0]
 801b04c:	e7d6      	b.n	801affc <_malloc_r+0xa8>
 801b04e:	bf00      	nop
 801b050:	20012024 	.word	0x20012024

0801b054 <__malloc_lock>:
 801b054:	4801      	ldr	r0, [pc, #4]	@ (801b05c <__malloc_lock+0x8>)
 801b056:	f7ff b8f2 	b.w	801a23e <__retarget_lock_acquire_recursive>
 801b05a:	bf00      	nop
 801b05c:	2001201c 	.word	0x2001201c

0801b060 <__malloc_unlock>:
 801b060:	4801      	ldr	r0, [pc, #4]	@ (801b068 <__malloc_unlock+0x8>)
 801b062:	f7ff b8ed 	b.w	801a240 <__retarget_lock_release_recursive>
 801b066:	bf00      	nop
 801b068:	2001201c 	.word	0x2001201c

0801b06c <_Balloc>:
 801b06c:	b570      	push	{r4, r5, r6, lr}
 801b06e:	69c6      	ldr	r6, [r0, #28]
 801b070:	4604      	mov	r4, r0
 801b072:	460d      	mov	r5, r1
 801b074:	b976      	cbnz	r6, 801b094 <_Balloc+0x28>
 801b076:	2010      	movs	r0, #16
 801b078:	f7ff ff42 	bl	801af00 <malloc>
 801b07c:	4602      	mov	r2, r0
 801b07e:	61e0      	str	r0, [r4, #28]
 801b080:	b920      	cbnz	r0, 801b08c <_Balloc+0x20>
 801b082:	4b18      	ldr	r3, [pc, #96]	@ (801b0e4 <_Balloc+0x78>)
 801b084:	4818      	ldr	r0, [pc, #96]	@ (801b0e8 <_Balloc+0x7c>)
 801b086:	216b      	movs	r1, #107	@ 0x6b
 801b088:	f7ff f8f2 	bl	801a270 <__assert_func>
 801b08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b090:	6006      	str	r6, [r0, #0]
 801b092:	60c6      	str	r6, [r0, #12]
 801b094:	69e6      	ldr	r6, [r4, #28]
 801b096:	68f3      	ldr	r3, [r6, #12]
 801b098:	b183      	cbz	r3, 801b0bc <_Balloc+0x50>
 801b09a:	69e3      	ldr	r3, [r4, #28]
 801b09c:	68db      	ldr	r3, [r3, #12]
 801b09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b0a2:	b9b8      	cbnz	r0, 801b0d4 <_Balloc+0x68>
 801b0a4:	2101      	movs	r1, #1
 801b0a6:	fa01 f605 	lsl.w	r6, r1, r5
 801b0aa:	1d72      	adds	r2, r6, #5
 801b0ac:	0092      	lsls	r2, r2, #2
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	f000 ff51 	bl	801bf56 <_calloc_r>
 801b0b4:	b160      	cbz	r0, 801b0d0 <_Balloc+0x64>
 801b0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b0ba:	e00e      	b.n	801b0da <_Balloc+0x6e>
 801b0bc:	2221      	movs	r2, #33	@ 0x21
 801b0be:	2104      	movs	r1, #4
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f000 ff48 	bl	801bf56 <_calloc_r>
 801b0c6:	69e3      	ldr	r3, [r4, #28]
 801b0c8:	60f0      	str	r0, [r6, #12]
 801b0ca:	68db      	ldr	r3, [r3, #12]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d1e4      	bne.n	801b09a <_Balloc+0x2e>
 801b0d0:	2000      	movs	r0, #0
 801b0d2:	bd70      	pop	{r4, r5, r6, pc}
 801b0d4:	6802      	ldr	r2, [r0, #0]
 801b0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b0da:	2300      	movs	r3, #0
 801b0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b0e0:	e7f7      	b.n	801b0d2 <_Balloc+0x66>
 801b0e2:	bf00      	nop
 801b0e4:	0801fa0e 	.word	0x0801fa0e
 801b0e8:	0801fc64 	.word	0x0801fc64

0801b0ec <_Bfree>:
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	69c6      	ldr	r6, [r0, #28]
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	460c      	mov	r4, r1
 801b0f4:	b976      	cbnz	r6, 801b114 <_Bfree+0x28>
 801b0f6:	2010      	movs	r0, #16
 801b0f8:	f7ff ff02 	bl	801af00 <malloc>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	61e8      	str	r0, [r5, #28]
 801b100:	b920      	cbnz	r0, 801b10c <_Bfree+0x20>
 801b102:	4b09      	ldr	r3, [pc, #36]	@ (801b128 <_Bfree+0x3c>)
 801b104:	4809      	ldr	r0, [pc, #36]	@ (801b12c <_Bfree+0x40>)
 801b106:	218f      	movs	r1, #143	@ 0x8f
 801b108:	f7ff f8b2 	bl	801a270 <__assert_func>
 801b10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b110:	6006      	str	r6, [r0, #0]
 801b112:	60c6      	str	r6, [r0, #12]
 801b114:	b13c      	cbz	r4, 801b126 <_Bfree+0x3a>
 801b116:	69eb      	ldr	r3, [r5, #28]
 801b118:	6862      	ldr	r2, [r4, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b120:	6021      	str	r1, [r4, #0]
 801b122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b126:	bd70      	pop	{r4, r5, r6, pc}
 801b128:	0801fa0e 	.word	0x0801fa0e
 801b12c:	0801fc64 	.word	0x0801fc64

0801b130 <__multadd>:
 801b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b134:	690d      	ldr	r5, [r1, #16]
 801b136:	4607      	mov	r7, r0
 801b138:	460c      	mov	r4, r1
 801b13a:	461e      	mov	r6, r3
 801b13c:	f101 0c14 	add.w	ip, r1, #20
 801b140:	2000      	movs	r0, #0
 801b142:	f8dc 3000 	ldr.w	r3, [ip]
 801b146:	b299      	uxth	r1, r3
 801b148:	fb02 6101 	mla	r1, r2, r1, r6
 801b14c:	0c1e      	lsrs	r6, r3, #16
 801b14e:	0c0b      	lsrs	r3, r1, #16
 801b150:	fb02 3306 	mla	r3, r2, r6, r3
 801b154:	b289      	uxth	r1, r1
 801b156:	3001      	adds	r0, #1
 801b158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b15c:	4285      	cmp	r5, r0
 801b15e:	f84c 1b04 	str.w	r1, [ip], #4
 801b162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b166:	dcec      	bgt.n	801b142 <__multadd+0x12>
 801b168:	b30e      	cbz	r6, 801b1ae <__multadd+0x7e>
 801b16a:	68a3      	ldr	r3, [r4, #8]
 801b16c:	42ab      	cmp	r3, r5
 801b16e:	dc19      	bgt.n	801b1a4 <__multadd+0x74>
 801b170:	6861      	ldr	r1, [r4, #4]
 801b172:	4638      	mov	r0, r7
 801b174:	3101      	adds	r1, #1
 801b176:	f7ff ff79 	bl	801b06c <_Balloc>
 801b17a:	4680      	mov	r8, r0
 801b17c:	b928      	cbnz	r0, 801b18a <__multadd+0x5a>
 801b17e:	4602      	mov	r2, r0
 801b180:	4b0c      	ldr	r3, [pc, #48]	@ (801b1b4 <__multadd+0x84>)
 801b182:	480d      	ldr	r0, [pc, #52]	@ (801b1b8 <__multadd+0x88>)
 801b184:	21ba      	movs	r1, #186	@ 0xba
 801b186:	f7ff f873 	bl	801a270 <__assert_func>
 801b18a:	6922      	ldr	r2, [r4, #16]
 801b18c:	3202      	adds	r2, #2
 801b18e:	f104 010c 	add.w	r1, r4, #12
 801b192:	0092      	lsls	r2, r2, #2
 801b194:	300c      	adds	r0, #12
 801b196:	f7ff f85c 	bl	801a252 <memcpy>
 801b19a:	4621      	mov	r1, r4
 801b19c:	4638      	mov	r0, r7
 801b19e:	f7ff ffa5 	bl	801b0ec <_Bfree>
 801b1a2:	4644      	mov	r4, r8
 801b1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b1a8:	3501      	adds	r5, #1
 801b1aa:	615e      	str	r6, [r3, #20]
 801b1ac:	6125      	str	r5, [r4, #16]
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1b4:	0801fc53 	.word	0x0801fc53
 801b1b8:	0801fc64 	.word	0x0801fc64

0801b1bc <__hi0bits>:
 801b1bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	bf36      	itet	cc
 801b1c4:	0403      	lslcc	r3, r0, #16
 801b1c6:	2000      	movcs	r0, #0
 801b1c8:	2010      	movcc	r0, #16
 801b1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b1ce:	bf3c      	itt	cc
 801b1d0:	021b      	lslcc	r3, r3, #8
 801b1d2:	3008      	addcc	r0, #8
 801b1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b1d8:	bf3c      	itt	cc
 801b1da:	011b      	lslcc	r3, r3, #4
 801b1dc:	3004      	addcc	r0, #4
 801b1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b1e2:	bf3c      	itt	cc
 801b1e4:	009b      	lslcc	r3, r3, #2
 801b1e6:	3002      	addcc	r0, #2
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	db05      	blt.n	801b1f8 <__hi0bits+0x3c>
 801b1ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b1f0:	f100 0001 	add.w	r0, r0, #1
 801b1f4:	bf08      	it	eq
 801b1f6:	2020      	moveq	r0, #32
 801b1f8:	4770      	bx	lr

0801b1fa <__lo0bits>:
 801b1fa:	6803      	ldr	r3, [r0, #0]
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	f013 0007 	ands.w	r0, r3, #7
 801b202:	d00b      	beq.n	801b21c <__lo0bits+0x22>
 801b204:	07d9      	lsls	r1, r3, #31
 801b206:	d421      	bmi.n	801b24c <__lo0bits+0x52>
 801b208:	0798      	lsls	r0, r3, #30
 801b20a:	bf49      	itett	mi
 801b20c:	085b      	lsrmi	r3, r3, #1
 801b20e:	089b      	lsrpl	r3, r3, #2
 801b210:	2001      	movmi	r0, #1
 801b212:	6013      	strmi	r3, [r2, #0]
 801b214:	bf5c      	itt	pl
 801b216:	6013      	strpl	r3, [r2, #0]
 801b218:	2002      	movpl	r0, #2
 801b21a:	4770      	bx	lr
 801b21c:	b299      	uxth	r1, r3
 801b21e:	b909      	cbnz	r1, 801b224 <__lo0bits+0x2a>
 801b220:	0c1b      	lsrs	r3, r3, #16
 801b222:	2010      	movs	r0, #16
 801b224:	b2d9      	uxtb	r1, r3
 801b226:	b909      	cbnz	r1, 801b22c <__lo0bits+0x32>
 801b228:	3008      	adds	r0, #8
 801b22a:	0a1b      	lsrs	r3, r3, #8
 801b22c:	0719      	lsls	r1, r3, #28
 801b22e:	bf04      	itt	eq
 801b230:	091b      	lsreq	r3, r3, #4
 801b232:	3004      	addeq	r0, #4
 801b234:	0799      	lsls	r1, r3, #30
 801b236:	bf04      	itt	eq
 801b238:	089b      	lsreq	r3, r3, #2
 801b23a:	3002      	addeq	r0, #2
 801b23c:	07d9      	lsls	r1, r3, #31
 801b23e:	d403      	bmi.n	801b248 <__lo0bits+0x4e>
 801b240:	085b      	lsrs	r3, r3, #1
 801b242:	f100 0001 	add.w	r0, r0, #1
 801b246:	d003      	beq.n	801b250 <__lo0bits+0x56>
 801b248:	6013      	str	r3, [r2, #0]
 801b24a:	4770      	bx	lr
 801b24c:	2000      	movs	r0, #0
 801b24e:	4770      	bx	lr
 801b250:	2020      	movs	r0, #32
 801b252:	4770      	bx	lr

0801b254 <__i2b>:
 801b254:	b510      	push	{r4, lr}
 801b256:	460c      	mov	r4, r1
 801b258:	2101      	movs	r1, #1
 801b25a:	f7ff ff07 	bl	801b06c <_Balloc>
 801b25e:	4602      	mov	r2, r0
 801b260:	b928      	cbnz	r0, 801b26e <__i2b+0x1a>
 801b262:	4b05      	ldr	r3, [pc, #20]	@ (801b278 <__i2b+0x24>)
 801b264:	4805      	ldr	r0, [pc, #20]	@ (801b27c <__i2b+0x28>)
 801b266:	f240 1145 	movw	r1, #325	@ 0x145
 801b26a:	f7ff f801 	bl	801a270 <__assert_func>
 801b26e:	2301      	movs	r3, #1
 801b270:	6144      	str	r4, [r0, #20]
 801b272:	6103      	str	r3, [r0, #16]
 801b274:	bd10      	pop	{r4, pc}
 801b276:	bf00      	nop
 801b278:	0801fc53 	.word	0x0801fc53
 801b27c:	0801fc64 	.word	0x0801fc64

0801b280 <__multiply>:
 801b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b284:	4614      	mov	r4, r2
 801b286:	690a      	ldr	r2, [r1, #16]
 801b288:	6923      	ldr	r3, [r4, #16]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	bfa8      	it	ge
 801b28e:	4623      	movge	r3, r4
 801b290:	460f      	mov	r7, r1
 801b292:	bfa4      	itt	ge
 801b294:	460c      	movge	r4, r1
 801b296:	461f      	movge	r7, r3
 801b298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b29c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b2a0:	68a3      	ldr	r3, [r4, #8]
 801b2a2:	6861      	ldr	r1, [r4, #4]
 801b2a4:	eb0a 0609 	add.w	r6, sl, r9
 801b2a8:	42b3      	cmp	r3, r6
 801b2aa:	b085      	sub	sp, #20
 801b2ac:	bfb8      	it	lt
 801b2ae:	3101      	addlt	r1, #1
 801b2b0:	f7ff fedc 	bl	801b06c <_Balloc>
 801b2b4:	b930      	cbnz	r0, 801b2c4 <__multiply+0x44>
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	4b44      	ldr	r3, [pc, #272]	@ (801b3cc <__multiply+0x14c>)
 801b2ba:	4845      	ldr	r0, [pc, #276]	@ (801b3d0 <__multiply+0x150>)
 801b2bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b2c0:	f7fe ffd6 	bl	801a270 <__assert_func>
 801b2c4:	f100 0514 	add.w	r5, r0, #20
 801b2c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b2cc:	462b      	mov	r3, r5
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	4543      	cmp	r3, r8
 801b2d2:	d321      	bcc.n	801b318 <__multiply+0x98>
 801b2d4:	f107 0114 	add.w	r1, r7, #20
 801b2d8:	f104 0214 	add.w	r2, r4, #20
 801b2dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b2e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b2e4:	9302      	str	r3, [sp, #8]
 801b2e6:	1b13      	subs	r3, r2, r4
 801b2e8:	3b15      	subs	r3, #21
 801b2ea:	f023 0303 	bic.w	r3, r3, #3
 801b2ee:	3304      	adds	r3, #4
 801b2f0:	f104 0715 	add.w	r7, r4, #21
 801b2f4:	42ba      	cmp	r2, r7
 801b2f6:	bf38      	it	cc
 801b2f8:	2304      	movcc	r3, #4
 801b2fa:	9301      	str	r3, [sp, #4]
 801b2fc:	9b02      	ldr	r3, [sp, #8]
 801b2fe:	9103      	str	r1, [sp, #12]
 801b300:	428b      	cmp	r3, r1
 801b302:	d80c      	bhi.n	801b31e <__multiply+0x9e>
 801b304:	2e00      	cmp	r6, #0
 801b306:	dd03      	ble.n	801b310 <__multiply+0x90>
 801b308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d05b      	beq.n	801b3c8 <__multiply+0x148>
 801b310:	6106      	str	r6, [r0, #16]
 801b312:	b005      	add	sp, #20
 801b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b318:	f843 2b04 	str.w	r2, [r3], #4
 801b31c:	e7d8      	b.n	801b2d0 <__multiply+0x50>
 801b31e:	f8b1 a000 	ldrh.w	sl, [r1]
 801b322:	f1ba 0f00 	cmp.w	sl, #0
 801b326:	d024      	beq.n	801b372 <__multiply+0xf2>
 801b328:	f104 0e14 	add.w	lr, r4, #20
 801b32c:	46a9      	mov	r9, r5
 801b32e:	f04f 0c00 	mov.w	ip, #0
 801b332:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b336:	f8d9 3000 	ldr.w	r3, [r9]
 801b33a:	fa1f fb87 	uxth.w	fp, r7
 801b33e:	b29b      	uxth	r3, r3
 801b340:	fb0a 330b 	mla	r3, sl, fp, r3
 801b344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b348:	f8d9 7000 	ldr.w	r7, [r9]
 801b34c:	4463      	add	r3, ip
 801b34e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b352:	fb0a c70b 	mla	r7, sl, fp, ip
 801b356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b35a:	b29b      	uxth	r3, r3
 801b35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b360:	4572      	cmp	r2, lr
 801b362:	f849 3b04 	str.w	r3, [r9], #4
 801b366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b36a:	d8e2      	bhi.n	801b332 <__multiply+0xb2>
 801b36c:	9b01      	ldr	r3, [sp, #4]
 801b36e:	f845 c003 	str.w	ip, [r5, r3]
 801b372:	9b03      	ldr	r3, [sp, #12]
 801b374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b378:	3104      	adds	r1, #4
 801b37a:	f1b9 0f00 	cmp.w	r9, #0
 801b37e:	d021      	beq.n	801b3c4 <__multiply+0x144>
 801b380:	682b      	ldr	r3, [r5, #0]
 801b382:	f104 0c14 	add.w	ip, r4, #20
 801b386:	46ae      	mov	lr, r5
 801b388:	f04f 0a00 	mov.w	sl, #0
 801b38c:	f8bc b000 	ldrh.w	fp, [ip]
 801b390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b394:	fb09 770b 	mla	r7, r9, fp, r7
 801b398:	4457      	add	r7, sl
 801b39a:	b29b      	uxth	r3, r3
 801b39c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b3a0:	f84e 3b04 	str.w	r3, [lr], #4
 801b3a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b3a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b3ac:	f8be 3000 	ldrh.w	r3, [lr]
 801b3b0:	fb09 330a 	mla	r3, r9, sl, r3
 801b3b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b3b8:	4562      	cmp	r2, ip
 801b3ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b3be:	d8e5      	bhi.n	801b38c <__multiply+0x10c>
 801b3c0:	9f01      	ldr	r7, [sp, #4]
 801b3c2:	51eb      	str	r3, [r5, r7]
 801b3c4:	3504      	adds	r5, #4
 801b3c6:	e799      	b.n	801b2fc <__multiply+0x7c>
 801b3c8:	3e01      	subs	r6, #1
 801b3ca:	e79b      	b.n	801b304 <__multiply+0x84>
 801b3cc:	0801fc53 	.word	0x0801fc53
 801b3d0:	0801fc64 	.word	0x0801fc64

0801b3d4 <__pow5mult>:
 801b3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3d8:	4615      	mov	r5, r2
 801b3da:	f012 0203 	ands.w	r2, r2, #3
 801b3de:	4607      	mov	r7, r0
 801b3e0:	460e      	mov	r6, r1
 801b3e2:	d007      	beq.n	801b3f4 <__pow5mult+0x20>
 801b3e4:	4c25      	ldr	r4, [pc, #148]	@ (801b47c <__pow5mult+0xa8>)
 801b3e6:	3a01      	subs	r2, #1
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b3ee:	f7ff fe9f 	bl	801b130 <__multadd>
 801b3f2:	4606      	mov	r6, r0
 801b3f4:	10ad      	asrs	r5, r5, #2
 801b3f6:	d03d      	beq.n	801b474 <__pow5mult+0xa0>
 801b3f8:	69fc      	ldr	r4, [r7, #28]
 801b3fa:	b97c      	cbnz	r4, 801b41c <__pow5mult+0x48>
 801b3fc:	2010      	movs	r0, #16
 801b3fe:	f7ff fd7f 	bl	801af00 <malloc>
 801b402:	4602      	mov	r2, r0
 801b404:	61f8      	str	r0, [r7, #28]
 801b406:	b928      	cbnz	r0, 801b414 <__pow5mult+0x40>
 801b408:	4b1d      	ldr	r3, [pc, #116]	@ (801b480 <__pow5mult+0xac>)
 801b40a:	481e      	ldr	r0, [pc, #120]	@ (801b484 <__pow5mult+0xb0>)
 801b40c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b410:	f7fe ff2e 	bl	801a270 <__assert_func>
 801b414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b418:	6004      	str	r4, [r0, #0]
 801b41a:	60c4      	str	r4, [r0, #12]
 801b41c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b424:	b94c      	cbnz	r4, 801b43a <__pow5mult+0x66>
 801b426:	f240 2171 	movw	r1, #625	@ 0x271
 801b42a:	4638      	mov	r0, r7
 801b42c:	f7ff ff12 	bl	801b254 <__i2b>
 801b430:	2300      	movs	r3, #0
 801b432:	f8c8 0008 	str.w	r0, [r8, #8]
 801b436:	4604      	mov	r4, r0
 801b438:	6003      	str	r3, [r0, #0]
 801b43a:	f04f 0900 	mov.w	r9, #0
 801b43e:	07eb      	lsls	r3, r5, #31
 801b440:	d50a      	bpl.n	801b458 <__pow5mult+0x84>
 801b442:	4631      	mov	r1, r6
 801b444:	4622      	mov	r2, r4
 801b446:	4638      	mov	r0, r7
 801b448:	f7ff ff1a 	bl	801b280 <__multiply>
 801b44c:	4631      	mov	r1, r6
 801b44e:	4680      	mov	r8, r0
 801b450:	4638      	mov	r0, r7
 801b452:	f7ff fe4b 	bl	801b0ec <_Bfree>
 801b456:	4646      	mov	r6, r8
 801b458:	106d      	asrs	r5, r5, #1
 801b45a:	d00b      	beq.n	801b474 <__pow5mult+0xa0>
 801b45c:	6820      	ldr	r0, [r4, #0]
 801b45e:	b938      	cbnz	r0, 801b470 <__pow5mult+0x9c>
 801b460:	4622      	mov	r2, r4
 801b462:	4621      	mov	r1, r4
 801b464:	4638      	mov	r0, r7
 801b466:	f7ff ff0b 	bl	801b280 <__multiply>
 801b46a:	6020      	str	r0, [r4, #0]
 801b46c:	f8c0 9000 	str.w	r9, [r0]
 801b470:	4604      	mov	r4, r0
 801b472:	e7e4      	b.n	801b43e <__pow5mult+0x6a>
 801b474:	4630      	mov	r0, r6
 801b476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b47a:	bf00      	nop
 801b47c:	0801fcc0 	.word	0x0801fcc0
 801b480:	0801fa0e 	.word	0x0801fa0e
 801b484:	0801fc64 	.word	0x0801fc64

0801b488 <__lshift>:
 801b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b48c:	460c      	mov	r4, r1
 801b48e:	6849      	ldr	r1, [r1, #4]
 801b490:	6923      	ldr	r3, [r4, #16]
 801b492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b496:	68a3      	ldr	r3, [r4, #8]
 801b498:	4607      	mov	r7, r0
 801b49a:	4691      	mov	r9, r2
 801b49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b4a0:	f108 0601 	add.w	r6, r8, #1
 801b4a4:	42b3      	cmp	r3, r6
 801b4a6:	db0b      	blt.n	801b4c0 <__lshift+0x38>
 801b4a8:	4638      	mov	r0, r7
 801b4aa:	f7ff fddf 	bl	801b06c <_Balloc>
 801b4ae:	4605      	mov	r5, r0
 801b4b0:	b948      	cbnz	r0, 801b4c6 <__lshift+0x3e>
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	4b28      	ldr	r3, [pc, #160]	@ (801b558 <__lshift+0xd0>)
 801b4b6:	4829      	ldr	r0, [pc, #164]	@ (801b55c <__lshift+0xd4>)
 801b4b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b4bc:	f7fe fed8 	bl	801a270 <__assert_func>
 801b4c0:	3101      	adds	r1, #1
 801b4c2:	005b      	lsls	r3, r3, #1
 801b4c4:	e7ee      	b.n	801b4a4 <__lshift+0x1c>
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	f100 0114 	add.w	r1, r0, #20
 801b4cc:	f100 0210 	add.w	r2, r0, #16
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	4553      	cmp	r3, sl
 801b4d4:	db33      	blt.n	801b53e <__lshift+0xb6>
 801b4d6:	6920      	ldr	r0, [r4, #16]
 801b4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b4dc:	f104 0314 	add.w	r3, r4, #20
 801b4e0:	f019 091f 	ands.w	r9, r9, #31
 801b4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b4ec:	d02b      	beq.n	801b546 <__lshift+0xbe>
 801b4ee:	f1c9 0e20 	rsb	lr, r9, #32
 801b4f2:	468a      	mov	sl, r1
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	6818      	ldr	r0, [r3, #0]
 801b4f8:	fa00 f009 	lsl.w	r0, r0, r9
 801b4fc:	4310      	orrs	r0, r2
 801b4fe:	f84a 0b04 	str.w	r0, [sl], #4
 801b502:	f853 2b04 	ldr.w	r2, [r3], #4
 801b506:	459c      	cmp	ip, r3
 801b508:	fa22 f20e 	lsr.w	r2, r2, lr
 801b50c:	d8f3      	bhi.n	801b4f6 <__lshift+0x6e>
 801b50e:	ebac 0304 	sub.w	r3, ip, r4
 801b512:	3b15      	subs	r3, #21
 801b514:	f023 0303 	bic.w	r3, r3, #3
 801b518:	3304      	adds	r3, #4
 801b51a:	f104 0015 	add.w	r0, r4, #21
 801b51e:	4584      	cmp	ip, r0
 801b520:	bf38      	it	cc
 801b522:	2304      	movcc	r3, #4
 801b524:	50ca      	str	r2, [r1, r3]
 801b526:	b10a      	cbz	r2, 801b52c <__lshift+0xa4>
 801b528:	f108 0602 	add.w	r6, r8, #2
 801b52c:	3e01      	subs	r6, #1
 801b52e:	4638      	mov	r0, r7
 801b530:	612e      	str	r6, [r5, #16]
 801b532:	4621      	mov	r1, r4
 801b534:	f7ff fdda 	bl	801b0ec <_Bfree>
 801b538:	4628      	mov	r0, r5
 801b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b53e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b542:	3301      	adds	r3, #1
 801b544:	e7c5      	b.n	801b4d2 <__lshift+0x4a>
 801b546:	3904      	subs	r1, #4
 801b548:	f853 2b04 	ldr.w	r2, [r3], #4
 801b54c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b550:	459c      	cmp	ip, r3
 801b552:	d8f9      	bhi.n	801b548 <__lshift+0xc0>
 801b554:	e7ea      	b.n	801b52c <__lshift+0xa4>
 801b556:	bf00      	nop
 801b558:	0801fc53 	.word	0x0801fc53
 801b55c:	0801fc64 	.word	0x0801fc64

0801b560 <__mcmp>:
 801b560:	690a      	ldr	r2, [r1, #16]
 801b562:	4603      	mov	r3, r0
 801b564:	6900      	ldr	r0, [r0, #16]
 801b566:	1a80      	subs	r0, r0, r2
 801b568:	b530      	push	{r4, r5, lr}
 801b56a:	d10e      	bne.n	801b58a <__mcmp+0x2a>
 801b56c:	3314      	adds	r3, #20
 801b56e:	3114      	adds	r1, #20
 801b570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b57c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b580:	4295      	cmp	r5, r2
 801b582:	d003      	beq.n	801b58c <__mcmp+0x2c>
 801b584:	d205      	bcs.n	801b592 <__mcmp+0x32>
 801b586:	f04f 30ff 	mov.w	r0, #4294967295
 801b58a:	bd30      	pop	{r4, r5, pc}
 801b58c:	42a3      	cmp	r3, r4
 801b58e:	d3f3      	bcc.n	801b578 <__mcmp+0x18>
 801b590:	e7fb      	b.n	801b58a <__mcmp+0x2a>
 801b592:	2001      	movs	r0, #1
 801b594:	e7f9      	b.n	801b58a <__mcmp+0x2a>
	...

0801b598 <__mdiff>:
 801b598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b59c:	4689      	mov	r9, r1
 801b59e:	4606      	mov	r6, r0
 801b5a0:	4611      	mov	r1, r2
 801b5a2:	4648      	mov	r0, r9
 801b5a4:	4614      	mov	r4, r2
 801b5a6:	f7ff ffdb 	bl	801b560 <__mcmp>
 801b5aa:	1e05      	subs	r5, r0, #0
 801b5ac:	d112      	bne.n	801b5d4 <__mdiff+0x3c>
 801b5ae:	4629      	mov	r1, r5
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	f7ff fd5b 	bl	801b06c <_Balloc>
 801b5b6:	4602      	mov	r2, r0
 801b5b8:	b928      	cbnz	r0, 801b5c6 <__mdiff+0x2e>
 801b5ba:	4b3f      	ldr	r3, [pc, #252]	@ (801b6b8 <__mdiff+0x120>)
 801b5bc:	f240 2137 	movw	r1, #567	@ 0x237
 801b5c0:	483e      	ldr	r0, [pc, #248]	@ (801b6bc <__mdiff+0x124>)
 801b5c2:	f7fe fe55 	bl	801a270 <__assert_func>
 801b5c6:	2301      	movs	r3, #1
 801b5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b5cc:	4610      	mov	r0, r2
 801b5ce:	b003      	add	sp, #12
 801b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5d4:	bfbc      	itt	lt
 801b5d6:	464b      	movlt	r3, r9
 801b5d8:	46a1      	movlt	r9, r4
 801b5da:	4630      	mov	r0, r6
 801b5dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b5e0:	bfba      	itte	lt
 801b5e2:	461c      	movlt	r4, r3
 801b5e4:	2501      	movlt	r5, #1
 801b5e6:	2500      	movge	r5, #0
 801b5e8:	f7ff fd40 	bl	801b06c <_Balloc>
 801b5ec:	4602      	mov	r2, r0
 801b5ee:	b918      	cbnz	r0, 801b5f8 <__mdiff+0x60>
 801b5f0:	4b31      	ldr	r3, [pc, #196]	@ (801b6b8 <__mdiff+0x120>)
 801b5f2:	f240 2145 	movw	r1, #581	@ 0x245
 801b5f6:	e7e3      	b.n	801b5c0 <__mdiff+0x28>
 801b5f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b5fc:	6926      	ldr	r6, [r4, #16]
 801b5fe:	60c5      	str	r5, [r0, #12]
 801b600:	f109 0310 	add.w	r3, r9, #16
 801b604:	f109 0514 	add.w	r5, r9, #20
 801b608:	f104 0e14 	add.w	lr, r4, #20
 801b60c:	f100 0b14 	add.w	fp, r0, #20
 801b610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b618:	9301      	str	r3, [sp, #4]
 801b61a:	46d9      	mov	r9, fp
 801b61c:	f04f 0c00 	mov.w	ip, #0
 801b620:	9b01      	ldr	r3, [sp, #4]
 801b622:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b626:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b62a:	9301      	str	r3, [sp, #4]
 801b62c:	fa1f f38a 	uxth.w	r3, sl
 801b630:	4619      	mov	r1, r3
 801b632:	b283      	uxth	r3, r0
 801b634:	1acb      	subs	r3, r1, r3
 801b636:	0c00      	lsrs	r0, r0, #16
 801b638:	4463      	add	r3, ip
 801b63a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b63e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b642:	b29b      	uxth	r3, r3
 801b644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b648:	4576      	cmp	r6, lr
 801b64a:	f849 3b04 	str.w	r3, [r9], #4
 801b64e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b652:	d8e5      	bhi.n	801b620 <__mdiff+0x88>
 801b654:	1b33      	subs	r3, r6, r4
 801b656:	3b15      	subs	r3, #21
 801b658:	f023 0303 	bic.w	r3, r3, #3
 801b65c:	3415      	adds	r4, #21
 801b65e:	3304      	adds	r3, #4
 801b660:	42a6      	cmp	r6, r4
 801b662:	bf38      	it	cc
 801b664:	2304      	movcc	r3, #4
 801b666:	441d      	add	r5, r3
 801b668:	445b      	add	r3, fp
 801b66a:	461e      	mov	r6, r3
 801b66c:	462c      	mov	r4, r5
 801b66e:	4544      	cmp	r4, r8
 801b670:	d30e      	bcc.n	801b690 <__mdiff+0xf8>
 801b672:	f108 0103 	add.w	r1, r8, #3
 801b676:	1b49      	subs	r1, r1, r5
 801b678:	f021 0103 	bic.w	r1, r1, #3
 801b67c:	3d03      	subs	r5, #3
 801b67e:	45a8      	cmp	r8, r5
 801b680:	bf38      	it	cc
 801b682:	2100      	movcc	r1, #0
 801b684:	440b      	add	r3, r1
 801b686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b68a:	b191      	cbz	r1, 801b6b2 <__mdiff+0x11a>
 801b68c:	6117      	str	r7, [r2, #16]
 801b68e:	e79d      	b.n	801b5cc <__mdiff+0x34>
 801b690:	f854 1b04 	ldr.w	r1, [r4], #4
 801b694:	46e6      	mov	lr, ip
 801b696:	0c08      	lsrs	r0, r1, #16
 801b698:	fa1c fc81 	uxtah	ip, ip, r1
 801b69c:	4471      	add	r1, lr
 801b69e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b6a2:	b289      	uxth	r1, r1
 801b6a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b6a8:	f846 1b04 	str.w	r1, [r6], #4
 801b6ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b6b0:	e7dd      	b.n	801b66e <__mdiff+0xd6>
 801b6b2:	3f01      	subs	r7, #1
 801b6b4:	e7e7      	b.n	801b686 <__mdiff+0xee>
 801b6b6:	bf00      	nop
 801b6b8:	0801fc53 	.word	0x0801fc53
 801b6bc:	0801fc64 	.word	0x0801fc64

0801b6c0 <__d2b>:
 801b6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b6c4:	460f      	mov	r7, r1
 801b6c6:	2101      	movs	r1, #1
 801b6c8:	ec59 8b10 	vmov	r8, r9, d0
 801b6cc:	4616      	mov	r6, r2
 801b6ce:	f7ff fccd 	bl	801b06c <_Balloc>
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	b930      	cbnz	r0, 801b6e4 <__d2b+0x24>
 801b6d6:	4602      	mov	r2, r0
 801b6d8:	4b23      	ldr	r3, [pc, #140]	@ (801b768 <__d2b+0xa8>)
 801b6da:	4824      	ldr	r0, [pc, #144]	@ (801b76c <__d2b+0xac>)
 801b6dc:	f240 310f 	movw	r1, #783	@ 0x30f
 801b6e0:	f7fe fdc6 	bl	801a270 <__assert_func>
 801b6e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b6e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b6ec:	b10d      	cbz	r5, 801b6f2 <__d2b+0x32>
 801b6ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b6f2:	9301      	str	r3, [sp, #4]
 801b6f4:	f1b8 0300 	subs.w	r3, r8, #0
 801b6f8:	d023      	beq.n	801b742 <__d2b+0x82>
 801b6fa:	4668      	mov	r0, sp
 801b6fc:	9300      	str	r3, [sp, #0]
 801b6fe:	f7ff fd7c 	bl	801b1fa <__lo0bits>
 801b702:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b706:	b1d0      	cbz	r0, 801b73e <__d2b+0x7e>
 801b708:	f1c0 0320 	rsb	r3, r0, #32
 801b70c:	fa02 f303 	lsl.w	r3, r2, r3
 801b710:	430b      	orrs	r3, r1
 801b712:	40c2      	lsrs	r2, r0
 801b714:	6163      	str	r3, [r4, #20]
 801b716:	9201      	str	r2, [sp, #4]
 801b718:	9b01      	ldr	r3, [sp, #4]
 801b71a:	61a3      	str	r3, [r4, #24]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	bf0c      	ite	eq
 801b720:	2201      	moveq	r2, #1
 801b722:	2202      	movne	r2, #2
 801b724:	6122      	str	r2, [r4, #16]
 801b726:	b1a5      	cbz	r5, 801b752 <__d2b+0x92>
 801b728:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b72c:	4405      	add	r5, r0
 801b72e:	603d      	str	r5, [r7, #0]
 801b730:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b734:	6030      	str	r0, [r6, #0]
 801b736:	4620      	mov	r0, r4
 801b738:	b003      	add	sp, #12
 801b73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b73e:	6161      	str	r1, [r4, #20]
 801b740:	e7ea      	b.n	801b718 <__d2b+0x58>
 801b742:	a801      	add	r0, sp, #4
 801b744:	f7ff fd59 	bl	801b1fa <__lo0bits>
 801b748:	9b01      	ldr	r3, [sp, #4]
 801b74a:	6163      	str	r3, [r4, #20]
 801b74c:	3020      	adds	r0, #32
 801b74e:	2201      	movs	r2, #1
 801b750:	e7e8      	b.n	801b724 <__d2b+0x64>
 801b752:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b756:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b75a:	6038      	str	r0, [r7, #0]
 801b75c:	6918      	ldr	r0, [r3, #16]
 801b75e:	f7ff fd2d 	bl	801b1bc <__hi0bits>
 801b762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b766:	e7e5      	b.n	801b734 <__d2b+0x74>
 801b768:	0801fc53 	.word	0x0801fc53
 801b76c:	0801fc64 	.word	0x0801fc64

0801b770 <__ssputs_r>:
 801b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b774:	688e      	ldr	r6, [r1, #8]
 801b776:	461f      	mov	r7, r3
 801b778:	42be      	cmp	r6, r7
 801b77a:	680b      	ldr	r3, [r1, #0]
 801b77c:	4682      	mov	sl, r0
 801b77e:	460c      	mov	r4, r1
 801b780:	4690      	mov	r8, r2
 801b782:	d82d      	bhi.n	801b7e0 <__ssputs_r+0x70>
 801b784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b788:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b78c:	d026      	beq.n	801b7dc <__ssputs_r+0x6c>
 801b78e:	6965      	ldr	r5, [r4, #20]
 801b790:	6909      	ldr	r1, [r1, #16]
 801b792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b796:	eba3 0901 	sub.w	r9, r3, r1
 801b79a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b79e:	1c7b      	adds	r3, r7, #1
 801b7a0:	444b      	add	r3, r9
 801b7a2:	106d      	asrs	r5, r5, #1
 801b7a4:	429d      	cmp	r5, r3
 801b7a6:	bf38      	it	cc
 801b7a8:	461d      	movcc	r5, r3
 801b7aa:	0553      	lsls	r3, r2, #21
 801b7ac:	d527      	bpl.n	801b7fe <__ssputs_r+0x8e>
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	f7ff fbd0 	bl	801af54 <_malloc_r>
 801b7b4:	4606      	mov	r6, r0
 801b7b6:	b360      	cbz	r0, 801b812 <__ssputs_r+0xa2>
 801b7b8:	6921      	ldr	r1, [r4, #16]
 801b7ba:	464a      	mov	r2, r9
 801b7bc:	f7fe fd49 	bl	801a252 <memcpy>
 801b7c0:	89a3      	ldrh	r3, [r4, #12]
 801b7c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b7ca:	81a3      	strh	r3, [r4, #12]
 801b7cc:	6126      	str	r6, [r4, #16]
 801b7ce:	6165      	str	r5, [r4, #20]
 801b7d0:	444e      	add	r6, r9
 801b7d2:	eba5 0509 	sub.w	r5, r5, r9
 801b7d6:	6026      	str	r6, [r4, #0]
 801b7d8:	60a5      	str	r5, [r4, #8]
 801b7da:	463e      	mov	r6, r7
 801b7dc:	42be      	cmp	r6, r7
 801b7de:	d900      	bls.n	801b7e2 <__ssputs_r+0x72>
 801b7e0:	463e      	mov	r6, r7
 801b7e2:	6820      	ldr	r0, [r4, #0]
 801b7e4:	4632      	mov	r2, r6
 801b7e6:	4641      	mov	r1, r8
 801b7e8:	f7fe fc60 	bl	801a0ac <memmove>
 801b7ec:	68a3      	ldr	r3, [r4, #8]
 801b7ee:	1b9b      	subs	r3, r3, r6
 801b7f0:	60a3      	str	r3, [r4, #8]
 801b7f2:	6823      	ldr	r3, [r4, #0]
 801b7f4:	4433      	add	r3, r6
 801b7f6:	6023      	str	r3, [r4, #0]
 801b7f8:	2000      	movs	r0, #0
 801b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7fe:	462a      	mov	r2, r5
 801b800:	f000 fbcf 	bl	801bfa2 <_realloc_r>
 801b804:	4606      	mov	r6, r0
 801b806:	2800      	cmp	r0, #0
 801b808:	d1e0      	bne.n	801b7cc <__ssputs_r+0x5c>
 801b80a:	6921      	ldr	r1, [r4, #16]
 801b80c:	4650      	mov	r0, sl
 801b80e:	f7ff fb2d 	bl	801ae6c <_free_r>
 801b812:	230c      	movs	r3, #12
 801b814:	f8ca 3000 	str.w	r3, [sl]
 801b818:	89a3      	ldrh	r3, [r4, #12]
 801b81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b81e:	81a3      	strh	r3, [r4, #12]
 801b820:	f04f 30ff 	mov.w	r0, #4294967295
 801b824:	e7e9      	b.n	801b7fa <__ssputs_r+0x8a>
	...

0801b828 <_svfiprintf_r>:
 801b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b82c:	4698      	mov	r8, r3
 801b82e:	898b      	ldrh	r3, [r1, #12]
 801b830:	061b      	lsls	r3, r3, #24
 801b832:	b09d      	sub	sp, #116	@ 0x74
 801b834:	4607      	mov	r7, r0
 801b836:	460d      	mov	r5, r1
 801b838:	4614      	mov	r4, r2
 801b83a:	d510      	bpl.n	801b85e <_svfiprintf_r+0x36>
 801b83c:	690b      	ldr	r3, [r1, #16]
 801b83e:	b973      	cbnz	r3, 801b85e <_svfiprintf_r+0x36>
 801b840:	2140      	movs	r1, #64	@ 0x40
 801b842:	f7ff fb87 	bl	801af54 <_malloc_r>
 801b846:	6028      	str	r0, [r5, #0]
 801b848:	6128      	str	r0, [r5, #16]
 801b84a:	b930      	cbnz	r0, 801b85a <_svfiprintf_r+0x32>
 801b84c:	230c      	movs	r3, #12
 801b84e:	603b      	str	r3, [r7, #0]
 801b850:	f04f 30ff 	mov.w	r0, #4294967295
 801b854:	b01d      	add	sp, #116	@ 0x74
 801b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b85a:	2340      	movs	r3, #64	@ 0x40
 801b85c:	616b      	str	r3, [r5, #20]
 801b85e:	2300      	movs	r3, #0
 801b860:	9309      	str	r3, [sp, #36]	@ 0x24
 801b862:	2320      	movs	r3, #32
 801b864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b868:	f8cd 800c 	str.w	r8, [sp, #12]
 801b86c:	2330      	movs	r3, #48	@ 0x30
 801b86e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ba0c <_svfiprintf_r+0x1e4>
 801b872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b876:	f04f 0901 	mov.w	r9, #1
 801b87a:	4623      	mov	r3, r4
 801b87c:	469a      	mov	sl, r3
 801b87e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b882:	b10a      	cbz	r2, 801b888 <_svfiprintf_r+0x60>
 801b884:	2a25      	cmp	r2, #37	@ 0x25
 801b886:	d1f9      	bne.n	801b87c <_svfiprintf_r+0x54>
 801b888:	ebba 0b04 	subs.w	fp, sl, r4
 801b88c:	d00b      	beq.n	801b8a6 <_svfiprintf_r+0x7e>
 801b88e:	465b      	mov	r3, fp
 801b890:	4622      	mov	r2, r4
 801b892:	4629      	mov	r1, r5
 801b894:	4638      	mov	r0, r7
 801b896:	f7ff ff6b 	bl	801b770 <__ssputs_r>
 801b89a:	3001      	adds	r0, #1
 801b89c:	f000 80a7 	beq.w	801b9ee <_svfiprintf_r+0x1c6>
 801b8a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8a2:	445a      	add	r2, fp
 801b8a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801b8a6:	f89a 3000 	ldrb.w	r3, [sl]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	f000 809f 	beq.w	801b9ee <_svfiprintf_r+0x1c6>
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b8b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8ba:	f10a 0a01 	add.w	sl, sl, #1
 801b8be:	9304      	str	r3, [sp, #16]
 801b8c0:	9307      	str	r3, [sp, #28]
 801b8c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b8c6:	931a      	str	r3, [sp, #104]	@ 0x68
 801b8c8:	4654      	mov	r4, sl
 801b8ca:	2205      	movs	r2, #5
 801b8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8d0:	484e      	ldr	r0, [pc, #312]	@ (801ba0c <_svfiprintf_r+0x1e4>)
 801b8d2:	f7e4 fcb5 	bl	8000240 <memchr>
 801b8d6:	9a04      	ldr	r2, [sp, #16]
 801b8d8:	b9d8      	cbnz	r0, 801b912 <_svfiprintf_r+0xea>
 801b8da:	06d0      	lsls	r0, r2, #27
 801b8dc:	bf44      	itt	mi
 801b8de:	2320      	movmi	r3, #32
 801b8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8e4:	0711      	lsls	r1, r2, #28
 801b8e6:	bf44      	itt	mi
 801b8e8:	232b      	movmi	r3, #43	@ 0x2b
 801b8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8ee:	f89a 3000 	ldrb.w	r3, [sl]
 801b8f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8f4:	d015      	beq.n	801b922 <_svfiprintf_r+0xfa>
 801b8f6:	9a07      	ldr	r2, [sp, #28]
 801b8f8:	4654      	mov	r4, sl
 801b8fa:	2000      	movs	r0, #0
 801b8fc:	f04f 0c0a 	mov.w	ip, #10
 801b900:	4621      	mov	r1, r4
 801b902:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b906:	3b30      	subs	r3, #48	@ 0x30
 801b908:	2b09      	cmp	r3, #9
 801b90a:	d94b      	bls.n	801b9a4 <_svfiprintf_r+0x17c>
 801b90c:	b1b0      	cbz	r0, 801b93c <_svfiprintf_r+0x114>
 801b90e:	9207      	str	r2, [sp, #28]
 801b910:	e014      	b.n	801b93c <_svfiprintf_r+0x114>
 801b912:	eba0 0308 	sub.w	r3, r0, r8
 801b916:	fa09 f303 	lsl.w	r3, r9, r3
 801b91a:	4313      	orrs	r3, r2
 801b91c:	9304      	str	r3, [sp, #16]
 801b91e:	46a2      	mov	sl, r4
 801b920:	e7d2      	b.n	801b8c8 <_svfiprintf_r+0xa0>
 801b922:	9b03      	ldr	r3, [sp, #12]
 801b924:	1d19      	adds	r1, r3, #4
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	9103      	str	r1, [sp, #12]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	bfbb      	ittet	lt
 801b92e:	425b      	neglt	r3, r3
 801b930:	f042 0202 	orrlt.w	r2, r2, #2
 801b934:	9307      	strge	r3, [sp, #28]
 801b936:	9307      	strlt	r3, [sp, #28]
 801b938:	bfb8      	it	lt
 801b93a:	9204      	strlt	r2, [sp, #16]
 801b93c:	7823      	ldrb	r3, [r4, #0]
 801b93e:	2b2e      	cmp	r3, #46	@ 0x2e
 801b940:	d10a      	bne.n	801b958 <_svfiprintf_r+0x130>
 801b942:	7863      	ldrb	r3, [r4, #1]
 801b944:	2b2a      	cmp	r3, #42	@ 0x2a
 801b946:	d132      	bne.n	801b9ae <_svfiprintf_r+0x186>
 801b948:	9b03      	ldr	r3, [sp, #12]
 801b94a:	1d1a      	adds	r2, r3, #4
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	9203      	str	r2, [sp, #12]
 801b950:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b954:	3402      	adds	r4, #2
 801b956:	9305      	str	r3, [sp, #20]
 801b958:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ba1c <_svfiprintf_r+0x1f4>
 801b95c:	7821      	ldrb	r1, [r4, #0]
 801b95e:	2203      	movs	r2, #3
 801b960:	4650      	mov	r0, sl
 801b962:	f7e4 fc6d 	bl	8000240 <memchr>
 801b966:	b138      	cbz	r0, 801b978 <_svfiprintf_r+0x150>
 801b968:	9b04      	ldr	r3, [sp, #16]
 801b96a:	eba0 000a 	sub.w	r0, r0, sl
 801b96e:	2240      	movs	r2, #64	@ 0x40
 801b970:	4082      	lsls	r2, r0
 801b972:	4313      	orrs	r3, r2
 801b974:	3401      	adds	r4, #1
 801b976:	9304      	str	r3, [sp, #16]
 801b978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b97c:	4824      	ldr	r0, [pc, #144]	@ (801ba10 <_svfiprintf_r+0x1e8>)
 801b97e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b982:	2206      	movs	r2, #6
 801b984:	f7e4 fc5c 	bl	8000240 <memchr>
 801b988:	2800      	cmp	r0, #0
 801b98a:	d036      	beq.n	801b9fa <_svfiprintf_r+0x1d2>
 801b98c:	4b21      	ldr	r3, [pc, #132]	@ (801ba14 <_svfiprintf_r+0x1ec>)
 801b98e:	bb1b      	cbnz	r3, 801b9d8 <_svfiprintf_r+0x1b0>
 801b990:	9b03      	ldr	r3, [sp, #12]
 801b992:	3307      	adds	r3, #7
 801b994:	f023 0307 	bic.w	r3, r3, #7
 801b998:	3308      	adds	r3, #8
 801b99a:	9303      	str	r3, [sp, #12]
 801b99c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b99e:	4433      	add	r3, r6
 801b9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9a2:	e76a      	b.n	801b87a <_svfiprintf_r+0x52>
 801b9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9a8:	460c      	mov	r4, r1
 801b9aa:	2001      	movs	r0, #1
 801b9ac:	e7a8      	b.n	801b900 <_svfiprintf_r+0xd8>
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	3401      	adds	r4, #1
 801b9b2:	9305      	str	r3, [sp, #20]
 801b9b4:	4619      	mov	r1, r3
 801b9b6:	f04f 0c0a 	mov.w	ip, #10
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9c0:	3a30      	subs	r2, #48	@ 0x30
 801b9c2:	2a09      	cmp	r2, #9
 801b9c4:	d903      	bls.n	801b9ce <_svfiprintf_r+0x1a6>
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d0c6      	beq.n	801b958 <_svfiprintf_r+0x130>
 801b9ca:	9105      	str	r1, [sp, #20]
 801b9cc:	e7c4      	b.n	801b958 <_svfiprintf_r+0x130>
 801b9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9d2:	4604      	mov	r4, r0
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e7f0      	b.n	801b9ba <_svfiprintf_r+0x192>
 801b9d8:	ab03      	add	r3, sp, #12
 801b9da:	9300      	str	r3, [sp, #0]
 801b9dc:	462a      	mov	r2, r5
 801b9de:	4b0e      	ldr	r3, [pc, #56]	@ (801ba18 <_svfiprintf_r+0x1f0>)
 801b9e0:	a904      	add	r1, sp, #16
 801b9e2:	4638      	mov	r0, r7
 801b9e4:	f7fd fd4c 	bl	8019480 <_printf_float>
 801b9e8:	1c42      	adds	r2, r0, #1
 801b9ea:	4606      	mov	r6, r0
 801b9ec:	d1d6      	bne.n	801b99c <_svfiprintf_r+0x174>
 801b9ee:	89ab      	ldrh	r3, [r5, #12]
 801b9f0:	065b      	lsls	r3, r3, #25
 801b9f2:	f53f af2d 	bmi.w	801b850 <_svfiprintf_r+0x28>
 801b9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b9f8:	e72c      	b.n	801b854 <_svfiprintf_r+0x2c>
 801b9fa:	ab03      	add	r3, sp, #12
 801b9fc:	9300      	str	r3, [sp, #0]
 801b9fe:	462a      	mov	r2, r5
 801ba00:	4b05      	ldr	r3, [pc, #20]	@ (801ba18 <_svfiprintf_r+0x1f0>)
 801ba02:	a904      	add	r1, sp, #16
 801ba04:	4638      	mov	r0, r7
 801ba06:	f7fd ffc3 	bl	8019990 <_printf_i>
 801ba0a:	e7ed      	b.n	801b9e8 <_svfiprintf_r+0x1c0>
 801ba0c:	0801fdc0 	.word	0x0801fdc0
 801ba10:	0801fdca 	.word	0x0801fdca
 801ba14:	08019481 	.word	0x08019481
 801ba18:	0801b771 	.word	0x0801b771
 801ba1c:	0801fdc6 	.word	0x0801fdc6

0801ba20 <__sfputc_r>:
 801ba20:	6893      	ldr	r3, [r2, #8]
 801ba22:	3b01      	subs	r3, #1
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	b410      	push	{r4}
 801ba28:	6093      	str	r3, [r2, #8]
 801ba2a:	da08      	bge.n	801ba3e <__sfputc_r+0x1e>
 801ba2c:	6994      	ldr	r4, [r2, #24]
 801ba2e:	42a3      	cmp	r3, r4
 801ba30:	db01      	blt.n	801ba36 <__sfputc_r+0x16>
 801ba32:	290a      	cmp	r1, #10
 801ba34:	d103      	bne.n	801ba3e <__sfputc_r+0x1e>
 801ba36:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba3a:	f7fe ba92 	b.w	8019f62 <__swbuf_r>
 801ba3e:	6813      	ldr	r3, [r2, #0]
 801ba40:	1c58      	adds	r0, r3, #1
 801ba42:	6010      	str	r0, [r2, #0]
 801ba44:	7019      	strb	r1, [r3, #0]
 801ba46:	4608      	mov	r0, r1
 801ba48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba4c:	4770      	bx	lr

0801ba4e <__sfputs_r>:
 801ba4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba50:	4606      	mov	r6, r0
 801ba52:	460f      	mov	r7, r1
 801ba54:	4614      	mov	r4, r2
 801ba56:	18d5      	adds	r5, r2, r3
 801ba58:	42ac      	cmp	r4, r5
 801ba5a:	d101      	bne.n	801ba60 <__sfputs_r+0x12>
 801ba5c:	2000      	movs	r0, #0
 801ba5e:	e007      	b.n	801ba70 <__sfputs_r+0x22>
 801ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba64:	463a      	mov	r2, r7
 801ba66:	4630      	mov	r0, r6
 801ba68:	f7ff ffda 	bl	801ba20 <__sfputc_r>
 801ba6c:	1c43      	adds	r3, r0, #1
 801ba6e:	d1f3      	bne.n	801ba58 <__sfputs_r+0xa>
 801ba70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ba74 <_vfiprintf_r>:
 801ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba78:	460d      	mov	r5, r1
 801ba7a:	b09d      	sub	sp, #116	@ 0x74
 801ba7c:	4614      	mov	r4, r2
 801ba7e:	4698      	mov	r8, r3
 801ba80:	4606      	mov	r6, r0
 801ba82:	b118      	cbz	r0, 801ba8c <_vfiprintf_r+0x18>
 801ba84:	6a03      	ldr	r3, [r0, #32]
 801ba86:	b90b      	cbnz	r3, 801ba8c <_vfiprintf_r+0x18>
 801ba88:	f7fe f92e 	bl	8019ce8 <__sinit>
 801ba8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ba8e:	07d9      	lsls	r1, r3, #31
 801ba90:	d405      	bmi.n	801ba9e <_vfiprintf_r+0x2a>
 801ba92:	89ab      	ldrh	r3, [r5, #12]
 801ba94:	059a      	lsls	r2, r3, #22
 801ba96:	d402      	bmi.n	801ba9e <_vfiprintf_r+0x2a>
 801ba98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ba9a:	f7fe fbd0 	bl	801a23e <__retarget_lock_acquire_recursive>
 801ba9e:	89ab      	ldrh	r3, [r5, #12]
 801baa0:	071b      	lsls	r3, r3, #28
 801baa2:	d501      	bpl.n	801baa8 <_vfiprintf_r+0x34>
 801baa4:	692b      	ldr	r3, [r5, #16]
 801baa6:	b99b      	cbnz	r3, 801bad0 <_vfiprintf_r+0x5c>
 801baa8:	4629      	mov	r1, r5
 801baaa:	4630      	mov	r0, r6
 801baac:	f7fe fa98 	bl	8019fe0 <__swsetup_r>
 801bab0:	b170      	cbz	r0, 801bad0 <_vfiprintf_r+0x5c>
 801bab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bab4:	07dc      	lsls	r4, r3, #31
 801bab6:	d504      	bpl.n	801bac2 <_vfiprintf_r+0x4e>
 801bab8:	f04f 30ff 	mov.w	r0, #4294967295
 801babc:	b01d      	add	sp, #116	@ 0x74
 801babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bac2:	89ab      	ldrh	r3, [r5, #12]
 801bac4:	0598      	lsls	r0, r3, #22
 801bac6:	d4f7      	bmi.n	801bab8 <_vfiprintf_r+0x44>
 801bac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801baca:	f7fe fbb9 	bl	801a240 <__retarget_lock_release_recursive>
 801bace:	e7f3      	b.n	801bab8 <_vfiprintf_r+0x44>
 801bad0:	2300      	movs	r3, #0
 801bad2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bad4:	2320      	movs	r3, #32
 801bad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bada:	f8cd 800c 	str.w	r8, [sp, #12]
 801bade:	2330      	movs	r3, #48	@ 0x30
 801bae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bc90 <_vfiprintf_r+0x21c>
 801bae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bae8:	f04f 0901 	mov.w	r9, #1
 801baec:	4623      	mov	r3, r4
 801baee:	469a      	mov	sl, r3
 801baf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801baf4:	b10a      	cbz	r2, 801bafa <_vfiprintf_r+0x86>
 801baf6:	2a25      	cmp	r2, #37	@ 0x25
 801baf8:	d1f9      	bne.n	801baee <_vfiprintf_r+0x7a>
 801bafa:	ebba 0b04 	subs.w	fp, sl, r4
 801bafe:	d00b      	beq.n	801bb18 <_vfiprintf_r+0xa4>
 801bb00:	465b      	mov	r3, fp
 801bb02:	4622      	mov	r2, r4
 801bb04:	4629      	mov	r1, r5
 801bb06:	4630      	mov	r0, r6
 801bb08:	f7ff ffa1 	bl	801ba4e <__sfputs_r>
 801bb0c:	3001      	adds	r0, #1
 801bb0e:	f000 80a7 	beq.w	801bc60 <_vfiprintf_r+0x1ec>
 801bb12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb14:	445a      	add	r2, fp
 801bb16:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb18:	f89a 3000 	ldrb.w	r3, [sl]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	f000 809f 	beq.w	801bc60 <_vfiprintf_r+0x1ec>
 801bb22:	2300      	movs	r3, #0
 801bb24:	f04f 32ff 	mov.w	r2, #4294967295
 801bb28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb2c:	f10a 0a01 	add.w	sl, sl, #1
 801bb30:	9304      	str	r3, [sp, #16]
 801bb32:	9307      	str	r3, [sp, #28]
 801bb34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bb38:	931a      	str	r3, [sp, #104]	@ 0x68
 801bb3a:	4654      	mov	r4, sl
 801bb3c:	2205      	movs	r2, #5
 801bb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb42:	4853      	ldr	r0, [pc, #332]	@ (801bc90 <_vfiprintf_r+0x21c>)
 801bb44:	f7e4 fb7c 	bl	8000240 <memchr>
 801bb48:	9a04      	ldr	r2, [sp, #16]
 801bb4a:	b9d8      	cbnz	r0, 801bb84 <_vfiprintf_r+0x110>
 801bb4c:	06d1      	lsls	r1, r2, #27
 801bb4e:	bf44      	itt	mi
 801bb50:	2320      	movmi	r3, #32
 801bb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb56:	0713      	lsls	r3, r2, #28
 801bb58:	bf44      	itt	mi
 801bb5a:	232b      	movmi	r3, #43	@ 0x2b
 801bb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb60:	f89a 3000 	ldrb.w	r3, [sl]
 801bb64:	2b2a      	cmp	r3, #42	@ 0x2a
 801bb66:	d015      	beq.n	801bb94 <_vfiprintf_r+0x120>
 801bb68:	9a07      	ldr	r2, [sp, #28]
 801bb6a:	4654      	mov	r4, sl
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	f04f 0c0a 	mov.w	ip, #10
 801bb72:	4621      	mov	r1, r4
 801bb74:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bb78:	3b30      	subs	r3, #48	@ 0x30
 801bb7a:	2b09      	cmp	r3, #9
 801bb7c:	d94b      	bls.n	801bc16 <_vfiprintf_r+0x1a2>
 801bb7e:	b1b0      	cbz	r0, 801bbae <_vfiprintf_r+0x13a>
 801bb80:	9207      	str	r2, [sp, #28]
 801bb82:	e014      	b.n	801bbae <_vfiprintf_r+0x13a>
 801bb84:	eba0 0308 	sub.w	r3, r0, r8
 801bb88:	fa09 f303 	lsl.w	r3, r9, r3
 801bb8c:	4313      	orrs	r3, r2
 801bb8e:	9304      	str	r3, [sp, #16]
 801bb90:	46a2      	mov	sl, r4
 801bb92:	e7d2      	b.n	801bb3a <_vfiprintf_r+0xc6>
 801bb94:	9b03      	ldr	r3, [sp, #12]
 801bb96:	1d19      	adds	r1, r3, #4
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	9103      	str	r1, [sp, #12]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	bfbb      	ittet	lt
 801bba0:	425b      	neglt	r3, r3
 801bba2:	f042 0202 	orrlt.w	r2, r2, #2
 801bba6:	9307      	strge	r3, [sp, #28]
 801bba8:	9307      	strlt	r3, [sp, #28]
 801bbaa:	bfb8      	it	lt
 801bbac:	9204      	strlt	r2, [sp, #16]
 801bbae:	7823      	ldrb	r3, [r4, #0]
 801bbb0:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbb2:	d10a      	bne.n	801bbca <_vfiprintf_r+0x156>
 801bbb4:	7863      	ldrb	r3, [r4, #1]
 801bbb6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bbb8:	d132      	bne.n	801bc20 <_vfiprintf_r+0x1ac>
 801bbba:	9b03      	ldr	r3, [sp, #12]
 801bbbc:	1d1a      	adds	r2, r3, #4
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	9203      	str	r2, [sp, #12]
 801bbc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bbc6:	3402      	adds	r4, #2
 801bbc8:	9305      	str	r3, [sp, #20]
 801bbca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bca0 <_vfiprintf_r+0x22c>
 801bbce:	7821      	ldrb	r1, [r4, #0]
 801bbd0:	2203      	movs	r2, #3
 801bbd2:	4650      	mov	r0, sl
 801bbd4:	f7e4 fb34 	bl	8000240 <memchr>
 801bbd8:	b138      	cbz	r0, 801bbea <_vfiprintf_r+0x176>
 801bbda:	9b04      	ldr	r3, [sp, #16]
 801bbdc:	eba0 000a 	sub.w	r0, r0, sl
 801bbe0:	2240      	movs	r2, #64	@ 0x40
 801bbe2:	4082      	lsls	r2, r0
 801bbe4:	4313      	orrs	r3, r2
 801bbe6:	3401      	adds	r4, #1
 801bbe8:	9304      	str	r3, [sp, #16]
 801bbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbee:	4829      	ldr	r0, [pc, #164]	@ (801bc94 <_vfiprintf_r+0x220>)
 801bbf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bbf4:	2206      	movs	r2, #6
 801bbf6:	f7e4 fb23 	bl	8000240 <memchr>
 801bbfa:	2800      	cmp	r0, #0
 801bbfc:	d03f      	beq.n	801bc7e <_vfiprintf_r+0x20a>
 801bbfe:	4b26      	ldr	r3, [pc, #152]	@ (801bc98 <_vfiprintf_r+0x224>)
 801bc00:	bb1b      	cbnz	r3, 801bc4a <_vfiprintf_r+0x1d6>
 801bc02:	9b03      	ldr	r3, [sp, #12]
 801bc04:	3307      	adds	r3, #7
 801bc06:	f023 0307 	bic.w	r3, r3, #7
 801bc0a:	3308      	adds	r3, #8
 801bc0c:	9303      	str	r3, [sp, #12]
 801bc0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc10:	443b      	add	r3, r7
 801bc12:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc14:	e76a      	b.n	801baec <_vfiprintf_r+0x78>
 801bc16:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc1a:	460c      	mov	r4, r1
 801bc1c:	2001      	movs	r0, #1
 801bc1e:	e7a8      	b.n	801bb72 <_vfiprintf_r+0xfe>
 801bc20:	2300      	movs	r3, #0
 801bc22:	3401      	adds	r4, #1
 801bc24:	9305      	str	r3, [sp, #20]
 801bc26:	4619      	mov	r1, r3
 801bc28:	f04f 0c0a 	mov.w	ip, #10
 801bc2c:	4620      	mov	r0, r4
 801bc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc32:	3a30      	subs	r2, #48	@ 0x30
 801bc34:	2a09      	cmp	r2, #9
 801bc36:	d903      	bls.n	801bc40 <_vfiprintf_r+0x1cc>
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d0c6      	beq.n	801bbca <_vfiprintf_r+0x156>
 801bc3c:	9105      	str	r1, [sp, #20]
 801bc3e:	e7c4      	b.n	801bbca <_vfiprintf_r+0x156>
 801bc40:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc44:	4604      	mov	r4, r0
 801bc46:	2301      	movs	r3, #1
 801bc48:	e7f0      	b.n	801bc2c <_vfiprintf_r+0x1b8>
 801bc4a:	ab03      	add	r3, sp, #12
 801bc4c:	9300      	str	r3, [sp, #0]
 801bc4e:	462a      	mov	r2, r5
 801bc50:	4b12      	ldr	r3, [pc, #72]	@ (801bc9c <_vfiprintf_r+0x228>)
 801bc52:	a904      	add	r1, sp, #16
 801bc54:	4630      	mov	r0, r6
 801bc56:	f7fd fc13 	bl	8019480 <_printf_float>
 801bc5a:	4607      	mov	r7, r0
 801bc5c:	1c78      	adds	r0, r7, #1
 801bc5e:	d1d6      	bne.n	801bc0e <_vfiprintf_r+0x19a>
 801bc60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc62:	07d9      	lsls	r1, r3, #31
 801bc64:	d405      	bmi.n	801bc72 <_vfiprintf_r+0x1fe>
 801bc66:	89ab      	ldrh	r3, [r5, #12]
 801bc68:	059a      	lsls	r2, r3, #22
 801bc6a:	d402      	bmi.n	801bc72 <_vfiprintf_r+0x1fe>
 801bc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc6e:	f7fe fae7 	bl	801a240 <__retarget_lock_release_recursive>
 801bc72:	89ab      	ldrh	r3, [r5, #12]
 801bc74:	065b      	lsls	r3, r3, #25
 801bc76:	f53f af1f 	bmi.w	801bab8 <_vfiprintf_r+0x44>
 801bc7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc7c:	e71e      	b.n	801babc <_vfiprintf_r+0x48>
 801bc7e:	ab03      	add	r3, sp, #12
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	462a      	mov	r2, r5
 801bc84:	4b05      	ldr	r3, [pc, #20]	@ (801bc9c <_vfiprintf_r+0x228>)
 801bc86:	a904      	add	r1, sp, #16
 801bc88:	4630      	mov	r0, r6
 801bc8a:	f7fd fe81 	bl	8019990 <_printf_i>
 801bc8e:	e7e4      	b.n	801bc5a <_vfiprintf_r+0x1e6>
 801bc90:	0801fdc0 	.word	0x0801fdc0
 801bc94:	0801fdca 	.word	0x0801fdca
 801bc98:	08019481 	.word	0x08019481
 801bc9c:	0801ba4f 	.word	0x0801ba4f
 801bca0:	0801fdc6 	.word	0x0801fdc6

0801bca4 <__sflush_r>:
 801bca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcac:	0716      	lsls	r6, r2, #28
 801bcae:	4605      	mov	r5, r0
 801bcb0:	460c      	mov	r4, r1
 801bcb2:	d454      	bmi.n	801bd5e <__sflush_r+0xba>
 801bcb4:	684b      	ldr	r3, [r1, #4]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	dc02      	bgt.n	801bcc0 <__sflush_r+0x1c>
 801bcba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	dd48      	ble.n	801bd52 <__sflush_r+0xae>
 801bcc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bcc2:	2e00      	cmp	r6, #0
 801bcc4:	d045      	beq.n	801bd52 <__sflush_r+0xae>
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bccc:	682f      	ldr	r7, [r5, #0]
 801bcce:	6a21      	ldr	r1, [r4, #32]
 801bcd0:	602b      	str	r3, [r5, #0]
 801bcd2:	d030      	beq.n	801bd36 <__sflush_r+0x92>
 801bcd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bcd6:	89a3      	ldrh	r3, [r4, #12]
 801bcd8:	0759      	lsls	r1, r3, #29
 801bcda:	d505      	bpl.n	801bce8 <__sflush_r+0x44>
 801bcdc:	6863      	ldr	r3, [r4, #4]
 801bcde:	1ad2      	subs	r2, r2, r3
 801bce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bce2:	b10b      	cbz	r3, 801bce8 <__sflush_r+0x44>
 801bce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bce6:	1ad2      	subs	r2, r2, r3
 801bce8:	2300      	movs	r3, #0
 801bcea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bcec:	6a21      	ldr	r1, [r4, #32]
 801bcee:	4628      	mov	r0, r5
 801bcf0:	47b0      	blx	r6
 801bcf2:	1c43      	adds	r3, r0, #1
 801bcf4:	89a3      	ldrh	r3, [r4, #12]
 801bcf6:	d106      	bne.n	801bd06 <__sflush_r+0x62>
 801bcf8:	6829      	ldr	r1, [r5, #0]
 801bcfa:	291d      	cmp	r1, #29
 801bcfc:	d82b      	bhi.n	801bd56 <__sflush_r+0xb2>
 801bcfe:	4a2a      	ldr	r2, [pc, #168]	@ (801bda8 <__sflush_r+0x104>)
 801bd00:	410a      	asrs	r2, r1
 801bd02:	07d6      	lsls	r6, r2, #31
 801bd04:	d427      	bmi.n	801bd56 <__sflush_r+0xb2>
 801bd06:	2200      	movs	r2, #0
 801bd08:	6062      	str	r2, [r4, #4]
 801bd0a:	04d9      	lsls	r1, r3, #19
 801bd0c:	6922      	ldr	r2, [r4, #16]
 801bd0e:	6022      	str	r2, [r4, #0]
 801bd10:	d504      	bpl.n	801bd1c <__sflush_r+0x78>
 801bd12:	1c42      	adds	r2, r0, #1
 801bd14:	d101      	bne.n	801bd1a <__sflush_r+0x76>
 801bd16:	682b      	ldr	r3, [r5, #0]
 801bd18:	b903      	cbnz	r3, 801bd1c <__sflush_r+0x78>
 801bd1a:	6560      	str	r0, [r4, #84]	@ 0x54
 801bd1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bd1e:	602f      	str	r7, [r5, #0]
 801bd20:	b1b9      	cbz	r1, 801bd52 <__sflush_r+0xae>
 801bd22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd26:	4299      	cmp	r1, r3
 801bd28:	d002      	beq.n	801bd30 <__sflush_r+0x8c>
 801bd2a:	4628      	mov	r0, r5
 801bd2c:	f7ff f89e 	bl	801ae6c <_free_r>
 801bd30:	2300      	movs	r3, #0
 801bd32:	6363      	str	r3, [r4, #52]	@ 0x34
 801bd34:	e00d      	b.n	801bd52 <__sflush_r+0xae>
 801bd36:	2301      	movs	r3, #1
 801bd38:	4628      	mov	r0, r5
 801bd3a:	47b0      	blx	r6
 801bd3c:	4602      	mov	r2, r0
 801bd3e:	1c50      	adds	r0, r2, #1
 801bd40:	d1c9      	bne.n	801bcd6 <__sflush_r+0x32>
 801bd42:	682b      	ldr	r3, [r5, #0]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d0c6      	beq.n	801bcd6 <__sflush_r+0x32>
 801bd48:	2b1d      	cmp	r3, #29
 801bd4a:	d001      	beq.n	801bd50 <__sflush_r+0xac>
 801bd4c:	2b16      	cmp	r3, #22
 801bd4e:	d11e      	bne.n	801bd8e <__sflush_r+0xea>
 801bd50:	602f      	str	r7, [r5, #0]
 801bd52:	2000      	movs	r0, #0
 801bd54:	e022      	b.n	801bd9c <__sflush_r+0xf8>
 801bd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd5a:	b21b      	sxth	r3, r3
 801bd5c:	e01b      	b.n	801bd96 <__sflush_r+0xf2>
 801bd5e:	690f      	ldr	r7, [r1, #16]
 801bd60:	2f00      	cmp	r7, #0
 801bd62:	d0f6      	beq.n	801bd52 <__sflush_r+0xae>
 801bd64:	0793      	lsls	r3, r2, #30
 801bd66:	680e      	ldr	r6, [r1, #0]
 801bd68:	bf08      	it	eq
 801bd6a:	694b      	ldreq	r3, [r1, #20]
 801bd6c:	600f      	str	r7, [r1, #0]
 801bd6e:	bf18      	it	ne
 801bd70:	2300      	movne	r3, #0
 801bd72:	eba6 0807 	sub.w	r8, r6, r7
 801bd76:	608b      	str	r3, [r1, #8]
 801bd78:	f1b8 0f00 	cmp.w	r8, #0
 801bd7c:	dde9      	ble.n	801bd52 <__sflush_r+0xae>
 801bd7e:	6a21      	ldr	r1, [r4, #32]
 801bd80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bd82:	4643      	mov	r3, r8
 801bd84:	463a      	mov	r2, r7
 801bd86:	4628      	mov	r0, r5
 801bd88:	47b0      	blx	r6
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	dc08      	bgt.n	801bda0 <__sflush_r+0xfc>
 801bd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd96:	81a3      	strh	r3, [r4, #12]
 801bd98:	f04f 30ff 	mov.w	r0, #4294967295
 801bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bda0:	4407      	add	r7, r0
 801bda2:	eba8 0800 	sub.w	r8, r8, r0
 801bda6:	e7e7      	b.n	801bd78 <__sflush_r+0xd4>
 801bda8:	dfbffffe 	.word	0xdfbffffe

0801bdac <_fflush_r>:
 801bdac:	b538      	push	{r3, r4, r5, lr}
 801bdae:	690b      	ldr	r3, [r1, #16]
 801bdb0:	4605      	mov	r5, r0
 801bdb2:	460c      	mov	r4, r1
 801bdb4:	b913      	cbnz	r3, 801bdbc <_fflush_r+0x10>
 801bdb6:	2500      	movs	r5, #0
 801bdb8:	4628      	mov	r0, r5
 801bdba:	bd38      	pop	{r3, r4, r5, pc}
 801bdbc:	b118      	cbz	r0, 801bdc6 <_fflush_r+0x1a>
 801bdbe:	6a03      	ldr	r3, [r0, #32]
 801bdc0:	b90b      	cbnz	r3, 801bdc6 <_fflush_r+0x1a>
 801bdc2:	f7fd ff91 	bl	8019ce8 <__sinit>
 801bdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0f3      	beq.n	801bdb6 <_fflush_r+0xa>
 801bdce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bdd0:	07d0      	lsls	r0, r2, #31
 801bdd2:	d404      	bmi.n	801bdde <_fflush_r+0x32>
 801bdd4:	0599      	lsls	r1, r3, #22
 801bdd6:	d402      	bmi.n	801bdde <_fflush_r+0x32>
 801bdd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdda:	f7fe fa30 	bl	801a23e <__retarget_lock_acquire_recursive>
 801bdde:	4628      	mov	r0, r5
 801bde0:	4621      	mov	r1, r4
 801bde2:	f7ff ff5f 	bl	801bca4 <__sflush_r>
 801bde6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bde8:	07da      	lsls	r2, r3, #31
 801bdea:	4605      	mov	r5, r0
 801bdec:	d4e4      	bmi.n	801bdb8 <_fflush_r+0xc>
 801bdee:	89a3      	ldrh	r3, [r4, #12]
 801bdf0:	059b      	lsls	r3, r3, #22
 801bdf2:	d4e1      	bmi.n	801bdb8 <_fflush_r+0xc>
 801bdf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdf6:	f7fe fa23 	bl	801a240 <__retarget_lock_release_recursive>
 801bdfa:	e7dd      	b.n	801bdb8 <_fflush_r+0xc>

0801bdfc <fiprintf>:
 801bdfc:	b40e      	push	{r1, r2, r3}
 801bdfe:	b503      	push	{r0, r1, lr}
 801be00:	4601      	mov	r1, r0
 801be02:	ab03      	add	r3, sp, #12
 801be04:	4805      	ldr	r0, [pc, #20]	@ (801be1c <fiprintf+0x20>)
 801be06:	f853 2b04 	ldr.w	r2, [r3], #4
 801be0a:	6800      	ldr	r0, [r0, #0]
 801be0c:	9301      	str	r3, [sp, #4]
 801be0e:	f7ff fe31 	bl	801ba74 <_vfiprintf_r>
 801be12:	b002      	add	sp, #8
 801be14:	f85d eb04 	ldr.w	lr, [sp], #4
 801be18:	b003      	add	sp, #12
 801be1a:	4770      	bx	lr
 801be1c:	20000028 	.word	0x20000028

0801be20 <__swhatbuf_r>:
 801be20:	b570      	push	{r4, r5, r6, lr}
 801be22:	460c      	mov	r4, r1
 801be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be28:	2900      	cmp	r1, #0
 801be2a:	b096      	sub	sp, #88	@ 0x58
 801be2c:	4615      	mov	r5, r2
 801be2e:	461e      	mov	r6, r3
 801be30:	da0d      	bge.n	801be4e <__swhatbuf_r+0x2e>
 801be32:	89a3      	ldrh	r3, [r4, #12]
 801be34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801be38:	f04f 0100 	mov.w	r1, #0
 801be3c:	bf14      	ite	ne
 801be3e:	2340      	movne	r3, #64	@ 0x40
 801be40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801be44:	2000      	movs	r0, #0
 801be46:	6031      	str	r1, [r6, #0]
 801be48:	602b      	str	r3, [r5, #0]
 801be4a:	b016      	add	sp, #88	@ 0x58
 801be4c:	bd70      	pop	{r4, r5, r6, pc}
 801be4e:	466a      	mov	r2, sp
 801be50:	f000 f848 	bl	801bee4 <_fstat_r>
 801be54:	2800      	cmp	r0, #0
 801be56:	dbec      	blt.n	801be32 <__swhatbuf_r+0x12>
 801be58:	9901      	ldr	r1, [sp, #4]
 801be5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801be5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801be62:	4259      	negs	r1, r3
 801be64:	4159      	adcs	r1, r3
 801be66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801be6a:	e7eb      	b.n	801be44 <__swhatbuf_r+0x24>

0801be6c <__smakebuf_r>:
 801be6c:	898b      	ldrh	r3, [r1, #12]
 801be6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be70:	079d      	lsls	r5, r3, #30
 801be72:	4606      	mov	r6, r0
 801be74:	460c      	mov	r4, r1
 801be76:	d507      	bpl.n	801be88 <__smakebuf_r+0x1c>
 801be78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801be7c:	6023      	str	r3, [r4, #0]
 801be7e:	6123      	str	r3, [r4, #16]
 801be80:	2301      	movs	r3, #1
 801be82:	6163      	str	r3, [r4, #20]
 801be84:	b003      	add	sp, #12
 801be86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be88:	ab01      	add	r3, sp, #4
 801be8a:	466a      	mov	r2, sp
 801be8c:	f7ff ffc8 	bl	801be20 <__swhatbuf_r>
 801be90:	9f00      	ldr	r7, [sp, #0]
 801be92:	4605      	mov	r5, r0
 801be94:	4639      	mov	r1, r7
 801be96:	4630      	mov	r0, r6
 801be98:	f7ff f85c 	bl	801af54 <_malloc_r>
 801be9c:	b948      	cbnz	r0, 801beb2 <__smakebuf_r+0x46>
 801be9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bea2:	059a      	lsls	r2, r3, #22
 801bea4:	d4ee      	bmi.n	801be84 <__smakebuf_r+0x18>
 801bea6:	f023 0303 	bic.w	r3, r3, #3
 801beaa:	f043 0302 	orr.w	r3, r3, #2
 801beae:	81a3      	strh	r3, [r4, #12]
 801beb0:	e7e2      	b.n	801be78 <__smakebuf_r+0xc>
 801beb2:	89a3      	ldrh	r3, [r4, #12]
 801beb4:	6020      	str	r0, [r4, #0]
 801beb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801beba:	81a3      	strh	r3, [r4, #12]
 801bebc:	9b01      	ldr	r3, [sp, #4]
 801bebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bec2:	b15b      	cbz	r3, 801bedc <__smakebuf_r+0x70>
 801bec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bec8:	4630      	mov	r0, r6
 801beca:	f000 f81d 	bl	801bf08 <_isatty_r>
 801bece:	b128      	cbz	r0, 801bedc <__smakebuf_r+0x70>
 801bed0:	89a3      	ldrh	r3, [r4, #12]
 801bed2:	f023 0303 	bic.w	r3, r3, #3
 801bed6:	f043 0301 	orr.w	r3, r3, #1
 801beda:	81a3      	strh	r3, [r4, #12]
 801bedc:	89a3      	ldrh	r3, [r4, #12]
 801bede:	431d      	orrs	r5, r3
 801bee0:	81a5      	strh	r5, [r4, #12]
 801bee2:	e7cf      	b.n	801be84 <__smakebuf_r+0x18>

0801bee4 <_fstat_r>:
 801bee4:	b538      	push	{r3, r4, r5, lr}
 801bee6:	4d07      	ldr	r5, [pc, #28]	@ (801bf04 <_fstat_r+0x20>)
 801bee8:	2300      	movs	r3, #0
 801beea:	4604      	mov	r4, r0
 801beec:	4608      	mov	r0, r1
 801beee:	4611      	mov	r1, r2
 801bef0:	602b      	str	r3, [r5, #0]
 801bef2:	f7e5 fc29 	bl	8001748 <_fstat>
 801bef6:	1c43      	adds	r3, r0, #1
 801bef8:	d102      	bne.n	801bf00 <_fstat_r+0x1c>
 801befa:	682b      	ldr	r3, [r5, #0]
 801befc:	b103      	cbz	r3, 801bf00 <_fstat_r+0x1c>
 801befe:	6023      	str	r3, [r4, #0]
 801bf00:	bd38      	pop	{r3, r4, r5, pc}
 801bf02:	bf00      	nop
 801bf04:	20011ed8 	.word	0x20011ed8

0801bf08 <_isatty_r>:
 801bf08:	b538      	push	{r3, r4, r5, lr}
 801bf0a:	4d06      	ldr	r5, [pc, #24]	@ (801bf24 <_isatty_r+0x1c>)
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	4604      	mov	r4, r0
 801bf10:	4608      	mov	r0, r1
 801bf12:	602b      	str	r3, [r5, #0]
 801bf14:	f7e5 fc28 	bl	8001768 <_isatty>
 801bf18:	1c43      	adds	r3, r0, #1
 801bf1a:	d102      	bne.n	801bf22 <_isatty_r+0x1a>
 801bf1c:	682b      	ldr	r3, [r5, #0]
 801bf1e:	b103      	cbz	r3, 801bf22 <_isatty_r+0x1a>
 801bf20:	6023      	str	r3, [r4, #0]
 801bf22:	bd38      	pop	{r3, r4, r5, pc}
 801bf24:	20011ed8 	.word	0x20011ed8

0801bf28 <_sbrk_r>:
 801bf28:	b538      	push	{r3, r4, r5, lr}
 801bf2a:	4d06      	ldr	r5, [pc, #24]	@ (801bf44 <_sbrk_r+0x1c>)
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	4604      	mov	r4, r0
 801bf30:	4608      	mov	r0, r1
 801bf32:	602b      	str	r3, [r5, #0]
 801bf34:	f7e5 fc30 	bl	8001798 <_sbrk>
 801bf38:	1c43      	adds	r3, r0, #1
 801bf3a:	d102      	bne.n	801bf42 <_sbrk_r+0x1a>
 801bf3c:	682b      	ldr	r3, [r5, #0]
 801bf3e:	b103      	cbz	r3, 801bf42 <_sbrk_r+0x1a>
 801bf40:	6023      	str	r3, [r4, #0]
 801bf42:	bd38      	pop	{r3, r4, r5, pc}
 801bf44:	20011ed8 	.word	0x20011ed8

0801bf48 <abort>:
 801bf48:	b508      	push	{r3, lr}
 801bf4a:	2006      	movs	r0, #6
 801bf4c:	f000 f88c 	bl	801c068 <raise>
 801bf50:	2001      	movs	r0, #1
 801bf52:	f7e5 fbc5 	bl	80016e0 <_exit>

0801bf56 <_calloc_r>:
 801bf56:	b570      	push	{r4, r5, r6, lr}
 801bf58:	fba1 5402 	umull	r5, r4, r1, r2
 801bf5c:	b93c      	cbnz	r4, 801bf6e <_calloc_r+0x18>
 801bf5e:	4629      	mov	r1, r5
 801bf60:	f7fe fff8 	bl	801af54 <_malloc_r>
 801bf64:	4606      	mov	r6, r0
 801bf66:	b928      	cbnz	r0, 801bf74 <_calloc_r+0x1e>
 801bf68:	2600      	movs	r6, #0
 801bf6a:	4630      	mov	r0, r6
 801bf6c:	bd70      	pop	{r4, r5, r6, pc}
 801bf6e:	220c      	movs	r2, #12
 801bf70:	6002      	str	r2, [r0, #0]
 801bf72:	e7f9      	b.n	801bf68 <_calloc_r+0x12>
 801bf74:	462a      	mov	r2, r5
 801bf76:	4621      	mov	r1, r4
 801bf78:	f7fe f8b2 	bl	801a0e0 <memset>
 801bf7c:	e7f5      	b.n	801bf6a <_calloc_r+0x14>

0801bf7e <__ascii_mbtowc>:
 801bf7e:	b082      	sub	sp, #8
 801bf80:	b901      	cbnz	r1, 801bf84 <__ascii_mbtowc+0x6>
 801bf82:	a901      	add	r1, sp, #4
 801bf84:	b142      	cbz	r2, 801bf98 <__ascii_mbtowc+0x1a>
 801bf86:	b14b      	cbz	r3, 801bf9c <__ascii_mbtowc+0x1e>
 801bf88:	7813      	ldrb	r3, [r2, #0]
 801bf8a:	600b      	str	r3, [r1, #0]
 801bf8c:	7812      	ldrb	r2, [r2, #0]
 801bf8e:	1e10      	subs	r0, r2, #0
 801bf90:	bf18      	it	ne
 801bf92:	2001      	movne	r0, #1
 801bf94:	b002      	add	sp, #8
 801bf96:	4770      	bx	lr
 801bf98:	4610      	mov	r0, r2
 801bf9a:	e7fb      	b.n	801bf94 <__ascii_mbtowc+0x16>
 801bf9c:	f06f 0001 	mvn.w	r0, #1
 801bfa0:	e7f8      	b.n	801bf94 <__ascii_mbtowc+0x16>

0801bfa2 <_realloc_r>:
 801bfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfa6:	4680      	mov	r8, r0
 801bfa8:	4615      	mov	r5, r2
 801bfaa:	460c      	mov	r4, r1
 801bfac:	b921      	cbnz	r1, 801bfb8 <_realloc_r+0x16>
 801bfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb2:	4611      	mov	r1, r2
 801bfb4:	f7fe bfce 	b.w	801af54 <_malloc_r>
 801bfb8:	b92a      	cbnz	r2, 801bfc6 <_realloc_r+0x24>
 801bfba:	f7fe ff57 	bl	801ae6c <_free_r>
 801bfbe:	2400      	movs	r4, #0
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfc6:	f000 f86b 	bl	801c0a0 <_malloc_usable_size_r>
 801bfca:	4285      	cmp	r5, r0
 801bfcc:	4606      	mov	r6, r0
 801bfce:	d802      	bhi.n	801bfd6 <_realloc_r+0x34>
 801bfd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bfd4:	d8f4      	bhi.n	801bfc0 <_realloc_r+0x1e>
 801bfd6:	4629      	mov	r1, r5
 801bfd8:	4640      	mov	r0, r8
 801bfda:	f7fe ffbb 	bl	801af54 <_malloc_r>
 801bfde:	4607      	mov	r7, r0
 801bfe0:	2800      	cmp	r0, #0
 801bfe2:	d0ec      	beq.n	801bfbe <_realloc_r+0x1c>
 801bfe4:	42b5      	cmp	r5, r6
 801bfe6:	462a      	mov	r2, r5
 801bfe8:	4621      	mov	r1, r4
 801bfea:	bf28      	it	cs
 801bfec:	4632      	movcs	r2, r6
 801bfee:	f7fe f930 	bl	801a252 <memcpy>
 801bff2:	4621      	mov	r1, r4
 801bff4:	4640      	mov	r0, r8
 801bff6:	f7fe ff39 	bl	801ae6c <_free_r>
 801bffa:	463c      	mov	r4, r7
 801bffc:	e7e0      	b.n	801bfc0 <_realloc_r+0x1e>

0801bffe <__ascii_wctomb>:
 801bffe:	4603      	mov	r3, r0
 801c000:	4608      	mov	r0, r1
 801c002:	b141      	cbz	r1, 801c016 <__ascii_wctomb+0x18>
 801c004:	2aff      	cmp	r2, #255	@ 0xff
 801c006:	d904      	bls.n	801c012 <__ascii_wctomb+0x14>
 801c008:	228a      	movs	r2, #138	@ 0x8a
 801c00a:	601a      	str	r2, [r3, #0]
 801c00c:	f04f 30ff 	mov.w	r0, #4294967295
 801c010:	4770      	bx	lr
 801c012:	700a      	strb	r2, [r1, #0]
 801c014:	2001      	movs	r0, #1
 801c016:	4770      	bx	lr

0801c018 <_raise_r>:
 801c018:	291f      	cmp	r1, #31
 801c01a:	b538      	push	{r3, r4, r5, lr}
 801c01c:	4605      	mov	r5, r0
 801c01e:	460c      	mov	r4, r1
 801c020:	d904      	bls.n	801c02c <_raise_r+0x14>
 801c022:	2316      	movs	r3, #22
 801c024:	6003      	str	r3, [r0, #0]
 801c026:	f04f 30ff 	mov.w	r0, #4294967295
 801c02a:	bd38      	pop	{r3, r4, r5, pc}
 801c02c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c02e:	b112      	cbz	r2, 801c036 <_raise_r+0x1e>
 801c030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c034:	b94b      	cbnz	r3, 801c04a <_raise_r+0x32>
 801c036:	4628      	mov	r0, r5
 801c038:	f000 f830 	bl	801c09c <_getpid_r>
 801c03c:	4622      	mov	r2, r4
 801c03e:	4601      	mov	r1, r0
 801c040:	4628      	mov	r0, r5
 801c042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c046:	f000 b817 	b.w	801c078 <_kill_r>
 801c04a:	2b01      	cmp	r3, #1
 801c04c:	d00a      	beq.n	801c064 <_raise_r+0x4c>
 801c04e:	1c59      	adds	r1, r3, #1
 801c050:	d103      	bne.n	801c05a <_raise_r+0x42>
 801c052:	2316      	movs	r3, #22
 801c054:	6003      	str	r3, [r0, #0]
 801c056:	2001      	movs	r0, #1
 801c058:	e7e7      	b.n	801c02a <_raise_r+0x12>
 801c05a:	2100      	movs	r1, #0
 801c05c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c060:	4620      	mov	r0, r4
 801c062:	4798      	blx	r3
 801c064:	2000      	movs	r0, #0
 801c066:	e7e0      	b.n	801c02a <_raise_r+0x12>

0801c068 <raise>:
 801c068:	4b02      	ldr	r3, [pc, #8]	@ (801c074 <raise+0xc>)
 801c06a:	4601      	mov	r1, r0
 801c06c:	6818      	ldr	r0, [r3, #0]
 801c06e:	f7ff bfd3 	b.w	801c018 <_raise_r>
 801c072:	bf00      	nop
 801c074:	20000028 	.word	0x20000028

0801c078 <_kill_r>:
 801c078:	b538      	push	{r3, r4, r5, lr}
 801c07a:	4d07      	ldr	r5, [pc, #28]	@ (801c098 <_kill_r+0x20>)
 801c07c:	2300      	movs	r3, #0
 801c07e:	4604      	mov	r4, r0
 801c080:	4608      	mov	r0, r1
 801c082:	4611      	mov	r1, r2
 801c084:	602b      	str	r3, [r5, #0]
 801c086:	f7e5 fb19 	bl	80016bc <_kill>
 801c08a:	1c43      	adds	r3, r0, #1
 801c08c:	d102      	bne.n	801c094 <_kill_r+0x1c>
 801c08e:	682b      	ldr	r3, [r5, #0]
 801c090:	b103      	cbz	r3, 801c094 <_kill_r+0x1c>
 801c092:	6023      	str	r3, [r4, #0]
 801c094:	bd38      	pop	{r3, r4, r5, pc}
 801c096:	bf00      	nop
 801c098:	20011ed8 	.word	0x20011ed8

0801c09c <_getpid_r>:
 801c09c:	f7e5 bb06 	b.w	80016ac <_getpid>

0801c0a0 <_malloc_usable_size_r>:
 801c0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c0a4:	1f18      	subs	r0, r3, #4
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	bfbc      	itt	lt
 801c0aa:	580b      	ldrlt	r3, [r1, r0]
 801c0ac:	18c0      	addlt	r0, r0, r3
 801c0ae:	4770      	bx	lr

0801c0b0 <_init>:
 801c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0b2:	bf00      	nop
 801c0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0b6:	bc08      	pop	{r3}
 801c0b8:	469e      	mov	lr, r3
 801c0ba:	4770      	bx	lr

0801c0bc <_fini>:
 801c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0be:	bf00      	nop
 801c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0c2:	bc08      	pop	{r3}
 801c0c4:	469e      	mov	lr, r3
 801c0c6:	4770      	bx	lr
